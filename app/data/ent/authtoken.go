// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"ncobase/app/data/ent/authtoken"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// AuthToken is the model entity for the AuthToken schema.
type AuthToken struct {
	config `json:"-"`
	// ID of the ent.
	// primary key
	ID string `json:"id,omitempty"`
	// is disabled
	Disabled bool `json:"disabled,omitempty"`
	// created at
	CreatedAt time.Time `json:"created_at,omitempty"`
	// updated at
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// user id
	UserID       string `json:"user_id,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AuthToken) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case authtoken.FieldDisabled:
			values[i] = new(sql.NullBool)
		case authtoken.FieldID, authtoken.FieldUserID:
			values[i] = new(sql.NullString)
		case authtoken.FieldCreatedAt, authtoken.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AuthToken fields.
func (at *AuthToken) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case authtoken.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				at.ID = value.String
			}
		case authtoken.FieldDisabled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field disabled", values[i])
			} else if value.Valid {
				at.Disabled = value.Bool
			}
		case authtoken.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				at.CreatedAt = value.Time
			}
		case authtoken.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				at.UpdatedAt = value.Time
			}
		case authtoken.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				at.UserID = value.String
			}
		default:
			at.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AuthToken.
// This includes values selected through modifiers, order, etc.
func (at *AuthToken) Value(name string) (ent.Value, error) {
	return at.selectValues.Get(name)
}

// Update returns a builder for updating this AuthToken.
// Note that you need to call AuthToken.Unwrap() before calling this method if this AuthToken
// was returned from a transaction, and the transaction was committed or rolled back.
func (at *AuthToken) Update() *AuthTokenUpdateOne {
	return NewAuthTokenClient(at.config).UpdateOne(at)
}

// Unwrap unwraps the AuthToken entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (at *AuthToken) Unwrap() *AuthToken {
	_tx, ok := at.config.driver.(*txDriver)
	if !ok {
		panic("ent: AuthToken is not a transactional entity")
	}
	at.config.driver = _tx.drv
	return at
}

// String implements the fmt.Stringer.
func (at *AuthToken) String() string {
	var builder strings.Builder
	builder.WriteString("AuthToken(")
	builder.WriteString(fmt.Sprintf("id=%v, ", at.ID))
	builder.WriteString("disabled=")
	builder.WriteString(fmt.Sprintf("%v", at.Disabled))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(at.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(at.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(at.UserID)
	builder.WriteByte(')')
	return builder.String()
}

// AuthTokens is a parsable slice of AuthToken.
type AuthTokens []*AuthToken
