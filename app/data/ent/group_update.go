// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/app/data/ent/group"
	"ncobase/app/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// GroupUpdate is the builder for updating Group entities.
type GroupUpdate struct {
	config
	hooks    []Hook
	mutation *GroupMutation
}

// Where appends a list predicates to the GroupUpdate builder.
func (gu *GroupUpdate) Where(ps ...predicate.Group) *GroupUpdate {
	gu.mutation.Where(ps...)
	return gu
}

// SetName sets the "name" field.
func (gu *GroupUpdate) SetName(s string) *GroupUpdate {
	gu.mutation.SetName(s)
	return gu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (gu *GroupUpdate) SetNillableName(s *string) *GroupUpdate {
	if s != nil {
		gu.SetName(*s)
	}
	return gu
}

// ClearName clears the value of the "name" field.
func (gu *GroupUpdate) ClearName() *GroupUpdate {
	gu.mutation.ClearName()
	return gu
}

// SetSlug sets the "slug" field.
func (gu *GroupUpdate) SetSlug(s string) *GroupUpdate {
	gu.mutation.SetSlug(s)
	return gu
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (gu *GroupUpdate) SetNillableSlug(s *string) *GroupUpdate {
	if s != nil {
		gu.SetSlug(*s)
	}
	return gu
}

// ClearSlug clears the value of the "slug" field.
func (gu *GroupUpdate) ClearSlug() *GroupUpdate {
	gu.mutation.ClearSlug()
	return gu
}

// SetDisabled sets the "disabled" field.
func (gu *GroupUpdate) SetDisabled(b bool) *GroupUpdate {
	gu.mutation.SetDisabled(b)
	return gu
}

// SetNillableDisabled sets the "disabled" field if the given value is not nil.
func (gu *GroupUpdate) SetNillableDisabled(b *bool) *GroupUpdate {
	if b != nil {
		gu.SetDisabled(*b)
	}
	return gu
}

// ClearDisabled clears the value of the "disabled" field.
func (gu *GroupUpdate) ClearDisabled() *GroupUpdate {
	gu.mutation.ClearDisabled()
	return gu
}

// SetDescription sets the "description" field.
func (gu *GroupUpdate) SetDescription(s string) *GroupUpdate {
	gu.mutation.SetDescription(s)
	return gu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (gu *GroupUpdate) SetNillableDescription(s *string) *GroupUpdate {
	if s != nil {
		gu.SetDescription(*s)
	}
	return gu
}

// ClearDescription clears the value of the "description" field.
func (gu *GroupUpdate) ClearDescription() *GroupUpdate {
	gu.mutation.ClearDescription()
	return gu
}

// SetLeader sets the "leader" field.
func (gu *GroupUpdate) SetLeader(m map[string]interface{}) *GroupUpdate {
	gu.mutation.SetLeader(m)
	return gu
}

// ClearLeader clears the value of the "leader" field.
func (gu *GroupUpdate) ClearLeader() *GroupUpdate {
	gu.mutation.ClearLeader()
	return gu
}

// SetExtras sets the "extras" field.
func (gu *GroupUpdate) SetExtras(m map[string]interface{}) *GroupUpdate {
	gu.mutation.SetExtras(m)
	return gu
}

// ClearExtras clears the value of the "extras" field.
func (gu *GroupUpdate) ClearExtras() *GroupUpdate {
	gu.mutation.ClearExtras()
	return gu
}

// SetParentID sets the "parent_id" field.
func (gu *GroupUpdate) SetParentID(s string) *GroupUpdate {
	gu.mutation.SetParentID(s)
	return gu
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (gu *GroupUpdate) SetNillableParentID(s *string) *GroupUpdate {
	if s != nil {
		gu.SetParentID(*s)
	}
	return gu
}

// ClearParentID clears the value of the "parent_id" field.
func (gu *GroupUpdate) ClearParentID() *GroupUpdate {
	gu.mutation.ClearParentID()
	return gu
}

// SetTenantID sets the "tenant_id" field.
func (gu *GroupUpdate) SetTenantID(s string) *GroupUpdate {
	gu.mutation.SetTenantID(s)
	return gu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (gu *GroupUpdate) SetNillableTenantID(s *string) *GroupUpdate {
	if s != nil {
		gu.SetTenantID(*s)
	}
	return gu
}

// ClearTenantID clears the value of the "tenant_id" field.
func (gu *GroupUpdate) ClearTenantID() *GroupUpdate {
	gu.mutation.ClearTenantID()
	return gu
}

// SetCreatedBy sets the "created_by" field.
func (gu *GroupUpdate) SetCreatedBy(s string) *GroupUpdate {
	gu.mutation.SetCreatedBy(s)
	return gu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (gu *GroupUpdate) SetNillableCreatedBy(s *string) *GroupUpdate {
	if s != nil {
		gu.SetCreatedBy(*s)
	}
	return gu
}

// ClearCreatedBy clears the value of the "created_by" field.
func (gu *GroupUpdate) ClearCreatedBy() *GroupUpdate {
	gu.mutation.ClearCreatedBy()
	return gu
}

// SetUpdatedBy sets the "updated_by" field.
func (gu *GroupUpdate) SetUpdatedBy(s string) *GroupUpdate {
	gu.mutation.SetUpdatedBy(s)
	return gu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (gu *GroupUpdate) SetNillableUpdatedBy(s *string) *GroupUpdate {
	if s != nil {
		gu.SetUpdatedBy(*s)
	}
	return gu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (gu *GroupUpdate) ClearUpdatedBy() *GroupUpdate {
	gu.mutation.ClearUpdatedBy()
	return gu
}

// SetUpdatedAt sets the "updated_at" field.
func (gu *GroupUpdate) SetUpdatedAt(t time.Time) *GroupUpdate {
	gu.mutation.SetUpdatedAt(t)
	return gu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (gu *GroupUpdate) ClearUpdatedAt() *GroupUpdate {
	gu.mutation.ClearUpdatedAt()
	return gu
}

// Mutation returns the GroupMutation object of the builder.
func (gu *GroupUpdate) Mutation() *GroupMutation {
	return gu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gu *GroupUpdate) Save(ctx context.Context) (int, error) {
	gu.defaults()
	return withHooks(ctx, gu.sqlSave, gu.mutation, gu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gu *GroupUpdate) SaveX(ctx context.Context) int {
	affected, err := gu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gu *GroupUpdate) Exec(ctx context.Context) error {
	_, err := gu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gu *GroupUpdate) ExecX(ctx context.Context) {
	if err := gu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gu *GroupUpdate) defaults() {
	if _, ok := gu.mutation.UpdatedAt(); !ok && !gu.mutation.UpdatedAtCleared() {
		v := group.UpdateDefaultUpdatedAt()
		gu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gu *GroupUpdate) check() error {
	if v, ok := gu.mutation.ParentID(); ok {
		if err := group.ParentIDValidator(v); err != nil {
			return &ValidationError{Name: "parent_id", err: fmt.Errorf(`ent: validator failed for field "Group.parent_id": %w`, err)}
		}
	}
	if v, ok := gu.mutation.TenantID(); ok {
		if err := group.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "Group.tenant_id": %w`, err)}
		}
	}
	if v, ok := gu.mutation.CreatedBy(); ok {
		if err := group.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "Group.created_by": %w`, err)}
		}
	}
	if v, ok := gu.mutation.UpdatedBy(); ok {
		if err := group.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "Group.updated_by": %w`, err)}
		}
	}
	return nil
}

func (gu *GroupUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := gu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(group.Table, group.Columns, sqlgraph.NewFieldSpec(group.FieldID, field.TypeString))
	if ps := gu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gu.mutation.Name(); ok {
		_spec.SetField(group.FieldName, field.TypeString, value)
	}
	if gu.mutation.NameCleared() {
		_spec.ClearField(group.FieldName, field.TypeString)
	}
	if value, ok := gu.mutation.Slug(); ok {
		_spec.SetField(group.FieldSlug, field.TypeString, value)
	}
	if gu.mutation.SlugCleared() {
		_spec.ClearField(group.FieldSlug, field.TypeString)
	}
	if value, ok := gu.mutation.Disabled(); ok {
		_spec.SetField(group.FieldDisabled, field.TypeBool, value)
	}
	if gu.mutation.DisabledCleared() {
		_spec.ClearField(group.FieldDisabled, field.TypeBool)
	}
	if value, ok := gu.mutation.Description(); ok {
		_spec.SetField(group.FieldDescription, field.TypeString, value)
	}
	if gu.mutation.DescriptionCleared() {
		_spec.ClearField(group.FieldDescription, field.TypeString)
	}
	if value, ok := gu.mutation.Leader(); ok {
		_spec.SetField(group.FieldLeader, field.TypeJSON, value)
	}
	if gu.mutation.LeaderCleared() {
		_spec.ClearField(group.FieldLeader, field.TypeJSON)
	}
	if value, ok := gu.mutation.Extras(); ok {
		_spec.SetField(group.FieldExtras, field.TypeJSON, value)
	}
	if gu.mutation.ExtrasCleared() {
		_spec.ClearField(group.FieldExtras, field.TypeJSON)
	}
	if value, ok := gu.mutation.ParentID(); ok {
		_spec.SetField(group.FieldParentID, field.TypeString, value)
	}
	if gu.mutation.ParentIDCleared() {
		_spec.ClearField(group.FieldParentID, field.TypeString)
	}
	if value, ok := gu.mutation.TenantID(); ok {
		_spec.SetField(group.FieldTenantID, field.TypeString, value)
	}
	if gu.mutation.TenantIDCleared() {
		_spec.ClearField(group.FieldTenantID, field.TypeString)
	}
	if value, ok := gu.mutation.CreatedBy(); ok {
		_spec.SetField(group.FieldCreatedBy, field.TypeString, value)
	}
	if gu.mutation.CreatedByCleared() {
		_spec.ClearField(group.FieldCreatedBy, field.TypeString)
	}
	if value, ok := gu.mutation.UpdatedBy(); ok {
		_spec.SetField(group.FieldUpdatedBy, field.TypeString, value)
	}
	if gu.mutation.UpdatedByCleared() {
		_spec.ClearField(group.FieldUpdatedBy, field.TypeString)
	}
	if gu.mutation.CreatedAtCleared() {
		_spec.ClearField(group.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := gu.mutation.UpdatedAt(); ok {
		_spec.SetField(group.FieldUpdatedAt, field.TypeTime, value)
	}
	if gu.mutation.UpdatedAtCleared() {
		_spec.ClearField(group.FieldUpdatedAt, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{group.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	gu.mutation.done = true
	return n, nil
}

// GroupUpdateOne is the builder for updating a single Group entity.
type GroupUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GroupMutation
}

// SetName sets the "name" field.
func (guo *GroupUpdateOne) SetName(s string) *GroupUpdateOne {
	guo.mutation.SetName(s)
	return guo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (guo *GroupUpdateOne) SetNillableName(s *string) *GroupUpdateOne {
	if s != nil {
		guo.SetName(*s)
	}
	return guo
}

// ClearName clears the value of the "name" field.
func (guo *GroupUpdateOne) ClearName() *GroupUpdateOne {
	guo.mutation.ClearName()
	return guo
}

// SetSlug sets the "slug" field.
func (guo *GroupUpdateOne) SetSlug(s string) *GroupUpdateOne {
	guo.mutation.SetSlug(s)
	return guo
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (guo *GroupUpdateOne) SetNillableSlug(s *string) *GroupUpdateOne {
	if s != nil {
		guo.SetSlug(*s)
	}
	return guo
}

// ClearSlug clears the value of the "slug" field.
func (guo *GroupUpdateOne) ClearSlug() *GroupUpdateOne {
	guo.mutation.ClearSlug()
	return guo
}

// SetDisabled sets the "disabled" field.
func (guo *GroupUpdateOne) SetDisabled(b bool) *GroupUpdateOne {
	guo.mutation.SetDisabled(b)
	return guo
}

// SetNillableDisabled sets the "disabled" field if the given value is not nil.
func (guo *GroupUpdateOne) SetNillableDisabled(b *bool) *GroupUpdateOne {
	if b != nil {
		guo.SetDisabled(*b)
	}
	return guo
}

// ClearDisabled clears the value of the "disabled" field.
func (guo *GroupUpdateOne) ClearDisabled() *GroupUpdateOne {
	guo.mutation.ClearDisabled()
	return guo
}

// SetDescription sets the "description" field.
func (guo *GroupUpdateOne) SetDescription(s string) *GroupUpdateOne {
	guo.mutation.SetDescription(s)
	return guo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (guo *GroupUpdateOne) SetNillableDescription(s *string) *GroupUpdateOne {
	if s != nil {
		guo.SetDescription(*s)
	}
	return guo
}

// ClearDescription clears the value of the "description" field.
func (guo *GroupUpdateOne) ClearDescription() *GroupUpdateOne {
	guo.mutation.ClearDescription()
	return guo
}

// SetLeader sets the "leader" field.
func (guo *GroupUpdateOne) SetLeader(m map[string]interface{}) *GroupUpdateOne {
	guo.mutation.SetLeader(m)
	return guo
}

// ClearLeader clears the value of the "leader" field.
func (guo *GroupUpdateOne) ClearLeader() *GroupUpdateOne {
	guo.mutation.ClearLeader()
	return guo
}

// SetExtras sets the "extras" field.
func (guo *GroupUpdateOne) SetExtras(m map[string]interface{}) *GroupUpdateOne {
	guo.mutation.SetExtras(m)
	return guo
}

// ClearExtras clears the value of the "extras" field.
func (guo *GroupUpdateOne) ClearExtras() *GroupUpdateOne {
	guo.mutation.ClearExtras()
	return guo
}

// SetParentID sets the "parent_id" field.
func (guo *GroupUpdateOne) SetParentID(s string) *GroupUpdateOne {
	guo.mutation.SetParentID(s)
	return guo
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (guo *GroupUpdateOne) SetNillableParentID(s *string) *GroupUpdateOne {
	if s != nil {
		guo.SetParentID(*s)
	}
	return guo
}

// ClearParentID clears the value of the "parent_id" field.
func (guo *GroupUpdateOne) ClearParentID() *GroupUpdateOne {
	guo.mutation.ClearParentID()
	return guo
}

// SetTenantID sets the "tenant_id" field.
func (guo *GroupUpdateOne) SetTenantID(s string) *GroupUpdateOne {
	guo.mutation.SetTenantID(s)
	return guo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (guo *GroupUpdateOne) SetNillableTenantID(s *string) *GroupUpdateOne {
	if s != nil {
		guo.SetTenantID(*s)
	}
	return guo
}

// ClearTenantID clears the value of the "tenant_id" field.
func (guo *GroupUpdateOne) ClearTenantID() *GroupUpdateOne {
	guo.mutation.ClearTenantID()
	return guo
}

// SetCreatedBy sets the "created_by" field.
func (guo *GroupUpdateOne) SetCreatedBy(s string) *GroupUpdateOne {
	guo.mutation.SetCreatedBy(s)
	return guo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (guo *GroupUpdateOne) SetNillableCreatedBy(s *string) *GroupUpdateOne {
	if s != nil {
		guo.SetCreatedBy(*s)
	}
	return guo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (guo *GroupUpdateOne) ClearCreatedBy() *GroupUpdateOne {
	guo.mutation.ClearCreatedBy()
	return guo
}

// SetUpdatedBy sets the "updated_by" field.
func (guo *GroupUpdateOne) SetUpdatedBy(s string) *GroupUpdateOne {
	guo.mutation.SetUpdatedBy(s)
	return guo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (guo *GroupUpdateOne) SetNillableUpdatedBy(s *string) *GroupUpdateOne {
	if s != nil {
		guo.SetUpdatedBy(*s)
	}
	return guo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (guo *GroupUpdateOne) ClearUpdatedBy() *GroupUpdateOne {
	guo.mutation.ClearUpdatedBy()
	return guo
}

// SetUpdatedAt sets the "updated_at" field.
func (guo *GroupUpdateOne) SetUpdatedAt(t time.Time) *GroupUpdateOne {
	guo.mutation.SetUpdatedAt(t)
	return guo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (guo *GroupUpdateOne) ClearUpdatedAt() *GroupUpdateOne {
	guo.mutation.ClearUpdatedAt()
	return guo
}

// Mutation returns the GroupMutation object of the builder.
func (guo *GroupUpdateOne) Mutation() *GroupMutation {
	return guo.mutation
}

// Where appends a list predicates to the GroupUpdate builder.
func (guo *GroupUpdateOne) Where(ps ...predicate.Group) *GroupUpdateOne {
	guo.mutation.Where(ps...)
	return guo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (guo *GroupUpdateOne) Select(field string, fields ...string) *GroupUpdateOne {
	guo.fields = append([]string{field}, fields...)
	return guo
}

// Save executes the query and returns the updated Group entity.
func (guo *GroupUpdateOne) Save(ctx context.Context) (*Group, error) {
	guo.defaults()
	return withHooks(ctx, guo.sqlSave, guo.mutation, guo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (guo *GroupUpdateOne) SaveX(ctx context.Context) *Group {
	node, err := guo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (guo *GroupUpdateOne) Exec(ctx context.Context) error {
	_, err := guo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (guo *GroupUpdateOne) ExecX(ctx context.Context) {
	if err := guo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (guo *GroupUpdateOne) defaults() {
	if _, ok := guo.mutation.UpdatedAt(); !ok && !guo.mutation.UpdatedAtCleared() {
		v := group.UpdateDefaultUpdatedAt()
		guo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (guo *GroupUpdateOne) check() error {
	if v, ok := guo.mutation.ParentID(); ok {
		if err := group.ParentIDValidator(v); err != nil {
			return &ValidationError{Name: "parent_id", err: fmt.Errorf(`ent: validator failed for field "Group.parent_id": %w`, err)}
		}
	}
	if v, ok := guo.mutation.TenantID(); ok {
		if err := group.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "Group.tenant_id": %w`, err)}
		}
	}
	if v, ok := guo.mutation.CreatedBy(); ok {
		if err := group.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "Group.created_by": %w`, err)}
		}
	}
	if v, ok := guo.mutation.UpdatedBy(); ok {
		if err := group.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "Group.updated_by": %w`, err)}
		}
	}
	return nil
}

func (guo *GroupUpdateOne) sqlSave(ctx context.Context) (_node *Group, err error) {
	if err := guo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(group.Table, group.Columns, sqlgraph.NewFieldSpec(group.FieldID, field.TypeString))
	id, ok := guo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Group.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := guo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, group.FieldID)
		for _, f := range fields {
			if !group.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != group.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := guo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := guo.mutation.Name(); ok {
		_spec.SetField(group.FieldName, field.TypeString, value)
	}
	if guo.mutation.NameCleared() {
		_spec.ClearField(group.FieldName, field.TypeString)
	}
	if value, ok := guo.mutation.Slug(); ok {
		_spec.SetField(group.FieldSlug, field.TypeString, value)
	}
	if guo.mutation.SlugCleared() {
		_spec.ClearField(group.FieldSlug, field.TypeString)
	}
	if value, ok := guo.mutation.Disabled(); ok {
		_spec.SetField(group.FieldDisabled, field.TypeBool, value)
	}
	if guo.mutation.DisabledCleared() {
		_spec.ClearField(group.FieldDisabled, field.TypeBool)
	}
	if value, ok := guo.mutation.Description(); ok {
		_spec.SetField(group.FieldDescription, field.TypeString, value)
	}
	if guo.mutation.DescriptionCleared() {
		_spec.ClearField(group.FieldDescription, field.TypeString)
	}
	if value, ok := guo.mutation.Leader(); ok {
		_spec.SetField(group.FieldLeader, field.TypeJSON, value)
	}
	if guo.mutation.LeaderCleared() {
		_spec.ClearField(group.FieldLeader, field.TypeJSON)
	}
	if value, ok := guo.mutation.Extras(); ok {
		_spec.SetField(group.FieldExtras, field.TypeJSON, value)
	}
	if guo.mutation.ExtrasCleared() {
		_spec.ClearField(group.FieldExtras, field.TypeJSON)
	}
	if value, ok := guo.mutation.ParentID(); ok {
		_spec.SetField(group.FieldParentID, field.TypeString, value)
	}
	if guo.mutation.ParentIDCleared() {
		_spec.ClearField(group.FieldParentID, field.TypeString)
	}
	if value, ok := guo.mutation.TenantID(); ok {
		_spec.SetField(group.FieldTenantID, field.TypeString, value)
	}
	if guo.mutation.TenantIDCleared() {
		_spec.ClearField(group.FieldTenantID, field.TypeString)
	}
	if value, ok := guo.mutation.CreatedBy(); ok {
		_spec.SetField(group.FieldCreatedBy, field.TypeString, value)
	}
	if guo.mutation.CreatedByCleared() {
		_spec.ClearField(group.FieldCreatedBy, field.TypeString)
	}
	if value, ok := guo.mutation.UpdatedBy(); ok {
		_spec.SetField(group.FieldUpdatedBy, field.TypeString, value)
	}
	if guo.mutation.UpdatedByCleared() {
		_spec.ClearField(group.FieldUpdatedBy, field.TypeString)
	}
	if guo.mutation.CreatedAtCleared() {
		_spec.ClearField(group.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := guo.mutation.UpdatedAt(); ok {
		_spec.SetField(group.FieldUpdatedAt, field.TypeTime, value)
	}
	if guo.mutation.UpdatedAtCleared() {
		_spec.ClearField(group.FieldUpdatedAt, field.TypeTime)
	}
	_node = &Group{config: guo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, guo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{group.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	guo.mutation.done = true
	return _node, nil
}
