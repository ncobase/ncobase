// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/app/data/ent/menu"
	"ncobase/app/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MenuUpdate is the builder for updating Menu entities.
type MenuUpdate struct {
	config
	hooks    []Hook
	mutation *MenuMutation
}

// Where appends a list predicates to the MenuUpdate builder.
func (mu *MenuUpdate) Where(ps ...predicate.Menu) *MenuUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetName sets the "name" field.
func (mu *MenuUpdate) SetName(s string) *MenuUpdate {
	mu.mutation.SetName(s)
	return mu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (mu *MenuUpdate) SetNillableName(s *string) *MenuUpdate {
	if s != nil {
		mu.SetName(*s)
	}
	return mu
}

// ClearName clears the value of the "name" field.
func (mu *MenuUpdate) ClearName() *MenuUpdate {
	mu.mutation.ClearName()
	return mu
}

// SetLabel sets the "label" field.
func (mu *MenuUpdate) SetLabel(s string) *MenuUpdate {
	mu.mutation.SetLabel(s)
	return mu
}

// SetNillableLabel sets the "label" field if the given value is not nil.
func (mu *MenuUpdate) SetNillableLabel(s *string) *MenuUpdate {
	if s != nil {
		mu.SetLabel(*s)
	}
	return mu
}

// ClearLabel clears the value of the "label" field.
func (mu *MenuUpdate) ClearLabel() *MenuUpdate {
	mu.mutation.ClearLabel()
	return mu
}

// SetSlug sets the "slug" field.
func (mu *MenuUpdate) SetSlug(s string) *MenuUpdate {
	mu.mutation.SetSlug(s)
	return mu
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (mu *MenuUpdate) SetNillableSlug(s *string) *MenuUpdate {
	if s != nil {
		mu.SetSlug(*s)
	}
	return mu
}

// ClearSlug clears the value of the "slug" field.
func (mu *MenuUpdate) ClearSlug() *MenuUpdate {
	mu.mutation.ClearSlug()
	return mu
}

// SetType sets the "type" field.
func (mu *MenuUpdate) SetType(s string) *MenuUpdate {
	mu.mutation.SetType(s)
	return mu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (mu *MenuUpdate) SetNillableType(s *string) *MenuUpdate {
	if s != nil {
		mu.SetType(*s)
	}
	return mu
}

// ClearType clears the value of the "type" field.
func (mu *MenuUpdate) ClearType() *MenuUpdate {
	mu.mutation.ClearType()
	return mu
}

// SetPath sets the "path" field.
func (mu *MenuUpdate) SetPath(s string) *MenuUpdate {
	mu.mutation.SetPath(s)
	return mu
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (mu *MenuUpdate) SetNillablePath(s *string) *MenuUpdate {
	if s != nil {
		mu.SetPath(*s)
	}
	return mu
}

// ClearPath clears the value of the "path" field.
func (mu *MenuUpdate) ClearPath() *MenuUpdate {
	mu.mutation.ClearPath()
	return mu
}

// SetTarget sets the "target" field.
func (mu *MenuUpdate) SetTarget(s string) *MenuUpdate {
	mu.mutation.SetTarget(s)
	return mu
}

// SetNillableTarget sets the "target" field if the given value is not nil.
func (mu *MenuUpdate) SetNillableTarget(s *string) *MenuUpdate {
	if s != nil {
		mu.SetTarget(*s)
	}
	return mu
}

// ClearTarget clears the value of the "target" field.
func (mu *MenuUpdate) ClearTarget() *MenuUpdate {
	mu.mutation.ClearTarget()
	return mu
}

// SetIcon sets the "icon" field.
func (mu *MenuUpdate) SetIcon(s string) *MenuUpdate {
	mu.mutation.SetIcon(s)
	return mu
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (mu *MenuUpdate) SetNillableIcon(s *string) *MenuUpdate {
	if s != nil {
		mu.SetIcon(*s)
	}
	return mu
}

// ClearIcon clears the value of the "icon" field.
func (mu *MenuUpdate) ClearIcon() *MenuUpdate {
	mu.mutation.ClearIcon()
	return mu
}

// SetPerms sets the "perms" field.
func (mu *MenuUpdate) SetPerms(s string) *MenuUpdate {
	mu.mutation.SetPerms(s)
	return mu
}

// SetNillablePerms sets the "perms" field if the given value is not nil.
func (mu *MenuUpdate) SetNillablePerms(s *string) *MenuUpdate {
	if s != nil {
		mu.SetPerms(*s)
	}
	return mu
}

// ClearPerms clears the value of the "perms" field.
func (mu *MenuUpdate) ClearPerms() *MenuUpdate {
	mu.mutation.ClearPerms()
	return mu
}

// SetHidden sets the "hidden" field.
func (mu *MenuUpdate) SetHidden(b bool) *MenuUpdate {
	mu.mutation.SetHidden(b)
	return mu
}

// SetNillableHidden sets the "hidden" field if the given value is not nil.
func (mu *MenuUpdate) SetNillableHidden(b *bool) *MenuUpdate {
	if b != nil {
		mu.SetHidden(*b)
	}
	return mu
}

// ClearHidden clears the value of the "hidden" field.
func (mu *MenuUpdate) ClearHidden() *MenuUpdate {
	mu.mutation.ClearHidden()
	return mu
}

// SetOrder sets the "order" field.
func (mu *MenuUpdate) SetOrder(i int) *MenuUpdate {
	mu.mutation.ResetOrder()
	mu.mutation.SetOrder(i)
	return mu
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (mu *MenuUpdate) SetNillableOrder(i *int) *MenuUpdate {
	if i != nil {
		mu.SetOrder(*i)
	}
	return mu
}

// AddOrder adds i to the "order" field.
func (mu *MenuUpdate) AddOrder(i int) *MenuUpdate {
	mu.mutation.AddOrder(i)
	return mu
}

// SetDisabled sets the "disabled" field.
func (mu *MenuUpdate) SetDisabled(b bool) *MenuUpdate {
	mu.mutation.SetDisabled(b)
	return mu
}

// SetNillableDisabled sets the "disabled" field if the given value is not nil.
func (mu *MenuUpdate) SetNillableDisabled(b *bool) *MenuUpdate {
	if b != nil {
		mu.SetDisabled(*b)
	}
	return mu
}

// ClearDisabled clears the value of the "disabled" field.
func (mu *MenuUpdate) ClearDisabled() *MenuUpdate {
	mu.mutation.ClearDisabled()
	return mu
}

// SetExtras sets the "extras" field.
func (mu *MenuUpdate) SetExtras(m map[string]interface{}) *MenuUpdate {
	mu.mutation.SetExtras(m)
	return mu
}

// ClearExtras clears the value of the "extras" field.
func (mu *MenuUpdate) ClearExtras() *MenuUpdate {
	mu.mutation.ClearExtras()
	return mu
}

// SetParentID sets the "parent_id" field.
func (mu *MenuUpdate) SetParentID(s string) *MenuUpdate {
	mu.mutation.SetParentID(s)
	return mu
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (mu *MenuUpdate) SetNillableParentID(s *string) *MenuUpdate {
	if s != nil {
		mu.SetParentID(*s)
	}
	return mu
}

// ClearParentID clears the value of the "parent_id" field.
func (mu *MenuUpdate) ClearParentID() *MenuUpdate {
	mu.mutation.ClearParentID()
	return mu
}

// SetTenantID sets the "tenant_id" field.
func (mu *MenuUpdate) SetTenantID(s string) *MenuUpdate {
	mu.mutation.SetTenantID(s)
	return mu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (mu *MenuUpdate) SetNillableTenantID(s *string) *MenuUpdate {
	if s != nil {
		mu.SetTenantID(*s)
	}
	return mu
}

// ClearTenantID clears the value of the "tenant_id" field.
func (mu *MenuUpdate) ClearTenantID() *MenuUpdate {
	mu.mutation.ClearTenantID()
	return mu
}

// SetCreatedBy sets the "created_by" field.
func (mu *MenuUpdate) SetCreatedBy(s string) *MenuUpdate {
	mu.mutation.SetCreatedBy(s)
	return mu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (mu *MenuUpdate) SetNillableCreatedBy(s *string) *MenuUpdate {
	if s != nil {
		mu.SetCreatedBy(*s)
	}
	return mu
}

// ClearCreatedBy clears the value of the "created_by" field.
func (mu *MenuUpdate) ClearCreatedBy() *MenuUpdate {
	mu.mutation.ClearCreatedBy()
	return mu
}

// SetUpdatedBy sets the "updated_by" field.
func (mu *MenuUpdate) SetUpdatedBy(s string) *MenuUpdate {
	mu.mutation.SetUpdatedBy(s)
	return mu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (mu *MenuUpdate) SetNillableUpdatedBy(s *string) *MenuUpdate {
	if s != nil {
		mu.SetUpdatedBy(*s)
	}
	return mu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (mu *MenuUpdate) ClearUpdatedBy() *MenuUpdate {
	mu.mutation.ClearUpdatedBy()
	return mu
}

// SetUpdatedAt sets the "updated_at" field.
func (mu *MenuUpdate) SetUpdatedAt(t time.Time) *MenuUpdate {
	mu.mutation.SetUpdatedAt(t)
	return mu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (mu *MenuUpdate) ClearUpdatedAt() *MenuUpdate {
	mu.mutation.ClearUpdatedAt()
	return mu
}

// Mutation returns the MenuMutation object of the builder.
func (mu *MenuUpdate) Mutation() *MenuMutation {
	return mu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MenuUpdate) Save(ctx context.Context) (int, error) {
	mu.defaults()
	return withHooks(ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MenuUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MenuUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MenuUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mu *MenuUpdate) defaults() {
	if _, ok := mu.mutation.UpdatedAt(); !ok && !mu.mutation.UpdatedAtCleared() {
		v := menu.UpdateDefaultUpdatedAt()
		mu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mu *MenuUpdate) check() error {
	if v, ok := mu.mutation.ParentID(); ok {
		if err := menu.ParentIDValidator(v); err != nil {
			return &ValidationError{Name: "parent_id", err: fmt.Errorf(`ent: validator failed for field "Menu.parent_id": %w`, err)}
		}
	}
	if v, ok := mu.mutation.TenantID(); ok {
		if err := menu.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "Menu.tenant_id": %w`, err)}
		}
	}
	if v, ok := mu.mutation.CreatedBy(); ok {
		if err := menu.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "Menu.created_by": %w`, err)}
		}
	}
	if v, ok := mu.mutation.UpdatedBy(); ok {
		if err := menu.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "Menu.updated_by": %w`, err)}
		}
	}
	return nil
}

func (mu *MenuUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := mu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(menu.Table, menu.Columns, sqlgraph.NewFieldSpec(menu.FieldID, field.TypeString))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.Name(); ok {
		_spec.SetField(menu.FieldName, field.TypeString, value)
	}
	if mu.mutation.NameCleared() {
		_spec.ClearField(menu.FieldName, field.TypeString)
	}
	if value, ok := mu.mutation.Label(); ok {
		_spec.SetField(menu.FieldLabel, field.TypeString, value)
	}
	if mu.mutation.LabelCleared() {
		_spec.ClearField(menu.FieldLabel, field.TypeString)
	}
	if value, ok := mu.mutation.Slug(); ok {
		_spec.SetField(menu.FieldSlug, field.TypeString, value)
	}
	if mu.mutation.SlugCleared() {
		_spec.ClearField(menu.FieldSlug, field.TypeString)
	}
	if value, ok := mu.mutation.GetType(); ok {
		_spec.SetField(menu.FieldType, field.TypeString, value)
	}
	if mu.mutation.TypeCleared() {
		_spec.ClearField(menu.FieldType, field.TypeString)
	}
	if value, ok := mu.mutation.Path(); ok {
		_spec.SetField(menu.FieldPath, field.TypeString, value)
	}
	if mu.mutation.PathCleared() {
		_spec.ClearField(menu.FieldPath, field.TypeString)
	}
	if value, ok := mu.mutation.Target(); ok {
		_spec.SetField(menu.FieldTarget, field.TypeString, value)
	}
	if mu.mutation.TargetCleared() {
		_spec.ClearField(menu.FieldTarget, field.TypeString)
	}
	if value, ok := mu.mutation.Icon(); ok {
		_spec.SetField(menu.FieldIcon, field.TypeString, value)
	}
	if mu.mutation.IconCleared() {
		_spec.ClearField(menu.FieldIcon, field.TypeString)
	}
	if value, ok := mu.mutation.Perms(); ok {
		_spec.SetField(menu.FieldPerms, field.TypeString, value)
	}
	if mu.mutation.PermsCleared() {
		_spec.ClearField(menu.FieldPerms, field.TypeString)
	}
	if value, ok := mu.mutation.Hidden(); ok {
		_spec.SetField(menu.FieldHidden, field.TypeBool, value)
	}
	if mu.mutation.HiddenCleared() {
		_spec.ClearField(menu.FieldHidden, field.TypeBool)
	}
	if value, ok := mu.mutation.Order(); ok {
		_spec.SetField(menu.FieldOrder, field.TypeInt, value)
	}
	if value, ok := mu.mutation.AddedOrder(); ok {
		_spec.AddField(menu.FieldOrder, field.TypeInt, value)
	}
	if value, ok := mu.mutation.Disabled(); ok {
		_spec.SetField(menu.FieldDisabled, field.TypeBool, value)
	}
	if mu.mutation.DisabledCleared() {
		_spec.ClearField(menu.FieldDisabled, field.TypeBool)
	}
	if value, ok := mu.mutation.Extras(); ok {
		_spec.SetField(menu.FieldExtras, field.TypeJSON, value)
	}
	if mu.mutation.ExtrasCleared() {
		_spec.ClearField(menu.FieldExtras, field.TypeJSON)
	}
	if value, ok := mu.mutation.ParentID(); ok {
		_spec.SetField(menu.FieldParentID, field.TypeString, value)
	}
	if mu.mutation.ParentIDCleared() {
		_spec.ClearField(menu.FieldParentID, field.TypeString)
	}
	if value, ok := mu.mutation.TenantID(); ok {
		_spec.SetField(menu.FieldTenantID, field.TypeString, value)
	}
	if mu.mutation.TenantIDCleared() {
		_spec.ClearField(menu.FieldTenantID, field.TypeString)
	}
	if value, ok := mu.mutation.CreatedBy(); ok {
		_spec.SetField(menu.FieldCreatedBy, field.TypeString, value)
	}
	if mu.mutation.CreatedByCleared() {
		_spec.ClearField(menu.FieldCreatedBy, field.TypeString)
	}
	if value, ok := mu.mutation.UpdatedBy(); ok {
		_spec.SetField(menu.FieldUpdatedBy, field.TypeString, value)
	}
	if mu.mutation.UpdatedByCleared() {
		_spec.ClearField(menu.FieldUpdatedBy, field.TypeString)
	}
	if mu.mutation.CreatedAtCleared() {
		_spec.ClearField(menu.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := mu.mutation.UpdatedAt(); ok {
		_spec.SetField(menu.FieldUpdatedAt, field.TypeTime, value)
	}
	if mu.mutation.UpdatedAtCleared() {
		_spec.ClearField(menu.FieldUpdatedAt, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{menu.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// MenuUpdateOne is the builder for updating a single Menu entity.
type MenuUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MenuMutation
}

// SetName sets the "name" field.
func (muo *MenuUpdateOne) SetName(s string) *MenuUpdateOne {
	muo.mutation.SetName(s)
	return muo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (muo *MenuUpdateOne) SetNillableName(s *string) *MenuUpdateOne {
	if s != nil {
		muo.SetName(*s)
	}
	return muo
}

// ClearName clears the value of the "name" field.
func (muo *MenuUpdateOne) ClearName() *MenuUpdateOne {
	muo.mutation.ClearName()
	return muo
}

// SetLabel sets the "label" field.
func (muo *MenuUpdateOne) SetLabel(s string) *MenuUpdateOne {
	muo.mutation.SetLabel(s)
	return muo
}

// SetNillableLabel sets the "label" field if the given value is not nil.
func (muo *MenuUpdateOne) SetNillableLabel(s *string) *MenuUpdateOne {
	if s != nil {
		muo.SetLabel(*s)
	}
	return muo
}

// ClearLabel clears the value of the "label" field.
func (muo *MenuUpdateOne) ClearLabel() *MenuUpdateOne {
	muo.mutation.ClearLabel()
	return muo
}

// SetSlug sets the "slug" field.
func (muo *MenuUpdateOne) SetSlug(s string) *MenuUpdateOne {
	muo.mutation.SetSlug(s)
	return muo
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (muo *MenuUpdateOne) SetNillableSlug(s *string) *MenuUpdateOne {
	if s != nil {
		muo.SetSlug(*s)
	}
	return muo
}

// ClearSlug clears the value of the "slug" field.
func (muo *MenuUpdateOne) ClearSlug() *MenuUpdateOne {
	muo.mutation.ClearSlug()
	return muo
}

// SetType sets the "type" field.
func (muo *MenuUpdateOne) SetType(s string) *MenuUpdateOne {
	muo.mutation.SetType(s)
	return muo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (muo *MenuUpdateOne) SetNillableType(s *string) *MenuUpdateOne {
	if s != nil {
		muo.SetType(*s)
	}
	return muo
}

// ClearType clears the value of the "type" field.
func (muo *MenuUpdateOne) ClearType() *MenuUpdateOne {
	muo.mutation.ClearType()
	return muo
}

// SetPath sets the "path" field.
func (muo *MenuUpdateOne) SetPath(s string) *MenuUpdateOne {
	muo.mutation.SetPath(s)
	return muo
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (muo *MenuUpdateOne) SetNillablePath(s *string) *MenuUpdateOne {
	if s != nil {
		muo.SetPath(*s)
	}
	return muo
}

// ClearPath clears the value of the "path" field.
func (muo *MenuUpdateOne) ClearPath() *MenuUpdateOne {
	muo.mutation.ClearPath()
	return muo
}

// SetTarget sets the "target" field.
func (muo *MenuUpdateOne) SetTarget(s string) *MenuUpdateOne {
	muo.mutation.SetTarget(s)
	return muo
}

// SetNillableTarget sets the "target" field if the given value is not nil.
func (muo *MenuUpdateOne) SetNillableTarget(s *string) *MenuUpdateOne {
	if s != nil {
		muo.SetTarget(*s)
	}
	return muo
}

// ClearTarget clears the value of the "target" field.
func (muo *MenuUpdateOne) ClearTarget() *MenuUpdateOne {
	muo.mutation.ClearTarget()
	return muo
}

// SetIcon sets the "icon" field.
func (muo *MenuUpdateOne) SetIcon(s string) *MenuUpdateOne {
	muo.mutation.SetIcon(s)
	return muo
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (muo *MenuUpdateOne) SetNillableIcon(s *string) *MenuUpdateOne {
	if s != nil {
		muo.SetIcon(*s)
	}
	return muo
}

// ClearIcon clears the value of the "icon" field.
func (muo *MenuUpdateOne) ClearIcon() *MenuUpdateOne {
	muo.mutation.ClearIcon()
	return muo
}

// SetPerms sets the "perms" field.
func (muo *MenuUpdateOne) SetPerms(s string) *MenuUpdateOne {
	muo.mutation.SetPerms(s)
	return muo
}

// SetNillablePerms sets the "perms" field if the given value is not nil.
func (muo *MenuUpdateOne) SetNillablePerms(s *string) *MenuUpdateOne {
	if s != nil {
		muo.SetPerms(*s)
	}
	return muo
}

// ClearPerms clears the value of the "perms" field.
func (muo *MenuUpdateOne) ClearPerms() *MenuUpdateOne {
	muo.mutation.ClearPerms()
	return muo
}

// SetHidden sets the "hidden" field.
func (muo *MenuUpdateOne) SetHidden(b bool) *MenuUpdateOne {
	muo.mutation.SetHidden(b)
	return muo
}

// SetNillableHidden sets the "hidden" field if the given value is not nil.
func (muo *MenuUpdateOne) SetNillableHidden(b *bool) *MenuUpdateOne {
	if b != nil {
		muo.SetHidden(*b)
	}
	return muo
}

// ClearHidden clears the value of the "hidden" field.
func (muo *MenuUpdateOne) ClearHidden() *MenuUpdateOne {
	muo.mutation.ClearHidden()
	return muo
}

// SetOrder sets the "order" field.
func (muo *MenuUpdateOne) SetOrder(i int) *MenuUpdateOne {
	muo.mutation.ResetOrder()
	muo.mutation.SetOrder(i)
	return muo
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (muo *MenuUpdateOne) SetNillableOrder(i *int) *MenuUpdateOne {
	if i != nil {
		muo.SetOrder(*i)
	}
	return muo
}

// AddOrder adds i to the "order" field.
func (muo *MenuUpdateOne) AddOrder(i int) *MenuUpdateOne {
	muo.mutation.AddOrder(i)
	return muo
}

// SetDisabled sets the "disabled" field.
func (muo *MenuUpdateOne) SetDisabled(b bool) *MenuUpdateOne {
	muo.mutation.SetDisabled(b)
	return muo
}

// SetNillableDisabled sets the "disabled" field if the given value is not nil.
func (muo *MenuUpdateOne) SetNillableDisabled(b *bool) *MenuUpdateOne {
	if b != nil {
		muo.SetDisabled(*b)
	}
	return muo
}

// ClearDisabled clears the value of the "disabled" field.
func (muo *MenuUpdateOne) ClearDisabled() *MenuUpdateOne {
	muo.mutation.ClearDisabled()
	return muo
}

// SetExtras sets the "extras" field.
func (muo *MenuUpdateOne) SetExtras(m map[string]interface{}) *MenuUpdateOne {
	muo.mutation.SetExtras(m)
	return muo
}

// ClearExtras clears the value of the "extras" field.
func (muo *MenuUpdateOne) ClearExtras() *MenuUpdateOne {
	muo.mutation.ClearExtras()
	return muo
}

// SetParentID sets the "parent_id" field.
func (muo *MenuUpdateOne) SetParentID(s string) *MenuUpdateOne {
	muo.mutation.SetParentID(s)
	return muo
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (muo *MenuUpdateOne) SetNillableParentID(s *string) *MenuUpdateOne {
	if s != nil {
		muo.SetParentID(*s)
	}
	return muo
}

// ClearParentID clears the value of the "parent_id" field.
func (muo *MenuUpdateOne) ClearParentID() *MenuUpdateOne {
	muo.mutation.ClearParentID()
	return muo
}

// SetTenantID sets the "tenant_id" field.
func (muo *MenuUpdateOne) SetTenantID(s string) *MenuUpdateOne {
	muo.mutation.SetTenantID(s)
	return muo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (muo *MenuUpdateOne) SetNillableTenantID(s *string) *MenuUpdateOne {
	if s != nil {
		muo.SetTenantID(*s)
	}
	return muo
}

// ClearTenantID clears the value of the "tenant_id" field.
func (muo *MenuUpdateOne) ClearTenantID() *MenuUpdateOne {
	muo.mutation.ClearTenantID()
	return muo
}

// SetCreatedBy sets the "created_by" field.
func (muo *MenuUpdateOne) SetCreatedBy(s string) *MenuUpdateOne {
	muo.mutation.SetCreatedBy(s)
	return muo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (muo *MenuUpdateOne) SetNillableCreatedBy(s *string) *MenuUpdateOne {
	if s != nil {
		muo.SetCreatedBy(*s)
	}
	return muo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (muo *MenuUpdateOne) ClearCreatedBy() *MenuUpdateOne {
	muo.mutation.ClearCreatedBy()
	return muo
}

// SetUpdatedBy sets the "updated_by" field.
func (muo *MenuUpdateOne) SetUpdatedBy(s string) *MenuUpdateOne {
	muo.mutation.SetUpdatedBy(s)
	return muo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (muo *MenuUpdateOne) SetNillableUpdatedBy(s *string) *MenuUpdateOne {
	if s != nil {
		muo.SetUpdatedBy(*s)
	}
	return muo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (muo *MenuUpdateOne) ClearUpdatedBy() *MenuUpdateOne {
	muo.mutation.ClearUpdatedBy()
	return muo
}

// SetUpdatedAt sets the "updated_at" field.
func (muo *MenuUpdateOne) SetUpdatedAt(t time.Time) *MenuUpdateOne {
	muo.mutation.SetUpdatedAt(t)
	return muo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (muo *MenuUpdateOne) ClearUpdatedAt() *MenuUpdateOne {
	muo.mutation.ClearUpdatedAt()
	return muo
}

// Mutation returns the MenuMutation object of the builder.
func (muo *MenuUpdateOne) Mutation() *MenuMutation {
	return muo.mutation
}

// Where appends a list predicates to the MenuUpdate builder.
func (muo *MenuUpdateOne) Where(ps ...predicate.Menu) *MenuUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MenuUpdateOne) Select(field string, fields ...string) *MenuUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Menu entity.
func (muo *MenuUpdateOne) Save(ctx context.Context) (*Menu, error) {
	muo.defaults()
	return withHooks(ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MenuUpdateOne) SaveX(ctx context.Context) *Menu {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MenuUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MenuUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (muo *MenuUpdateOne) defaults() {
	if _, ok := muo.mutation.UpdatedAt(); !ok && !muo.mutation.UpdatedAtCleared() {
		v := menu.UpdateDefaultUpdatedAt()
		muo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (muo *MenuUpdateOne) check() error {
	if v, ok := muo.mutation.ParentID(); ok {
		if err := menu.ParentIDValidator(v); err != nil {
			return &ValidationError{Name: "parent_id", err: fmt.Errorf(`ent: validator failed for field "Menu.parent_id": %w`, err)}
		}
	}
	if v, ok := muo.mutation.TenantID(); ok {
		if err := menu.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "Menu.tenant_id": %w`, err)}
		}
	}
	if v, ok := muo.mutation.CreatedBy(); ok {
		if err := menu.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "Menu.created_by": %w`, err)}
		}
	}
	if v, ok := muo.mutation.UpdatedBy(); ok {
		if err := menu.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "Menu.updated_by": %w`, err)}
		}
	}
	return nil
}

func (muo *MenuUpdateOne) sqlSave(ctx context.Context) (_node *Menu, err error) {
	if err := muo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(menu.Table, menu.Columns, sqlgraph.NewFieldSpec(menu.FieldID, field.TypeString))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Menu.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, menu.FieldID)
		for _, f := range fields {
			if !menu.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != menu.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.Name(); ok {
		_spec.SetField(menu.FieldName, field.TypeString, value)
	}
	if muo.mutation.NameCleared() {
		_spec.ClearField(menu.FieldName, field.TypeString)
	}
	if value, ok := muo.mutation.Label(); ok {
		_spec.SetField(menu.FieldLabel, field.TypeString, value)
	}
	if muo.mutation.LabelCleared() {
		_spec.ClearField(menu.FieldLabel, field.TypeString)
	}
	if value, ok := muo.mutation.Slug(); ok {
		_spec.SetField(menu.FieldSlug, field.TypeString, value)
	}
	if muo.mutation.SlugCleared() {
		_spec.ClearField(menu.FieldSlug, field.TypeString)
	}
	if value, ok := muo.mutation.GetType(); ok {
		_spec.SetField(menu.FieldType, field.TypeString, value)
	}
	if muo.mutation.TypeCleared() {
		_spec.ClearField(menu.FieldType, field.TypeString)
	}
	if value, ok := muo.mutation.Path(); ok {
		_spec.SetField(menu.FieldPath, field.TypeString, value)
	}
	if muo.mutation.PathCleared() {
		_spec.ClearField(menu.FieldPath, field.TypeString)
	}
	if value, ok := muo.mutation.Target(); ok {
		_spec.SetField(menu.FieldTarget, field.TypeString, value)
	}
	if muo.mutation.TargetCleared() {
		_spec.ClearField(menu.FieldTarget, field.TypeString)
	}
	if value, ok := muo.mutation.Icon(); ok {
		_spec.SetField(menu.FieldIcon, field.TypeString, value)
	}
	if muo.mutation.IconCleared() {
		_spec.ClearField(menu.FieldIcon, field.TypeString)
	}
	if value, ok := muo.mutation.Perms(); ok {
		_spec.SetField(menu.FieldPerms, field.TypeString, value)
	}
	if muo.mutation.PermsCleared() {
		_spec.ClearField(menu.FieldPerms, field.TypeString)
	}
	if value, ok := muo.mutation.Hidden(); ok {
		_spec.SetField(menu.FieldHidden, field.TypeBool, value)
	}
	if muo.mutation.HiddenCleared() {
		_spec.ClearField(menu.FieldHidden, field.TypeBool)
	}
	if value, ok := muo.mutation.Order(); ok {
		_spec.SetField(menu.FieldOrder, field.TypeInt, value)
	}
	if value, ok := muo.mutation.AddedOrder(); ok {
		_spec.AddField(menu.FieldOrder, field.TypeInt, value)
	}
	if value, ok := muo.mutation.Disabled(); ok {
		_spec.SetField(menu.FieldDisabled, field.TypeBool, value)
	}
	if muo.mutation.DisabledCleared() {
		_spec.ClearField(menu.FieldDisabled, field.TypeBool)
	}
	if value, ok := muo.mutation.Extras(); ok {
		_spec.SetField(menu.FieldExtras, field.TypeJSON, value)
	}
	if muo.mutation.ExtrasCleared() {
		_spec.ClearField(menu.FieldExtras, field.TypeJSON)
	}
	if value, ok := muo.mutation.ParentID(); ok {
		_spec.SetField(menu.FieldParentID, field.TypeString, value)
	}
	if muo.mutation.ParentIDCleared() {
		_spec.ClearField(menu.FieldParentID, field.TypeString)
	}
	if value, ok := muo.mutation.TenantID(); ok {
		_spec.SetField(menu.FieldTenantID, field.TypeString, value)
	}
	if muo.mutation.TenantIDCleared() {
		_spec.ClearField(menu.FieldTenantID, field.TypeString)
	}
	if value, ok := muo.mutation.CreatedBy(); ok {
		_spec.SetField(menu.FieldCreatedBy, field.TypeString, value)
	}
	if muo.mutation.CreatedByCleared() {
		_spec.ClearField(menu.FieldCreatedBy, field.TypeString)
	}
	if value, ok := muo.mutation.UpdatedBy(); ok {
		_spec.SetField(menu.FieldUpdatedBy, field.TypeString, value)
	}
	if muo.mutation.UpdatedByCleared() {
		_spec.ClearField(menu.FieldUpdatedBy, field.TypeString)
	}
	if muo.mutation.CreatedAtCleared() {
		_spec.ClearField(menu.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := muo.mutation.UpdatedAt(); ok {
		_spec.SetField(menu.FieldUpdatedAt, field.TypeTime, value)
	}
	if muo.mutation.UpdatedAtCleared() {
		_spec.ClearField(menu.FieldUpdatedAt, field.TypeTime)
	}
	_node = &Menu{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{menu.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}
