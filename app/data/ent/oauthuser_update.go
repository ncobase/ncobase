// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/app/data/ent/oauthuser"
	"ncobase/app/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OAuthUserUpdate is the builder for updating OAuthUser entities.
type OAuthUserUpdate struct {
	config
	hooks    []Hook
	mutation *OAuthUserMutation
}

// Where appends a list predicates to the OAuthUserUpdate builder.
func (ouu *OAuthUserUpdate) Where(ps ...predicate.OAuthUser) *OAuthUserUpdate {
	ouu.mutation.Where(ps...)
	return ouu
}

// SetOauthID sets the "oauth_id" field.
func (ouu *OAuthUserUpdate) SetOauthID(s string) *OAuthUserUpdate {
	ouu.mutation.SetOauthID(s)
	return ouu
}

// SetNillableOauthID sets the "oauth_id" field if the given value is not nil.
func (ouu *OAuthUserUpdate) SetNillableOauthID(s *string) *OAuthUserUpdate {
	if s != nil {
		ouu.SetOauthID(*s)
	}
	return ouu
}

// ClearOauthID clears the value of the "oauth_id" field.
func (ouu *OAuthUserUpdate) ClearOauthID() *OAuthUserUpdate {
	ouu.mutation.ClearOauthID()
	return ouu
}

// SetAccessToken sets the "access_token" field.
func (ouu *OAuthUserUpdate) SetAccessToken(s string) *OAuthUserUpdate {
	ouu.mutation.SetAccessToken(s)
	return ouu
}

// SetNillableAccessToken sets the "access_token" field if the given value is not nil.
func (ouu *OAuthUserUpdate) SetNillableAccessToken(s *string) *OAuthUserUpdate {
	if s != nil {
		ouu.SetAccessToken(*s)
	}
	return ouu
}

// SetProvider sets the "provider" field.
func (ouu *OAuthUserUpdate) SetProvider(s string) *OAuthUserUpdate {
	ouu.mutation.SetProvider(s)
	return ouu
}

// SetNillableProvider sets the "provider" field if the given value is not nil.
func (ouu *OAuthUserUpdate) SetNillableProvider(s *string) *OAuthUserUpdate {
	if s != nil {
		ouu.SetProvider(*s)
	}
	return ouu
}

// ClearProvider clears the value of the "provider" field.
func (ouu *OAuthUserUpdate) ClearProvider() *OAuthUserUpdate {
	ouu.mutation.ClearProvider()
	return ouu
}

// SetUserID sets the "user_id" field.
func (ouu *OAuthUserUpdate) SetUserID(s string) *OAuthUserUpdate {
	ouu.mutation.SetUserID(s)
	return ouu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (ouu *OAuthUserUpdate) SetNillableUserID(s *string) *OAuthUserUpdate {
	if s != nil {
		ouu.SetUserID(*s)
	}
	return ouu
}

// ClearUserID clears the value of the "user_id" field.
func (ouu *OAuthUserUpdate) ClearUserID() *OAuthUserUpdate {
	ouu.mutation.ClearUserID()
	return ouu
}

// SetUpdatedAt sets the "updated_at" field.
func (ouu *OAuthUserUpdate) SetUpdatedAt(t time.Time) *OAuthUserUpdate {
	ouu.mutation.SetUpdatedAt(t)
	return ouu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (ouu *OAuthUserUpdate) ClearUpdatedAt() *OAuthUserUpdate {
	ouu.mutation.ClearUpdatedAt()
	return ouu
}

// Mutation returns the OAuthUserMutation object of the builder.
func (ouu *OAuthUserUpdate) Mutation() *OAuthUserMutation {
	return ouu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ouu *OAuthUserUpdate) Save(ctx context.Context) (int, error) {
	ouu.defaults()
	return withHooks(ctx, ouu.sqlSave, ouu.mutation, ouu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ouu *OAuthUserUpdate) SaveX(ctx context.Context) int {
	affected, err := ouu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ouu *OAuthUserUpdate) Exec(ctx context.Context) error {
	_, err := ouu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouu *OAuthUserUpdate) ExecX(ctx context.Context) {
	if err := ouu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ouu *OAuthUserUpdate) defaults() {
	if _, ok := ouu.mutation.UpdatedAt(); !ok && !ouu.mutation.UpdatedAtCleared() {
		v := oauthuser.UpdateDefaultUpdatedAt()
		ouu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ouu *OAuthUserUpdate) check() error {
	if v, ok := ouu.mutation.AccessToken(); ok {
		if err := oauthuser.AccessTokenValidator(v); err != nil {
			return &ValidationError{Name: "access_token", err: fmt.Errorf(`ent: validator failed for field "OAuthUser.access_token": %w`, err)}
		}
	}
	if v, ok := ouu.mutation.UserID(); ok {
		if err := oauthuser.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "OAuthUser.user_id": %w`, err)}
		}
	}
	return nil
}

func (ouu *OAuthUserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ouu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(oauthuser.Table, oauthuser.Columns, sqlgraph.NewFieldSpec(oauthuser.FieldID, field.TypeString))
	if ps := ouu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ouu.mutation.OauthID(); ok {
		_spec.SetField(oauthuser.FieldOauthID, field.TypeString, value)
	}
	if ouu.mutation.OauthIDCleared() {
		_spec.ClearField(oauthuser.FieldOauthID, field.TypeString)
	}
	if value, ok := ouu.mutation.AccessToken(); ok {
		_spec.SetField(oauthuser.FieldAccessToken, field.TypeString, value)
	}
	if value, ok := ouu.mutation.Provider(); ok {
		_spec.SetField(oauthuser.FieldProvider, field.TypeString, value)
	}
	if ouu.mutation.ProviderCleared() {
		_spec.ClearField(oauthuser.FieldProvider, field.TypeString)
	}
	if value, ok := ouu.mutation.UserID(); ok {
		_spec.SetField(oauthuser.FieldUserID, field.TypeString, value)
	}
	if ouu.mutation.UserIDCleared() {
		_spec.ClearField(oauthuser.FieldUserID, field.TypeString)
	}
	if ouu.mutation.CreatedAtCleared() {
		_spec.ClearField(oauthuser.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := ouu.mutation.UpdatedAt(); ok {
		_spec.SetField(oauthuser.FieldUpdatedAt, field.TypeTime, value)
	}
	if ouu.mutation.UpdatedAtCleared() {
		_spec.ClearField(oauthuser.FieldUpdatedAt, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ouu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oauthuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ouu.mutation.done = true
	return n, nil
}

// OAuthUserUpdateOne is the builder for updating a single OAuthUser entity.
type OAuthUserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OAuthUserMutation
}

// SetOauthID sets the "oauth_id" field.
func (ouuo *OAuthUserUpdateOne) SetOauthID(s string) *OAuthUserUpdateOne {
	ouuo.mutation.SetOauthID(s)
	return ouuo
}

// SetNillableOauthID sets the "oauth_id" field if the given value is not nil.
func (ouuo *OAuthUserUpdateOne) SetNillableOauthID(s *string) *OAuthUserUpdateOne {
	if s != nil {
		ouuo.SetOauthID(*s)
	}
	return ouuo
}

// ClearOauthID clears the value of the "oauth_id" field.
func (ouuo *OAuthUserUpdateOne) ClearOauthID() *OAuthUserUpdateOne {
	ouuo.mutation.ClearOauthID()
	return ouuo
}

// SetAccessToken sets the "access_token" field.
func (ouuo *OAuthUserUpdateOne) SetAccessToken(s string) *OAuthUserUpdateOne {
	ouuo.mutation.SetAccessToken(s)
	return ouuo
}

// SetNillableAccessToken sets the "access_token" field if the given value is not nil.
func (ouuo *OAuthUserUpdateOne) SetNillableAccessToken(s *string) *OAuthUserUpdateOne {
	if s != nil {
		ouuo.SetAccessToken(*s)
	}
	return ouuo
}

// SetProvider sets the "provider" field.
func (ouuo *OAuthUserUpdateOne) SetProvider(s string) *OAuthUserUpdateOne {
	ouuo.mutation.SetProvider(s)
	return ouuo
}

// SetNillableProvider sets the "provider" field if the given value is not nil.
func (ouuo *OAuthUserUpdateOne) SetNillableProvider(s *string) *OAuthUserUpdateOne {
	if s != nil {
		ouuo.SetProvider(*s)
	}
	return ouuo
}

// ClearProvider clears the value of the "provider" field.
func (ouuo *OAuthUserUpdateOne) ClearProvider() *OAuthUserUpdateOne {
	ouuo.mutation.ClearProvider()
	return ouuo
}

// SetUserID sets the "user_id" field.
func (ouuo *OAuthUserUpdateOne) SetUserID(s string) *OAuthUserUpdateOne {
	ouuo.mutation.SetUserID(s)
	return ouuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (ouuo *OAuthUserUpdateOne) SetNillableUserID(s *string) *OAuthUserUpdateOne {
	if s != nil {
		ouuo.SetUserID(*s)
	}
	return ouuo
}

// ClearUserID clears the value of the "user_id" field.
func (ouuo *OAuthUserUpdateOne) ClearUserID() *OAuthUserUpdateOne {
	ouuo.mutation.ClearUserID()
	return ouuo
}

// SetUpdatedAt sets the "updated_at" field.
func (ouuo *OAuthUserUpdateOne) SetUpdatedAt(t time.Time) *OAuthUserUpdateOne {
	ouuo.mutation.SetUpdatedAt(t)
	return ouuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (ouuo *OAuthUserUpdateOne) ClearUpdatedAt() *OAuthUserUpdateOne {
	ouuo.mutation.ClearUpdatedAt()
	return ouuo
}

// Mutation returns the OAuthUserMutation object of the builder.
func (ouuo *OAuthUserUpdateOne) Mutation() *OAuthUserMutation {
	return ouuo.mutation
}

// Where appends a list predicates to the OAuthUserUpdate builder.
func (ouuo *OAuthUserUpdateOne) Where(ps ...predicate.OAuthUser) *OAuthUserUpdateOne {
	ouuo.mutation.Where(ps...)
	return ouuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ouuo *OAuthUserUpdateOne) Select(field string, fields ...string) *OAuthUserUpdateOne {
	ouuo.fields = append([]string{field}, fields...)
	return ouuo
}

// Save executes the query and returns the updated OAuthUser entity.
func (ouuo *OAuthUserUpdateOne) Save(ctx context.Context) (*OAuthUser, error) {
	ouuo.defaults()
	return withHooks(ctx, ouuo.sqlSave, ouuo.mutation, ouuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ouuo *OAuthUserUpdateOne) SaveX(ctx context.Context) *OAuthUser {
	node, err := ouuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ouuo *OAuthUserUpdateOne) Exec(ctx context.Context) error {
	_, err := ouuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouuo *OAuthUserUpdateOne) ExecX(ctx context.Context) {
	if err := ouuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ouuo *OAuthUserUpdateOne) defaults() {
	if _, ok := ouuo.mutation.UpdatedAt(); !ok && !ouuo.mutation.UpdatedAtCleared() {
		v := oauthuser.UpdateDefaultUpdatedAt()
		ouuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ouuo *OAuthUserUpdateOne) check() error {
	if v, ok := ouuo.mutation.AccessToken(); ok {
		if err := oauthuser.AccessTokenValidator(v); err != nil {
			return &ValidationError{Name: "access_token", err: fmt.Errorf(`ent: validator failed for field "OAuthUser.access_token": %w`, err)}
		}
	}
	if v, ok := ouuo.mutation.UserID(); ok {
		if err := oauthuser.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "OAuthUser.user_id": %w`, err)}
		}
	}
	return nil
}

func (ouuo *OAuthUserUpdateOne) sqlSave(ctx context.Context) (_node *OAuthUser, err error) {
	if err := ouuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(oauthuser.Table, oauthuser.Columns, sqlgraph.NewFieldSpec(oauthuser.FieldID, field.TypeString))
	id, ok := ouuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OAuthUser.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ouuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, oauthuser.FieldID)
		for _, f := range fields {
			if !oauthuser.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != oauthuser.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ouuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ouuo.mutation.OauthID(); ok {
		_spec.SetField(oauthuser.FieldOauthID, field.TypeString, value)
	}
	if ouuo.mutation.OauthIDCleared() {
		_spec.ClearField(oauthuser.FieldOauthID, field.TypeString)
	}
	if value, ok := ouuo.mutation.AccessToken(); ok {
		_spec.SetField(oauthuser.FieldAccessToken, field.TypeString, value)
	}
	if value, ok := ouuo.mutation.Provider(); ok {
		_spec.SetField(oauthuser.FieldProvider, field.TypeString, value)
	}
	if ouuo.mutation.ProviderCleared() {
		_spec.ClearField(oauthuser.FieldProvider, field.TypeString)
	}
	if value, ok := ouuo.mutation.UserID(); ok {
		_spec.SetField(oauthuser.FieldUserID, field.TypeString, value)
	}
	if ouuo.mutation.UserIDCleared() {
		_spec.ClearField(oauthuser.FieldUserID, field.TypeString)
	}
	if ouuo.mutation.CreatedAtCleared() {
		_spec.ClearField(oauthuser.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := ouuo.mutation.UpdatedAt(); ok {
		_spec.SetField(oauthuser.FieldUpdatedAt, field.TypeTime, value)
	}
	if ouuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(oauthuser.FieldUpdatedAt, field.TypeTime)
	}
	_node = &OAuthUser{config: ouuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ouuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oauthuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ouuo.mutation.done = true
	return _node, nil
}
