// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"ncobase/content/data/ent/cmschannel"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// CMSChannel is the model entity for the CMSChannel schema.
type CMSChannel struct {
	config `json:"-"`
	// ID of the ent.
	// primary key
	ID string `json:"id,omitempty"`
	// name
	Name string `json:"name,omitempty"`
	// type
	Type string `json:"type,omitempty"`
	// slug / alias
	Slug string `json:"slug,omitempty"`
	// icon
	Icon string `json:"icon,omitempty"`
	// status: 0 activated, 1 unactivated, 2 disabled
	Status int `json:"status,omitempty"`
	// Extend properties
	Extras map[string]interface{} `json:"extras,omitempty"`
	// space id, e.g. space id, organization id, store id
	SpaceID string `json:"space_id,omitempty"`
	// id of the creator
	CreatedBy string `json:"created_by,omitempty"`
	// id of the last updater
	UpdatedBy string `json:"updated_by,omitempty"`
	// created at
	CreatedAt int64 `json:"created_at,omitempty"`
	// updated at
	UpdatedAt int64 `json:"updated_at,omitempty"`
	// Allowed content types for this channel
	AllowedTypes []string `json:"allowed_types,omitempty"`
	// Channel description
	Description string `json:"description,omitempty"`
	// Channel logo URL
	Logo string `json:"logo,omitempty"`
	// Webhook URL for notifications
	WebhookURL string `json:"webhook_url,omitempty"`
	// Auto publish content to this channel
	AutoPublish bool `json:"auto_publish,omitempty"`
	// Require review before publishing
	RequireReview bool `json:"require_review,omitempty"`
	selectValues  sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CMSChannel) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case cmschannel.FieldExtras, cmschannel.FieldAllowedTypes:
			values[i] = new([]byte)
		case cmschannel.FieldAutoPublish, cmschannel.FieldRequireReview:
			values[i] = new(sql.NullBool)
		case cmschannel.FieldStatus, cmschannel.FieldCreatedAt, cmschannel.FieldUpdatedAt:
			values[i] = new(sql.NullInt64)
		case cmschannel.FieldID, cmschannel.FieldName, cmschannel.FieldType, cmschannel.FieldSlug, cmschannel.FieldIcon, cmschannel.FieldSpaceID, cmschannel.FieldCreatedBy, cmschannel.FieldUpdatedBy, cmschannel.FieldDescription, cmschannel.FieldLogo, cmschannel.FieldWebhookURL:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CMSChannel fields.
func (cc *CMSChannel) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case cmschannel.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				cc.ID = value.String
			}
		case cmschannel.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				cc.Name = value.String
			}
		case cmschannel.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				cc.Type = value.String
			}
		case cmschannel.FieldSlug:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field slug", values[i])
			} else if value.Valid {
				cc.Slug = value.String
			}
		case cmschannel.FieldIcon:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field icon", values[i])
			} else if value.Valid {
				cc.Icon = value.String
			}
		case cmschannel.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				cc.Status = int(value.Int64)
			}
		case cmschannel.FieldExtras:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field extras", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &cc.Extras); err != nil {
					return fmt.Errorf("unmarshal field extras: %w", err)
				}
			}
		case cmschannel.FieldSpaceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field space_id", values[i])
			} else if value.Valid {
				cc.SpaceID = value.String
			}
		case cmschannel.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				cc.CreatedBy = value.String
			}
		case cmschannel.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				cc.UpdatedBy = value.String
			}
		case cmschannel.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				cc.CreatedAt = value.Int64
			}
		case cmschannel.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				cc.UpdatedAt = value.Int64
			}
		case cmschannel.FieldAllowedTypes:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field allowed_types", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &cc.AllowedTypes); err != nil {
					return fmt.Errorf("unmarshal field allowed_types: %w", err)
				}
			}
		case cmschannel.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				cc.Description = value.String
			}
		case cmschannel.FieldLogo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field logo", values[i])
			} else if value.Valid {
				cc.Logo = value.String
			}
		case cmschannel.FieldWebhookURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field webhook_url", values[i])
			} else if value.Valid {
				cc.WebhookURL = value.String
			}
		case cmschannel.FieldAutoPublish:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field auto_publish", values[i])
			} else if value.Valid {
				cc.AutoPublish = value.Bool
			}
		case cmschannel.FieldRequireReview:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field require_review", values[i])
			} else if value.Valid {
				cc.RequireReview = value.Bool
			}
		default:
			cc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CMSChannel.
// This includes values selected through modifiers, order, etc.
func (cc *CMSChannel) Value(name string) (ent.Value, error) {
	return cc.selectValues.Get(name)
}

// Update returns a builder for updating this CMSChannel.
// Note that you need to call CMSChannel.Unwrap() before calling this method if this CMSChannel
// was returned from a transaction, and the transaction was committed or rolled back.
func (cc *CMSChannel) Update() *CMSChannelUpdateOne {
	return NewCMSChannelClient(cc.config).UpdateOne(cc)
}

// Unwrap unwraps the CMSChannel entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cc *CMSChannel) Unwrap() *CMSChannel {
	_tx, ok := cc.config.driver.(*txDriver)
	if !ok {
		panic("ent: CMSChannel is not a transactional entity")
	}
	cc.config.driver = _tx.drv
	return cc
}

// String implements the fmt.Stringer.
func (cc *CMSChannel) String() string {
	var builder strings.Builder
	builder.WriteString("CMSChannel(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cc.ID))
	builder.WriteString("name=")
	builder.WriteString(cc.Name)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(cc.Type)
	builder.WriteString(", ")
	builder.WriteString("slug=")
	builder.WriteString(cc.Slug)
	builder.WriteString(", ")
	builder.WriteString("icon=")
	builder.WriteString(cc.Icon)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", cc.Status))
	builder.WriteString(", ")
	builder.WriteString("extras=")
	builder.WriteString(fmt.Sprintf("%v", cc.Extras))
	builder.WriteString(", ")
	builder.WriteString("space_id=")
	builder.WriteString(cc.SpaceID)
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(cc.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(cc.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", cc.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", cc.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("allowed_types=")
	builder.WriteString(fmt.Sprintf("%v", cc.AllowedTypes))
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(cc.Description)
	builder.WriteString(", ")
	builder.WriteString("logo=")
	builder.WriteString(cc.Logo)
	builder.WriteString(", ")
	builder.WriteString("webhook_url=")
	builder.WriteString(cc.WebhookURL)
	builder.WriteString(", ")
	builder.WriteString("auto_publish=")
	builder.WriteString(fmt.Sprintf("%v", cc.AutoPublish))
	builder.WriteString(", ")
	builder.WriteString("require_review=")
	builder.WriteString(fmt.Sprintf("%v", cc.RequireReview))
	builder.WriteByte(')')
	return builder.String()
}

// CMSChannels is a parsable slice of CMSChannel.
type CMSChannels []*CMSChannel
