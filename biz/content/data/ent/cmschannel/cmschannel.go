// Code generated by ent, DO NOT EDIT.

package cmschannel

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the cmschannel type in the database.
	Label = "cms_channel"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldSlug holds the string denoting the slug field in the database.
	FieldSlug = "slug"
	// FieldIcon holds the string denoting the icon field in the database.
	FieldIcon = "icon"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldExtras holds the string denoting the extras field in the database.
	FieldExtras = "extras"
	// FieldSpaceID holds the string denoting the space_id field in the database.
	FieldSpaceID = "space_id"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldAllowedTypes holds the string denoting the allowed_types field in the database.
	FieldAllowedTypes = "allowed_types"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldLogo holds the string denoting the logo field in the database.
	FieldLogo = "logo"
	// FieldWebhookURL holds the string denoting the webhook_url field in the database.
	FieldWebhookURL = "webhook_url"
	// FieldAutoPublish holds the string denoting the auto_publish field in the database.
	FieldAutoPublish = "auto_publish"
	// FieldRequireReview holds the string denoting the require_review field in the database.
	FieldRequireReview = "require_review"
	// Table holds the table name of the cmschannel in the database.
	Table = "ncse_cms_channel"
)

// Columns holds all SQL columns for cmschannel fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldType,
	FieldSlug,
	FieldIcon,
	FieldStatus,
	FieldExtras,
	FieldSpaceID,
	FieldCreatedBy,
	FieldUpdatedBy,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldAllowedTypes,
	FieldDescription,
	FieldLogo,
	FieldWebhookURL,
	FieldAutoPublish,
	FieldRequireReview,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus int
	// DefaultExtras holds the default value on creation for the "extras" field.
	DefaultExtras map[string]interface{}
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() int64
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() int64
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() int64
	// DefaultAutoPublish holds the default value on creation for the "auto_publish" field.
	DefaultAutoPublish bool
	// DefaultRequireReview holds the default value on creation for the "require_review" field.
	DefaultRequireReview bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)

// OrderOption defines the ordering options for the CMSChannel queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// BySlug orders the results by the slug field.
func BySlug(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSlug, opts...).ToFunc()
}

// ByIcon orders the results by the icon field.
func ByIcon(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIcon, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// BySpaceID orders the results by the space_id field.
func BySpaceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSpaceID, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the updated_by field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByLogo orders the results by the logo field.
func ByLogo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLogo, opts...).ToFunc()
}

// ByWebhookURL orders the results by the webhook_url field.
func ByWebhookURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWebhookURL, opts...).ToFunc()
}

// ByAutoPublish orders the results by the auto_publish field.
func ByAutoPublish(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAutoPublish, opts...).ToFunc()
}

// ByRequireReview orders the results by the require_review field.
func ByRequireReview(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRequireReview, opts...).ToFunc()
}
