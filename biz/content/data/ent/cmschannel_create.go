// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/content/data/ent/cmschannel"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CMSChannelCreate is the builder for creating a CMSChannel entity.
type CMSChannelCreate struct {
	config
	mutation *CMSChannelMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (ccc *CMSChannelCreate) SetName(s string) *CMSChannelCreate {
	ccc.mutation.SetName(s)
	return ccc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ccc *CMSChannelCreate) SetNillableName(s *string) *CMSChannelCreate {
	if s != nil {
		ccc.SetName(*s)
	}
	return ccc
}

// SetType sets the "type" field.
func (ccc *CMSChannelCreate) SetType(s string) *CMSChannelCreate {
	ccc.mutation.SetType(s)
	return ccc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ccc *CMSChannelCreate) SetNillableType(s *string) *CMSChannelCreate {
	if s != nil {
		ccc.SetType(*s)
	}
	return ccc
}

// SetSlug sets the "slug" field.
func (ccc *CMSChannelCreate) SetSlug(s string) *CMSChannelCreate {
	ccc.mutation.SetSlug(s)
	return ccc
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (ccc *CMSChannelCreate) SetNillableSlug(s *string) *CMSChannelCreate {
	if s != nil {
		ccc.SetSlug(*s)
	}
	return ccc
}

// SetIcon sets the "icon" field.
func (ccc *CMSChannelCreate) SetIcon(s string) *CMSChannelCreate {
	ccc.mutation.SetIcon(s)
	return ccc
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (ccc *CMSChannelCreate) SetNillableIcon(s *string) *CMSChannelCreate {
	if s != nil {
		ccc.SetIcon(*s)
	}
	return ccc
}

// SetStatus sets the "status" field.
func (ccc *CMSChannelCreate) SetStatus(i int) *CMSChannelCreate {
	ccc.mutation.SetStatus(i)
	return ccc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ccc *CMSChannelCreate) SetNillableStatus(i *int) *CMSChannelCreate {
	if i != nil {
		ccc.SetStatus(*i)
	}
	return ccc
}

// SetExtras sets the "extras" field.
func (ccc *CMSChannelCreate) SetExtras(m map[string]interface{}) *CMSChannelCreate {
	ccc.mutation.SetExtras(m)
	return ccc
}

// SetTenantID sets the "tenant_id" field.
func (ccc *CMSChannelCreate) SetTenantID(s string) *CMSChannelCreate {
	ccc.mutation.SetTenantID(s)
	return ccc
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (ccc *CMSChannelCreate) SetNillableTenantID(s *string) *CMSChannelCreate {
	if s != nil {
		ccc.SetTenantID(*s)
	}
	return ccc
}

// SetCreatedBy sets the "created_by" field.
func (ccc *CMSChannelCreate) SetCreatedBy(s string) *CMSChannelCreate {
	ccc.mutation.SetCreatedBy(s)
	return ccc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (ccc *CMSChannelCreate) SetNillableCreatedBy(s *string) *CMSChannelCreate {
	if s != nil {
		ccc.SetCreatedBy(*s)
	}
	return ccc
}

// SetUpdatedBy sets the "updated_by" field.
func (ccc *CMSChannelCreate) SetUpdatedBy(s string) *CMSChannelCreate {
	ccc.mutation.SetUpdatedBy(s)
	return ccc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ccc *CMSChannelCreate) SetNillableUpdatedBy(s *string) *CMSChannelCreate {
	if s != nil {
		ccc.SetUpdatedBy(*s)
	}
	return ccc
}

// SetCreatedAt sets the "created_at" field.
func (ccc *CMSChannelCreate) SetCreatedAt(i int64) *CMSChannelCreate {
	ccc.mutation.SetCreatedAt(i)
	return ccc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ccc *CMSChannelCreate) SetNillableCreatedAt(i *int64) *CMSChannelCreate {
	if i != nil {
		ccc.SetCreatedAt(*i)
	}
	return ccc
}

// SetUpdatedAt sets the "updated_at" field.
func (ccc *CMSChannelCreate) SetUpdatedAt(i int64) *CMSChannelCreate {
	ccc.mutation.SetUpdatedAt(i)
	return ccc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ccc *CMSChannelCreate) SetNillableUpdatedAt(i *int64) *CMSChannelCreate {
	if i != nil {
		ccc.SetUpdatedAt(*i)
	}
	return ccc
}

// SetAllowedTypes sets the "allowed_types" field.
func (ccc *CMSChannelCreate) SetAllowedTypes(s []string) *CMSChannelCreate {
	ccc.mutation.SetAllowedTypes(s)
	return ccc
}

// SetDescription sets the "description" field.
func (ccc *CMSChannelCreate) SetDescription(s string) *CMSChannelCreate {
	ccc.mutation.SetDescription(s)
	return ccc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ccc *CMSChannelCreate) SetNillableDescription(s *string) *CMSChannelCreate {
	if s != nil {
		ccc.SetDescription(*s)
	}
	return ccc
}

// SetLogo sets the "logo" field.
func (ccc *CMSChannelCreate) SetLogo(s string) *CMSChannelCreate {
	ccc.mutation.SetLogo(s)
	return ccc
}

// SetNillableLogo sets the "logo" field if the given value is not nil.
func (ccc *CMSChannelCreate) SetNillableLogo(s *string) *CMSChannelCreate {
	if s != nil {
		ccc.SetLogo(*s)
	}
	return ccc
}

// SetWebhookURL sets the "webhook_url" field.
func (ccc *CMSChannelCreate) SetWebhookURL(s string) *CMSChannelCreate {
	ccc.mutation.SetWebhookURL(s)
	return ccc
}

// SetNillableWebhookURL sets the "webhook_url" field if the given value is not nil.
func (ccc *CMSChannelCreate) SetNillableWebhookURL(s *string) *CMSChannelCreate {
	if s != nil {
		ccc.SetWebhookURL(*s)
	}
	return ccc
}

// SetAutoPublish sets the "auto_publish" field.
func (ccc *CMSChannelCreate) SetAutoPublish(b bool) *CMSChannelCreate {
	ccc.mutation.SetAutoPublish(b)
	return ccc
}

// SetNillableAutoPublish sets the "auto_publish" field if the given value is not nil.
func (ccc *CMSChannelCreate) SetNillableAutoPublish(b *bool) *CMSChannelCreate {
	if b != nil {
		ccc.SetAutoPublish(*b)
	}
	return ccc
}

// SetRequireReview sets the "require_review" field.
func (ccc *CMSChannelCreate) SetRequireReview(b bool) *CMSChannelCreate {
	ccc.mutation.SetRequireReview(b)
	return ccc
}

// SetNillableRequireReview sets the "require_review" field if the given value is not nil.
func (ccc *CMSChannelCreate) SetNillableRequireReview(b *bool) *CMSChannelCreate {
	if b != nil {
		ccc.SetRequireReview(*b)
	}
	return ccc
}

// SetID sets the "id" field.
func (ccc *CMSChannelCreate) SetID(s string) *CMSChannelCreate {
	ccc.mutation.SetID(s)
	return ccc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ccc *CMSChannelCreate) SetNillableID(s *string) *CMSChannelCreate {
	if s != nil {
		ccc.SetID(*s)
	}
	return ccc
}

// Mutation returns the CMSChannelMutation object of the builder.
func (ccc *CMSChannelCreate) Mutation() *CMSChannelMutation {
	return ccc.mutation
}

// Save creates the CMSChannel in the database.
func (ccc *CMSChannelCreate) Save(ctx context.Context) (*CMSChannel, error) {
	ccc.defaults()
	return withHooks(ctx, ccc.sqlSave, ccc.mutation, ccc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ccc *CMSChannelCreate) SaveX(ctx context.Context) *CMSChannel {
	v, err := ccc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccc *CMSChannelCreate) Exec(ctx context.Context) error {
	_, err := ccc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccc *CMSChannelCreate) ExecX(ctx context.Context) {
	if err := ccc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ccc *CMSChannelCreate) defaults() {
	if _, ok := ccc.mutation.Status(); !ok {
		v := cmschannel.DefaultStatus
		ccc.mutation.SetStatus(v)
	}
	if _, ok := ccc.mutation.Extras(); !ok {
		v := cmschannel.DefaultExtras
		ccc.mutation.SetExtras(v)
	}
	if _, ok := ccc.mutation.CreatedAt(); !ok {
		v := cmschannel.DefaultCreatedAt()
		ccc.mutation.SetCreatedAt(v)
	}
	if _, ok := ccc.mutation.UpdatedAt(); !ok {
		v := cmschannel.DefaultUpdatedAt()
		ccc.mutation.SetUpdatedAt(v)
	}
	if _, ok := ccc.mutation.AutoPublish(); !ok {
		v := cmschannel.DefaultAutoPublish
		ccc.mutation.SetAutoPublish(v)
	}
	if _, ok := ccc.mutation.RequireReview(); !ok {
		v := cmschannel.DefaultRequireReview
		ccc.mutation.SetRequireReview(v)
	}
	if _, ok := ccc.mutation.ID(); !ok {
		v := cmschannel.DefaultID()
		ccc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ccc *CMSChannelCreate) check() error {
	if _, ok := ccc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "CMSChannel.status"`)}
	}
	if v, ok := ccc.mutation.TenantID(); ok {
		if err := cmschannel.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "CMSChannel.tenant_id": %w`, err)}
		}
	}
	if v, ok := ccc.mutation.CreatedBy(); ok {
		if err := cmschannel.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "CMSChannel.created_by": %w`, err)}
		}
	}
	if v, ok := ccc.mutation.UpdatedBy(); ok {
		if err := cmschannel.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "CMSChannel.updated_by": %w`, err)}
		}
	}
	if _, ok := ccc.mutation.AutoPublish(); !ok {
		return &ValidationError{Name: "auto_publish", err: errors.New(`ent: missing required field "CMSChannel.auto_publish"`)}
	}
	if _, ok := ccc.mutation.RequireReview(); !ok {
		return &ValidationError{Name: "require_review", err: errors.New(`ent: missing required field "CMSChannel.require_review"`)}
	}
	if v, ok := ccc.mutation.ID(); ok {
		if err := cmschannel.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "CMSChannel.id": %w`, err)}
		}
	}
	return nil
}

func (ccc *CMSChannelCreate) sqlSave(ctx context.Context) (*CMSChannel, error) {
	if err := ccc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ccc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ccc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected CMSChannel.ID type: %T", _spec.ID.Value)
		}
	}
	ccc.mutation.id = &_node.ID
	ccc.mutation.done = true
	return _node, nil
}

func (ccc *CMSChannelCreate) createSpec() (*CMSChannel, *sqlgraph.CreateSpec) {
	var (
		_node = &CMSChannel{config: ccc.config}
		_spec = sqlgraph.NewCreateSpec(cmschannel.Table, sqlgraph.NewFieldSpec(cmschannel.FieldID, field.TypeString))
	)
	if id, ok := ccc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ccc.mutation.Name(); ok {
		_spec.SetField(cmschannel.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ccc.mutation.GetType(); ok {
		_spec.SetField(cmschannel.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := ccc.mutation.Slug(); ok {
		_spec.SetField(cmschannel.FieldSlug, field.TypeString, value)
		_node.Slug = value
	}
	if value, ok := ccc.mutation.Icon(); ok {
		_spec.SetField(cmschannel.FieldIcon, field.TypeString, value)
		_node.Icon = value
	}
	if value, ok := ccc.mutation.Status(); ok {
		_spec.SetField(cmschannel.FieldStatus, field.TypeInt, value)
		_node.Status = value
	}
	if value, ok := ccc.mutation.Extras(); ok {
		_spec.SetField(cmschannel.FieldExtras, field.TypeJSON, value)
		_node.Extras = value
	}
	if value, ok := ccc.mutation.TenantID(); ok {
		_spec.SetField(cmschannel.FieldTenantID, field.TypeString, value)
		_node.TenantID = value
	}
	if value, ok := ccc.mutation.CreatedBy(); ok {
		_spec.SetField(cmschannel.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := ccc.mutation.UpdatedBy(); ok {
		_spec.SetField(cmschannel.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := ccc.mutation.CreatedAt(); ok {
		_spec.SetField(cmschannel.FieldCreatedAt, field.TypeInt64, value)
		_node.CreatedAt = value
	}
	if value, ok := ccc.mutation.UpdatedAt(); ok {
		_spec.SetField(cmschannel.FieldUpdatedAt, field.TypeInt64, value)
		_node.UpdatedAt = value
	}
	if value, ok := ccc.mutation.AllowedTypes(); ok {
		_spec.SetField(cmschannel.FieldAllowedTypes, field.TypeJSON, value)
		_node.AllowedTypes = value
	}
	if value, ok := ccc.mutation.Description(); ok {
		_spec.SetField(cmschannel.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := ccc.mutation.Logo(); ok {
		_spec.SetField(cmschannel.FieldLogo, field.TypeString, value)
		_node.Logo = value
	}
	if value, ok := ccc.mutation.WebhookURL(); ok {
		_spec.SetField(cmschannel.FieldWebhookURL, field.TypeString, value)
		_node.WebhookURL = value
	}
	if value, ok := ccc.mutation.AutoPublish(); ok {
		_spec.SetField(cmschannel.FieldAutoPublish, field.TypeBool, value)
		_node.AutoPublish = value
	}
	if value, ok := ccc.mutation.RequireReview(); ok {
		_spec.SetField(cmschannel.FieldRequireReview, field.TypeBool, value)
		_node.RequireReview = value
	}
	return _node, _spec
}

// CMSChannelCreateBulk is the builder for creating many CMSChannel entities in bulk.
type CMSChannelCreateBulk struct {
	config
	err      error
	builders []*CMSChannelCreate
}

// Save creates the CMSChannel entities in the database.
func (cccb *CMSChannelCreateBulk) Save(ctx context.Context) ([]*CMSChannel, error) {
	if cccb.err != nil {
		return nil, cccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cccb.builders))
	nodes := make([]*CMSChannel, len(cccb.builders))
	mutators := make([]Mutator, len(cccb.builders))
	for i := range cccb.builders {
		func(i int, root context.Context) {
			builder := cccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CMSChannelMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cccb *CMSChannelCreateBulk) SaveX(ctx context.Context) []*CMSChannel {
	v, err := cccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cccb *CMSChannelCreateBulk) Exec(ctx context.Context) error {
	_, err := cccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cccb *CMSChannelCreateBulk) ExecX(ctx context.Context) {
	if err := cccb.Exec(ctx); err != nil {
		panic(err)
	}
}
