// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/content/data/ent/cmschannel"
	"ncobase/content/data/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// CMSChannelUpdate is the builder for updating CMSChannel entities.
type CMSChannelUpdate struct {
	config
	hooks    []Hook
	mutation *CMSChannelMutation
}

// Where appends a list predicates to the CMSChannelUpdate builder.
func (ccu *CMSChannelUpdate) Where(ps ...predicate.CMSChannel) *CMSChannelUpdate {
	ccu.mutation.Where(ps...)
	return ccu
}

// SetName sets the "name" field.
func (ccu *CMSChannelUpdate) SetName(s string) *CMSChannelUpdate {
	ccu.mutation.SetName(s)
	return ccu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ccu *CMSChannelUpdate) SetNillableName(s *string) *CMSChannelUpdate {
	if s != nil {
		ccu.SetName(*s)
	}
	return ccu
}

// ClearName clears the value of the "name" field.
func (ccu *CMSChannelUpdate) ClearName() *CMSChannelUpdate {
	ccu.mutation.ClearName()
	return ccu
}

// SetType sets the "type" field.
func (ccu *CMSChannelUpdate) SetType(s string) *CMSChannelUpdate {
	ccu.mutation.SetType(s)
	return ccu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ccu *CMSChannelUpdate) SetNillableType(s *string) *CMSChannelUpdate {
	if s != nil {
		ccu.SetType(*s)
	}
	return ccu
}

// ClearType clears the value of the "type" field.
func (ccu *CMSChannelUpdate) ClearType() *CMSChannelUpdate {
	ccu.mutation.ClearType()
	return ccu
}

// SetSlug sets the "slug" field.
func (ccu *CMSChannelUpdate) SetSlug(s string) *CMSChannelUpdate {
	ccu.mutation.SetSlug(s)
	return ccu
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (ccu *CMSChannelUpdate) SetNillableSlug(s *string) *CMSChannelUpdate {
	if s != nil {
		ccu.SetSlug(*s)
	}
	return ccu
}

// ClearSlug clears the value of the "slug" field.
func (ccu *CMSChannelUpdate) ClearSlug() *CMSChannelUpdate {
	ccu.mutation.ClearSlug()
	return ccu
}

// SetIcon sets the "icon" field.
func (ccu *CMSChannelUpdate) SetIcon(s string) *CMSChannelUpdate {
	ccu.mutation.SetIcon(s)
	return ccu
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (ccu *CMSChannelUpdate) SetNillableIcon(s *string) *CMSChannelUpdate {
	if s != nil {
		ccu.SetIcon(*s)
	}
	return ccu
}

// ClearIcon clears the value of the "icon" field.
func (ccu *CMSChannelUpdate) ClearIcon() *CMSChannelUpdate {
	ccu.mutation.ClearIcon()
	return ccu
}

// SetStatus sets the "status" field.
func (ccu *CMSChannelUpdate) SetStatus(i int) *CMSChannelUpdate {
	ccu.mutation.ResetStatus()
	ccu.mutation.SetStatus(i)
	return ccu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ccu *CMSChannelUpdate) SetNillableStatus(i *int) *CMSChannelUpdate {
	if i != nil {
		ccu.SetStatus(*i)
	}
	return ccu
}

// AddStatus adds i to the "status" field.
func (ccu *CMSChannelUpdate) AddStatus(i int) *CMSChannelUpdate {
	ccu.mutation.AddStatus(i)
	return ccu
}

// SetExtras sets the "extras" field.
func (ccu *CMSChannelUpdate) SetExtras(m map[string]interface{}) *CMSChannelUpdate {
	ccu.mutation.SetExtras(m)
	return ccu
}

// ClearExtras clears the value of the "extras" field.
func (ccu *CMSChannelUpdate) ClearExtras() *CMSChannelUpdate {
	ccu.mutation.ClearExtras()
	return ccu
}

// SetTenantID sets the "tenant_id" field.
func (ccu *CMSChannelUpdate) SetTenantID(s string) *CMSChannelUpdate {
	ccu.mutation.SetTenantID(s)
	return ccu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (ccu *CMSChannelUpdate) SetNillableTenantID(s *string) *CMSChannelUpdate {
	if s != nil {
		ccu.SetTenantID(*s)
	}
	return ccu
}

// ClearTenantID clears the value of the "tenant_id" field.
func (ccu *CMSChannelUpdate) ClearTenantID() *CMSChannelUpdate {
	ccu.mutation.ClearTenantID()
	return ccu
}

// SetCreatedBy sets the "created_by" field.
func (ccu *CMSChannelUpdate) SetCreatedBy(s string) *CMSChannelUpdate {
	ccu.mutation.SetCreatedBy(s)
	return ccu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (ccu *CMSChannelUpdate) SetNillableCreatedBy(s *string) *CMSChannelUpdate {
	if s != nil {
		ccu.SetCreatedBy(*s)
	}
	return ccu
}

// ClearCreatedBy clears the value of the "created_by" field.
func (ccu *CMSChannelUpdate) ClearCreatedBy() *CMSChannelUpdate {
	ccu.mutation.ClearCreatedBy()
	return ccu
}

// SetUpdatedBy sets the "updated_by" field.
func (ccu *CMSChannelUpdate) SetUpdatedBy(s string) *CMSChannelUpdate {
	ccu.mutation.SetUpdatedBy(s)
	return ccu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ccu *CMSChannelUpdate) SetNillableUpdatedBy(s *string) *CMSChannelUpdate {
	if s != nil {
		ccu.SetUpdatedBy(*s)
	}
	return ccu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (ccu *CMSChannelUpdate) ClearUpdatedBy() *CMSChannelUpdate {
	ccu.mutation.ClearUpdatedBy()
	return ccu
}

// SetUpdatedAt sets the "updated_at" field.
func (ccu *CMSChannelUpdate) SetUpdatedAt(i int64) *CMSChannelUpdate {
	ccu.mutation.ResetUpdatedAt()
	ccu.mutation.SetUpdatedAt(i)
	return ccu
}

// AddUpdatedAt adds i to the "updated_at" field.
func (ccu *CMSChannelUpdate) AddUpdatedAt(i int64) *CMSChannelUpdate {
	ccu.mutation.AddUpdatedAt(i)
	return ccu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (ccu *CMSChannelUpdate) ClearUpdatedAt() *CMSChannelUpdate {
	ccu.mutation.ClearUpdatedAt()
	return ccu
}

// SetAllowedTypes sets the "allowed_types" field.
func (ccu *CMSChannelUpdate) SetAllowedTypes(s []string) *CMSChannelUpdate {
	ccu.mutation.SetAllowedTypes(s)
	return ccu
}

// AppendAllowedTypes appends s to the "allowed_types" field.
func (ccu *CMSChannelUpdate) AppendAllowedTypes(s []string) *CMSChannelUpdate {
	ccu.mutation.AppendAllowedTypes(s)
	return ccu
}

// ClearAllowedTypes clears the value of the "allowed_types" field.
func (ccu *CMSChannelUpdate) ClearAllowedTypes() *CMSChannelUpdate {
	ccu.mutation.ClearAllowedTypes()
	return ccu
}

// SetDescription sets the "description" field.
func (ccu *CMSChannelUpdate) SetDescription(s string) *CMSChannelUpdate {
	ccu.mutation.SetDescription(s)
	return ccu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ccu *CMSChannelUpdate) SetNillableDescription(s *string) *CMSChannelUpdate {
	if s != nil {
		ccu.SetDescription(*s)
	}
	return ccu
}

// ClearDescription clears the value of the "description" field.
func (ccu *CMSChannelUpdate) ClearDescription() *CMSChannelUpdate {
	ccu.mutation.ClearDescription()
	return ccu
}

// SetLogo sets the "logo" field.
func (ccu *CMSChannelUpdate) SetLogo(s string) *CMSChannelUpdate {
	ccu.mutation.SetLogo(s)
	return ccu
}

// SetNillableLogo sets the "logo" field if the given value is not nil.
func (ccu *CMSChannelUpdate) SetNillableLogo(s *string) *CMSChannelUpdate {
	if s != nil {
		ccu.SetLogo(*s)
	}
	return ccu
}

// ClearLogo clears the value of the "logo" field.
func (ccu *CMSChannelUpdate) ClearLogo() *CMSChannelUpdate {
	ccu.mutation.ClearLogo()
	return ccu
}

// SetWebhookURL sets the "webhook_url" field.
func (ccu *CMSChannelUpdate) SetWebhookURL(s string) *CMSChannelUpdate {
	ccu.mutation.SetWebhookURL(s)
	return ccu
}

// SetNillableWebhookURL sets the "webhook_url" field if the given value is not nil.
func (ccu *CMSChannelUpdate) SetNillableWebhookURL(s *string) *CMSChannelUpdate {
	if s != nil {
		ccu.SetWebhookURL(*s)
	}
	return ccu
}

// ClearWebhookURL clears the value of the "webhook_url" field.
func (ccu *CMSChannelUpdate) ClearWebhookURL() *CMSChannelUpdate {
	ccu.mutation.ClearWebhookURL()
	return ccu
}

// SetAutoPublish sets the "auto_publish" field.
func (ccu *CMSChannelUpdate) SetAutoPublish(b bool) *CMSChannelUpdate {
	ccu.mutation.SetAutoPublish(b)
	return ccu
}

// SetNillableAutoPublish sets the "auto_publish" field if the given value is not nil.
func (ccu *CMSChannelUpdate) SetNillableAutoPublish(b *bool) *CMSChannelUpdate {
	if b != nil {
		ccu.SetAutoPublish(*b)
	}
	return ccu
}

// SetRequireReview sets the "require_review" field.
func (ccu *CMSChannelUpdate) SetRequireReview(b bool) *CMSChannelUpdate {
	ccu.mutation.SetRequireReview(b)
	return ccu
}

// SetNillableRequireReview sets the "require_review" field if the given value is not nil.
func (ccu *CMSChannelUpdate) SetNillableRequireReview(b *bool) *CMSChannelUpdate {
	if b != nil {
		ccu.SetRequireReview(*b)
	}
	return ccu
}

// Mutation returns the CMSChannelMutation object of the builder.
func (ccu *CMSChannelUpdate) Mutation() *CMSChannelMutation {
	return ccu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ccu *CMSChannelUpdate) Save(ctx context.Context) (int, error) {
	ccu.defaults()
	return withHooks(ctx, ccu.sqlSave, ccu.mutation, ccu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ccu *CMSChannelUpdate) SaveX(ctx context.Context) int {
	affected, err := ccu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ccu *CMSChannelUpdate) Exec(ctx context.Context) error {
	_, err := ccu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccu *CMSChannelUpdate) ExecX(ctx context.Context) {
	if err := ccu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ccu *CMSChannelUpdate) defaults() {
	if _, ok := ccu.mutation.UpdatedAt(); !ok && !ccu.mutation.UpdatedAtCleared() {
		v := cmschannel.UpdateDefaultUpdatedAt()
		ccu.mutation.SetUpdatedAt(v)
	}
}

func (ccu *CMSChannelUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(cmschannel.Table, cmschannel.Columns, sqlgraph.NewFieldSpec(cmschannel.FieldID, field.TypeString))
	if ps := ccu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ccu.mutation.Name(); ok {
		_spec.SetField(cmschannel.FieldName, field.TypeString, value)
	}
	if ccu.mutation.NameCleared() {
		_spec.ClearField(cmschannel.FieldName, field.TypeString)
	}
	if value, ok := ccu.mutation.GetType(); ok {
		_spec.SetField(cmschannel.FieldType, field.TypeString, value)
	}
	if ccu.mutation.TypeCleared() {
		_spec.ClearField(cmschannel.FieldType, field.TypeString)
	}
	if value, ok := ccu.mutation.Slug(); ok {
		_spec.SetField(cmschannel.FieldSlug, field.TypeString, value)
	}
	if ccu.mutation.SlugCleared() {
		_spec.ClearField(cmschannel.FieldSlug, field.TypeString)
	}
	if value, ok := ccu.mutation.Icon(); ok {
		_spec.SetField(cmschannel.FieldIcon, field.TypeString, value)
	}
	if ccu.mutation.IconCleared() {
		_spec.ClearField(cmschannel.FieldIcon, field.TypeString)
	}
	if value, ok := ccu.mutation.Status(); ok {
		_spec.SetField(cmschannel.FieldStatus, field.TypeInt, value)
	}
	if value, ok := ccu.mutation.AddedStatus(); ok {
		_spec.AddField(cmschannel.FieldStatus, field.TypeInt, value)
	}
	if value, ok := ccu.mutation.Extras(); ok {
		_spec.SetField(cmschannel.FieldExtras, field.TypeJSON, value)
	}
	if ccu.mutation.ExtrasCleared() {
		_spec.ClearField(cmschannel.FieldExtras, field.TypeJSON)
	}
	if value, ok := ccu.mutation.TenantID(); ok {
		_spec.SetField(cmschannel.FieldTenantID, field.TypeString, value)
	}
	if ccu.mutation.TenantIDCleared() {
		_spec.ClearField(cmschannel.FieldTenantID, field.TypeString)
	}
	if value, ok := ccu.mutation.CreatedBy(); ok {
		_spec.SetField(cmschannel.FieldCreatedBy, field.TypeString, value)
	}
	if ccu.mutation.CreatedByCleared() {
		_spec.ClearField(cmschannel.FieldCreatedBy, field.TypeString)
	}
	if value, ok := ccu.mutation.UpdatedBy(); ok {
		_spec.SetField(cmschannel.FieldUpdatedBy, field.TypeString, value)
	}
	if ccu.mutation.UpdatedByCleared() {
		_spec.ClearField(cmschannel.FieldUpdatedBy, field.TypeString)
	}
	if ccu.mutation.CreatedAtCleared() {
		_spec.ClearField(cmschannel.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := ccu.mutation.UpdatedAt(); ok {
		_spec.SetField(cmschannel.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := ccu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(cmschannel.FieldUpdatedAt, field.TypeInt64, value)
	}
	if ccu.mutation.UpdatedAtCleared() {
		_spec.ClearField(cmschannel.FieldUpdatedAt, field.TypeInt64)
	}
	if value, ok := ccu.mutation.AllowedTypes(); ok {
		_spec.SetField(cmschannel.FieldAllowedTypes, field.TypeJSON, value)
	}
	if value, ok := ccu.mutation.AppendedAllowedTypes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, cmschannel.FieldAllowedTypes, value)
		})
	}
	if ccu.mutation.AllowedTypesCleared() {
		_spec.ClearField(cmschannel.FieldAllowedTypes, field.TypeJSON)
	}
	if value, ok := ccu.mutation.Description(); ok {
		_spec.SetField(cmschannel.FieldDescription, field.TypeString, value)
	}
	if ccu.mutation.DescriptionCleared() {
		_spec.ClearField(cmschannel.FieldDescription, field.TypeString)
	}
	if value, ok := ccu.mutation.Logo(); ok {
		_spec.SetField(cmschannel.FieldLogo, field.TypeString, value)
	}
	if ccu.mutation.LogoCleared() {
		_spec.ClearField(cmschannel.FieldLogo, field.TypeString)
	}
	if value, ok := ccu.mutation.WebhookURL(); ok {
		_spec.SetField(cmschannel.FieldWebhookURL, field.TypeString, value)
	}
	if ccu.mutation.WebhookURLCleared() {
		_spec.ClearField(cmschannel.FieldWebhookURL, field.TypeString)
	}
	if value, ok := ccu.mutation.AutoPublish(); ok {
		_spec.SetField(cmschannel.FieldAutoPublish, field.TypeBool, value)
	}
	if value, ok := ccu.mutation.RequireReview(); ok {
		_spec.SetField(cmschannel.FieldRequireReview, field.TypeBool, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ccu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cmschannel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ccu.mutation.done = true
	return n, nil
}

// CMSChannelUpdateOne is the builder for updating a single CMSChannel entity.
type CMSChannelUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CMSChannelMutation
}

// SetName sets the "name" field.
func (ccuo *CMSChannelUpdateOne) SetName(s string) *CMSChannelUpdateOne {
	ccuo.mutation.SetName(s)
	return ccuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ccuo *CMSChannelUpdateOne) SetNillableName(s *string) *CMSChannelUpdateOne {
	if s != nil {
		ccuo.SetName(*s)
	}
	return ccuo
}

// ClearName clears the value of the "name" field.
func (ccuo *CMSChannelUpdateOne) ClearName() *CMSChannelUpdateOne {
	ccuo.mutation.ClearName()
	return ccuo
}

// SetType sets the "type" field.
func (ccuo *CMSChannelUpdateOne) SetType(s string) *CMSChannelUpdateOne {
	ccuo.mutation.SetType(s)
	return ccuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ccuo *CMSChannelUpdateOne) SetNillableType(s *string) *CMSChannelUpdateOne {
	if s != nil {
		ccuo.SetType(*s)
	}
	return ccuo
}

// ClearType clears the value of the "type" field.
func (ccuo *CMSChannelUpdateOne) ClearType() *CMSChannelUpdateOne {
	ccuo.mutation.ClearType()
	return ccuo
}

// SetSlug sets the "slug" field.
func (ccuo *CMSChannelUpdateOne) SetSlug(s string) *CMSChannelUpdateOne {
	ccuo.mutation.SetSlug(s)
	return ccuo
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (ccuo *CMSChannelUpdateOne) SetNillableSlug(s *string) *CMSChannelUpdateOne {
	if s != nil {
		ccuo.SetSlug(*s)
	}
	return ccuo
}

// ClearSlug clears the value of the "slug" field.
func (ccuo *CMSChannelUpdateOne) ClearSlug() *CMSChannelUpdateOne {
	ccuo.mutation.ClearSlug()
	return ccuo
}

// SetIcon sets the "icon" field.
func (ccuo *CMSChannelUpdateOne) SetIcon(s string) *CMSChannelUpdateOne {
	ccuo.mutation.SetIcon(s)
	return ccuo
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (ccuo *CMSChannelUpdateOne) SetNillableIcon(s *string) *CMSChannelUpdateOne {
	if s != nil {
		ccuo.SetIcon(*s)
	}
	return ccuo
}

// ClearIcon clears the value of the "icon" field.
func (ccuo *CMSChannelUpdateOne) ClearIcon() *CMSChannelUpdateOne {
	ccuo.mutation.ClearIcon()
	return ccuo
}

// SetStatus sets the "status" field.
func (ccuo *CMSChannelUpdateOne) SetStatus(i int) *CMSChannelUpdateOne {
	ccuo.mutation.ResetStatus()
	ccuo.mutation.SetStatus(i)
	return ccuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ccuo *CMSChannelUpdateOne) SetNillableStatus(i *int) *CMSChannelUpdateOne {
	if i != nil {
		ccuo.SetStatus(*i)
	}
	return ccuo
}

// AddStatus adds i to the "status" field.
func (ccuo *CMSChannelUpdateOne) AddStatus(i int) *CMSChannelUpdateOne {
	ccuo.mutation.AddStatus(i)
	return ccuo
}

// SetExtras sets the "extras" field.
func (ccuo *CMSChannelUpdateOne) SetExtras(m map[string]interface{}) *CMSChannelUpdateOne {
	ccuo.mutation.SetExtras(m)
	return ccuo
}

// ClearExtras clears the value of the "extras" field.
func (ccuo *CMSChannelUpdateOne) ClearExtras() *CMSChannelUpdateOne {
	ccuo.mutation.ClearExtras()
	return ccuo
}

// SetTenantID sets the "tenant_id" field.
func (ccuo *CMSChannelUpdateOne) SetTenantID(s string) *CMSChannelUpdateOne {
	ccuo.mutation.SetTenantID(s)
	return ccuo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (ccuo *CMSChannelUpdateOne) SetNillableTenantID(s *string) *CMSChannelUpdateOne {
	if s != nil {
		ccuo.SetTenantID(*s)
	}
	return ccuo
}

// ClearTenantID clears the value of the "tenant_id" field.
func (ccuo *CMSChannelUpdateOne) ClearTenantID() *CMSChannelUpdateOne {
	ccuo.mutation.ClearTenantID()
	return ccuo
}

// SetCreatedBy sets the "created_by" field.
func (ccuo *CMSChannelUpdateOne) SetCreatedBy(s string) *CMSChannelUpdateOne {
	ccuo.mutation.SetCreatedBy(s)
	return ccuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (ccuo *CMSChannelUpdateOne) SetNillableCreatedBy(s *string) *CMSChannelUpdateOne {
	if s != nil {
		ccuo.SetCreatedBy(*s)
	}
	return ccuo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (ccuo *CMSChannelUpdateOne) ClearCreatedBy() *CMSChannelUpdateOne {
	ccuo.mutation.ClearCreatedBy()
	return ccuo
}

// SetUpdatedBy sets the "updated_by" field.
func (ccuo *CMSChannelUpdateOne) SetUpdatedBy(s string) *CMSChannelUpdateOne {
	ccuo.mutation.SetUpdatedBy(s)
	return ccuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ccuo *CMSChannelUpdateOne) SetNillableUpdatedBy(s *string) *CMSChannelUpdateOne {
	if s != nil {
		ccuo.SetUpdatedBy(*s)
	}
	return ccuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (ccuo *CMSChannelUpdateOne) ClearUpdatedBy() *CMSChannelUpdateOne {
	ccuo.mutation.ClearUpdatedBy()
	return ccuo
}

// SetUpdatedAt sets the "updated_at" field.
func (ccuo *CMSChannelUpdateOne) SetUpdatedAt(i int64) *CMSChannelUpdateOne {
	ccuo.mutation.ResetUpdatedAt()
	ccuo.mutation.SetUpdatedAt(i)
	return ccuo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (ccuo *CMSChannelUpdateOne) AddUpdatedAt(i int64) *CMSChannelUpdateOne {
	ccuo.mutation.AddUpdatedAt(i)
	return ccuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (ccuo *CMSChannelUpdateOne) ClearUpdatedAt() *CMSChannelUpdateOne {
	ccuo.mutation.ClearUpdatedAt()
	return ccuo
}

// SetAllowedTypes sets the "allowed_types" field.
func (ccuo *CMSChannelUpdateOne) SetAllowedTypes(s []string) *CMSChannelUpdateOne {
	ccuo.mutation.SetAllowedTypes(s)
	return ccuo
}

// AppendAllowedTypes appends s to the "allowed_types" field.
func (ccuo *CMSChannelUpdateOne) AppendAllowedTypes(s []string) *CMSChannelUpdateOne {
	ccuo.mutation.AppendAllowedTypes(s)
	return ccuo
}

// ClearAllowedTypes clears the value of the "allowed_types" field.
func (ccuo *CMSChannelUpdateOne) ClearAllowedTypes() *CMSChannelUpdateOne {
	ccuo.mutation.ClearAllowedTypes()
	return ccuo
}

// SetDescription sets the "description" field.
func (ccuo *CMSChannelUpdateOne) SetDescription(s string) *CMSChannelUpdateOne {
	ccuo.mutation.SetDescription(s)
	return ccuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ccuo *CMSChannelUpdateOne) SetNillableDescription(s *string) *CMSChannelUpdateOne {
	if s != nil {
		ccuo.SetDescription(*s)
	}
	return ccuo
}

// ClearDescription clears the value of the "description" field.
func (ccuo *CMSChannelUpdateOne) ClearDescription() *CMSChannelUpdateOne {
	ccuo.mutation.ClearDescription()
	return ccuo
}

// SetLogo sets the "logo" field.
func (ccuo *CMSChannelUpdateOne) SetLogo(s string) *CMSChannelUpdateOne {
	ccuo.mutation.SetLogo(s)
	return ccuo
}

// SetNillableLogo sets the "logo" field if the given value is not nil.
func (ccuo *CMSChannelUpdateOne) SetNillableLogo(s *string) *CMSChannelUpdateOne {
	if s != nil {
		ccuo.SetLogo(*s)
	}
	return ccuo
}

// ClearLogo clears the value of the "logo" field.
func (ccuo *CMSChannelUpdateOne) ClearLogo() *CMSChannelUpdateOne {
	ccuo.mutation.ClearLogo()
	return ccuo
}

// SetWebhookURL sets the "webhook_url" field.
func (ccuo *CMSChannelUpdateOne) SetWebhookURL(s string) *CMSChannelUpdateOne {
	ccuo.mutation.SetWebhookURL(s)
	return ccuo
}

// SetNillableWebhookURL sets the "webhook_url" field if the given value is not nil.
func (ccuo *CMSChannelUpdateOne) SetNillableWebhookURL(s *string) *CMSChannelUpdateOne {
	if s != nil {
		ccuo.SetWebhookURL(*s)
	}
	return ccuo
}

// ClearWebhookURL clears the value of the "webhook_url" field.
func (ccuo *CMSChannelUpdateOne) ClearWebhookURL() *CMSChannelUpdateOne {
	ccuo.mutation.ClearWebhookURL()
	return ccuo
}

// SetAutoPublish sets the "auto_publish" field.
func (ccuo *CMSChannelUpdateOne) SetAutoPublish(b bool) *CMSChannelUpdateOne {
	ccuo.mutation.SetAutoPublish(b)
	return ccuo
}

// SetNillableAutoPublish sets the "auto_publish" field if the given value is not nil.
func (ccuo *CMSChannelUpdateOne) SetNillableAutoPublish(b *bool) *CMSChannelUpdateOne {
	if b != nil {
		ccuo.SetAutoPublish(*b)
	}
	return ccuo
}

// SetRequireReview sets the "require_review" field.
func (ccuo *CMSChannelUpdateOne) SetRequireReview(b bool) *CMSChannelUpdateOne {
	ccuo.mutation.SetRequireReview(b)
	return ccuo
}

// SetNillableRequireReview sets the "require_review" field if the given value is not nil.
func (ccuo *CMSChannelUpdateOne) SetNillableRequireReview(b *bool) *CMSChannelUpdateOne {
	if b != nil {
		ccuo.SetRequireReview(*b)
	}
	return ccuo
}

// Mutation returns the CMSChannelMutation object of the builder.
func (ccuo *CMSChannelUpdateOne) Mutation() *CMSChannelMutation {
	return ccuo.mutation
}

// Where appends a list predicates to the CMSChannelUpdate builder.
func (ccuo *CMSChannelUpdateOne) Where(ps ...predicate.CMSChannel) *CMSChannelUpdateOne {
	ccuo.mutation.Where(ps...)
	return ccuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ccuo *CMSChannelUpdateOne) Select(field string, fields ...string) *CMSChannelUpdateOne {
	ccuo.fields = append([]string{field}, fields...)
	return ccuo
}

// Save executes the query and returns the updated CMSChannel entity.
func (ccuo *CMSChannelUpdateOne) Save(ctx context.Context) (*CMSChannel, error) {
	ccuo.defaults()
	return withHooks(ctx, ccuo.sqlSave, ccuo.mutation, ccuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ccuo *CMSChannelUpdateOne) SaveX(ctx context.Context) *CMSChannel {
	node, err := ccuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ccuo *CMSChannelUpdateOne) Exec(ctx context.Context) error {
	_, err := ccuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccuo *CMSChannelUpdateOne) ExecX(ctx context.Context) {
	if err := ccuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ccuo *CMSChannelUpdateOne) defaults() {
	if _, ok := ccuo.mutation.UpdatedAt(); !ok && !ccuo.mutation.UpdatedAtCleared() {
		v := cmschannel.UpdateDefaultUpdatedAt()
		ccuo.mutation.SetUpdatedAt(v)
	}
}

func (ccuo *CMSChannelUpdateOne) sqlSave(ctx context.Context) (_node *CMSChannel, err error) {
	_spec := sqlgraph.NewUpdateSpec(cmschannel.Table, cmschannel.Columns, sqlgraph.NewFieldSpec(cmschannel.FieldID, field.TypeString))
	id, ok := ccuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CMSChannel.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ccuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, cmschannel.FieldID)
		for _, f := range fields {
			if !cmschannel.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != cmschannel.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ccuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ccuo.mutation.Name(); ok {
		_spec.SetField(cmschannel.FieldName, field.TypeString, value)
	}
	if ccuo.mutation.NameCleared() {
		_spec.ClearField(cmschannel.FieldName, field.TypeString)
	}
	if value, ok := ccuo.mutation.GetType(); ok {
		_spec.SetField(cmschannel.FieldType, field.TypeString, value)
	}
	if ccuo.mutation.TypeCleared() {
		_spec.ClearField(cmschannel.FieldType, field.TypeString)
	}
	if value, ok := ccuo.mutation.Slug(); ok {
		_spec.SetField(cmschannel.FieldSlug, field.TypeString, value)
	}
	if ccuo.mutation.SlugCleared() {
		_spec.ClearField(cmschannel.FieldSlug, field.TypeString)
	}
	if value, ok := ccuo.mutation.Icon(); ok {
		_spec.SetField(cmschannel.FieldIcon, field.TypeString, value)
	}
	if ccuo.mutation.IconCleared() {
		_spec.ClearField(cmschannel.FieldIcon, field.TypeString)
	}
	if value, ok := ccuo.mutation.Status(); ok {
		_spec.SetField(cmschannel.FieldStatus, field.TypeInt, value)
	}
	if value, ok := ccuo.mutation.AddedStatus(); ok {
		_spec.AddField(cmschannel.FieldStatus, field.TypeInt, value)
	}
	if value, ok := ccuo.mutation.Extras(); ok {
		_spec.SetField(cmschannel.FieldExtras, field.TypeJSON, value)
	}
	if ccuo.mutation.ExtrasCleared() {
		_spec.ClearField(cmschannel.FieldExtras, field.TypeJSON)
	}
	if value, ok := ccuo.mutation.TenantID(); ok {
		_spec.SetField(cmschannel.FieldTenantID, field.TypeString, value)
	}
	if ccuo.mutation.TenantIDCleared() {
		_spec.ClearField(cmschannel.FieldTenantID, field.TypeString)
	}
	if value, ok := ccuo.mutation.CreatedBy(); ok {
		_spec.SetField(cmschannel.FieldCreatedBy, field.TypeString, value)
	}
	if ccuo.mutation.CreatedByCleared() {
		_spec.ClearField(cmschannel.FieldCreatedBy, field.TypeString)
	}
	if value, ok := ccuo.mutation.UpdatedBy(); ok {
		_spec.SetField(cmschannel.FieldUpdatedBy, field.TypeString, value)
	}
	if ccuo.mutation.UpdatedByCleared() {
		_spec.ClearField(cmschannel.FieldUpdatedBy, field.TypeString)
	}
	if ccuo.mutation.CreatedAtCleared() {
		_spec.ClearField(cmschannel.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := ccuo.mutation.UpdatedAt(); ok {
		_spec.SetField(cmschannel.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := ccuo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(cmschannel.FieldUpdatedAt, field.TypeInt64, value)
	}
	if ccuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(cmschannel.FieldUpdatedAt, field.TypeInt64)
	}
	if value, ok := ccuo.mutation.AllowedTypes(); ok {
		_spec.SetField(cmschannel.FieldAllowedTypes, field.TypeJSON, value)
	}
	if value, ok := ccuo.mutation.AppendedAllowedTypes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, cmschannel.FieldAllowedTypes, value)
		})
	}
	if ccuo.mutation.AllowedTypesCleared() {
		_spec.ClearField(cmschannel.FieldAllowedTypes, field.TypeJSON)
	}
	if value, ok := ccuo.mutation.Description(); ok {
		_spec.SetField(cmschannel.FieldDescription, field.TypeString, value)
	}
	if ccuo.mutation.DescriptionCleared() {
		_spec.ClearField(cmschannel.FieldDescription, field.TypeString)
	}
	if value, ok := ccuo.mutation.Logo(); ok {
		_spec.SetField(cmschannel.FieldLogo, field.TypeString, value)
	}
	if ccuo.mutation.LogoCleared() {
		_spec.ClearField(cmschannel.FieldLogo, field.TypeString)
	}
	if value, ok := ccuo.mutation.WebhookURL(); ok {
		_spec.SetField(cmschannel.FieldWebhookURL, field.TypeString, value)
	}
	if ccuo.mutation.WebhookURLCleared() {
		_spec.ClearField(cmschannel.FieldWebhookURL, field.TypeString)
	}
	if value, ok := ccuo.mutation.AutoPublish(); ok {
		_spec.SetField(cmschannel.FieldAutoPublish, field.TypeBool, value)
	}
	if value, ok := ccuo.mutation.RequireReview(); ok {
		_spec.SetField(cmschannel.FieldRequireReview, field.TypeBool, value)
	}
	_node = &CMSChannel{config: ccuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ccuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cmschannel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ccuo.mutation.done = true
	return _node, nil
}
