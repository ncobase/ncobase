// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"ncobase/content/data/ent/cmschannel"
	"ncobase/content/data/ent/distribution"
	"ncobase/content/data/ent/topic"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Distribution is the model entity for the Distribution schema.
type Distribution struct {
	config `json:"-"`
	// ID of the ent.
	// primary key
	ID string `json:"id,omitempty"`
	// Extend properties
	Extras map[string]interface{} `json:"extras,omitempty"`
	// space id, e.g. space id, organization id, store id
	SpaceID string `json:"space_id,omitempty"`
	// id of the creator
	CreatedBy string `json:"created_by,omitempty"`
	// id of the last updater
	UpdatedBy string `json:"updated_by,omitempty"`
	// created at
	CreatedAt int64 `json:"created_at,omitempty"`
	// updated at
	UpdatedAt int64 `json:"updated_at,omitempty"`
	// Topic ID
	TopicID string `json:"topic_id,omitempty"`
	// Channel ID
	ChannelID string `json:"channel_id,omitempty"`
	// Distribution status: 0:draft, 1:scheduled, 2:published, 3:failed, 4:cancelled
	Status int `json:"status,omitempty"`
	// Scheduled publish time
	ScheduledAt *int64 `json:"scheduled_at,omitempty"`
	// Actual publish time
	PublishedAt *int64 `json:"published_at,omitempty"`
	// External ID on the platform
	ExternalID string `json:"external_id,omitempty"`
	// URL on the external platform
	ExternalURL string `json:"external_url,omitempty"`
	// Error details if distribution failed
	ErrorDetails string `json:"error_details,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DistributionQuery when eager-loading is set.
	Edges        DistributionEdges `json:"edges"`
	selectValues sql.SelectValues
}

// DistributionEdges holds the relations/edges for other nodes in the graph.
type DistributionEdges struct {
	// Topic holds the value of the topic edge.
	Topic *Topic `json:"topic,omitempty"`
	// Channel holds the value of the channel edge.
	Channel *CMSChannel `json:"channel,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// TopicOrErr returns the Topic value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DistributionEdges) TopicOrErr() (*Topic, error) {
	if e.Topic != nil {
		return e.Topic, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: topic.Label}
	}
	return nil, &NotLoadedError{edge: "topic"}
}

// ChannelOrErr returns the Channel value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DistributionEdges) ChannelOrErr() (*CMSChannel, error) {
	if e.Channel != nil {
		return e.Channel, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: cmschannel.Label}
	}
	return nil, &NotLoadedError{edge: "channel"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Distribution) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case distribution.FieldExtras:
			values[i] = new([]byte)
		case distribution.FieldCreatedAt, distribution.FieldUpdatedAt, distribution.FieldStatus, distribution.FieldScheduledAt, distribution.FieldPublishedAt:
			values[i] = new(sql.NullInt64)
		case distribution.FieldID, distribution.FieldSpaceID, distribution.FieldCreatedBy, distribution.FieldUpdatedBy, distribution.FieldTopicID, distribution.FieldChannelID, distribution.FieldExternalID, distribution.FieldExternalURL, distribution.FieldErrorDetails:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Distribution fields.
func (d *Distribution) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case distribution.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				d.ID = value.String
			}
		case distribution.FieldExtras:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field extras", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &d.Extras); err != nil {
					return fmt.Errorf("unmarshal field extras: %w", err)
				}
			}
		case distribution.FieldSpaceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field space_id", values[i])
			} else if value.Valid {
				d.SpaceID = value.String
			}
		case distribution.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				d.CreatedBy = value.String
			}
		case distribution.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				d.UpdatedBy = value.String
			}
		case distribution.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				d.CreatedAt = value.Int64
			}
		case distribution.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				d.UpdatedAt = value.Int64
			}
		case distribution.FieldTopicID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field topic_id", values[i])
			} else if value.Valid {
				d.TopicID = value.String
			}
		case distribution.FieldChannelID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field channel_id", values[i])
			} else if value.Valid {
				d.ChannelID = value.String
			}
		case distribution.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				d.Status = int(value.Int64)
			}
		case distribution.FieldScheduledAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field scheduled_at", values[i])
			} else if value.Valid {
				d.ScheduledAt = new(int64)
				*d.ScheduledAt = value.Int64
			}
		case distribution.FieldPublishedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field published_at", values[i])
			} else if value.Valid {
				d.PublishedAt = new(int64)
				*d.PublishedAt = value.Int64
			}
		case distribution.FieldExternalID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field external_id", values[i])
			} else if value.Valid {
				d.ExternalID = value.String
			}
		case distribution.FieldExternalURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field external_url", values[i])
			} else if value.Valid {
				d.ExternalURL = value.String
			}
		case distribution.FieldErrorDetails:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field error_details", values[i])
			} else if value.Valid {
				d.ErrorDetails = value.String
			}
		default:
			d.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Distribution.
// This includes values selected through modifiers, order, etc.
func (d *Distribution) Value(name string) (ent.Value, error) {
	return d.selectValues.Get(name)
}

// QueryTopic queries the "topic" edge of the Distribution entity.
func (d *Distribution) QueryTopic() *TopicQuery {
	return NewDistributionClient(d.config).QueryTopic(d)
}

// QueryChannel queries the "channel" edge of the Distribution entity.
func (d *Distribution) QueryChannel() *CMSChannelQuery {
	return NewDistributionClient(d.config).QueryChannel(d)
}

// Update returns a builder for updating this Distribution.
// Note that you need to call Distribution.Unwrap() before calling this method if this Distribution
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Distribution) Update() *DistributionUpdateOne {
	return NewDistributionClient(d.config).UpdateOne(d)
}

// Unwrap unwraps the Distribution entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (d *Distribution) Unwrap() *Distribution {
	_tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: Distribution is not a transactional entity")
	}
	d.config.driver = _tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Distribution) String() string {
	var builder strings.Builder
	builder.WriteString("Distribution(")
	builder.WriteString(fmt.Sprintf("id=%v, ", d.ID))
	builder.WriteString("extras=")
	builder.WriteString(fmt.Sprintf("%v", d.Extras))
	builder.WriteString(", ")
	builder.WriteString("space_id=")
	builder.WriteString(d.SpaceID)
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(d.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(d.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", d.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", d.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("topic_id=")
	builder.WriteString(d.TopicID)
	builder.WriteString(", ")
	builder.WriteString("channel_id=")
	builder.WriteString(d.ChannelID)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", d.Status))
	builder.WriteString(", ")
	if v := d.ScheduledAt; v != nil {
		builder.WriteString("scheduled_at=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := d.PublishedAt; v != nil {
		builder.WriteString("published_at=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("external_id=")
	builder.WriteString(d.ExternalID)
	builder.WriteString(", ")
	builder.WriteString("external_url=")
	builder.WriteString(d.ExternalURL)
	builder.WriteString(", ")
	builder.WriteString("error_details=")
	builder.WriteString(d.ErrorDetails)
	builder.WriteByte(')')
	return builder.String()
}

// Distributions is a parsable slice of Distribution.
type Distributions []*Distribution
