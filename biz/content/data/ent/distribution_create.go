// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/content/data/ent/cmschannel"
	"ncobase/content/data/ent/distribution"
	"ncobase/content/data/ent/topic"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DistributionCreate is the builder for creating a Distribution entity.
type DistributionCreate struct {
	config
	mutation *DistributionMutation
	hooks    []Hook
}

// SetExtras sets the "extras" field.
func (dc *DistributionCreate) SetExtras(m map[string]interface{}) *DistributionCreate {
	dc.mutation.SetExtras(m)
	return dc
}

// SetTenantID sets the "tenant_id" field.
func (dc *DistributionCreate) SetTenantID(s string) *DistributionCreate {
	dc.mutation.SetTenantID(s)
	return dc
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (dc *DistributionCreate) SetNillableTenantID(s *string) *DistributionCreate {
	if s != nil {
		dc.SetTenantID(*s)
	}
	return dc
}

// SetCreatedBy sets the "created_by" field.
func (dc *DistributionCreate) SetCreatedBy(s string) *DistributionCreate {
	dc.mutation.SetCreatedBy(s)
	return dc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (dc *DistributionCreate) SetNillableCreatedBy(s *string) *DistributionCreate {
	if s != nil {
		dc.SetCreatedBy(*s)
	}
	return dc
}

// SetUpdatedBy sets the "updated_by" field.
func (dc *DistributionCreate) SetUpdatedBy(s string) *DistributionCreate {
	dc.mutation.SetUpdatedBy(s)
	return dc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (dc *DistributionCreate) SetNillableUpdatedBy(s *string) *DistributionCreate {
	if s != nil {
		dc.SetUpdatedBy(*s)
	}
	return dc
}

// SetCreatedAt sets the "created_at" field.
func (dc *DistributionCreate) SetCreatedAt(i int64) *DistributionCreate {
	dc.mutation.SetCreatedAt(i)
	return dc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dc *DistributionCreate) SetNillableCreatedAt(i *int64) *DistributionCreate {
	if i != nil {
		dc.SetCreatedAt(*i)
	}
	return dc
}

// SetUpdatedAt sets the "updated_at" field.
func (dc *DistributionCreate) SetUpdatedAt(i int64) *DistributionCreate {
	dc.mutation.SetUpdatedAt(i)
	return dc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (dc *DistributionCreate) SetNillableUpdatedAt(i *int64) *DistributionCreate {
	if i != nil {
		dc.SetUpdatedAt(*i)
	}
	return dc
}

// SetTopicID sets the "topic_id" field.
func (dc *DistributionCreate) SetTopicID(s string) *DistributionCreate {
	dc.mutation.SetTopicID(s)
	return dc
}

// SetChannelID sets the "channel_id" field.
func (dc *DistributionCreate) SetChannelID(s string) *DistributionCreate {
	dc.mutation.SetChannelID(s)
	return dc
}

// SetStatus sets the "status" field.
func (dc *DistributionCreate) SetStatus(i int) *DistributionCreate {
	dc.mutation.SetStatus(i)
	return dc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (dc *DistributionCreate) SetNillableStatus(i *int) *DistributionCreate {
	if i != nil {
		dc.SetStatus(*i)
	}
	return dc
}

// SetScheduledAt sets the "scheduled_at" field.
func (dc *DistributionCreate) SetScheduledAt(i int64) *DistributionCreate {
	dc.mutation.SetScheduledAt(i)
	return dc
}

// SetNillableScheduledAt sets the "scheduled_at" field if the given value is not nil.
func (dc *DistributionCreate) SetNillableScheduledAt(i *int64) *DistributionCreate {
	if i != nil {
		dc.SetScheduledAt(*i)
	}
	return dc
}

// SetPublishedAt sets the "published_at" field.
func (dc *DistributionCreate) SetPublishedAt(i int64) *DistributionCreate {
	dc.mutation.SetPublishedAt(i)
	return dc
}

// SetNillablePublishedAt sets the "published_at" field if the given value is not nil.
func (dc *DistributionCreate) SetNillablePublishedAt(i *int64) *DistributionCreate {
	if i != nil {
		dc.SetPublishedAt(*i)
	}
	return dc
}

// SetExternalID sets the "external_id" field.
func (dc *DistributionCreate) SetExternalID(s string) *DistributionCreate {
	dc.mutation.SetExternalID(s)
	return dc
}

// SetNillableExternalID sets the "external_id" field if the given value is not nil.
func (dc *DistributionCreate) SetNillableExternalID(s *string) *DistributionCreate {
	if s != nil {
		dc.SetExternalID(*s)
	}
	return dc
}

// SetExternalURL sets the "external_url" field.
func (dc *DistributionCreate) SetExternalURL(s string) *DistributionCreate {
	dc.mutation.SetExternalURL(s)
	return dc
}

// SetNillableExternalURL sets the "external_url" field if the given value is not nil.
func (dc *DistributionCreate) SetNillableExternalURL(s *string) *DistributionCreate {
	if s != nil {
		dc.SetExternalURL(*s)
	}
	return dc
}

// SetErrorDetails sets the "error_details" field.
func (dc *DistributionCreate) SetErrorDetails(s string) *DistributionCreate {
	dc.mutation.SetErrorDetails(s)
	return dc
}

// SetNillableErrorDetails sets the "error_details" field if the given value is not nil.
func (dc *DistributionCreate) SetNillableErrorDetails(s *string) *DistributionCreate {
	if s != nil {
		dc.SetErrorDetails(*s)
	}
	return dc
}

// SetID sets the "id" field.
func (dc *DistributionCreate) SetID(s string) *DistributionCreate {
	dc.mutation.SetID(s)
	return dc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (dc *DistributionCreate) SetNillableID(s *string) *DistributionCreate {
	if s != nil {
		dc.SetID(*s)
	}
	return dc
}

// SetTopic sets the "topic" edge to the Topic entity.
func (dc *DistributionCreate) SetTopic(t *Topic) *DistributionCreate {
	return dc.SetTopicID(t.ID)
}

// SetChannel sets the "channel" edge to the CMSChannel entity.
func (dc *DistributionCreate) SetChannel(c *CMSChannel) *DistributionCreate {
	return dc.SetChannelID(c.ID)
}

// Mutation returns the DistributionMutation object of the builder.
func (dc *DistributionCreate) Mutation() *DistributionMutation {
	return dc.mutation
}

// Save creates the Distribution in the database.
func (dc *DistributionCreate) Save(ctx context.Context) (*Distribution, error) {
	dc.defaults()
	return withHooks(ctx, dc.sqlSave, dc.mutation, dc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dc *DistributionCreate) SaveX(ctx context.Context) *Distribution {
	v, err := dc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dc *DistributionCreate) Exec(ctx context.Context) error {
	_, err := dc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dc *DistributionCreate) ExecX(ctx context.Context) {
	if err := dc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dc *DistributionCreate) defaults() {
	if _, ok := dc.mutation.Extras(); !ok {
		v := distribution.DefaultExtras
		dc.mutation.SetExtras(v)
	}
	if _, ok := dc.mutation.CreatedAt(); !ok {
		v := distribution.DefaultCreatedAt()
		dc.mutation.SetCreatedAt(v)
	}
	if _, ok := dc.mutation.UpdatedAt(); !ok {
		v := distribution.DefaultUpdatedAt()
		dc.mutation.SetUpdatedAt(v)
	}
	if _, ok := dc.mutation.Status(); !ok {
		v := distribution.DefaultStatus
		dc.mutation.SetStatus(v)
	}
	if _, ok := dc.mutation.ID(); !ok {
		v := distribution.DefaultID()
		dc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dc *DistributionCreate) check() error {
	if _, ok := dc.mutation.TopicID(); !ok {
		return &ValidationError{Name: "topic_id", err: errors.New(`ent: missing required field "Distribution.topic_id"`)}
	}
	if v, ok := dc.mutation.TopicID(); ok {
		if err := distribution.TopicIDValidator(v); err != nil {
			return &ValidationError{Name: "topic_id", err: fmt.Errorf(`ent: validator failed for field "Distribution.topic_id": %w`, err)}
		}
	}
	if _, ok := dc.mutation.ChannelID(); !ok {
		return &ValidationError{Name: "channel_id", err: errors.New(`ent: missing required field "Distribution.channel_id"`)}
	}
	if v, ok := dc.mutation.ChannelID(); ok {
		if err := distribution.ChannelIDValidator(v); err != nil {
			return &ValidationError{Name: "channel_id", err: fmt.Errorf(`ent: validator failed for field "Distribution.channel_id": %w`, err)}
		}
	}
	if _, ok := dc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Distribution.status"`)}
	}
	if v, ok := dc.mutation.ID(); ok {
		if err := distribution.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Distribution.id": %w`, err)}
		}
	}
	if len(dc.mutation.TopicIDs()) == 0 {
		return &ValidationError{Name: "topic", err: errors.New(`ent: missing required edge "Distribution.topic"`)}
	}
	if len(dc.mutation.ChannelIDs()) == 0 {
		return &ValidationError{Name: "channel", err: errors.New(`ent: missing required edge "Distribution.channel"`)}
	}
	return nil
}

func (dc *DistributionCreate) sqlSave(ctx context.Context) (*Distribution, error) {
	if err := dc.check(); err != nil {
		return nil, err
	}
	_node, _spec := dc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Distribution.ID type: %T", _spec.ID.Value)
		}
	}
	dc.mutation.id = &_node.ID
	dc.mutation.done = true
	return _node, nil
}

func (dc *DistributionCreate) createSpec() (*Distribution, *sqlgraph.CreateSpec) {
	var (
		_node = &Distribution{config: dc.config}
		_spec = sqlgraph.NewCreateSpec(distribution.Table, sqlgraph.NewFieldSpec(distribution.FieldID, field.TypeString))
	)
	if id, ok := dc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := dc.mutation.Extras(); ok {
		_spec.SetField(distribution.FieldExtras, field.TypeJSON, value)
		_node.Extras = value
	}
	if value, ok := dc.mutation.TenantID(); ok {
		_spec.SetField(distribution.FieldTenantID, field.TypeString, value)
		_node.TenantID = value
	}
	if value, ok := dc.mutation.CreatedBy(); ok {
		_spec.SetField(distribution.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := dc.mutation.UpdatedBy(); ok {
		_spec.SetField(distribution.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := dc.mutation.CreatedAt(); ok {
		_spec.SetField(distribution.FieldCreatedAt, field.TypeInt64, value)
		_node.CreatedAt = value
	}
	if value, ok := dc.mutation.UpdatedAt(); ok {
		_spec.SetField(distribution.FieldUpdatedAt, field.TypeInt64, value)
		_node.UpdatedAt = value
	}
	if value, ok := dc.mutation.Status(); ok {
		_spec.SetField(distribution.FieldStatus, field.TypeInt, value)
		_node.Status = value
	}
	if value, ok := dc.mutation.ScheduledAt(); ok {
		_spec.SetField(distribution.FieldScheduledAt, field.TypeInt64, value)
		_node.ScheduledAt = &value
	}
	if value, ok := dc.mutation.PublishedAt(); ok {
		_spec.SetField(distribution.FieldPublishedAt, field.TypeInt64, value)
		_node.PublishedAt = &value
	}
	if value, ok := dc.mutation.ExternalID(); ok {
		_spec.SetField(distribution.FieldExternalID, field.TypeString, value)
		_node.ExternalID = value
	}
	if value, ok := dc.mutation.ExternalURL(); ok {
		_spec.SetField(distribution.FieldExternalURL, field.TypeString, value)
		_node.ExternalURL = value
	}
	if value, ok := dc.mutation.ErrorDetails(); ok {
		_spec.SetField(distribution.FieldErrorDetails, field.TypeString, value)
		_node.ErrorDetails = value
	}
	if nodes := dc.mutation.TopicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   distribution.TopicTable,
			Columns: []string{distribution.TopicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(topic.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TopicID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dc.mutation.ChannelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   distribution.ChannelTable,
			Columns: []string{distribution.ChannelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cmschannel.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ChannelID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DistributionCreateBulk is the builder for creating many Distribution entities in bulk.
type DistributionCreateBulk struct {
	config
	err      error
	builders []*DistributionCreate
}

// Save creates the Distribution entities in the database.
func (dcb *DistributionCreateBulk) Save(ctx context.Context) ([]*Distribution, error) {
	if dcb.err != nil {
		return nil, dcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(dcb.builders))
	nodes := make([]*Distribution, len(dcb.builders))
	mutators := make([]Mutator, len(dcb.builders))
	for i := range dcb.builders {
		func(i int, root context.Context) {
			builder := dcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DistributionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dcb *DistributionCreateBulk) SaveX(ctx context.Context) []*Distribution {
	v, err := dcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dcb *DistributionCreateBulk) Exec(ctx context.Context) error {
	_, err := dcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcb *DistributionCreateBulk) ExecX(ctx context.Context) {
	if err := dcb.Exec(ctx); err != nil {
		panic(err)
	}
}
