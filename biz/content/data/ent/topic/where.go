// Code generated by ent, DO NOT EDIT.

package topic

import (
	"ncobase/content/data/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Topic {
	return predicate.Topic(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Topic {
	return predicate.Topic(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Topic {
	return predicate.Topic(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Topic {
	return predicate.Topic(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Topic {
	return predicate.Topic(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Topic {
	return predicate.Topic(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Topic {
	return predicate.Topic(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Topic {
	return predicate.Topic(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Topic {
	return predicate.Topic(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Topic {
	return predicate.Topic(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Topic {
	return predicate.Topic(sql.FieldContainsFold(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Topic {
	return predicate.Topic(sql.FieldEQ(FieldName, v))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Topic {
	return predicate.Topic(sql.FieldEQ(FieldTitle, v))
}

// Slug applies equality check predicate on the "slug" field. It's identical to SlugEQ.
func Slug(v string) predicate.Topic {
	return predicate.Topic(sql.FieldEQ(FieldSlug, v))
}

// Content applies equality check predicate on the "content" field. It's identical to ContentEQ.
func Content(v string) predicate.Topic {
	return predicate.Topic(sql.FieldEQ(FieldContent, v))
}

// Thumbnail applies equality check predicate on the "thumbnail" field. It's identical to ThumbnailEQ.
func Thumbnail(v string) predicate.Topic {
	return predicate.Topic(sql.FieldEQ(FieldThumbnail, v))
}

// Temp applies equality check predicate on the "temp" field. It's identical to TempEQ.
func Temp(v bool) predicate.Topic {
	return predicate.Topic(sql.FieldEQ(FieldTemp, v))
}

// Markdown applies equality check predicate on the "markdown" field. It's identical to MarkdownEQ.
func Markdown(v bool) predicate.Topic {
	return predicate.Topic(sql.FieldEQ(FieldMarkdown, v))
}

// Private applies equality check predicate on the "private" field. It's identical to PrivateEQ.
func Private(v bool) predicate.Topic {
	return predicate.Topic(sql.FieldEQ(FieldPrivate, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int) predicate.Topic {
	return predicate.Topic(sql.FieldEQ(FieldStatus, v))
}

// Released applies equality check predicate on the "released" field. It's identical to ReleasedEQ.
func Released(v int64) predicate.Topic {
	return predicate.Topic(sql.FieldEQ(FieldReleased, v))
}

// TaxonomyID applies equality check predicate on the "taxonomy_id" field. It's identical to TaxonomyIDEQ.
func TaxonomyID(v string) predicate.Topic {
	return predicate.Topic(sql.FieldEQ(FieldTaxonomyID, v))
}

// SpaceID applies equality check predicate on the "space_id" field. It's identical to SpaceIDEQ.
func SpaceID(v string) predicate.Topic {
	return predicate.Topic(sql.FieldEQ(FieldSpaceID, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v string) predicate.Topic {
	return predicate.Topic(sql.FieldEQ(FieldCreatedBy, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v string) predicate.Topic {
	return predicate.Topic(sql.FieldEQ(FieldUpdatedBy, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v int64) predicate.Topic {
	return predicate.Topic(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v int64) predicate.Topic {
	return predicate.Topic(sql.FieldEQ(FieldUpdatedAt, v))
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v int) predicate.Topic {
	return predicate.Topic(sql.FieldEQ(FieldVersion, v))
}

// ContentType applies equality check predicate on the "content_type" field. It's identical to ContentTypeEQ.
func ContentType(v string) predicate.Topic {
	return predicate.Topic(sql.FieldEQ(FieldContentType, v))
}

// SeoTitle applies equality check predicate on the "seo_title" field. It's identical to SeoTitleEQ.
func SeoTitle(v string) predicate.Topic {
	return predicate.Topic(sql.FieldEQ(FieldSeoTitle, v))
}

// SeoDescription applies equality check predicate on the "seo_description" field. It's identical to SeoDescriptionEQ.
func SeoDescription(v string) predicate.Topic {
	return predicate.Topic(sql.FieldEQ(FieldSeoDescription, v))
}

// SeoKeywords applies equality check predicate on the "seo_keywords" field. It's identical to SeoKeywordsEQ.
func SeoKeywords(v string) predicate.Topic {
	return predicate.Topic(sql.FieldEQ(FieldSeoKeywords, v))
}

// ExcerptAuto applies equality check predicate on the "excerpt_auto" field. It's identical to ExcerptAutoEQ.
func ExcerptAuto(v bool) predicate.Topic {
	return predicate.Topic(sql.FieldEQ(FieldExcerptAuto, v))
}

// Excerpt applies equality check predicate on the "excerpt" field. It's identical to ExcerptEQ.
func Excerpt(v string) predicate.Topic {
	return predicate.Topic(sql.FieldEQ(FieldExcerpt, v))
}

// FeaturedMedia applies equality check predicate on the "featured_media" field. It's identical to FeaturedMediaEQ.
func FeaturedMedia(v string) predicate.Topic {
	return predicate.Topic(sql.FieldEQ(FieldFeaturedMedia, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Topic {
	return predicate.Topic(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Topic {
	return predicate.Topic(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Topic {
	return predicate.Topic(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Topic {
	return predicate.Topic(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Topic {
	return predicate.Topic(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Topic {
	return predicate.Topic(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Topic {
	return predicate.Topic(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Topic {
	return predicate.Topic(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Topic {
	return predicate.Topic(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Topic {
	return predicate.Topic(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Topic {
	return predicate.Topic(sql.FieldHasSuffix(FieldName, v))
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.Topic {
	return predicate.Topic(sql.FieldIsNull(FieldName))
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.Topic {
	return predicate.Topic(sql.FieldNotNull(FieldName))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Topic {
	return predicate.Topic(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Topic {
	return predicate.Topic(sql.FieldContainsFold(FieldName, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Topic {
	return predicate.Topic(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Topic {
	return predicate.Topic(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Topic {
	return predicate.Topic(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Topic {
	return predicate.Topic(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Topic {
	return predicate.Topic(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Topic {
	return predicate.Topic(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Topic {
	return predicate.Topic(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Topic {
	return predicate.Topic(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Topic {
	return predicate.Topic(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Topic {
	return predicate.Topic(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Topic {
	return predicate.Topic(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleIsNil applies the IsNil predicate on the "title" field.
func TitleIsNil() predicate.Topic {
	return predicate.Topic(sql.FieldIsNull(FieldTitle))
}

// TitleNotNil applies the NotNil predicate on the "title" field.
func TitleNotNil() predicate.Topic {
	return predicate.Topic(sql.FieldNotNull(FieldTitle))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Topic {
	return predicate.Topic(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Topic {
	return predicate.Topic(sql.FieldContainsFold(FieldTitle, v))
}

// SlugEQ applies the EQ predicate on the "slug" field.
func SlugEQ(v string) predicate.Topic {
	return predicate.Topic(sql.FieldEQ(FieldSlug, v))
}

// SlugNEQ applies the NEQ predicate on the "slug" field.
func SlugNEQ(v string) predicate.Topic {
	return predicate.Topic(sql.FieldNEQ(FieldSlug, v))
}

// SlugIn applies the In predicate on the "slug" field.
func SlugIn(vs ...string) predicate.Topic {
	return predicate.Topic(sql.FieldIn(FieldSlug, vs...))
}

// SlugNotIn applies the NotIn predicate on the "slug" field.
func SlugNotIn(vs ...string) predicate.Topic {
	return predicate.Topic(sql.FieldNotIn(FieldSlug, vs...))
}

// SlugGT applies the GT predicate on the "slug" field.
func SlugGT(v string) predicate.Topic {
	return predicate.Topic(sql.FieldGT(FieldSlug, v))
}

// SlugGTE applies the GTE predicate on the "slug" field.
func SlugGTE(v string) predicate.Topic {
	return predicate.Topic(sql.FieldGTE(FieldSlug, v))
}

// SlugLT applies the LT predicate on the "slug" field.
func SlugLT(v string) predicate.Topic {
	return predicate.Topic(sql.FieldLT(FieldSlug, v))
}

// SlugLTE applies the LTE predicate on the "slug" field.
func SlugLTE(v string) predicate.Topic {
	return predicate.Topic(sql.FieldLTE(FieldSlug, v))
}

// SlugContains applies the Contains predicate on the "slug" field.
func SlugContains(v string) predicate.Topic {
	return predicate.Topic(sql.FieldContains(FieldSlug, v))
}

// SlugHasPrefix applies the HasPrefix predicate on the "slug" field.
func SlugHasPrefix(v string) predicate.Topic {
	return predicate.Topic(sql.FieldHasPrefix(FieldSlug, v))
}

// SlugHasSuffix applies the HasSuffix predicate on the "slug" field.
func SlugHasSuffix(v string) predicate.Topic {
	return predicate.Topic(sql.FieldHasSuffix(FieldSlug, v))
}

// SlugIsNil applies the IsNil predicate on the "slug" field.
func SlugIsNil() predicate.Topic {
	return predicate.Topic(sql.FieldIsNull(FieldSlug))
}

// SlugNotNil applies the NotNil predicate on the "slug" field.
func SlugNotNil() predicate.Topic {
	return predicate.Topic(sql.FieldNotNull(FieldSlug))
}

// SlugEqualFold applies the EqualFold predicate on the "slug" field.
func SlugEqualFold(v string) predicate.Topic {
	return predicate.Topic(sql.FieldEqualFold(FieldSlug, v))
}

// SlugContainsFold applies the ContainsFold predicate on the "slug" field.
func SlugContainsFold(v string) predicate.Topic {
	return predicate.Topic(sql.FieldContainsFold(FieldSlug, v))
}

// ContentEQ applies the EQ predicate on the "content" field.
func ContentEQ(v string) predicate.Topic {
	return predicate.Topic(sql.FieldEQ(FieldContent, v))
}

// ContentNEQ applies the NEQ predicate on the "content" field.
func ContentNEQ(v string) predicate.Topic {
	return predicate.Topic(sql.FieldNEQ(FieldContent, v))
}

// ContentIn applies the In predicate on the "content" field.
func ContentIn(vs ...string) predicate.Topic {
	return predicate.Topic(sql.FieldIn(FieldContent, vs...))
}

// ContentNotIn applies the NotIn predicate on the "content" field.
func ContentNotIn(vs ...string) predicate.Topic {
	return predicate.Topic(sql.FieldNotIn(FieldContent, vs...))
}

// ContentGT applies the GT predicate on the "content" field.
func ContentGT(v string) predicate.Topic {
	return predicate.Topic(sql.FieldGT(FieldContent, v))
}

// ContentGTE applies the GTE predicate on the "content" field.
func ContentGTE(v string) predicate.Topic {
	return predicate.Topic(sql.FieldGTE(FieldContent, v))
}

// ContentLT applies the LT predicate on the "content" field.
func ContentLT(v string) predicate.Topic {
	return predicate.Topic(sql.FieldLT(FieldContent, v))
}

// ContentLTE applies the LTE predicate on the "content" field.
func ContentLTE(v string) predicate.Topic {
	return predicate.Topic(sql.FieldLTE(FieldContent, v))
}

// ContentContains applies the Contains predicate on the "content" field.
func ContentContains(v string) predicate.Topic {
	return predicate.Topic(sql.FieldContains(FieldContent, v))
}

// ContentHasPrefix applies the HasPrefix predicate on the "content" field.
func ContentHasPrefix(v string) predicate.Topic {
	return predicate.Topic(sql.FieldHasPrefix(FieldContent, v))
}

// ContentHasSuffix applies the HasSuffix predicate on the "content" field.
func ContentHasSuffix(v string) predicate.Topic {
	return predicate.Topic(sql.FieldHasSuffix(FieldContent, v))
}

// ContentIsNil applies the IsNil predicate on the "content" field.
func ContentIsNil() predicate.Topic {
	return predicate.Topic(sql.FieldIsNull(FieldContent))
}

// ContentNotNil applies the NotNil predicate on the "content" field.
func ContentNotNil() predicate.Topic {
	return predicate.Topic(sql.FieldNotNull(FieldContent))
}

// ContentEqualFold applies the EqualFold predicate on the "content" field.
func ContentEqualFold(v string) predicate.Topic {
	return predicate.Topic(sql.FieldEqualFold(FieldContent, v))
}

// ContentContainsFold applies the ContainsFold predicate on the "content" field.
func ContentContainsFold(v string) predicate.Topic {
	return predicate.Topic(sql.FieldContainsFold(FieldContent, v))
}

// ThumbnailEQ applies the EQ predicate on the "thumbnail" field.
func ThumbnailEQ(v string) predicate.Topic {
	return predicate.Topic(sql.FieldEQ(FieldThumbnail, v))
}

// ThumbnailNEQ applies the NEQ predicate on the "thumbnail" field.
func ThumbnailNEQ(v string) predicate.Topic {
	return predicate.Topic(sql.FieldNEQ(FieldThumbnail, v))
}

// ThumbnailIn applies the In predicate on the "thumbnail" field.
func ThumbnailIn(vs ...string) predicate.Topic {
	return predicate.Topic(sql.FieldIn(FieldThumbnail, vs...))
}

// ThumbnailNotIn applies the NotIn predicate on the "thumbnail" field.
func ThumbnailNotIn(vs ...string) predicate.Topic {
	return predicate.Topic(sql.FieldNotIn(FieldThumbnail, vs...))
}

// ThumbnailGT applies the GT predicate on the "thumbnail" field.
func ThumbnailGT(v string) predicate.Topic {
	return predicate.Topic(sql.FieldGT(FieldThumbnail, v))
}

// ThumbnailGTE applies the GTE predicate on the "thumbnail" field.
func ThumbnailGTE(v string) predicate.Topic {
	return predicate.Topic(sql.FieldGTE(FieldThumbnail, v))
}

// ThumbnailLT applies the LT predicate on the "thumbnail" field.
func ThumbnailLT(v string) predicate.Topic {
	return predicate.Topic(sql.FieldLT(FieldThumbnail, v))
}

// ThumbnailLTE applies the LTE predicate on the "thumbnail" field.
func ThumbnailLTE(v string) predicate.Topic {
	return predicate.Topic(sql.FieldLTE(FieldThumbnail, v))
}

// ThumbnailContains applies the Contains predicate on the "thumbnail" field.
func ThumbnailContains(v string) predicate.Topic {
	return predicate.Topic(sql.FieldContains(FieldThumbnail, v))
}

// ThumbnailHasPrefix applies the HasPrefix predicate on the "thumbnail" field.
func ThumbnailHasPrefix(v string) predicate.Topic {
	return predicate.Topic(sql.FieldHasPrefix(FieldThumbnail, v))
}

// ThumbnailHasSuffix applies the HasSuffix predicate on the "thumbnail" field.
func ThumbnailHasSuffix(v string) predicate.Topic {
	return predicate.Topic(sql.FieldHasSuffix(FieldThumbnail, v))
}

// ThumbnailIsNil applies the IsNil predicate on the "thumbnail" field.
func ThumbnailIsNil() predicate.Topic {
	return predicate.Topic(sql.FieldIsNull(FieldThumbnail))
}

// ThumbnailNotNil applies the NotNil predicate on the "thumbnail" field.
func ThumbnailNotNil() predicate.Topic {
	return predicate.Topic(sql.FieldNotNull(FieldThumbnail))
}

// ThumbnailEqualFold applies the EqualFold predicate on the "thumbnail" field.
func ThumbnailEqualFold(v string) predicate.Topic {
	return predicate.Topic(sql.FieldEqualFold(FieldThumbnail, v))
}

// ThumbnailContainsFold applies the ContainsFold predicate on the "thumbnail" field.
func ThumbnailContainsFold(v string) predicate.Topic {
	return predicate.Topic(sql.FieldContainsFold(FieldThumbnail, v))
}

// TempEQ applies the EQ predicate on the "temp" field.
func TempEQ(v bool) predicate.Topic {
	return predicate.Topic(sql.FieldEQ(FieldTemp, v))
}

// TempNEQ applies the NEQ predicate on the "temp" field.
func TempNEQ(v bool) predicate.Topic {
	return predicate.Topic(sql.FieldNEQ(FieldTemp, v))
}

// TempIsNil applies the IsNil predicate on the "temp" field.
func TempIsNil() predicate.Topic {
	return predicate.Topic(sql.FieldIsNull(FieldTemp))
}

// TempNotNil applies the NotNil predicate on the "temp" field.
func TempNotNil() predicate.Topic {
	return predicate.Topic(sql.FieldNotNull(FieldTemp))
}

// MarkdownEQ applies the EQ predicate on the "markdown" field.
func MarkdownEQ(v bool) predicate.Topic {
	return predicate.Topic(sql.FieldEQ(FieldMarkdown, v))
}

// MarkdownNEQ applies the NEQ predicate on the "markdown" field.
func MarkdownNEQ(v bool) predicate.Topic {
	return predicate.Topic(sql.FieldNEQ(FieldMarkdown, v))
}

// MarkdownIsNil applies the IsNil predicate on the "markdown" field.
func MarkdownIsNil() predicate.Topic {
	return predicate.Topic(sql.FieldIsNull(FieldMarkdown))
}

// MarkdownNotNil applies the NotNil predicate on the "markdown" field.
func MarkdownNotNil() predicate.Topic {
	return predicate.Topic(sql.FieldNotNull(FieldMarkdown))
}

// PrivateEQ applies the EQ predicate on the "private" field.
func PrivateEQ(v bool) predicate.Topic {
	return predicate.Topic(sql.FieldEQ(FieldPrivate, v))
}

// PrivateNEQ applies the NEQ predicate on the "private" field.
func PrivateNEQ(v bool) predicate.Topic {
	return predicate.Topic(sql.FieldNEQ(FieldPrivate, v))
}

// PrivateIsNil applies the IsNil predicate on the "private" field.
func PrivateIsNil() predicate.Topic {
	return predicate.Topic(sql.FieldIsNull(FieldPrivate))
}

// PrivateNotNil applies the NotNil predicate on the "private" field.
func PrivateNotNil() predicate.Topic {
	return predicate.Topic(sql.FieldNotNull(FieldPrivate))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int) predicate.Topic {
	return predicate.Topic(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int) predicate.Topic {
	return predicate.Topic(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int) predicate.Topic {
	return predicate.Topic(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int) predicate.Topic {
	return predicate.Topic(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int) predicate.Topic {
	return predicate.Topic(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int) predicate.Topic {
	return predicate.Topic(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int) predicate.Topic {
	return predicate.Topic(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int) predicate.Topic {
	return predicate.Topic(sql.FieldLTE(FieldStatus, v))
}

// ReleasedEQ applies the EQ predicate on the "released" field.
func ReleasedEQ(v int64) predicate.Topic {
	return predicate.Topic(sql.FieldEQ(FieldReleased, v))
}

// ReleasedNEQ applies the NEQ predicate on the "released" field.
func ReleasedNEQ(v int64) predicate.Topic {
	return predicate.Topic(sql.FieldNEQ(FieldReleased, v))
}

// ReleasedIn applies the In predicate on the "released" field.
func ReleasedIn(vs ...int64) predicate.Topic {
	return predicate.Topic(sql.FieldIn(FieldReleased, vs...))
}

// ReleasedNotIn applies the NotIn predicate on the "released" field.
func ReleasedNotIn(vs ...int64) predicate.Topic {
	return predicate.Topic(sql.FieldNotIn(FieldReleased, vs...))
}

// ReleasedGT applies the GT predicate on the "released" field.
func ReleasedGT(v int64) predicate.Topic {
	return predicate.Topic(sql.FieldGT(FieldReleased, v))
}

// ReleasedGTE applies the GTE predicate on the "released" field.
func ReleasedGTE(v int64) predicate.Topic {
	return predicate.Topic(sql.FieldGTE(FieldReleased, v))
}

// ReleasedLT applies the LT predicate on the "released" field.
func ReleasedLT(v int64) predicate.Topic {
	return predicate.Topic(sql.FieldLT(FieldReleased, v))
}

// ReleasedLTE applies the LTE predicate on the "released" field.
func ReleasedLTE(v int64) predicate.Topic {
	return predicate.Topic(sql.FieldLTE(FieldReleased, v))
}

// ReleasedIsNil applies the IsNil predicate on the "released" field.
func ReleasedIsNil() predicate.Topic {
	return predicate.Topic(sql.FieldIsNull(FieldReleased))
}

// ReleasedNotNil applies the NotNil predicate on the "released" field.
func ReleasedNotNil() predicate.Topic {
	return predicate.Topic(sql.FieldNotNull(FieldReleased))
}

// TaxonomyIDEQ applies the EQ predicate on the "taxonomy_id" field.
func TaxonomyIDEQ(v string) predicate.Topic {
	return predicate.Topic(sql.FieldEQ(FieldTaxonomyID, v))
}

// TaxonomyIDNEQ applies the NEQ predicate on the "taxonomy_id" field.
func TaxonomyIDNEQ(v string) predicate.Topic {
	return predicate.Topic(sql.FieldNEQ(FieldTaxonomyID, v))
}

// TaxonomyIDIn applies the In predicate on the "taxonomy_id" field.
func TaxonomyIDIn(vs ...string) predicate.Topic {
	return predicate.Topic(sql.FieldIn(FieldTaxonomyID, vs...))
}

// TaxonomyIDNotIn applies the NotIn predicate on the "taxonomy_id" field.
func TaxonomyIDNotIn(vs ...string) predicate.Topic {
	return predicate.Topic(sql.FieldNotIn(FieldTaxonomyID, vs...))
}

// TaxonomyIDGT applies the GT predicate on the "taxonomy_id" field.
func TaxonomyIDGT(v string) predicate.Topic {
	return predicate.Topic(sql.FieldGT(FieldTaxonomyID, v))
}

// TaxonomyIDGTE applies the GTE predicate on the "taxonomy_id" field.
func TaxonomyIDGTE(v string) predicate.Topic {
	return predicate.Topic(sql.FieldGTE(FieldTaxonomyID, v))
}

// TaxonomyIDLT applies the LT predicate on the "taxonomy_id" field.
func TaxonomyIDLT(v string) predicate.Topic {
	return predicate.Topic(sql.FieldLT(FieldTaxonomyID, v))
}

// TaxonomyIDLTE applies the LTE predicate on the "taxonomy_id" field.
func TaxonomyIDLTE(v string) predicate.Topic {
	return predicate.Topic(sql.FieldLTE(FieldTaxonomyID, v))
}

// TaxonomyIDContains applies the Contains predicate on the "taxonomy_id" field.
func TaxonomyIDContains(v string) predicate.Topic {
	return predicate.Topic(sql.FieldContains(FieldTaxonomyID, v))
}

// TaxonomyIDHasPrefix applies the HasPrefix predicate on the "taxonomy_id" field.
func TaxonomyIDHasPrefix(v string) predicate.Topic {
	return predicate.Topic(sql.FieldHasPrefix(FieldTaxonomyID, v))
}

// TaxonomyIDHasSuffix applies the HasSuffix predicate on the "taxonomy_id" field.
func TaxonomyIDHasSuffix(v string) predicate.Topic {
	return predicate.Topic(sql.FieldHasSuffix(FieldTaxonomyID, v))
}

// TaxonomyIDIsNil applies the IsNil predicate on the "taxonomy_id" field.
func TaxonomyIDIsNil() predicate.Topic {
	return predicate.Topic(sql.FieldIsNull(FieldTaxonomyID))
}

// TaxonomyIDNotNil applies the NotNil predicate on the "taxonomy_id" field.
func TaxonomyIDNotNil() predicate.Topic {
	return predicate.Topic(sql.FieldNotNull(FieldTaxonomyID))
}

// TaxonomyIDEqualFold applies the EqualFold predicate on the "taxonomy_id" field.
func TaxonomyIDEqualFold(v string) predicate.Topic {
	return predicate.Topic(sql.FieldEqualFold(FieldTaxonomyID, v))
}

// TaxonomyIDContainsFold applies the ContainsFold predicate on the "taxonomy_id" field.
func TaxonomyIDContainsFold(v string) predicate.Topic {
	return predicate.Topic(sql.FieldContainsFold(FieldTaxonomyID, v))
}

// SpaceIDEQ applies the EQ predicate on the "space_id" field.
func SpaceIDEQ(v string) predicate.Topic {
	return predicate.Topic(sql.FieldEQ(FieldSpaceID, v))
}

// SpaceIDNEQ applies the NEQ predicate on the "space_id" field.
func SpaceIDNEQ(v string) predicate.Topic {
	return predicate.Topic(sql.FieldNEQ(FieldSpaceID, v))
}

// SpaceIDIn applies the In predicate on the "space_id" field.
func SpaceIDIn(vs ...string) predicate.Topic {
	return predicate.Topic(sql.FieldIn(FieldSpaceID, vs...))
}

// SpaceIDNotIn applies the NotIn predicate on the "space_id" field.
func SpaceIDNotIn(vs ...string) predicate.Topic {
	return predicate.Topic(sql.FieldNotIn(FieldSpaceID, vs...))
}

// SpaceIDGT applies the GT predicate on the "space_id" field.
func SpaceIDGT(v string) predicate.Topic {
	return predicate.Topic(sql.FieldGT(FieldSpaceID, v))
}

// SpaceIDGTE applies the GTE predicate on the "space_id" field.
func SpaceIDGTE(v string) predicate.Topic {
	return predicate.Topic(sql.FieldGTE(FieldSpaceID, v))
}

// SpaceIDLT applies the LT predicate on the "space_id" field.
func SpaceIDLT(v string) predicate.Topic {
	return predicate.Topic(sql.FieldLT(FieldSpaceID, v))
}

// SpaceIDLTE applies the LTE predicate on the "space_id" field.
func SpaceIDLTE(v string) predicate.Topic {
	return predicate.Topic(sql.FieldLTE(FieldSpaceID, v))
}

// SpaceIDContains applies the Contains predicate on the "space_id" field.
func SpaceIDContains(v string) predicate.Topic {
	return predicate.Topic(sql.FieldContains(FieldSpaceID, v))
}

// SpaceIDHasPrefix applies the HasPrefix predicate on the "space_id" field.
func SpaceIDHasPrefix(v string) predicate.Topic {
	return predicate.Topic(sql.FieldHasPrefix(FieldSpaceID, v))
}

// SpaceIDHasSuffix applies the HasSuffix predicate on the "space_id" field.
func SpaceIDHasSuffix(v string) predicate.Topic {
	return predicate.Topic(sql.FieldHasSuffix(FieldSpaceID, v))
}

// SpaceIDIsNil applies the IsNil predicate on the "space_id" field.
func SpaceIDIsNil() predicate.Topic {
	return predicate.Topic(sql.FieldIsNull(FieldSpaceID))
}

// SpaceIDNotNil applies the NotNil predicate on the "space_id" field.
func SpaceIDNotNil() predicate.Topic {
	return predicate.Topic(sql.FieldNotNull(FieldSpaceID))
}

// SpaceIDEqualFold applies the EqualFold predicate on the "space_id" field.
func SpaceIDEqualFold(v string) predicate.Topic {
	return predicate.Topic(sql.FieldEqualFold(FieldSpaceID, v))
}

// SpaceIDContainsFold applies the ContainsFold predicate on the "space_id" field.
func SpaceIDContainsFold(v string) predicate.Topic {
	return predicate.Topic(sql.FieldContainsFold(FieldSpaceID, v))
}

// ExtrasIsNil applies the IsNil predicate on the "extras" field.
func ExtrasIsNil() predicate.Topic {
	return predicate.Topic(sql.FieldIsNull(FieldExtras))
}

// ExtrasNotNil applies the NotNil predicate on the "extras" field.
func ExtrasNotNil() predicate.Topic {
	return predicate.Topic(sql.FieldNotNull(FieldExtras))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v string) predicate.Topic {
	return predicate.Topic(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v string) predicate.Topic {
	return predicate.Topic(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...string) predicate.Topic {
	return predicate.Topic(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...string) predicate.Topic {
	return predicate.Topic(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v string) predicate.Topic {
	return predicate.Topic(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v string) predicate.Topic {
	return predicate.Topic(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v string) predicate.Topic {
	return predicate.Topic(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v string) predicate.Topic {
	return predicate.Topic(sql.FieldLTE(FieldCreatedBy, v))
}

// CreatedByContains applies the Contains predicate on the "created_by" field.
func CreatedByContains(v string) predicate.Topic {
	return predicate.Topic(sql.FieldContains(FieldCreatedBy, v))
}

// CreatedByHasPrefix applies the HasPrefix predicate on the "created_by" field.
func CreatedByHasPrefix(v string) predicate.Topic {
	return predicate.Topic(sql.FieldHasPrefix(FieldCreatedBy, v))
}

// CreatedByHasSuffix applies the HasSuffix predicate on the "created_by" field.
func CreatedByHasSuffix(v string) predicate.Topic {
	return predicate.Topic(sql.FieldHasSuffix(FieldCreatedBy, v))
}

// CreatedByIsNil applies the IsNil predicate on the "created_by" field.
func CreatedByIsNil() predicate.Topic {
	return predicate.Topic(sql.FieldIsNull(FieldCreatedBy))
}

// CreatedByNotNil applies the NotNil predicate on the "created_by" field.
func CreatedByNotNil() predicate.Topic {
	return predicate.Topic(sql.FieldNotNull(FieldCreatedBy))
}

// CreatedByEqualFold applies the EqualFold predicate on the "created_by" field.
func CreatedByEqualFold(v string) predicate.Topic {
	return predicate.Topic(sql.FieldEqualFold(FieldCreatedBy, v))
}

// CreatedByContainsFold applies the ContainsFold predicate on the "created_by" field.
func CreatedByContainsFold(v string) predicate.Topic {
	return predicate.Topic(sql.FieldContainsFold(FieldCreatedBy, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v string) predicate.Topic {
	return predicate.Topic(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v string) predicate.Topic {
	return predicate.Topic(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...string) predicate.Topic {
	return predicate.Topic(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...string) predicate.Topic {
	return predicate.Topic(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v string) predicate.Topic {
	return predicate.Topic(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v string) predicate.Topic {
	return predicate.Topic(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v string) predicate.Topic {
	return predicate.Topic(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v string) predicate.Topic {
	return predicate.Topic(sql.FieldLTE(FieldUpdatedBy, v))
}

// UpdatedByContains applies the Contains predicate on the "updated_by" field.
func UpdatedByContains(v string) predicate.Topic {
	return predicate.Topic(sql.FieldContains(FieldUpdatedBy, v))
}

// UpdatedByHasPrefix applies the HasPrefix predicate on the "updated_by" field.
func UpdatedByHasPrefix(v string) predicate.Topic {
	return predicate.Topic(sql.FieldHasPrefix(FieldUpdatedBy, v))
}

// UpdatedByHasSuffix applies the HasSuffix predicate on the "updated_by" field.
func UpdatedByHasSuffix(v string) predicate.Topic {
	return predicate.Topic(sql.FieldHasSuffix(FieldUpdatedBy, v))
}

// UpdatedByIsNil applies the IsNil predicate on the "updated_by" field.
func UpdatedByIsNil() predicate.Topic {
	return predicate.Topic(sql.FieldIsNull(FieldUpdatedBy))
}

// UpdatedByNotNil applies the NotNil predicate on the "updated_by" field.
func UpdatedByNotNil() predicate.Topic {
	return predicate.Topic(sql.FieldNotNull(FieldUpdatedBy))
}

// UpdatedByEqualFold applies the EqualFold predicate on the "updated_by" field.
func UpdatedByEqualFold(v string) predicate.Topic {
	return predicate.Topic(sql.FieldEqualFold(FieldUpdatedBy, v))
}

// UpdatedByContainsFold applies the ContainsFold predicate on the "updated_by" field.
func UpdatedByContainsFold(v string) predicate.Topic {
	return predicate.Topic(sql.FieldContainsFold(FieldUpdatedBy, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v int64) predicate.Topic {
	return predicate.Topic(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v int64) predicate.Topic {
	return predicate.Topic(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...int64) predicate.Topic {
	return predicate.Topic(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...int64) predicate.Topic {
	return predicate.Topic(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v int64) predicate.Topic {
	return predicate.Topic(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v int64) predicate.Topic {
	return predicate.Topic(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v int64) predicate.Topic {
	return predicate.Topic(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v int64) predicate.Topic {
	return predicate.Topic(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.Topic {
	return predicate.Topic(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.Topic {
	return predicate.Topic(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v int64) predicate.Topic {
	return predicate.Topic(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v int64) predicate.Topic {
	return predicate.Topic(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...int64) predicate.Topic {
	return predicate.Topic(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...int64) predicate.Topic {
	return predicate.Topic(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v int64) predicate.Topic {
	return predicate.Topic(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v int64) predicate.Topic {
	return predicate.Topic(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v int64) predicate.Topic {
	return predicate.Topic(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v int64) predicate.Topic {
	return predicate.Topic(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.Topic {
	return predicate.Topic(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.Topic {
	return predicate.Topic(sql.FieldNotNull(FieldUpdatedAt))
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v int) predicate.Topic {
	return predicate.Topic(sql.FieldEQ(FieldVersion, v))
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v int) predicate.Topic {
	return predicate.Topic(sql.FieldNEQ(FieldVersion, v))
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...int) predicate.Topic {
	return predicate.Topic(sql.FieldIn(FieldVersion, vs...))
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...int) predicate.Topic {
	return predicate.Topic(sql.FieldNotIn(FieldVersion, vs...))
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v int) predicate.Topic {
	return predicate.Topic(sql.FieldGT(FieldVersion, v))
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v int) predicate.Topic {
	return predicate.Topic(sql.FieldGTE(FieldVersion, v))
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v int) predicate.Topic {
	return predicate.Topic(sql.FieldLT(FieldVersion, v))
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v int) predicate.Topic {
	return predicate.Topic(sql.FieldLTE(FieldVersion, v))
}

// ContentTypeEQ applies the EQ predicate on the "content_type" field.
func ContentTypeEQ(v string) predicate.Topic {
	return predicate.Topic(sql.FieldEQ(FieldContentType, v))
}

// ContentTypeNEQ applies the NEQ predicate on the "content_type" field.
func ContentTypeNEQ(v string) predicate.Topic {
	return predicate.Topic(sql.FieldNEQ(FieldContentType, v))
}

// ContentTypeIn applies the In predicate on the "content_type" field.
func ContentTypeIn(vs ...string) predicate.Topic {
	return predicate.Topic(sql.FieldIn(FieldContentType, vs...))
}

// ContentTypeNotIn applies the NotIn predicate on the "content_type" field.
func ContentTypeNotIn(vs ...string) predicate.Topic {
	return predicate.Topic(sql.FieldNotIn(FieldContentType, vs...))
}

// ContentTypeGT applies the GT predicate on the "content_type" field.
func ContentTypeGT(v string) predicate.Topic {
	return predicate.Topic(sql.FieldGT(FieldContentType, v))
}

// ContentTypeGTE applies the GTE predicate on the "content_type" field.
func ContentTypeGTE(v string) predicate.Topic {
	return predicate.Topic(sql.FieldGTE(FieldContentType, v))
}

// ContentTypeLT applies the LT predicate on the "content_type" field.
func ContentTypeLT(v string) predicate.Topic {
	return predicate.Topic(sql.FieldLT(FieldContentType, v))
}

// ContentTypeLTE applies the LTE predicate on the "content_type" field.
func ContentTypeLTE(v string) predicate.Topic {
	return predicate.Topic(sql.FieldLTE(FieldContentType, v))
}

// ContentTypeContains applies the Contains predicate on the "content_type" field.
func ContentTypeContains(v string) predicate.Topic {
	return predicate.Topic(sql.FieldContains(FieldContentType, v))
}

// ContentTypeHasPrefix applies the HasPrefix predicate on the "content_type" field.
func ContentTypeHasPrefix(v string) predicate.Topic {
	return predicate.Topic(sql.FieldHasPrefix(FieldContentType, v))
}

// ContentTypeHasSuffix applies the HasSuffix predicate on the "content_type" field.
func ContentTypeHasSuffix(v string) predicate.Topic {
	return predicate.Topic(sql.FieldHasSuffix(FieldContentType, v))
}

// ContentTypeEqualFold applies the EqualFold predicate on the "content_type" field.
func ContentTypeEqualFold(v string) predicate.Topic {
	return predicate.Topic(sql.FieldEqualFold(FieldContentType, v))
}

// ContentTypeContainsFold applies the ContainsFold predicate on the "content_type" field.
func ContentTypeContainsFold(v string) predicate.Topic {
	return predicate.Topic(sql.FieldContainsFold(FieldContentType, v))
}

// SeoTitleEQ applies the EQ predicate on the "seo_title" field.
func SeoTitleEQ(v string) predicate.Topic {
	return predicate.Topic(sql.FieldEQ(FieldSeoTitle, v))
}

// SeoTitleNEQ applies the NEQ predicate on the "seo_title" field.
func SeoTitleNEQ(v string) predicate.Topic {
	return predicate.Topic(sql.FieldNEQ(FieldSeoTitle, v))
}

// SeoTitleIn applies the In predicate on the "seo_title" field.
func SeoTitleIn(vs ...string) predicate.Topic {
	return predicate.Topic(sql.FieldIn(FieldSeoTitle, vs...))
}

// SeoTitleNotIn applies the NotIn predicate on the "seo_title" field.
func SeoTitleNotIn(vs ...string) predicate.Topic {
	return predicate.Topic(sql.FieldNotIn(FieldSeoTitle, vs...))
}

// SeoTitleGT applies the GT predicate on the "seo_title" field.
func SeoTitleGT(v string) predicate.Topic {
	return predicate.Topic(sql.FieldGT(FieldSeoTitle, v))
}

// SeoTitleGTE applies the GTE predicate on the "seo_title" field.
func SeoTitleGTE(v string) predicate.Topic {
	return predicate.Topic(sql.FieldGTE(FieldSeoTitle, v))
}

// SeoTitleLT applies the LT predicate on the "seo_title" field.
func SeoTitleLT(v string) predicate.Topic {
	return predicate.Topic(sql.FieldLT(FieldSeoTitle, v))
}

// SeoTitleLTE applies the LTE predicate on the "seo_title" field.
func SeoTitleLTE(v string) predicate.Topic {
	return predicate.Topic(sql.FieldLTE(FieldSeoTitle, v))
}

// SeoTitleContains applies the Contains predicate on the "seo_title" field.
func SeoTitleContains(v string) predicate.Topic {
	return predicate.Topic(sql.FieldContains(FieldSeoTitle, v))
}

// SeoTitleHasPrefix applies the HasPrefix predicate on the "seo_title" field.
func SeoTitleHasPrefix(v string) predicate.Topic {
	return predicate.Topic(sql.FieldHasPrefix(FieldSeoTitle, v))
}

// SeoTitleHasSuffix applies the HasSuffix predicate on the "seo_title" field.
func SeoTitleHasSuffix(v string) predicate.Topic {
	return predicate.Topic(sql.FieldHasSuffix(FieldSeoTitle, v))
}

// SeoTitleIsNil applies the IsNil predicate on the "seo_title" field.
func SeoTitleIsNil() predicate.Topic {
	return predicate.Topic(sql.FieldIsNull(FieldSeoTitle))
}

// SeoTitleNotNil applies the NotNil predicate on the "seo_title" field.
func SeoTitleNotNil() predicate.Topic {
	return predicate.Topic(sql.FieldNotNull(FieldSeoTitle))
}

// SeoTitleEqualFold applies the EqualFold predicate on the "seo_title" field.
func SeoTitleEqualFold(v string) predicate.Topic {
	return predicate.Topic(sql.FieldEqualFold(FieldSeoTitle, v))
}

// SeoTitleContainsFold applies the ContainsFold predicate on the "seo_title" field.
func SeoTitleContainsFold(v string) predicate.Topic {
	return predicate.Topic(sql.FieldContainsFold(FieldSeoTitle, v))
}

// SeoDescriptionEQ applies the EQ predicate on the "seo_description" field.
func SeoDescriptionEQ(v string) predicate.Topic {
	return predicate.Topic(sql.FieldEQ(FieldSeoDescription, v))
}

// SeoDescriptionNEQ applies the NEQ predicate on the "seo_description" field.
func SeoDescriptionNEQ(v string) predicate.Topic {
	return predicate.Topic(sql.FieldNEQ(FieldSeoDescription, v))
}

// SeoDescriptionIn applies the In predicate on the "seo_description" field.
func SeoDescriptionIn(vs ...string) predicate.Topic {
	return predicate.Topic(sql.FieldIn(FieldSeoDescription, vs...))
}

// SeoDescriptionNotIn applies the NotIn predicate on the "seo_description" field.
func SeoDescriptionNotIn(vs ...string) predicate.Topic {
	return predicate.Topic(sql.FieldNotIn(FieldSeoDescription, vs...))
}

// SeoDescriptionGT applies the GT predicate on the "seo_description" field.
func SeoDescriptionGT(v string) predicate.Topic {
	return predicate.Topic(sql.FieldGT(FieldSeoDescription, v))
}

// SeoDescriptionGTE applies the GTE predicate on the "seo_description" field.
func SeoDescriptionGTE(v string) predicate.Topic {
	return predicate.Topic(sql.FieldGTE(FieldSeoDescription, v))
}

// SeoDescriptionLT applies the LT predicate on the "seo_description" field.
func SeoDescriptionLT(v string) predicate.Topic {
	return predicate.Topic(sql.FieldLT(FieldSeoDescription, v))
}

// SeoDescriptionLTE applies the LTE predicate on the "seo_description" field.
func SeoDescriptionLTE(v string) predicate.Topic {
	return predicate.Topic(sql.FieldLTE(FieldSeoDescription, v))
}

// SeoDescriptionContains applies the Contains predicate on the "seo_description" field.
func SeoDescriptionContains(v string) predicate.Topic {
	return predicate.Topic(sql.FieldContains(FieldSeoDescription, v))
}

// SeoDescriptionHasPrefix applies the HasPrefix predicate on the "seo_description" field.
func SeoDescriptionHasPrefix(v string) predicate.Topic {
	return predicate.Topic(sql.FieldHasPrefix(FieldSeoDescription, v))
}

// SeoDescriptionHasSuffix applies the HasSuffix predicate on the "seo_description" field.
func SeoDescriptionHasSuffix(v string) predicate.Topic {
	return predicate.Topic(sql.FieldHasSuffix(FieldSeoDescription, v))
}

// SeoDescriptionIsNil applies the IsNil predicate on the "seo_description" field.
func SeoDescriptionIsNil() predicate.Topic {
	return predicate.Topic(sql.FieldIsNull(FieldSeoDescription))
}

// SeoDescriptionNotNil applies the NotNil predicate on the "seo_description" field.
func SeoDescriptionNotNil() predicate.Topic {
	return predicate.Topic(sql.FieldNotNull(FieldSeoDescription))
}

// SeoDescriptionEqualFold applies the EqualFold predicate on the "seo_description" field.
func SeoDescriptionEqualFold(v string) predicate.Topic {
	return predicate.Topic(sql.FieldEqualFold(FieldSeoDescription, v))
}

// SeoDescriptionContainsFold applies the ContainsFold predicate on the "seo_description" field.
func SeoDescriptionContainsFold(v string) predicate.Topic {
	return predicate.Topic(sql.FieldContainsFold(FieldSeoDescription, v))
}

// SeoKeywordsEQ applies the EQ predicate on the "seo_keywords" field.
func SeoKeywordsEQ(v string) predicate.Topic {
	return predicate.Topic(sql.FieldEQ(FieldSeoKeywords, v))
}

// SeoKeywordsNEQ applies the NEQ predicate on the "seo_keywords" field.
func SeoKeywordsNEQ(v string) predicate.Topic {
	return predicate.Topic(sql.FieldNEQ(FieldSeoKeywords, v))
}

// SeoKeywordsIn applies the In predicate on the "seo_keywords" field.
func SeoKeywordsIn(vs ...string) predicate.Topic {
	return predicate.Topic(sql.FieldIn(FieldSeoKeywords, vs...))
}

// SeoKeywordsNotIn applies the NotIn predicate on the "seo_keywords" field.
func SeoKeywordsNotIn(vs ...string) predicate.Topic {
	return predicate.Topic(sql.FieldNotIn(FieldSeoKeywords, vs...))
}

// SeoKeywordsGT applies the GT predicate on the "seo_keywords" field.
func SeoKeywordsGT(v string) predicate.Topic {
	return predicate.Topic(sql.FieldGT(FieldSeoKeywords, v))
}

// SeoKeywordsGTE applies the GTE predicate on the "seo_keywords" field.
func SeoKeywordsGTE(v string) predicate.Topic {
	return predicate.Topic(sql.FieldGTE(FieldSeoKeywords, v))
}

// SeoKeywordsLT applies the LT predicate on the "seo_keywords" field.
func SeoKeywordsLT(v string) predicate.Topic {
	return predicate.Topic(sql.FieldLT(FieldSeoKeywords, v))
}

// SeoKeywordsLTE applies the LTE predicate on the "seo_keywords" field.
func SeoKeywordsLTE(v string) predicate.Topic {
	return predicate.Topic(sql.FieldLTE(FieldSeoKeywords, v))
}

// SeoKeywordsContains applies the Contains predicate on the "seo_keywords" field.
func SeoKeywordsContains(v string) predicate.Topic {
	return predicate.Topic(sql.FieldContains(FieldSeoKeywords, v))
}

// SeoKeywordsHasPrefix applies the HasPrefix predicate on the "seo_keywords" field.
func SeoKeywordsHasPrefix(v string) predicate.Topic {
	return predicate.Topic(sql.FieldHasPrefix(FieldSeoKeywords, v))
}

// SeoKeywordsHasSuffix applies the HasSuffix predicate on the "seo_keywords" field.
func SeoKeywordsHasSuffix(v string) predicate.Topic {
	return predicate.Topic(sql.FieldHasSuffix(FieldSeoKeywords, v))
}

// SeoKeywordsIsNil applies the IsNil predicate on the "seo_keywords" field.
func SeoKeywordsIsNil() predicate.Topic {
	return predicate.Topic(sql.FieldIsNull(FieldSeoKeywords))
}

// SeoKeywordsNotNil applies the NotNil predicate on the "seo_keywords" field.
func SeoKeywordsNotNil() predicate.Topic {
	return predicate.Topic(sql.FieldNotNull(FieldSeoKeywords))
}

// SeoKeywordsEqualFold applies the EqualFold predicate on the "seo_keywords" field.
func SeoKeywordsEqualFold(v string) predicate.Topic {
	return predicate.Topic(sql.FieldEqualFold(FieldSeoKeywords, v))
}

// SeoKeywordsContainsFold applies the ContainsFold predicate on the "seo_keywords" field.
func SeoKeywordsContainsFold(v string) predicate.Topic {
	return predicate.Topic(sql.FieldContainsFold(FieldSeoKeywords, v))
}

// ExcerptAutoEQ applies the EQ predicate on the "excerpt_auto" field.
func ExcerptAutoEQ(v bool) predicate.Topic {
	return predicate.Topic(sql.FieldEQ(FieldExcerptAuto, v))
}

// ExcerptAutoNEQ applies the NEQ predicate on the "excerpt_auto" field.
func ExcerptAutoNEQ(v bool) predicate.Topic {
	return predicate.Topic(sql.FieldNEQ(FieldExcerptAuto, v))
}

// ExcerptEQ applies the EQ predicate on the "excerpt" field.
func ExcerptEQ(v string) predicate.Topic {
	return predicate.Topic(sql.FieldEQ(FieldExcerpt, v))
}

// ExcerptNEQ applies the NEQ predicate on the "excerpt" field.
func ExcerptNEQ(v string) predicate.Topic {
	return predicate.Topic(sql.FieldNEQ(FieldExcerpt, v))
}

// ExcerptIn applies the In predicate on the "excerpt" field.
func ExcerptIn(vs ...string) predicate.Topic {
	return predicate.Topic(sql.FieldIn(FieldExcerpt, vs...))
}

// ExcerptNotIn applies the NotIn predicate on the "excerpt" field.
func ExcerptNotIn(vs ...string) predicate.Topic {
	return predicate.Topic(sql.FieldNotIn(FieldExcerpt, vs...))
}

// ExcerptGT applies the GT predicate on the "excerpt" field.
func ExcerptGT(v string) predicate.Topic {
	return predicate.Topic(sql.FieldGT(FieldExcerpt, v))
}

// ExcerptGTE applies the GTE predicate on the "excerpt" field.
func ExcerptGTE(v string) predicate.Topic {
	return predicate.Topic(sql.FieldGTE(FieldExcerpt, v))
}

// ExcerptLT applies the LT predicate on the "excerpt" field.
func ExcerptLT(v string) predicate.Topic {
	return predicate.Topic(sql.FieldLT(FieldExcerpt, v))
}

// ExcerptLTE applies the LTE predicate on the "excerpt" field.
func ExcerptLTE(v string) predicate.Topic {
	return predicate.Topic(sql.FieldLTE(FieldExcerpt, v))
}

// ExcerptContains applies the Contains predicate on the "excerpt" field.
func ExcerptContains(v string) predicate.Topic {
	return predicate.Topic(sql.FieldContains(FieldExcerpt, v))
}

// ExcerptHasPrefix applies the HasPrefix predicate on the "excerpt" field.
func ExcerptHasPrefix(v string) predicate.Topic {
	return predicate.Topic(sql.FieldHasPrefix(FieldExcerpt, v))
}

// ExcerptHasSuffix applies the HasSuffix predicate on the "excerpt" field.
func ExcerptHasSuffix(v string) predicate.Topic {
	return predicate.Topic(sql.FieldHasSuffix(FieldExcerpt, v))
}

// ExcerptIsNil applies the IsNil predicate on the "excerpt" field.
func ExcerptIsNil() predicate.Topic {
	return predicate.Topic(sql.FieldIsNull(FieldExcerpt))
}

// ExcerptNotNil applies the NotNil predicate on the "excerpt" field.
func ExcerptNotNil() predicate.Topic {
	return predicate.Topic(sql.FieldNotNull(FieldExcerpt))
}

// ExcerptEqualFold applies the EqualFold predicate on the "excerpt" field.
func ExcerptEqualFold(v string) predicate.Topic {
	return predicate.Topic(sql.FieldEqualFold(FieldExcerpt, v))
}

// ExcerptContainsFold applies the ContainsFold predicate on the "excerpt" field.
func ExcerptContainsFold(v string) predicate.Topic {
	return predicate.Topic(sql.FieldContainsFold(FieldExcerpt, v))
}

// FeaturedMediaEQ applies the EQ predicate on the "featured_media" field.
func FeaturedMediaEQ(v string) predicate.Topic {
	return predicate.Topic(sql.FieldEQ(FieldFeaturedMedia, v))
}

// FeaturedMediaNEQ applies the NEQ predicate on the "featured_media" field.
func FeaturedMediaNEQ(v string) predicate.Topic {
	return predicate.Topic(sql.FieldNEQ(FieldFeaturedMedia, v))
}

// FeaturedMediaIn applies the In predicate on the "featured_media" field.
func FeaturedMediaIn(vs ...string) predicate.Topic {
	return predicate.Topic(sql.FieldIn(FieldFeaturedMedia, vs...))
}

// FeaturedMediaNotIn applies the NotIn predicate on the "featured_media" field.
func FeaturedMediaNotIn(vs ...string) predicate.Topic {
	return predicate.Topic(sql.FieldNotIn(FieldFeaturedMedia, vs...))
}

// FeaturedMediaGT applies the GT predicate on the "featured_media" field.
func FeaturedMediaGT(v string) predicate.Topic {
	return predicate.Topic(sql.FieldGT(FieldFeaturedMedia, v))
}

// FeaturedMediaGTE applies the GTE predicate on the "featured_media" field.
func FeaturedMediaGTE(v string) predicate.Topic {
	return predicate.Topic(sql.FieldGTE(FieldFeaturedMedia, v))
}

// FeaturedMediaLT applies the LT predicate on the "featured_media" field.
func FeaturedMediaLT(v string) predicate.Topic {
	return predicate.Topic(sql.FieldLT(FieldFeaturedMedia, v))
}

// FeaturedMediaLTE applies the LTE predicate on the "featured_media" field.
func FeaturedMediaLTE(v string) predicate.Topic {
	return predicate.Topic(sql.FieldLTE(FieldFeaturedMedia, v))
}

// FeaturedMediaContains applies the Contains predicate on the "featured_media" field.
func FeaturedMediaContains(v string) predicate.Topic {
	return predicate.Topic(sql.FieldContains(FieldFeaturedMedia, v))
}

// FeaturedMediaHasPrefix applies the HasPrefix predicate on the "featured_media" field.
func FeaturedMediaHasPrefix(v string) predicate.Topic {
	return predicate.Topic(sql.FieldHasPrefix(FieldFeaturedMedia, v))
}

// FeaturedMediaHasSuffix applies the HasSuffix predicate on the "featured_media" field.
func FeaturedMediaHasSuffix(v string) predicate.Topic {
	return predicate.Topic(sql.FieldHasSuffix(FieldFeaturedMedia, v))
}

// FeaturedMediaIsNil applies the IsNil predicate on the "featured_media" field.
func FeaturedMediaIsNil() predicate.Topic {
	return predicate.Topic(sql.FieldIsNull(FieldFeaturedMedia))
}

// FeaturedMediaNotNil applies the NotNil predicate on the "featured_media" field.
func FeaturedMediaNotNil() predicate.Topic {
	return predicate.Topic(sql.FieldNotNull(FieldFeaturedMedia))
}

// FeaturedMediaEqualFold applies the EqualFold predicate on the "featured_media" field.
func FeaturedMediaEqualFold(v string) predicate.Topic {
	return predicate.Topic(sql.FieldEqualFold(FieldFeaturedMedia, v))
}

// FeaturedMediaContainsFold applies the ContainsFold predicate on the "featured_media" field.
func FeaturedMediaContainsFold(v string) predicate.Topic {
	return predicate.Topic(sql.FieldContainsFold(FieldFeaturedMedia, v))
}

// TagsIsNil applies the IsNil predicate on the "tags" field.
func TagsIsNil() predicate.Topic {
	return predicate.Topic(sql.FieldIsNull(FieldTags))
}

// TagsNotNil applies the NotNil predicate on the "tags" field.
func TagsNotNil() predicate.Topic {
	return predicate.Topic(sql.FieldNotNull(FieldTags))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Topic) predicate.Topic {
	return predicate.Topic(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Topic) predicate.Topic {
	return predicate.Topic(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Topic) predicate.Topic {
	return predicate.Topic(sql.NotPredicates(p))
}
