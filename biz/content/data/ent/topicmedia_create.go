// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/content/data/ent/media"
	"ncobase/content/data/ent/topic"
	"ncobase/content/data/ent/topicmedia"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TopicMediaCreate is the builder for creating a TopicMedia entity.
type TopicMediaCreate struct {
	config
	mutation *TopicMediaMutation
	hooks    []Hook
}

// SetType sets the "type" field.
func (tmc *TopicMediaCreate) SetType(s string) *TopicMediaCreate {
	tmc.mutation.SetType(s)
	return tmc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (tmc *TopicMediaCreate) SetNillableType(s *string) *TopicMediaCreate {
	if s != nil {
		tmc.SetType(*s)
	}
	return tmc
}

// SetOrder sets the "order" field.
func (tmc *TopicMediaCreate) SetOrder(i int) *TopicMediaCreate {
	tmc.mutation.SetOrder(i)
	return tmc
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (tmc *TopicMediaCreate) SetNillableOrder(i *int) *TopicMediaCreate {
	if i != nil {
		tmc.SetOrder(*i)
	}
	return tmc
}

// SetCreatedBy sets the "created_by" field.
func (tmc *TopicMediaCreate) SetCreatedBy(s string) *TopicMediaCreate {
	tmc.mutation.SetCreatedBy(s)
	return tmc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (tmc *TopicMediaCreate) SetNillableCreatedBy(s *string) *TopicMediaCreate {
	if s != nil {
		tmc.SetCreatedBy(*s)
	}
	return tmc
}

// SetUpdatedBy sets the "updated_by" field.
func (tmc *TopicMediaCreate) SetUpdatedBy(s string) *TopicMediaCreate {
	tmc.mutation.SetUpdatedBy(s)
	return tmc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (tmc *TopicMediaCreate) SetNillableUpdatedBy(s *string) *TopicMediaCreate {
	if s != nil {
		tmc.SetUpdatedBy(*s)
	}
	return tmc
}

// SetCreatedAt sets the "created_at" field.
func (tmc *TopicMediaCreate) SetCreatedAt(i int64) *TopicMediaCreate {
	tmc.mutation.SetCreatedAt(i)
	return tmc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tmc *TopicMediaCreate) SetNillableCreatedAt(i *int64) *TopicMediaCreate {
	if i != nil {
		tmc.SetCreatedAt(*i)
	}
	return tmc
}

// SetUpdatedAt sets the "updated_at" field.
func (tmc *TopicMediaCreate) SetUpdatedAt(i int64) *TopicMediaCreate {
	tmc.mutation.SetUpdatedAt(i)
	return tmc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tmc *TopicMediaCreate) SetNillableUpdatedAt(i *int64) *TopicMediaCreate {
	if i != nil {
		tmc.SetUpdatedAt(*i)
	}
	return tmc
}

// SetTopicID sets the "topic_id" field.
func (tmc *TopicMediaCreate) SetTopicID(s string) *TopicMediaCreate {
	tmc.mutation.SetTopicID(s)
	return tmc
}

// SetMediaID sets the "media_id" field.
func (tmc *TopicMediaCreate) SetMediaID(s string) *TopicMediaCreate {
	tmc.mutation.SetMediaID(s)
	return tmc
}

// SetID sets the "id" field.
func (tmc *TopicMediaCreate) SetID(s string) *TopicMediaCreate {
	tmc.mutation.SetID(s)
	return tmc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (tmc *TopicMediaCreate) SetNillableID(s *string) *TopicMediaCreate {
	if s != nil {
		tmc.SetID(*s)
	}
	return tmc
}

// SetMedia sets the "media" edge to the Media entity.
func (tmc *TopicMediaCreate) SetMedia(m *Media) *TopicMediaCreate {
	return tmc.SetMediaID(m.ID)
}

// SetTopic sets the "topic" edge to the Topic entity.
func (tmc *TopicMediaCreate) SetTopic(t *Topic) *TopicMediaCreate {
	return tmc.SetTopicID(t.ID)
}

// Mutation returns the TopicMediaMutation object of the builder.
func (tmc *TopicMediaCreate) Mutation() *TopicMediaMutation {
	return tmc.mutation
}

// Save creates the TopicMedia in the database.
func (tmc *TopicMediaCreate) Save(ctx context.Context) (*TopicMedia, error) {
	tmc.defaults()
	return withHooks(ctx, tmc.sqlSave, tmc.mutation, tmc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tmc *TopicMediaCreate) SaveX(ctx context.Context) *TopicMedia {
	v, err := tmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tmc *TopicMediaCreate) Exec(ctx context.Context) error {
	_, err := tmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tmc *TopicMediaCreate) ExecX(ctx context.Context) {
	if err := tmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tmc *TopicMediaCreate) defaults() {
	if _, ok := tmc.mutation.Order(); !ok {
		v := topicmedia.DefaultOrder
		tmc.mutation.SetOrder(v)
	}
	if _, ok := tmc.mutation.CreatedAt(); !ok {
		v := topicmedia.DefaultCreatedAt()
		tmc.mutation.SetCreatedAt(v)
	}
	if _, ok := tmc.mutation.UpdatedAt(); !ok {
		v := topicmedia.DefaultUpdatedAt()
		tmc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tmc.mutation.ID(); !ok {
		v := topicmedia.DefaultID()
		tmc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tmc *TopicMediaCreate) check() error {
	if _, ok := tmc.mutation.Order(); !ok {
		return &ValidationError{Name: "order", err: errors.New(`ent: missing required field "TopicMedia.order"`)}
	}
	if _, ok := tmc.mutation.TopicID(); !ok {
		return &ValidationError{Name: "topic_id", err: errors.New(`ent: missing required field "TopicMedia.topic_id"`)}
	}
	if v, ok := tmc.mutation.TopicID(); ok {
		if err := topicmedia.TopicIDValidator(v); err != nil {
			return &ValidationError{Name: "topic_id", err: fmt.Errorf(`ent: validator failed for field "TopicMedia.topic_id": %w`, err)}
		}
	}
	if _, ok := tmc.mutation.MediaID(); !ok {
		return &ValidationError{Name: "media_id", err: errors.New(`ent: missing required field "TopicMedia.media_id"`)}
	}
	if v, ok := tmc.mutation.MediaID(); ok {
		if err := topicmedia.MediaIDValidator(v); err != nil {
			return &ValidationError{Name: "media_id", err: fmt.Errorf(`ent: validator failed for field "TopicMedia.media_id": %w`, err)}
		}
	}
	if v, ok := tmc.mutation.ID(); ok {
		if err := topicmedia.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "TopicMedia.id": %w`, err)}
		}
	}
	if len(tmc.mutation.MediaIDs()) == 0 {
		return &ValidationError{Name: "media", err: errors.New(`ent: missing required edge "TopicMedia.media"`)}
	}
	if len(tmc.mutation.TopicIDs()) == 0 {
		return &ValidationError{Name: "topic", err: errors.New(`ent: missing required edge "TopicMedia.topic"`)}
	}
	return nil
}

func (tmc *TopicMediaCreate) sqlSave(ctx context.Context) (*TopicMedia, error) {
	if err := tmc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected TopicMedia.ID type: %T", _spec.ID.Value)
		}
	}
	tmc.mutation.id = &_node.ID
	tmc.mutation.done = true
	return _node, nil
}

func (tmc *TopicMediaCreate) createSpec() (*TopicMedia, *sqlgraph.CreateSpec) {
	var (
		_node = &TopicMedia{config: tmc.config}
		_spec = sqlgraph.NewCreateSpec(topicmedia.Table, sqlgraph.NewFieldSpec(topicmedia.FieldID, field.TypeString))
	)
	if id, ok := tmc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tmc.mutation.GetType(); ok {
		_spec.SetField(topicmedia.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := tmc.mutation.Order(); ok {
		_spec.SetField(topicmedia.FieldOrder, field.TypeInt, value)
		_node.Order = value
	}
	if value, ok := tmc.mutation.CreatedBy(); ok {
		_spec.SetField(topicmedia.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := tmc.mutation.UpdatedBy(); ok {
		_spec.SetField(topicmedia.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := tmc.mutation.CreatedAt(); ok {
		_spec.SetField(topicmedia.FieldCreatedAt, field.TypeInt64, value)
		_node.CreatedAt = value
	}
	if value, ok := tmc.mutation.UpdatedAt(); ok {
		_spec.SetField(topicmedia.FieldUpdatedAt, field.TypeInt64, value)
		_node.UpdatedAt = value
	}
	if nodes := tmc.mutation.MediaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   topicmedia.MediaTable,
			Columns: []string{topicmedia.MediaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.MediaID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tmc.mutation.TopicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   topicmedia.TopicTable,
			Columns: []string{topicmedia.TopicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(topic.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TopicID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TopicMediaCreateBulk is the builder for creating many TopicMedia entities in bulk.
type TopicMediaCreateBulk struct {
	config
	err      error
	builders []*TopicMediaCreate
}

// Save creates the TopicMedia entities in the database.
func (tmcb *TopicMediaCreateBulk) Save(ctx context.Context) ([]*TopicMedia, error) {
	if tmcb.err != nil {
		return nil, tmcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tmcb.builders))
	nodes := make([]*TopicMedia, len(tmcb.builders))
	mutators := make([]Mutator, len(tmcb.builders))
	for i := range tmcb.builders {
		func(i int, root context.Context) {
			builder := tmcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TopicMediaMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tmcb *TopicMediaCreateBulk) SaveX(ctx context.Context) []*TopicMedia {
	v, err := tmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tmcb *TopicMediaCreateBulk) Exec(ctx context.Context) error {
	_, err := tmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tmcb *TopicMediaCreateBulk) ExecX(ctx context.Context) {
	if err := tmcb.Exec(ctx); err != nil {
		panic(err)
	}
}
