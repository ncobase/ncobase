// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/realtime/data/ent/predicate"
	"ncobase/realtime/data/ent/subscription"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SubscriptionUpdate is the builder for updating Subscription entities.
type SubscriptionUpdate struct {
	config
	hooks    []Hook
	mutation *SubscriptionMutation
}

// Where appends a list predicates to the SubscriptionUpdate builder.
func (su *SubscriptionUpdate) Where(ps ...predicate.Subscription) *SubscriptionUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetUserID sets the "user_id" field.
func (su *SubscriptionUpdate) SetUserID(s string) *SubscriptionUpdate {
	su.mutation.SetUserID(s)
	return su
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (su *SubscriptionUpdate) SetNillableUserID(s *string) *SubscriptionUpdate {
	if s != nil {
		su.SetUserID(*s)
	}
	return su
}

// ClearUserID clears the value of the "user_id" field.
func (su *SubscriptionUpdate) ClearUserID() *SubscriptionUpdate {
	su.mutation.ClearUserID()
	return su
}

// SetChannelID sets the "channel_id" field.
func (su *SubscriptionUpdate) SetChannelID(s string) *SubscriptionUpdate {
	su.mutation.SetChannelID(s)
	return su
}

// SetNillableChannelID sets the "channel_id" field if the given value is not nil.
func (su *SubscriptionUpdate) SetNillableChannelID(s *string) *SubscriptionUpdate {
	if s != nil {
		su.SetChannelID(*s)
	}
	return su
}

// ClearChannelID clears the value of the "channel_id" field.
func (su *SubscriptionUpdate) ClearChannelID() *SubscriptionUpdate {
	su.mutation.ClearChannelID()
	return su
}

// SetStatus sets the "status" field.
func (su *SubscriptionUpdate) SetStatus(i int) *SubscriptionUpdate {
	su.mutation.ResetStatus()
	su.mutation.SetStatus(i)
	return su
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (su *SubscriptionUpdate) SetNillableStatus(i *int) *SubscriptionUpdate {
	if i != nil {
		su.SetStatus(*i)
	}
	return su
}

// AddStatus adds i to the "status" field.
func (su *SubscriptionUpdate) AddStatus(i int) *SubscriptionUpdate {
	su.mutation.AddStatus(i)
	return su
}

// SetUpdatedAt sets the "updated_at" field.
func (su *SubscriptionUpdate) SetUpdatedAt(i int64) *SubscriptionUpdate {
	su.mutation.ResetUpdatedAt()
	su.mutation.SetUpdatedAt(i)
	return su
}

// AddUpdatedAt adds i to the "updated_at" field.
func (su *SubscriptionUpdate) AddUpdatedAt(i int64) *SubscriptionUpdate {
	su.mutation.AddUpdatedAt(i)
	return su
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (su *SubscriptionUpdate) ClearUpdatedAt() *SubscriptionUpdate {
	su.mutation.ClearUpdatedAt()
	return su
}

// Mutation returns the SubscriptionMutation object of the builder.
func (su *SubscriptionUpdate) Mutation() *SubscriptionMutation {
	return su.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SubscriptionUpdate) Save(ctx context.Context) (int, error) {
	su.defaults()
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SubscriptionUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SubscriptionUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SubscriptionUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *SubscriptionUpdate) defaults() {
	if _, ok := su.mutation.UpdatedAt(); !ok && !su.mutation.UpdatedAtCleared() {
		v := subscription.UpdateDefaultUpdatedAt()
		su.mutation.SetUpdatedAt(v)
	}
}

func (su *SubscriptionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(subscription.Table, subscription.Columns, sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeString))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.UserID(); ok {
		_spec.SetField(subscription.FieldUserID, field.TypeString, value)
	}
	if su.mutation.UserIDCleared() {
		_spec.ClearField(subscription.FieldUserID, field.TypeString)
	}
	if value, ok := su.mutation.ChannelID(); ok {
		_spec.SetField(subscription.FieldChannelID, field.TypeString, value)
	}
	if su.mutation.ChannelIDCleared() {
		_spec.ClearField(subscription.FieldChannelID, field.TypeString)
	}
	if value, ok := su.mutation.Status(); ok {
		_spec.SetField(subscription.FieldStatus, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedStatus(); ok {
		_spec.AddField(subscription.FieldStatus, field.TypeInt, value)
	}
	if su.mutation.CreatedAtCleared() {
		_spec.ClearField(subscription.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.SetField(subscription.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := su.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(subscription.FieldUpdatedAt, field.TypeInt64, value)
	}
	if su.mutation.UpdatedAtCleared() {
		_spec.ClearField(subscription.FieldUpdatedAt, field.TypeInt64)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subscription.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SubscriptionUpdateOne is the builder for updating a single Subscription entity.
type SubscriptionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SubscriptionMutation
}

// SetUserID sets the "user_id" field.
func (suo *SubscriptionUpdateOne) SetUserID(s string) *SubscriptionUpdateOne {
	suo.mutation.SetUserID(s)
	return suo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (suo *SubscriptionUpdateOne) SetNillableUserID(s *string) *SubscriptionUpdateOne {
	if s != nil {
		suo.SetUserID(*s)
	}
	return suo
}

// ClearUserID clears the value of the "user_id" field.
func (suo *SubscriptionUpdateOne) ClearUserID() *SubscriptionUpdateOne {
	suo.mutation.ClearUserID()
	return suo
}

// SetChannelID sets the "channel_id" field.
func (suo *SubscriptionUpdateOne) SetChannelID(s string) *SubscriptionUpdateOne {
	suo.mutation.SetChannelID(s)
	return suo
}

// SetNillableChannelID sets the "channel_id" field if the given value is not nil.
func (suo *SubscriptionUpdateOne) SetNillableChannelID(s *string) *SubscriptionUpdateOne {
	if s != nil {
		suo.SetChannelID(*s)
	}
	return suo
}

// ClearChannelID clears the value of the "channel_id" field.
func (suo *SubscriptionUpdateOne) ClearChannelID() *SubscriptionUpdateOne {
	suo.mutation.ClearChannelID()
	return suo
}

// SetStatus sets the "status" field.
func (suo *SubscriptionUpdateOne) SetStatus(i int) *SubscriptionUpdateOne {
	suo.mutation.ResetStatus()
	suo.mutation.SetStatus(i)
	return suo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (suo *SubscriptionUpdateOne) SetNillableStatus(i *int) *SubscriptionUpdateOne {
	if i != nil {
		suo.SetStatus(*i)
	}
	return suo
}

// AddStatus adds i to the "status" field.
func (suo *SubscriptionUpdateOne) AddStatus(i int) *SubscriptionUpdateOne {
	suo.mutation.AddStatus(i)
	return suo
}

// SetUpdatedAt sets the "updated_at" field.
func (suo *SubscriptionUpdateOne) SetUpdatedAt(i int64) *SubscriptionUpdateOne {
	suo.mutation.ResetUpdatedAt()
	suo.mutation.SetUpdatedAt(i)
	return suo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (suo *SubscriptionUpdateOne) AddUpdatedAt(i int64) *SubscriptionUpdateOne {
	suo.mutation.AddUpdatedAt(i)
	return suo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (suo *SubscriptionUpdateOne) ClearUpdatedAt() *SubscriptionUpdateOne {
	suo.mutation.ClearUpdatedAt()
	return suo
}

// Mutation returns the SubscriptionMutation object of the builder.
func (suo *SubscriptionUpdateOne) Mutation() *SubscriptionMutation {
	return suo.mutation
}

// Where appends a list predicates to the SubscriptionUpdate builder.
func (suo *SubscriptionUpdateOne) Where(ps ...predicate.Subscription) *SubscriptionUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SubscriptionUpdateOne) Select(field string, fields ...string) *SubscriptionUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Subscription entity.
func (suo *SubscriptionUpdateOne) Save(ctx context.Context) (*Subscription, error) {
	suo.defaults()
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SubscriptionUpdateOne) SaveX(ctx context.Context) *Subscription {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SubscriptionUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SubscriptionUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *SubscriptionUpdateOne) defaults() {
	if _, ok := suo.mutation.UpdatedAt(); !ok && !suo.mutation.UpdatedAtCleared() {
		v := subscription.UpdateDefaultUpdatedAt()
		suo.mutation.SetUpdatedAt(v)
	}
}

func (suo *SubscriptionUpdateOne) sqlSave(ctx context.Context) (_node *Subscription, err error) {
	_spec := sqlgraph.NewUpdateSpec(subscription.Table, subscription.Columns, sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeString))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Subscription.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, subscription.FieldID)
		for _, f := range fields {
			if !subscription.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != subscription.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.UserID(); ok {
		_spec.SetField(subscription.FieldUserID, field.TypeString, value)
	}
	if suo.mutation.UserIDCleared() {
		_spec.ClearField(subscription.FieldUserID, field.TypeString)
	}
	if value, ok := suo.mutation.ChannelID(); ok {
		_spec.SetField(subscription.FieldChannelID, field.TypeString, value)
	}
	if suo.mutation.ChannelIDCleared() {
		_spec.ClearField(subscription.FieldChannelID, field.TypeString)
	}
	if value, ok := suo.mutation.Status(); ok {
		_spec.SetField(subscription.FieldStatus, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedStatus(); ok {
		_spec.AddField(subscription.FieldStatus, field.TypeInt, value)
	}
	if suo.mutation.CreatedAtCleared() {
		_spec.ClearField(subscription.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.SetField(subscription.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := suo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(subscription.FieldUpdatedAt, field.TypeInt64, value)
	}
	if suo.mutation.UpdatedAtCleared() {
		_spec.ClearField(subscription.FieldUpdatedAt, field.TypeInt64)
	}
	_node = &Subscription{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subscription.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
