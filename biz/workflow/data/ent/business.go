// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"ncobase/workflow/data/ent/business"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Business is the model entity for the Business schema.
type Business struct {
	config `json:"-"`
	// ID of the ent.
	// primary key
	ID string `json:"id,omitempty"`
	// code
	Code string `json:"code,omitempty"`
	// Status, text status
	Status string `json:"status,omitempty"`
	// Form type code
	FormCode string `json:"form_code,omitempty"`
	// Form version number
	FormVersion string `json:"form_version,omitempty"`
	// Form configuration
	FormConfig map[string]interface{} `json:"form_config,omitempty"`
	// Form permission settings
	FormPermissions map[string]interface{} `json:"form_permissions,omitempty"`
	// Field level permissions
	FieldPermissions map[string]interface{} `json:"field_permissions,omitempty"`
	// Process instance ID
	ProcessID string `json:"process_id,omitempty"`
	// Process template ID
	TemplateID string `json:"template_id,omitempty"`
	// Business document ID
	BusinessKey string `json:"business_key,omitempty"`
	// Original form data
	OriginData map[string]interface{} `json:"origin_data,omitempty"`
	// Current form data
	CurrentData map[string]interface{} `json:"current_data,omitempty"`
	// Data change history
	ChangeLogs []map[string]interface{} `json:"change_logs,omitempty"`
	// Last modification time
	LastModified int64 `json:"last_modified,omitempty"`
	// Last modifier
	LastModifier string `json:"last_modifier,omitempty"`
	// Operation logs
	OperationLogs []map[string]interface{} `json:"operation_logs,omitempty"`
	// Flow status
	FlowStatus string `json:"flow_status,omitempty"`
	// Flow variables
	FlowVariables map[string]interface{} `json:"flow_variables,omitempty"`
	// Whether is draft
	IsDraft bool `json:"is_draft,omitempty"`
	// Whether is terminated
	IsTerminated bool `json:"is_terminated,omitempty"`
	// Whether is suspended
	IsSuspended bool `json:"is_suspended,omitempty"`
	// Suspension reason
	SuspendReason string `json:"suspend_reason,omitempty"`
	// Business tags
	BusinessTags []string `json:"business_tags,omitempty"`
	// Module code
	ModuleCode string `json:"module_code,omitempty"`
	// Category
	Category string `json:"category,omitempty"`
	// Users with view permission
	Viewers []string `json:"viewers,omitempty"`
	// Users with edit permission
	Editors []string `json:"editors,omitempty"`
	// Permission configurations
	PermissionConfigs map[string]interface{} `json:"permission_configs,omitempty"`
	// Role configurations
	RoleConfigs map[string]interface{} `json:"role_configs,omitempty"`
	// Visibility range
	VisibleRange map[string]interface{} `json:"visible_range,omitempty"`
	// Extend properties
	Extras map[string]interface{} `json:"extras,omitempty"`
	// tenant id
	TenantID string `json:"tenant_id,omitempty"`
	// id of the creator
	CreatedBy string `json:"created_by,omitempty"`
	// id of the last updater
	UpdatedBy string `json:"updated_by,omitempty"`
	// created at
	CreatedAt int64 `json:"created_at,omitempty"`
	// updated at
	UpdatedAt    int64 `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Business) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case business.FieldFormConfig, business.FieldFormPermissions, business.FieldFieldPermissions, business.FieldOriginData, business.FieldCurrentData, business.FieldChangeLogs, business.FieldOperationLogs, business.FieldFlowVariables, business.FieldBusinessTags, business.FieldViewers, business.FieldEditors, business.FieldPermissionConfigs, business.FieldRoleConfigs, business.FieldVisibleRange, business.FieldExtras:
			values[i] = new([]byte)
		case business.FieldIsDraft, business.FieldIsTerminated, business.FieldIsSuspended:
			values[i] = new(sql.NullBool)
		case business.FieldLastModified, business.FieldCreatedAt, business.FieldUpdatedAt:
			values[i] = new(sql.NullInt64)
		case business.FieldID, business.FieldCode, business.FieldStatus, business.FieldFormCode, business.FieldFormVersion, business.FieldProcessID, business.FieldTemplateID, business.FieldBusinessKey, business.FieldLastModifier, business.FieldFlowStatus, business.FieldSuspendReason, business.FieldModuleCode, business.FieldCategory, business.FieldTenantID, business.FieldCreatedBy, business.FieldUpdatedBy:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Business fields.
func (b *Business) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case business.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				b.ID = value.String
			}
		case business.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				b.Code = value.String
			}
		case business.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				b.Status = value.String
			}
		case business.FieldFormCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field form_code", values[i])
			} else if value.Valid {
				b.FormCode = value.String
			}
		case business.FieldFormVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field form_version", values[i])
			} else if value.Valid {
				b.FormVersion = value.String
			}
		case business.FieldFormConfig:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field form_config", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &b.FormConfig); err != nil {
					return fmt.Errorf("unmarshal field form_config: %w", err)
				}
			}
		case business.FieldFormPermissions:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field form_permissions", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &b.FormPermissions); err != nil {
					return fmt.Errorf("unmarshal field form_permissions: %w", err)
				}
			}
		case business.FieldFieldPermissions:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field field_permissions", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &b.FieldPermissions); err != nil {
					return fmt.Errorf("unmarshal field field_permissions: %w", err)
				}
			}
		case business.FieldProcessID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field process_id", values[i])
			} else if value.Valid {
				b.ProcessID = value.String
			}
		case business.FieldTemplateID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field template_id", values[i])
			} else if value.Valid {
				b.TemplateID = value.String
			}
		case business.FieldBusinessKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field business_key", values[i])
			} else if value.Valid {
				b.BusinessKey = value.String
			}
		case business.FieldOriginData:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field origin_data", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &b.OriginData); err != nil {
					return fmt.Errorf("unmarshal field origin_data: %w", err)
				}
			}
		case business.FieldCurrentData:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field current_data", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &b.CurrentData); err != nil {
					return fmt.Errorf("unmarshal field current_data: %w", err)
				}
			}
		case business.FieldChangeLogs:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field change_logs", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &b.ChangeLogs); err != nil {
					return fmt.Errorf("unmarshal field change_logs: %w", err)
				}
			}
		case business.FieldLastModified:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field last_modified", values[i])
			} else if value.Valid {
				b.LastModified = value.Int64
			}
		case business.FieldLastModifier:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_modifier", values[i])
			} else if value.Valid {
				b.LastModifier = value.String
			}
		case business.FieldOperationLogs:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field operation_logs", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &b.OperationLogs); err != nil {
					return fmt.Errorf("unmarshal field operation_logs: %w", err)
				}
			}
		case business.FieldFlowStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field flow_status", values[i])
			} else if value.Valid {
				b.FlowStatus = value.String
			}
		case business.FieldFlowVariables:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field flow_variables", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &b.FlowVariables); err != nil {
					return fmt.Errorf("unmarshal field flow_variables: %w", err)
				}
			}
		case business.FieldIsDraft:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_draft", values[i])
			} else if value.Valid {
				b.IsDraft = value.Bool
			}
		case business.FieldIsTerminated:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_terminated", values[i])
			} else if value.Valid {
				b.IsTerminated = value.Bool
			}
		case business.FieldIsSuspended:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_suspended", values[i])
			} else if value.Valid {
				b.IsSuspended = value.Bool
			}
		case business.FieldSuspendReason:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field suspend_reason", values[i])
			} else if value.Valid {
				b.SuspendReason = value.String
			}
		case business.FieldBusinessTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field business_tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &b.BusinessTags); err != nil {
					return fmt.Errorf("unmarshal field business_tags: %w", err)
				}
			}
		case business.FieldModuleCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field module_code", values[i])
			} else if value.Valid {
				b.ModuleCode = value.String
			}
		case business.FieldCategory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field category", values[i])
			} else if value.Valid {
				b.Category = value.String
			}
		case business.FieldViewers:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field viewers", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &b.Viewers); err != nil {
					return fmt.Errorf("unmarshal field viewers: %w", err)
				}
			}
		case business.FieldEditors:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field editors", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &b.Editors); err != nil {
					return fmt.Errorf("unmarshal field editors: %w", err)
				}
			}
		case business.FieldPermissionConfigs:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field permission_configs", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &b.PermissionConfigs); err != nil {
					return fmt.Errorf("unmarshal field permission_configs: %w", err)
				}
			}
		case business.FieldRoleConfigs:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field role_configs", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &b.RoleConfigs); err != nil {
					return fmt.Errorf("unmarshal field role_configs: %w", err)
				}
			}
		case business.FieldVisibleRange:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field visible_range", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &b.VisibleRange); err != nil {
					return fmt.Errorf("unmarshal field visible_range: %w", err)
				}
			}
		case business.FieldExtras:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field extras", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &b.Extras); err != nil {
					return fmt.Errorf("unmarshal field extras: %w", err)
				}
			}
		case business.FieldTenantID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				b.TenantID = value.String
			}
		case business.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				b.CreatedBy = value.String
			}
		case business.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				b.UpdatedBy = value.String
			}
		case business.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				b.CreatedAt = value.Int64
			}
		case business.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				b.UpdatedAt = value.Int64
			}
		default:
			b.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Business.
// This includes values selected through modifiers, order, etc.
func (b *Business) Value(name string) (ent.Value, error) {
	return b.selectValues.Get(name)
}

// Update returns a builder for updating this Business.
// Note that you need to call Business.Unwrap() before calling this method if this Business
// was returned from a transaction, and the transaction was committed or rolled back.
func (b *Business) Update() *BusinessUpdateOne {
	return NewBusinessClient(b.config).UpdateOne(b)
}

// Unwrap unwraps the Business entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (b *Business) Unwrap() *Business {
	_tx, ok := b.config.driver.(*txDriver)
	if !ok {
		panic("ent: Business is not a transactional entity")
	}
	b.config.driver = _tx.drv
	return b
}

// String implements the fmt.Stringer.
func (b *Business) String() string {
	var builder strings.Builder
	builder.WriteString("Business(")
	builder.WriteString(fmt.Sprintf("id=%v, ", b.ID))
	builder.WriteString("code=")
	builder.WriteString(b.Code)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(b.Status)
	builder.WriteString(", ")
	builder.WriteString("form_code=")
	builder.WriteString(b.FormCode)
	builder.WriteString(", ")
	builder.WriteString("form_version=")
	builder.WriteString(b.FormVersion)
	builder.WriteString(", ")
	builder.WriteString("form_config=")
	builder.WriteString(fmt.Sprintf("%v", b.FormConfig))
	builder.WriteString(", ")
	builder.WriteString("form_permissions=")
	builder.WriteString(fmt.Sprintf("%v", b.FormPermissions))
	builder.WriteString(", ")
	builder.WriteString("field_permissions=")
	builder.WriteString(fmt.Sprintf("%v", b.FieldPermissions))
	builder.WriteString(", ")
	builder.WriteString("process_id=")
	builder.WriteString(b.ProcessID)
	builder.WriteString(", ")
	builder.WriteString("template_id=")
	builder.WriteString(b.TemplateID)
	builder.WriteString(", ")
	builder.WriteString("business_key=")
	builder.WriteString(b.BusinessKey)
	builder.WriteString(", ")
	builder.WriteString("origin_data=")
	builder.WriteString(fmt.Sprintf("%v", b.OriginData))
	builder.WriteString(", ")
	builder.WriteString("current_data=")
	builder.WriteString(fmt.Sprintf("%v", b.CurrentData))
	builder.WriteString(", ")
	builder.WriteString("change_logs=")
	builder.WriteString(fmt.Sprintf("%v", b.ChangeLogs))
	builder.WriteString(", ")
	builder.WriteString("last_modified=")
	builder.WriteString(fmt.Sprintf("%v", b.LastModified))
	builder.WriteString(", ")
	builder.WriteString("last_modifier=")
	builder.WriteString(b.LastModifier)
	builder.WriteString(", ")
	builder.WriteString("operation_logs=")
	builder.WriteString(fmt.Sprintf("%v", b.OperationLogs))
	builder.WriteString(", ")
	builder.WriteString("flow_status=")
	builder.WriteString(b.FlowStatus)
	builder.WriteString(", ")
	builder.WriteString("flow_variables=")
	builder.WriteString(fmt.Sprintf("%v", b.FlowVariables))
	builder.WriteString(", ")
	builder.WriteString("is_draft=")
	builder.WriteString(fmt.Sprintf("%v", b.IsDraft))
	builder.WriteString(", ")
	builder.WriteString("is_terminated=")
	builder.WriteString(fmt.Sprintf("%v", b.IsTerminated))
	builder.WriteString(", ")
	builder.WriteString("is_suspended=")
	builder.WriteString(fmt.Sprintf("%v", b.IsSuspended))
	builder.WriteString(", ")
	builder.WriteString("suspend_reason=")
	builder.WriteString(b.SuspendReason)
	builder.WriteString(", ")
	builder.WriteString("business_tags=")
	builder.WriteString(fmt.Sprintf("%v", b.BusinessTags))
	builder.WriteString(", ")
	builder.WriteString("module_code=")
	builder.WriteString(b.ModuleCode)
	builder.WriteString(", ")
	builder.WriteString("category=")
	builder.WriteString(b.Category)
	builder.WriteString(", ")
	builder.WriteString("viewers=")
	builder.WriteString(fmt.Sprintf("%v", b.Viewers))
	builder.WriteString(", ")
	builder.WriteString("editors=")
	builder.WriteString(fmt.Sprintf("%v", b.Editors))
	builder.WriteString(", ")
	builder.WriteString("permission_configs=")
	builder.WriteString(fmt.Sprintf("%v", b.PermissionConfigs))
	builder.WriteString(", ")
	builder.WriteString("role_configs=")
	builder.WriteString(fmt.Sprintf("%v", b.RoleConfigs))
	builder.WriteString(", ")
	builder.WriteString("visible_range=")
	builder.WriteString(fmt.Sprintf("%v", b.VisibleRange))
	builder.WriteString(", ")
	builder.WriteString("extras=")
	builder.WriteString(fmt.Sprintf("%v", b.Extras))
	builder.WriteString(", ")
	builder.WriteString("tenant_id=")
	builder.WriteString(b.TenantID)
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(b.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(b.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", b.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", b.UpdatedAt))
	builder.WriteByte(')')
	return builder.String()
}

// Businesses is a parsable slice of Business.
type Businesses []*Business
