// Code generated by ent, DO NOT EDIT.

package business

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the business type in the database.
	Label = "business"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCode holds the string denoting the code field in the database.
	FieldCode = "code"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldFormCode holds the string denoting the form_code field in the database.
	FieldFormCode = "form_code"
	// FieldFormVersion holds the string denoting the form_version field in the database.
	FieldFormVersion = "form_version"
	// FieldFormConfig holds the string denoting the form_config field in the database.
	FieldFormConfig = "form_config"
	// FieldFormPermissions holds the string denoting the form_permissions field in the database.
	FieldFormPermissions = "form_permissions"
	// FieldFieldPermissions holds the string denoting the field_permissions field in the database.
	FieldFieldPermissions = "field_permissions"
	// FieldProcessID holds the string denoting the process_id field in the database.
	FieldProcessID = "process_id"
	// FieldTemplateID holds the string denoting the template_id field in the database.
	FieldTemplateID = "template_id"
	// FieldBusinessKey holds the string denoting the business_key field in the database.
	FieldBusinessKey = "business_key"
	// FieldOriginData holds the string denoting the origin_data field in the database.
	FieldOriginData = "origin_data"
	// FieldCurrentData holds the string denoting the current_data field in the database.
	FieldCurrentData = "current_data"
	// FieldChangeLogs holds the string denoting the change_logs field in the database.
	FieldChangeLogs = "change_logs"
	// FieldLastModified holds the string denoting the last_modified field in the database.
	FieldLastModified = "last_modified"
	// FieldLastModifier holds the string denoting the last_modifier field in the database.
	FieldLastModifier = "last_modifier"
	// FieldOperationLogs holds the string denoting the operation_logs field in the database.
	FieldOperationLogs = "operation_logs"
	// FieldFlowStatus holds the string denoting the flow_status field in the database.
	FieldFlowStatus = "flow_status"
	// FieldFlowVariables holds the string denoting the flow_variables field in the database.
	FieldFlowVariables = "flow_variables"
	// FieldIsDraft holds the string denoting the is_draft field in the database.
	FieldIsDraft = "is_draft"
	// FieldIsTerminated holds the string denoting the is_terminated field in the database.
	FieldIsTerminated = "is_terminated"
	// FieldIsSuspended holds the string denoting the is_suspended field in the database.
	FieldIsSuspended = "is_suspended"
	// FieldSuspendReason holds the string denoting the suspend_reason field in the database.
	FieldSuspendReason = "suspend_reason"
	// FieldBusinessTags holds the string denoting the business_tags field in the database.
	FieldBusinessTags = "business_tags"
	// FieldModuleCode holds the string denoting the module_code field in the database.
	FieldModuleCode = "module_code"
	// FieldCategory holds the string denoting the category field in the database.
	FieldCategory = "category"
	// FieldViewers holds the string denoting the viewers field in the database.
	FieldViewers = "viewers"
	// FieldEditors holds the string denoting the editors field in the database.
	FieldEditors = "editors"
	// FieldPermissionConfigs holds the string denoting the permission_configs field in the database.
	FieldPermissionConfigs = "permission_configs"
	// FieldRoleConfigs holds the string denoting the role_configs field in the database.
	FieldRoleConfigs = "role_configs"
	// FieldVisibleRange holds the string denoting the visible_range field in the database.
	FieldVisibleRange = "visible_range"
	// FieldExtras holds the string denoting the extras field in the database.
	FieldExtras = "extras"
	// FieldSpaceID holds the string denoting the space_id field in the database.
	FieldSpaceID = "space_id"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// Table holds the table name of the business in the database.
	Table = "ncse_flow_business"
)

// Columns holds all SQL columns for business fields.
var Columns = []string{
	FieldID,
	FieldCode,
	FieldStatus,
	FieldFormCode,
	FieldFormVersion,
	FieldFormConfig,
	FieldFormPermissions,
	FieldFieldPermissions,
	FieldProcessID,
	FieldTemplateID,
	FieldBusinessKey,
	FieldOriginData,
	FieldCurrentData,
	FieldChangeLogs,
	FieldLastModified,
	FieldLastModifier,
	FieldOperationLogs,
	FieldFlowStatus,
	FieldFlowVariables,
	FieldIsDraft,
	FieldIsTerminated,
	FieldIsSuspended,
	FieldSuspendReason,
	FieldBusinessTags,
	FieldModuleCode,
	FieldCategory,
	FieldViewers,
	FieldEditors,
	FieldPermissionConfigs,
	FieldRoleConfigs,
	FieldVisibleRange,
	FieldExtras,
	FieldSpaceID,
	FieldCreatedBy,
	FieldUpdatedBy,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultIsDraft holds the default value on creation for the "is_draft" field.
	DefaultIsDraft bool
	// DefaultIsTerminated holds the default value on creation for the "is_terminated" field.
	DefaultIsTerminated bool
	// DefaultIsSuspended holds the default value on creation for the "is_suspended" field.
	DefaultIsSuspended bool
	// DefaultExtras holds the default value on creation for the "extras" field.
	DefaultExtras map[string]interface{}
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() int64
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() int64
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() int64
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)

// OrderOption defines the ordering options for the Business queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCode orders the results by the code field.
func ByCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCode, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByFormCode orders the results by the form_code field.
func ByFormCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFormCode, opts...).ToFunc()
}

// ByFormVersion orders the results by the form_version field.
func ByFormVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFormVersion, opts...).ToFunc()
}

// ByProcessID orders the results by the process_id field.
func ByProcessID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProcessID, opts...).ToFunc()
}

// ByTemplateID orders the results by the template_id field.
func ByTemplateID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTemplateID, opts...).ToFunc()
}

// ByBusinessKey orders the results by the business_key field.
func ByBusinessKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBusinessKey, opts...).ToFunc()
}

// ByLastModified orders the results by the last_modified field.
func ByLastModified(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastModified, opts...).ToFunc()
}

// ByLastModifier orders the results by the last_modifier field.
func ByLastModifier(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastModifier, opts...).ToFunc()
}

// ByFlowStatus orders the results by the flow_status field.
func ByFlowStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFlowStatus, opts...).ToFunc()
}

// ByIsDraft orders the results by the is_draft field.
func ByIsDraft(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsDraft, opts...).ToFunc()
}

// ByIsTerminated orders the results by the is_terminated field.
func ByIsTerminated(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsTerminated, opts...).ToFunc()
}

// ByIsSuspended orders the results by the is_suspended field.
func ByIsSuspended(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsSuspended, opts...).ToFunc()
}

// BySuspendReason orders the results by the suspend_reason field.
func BySuspendReason(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSuspendReason, opts...).ToFunc()
}

// ByModuleCode orders the results by the module_code field.
func ByModuleCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModuleCode, opts...).ToFunc()
}

// ByCategory orders the results by the category field.
func ByCategory(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCategory, opts...).ToFunc()
}

// BySpaceID orders the results by the space_id field.
func BySpaceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSpaceID, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the updated_by field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}
