// Code generated by ent, DO NOT EDIT.

package business

import (
	"ncobase/workflow/data/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Business {
	return predicate.Business(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Business {
	return predicate.Business(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Business {
	return predicate.Business(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Business {
	return predicate.Business(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Business {
	return predicate.Business(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Business {
	return predicate.Business(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Business {
	return predicate.Business(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Business {
	return predicate.Business(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Business {
	return predicate.Business(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Business {
	return predicate.Business(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Business {
	return predicate.Business(sql.FieldContainsFold(FieldID, id))
}

// Code applies equality check predicate on the "code" field. It's identical to CodeEQ.
func Code(v string) predicate.Business {
	return predicate.Business(sql.FieldEQ(FieldCode, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.Business {
	return predicate.Business(sql.FieldEQ(FieldStatus, v))
}

// FormCode applies equality check predicate on the "form_code" field. It's identical to FormCodeEQ.
func FormCode(v string) predicate.Business {
	return predicate.Business(sql.FieldEQ(FieldFormCode, v))
}

// FormVersion applies equality check predicate on the "form_version" field. It's identical to FormVersionEQ.
func FormVersion(v string) predicate.Business {
	return predicate.Business(sql.FieldEQ(FieldFormVersion, v))
}

// ProcessID applies equality check predicate on the "process_id" field. It's identical to ProcessIDEQ.
func ProcessID(v string) predicate.Business {
	return predicate.Business(sql.FieldEQ(FieldProcessID, v))
}

// TemplateID applies equality check predicate on the "template_id" field. It's identical to TemplateIDEQ.
func TemplateID(v string) predicate.Business {
	return predicate.Business(sql.FieldEQ(FieldTemplateID, v))
}

// BusinessKey applies equality check predicate on the "business_key" field. It's identical to BusinessKeyEQ.
func BusinessKey(v string) predicate.Business {
	return predicate.Business(sql.FieldEQ(FieldBusinessKey, v))
}

// LastModified applies equality check predicate on the "last_modified" field. It's identical to LastModifiedEQ.
func LastModified(v int64) predicate.Business {
	return predicate.Business(sql.FieldEQ(FieldLastModified, v))
}

// LastModifier applies equality check predicate on the "last_modifier" field. It's identical to LastModifierEQ.
func LastModifier(v string) predicate.Business {
	return predicate.Business(sql.FieldEQ(FieldLastModifier, v))
}

// FlowStatus applies equality check predicate on the "flow_status" field. It's identical to FlowStatusEQ.
func FlowStatus(v string) predicate.Business {
	return predicate.Business(sql.FieldEQ(FieldFlowStatus, v))
}

// IsDraft applies equality check predicate on the "is_draft" field. It's identical to IsDraftEQ.
func IsDraft(v bool) predicate.Business {
	return predicate.Business(sql.FieldEQ(FieldIsDraft, v))
}

// IsTerminated applies equality check predicate on the "is_terminated" field. It's identical to IsTerminatedEQ.
func IsTerminated(v bool) predicate.Business {
	return predicate.Business(sql.FieldEQ(FieldIsTerminated, v))
}

// IsSuspended applies equality check predicate on the "is_suspended" field. It's identical to IsSuspendedEQ.
func IsSuspended(v bool) predicate.Business {
	return predicate.Business(sql.FieldEQ(FieldIsSuspended, v))
}

// SuspendReason applies equality check predicate on the "suspend_reason" field. It's identical to SuspendReasonEQ.
func SuspendReason(v string) predicate.Business {
	return predicate.Business(sql.FieldEQ(FieldSuspendReason, v))
}

// ModuleCode applies equality check predicate on the "module_code" field. It's identical to ModuleCodeEQ.
func ModuleCode(v string) predicate.Business {
	return predicate.Business(sql.FieldEQ(FieldModuleCode, v))
}

// Category applies equality check predicate on the "category" field. It's identical to CategoryEQ.
func Category(v string) predicate.Business {
	return predicate.Business(sql.FieldEQ(FieldCategory, v))
}

// SpaceID applies equality check predicate on the "space_id" field. It's identical to SpaceIDEQ.
func SpaceID(v string) predicate.Business {
	return predicate.Business(sql.FieldEQ(FieldSpaceID, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v string) predicate.Business {
	return predicate.Business(sql.FieldEQ(FieldCreatedBy, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v string) predicate.Business {
	return predicate.Business(sql.FieldEQ(FieldUpdatedBy, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v int64) predicate.Business {
	return predicate.Business(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v int64) predicate.Business {
	return predicate.Business(sql.FieldEQ(FieldUpdatedAt, v))
}

// CodeEQ applies the EQ predicate on the "code" field.
func CodeEQ(v string) predicate.Business {
	return predicate.Business(sql.FieldEQ(FieldCode, v))
}

// CodeNEQ applies the NEQ predicate on the "code" field.
func CodeNEQ(v string) predicate.Business {
	return predicate.Business(sql.FieldNEQ(FieldCode, v))
}

// CodeIn applies the In predicate on the "code" field.
func CodeIn(vs ...string) predicate.Business {
	return predicate.Business(sql.FieldIn(FieldCode, vs...))
}

// CodeNotIn applies the NotIn predicate on the "code" field.
func CodeNotIn(vs ...string) predicate.Business {
	return predicate.Business(sql.FieldNotIn(FieldCode, vs...))
}

// CodeGT applies the GT predicate on the "code" field.
func CodeGT(v string) predicate.Business {
	return predicate.Business(sql.FieldGT(FieldCode, v))
}

// CodeGTE applies the GTE predicate on the "code" field.
func CodeGTE(v string) predicate.Business {
	return predicate.Business(sql.FieldGTE(FieldCode, v))
}

// CodeLT applies the LT predicate on the "code" field.
func CodeLT(v string) predicate.Business {
	return predicate.Business(sql.FieldLT(FieldCode, v))
}

// CodeLTE applies the LTE predicate on the "code" field.
func CodeLTE(v string) predicate.Business {
	return predicate.Business(sql.FieldLTE(FieldCode, v))
}

// CodeContains applies the Contains predicate on the "code" field.
func CodeContains(v string) predicate.Business {
	return predicate.Business(sql.FieldContains(FieldCode, v))
}

// CodeHasPrefix applies the HasPrefix predicate on the "code" field.
func CodeHasPrefix(v string) predicate.Business {
	return predicate.Business(sql.FieldHasPrefix(FieldCode, v))
}

// CodeHasSuffix applies the HasSuffix predicate on the "code" field.
func CodeHasSuffix(v string) predicate.Business {
	return predicate.Business(sql.FieldHasSuffix(FieldCode, v))
}

// CodeIsNil applies the IsNil predicate on the "code" field.
func CodeIsNil() predicate.Business {
	return predicate.Business(sql.FieldIsNull(FieldCode))
}

// CodeNotNil applies the NotNil predicate on the "code" field.
func CodeNotNil() predicate.Business {
	return predicate.Business(sql.FieldNotNull(FieldCode))
}

// CodeEqualFold applies the EqualFold predicate on the "code" field.
func CodeEqualFold(v string) predicate.Business {
	return predicate.Business(sql.FieldEqualFold(FieldCode, v))
}

// CodeContainsFold applies the ContainsFold predicate on the "code" field.
func CodeContainsFold(v string) predicate.Business {
	return predicate.Business(sql.FieldContainsFold(FieldCode, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.Business {
	return predicate.Business(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.Business {
	return predicate.Business(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.Business {
	return predicate.Business(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.Business {
	return predicate.Business(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.Business {
	return predicate.Business(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.Business {
	return predicate.Business(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.Business {
	return predicate.Business(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.Business {
	return predicate.Business(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.Business {
	return predicate.Business(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.Business {
	return predicate.Business(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.Business {
	return predicate.Business(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusIsNil applies the IsNil predicate on the "status" field.
func StatusIsNil() predicate.Business {
	return predicate.Business(sql.FieldIsNull(FieldStatus))
}

// StatusNotNil applies the NotNil predicate on the "status" field.
func StatusNotNil() predicate.Business {
	return predicate.Business(sql.FieldNotNull(FieldStatus))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.Business {
	return predicate.Business(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.Business {
	return predicate.Business(sql.FieldContainsFold(FieldStatus, v))
}

// FormCodeEQ applies the EQ predicate on the "form_code" field.
func FormCodeEQ(v string) predicate.Business {
	return predicate.Business(sql.FieldEQ(FieldFormCode, v))
}

// FormCodeNEQ applies the NEQ predicate on the "form_code" field.
func FormCodeNEQ(v string) predicate.Business {
	return predicate.Business(sql.FieldNEQ(FieldFormCode, v))
}

// FormCodeIn applies the In predicate on the "form_code" field.
func FormCodeIn(vs ...string) predicate.Business {
	return predicate.Business(sql.FieldIn(FieldFormCode, vs...))
}

// FormCodeNotIn applies the NotIn predicate on the "form_code" field.
func FormCodeNotIn(vs ...string) predicate.Business {
	return predicate.Business(sql.FieldNotIn(FieldFormCode, vs...))
}

// FormCodeGT applies the GT predicate on the "form_code" field.
func FormCodeGT(v string) predicate.Business {
	return predicate.Business(sql.FieldGT(FieldFormCode, v))
}

// FormCodeGTE applies the GTE predicate on the "form_code" field.
func FormCodeGTE(v string) predicate.Business {
	return predicate.Business(sql.FieldGTE(FieldFormCode, v))
}

// FormCodeLT applies the LT predicate on the "form_code" field.
func FormCodeLT(v string) predicate.Business {
	return predicate.Business(sql.FieldLT(FieldFormCode, v))
}

// FormCodeLTE applies the LTE predicate on the "form_code" field.
func FormCodeLTE(v string) predicate.Business {
	return predicate.Business(sql.FieldLTE(FieldFormCode, v))
}

// FormCodeContains applies the Contains predicate on the "form_code" field.
func FormCodeContains(v string) predicate.Business {
	return predicate.Business(sql.FieldContains(FieldFormCode, v))
}

// FormCodeHasPrefix applies the HasPrefix predicate on the "form_code" field.
func FormCodeHasPrefix(v string) predicate.Business {
	return predicate.Business(sql.FieldHasPrefix(FieldFormCode, v))
}

// FormCodeHasSuffix applies the HasSuffix predicate on the "form_code" field.
func FormCodeHasSuffix(v string) predicate.Business {
	return predicate.Business(sql.FieldHasSuffix(FieldFormCode, v))
}

// FormCodeEqualFold applies the EqualFold predicate on the "form_code" field.
func FormCodeEqualFold(v string) predicate.Business {
	return predicate.Business(sql.FieldEqualFold(FieldFormCode, v))
}

// FormCodeContainsFold applies the ContainsFold predicate on the "form_code" field.
func FormCodeContainsFold(v string) predicate.Business {
	return predicate.Business(sql.FieldContainsFold(FieldFormCode, v))
}

// FormVersionEQ applies the EQ predicate on the "form_version" field.
func FormVersionEQ(v string) predicate.Business {
	return predicate.Business(sql.FieldEQ(FieldFormVersion, v))
}

// FormVersionNEQ applies the NEQ predicate on the "form_version" field.
func FormVersionNEQ(v string) predicate.Business {
	return predicate.Business(sql.FieldNEQ(FieldFormVersion, v))
}

// FormVersionIn applies the In predicate on the "form_version" field.
func FormVersionIn(vs ...string) predicate.Business {
	return predicate.Business(sql.FieldIn(FieldFormVersion, vs...))
}

// FormVersionNotIn applies the NotIn predicate on the "form_version" field.
func FormVersionNotIn(vs ...string) predicate.Business {
	return predicate.Business(sql.FieldNotIn(FieldFormVersion, vs...))
}

// FormVersionGT applies the GT predicate on the "form_version" field.
func FormVersionGT(v string) predicate.Business {
	return predicate.Business(sql.FieldGT(FieldFormVersion, v))
}

// FormVersionGTE applies the GTE predicate on the "form_version" field.
func FormVersionGTE(v string) predicate.Business {
	return predicate.Business(sql.FieldGTE(FieldFormVersion, v))
}

// FormVersionLT applies the LT predicate on the "form_version" field.
func FormVersionLT(v string) predicate.Business {
	return predicate.Business(sql.FieldLT(FieldFormVersion, v))
}

// FormVersionLTE applies the LTE predicate on the "form_version" field.
func FormVersionLTE(v string) predicate.Business {
	return predicate.Business(sql.FieldLTE(FieldFormVersion, v))
}

// FormVersionContains applies the Contains predicate on the "form_version" field.
func FormVersionContains(v string) predicate.Business {
	return predicate.Business(sql.FieldContains(FieldFormVersion, v))
}

// FormVersionHasPrefix applies the HasPrefix predicate on the "form_version" field.
func FormVersionHasPrefix(v string) predicate.Business {
	return predicate.Business(sql.FieldHasPrefix(FieldFormVersion, v))
}

// FormVersionHasSuffix applies the HasSuffix predicate on the "form_version" field.
func FormVersionHasSuffix(v string) predicate.Business {
	return predicate.Business(sql.FieldHasSuffix(FieldFormVersion, v))
}

// FormVersionIsNil applies the IsNil predicate on the "form_version" field.
func FormVersionIsNil() predicate.Business {
	return predicate.Business(sql.FieldIsNull(FieldFormVersion))
}

// FormVersionNotNil applies the NotNil predicate on the "form_version" field.
func FormVersionNotNil() predicate.Business {
	return predicate.Business(sql.FieldNotNull(FieldFormVersion))
}

// FormVersionEqualFold applies the EqualFold predicate on the "form_version" field.
func FormVersionEqualFold(v string) predicate.Business {
	return predicate.Business(sql.FieldEqualFold(FieldFormVersion, v))
}

// FormVersionContainsFold applies the ContainsFold predicate on the "form_version" field.
func FormVersionContainsFold(v string) predicate.Business {
	return predicate.Business(sql.FieldContainsFold(FieldFormVersion, v))
}

// FormConfigIsNil applies the IsNil predicate on the "form_config" field.
func FormConfigIsNil() predicate.Business {
	return predicate.Business(sql.FieldIsNull(FieldFormConfig))
}

// FormConfigNotNil applies the NotNil predicate on the "form_config" field.
func FormConfigNotNil() predicate.Business {
	return predicate.Business(sql.FieldNotNull(FieldFormConfig))
}

// FormPermissionsIsNil applies the IsNil predicate on the "form_permissions" field.
func FormPermissionsIsNil() predicate.Business {
	return predicate.Business(sql.FieldIsNull(FieldFormPermissions))
}

// FormPermissionsNotNil applies the NotNil predicate on the "form_permissions" field.
func FormPermissionsNotNil() predicate.Business {
	return predicate.Business(sql.FieldNotNull(FieldFormPermissions))
}

// FieldPermissionsIsNil applies the IsNil predicate on the "field_permissions" field.
func FieldPermissionsIsNil() predicate.Business {
	return predicate.Business(sql.FieldIsNull(FieldFieldPermissions))
}

// FieldPermissionsNotNil applies the NotNil predicate on the "field_permissions" field.
func FieldPermissionsNotNil() predicate.Business {
	return predicate.Business(sql.FieldNotNull(FieldFieldPermissions))
}

// ProcessIDEQ applies the EQ predicate on the "process_id" field.
func ProcessIDEQ(v string) predicate.Business {
	return predicate.Business(sql.FieldEQ(FieldProcessID, v))
}

// ProcessIDNEQ applies the NEQ predicate on the "process_id" field.
func ProcessIDNEQ(v string) predicate.Business {
	return predicate.Business(sql.FieldNEQ(FieldProcessID, v))
}

// ProcessIDIn applies the In predicate on the "process_id" field.
func ProcessIDIn(vs ...string) predicate.Business {
	return predicate.Business(sql.FieldIn(FieldProcessID, vs...))
}

// ProcessIDNotIn applies the NotIn predicate on the "process_id" field.
func ProcessIDNotIn(vs ...string) predicate.Business {
	return predicate.Business(sql.FieldNotIn(FieldProcessID, vs...))
}

// ProcessIDGT applies the GT predicate on the "process_id" field.
func ProcessIDGT(v string) predicate.Business {
	return predicate.Business(sql.FieldGT(FieldProcessID, v))
}

// ProcessIDGTE applies the GTE predicate on the "process_id" field.
func ProcessIDGTE(v string) predicate.Business {
	return predicate.Business(sql.FieldGTE(FieldProcessID, v))
}

// ProcessIDLT applies the LT predicate on the "process_id" field.
func ProcessIDLT(v string) predicate.Business {
	return predicate.Business(sql.FieldLT(FieldProcessID, v))
}

// ProcessIDLTE applies the LTE predicate on the "process_id" field.
func ProcessIDLTE(v string) predicate.Business {
	return predicate.Business(sql.FieldLTE(FieldProcessID, v))
}

// ProcessIDContains applies the Contains predicate on the "process_id" field.
func ProcessIDContains(v string) predicate.Business {
	return predicate.Business(sql.FieldContains(FieldProcessID, v))
}

// ProcessIDHasPrefix applies the HasPrefix predicate on the "process_id" field.
func ProcessIDHasPrefix(v string) predicate.Business {
	return predicate.Business(sql.FieldHasPrefix(FieldProcessID, v))
}

// ProcessIDHasSuffix applies the HasSuffix predicate on the "process_id" field.
func ProcessIDHasSuffix(v string) predicate.Business {
	return predicate.Business(sql.FieldHasSuffix(FieldProcessID, v))
}

// ProcessIDEqualFold applies the EqualFold predicate on the "process_id" field.
func ProcessIDEqualFold(v string) predicate.Business {
	return predicate.Business(sql.FieldEqualFold(FieldProcessID, v))
}

// ProcessIDContainsFold applies the ContainsFold predicate on the "process_id" field.
func ProcessIDContainsFold(v string) predicate.Business {
	return predicate.Business(sql.FieldContainsFold(FieldProcessID, v))
}

// TemplateIDEQ applies the EQ predicate on the "template_id" field.
func TemplateIDEQ(v string) predicate.Business {
	return predicate.Business(sql.FieldEQ(FieldTemplateID, v))
}

// TemplateIDNEQ applies the NEQ predicate on the "template_id" field.
func TemplateIDNEQ(v string) predicate.Business {
	return predicate.Business(sql.FieldNEQ(FieldTemplateID, v))
}

// TemplateIDIn applies the In predicate on the "template_id" field.
func TemplateIDIn(vs ...string) predicate.Business {
	return predicate.Business(sql.FieldIn(FieldTemplateID, vs...))
}

// TemplateIDNotIn applies the NotIn predicate on the "template_id" field.
func TemplateIDNotIn(vs ...string) predicate.Business {
	return predicate.Business(sql.FieldNotIn(FieldTemplateID, vs...))
}

// TemplateIDGT applies the GT predicate on the "template_id" field.
func TemplateIDGT(v string) predicate.Business {
	return predicate.Business(sql.FieldGT(FieldTemplateID, v))
}

// TemplateIDGTE applies the GTE predicate on the "template_id" field.
func TemplateIDGTE(v string) predicate.Business {
	return predicate.Business(sql.FieldGTE(FieldTemplateID, v))
}

// TemplateIDLT applies the LT predicate on the "template_id" field.
func TemplateIDLT(v string) predicate.Business {
	return predicate.Business(sql.FieldLT(FieldTemplateID, v))
}

// TemplateIDLTE applies the LTE predicate on the "template_id" field.
func TemplateIDLTE(v string) predicate.Business {
	return predicate.Business(sql.FieldLTE(FieldTemplateID, v))
}

// TemplateIDContains applies the Contains predicate on the "template_id" field.
func TemplateIDContains(v string) predicate.Business {
	return predicate.Business(sql.FieldContains(FieldTemplateID, v))
}

// TemplateIDHasPrefix applies the HasPrefix predicate on the "template_id" field.
func TemplateIDHasPrefix(v string) predicate.Business {
	return predicate.Business(sql.FieldHasPrefix(FieldTemplateID, v))
}

// TemplateIDHasSuffix applies the HasSuffix predicate on the "template_id" field.
func TemplateIDHasSuffix(v string) predicate.Business {
	return predicate.Business(sql.FieldHasSuffix(FieldTemplateID, v))
}

// TemplateIDEqualFold applies the EqualFold predicate on the "template_id" field.
func TemplateIDEqualFold(v string) predicate.Business {
	return predicate.Business(sql.FieldEqualFold(FieldTemplateID, v))
}

// TemplateIDContainsFold applies the ContainsFold predicate on the "template_id" field.
func TemplateIDContainsFold(v string) predicate.Business {
	return predicate.Business(sql.FieldContainsFold(FieldTemplateID, v))
}

// BusinessKeyEQ applies the EQ predicate on the "business_key" field.
func BusinessKeyEQ(v string) predicate.Business {
	return predicate.Business(sql.FieldEQ(FieldBusinessKey, v))
}

// BusinessKeyNEQ applies the NEQ predicate on the "business_key" field.
func BusinessKeyNEQ(v string) predicate.Business {
	return predicate.Business(sql.FieldNEQ(FieldBusinessKey, v))
}

// BusinessKeyIn applies the In predicate on the "business_key" field.
func BusinessKeyIn(vs ...string) predicate.Business {
	return predicate.Business(sql.FieldIn(FieldBusinessKey, vs...))
}

// BusinessKeyNotIn applies the NotIn predicate on the "business_key" field.
func BusinessKeyNotIn(vs ...string) predicate.Business {
	return predicate.Business(sql.FieldNotIn(FieldBusinessKey, vs...))
}

// BusinessKeyGT applies the GT predicate on the "business_key" field.
func BusinessKeyGT(v string) predicate.Business {
	return predicate.Business(sql.FieldGT(FieldBusinessKey, v))
}

// BusinessKeyGTE applies the GTE predicate on the "business_key" field.
func BusinessKeyGTE(v string) predicate.Business {
	return predicate.Business(sql.FieldGTE(FieldBusinessKey, v))
}

// BusinessKeyLT applies the LT predicate on the "business_key" field.
func BusinessKeyLT(v string) predicate.Business {
	return predicate.Business(sql.FieldLT(FieldBusinessKey, v))
}

// BusinessKeyLTE applies the LTE predicate on the "business_key" field.
func BusinessKeyLTE(v string) predicate.Business {
	return predicate.Business(sql.FieldLTE(FieldBusinessKey, v))
}

// BusinessKeyContains applies the Contains predicate on the "business_key" field.
func BusinessKeyContains(v string) predicate.Business {
	return predicate.Business(sql.FieldContains(FieldBusinessKey, v))
}

// BusinessKeyHasPrefix applies the HasPrefix predicate on the "business_key" field.
func BusinessKeyHasPrefix(v string) predicate.Business {
	return predicate.Business(sql.FieldHasPrefix(FieldBusinessKey, v))
}

// BusinessKeyHasSuffix applies the HasSuffix predicate on the "business_key" field.
func BusinessKeyHasSuffix(v string) predicate.Business {
	return predicate.Business(sql.FieldHasSuffix(FieldBusinessKey, v))
}

// BusinessKeyEqualFold applies the EqualFold predicate on the "business_key" field.
func BusinessKeyEqualFold(v string) predicate.Business {
	return predicate.Business(sql.FieldEqualFold(FieldBusinessKey, v))
}

// BusinessKeyContainsFold applies the ContainsFold predicate on the "business_key" field.
func BusinessKeyContainsFold(v string) predicate.Business {
	return predicate.Business(sql.FieldContainsFold(FieldBusinessKey, v))
}

// ChangeLogsIsNil applies the IsNil predicate on the "change_logs" field.
func ChangeLogsIsNil() predicate.Business {
	return predicate.Business(sql.FieldIsNull(FieldChangeLogs))
}

// ChangeLogsNotNil applies the NotNil predicate on the "change_logs" field.
func ChangeLogsNotNil() predicate.Business {
	return predicate.Business(sql.FieldNotNull(FieldChangeLogs))
}

// LastModifiedEQ applies the EQ predicate on the "last_modified" field.
func LastModifiedEQ(v int64) predicate.Business {
	return predicate.Business(sql.FieldEQ(FieldLastModified, v))
}

// LastModifiedNEQ applies the NEQ predicate on the "last_modified" field.
func LastModifiedNEQ(v int64) predicate.Business {
	return predicate.Business(sql.FieldNEQ(FieldLastModified, v))
}

// LastModifiedIn applies the In predicate on the "last_modified" field.
func LastModifiedIn(vs ...int64) predicate.Business {
	return predicate.Business(sql.FieldIn(FieldLastModified, vs...))
}

// LastModifiedNotIn applies the NotIn predicate on the "last_modified" field.
func LastModifiedNotIn(vs ...int64) predicate.Business {
	return predicate.Business(sql.FieldNotIn(FieldLastModified, vs...))
}

// LastModifiedGT applies the GT predicate on the "last_modified" field.
func LastModifiedGT(v int64) predicate.Business {
	return predicate.Business(sql.FieldGT(FieldLastModified, v))
}

// LastModifiedGTE applies the GTE predicate on the "last_modified" field.
func LastModifiedGTE(v int64) predicate.Business {
	return predicate.Business(sql.FieldGTE(FieldLastModified, v))
}

// LastModifiedLT applies the LT predicate on the "last_modified" field.
func LastModifiedLT(v int64) predicate.Business {
	return predicate.Business(sql.FieldLT(FieldLastModified, v))
}

// LastModifiedLTE applies the LTE predicate on the "last_modified" field.
func LastModifiedLTE(v int64) predicate.Business {
	return predicate.Business(sql.FieldLTE(FieldLastModified, v))
}

// LastModifiedIsNil applies the IsNil predicate on the "last_modified" field.
func LastModifiedIsNil() predicate.Business {
	return predicate.Business(sql.FieldIsNull(FieldLastModified))
}

// LastModifiedNotNil applies the NotNil predicate on the "last_modified" field.
func LastModifiedNotNil() predicate.Business {
	return predicate.Business(sql.FieldNotNull(FieldLastModified))
}

// LastModifierEQ applies the EQ predicate on the "last_modifier" field.
func LastModifierEQ(v string) predicate.Business {
	return predicate.Business(sql.FieldEQ(FieldLastModifier, v))
}

// LastModifierNEQ applies the NEQ predicate on the "last_modifier" field.
func LastModifierNEQ(v string) predicate.Business {
	return predicate.Business(sql.FieldNEQ(FieldLastModifier, v))
}

// LastModifierIn applies the In predicate on the "last_modifier" field.
func LastModifierIn(vs ...string) predicate.Business {
	return predicate.Business(sql.FieldIn(FieldLastModifier, vs...))
}

// LastModifierNotIn applies the NotIn predicate on the "last_modifier" field.
func LastModifierNotIn(vs ...string) predicate.Business {
	return predicate.Business(sql.FieldNotIn(FieldLastModifier, vs...))
}

// LastModifierGT applies the GT predicate on the "last_modifier" field.
func LastModifierGT(v string) predicate.Business {
	return predicate.Business(sql.FieldGT(FieldLastModifier, v))
}

// LastModifierGTE applies the GTE predicate on the "last_modifier" field.
func LastModifierGTE(v string) predicate.Business {
	return predicate.Business(sql.FieldGTE(FieldLastModifier, v))
}

// LastModifierLT applies the LT predicate on the "last_modifier" field.
func LastModifierLT(v string) predicate.Business {
	return predicate.Business(sql.FieldLT(FieldLastModifier, v))
}

// LastModifierLTE applies the LTE predicate on the "last_modifier" field.
func LastModifierLTE(v string) predicate.Business {
	return predicate.Business(sql.FieldLTE(FieldLastModifier, v))
}

// LastModifierContains applies the Contains predicate on the "last_modifier" field.
func LastModifierContains(v string) predicate.Business {
	return predicate.Business(sql.FieldContains(FieldLastModifier, v))
}

// LastModifierHasPrefix applies the HasPrefix predicate on the "last_modifier" field.
func LastModifierHasPrefix(v string) predicate.Business {
	return predicate.Business(sql.FieldHasPrefix(FieldLastModifier, v))
}

// LastModifierHasSuffix applies the HasSuffix predicate on the "last_modifier" field.
func LastModifierHasSuffix(v string) predicate.Business {
	return predicate.Business(sql.FieldHasSuffix(FieldLastModifier, v))
}

// LastModifierIsNil applies the IsNil predicate on the "last_modifier" field.
func LastModifierIsNil() predicate.Business {
	return predicate.Business(sql.FieldIsNull(FieldLastModifier))
}

// LastModifierNotNil applies the NotNil predicate on the "last_modifier" field.
func LastModifierNotNil() predicate.Business {
	return predicate.Business(sql.FieldNotNull(FieldLastModifier))
}

// LastModifierEqualFold applies the EqualFold predicate on the "last_modifier" field.
func LastModifierEqualFold(v string) predicate.Business {
	return predicate.Business(sql.FieldEqualFold(FieldLastModifier, v))
}

// LastModifierContainsFold applies the ContainsFold predicate on the "last_modifier" field.
func LastModifierContainsFold(v string) predicate.Business {
	return predicate.Business(sql.FieldContainsFold(FieldLastModifier, v))
}

// OperationLogsIsNil applies the IsNil predicate on the "operation_logs" field.
func OperationLogsIsNil() predicate.Business {
	return predicate.Business(sql.FieldIsNull(FieldOperationLogs))
}

// OperationLogsNotNil applies the NotNil predicate on the "operation_logs" field.
func OperationLogsNotNil() predicate.Business {
	return predicate.Business(sql.FieldNotNull(FieldOperationLogs))
}

// FlowStatusEQ applies the EQ predicate on the "flow_status" field.
func FlowStatusEQ(v string) predicate.Business {
	return predicate.Business(sql.FieldEQ(FieldFlowStatus, v))
}

// FlowStatusNEQ applies the NEQ predicate on the "flow_status" field.
func FlowStatusNEQ(v string) predicate.Business {
	return predicate.Business(sql.FieldNEQ(FieldFlowStatus, v))
}

// FlowStatusIn applies the In predicate on the "flow_status" field.
func FlowStatusIn(vs ...string) predicate.Business {
	return predicate.Business(sql.FieldIn(FieldFlowStatus, vs...))
}

// FlowStatusNotIn applies the NotIn predicate on the "flow_status" field.
func FlowStatusNotIn(vs ...string) predicate.Business {
	return predicate.Business(sql.FieldNotIn(FieldFlowStatus, vs...))
}

// FlowStatusGT applies the GT predicate on the "flow_status" field.
func FlowStatusGT(v string) predicate.Business {
	return predicate.Business(sql.FieldGT(FieldFlowStatus, v))
}

// FlowStatusGTE applies the GTE predicate on the "flow_status" field.
func FlowStatusGTE(v string) predicate.Business {
	return predicate.Business(sql.FieldGTE(FieldFlowStatus, v))
}

// FlowStatusLT applies the LT predicate on the "flow_status" field.
func FlowStatusLT(v string) predicate.Business {
	return predicate.Business(sql.FieldLT(FieldFlowStatus, v))
}

// FlowStatusLTE applies the LTE predicate on the "flow_status" field.
func FlowStatusLTE(v string) predicate.Business {
	return predicate.Business(sql.FieldLTE(FieldFlowStatus, v))
}

// FlowStatusContains applies the Contains predicate on the "flow_status" field.
func FlowStatusContains(v string) predicate.Business {
	return predicate.Business(sql.FieldContains(FieldFlowStatus, v))
}

// FlowStatusHasPrefix applies the HasPrefix predicate on the "flow_status" field.
func FlowStatusHasPrefix(v string) predicate.Business {
	return predicate.Business(sql.FieldHasPrefix(FieldFlowStatus, v))
}

// FlowStatusHasSuffix applies the HasSuffix predicate on the "flow_status" field.
func FlowStatusHasSuffix(v string) predicate.Business {
	return predicate.Business(sql.FieldHasSuffix(FieldFlowStatus, v))
}

// FlowStatusIsNil applies the IsNil predicate on the "flow_status" field.
func FlowStatusIsNil() predicate.Business {
	return predicate.Business(sql.FieldIsNull(FieldFlowStatus))
}

// FlowStatusNotNil applies the NotNil predicate on the "flow_status" field.
func FlowStatusNotNil() predicate.Business {
	return predicate.Business(sql.FieldNotNull(FieldFlowStatus))
}

// FlowStatusEqualFold applies the EqualFold predicate on the "flow_status" field.
func FlowStatusEqualFold(v string) predicate.Business {
	return predicate.Business(sql.FieldEqualFold(FieldFlowStatus, v))
}

// FlowStatusContainsFold applies the ContainsFold predicate on the "flow_status" field.
func FlowStatusContainsFold(v string) predicate.Business {
	return predicate.Business(sql.FieldContainsFold(FieldFlowStatus, v))
}

// FlowVariablesIsNil applies the IsNil predicate on the "flow_variables" field.
func FlowVariablesIsNil() predicate.Business {
	return predicate.Business(sql.FieldIsNull(FieldFlowVariables))
}

// FlowVariablesNotNil applies the NotNil predicate on the "flow_variables" field.
func FlowVariablesNotNil() predicate.Business {
	return predicate.Business(sql.FieldNotNull(FieldFlowVariables))
}

// IsDraftEQ applies the EQ predicate on the "is_draft" field.
func IsDraftEQ(v bool) predicate.Business {
	return predicate.Business(sql.FieldEQ(FieldIsDraft, v))
}

// IsDraftNEQ applies the NEQ predicate on the "is_draft" field.
func IsDraftNEQ(v bool) predicate.Business {
	return predicate.Business(sql.FieldNEQ(FieldIsDraft, v))
}

// IsTerminatedEQ applies the EQ predicate on the "is_terminated" field.
func IsTerminatedEQ(v bool) predicate.Business {
	return predicate.Business(sql.FieldEQ(FieldIsTerminated, v))
}

// IsTerminatedNEQ applies the NEQ predicate on the "is_terminated" field.
func IsTerminatedNEQ(v bool) predicate.Business {
	return predicate.Business(sql.FieldNEQ(FieldIsTerminated, v))
}

// IsSuspendedEQ applies the EQ predicate on the "is_suspended" field.
func IsSuspendedEQ(v bool) predicate.Business {
	return predicate.Business(sql.FieldEQ(FieldIsSuspended, v))
}

// IsSuspendedNEQ applies the NEQ predicate on the "is_suspended" field.
func IsSuspendedNEQ(v bool) predicate.Business {
	return predicate.Business(sql.FieldNEQ(FieldIsSuspended, v))
}

// SuspendReasonEQ applies the EQ predicate on the "suspend_reason" field.
func SuspendReasonEQ(v string) predicate.Business {
	return predicate.Business(sql.FieldEQ(FieldSuspendReason, v))
}

// SuspendReasonNEQ applies the NEQ predicate on the "suspend_reason" field.
func SuspendReasonNEQ(v string) predicate.Business {
	return predicate.Business(sql.FieldNEQ(FieldSuspendReason, v))
}

// SuspendReasonIn applies the In predicate on the "suspend_reason" field.
func SuspendReasonIn(vs ...string) predicate.Business {
	return predicate.Business(sql.FieldIn(FieldSuspendReason, vs...))
}

// SuspendReasonNotIn applies the NotIn predicate on the "suspend_reason" field.
func SuspendReasonNotIn(vs ...string) predicate.Business {
	return predicate.Business(sql.FieldNotIn(FieldSuspendReason, vs...))
}

// SuspendReasonGT applies the GT predicate on the "suspend_reason" field.
func SuspendReasonGT(v string) predicate.Business {
	return predicate.Business(sql.FieldGT(FieldSuspendReason, v))
}

// SuspendReasonGTE applies the GTE predicate on the "suspend_reason" field.
func SuspendReasonGTE(v string) predicate.Business {
	return predicate.Business(sql.FieldGTE(FieldSuspendReason, v))
}

// SuspendReasonLT applies the LT predicate on the "suspend_reason" field.
func SuspendReasonLT(v string) predicate.Business {
	return predicate.Business(sql.FieldLT(FieldSuspendReason, v))
}

// SuspendReasonLTE applies the LTE predicate on the "suspend_reason" field.
func SuspendReasonLTE(v string) predicate.Business {
	return predicate.Business(sql.FieldLTE(FieldSuspendReason, v))
}

// SuspendReasonContains applies the Contains predicate on the "suspend_reason" field.
func SuspendReasonContains(v string) predicate.Business {
	return predicate.Business(sql.FieldContains(FieldSuspendReason, v))
}

// SuspendReasonHasPrefix applies the HasPrefix predicate on the "suspend_reason" field.
func SuspendReasonHasPrefix(v string) predicate.Business {
	return predicate.Business(sql.FieldHasPrefix(FieldSuspendReason, v))
}

// SuspendReasonHasSuffix applies the HasSuffix predicate on the "suspend_reason" field.
func SuspendReasonHasSuffix(v string) predicate.Business {
	return predicate.Business(sql.FieldHasSuffix(FieldSuspendReason, v))
}

// SuspendReasonIsNil applies the IsNil predicate on the "suspend_reason" field.
func SuspendReasonIsNil() predicate.Business {
	return predicate.Business(sql.FieldIsNull(FieldSuspendReason))
}

// SuspendReasonNotNil applies the NotNil predicate on the "suspend_reason" field.
func SuspendReasonNotNil() predicate.Business {
	return predicate.Business(sql.FieldNotNull(FieldSuspendReason))
}

// SuspendReasonEqualFold applies the EqualFold predicate on the "suspend_reason" field.
func SuspendReasonEqualFold(v string) predicate.Business {
	return predicate.Business(sql.FieldEqualFold(FieldSuspendReason, v))
}

// SuspendReasonContainsFold applies the ContainsFold predicate on the "suspend_reason" field.
func SuspendReasonContainsFold(v string) predicate.Business {
	return predicate.Business(sql.FieldContainsFold(FieldSuspendReason, v))
}

// BusinessTagsIsNil applies the IsNil predicate on the "business_tags" field.
func BusinessTagsIsNil() predicate.Business {
	return predicate.Business(sql.FieldIsNull(FieldBusinessTags))
}

// BusinessTagsNotNil applies the NotNil predicate on the "business_tags" field.
func BusinessTagsNotNil() predicate.Business {
	return predicate.Business(sql.FieldNotNull(FieldBusinessTags))
}

// ModuleCodeEQ applies the EQ predicate on the "module_code" field.
func ModuleCodeEQ(v string) predicate.Business {
	return predicate.Business(sql.FieldEQ(FieldModuleCode, v))
}

// ModuleCodeNEQ applies the NEQ predicate on the "module_code" field.
func ModuleCodeNEQ(v string) predicate.Business {
	return predicate.Business(sql.FieldNEQ(FieldModuleCode, v))
}

// ModuleCodeIn applies the In predicate on the "module_code" field.
func ModuleCodeIn(vs ...string) predicate.Business {
	return predicate.Business(sql.FieldIn(FieldModuleCode, vs...))
}

// ModuleCodeNotIn applies the NotIn predicate on the "module_code" field.
func ModuleCodeNotIn(vs ...string) predicate.Business {
	return predicate.Business(sql.FieldNotIn(FieldModuleCode, vs...))
}

// ModuleCodeGT applies the GT predicate on the "module_code" field.
func ModuleCodeGT(v string) predicate.Business {
	return predicate.Business(sql.FieldGT(FieldModuleCode, v))
}

// ModuleCodeGTE applies the GTE predicate on the "module_code" field.
func ModuleCodeGTE(v string) predicate.Business {
	return predicate.Business(sql.FieldGTE(FieldModuleCode, v))
}

// ModuleCodeLT applies the LT predicate on the "module_code" field.
func ModuleCodeLT(v string) predicate.Business {
	return predicate.Business(sql.FieldLT(FieldModuleCode, v))
}

// ModuleCodeLTE applies the LTE predicate on the "module_code" field.
func ModuleCodeLTE(v string) predicate.Business {
	return predicate.Business(sql.FieldLTE(FieldModuleCode, v))
}

// ModuleCodeContains applies the Contains predicate on the "module_code" field.
func ModuleCodeContains(v string) predicate.Business {
	return predicate.Business(sql.FieldContains(FieldModuleCode, v))
}

// ModuleCodeHasPrefix applies the HasPrefix predicate on the "module_code" field.
func ModuleCodeHasPrefix(v string) predicate.Business {
	return predicate.Business(sql.FieldHasPrefix(FieldModuleCode, v))
}

// ModuleCodeHasSuffix applies the HasSuffix predicate on the "module_code" field.
func ModuleCodeHasSuffix(v string) predicate.Business {
	return predicate.Business(sql.FieldHasSuffix(FieldModuleCode, v))
}

// ModuleCodeEqualFold applies the EqualFold predicate on the "module_code" field.
func ModuleCodeEqualFold(v string) predicate.Business {
	return predicate.Business(sql.FieldEqualFold(FieldModuleCode, v))
}

// ModuleCodeContainsFold applies the ContainsFold predicate on the "module_code" field.
func ModuleCodeContainsFold(v string) predicate.Business {
	return predicate.Business(sql.FieldContainsFold(FieldModuleCode, v))
}

// CategoryEQ applies the EQ predicate on the "category" field.
func CategoryEQ(v string) predicate.Business {
	return predicate.Business(sql.FieldEQ(FieldCategory, v))
}

// CategoryNEQ applies the NEQ predicate on the "category" field.
func CategoryNEQ(v string) predicate.Business {
	return predicate.Business(sql.FieldNEQ(FieldCategory, v))
}

// CategoryIn applies the In predicate on the "category" field.
func CategoryIn(vs ...string) predicate.Business {
	return predicate.Business(sql.FieldIn(FieldCategory, vs...))
}

// CategoryNotIn applies the NotIn predicate on the "category" field.
func CategoryNotIn(vs ...string) predicate.Business {
	return predicate.Business(sql.FieldNotIn(FieldCategory, vs...))
}

// CategoryGT applies the GT predicate on the "category" field.
func CategoryGT(v string) predicate.Business {
	return predicate.Business(sql.FieldGT(FieldCategory, v))
}

// CategoryGTE applies the GTE predicate on the "category" field.
func CategoryGTE(v string) predicate.Business {
	return predicate.Business(sql.FieldGTE(FieldCategory, v))
}

// CategoryLT applies the LT predicate on the "category" field.
func CategoryLT(v string) predicate.Business {
	return predicate.Business(sql.FieldLT(FieldCategory, v))
}

// CategoryLTE applies the LTE predicate on the "category" field.
func CategoryLTE(v string) predicate.Business {
	return predicate.Business(sql.FieldLTE(FieldCategory, v))
}

// CategoryContains applies the Contains predicate on the "category" field.
func CategoryContains(v string) predicate.Business {
	return predicate.Business(sql.FieldContains(FieldCategory, v))
}

// CategoryHasPrefix applies the HasPrefix predicate on the "category" field.
func CategoryHasPrefix(v string) predicate.Business {
	return predicate.Business(sql.FieldHasPrefix(FieldCategory, v))
}

// CategoryHasSuffix applies the HasSuffix predicate on the "category" field.
func CategoryHasSuffix(v string) predicate.Business {
	return predicate.Business(sql.FieldHasSuffix(FieldCategory, v))
}

// CategoryIsNil applies the IsNil predicate on the "category" field.
func CategoryIsNil() predicate.Business {
	return predicate.Business(sql.FieldIsNull(FieldCategory))
}

// CategoryNotNil applies the NotNil predicate on the "category" field.
func CategoryNotNil() predicate.Business {
	return predicate.Business(sql.FieldNotNull(FieldCategory))
}

// CategoryEqualFold applies the EqualFold predicate on the "category" field.
func CategoryEqualFold(v string) predicate.Business {
	return predicate.Business(sql.FieldEqualFold(FieldCategory, v))
}

// CategoryContainsFold applies the ContainsFold predicate on the "category" field.
func CategoryContainsFold(v string) predicate.Business {
	return predicate.Business(sql.FieldContainsFold(FieldCategory, v))
}

// ViewersIsNil applies the IsNil predicate on the "viewers" field.
func ViewersIsNil() predicate.Business {
	return predicate.Business(sql.FieldIsNull(FieldViewers))
}

// ViewersNotNil applies the NotNil predicate on the "viewers" field.
func ViewersNotNil() predicate.Business {
	return predicate.Business(sql.FieldNotNull(FieldViewers))
}

// EditorsIsNil applies the IsNil predicate on the "editors" field.
func EditorsIsNil() predicate.Business {
	return predicate.Business(sql.FieldIsNull(FieldEditors))
}

// EditorsNotNil applies the NotNil predicate on the "editors" field.
func EditorsNotNil() predicate.Business {
	return predicate.Business(sql.FieldNotNull(FieldEditors))
}

// PermissionConfigsIsNil applies the IsNil predicate on the "permission_configs" field.
func PermissionConfigsIsNil() predicate.Business {
	return predicate.Business(sql.FieldIsNull(FieldPermissionConfigs))
}

// PermissionConfigsNotNil applies the NotNil predicate on the "permission_configs" field.
func PermissionConfigsNotNil() predicate.Business {
	return predicate.Business(sql.FieldNotNull(FieldPermissionConfigs))
}

// RoleConfigsIsNil applies the IsNil predicate on the "role_configs" field.
func RoleConfigsIsNil() predicate.Business {
	return predicate.Business(sql.FieldIsNull(FieldRoleConfigs))
}

// RoleConfigsNotNil applies the NotNil predicate on the "role_configs" field.
func RoleConfigsNotNil() predicate.Business {
	return predicate.Business(sql.FieldNotNull(FieldRoleConfigs))
}

// VisibleRangeIsNil applies the IsNil predicate on the "visible_range" field.
func VisibleRangeIsNil() predicate.Business {
	return predicate.Business(sql.FieldIsNull(FieldVisibleRange))
}

// VisibleRangeNotNil applies the NotNil predicate on the "visible_range" field.
func VisibleRangeNotNil() predicate.Business {
	return predicate.Business(sql.FieldNotNull(FieldVisibleRange))
}

// ExtrasIsNil applies the IsNil predicate on the "extras" field.
func ExtrasIsNil() predicate.Business {
	return predicate.Business(sql.FieldIsNull(FieldExtras))
}

// ExtrasNotNil applies the NotNil predicate on the "extras" field.
func ExtrasNotNil() predicate.Business {
	return predicate.Business(sql.FieldNotNull(FieldExtras))
}

// SpaceIDEQ applies the EQ predicate on the "space_id" field.
func SpaceIDEQ(v string) predicate.Business {
	return predicate.Business(sql.FieldEQ(FieldSpaceID, v))
}

// SpaceIDNEQ applies the NEQ predicate on the "space_id" field.
func SpaceIDNEQ(v string) predicate.Business {
	return predicate.Business(sql.FieldNEQ(FieldSpaceID, v))
}

// SpaceIDIn applies the In predicate on the "space_id" field.
func SpaceIDIn(vs ...string) predicate.Business {
	return predicate.Business(sql.FieldIn(FieldSpaceID, vs...))
}

// SpaceIDNotIn applies the NotIn predicate on the "space_id" field.
func SpaceIDNotIn(vs ...string) predicate.Business {
	return predicate.Business(sql.FieldNotIn(FieldSpaceID, vs...))
}

// SpaceIDGT applies the GT predicate on the "space_id" field.
func SpaceIDGT(v string) predicate.Business {
	return predicate.Business(sql.FieldGT(FieldSpaceID, v))
}

// SpaceIDGTE applies the GTE predicate on the "space_id" field.
func SpaceIDGTE(v string) predicate.Business {
	return predicate.Business(sql.FieldGTE(FieldSpaceID, v))
}

// SpaceIDLT applies the LT predicate on the "space_id" field.
func SpaceIDLT(v string) predicate.Business {
	return predicate.Business(sql.FieldLT(FieldSpaceID, v))
}

// SpaceIDLTE applies the LTE predicate on the "space_id" field.
func SpaceIDLTE(v string) predicate.Business {
	return predicate.Business(sql.FieldLTE(FieldSpaceID, v))
}

// SpaceIDContains applies the Contains predicate on the "space_id" field.
func SpaceIDContains(v string) predicate.Business {
	return predicate.Business(sql.FieldContains(FieldSpaceID, v))
}

// SpaceIDHasPrefix applies the HasPrefix predicate on the "space_id" field.
func SpaceIDHasPrefix(v string) predicate.Business {
	return predicate.Business(sql.FieldHasPrefix(FieldSpaceID, v))
}

// SpaceIDHasSuffix applies the HasSuffix predicate on the "space_id" field.
func SpaceIDHasSuffix(v string) predicate.Business {
	return predicate.Business(sql.FieldHasSuffix(FieldSpaceID, v))
}

// SpaceIDIsNil applies the IsNil predicate on the "space_id" field.
func SpaceIDIsNil() predicate.Business {
	return predicate.Business(sql.FieldIsNull(FieldSpaceID))
}

// SpaceIDNotNil applies the NotNil predicate on the "space_id" field.
func SpaceIDNotNil() predicate.Business {
	return predicate.Business(sql.FieldNotNull(FieldSpaceID))
}

// SpaceIDEqualFold applies the EqualFold predicate on the "space_id" field.
func SpaceIDEqualFold(v string) predicate.Business {
	return predicate.Business(sql.FieldEqualFold(FieldSpaceID, v))
}

// SpaceIDContainsFold applies the ContainsFold predicate on the "space_id" field.
func SpaceIDContainsFold(v string) predicate.Business {
	return predicate.Business(sql.FieldContainsFold(FieldSpaceID, v))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v string) predicate.Business {
	return predicate.Business(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v string) predicate.Business {
	return predicate.Business(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...string) predicate.Business {
	return predicate.Business(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...string) predicate.Business {
	return predicate.Business(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v string) predicate.Business {
	return predicate.Business(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v string) predicate.Business {
	return predicate.Business(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v string) predicate.Business {
	return predicate.Business(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v string) predicate.Business {
	return predicate.Business(sql.FieldLTE(FieldCreatedBy, v))
}

// CreatedByContains applies the Contains predicate on the "created_by" field.
func CreatedByContains(v string) predicate.Business {
	return predicate.Business(sql.FieldContains(FieldCreatedBy, v))
}

// CreatedByHasPrefix applies the HasPrefix predicate on the "created_by" field.
func CreatedByHasPrefix(v string) predicate.Business {
	return predicate.Business(sql.FieldHasPrefix(FieldCreatedBy, v))
}

// CreatedByHasSuffix applies the HasSuffix predicate on the "created_by" field.
func CreatedByHasSuffix(v string) predicate.Business {
	return predicate.Business(sql.FieldHasSuffix(FieldCreatedBy, v))
}

// CreatedByIsNil applies the IsNil predicate on the "created_by" field.
func CreatedByIsNil() predicate.Business {
	return predicate.Business(sql.FieldIsNull(FieldCreatedBy))
}

// CreatedByNotNil applies the NotNil predicate on the "created_by" field.
func CreatedByNotNil() predicate.Business {
	return predicate.Business(sql.FieldNotNull(FieldCreatedBy))
}

// CreatedByEqualFold applies the EqualFold predicate on the "created_by" field.
func CreatedByEqualFold(v string) predicate.Business {
	return predicate.Business(sql.FieldEqualFold(FieldCreatedBy, v))
}

// CreatedByContainsFold applies the ContainsFold predicate on the "created_by" field.
func CreatedByContainsFold(v string) predicate.Business {
	return predicate.Business(sql.FieldContainsFold(FieldCreatedBy, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v string) predicate.Business {
	return predicate.Business(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v string) predicate.Business {
	return predicate.Business(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...string) predicate.Business {
	return predicate.Business(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...string) predicate.Business {
	return predicate.Business(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v string) predicate.Business {
	return predicate.Business(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v string) predicate.Business {
	return predicate.Business(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v string) predicate.Business {
	return predicate.Business(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v string) predicate.Business {
	return predicate.Business(sql.FieldLTE(FieldUpdatedBy, v))
}

// UpdatedByContains applies the Contains predicate on the "updated_by" field.
func UpdatedByContains(v string) predicate.Business {
	return predicate.Business(sql.FieldContains(FieldUpdatedBy, v))
}

// UpdatedByHasPrefix applies the HasPrefix predicate on the "updated_by" field.
func UpdatedByHasPrefix(v string) predicate.Business {
	return predicate.Business(sql.FieldHasPrefix(FieldUpdatedBy, v))
}

// UpdatedByHasSuffix applies the HasSuffix predicate on the "updated_by" field.
func UpdatedByHasSuffix(v string) predicate.Business {
	return predicate.Business(sql.FieldHasSuffix(FieldUpdatedBy, v))
}

// UpdatedByIsNil applies the IsNil predicate on the "updated_by" field.
func UpdatedByIsNil() predicate.Business {
	return predicate.Business(sql.FieldIsNull(FieldUpdatedBy))
}

// UpdatedByNotNil applies the NotNil predicate on the "updated_by" field.
func UpdatedByNotNil() predicate.Business {
	return predicate.Business(sql.FieldNotNull(FieldUpdatedBy))
}

// UpdatedByEqualFold applies the EqualFold predicate on the "updated_by" field.
func UpdatedByEqualFold(v string) predicate.Business {
	return predicate.Business(sql.FieldEqualFold(FieldUpdatedBy, v))
}

// UpdatedByContainsFold applies the ContainsFold predicate on the "updated_by" field.
func UpdatedByContainsFold(v string) predicate.Business {
	return predicate.Business(sql.FieldContainsFold(FieldUpdatedBy, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v int64) predicate.Business {
	return predicate.Business(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v int64) predicate.Business {
	return predicate.Business(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...int64) predicate.Business {
	return predicate.Business(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...int64) predicate.Business {
	return predicate.Business(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v int64) predicate.Business {
	return predicate.Business(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v int64) predicate.Business {
	return predicate.Business(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v int64) predicate.Business {
	return predicate.Business(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v int64) predicate.Business {
	return predicate.Business(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.Business {
	return predicate.Business(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.Business {
	return predicate.Business(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v int64) predicate.Business {
	return predicate.Business(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v int64) predicate.Business {
	return predicate.Business(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...int64) predicate.Business {
	return predicate.Business(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...int64) predicate.Business {
	return predicate.Business(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v int64) predicate.Business {
	return predicate.Business(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v int64) predicate.Business {
	return predicate.Business(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v int64) predicate.Business {
	return predicate.Business(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v int64) predicate.Business {
	return predicate.Business(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.Business {
	return predicate.Business(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.Business {
	return predicate.Business(sql.FieldNotNull(FieldUpdatedAt))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Business) predicate.Business {
	return predicate.Business(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Business) predicate.Business {
	return predicate.Business(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Business) predicate.Business {
	return predicate.Business(sql.NotPredicates(p))
}
