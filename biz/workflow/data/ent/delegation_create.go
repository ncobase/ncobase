// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/workflow/data/ent/delegation"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DelegationCreate is the builder for creating a Delegation entity.
type DelegationCreate struct {
	config
	mutation *DelegationMutation
	hooks    []Hook
}

// SetStatus sets the "status" field.
func (dc *DelegationCreate) SetStatus(s string) *DelegationCreate {
	dc.mutation.SetStatus(s)
	return dc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (dc *DelegationCreate) SetNillableStatus(s *string) *DelegationCreate {
	if s != nil {
		dc.SetStatus(*s)
	}
	return dc
}

// SetExtras sets the "extras" field.
func (dc *DelegationCreate) SetExtras(m map[string]interface{}) *DelegationCreate {
	dc.mutation.SetExtras(m)
	return dc
}

// SetTenantID sets the "tenant_id" field.
func (dc *DelegationCreate) SetTenantID(s string) *DelegationCreate {
	dc.mutation.SetTenantID(s)
	return dc
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (dc *DelegationCreate) SetNillableTenantID(s *string) *DelegationCreate {
	if s != nil {
		dc.SetTenantID(*s)
	}
	return dc
}

// SetCreatedBy sets the "created_by" field.
func (dc *DelegationCreate) SetCreatedBy(s string) *DelegationCreate {
	dc.mutation.SetCreatedBy(s)
	return dc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (dc *DelegationCreate) SetNillableCreatedBy(s *string) *DelegationCreate {
	if s != nil {
		dc.SetCreatedBy(*s)
	}
	return dc
}

// SetUpdatedBy sets the "updated_by" field.
func (dc *DelegationCreate) SetUpdatedBy(s string) *DelegationCreate {
	dc.mutation.SetUpdatedBy(s)
	return dc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (dc *DelegationCreate) SetNillableUpdatedBy(s *string) *DelegationCreate {
	if s != nil {
		dc.SetUpdatedBy(*s)
	}
	return dc
}

// SetCreatedAt sets the "created_at" field.
func (dc *DelegationCreate) SetCreatedAt(i int64) *DelegationCreate {
	dc.mutation.SetCreatedAt(i)
	return dc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dc *DelegationCreate) SetNillableCreatedAt(i *int64) *DelegationCreate {
	if i != nil {
		dc.SetCreatedAt(*i)
	}
	return dc
}

// SetUpdatedAt sets the "updated_at" field.
func (dc *DelegationCreate) SetUpdatedAt(i int64) *DelegationCreate {
	dc.mutation.SetUpdatedAt(i)
	return dc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (dc *DelegationCreate) SetNillableUpdatedAt(i *int64) *DelegationCreate {
	if i != nil {
		dc.SetUpdatedAt(*i)
	}
	return dc
}

// SetDelegatorID sets the "delegator_id" field.
func (dc *DelegationCreate) SetDelegatorID(s string) *DelegationCreate {
	dc.mutation.SetDelegatorID(s)
	return dc
}

// SetDelegateeID sets the "delegatee_id" field.
func (dc *DelegationCreate) SetDelegateeID(s string) *DelegationCreate {
	dc.mutation.SetDelegateeID(s)
	return dc
}

// SetTemplateID sets the "template_id" field.
func (dc *DelegationCreate) SetTemplateID(s string) *DelegationCreate {
	dc.mutation.SetTemplateID(s)
	return dc
}

// SetNillableTemplateID sets the "template_id" field if the given value is not nil.
func (dc *DelegationCreate) SetNillableTemplateID(s *string) *DelegationCreate {
	if s != nil {
		dc.SetTemplateID(*s)
	}
	return dc
}

// SetNodeType sets the "node_type" field.
func (dc *DelegationCreate) SetNodeType(s string) *DelegationCreate {
	dc.mutation.SetNodeType(s)
	return dc
}

// SetNillableNodeType sets the "node_type" field if the given value is not nil.
func (dc *DelegationCreate) SetNillableNodeType(s *string) *DelegationCreate {
	if s != nil {
		dc.SetNodeType(*s)
	}
	return dc
}

// SetConditions sets the "conditions" field.
func (dc *DelegationCreate) SetConditions(s []string) *DelegationCreate {
	dc.mutation.SetConditions(s)
	return dc
}

// SetStartTime sets the "start_time" field.
func (dc *DelegationCreate) SetStartTime(i int64) *DelegationCreate {
	dc.mutation.SetStartTime(i)
	return dc
}

// SetEndTime sets the "end_time" field.
func (dc *DelegationCreate) SetEndTime(i int64) *DelegationCreate {
	dc.mutation.SetEndTime(i)
	return dc
}

// SetIsEnabled sets the "is_enabled" field.
func (dc *DelegationCreate) SetIsEnabled(b bool) *DelegationCreate {
	dc.mutation.SetIsEnabled(b)
	return dc
}

// SetNillableIsEnabled sets the "is_enabled" field if the given value is not nil.
func (dc *DelegationCreate) SetNillableIsEnabled(b *bool) *DelegationCreate {
	if b != nil {
		dc.SetIsEnabled(*b)
	}
	return dc
}

// SetID sets the "id" field.
func (dc *DelegationCreate) SetID(s string) *DelegationCreate {
	dc.mutation.SetID(s)
	return dc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (dc *DelegationCreate) SetNillableID(s *string) *DelegationCreate {
	if s != nil {
		dc.SetID(*s)
	}
	return dc
}

// Mutation returns the DelegationMutation object of the builder.
func (dc *DelegationCreate) Mutation() *DelegationMutation {
	return dc.mutation
}

// Save creates the Delegation in the database.
func (dc *DelegationCreate) Save(ctx context.Context) (*Delegation, error) {
	dc.defaults()
	return withHooks(ctx, dc.sqlSave, dc.mutation, dc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dc *DelegationCreate) SaveX(ctx context.Context) *Delegation {
	v, err := dc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dc *DelegationCreate) Exec(ctx context.Context) error {
	_, err := dc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dc *DelegationCreate) ExecX(ctx context.Context) {
	if err := dc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dc *DelegationCreate) defaults() {
	if _, ok := dc.mutation.Extras(); !ok {
		v := delegation.DefaultExtras
		dc.mutation.SetExtras(v)
	}
	if _, ok := dc.mutation.CreatedAt(); !ok {
		v := delegation.DefaultCreatedAt()
		dc.mutation.SetCreatedAt(v)
	}
	if _, ok := dc.mutation.UpdatedAt(); !ok {
		v := delegation.DefaultUpdatedAt()
		dc.mutation.SetUpdatedAt(v)
	}
	if _, ok := dc.mutation.IsEnabled(); !ok {
		v := delegation.DefaultIsEnabled
		dc.mutation.SetIsEnabled(v)
	}
	if _, ok := dc.mutation.ID(); !ok {
		v := delegation.DefaultID()
		dc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dc *DelegationCreate) check() error {
	if _, ok := dc.mutation.DelegatorID(); !ok {
		return &ValidationError{Name: "delegator_id", err: errors.New(`ent: missing required field "Delegation.delegator_id"`)}
	}
	if _, ok := dc.mutation.DelegateeID(); !ok {
		return &ValidationError{Name: "delegatee_id", err: errors.New(`ent: missing required field "Delegation.delegatee_id"`)}
	}
	if _, ok := dc.mutation.StartTime(); !ok {
		return &ValidationError{Name: "start_time", err: errors.New(`ent: missing required field "Delegation.start_time"`)}
	}
	if _, ok := dc.mutation.EndTime(); !ok {
		return &ValidationError{Name: "end_time", err: errors.New(`ent: missing required field "Delegation.end_time"`)}
	}
	if _, ok := dc.mutation.IsEnabled(); !ok {
		return &ValidationError{Name: "is_enabled", err: errors.New(`ent: missing required field "Delegation.is_enabled"`)}
	}
	if v, ok := dc.mutation.ID(); ok {
		if err := delegation.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Delegation.id": %w`, err)}
		}
	}
	return nil
}

func (dc *DelegationCreate) sqlSave(ctx context.Context) (*Delegation, error) {
	if err := dc.check(); err != nil {
		return nil, err
	}
	_node, _spec := dc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Delegation.ID type: %T", _spec.ID.Value)
		}
	}
	dc.mutation.id = &_node.ID
	dc.mutation.done = true
	return _node, nil
}

func (dc *DelegationCreate) createSpec() (*Delegation, *sqlgraph.CreateSpec) {
	var (
		_node = &Delegation{config: dc.config}
		_spec = sqlgraph.NewCreateSpec(delegation.Table, sqlgraph.NewFieldSpec(delegation.FieldID, field.TypeString))
	)
	if id, ok := dc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := dc.mutation.Status(); ok {
		_spec.SetField(delegation.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := dc.mutation.Extras(); ok {
		_spec.SetField(delegation.FieldExtras, field.TypeJSON, value)
		_node.Extras = value
	}
	if value, ok := dc.mutation.TenantID(); ok {
		_spec.SetField(delegation.FieldTenantID, field.TypeString, value)
		_node.TenantID = value
	}
	if value, ok := dc.mutation.CreatedBy(); ok {
		_spec.SetField(delegation.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := dc.mutation.UpdatedBy(); ok {
		_spec.SetField(delegation.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := dc.mutation.CreatedAt(); ok {
		_spec.SetField(delegation.FieldCreatedAt, field.TypeInt64, value)
		_node.CreatedAt = value
	}
	if value, ok := dc.mutation.UpdatedAt(); ok {
		_spec.SetField(delegation.FieldUpdatedAt, field.TypeInt64, value)
		_node.UpdatedAt = value
	}
	if value, ok := dc.mutation.DelegatorID(); ok {
		_spec.SetField(delegation.FieldDelegatorID, field.TypeString, value)
		_node.DelegatorID = value
	}
	if value, ok := dc.mutation.DelegateeID(); ok {
		_spec.SetField(delegation.FieldDelegateeID, field.TypeString, value)
		_node.DelegateeID = value
	}
	if value, ok := dc.mutation.TemplateID(); ok {
		_spec.SetField(delegation.FieldTemplateID, field.TypeString, value)
		_node.TemplateID = value
	}
	if value, ok := dc.mutation.NodeType(); ok {
		_spec.SetField(delegation.FieldNodeType, field.TypeString, value)
		_node.NodeType = value
	}
	if value, ok := dc.mutation.Conditions(); ok {
		_spec.SetField(delegation.FieldConditions, field.TypeJSON, value)
		_node.Conditions = value
	}
	if value, ok := dc.mutation.StartTime(); ok {
		_spec.SetField(delegation.FieldStartTime, field.TypeInt64, value)
		_node.StartTime = value
	}
	if value, ok := dc.mutation.EndTime(); ok {
		_spec.SetField(delegation.FieldEndTime, field.TypeInt64, value)
		_node.EndTime = value
	}
	if value, ok := dc.mutation.IsEnabled(); ok {
		_spec.SetField(delegation.FieldIsEnabled, field.TypeBool, value)
		_node.IsEnabled = value
	}
	return _node, _spec
}

// DelegationCreateBulk is the builder for creating many Delegation entities in bulk.
type DelegationCreateBulk struct {
	config
	err      error
	builders []*DelegationCreate
}

// Save creates the Delegation entities in the database.
func (dcb *DelegationCreateBulk) Save(ctx context.Context) ([]*Delegation, error) {
	if dcb.err != nil {
		return nil, dcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(dcb.builders))
	nodes := make([]*Delegation, len(dcb.builders))
	mutators := make([]Mutator, len(dcb.builders))
	for i := range dcb.builders {
		func(i int, root context.Context) {
			builder := dcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DelegationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dcb *DelegationCreateBulk) SaveX(ctx context.Context) []*Delegation {
	v, err := dcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dcb *DelegationCreateBulk) Exec(ctx context.Context) error {
	_, err := dcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcb *DelegationCreateBulk) ExecX(ctx context.Context) {
	if err := dcb.Exec(ctx); err != nil {
		panic(err)
	}
}
