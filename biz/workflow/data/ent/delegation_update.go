// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/workflow/data/ent/delegation"
	"ncobase/workflow/data/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// DelegationUpdate is the builder for updating Delegation entities.
type DelegationUpdate struct {
	config
	hooks    []Hook
	mutation *DelegationMutation
}

// Where appends a list predicates to the DelegationUpdate builder.
func (du *DelegationUpdate) Where(ps ...predicate.Delegation) *DelegationUpdate {
	du.mutation.Where(ps...)
	return du
}

// SetStatus sets the "status" field.
func (du *DelegationUpdate) SetStatus(s string) *DelegationUpdate {
	du.mutation.SetStatus(s)
	return du
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (du *DelegationUpdate) SetNillableStatus(s *string) *DelegationUpdate {
	if s != nil {
		du.SetStatus(*s)
	}
	return du
}

// ClearStatus clears the value of the "status" field.
func (du *DelegationUpdate) ClearStatus() *DelegationUpdate {
	du.mutation.ClearStatus()
	return du
}

// SetExtras sets the "extras" field.
func (du *DelegationUpdate) SetExtras(m map[string]interface{}) *DelegationUpdate {
	du.mutation.SetExtras(m)
	return du
}

// ClearExtras clears the value of the "extras" field.
func (du *DelegationUpdate) ClearExtras() *DelegationUpdate {
	du.mutation.ClearExtras()
	return du
}

// SetSpaceID sets the "space_id" field.
func (du *DelegationUpdate) SetSpaceID(s string) *DelegationUpdate {
	du.mutation.SetSpaceID(s)
	return du
}

// SetNillableSpaceID sets the "space_id" field if the given value is not nil.
func (du *DelegationUpdate) SetNillableSpaceID(s *string) *DelegationUpdate {
	if s != nil {
		du.SetSpaceID(*s)
	}
	return du
}

// ClearSpaceID clears the value of the "space_id" field.
func (du *DelegationUpdate) ClearSpaceID() *DelegationUpdate {
	du.mutation.ClearSpaceID()
	return du
}

// SetCreatedBy sets the "created_by" field.
func (du *DelegationUpdate) SetCreatedBy(s string) *DelegationUpdate {
	du.mutation.SetCreatedBy(s)
	return du
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (du *DelegationUpdate) SetNillableCreatedBy(s *string) *DelegationUpdate {
	if s != nil {
		du.SetCreatedBy(*s)
	}
	return du
}

// ClearCreatedBy clears the value of the "created_by" field.
func (du *DelegationUpdate) ClearCreatedBy() *DelegationUpdate {
	du.mutation.ClearCreatedBy()
	return du
}

// SetUpdatedBy sets the "updated_by" field.
func (du *DelegationUpdate) SetUpdatedBy(s string) *DelegationUpdate {
	du.mutation.SetUpdatedBy(s)
	return du
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (du *DelegationUpdate) SetNillableUpdatedBy(s *string) *DelegationUpdate {
	if s != nil {
		du.SetUpdatedBy(*s)
	}
	return du
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (du *DelegationUpdate) ClearUpdatedBy() *DelegationUpdate {
	du.mutation.ClearUpdatedBy()
	return du
}

// SetUpdatedAt sets the "updated_at" field.
func (du *DelegationUpdate) SetUpdatedAt(i int64) *DelegationUpdate {
	du.mutation.ResetUpdatedAt()
	du.mutation.SetUpdatedAt(i)
	return du
}

// AddUpdatedAt adds i to the "updated_at" field.
func (du *DelegationUpdate) AddUpdatedAt(i int64) *DelegationUpdate {
	du.mutation.AddUpdatedAt(i)
	return du
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (du *DelegationUpdate) ClearUpdatedAt() *DelegationUpdate {
	du.mutation.ClearUpdatedAt()
	return du
}

// SetDelegatorID sets the "delegator_id" field.
func (du *DelegationUpdate) SetDelegatorID(s string) *DelegationUpdate {
	du.mutation.SetDelegatorID(s)
	return du
}

// SetNillableDelegatorID sets the "delegator_id" field if the given value is not nil.
func (du *DelegationUpdate) SetNillableDelegatorID(s *string) *DelegationUpdate {
	if s != nil {
		du.SetDelegatorID(*s)
	}
	return du
}

// SetDelegateeID sets the "delegatee_id" field.
func (du *DelegationUpdate) SetDelegateeID(s string) *DelegationUpdate {
	du.mutation.SetDelegateeID(s)
	return du
}

// SetNillableDelegateeID sets the "delegatee_id" field if the given value is not nil.
func (du *DelegationUpdate) SetNillableDelegateeID(s *string) *DelegationUpdate {
	if s != nil {
		du.SetDelegateeID(*s)
	}
	return du
}

// SetTemplateID sets the "template_id" field.
func (du *DelegationUpdate) SetTemplateID(s string) *DelegationUpdate {
	du.mutation.SetTemplateID(s)
	return du
}

// SetNillableTemplateID sets the "template_id" field if the given value is not nil.
func (du *DelegationUpdate) SetNillableTemplateID(s *string) *DelegationUpdate {
	if s != nil {
		du.SetTemplateID(*s)
	}
	return du
}

// ClearTemplateID clears the value of the "template_id" field.
func (du *DelegationUpdate) ClearTemplateID() *DelegationUpdate {
	du.mutation.ClearTemplateID()
	return du
}

// SetNodeType sets the "node_type" field.
func (du *DelegationUpdate) SetNodeType(s string) *DelegationUpdate {
	du.mutation.SetNodeType(s)
	return du
}

// SetNillableNodeType sets the "node_type" field if the given value is not nil.
func (du *DelegationUpdate) SetNillableNodeType(s *string) *DelegationUpdate {
	if s != nil {
		du.SetNodeType(*s)
	}
	return du
}

// ClearNodeType clears the value of the "node_type" field.
func (du *DelegationUpdate) ClearNodeType() *DelegationUpdate {
	du.mutation.ClearNodeType()
	return du
}

// SetConditions sets the "conditions" field.
func (du *DelegationUpdate) SetConditions(s []string) *DelegationUpdate {
	du.mutation.SetConditions(s)
	return du
}

// AppendConditions appends s to the "conditions" field.
func (du *DelegationUpdate) AppendConditions(s []string) *DelegationUpdate {
	du.mutation.AppendConditions(s)
	return du
}

// ClearConditions clears the value of the "conditions" field.
func (du *DelegationUpdate) ClearConditions() *DelegationUpdate {
	du.mutation.ClearConditions()
	return du
}

// SetStartTime sets the "start_time" field.
func (du *DelegationUpdate) SetStartTime(i int64) *DelegationUpdate {
	du.mutation.ResetStartTime()
	du.mutation.SetStartTime(i)
	return du
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (du *DelegationUpdate) SetNillableStartTime(i *int64) *DelegationUpdate {
	if i != nil {
		du.SetStartTime(*i)
	}
	return du
}

// AddStartTime adds i to the "start_time" field.
func (du *DelegationUpdate) AddStartTime(i int64) *DelegationUpdate {
	du.mutation.AddStartTime(i)
	return du
}

// SetEndTime sets the "end_time" field.
func (du *DelegationUpdate) SetEndTime(i int64) *DelegationUpdate {
	du.mutation.ResetEndTime()
	du.mutation.SetEndTime(i)
	return du
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (du *DelegationUpdate) SetNillableEndTime(i *int64) *DelegationUpdate {
	if i != nil {
		du.SetEndTime(*i)
	}
	return du
}

// AddEndTime adds i to the "end_time" field.
func (du *DelegationUpdate) AddEndTime(i int64) *DelegationUpdate {
	du.mutation.AddEndTime(i)
	return du
}

// SetIsEnabled sets the "is_enabled" field.
func (du *DelegationUpdate) SetIsEnabled(b bool) *DelegationUpdate {
	du.mutation.SetIsEnabled(b)
	return du
}

// SetNillableIsEnabled sets the "is_enabled" field if the given value is not nil.
func (du *DelegationUpdate) SetNillableIsEnabled(b *bool) *DelegationUpdate {
	if b != nil {
		du.SetIsEnabled(*b)
	}
	return du
}

// Mutation returns the DelegationMutation object of the builder.
func (du *DelegationUpdate) Mutation() *DelegationMutation {
	return du.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DelegationUpdate) Save(ctx context.Context) (int, error) {
	du.defaults()
	return withHooks(ctx, du.sqlSave, du.mutation, du.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (du *DelegationUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DelegationUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DelegationUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (du *DelegationUpdate) defaults() {
	if _, ok := du.mutation.UpdatedAt(); !ok && !du.mutation.UpdatedAtCleared() {
		v := delegation.UpdateDefaultUpdatedAt()
		du.mutation.SetUpdatedAt(v)
	}
}

func (du *DelegationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(delegation.Table, delegation.Columns, sqlgraph.NewFieldSpec(delegation.FieldID, field.TypeString))
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.Status(); ok {
		_spec.SetField(delegation.FieldStatus, field.TypeString, value)
	}
	if du.mutation.StatusCleared() {
		_spec.ClearField(delegation.FieldStatus, field.TypeString)
	}
	if value, ok := du.mutation.Extras(); ok {
		_spec.SetField(delegation.FieldExtras, field.TypeJSON, value)
	}
	if du.mutation.ExtrasCleared() {
		_spec.ClearField(delegation.FieldExtras, field.TypeJSON)
	}
	if value, ok := du.mutation.SpaceID(); ok {
		_spec.SetField(delegation.FieldSpaceID, field.TypeString, value)
	}
	if du.mutation.SpaceIDCleared() {
		_spec.ClearField(delegation.FieldSpaceID, field.TypeString)
	}
	if value, ok := du.mutation.CreatedBy(); ok {
		_spec.SetField(delegation.FieldCreatedBy, field.TypeString, value)
	}
	if du.mutation.CreatedByCleared() {
		_spec.ClearField(delegation.FieldCreatedBy, field.TypeString)
	}
	if value, ok := du.mutation.UpdatedBy(); ok {
		_spec.SetField(delegation.FieldUpdatedBy, field.TypeString, value)
	}
	if du.mutation.UpdatedByCleared() {
		_spec.ClearField(delegation.FieldUpdatedBy, field.TypeString)
	}
	if du.mutation.CreatedAtCleared() {
		_spec.ClearField(delegation.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := du.mutation.UpdatedAt(); ok {
		_spec.SetField(delegation.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := du.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(delegation.FieldUpdatedAt, field.TypeInt64, value)
	}
	if du.mutation.UpdatedAtCleared() {
		_spec.ClearField(delegation.FieldUpdatedAt, field.TypeInt64)
	}
	if value, ok := du.mutation.DelegatorID(); ok {
		_spec.SetField(delegation.FieldDelegatorID, field.TypeString, value)
	}
	if value, ok := du.mutation.DelegateeID(); ok {
		_spec.SetField(delegation.FieldDelegateeID, field.TypeString, value)
	}
	if value, ok := du.mutation.TemplateID(); ok {
		_spec.SetField(delegation.FieldTemplateID, field.TypeString, value)
	}
	if du.mutation.TemplateIDCleared() {
		_spec.ClearField(delegation.FieldTemplateID, field.TypeString)
	}
	if value, ok := du.mutation.NodeType(); ok {
		_spec.SetField(delegation.FieldNodeType, field.TypeString, value)
	}
	if du.mutation.NodeTypeCleared() {
		_spec.ClearField(delegation.FieldNodeType, field.TypeString)
	}
	if value, ok := du.mutation.Conditions(); ok {
		_spec.SetField(delegation.FieldConditions, field.TypeJSON, value)
	}
	if value, ok := du.mutation.AppendedConditions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, delegation.FieldConditions, value)
		})
	}
	if du.mutation.ConditionsCleared() {
		_spec.ClearField(delegation.FieldConditions, field.TypeJSON)
	}
	if value, ok := du.mutation.StartTime(); ok {
		_spec.SetField(delegation.FieldStartTime, field.TypeInt64, value)
	}
	if value, ok := du.mutation.AddedStartTime(); ok {
		_spec.AddField(delegation.FieldStartTime, field.TypeInt64, value)
	}
	if value, ok := du.mutation.EndTime(); ok {
		_spec.SetField(delegation.FieldEndTime, field.TypeInt64, value)
	}
	if value, ok := du.mutation.AddedEndTime(); ok {
		_spec.AddField(delegation.FieldEndTime, field.TypeInt64, value)
	}
	if value, ok := du.mutation.IsEnabled(); ok {
		_spec.SetField(delegation.FieldIsEnabled, field.TypeBool, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{delegation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	du.mutation.done = true
	return n, nil
}

// DelegationUpdateOne is the builder for updating a single Delegation entity.
type DelegationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DelegationMutation
}

// SetStatus sets the "status" field.
func (duo *DelegationUpdateOne) SetStatus(s string) *DelegationUpdateOne {
	duo.mutation.SetStatus(s)
	return duo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (duo *DelegationUpdateOne) SetNillableStatus(s *string) *DelegationUpdateOne {
	if s != nil {
		duo.SetStatus(*s)
	}
	return duo
}

// ClearStatus clears the value of the "status" field.
func (duo *DelegationUpdateOne) ClearStatus() *DelegationUpdateOne {
	duo.mutation.ClearStatus()
	return duo
}

// SetExtras sets the "extras" field.
func (duo *DelegationUpdateOne) SetExtras(m map[string]interface{}) *DelegationUpdateOne {
	duo.mutation.SetExtras(m)
	return duo
}

// ClearExtras clears the value of the "extras" field.
func (duo *DelegationUpdateOne) ClearExtras() *DelegationUpdateOne {
	duo.mutation.ClearExtras()
	return duo
}

// SetSpaceID sets the "space_id" field.
func (duo *DelegationUpdateOne) SetSpaceID(s string) *DelegationUpdateOne {
	duo.mutation.SetSpaceID(s)
	return duo
}

// SetNillableSpaceID sets the "space_id" field if the given value is not nil.
func (duo *DelegationUpdateOne) SetNillableSpaceID(s *string) *DelegationUpdateOne {
	if s != nil {
		duo.SetSpaceID(*s)
	}
	return duo
}

// ClearSpaceID clears the value of the "space_id" field.
func (duo *DelegationUpdateOne) ClearSpaceID() *DelegationUpdateOne {
	duo.mutation.ClearSpaceID()
	return duo
}

// SetCreatedBy sets the "created_by" field.
func (duo *DelegationUpdateOne) SetCreatedBy(s string) *DelegationUpdateOne {
	duo.mutation.SetCreatedBy(s)
	return duo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (duo *DelegationUpdateOne) SetNillableCreatedBy(s *string) *DelegationUpdateOne {
	if s != nil {
		duo.SetCreatedBy(*s)
	}
	return duo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (duo *DelegationUpdateOne) ClearCreatedBy() *DelegationUpdateOne {
	duo.mutation.ClearCreatedBy()
	return duo
}

// SetUpdatedBy sets the "updated_by" field.
func (duo *DelegationUpdateOne) SetUpdatedBy(s string) *DelegationUpdateOne {
	duo.mutation.SetUpdatedBy(s)
	return duo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (duo *DelegationUpdateOne) SetNillableUpdatedBy(s *string) *DelegationUpdateOne {
	if s != nil {
		duo.SetUpdatedBy(*s)
	}
	return duo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (duo *DelegationUpdateOne) ClearUpdatedBy() *DelegationUpdateOne {
	duo.mutation.ClearUpdatedBy()
	return duo
}

// SetUpdatedAt sets the "updated_at" field.
func (duo *DelegationUpdateOne) SetUpdatedAt(i int64) *DelegationUpdateOne {
	duo.mutation.ResetUpdatedAt()
	duo.mutation.SetUpdatedAt(i)
	return duo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (duo *DelegationUpdateOne) AddUpdatedAt(i int64) *DelegationUpdateOne {
	duo.mutation.AddUpdatedAt(i)
	return duo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (duo *DelegationUpdateOne) ClearUpdatedAt() *DelegationUpdateOne {
	duo.mutation.ClearUpdatedAt()
	return duo
}

// SetDelegatorID sets the "delegator_id" field.
func (duo *DelegationUpdateOne) SetDelegatorID(s string) *DelegationUpdateOne {
	duo.mutation.SetDelegatorID(s)
	return duo
}

// SetNillableDelegatorID sets the "delegator_id" field if the given value is not nil.
func (duo *DelegationUpdateOne) SetNillableDelegatorID(s *string) *DelegationUpdateOne {
	if s != nil {
		duo.SetDelegatorID(*s)
	}
	return duo
}

// SetDelegateeID sets the "delegatee_id" field.
func (duo *DelegationUpdateOne) SetDelegateeID(s string) *DelegationUpdateOne {
	duo.mutation.SetDelegateeID(s)
	return duo
}

// SetNillableDelegateeID sets the "delegatee_id" field if the given value is not nil.
func (duo *DelegationUpdateOne) SetNillableDelegateeID(s *string) *DelegationUpdateOne {
	if s != nil {
		duo.SetDelegateeID(*s)
	}
	return duo
}

// SetTemplateID sets the "template_id" field.
func (duo *DelegationUpdateOne) SetTemplateID(s string) *DelegationUpdateOne {
	duo.mutation.SetTemplateID(s)
	return duo
}

// SetNillableTemplateID sets the "template_id" field if the given value is not nil.
func (duo *DelegationUpdateOne) SetNillableTemplateID(s *string) *DelegationUpdateOne {
	if s != nil {
		duo.SetTemplateID(*s)
	}
	return duo
}

// ClearTemplateID clears the value of the "template_id" field.
func (duo *DelegationUpdateOne) ClearTemplateID() *DelegationUpdateOne {
	duo.mutation.ClearTemplateID()
	return duo
}

// SetNodeType sets the "node_type" field.
func (duo *DelegationUpdateOne) SetNodeType(s string) *DelegationUpdateOne {
	duo.mutation.SetNodeType(s)
	return duo
}

// SetNillableNodeType sets the "node_type" field if the given value is not nil.
func (duo *DelegationUpdateOne) SetNillableNodeType(s *string) *DelegationUpdateOne {
	if s != nil {
		duo.SetNodeType(*s)
	}
	return duo
}

// ClearNodeType clears the value of the "node_type" field.
func (duo *DelegationUpdateOne) ClearNodeType() *DelegationUpdateOne {
	duo.mutation.ClearNodeType()
	return duo
}

// SetConditions sets the "conditions" field.
func (duo *DelegationUpdateOne) SetConditions(s []string) *DelegationUpdateOne {
	duo.mutation.SetConditions(s)
	return duo
}

// AppendConditions appends s to the "conditions" field.
func (duo *DelegationUpdateOne) AppendConditions(s []string) *DelegationUpdateOne {
	duo.mutation.AppendConditions(s)
	return duo
}

// ClearConditions clears the value of the "conditions" field.
func (duo *DelegationUpdateOne) ClearConditions() *DelegationUpdateOne {
	duo.mutation.ClearConditions()
	return duo
}

// SetStartTime sets the "start_time" field.
func (duo *DelegationUpdateOne) SetStartTime(i int64) *DelegationUpdateOne {
	duo.mutation.ResetStartTime()
	duo.mutation.SetStartTime(i)
	return duo
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (duo *DelegationUpdateOne) SetNillableStartTime(i *int64) *DelegationUpdateOne {
	if i != nil {
		duo.SetStartTime(*i)
	}
	return duo
}

// AddStartTime adds i to the "start_time" field.
func (duo *DelegationUpdateOne) AddStartTime(i int64) *DelegationUpdateOne {
	duo.mutation.AddStartTime(i)
	return duo
}

// SetEndTime sets the "end_time" field.
func (duo *DelegationUpdateOne) SetEndTime(i int64) *DelegationUpdateOne {
	duo.mutation.ResetEndTime()
	duo.mutation.SetEndTime(i)
	return duo
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (duo *DelegationUpdateOne) SetNillableEndTime(i *int64) *DelegationUpdateOne {
	if i != nil {
		duo.SetEndTime(*i)
	}
	return duo
}

// AddEndTime adds i to the "end_time" field.
func (duo *DelegationUpdateOne) AddEndTime(i int64) *DelegationUpdateOne {
	duo.mutation.AddEndTime(i)
	return duo
}

// SetIsEnabled sets the "is_enabled" field.
func (duo *DelegationUpdateOne) SetIsEnabled(b bool) *DelegationUpdateOne {
	duo.mutation.SetIsEnabled(b)
	return duo
}

// SetNillableIsEnabled sets the "is_enabled" field if the given value is not nil.
func (duo *DelegationUpdateOne) SetNillableIsEnabled(b *bool) *DelegationUpdateOne {
	if b != nil {
		duo.SetIsEnabled(*b)
	}
	return duo
}

// Mutation returns the DelegationMutation object of the builder.
func (duo *DelegationUpdateOne) Mutation() *DelegationMutation {
	return duo.mutation
}

// Where appends a list predicates to the DelegationUpdate builder.
func (duo *DelegationUpdateOne) Where(ps ...predicate.Delegation) *DelegationUpdateOne {
	duo.mutation.Where(ps...)
	return duo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (duo *DelegationUpdateOne) Select(field string, fields ...string) *DelegationUpdateOne {
	duo.fields = append([]string{field}, fields...)
	return duo
}

// Save executes the query and returns the updated Delegation entity.
func (duo *DelegationUpdateOne) Save(ctx context.Context) (*Delegation, error) {
	duo.defaults()
	return withHooks(ctx, duo.sqlSave, duo.mutation, duo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DelegationUpdateOne) SaveX(ctx context.Context) *Delegation {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DelegationUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DelegationUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (duo *DelegationUpdateOne) defaults() {
	if _, ok := duo.mutation.UpdatedAt(); !ok && !duo.mutation.UpdatedAtCleared() {
		v := delegation.UpdateDefaultUpdatedAt()
		duo.mutation.SetUpdatedAt(v)
	}
}

func (duo *DelegationUpdateOne) sqlSave(ctx context.Context) (_node *Delegation, err error) {
	_spec := sqlgraph.NewUpdateSpec(delegation.Table, delegation.Columns, sqlgraph.NewFieldSpec(delegation.FieldID, field.TypeString))
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Delegation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := duo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, delegation.FieldID)
		for _, f := range fields {
			if !delegation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != delegation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := duo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := duo.mutation.Status(); ok {
		_spec.SetField(delegation.FieldStatus, field.TypeString, value)
	}
	if duo.mutation.StatusCleared() {
		_spec.ClearField(delegation.FieldStatus, field.TypeString)
	}
	if value, ok := duo.mutation.Extras(); ok {
		_spec.SetField(delegation.FieldExtras, field.TypeJSON, value)
	}
	if duo.mutation.ExtrasCleared() {
		_spec.ClearField(delegation.FieldExtras, field.TypeJSON)
	}
	if value, ok := duo.mutation.SpaceID(); ok {
		_spec.SetField(delegation.FieldSpaceID, field.TypeString, value)
	}
	if duo.mutation.SpaceIDCleared() {
		_spec.ClearField(delegation.FieldSpaceID, field.TypeString)
	}
	if value, ok := duo.mutation.CreatedBy(); ok {
		_spec.SetField(delegation.FieldCreatedBy, field.TypeString, value)
	}
	if duo.mutation.CreatedByCleared() {
		_spec.ClearField(delegation.FieldCreatedBy, field.TypeString)
	}
	if value, ok := duo.mutation.UpdatedBy(); ok {
		_spec.SetField(delegation.FieldUpdatedBy, field.TypeString, value)
	}
	if duo.mutation.UpdatedByCleared() {
		_spec.ClearField(delegation.FieldUpdatedBy, field.TypeString)
	}
	if duo.mutation.CreatedAtCleared() {
		_spec.ClearField(delegation.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := duo.mutation.UpdatedAt(); ok {
		_spec.SetField(delegation.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := duo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(delegation.FieldUpdatedAt, field.TypeInt64, value)
	}
	if duo.mutation.UpdatedAtCleared() {
		_spec.ClearField(delegation.FieldUpdatedAt, field.TypeInt64)
	}
	if value, ok := duo.mutation.DelegatorID(); ok {
		_spec.SetField(delegation.FieldDelegatorID, field.TypeString, value)
	}
	if value, ok := duo.mutation.DelegateeID(); ok {
		_spec.SetField(delegation.FieldDelegateeID, field.TypeString, value)
	}
	if value, ok := duo.mutation.TemplateID(); ok {
		_spec.SetField(delegation.FieldTemplateID, field.TypeString, value)
	}
	if duo.mutation.TemplateIDCleared() {
		_spec.ClearField(delegation.FieldTemplateID, field.TypeString)
	}
	if value, ok := duo.mutation.NodeType(); ok {
		_spec.SetField(delegation.FieldNodeType, field.TypeString, value)
	}
	if duo.mutation.NodeTypeCleared() {
		_spec.ClearField(delegation.FieldNodeType, field.TypeString)
	}
	if value, ok := duo.mutation.Conditions(); ok {
		_spec.SetField(delegation.FieldConditions, field.TypeJSON, value)
	}
	if value, ok := duo.mutation.AppendedConditions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, delegation.FieldConditions, value)
		})
	}
	if duo.mutation.ConditionsCleared() {
		_spec.ClearField(delegation.FieldConditions, field.TypeJSON)
	}
	if value, ok := duo.mutation.StartTime(); ok {
		_spec.SetField(delegation.FieldStartTime, field.TypeInt64, value)
	}
	if value, ok := duo.mutation.AddedStartTime(); ok {
		_spec.AddField(delegation.FieldStartTime, field.TypeInt64, value)
	}
	if value, ok := duo.mutation.EndTime(); ok {
		_spec.SetField(delegation.FieldEndTime, field.TypeInt64, value)
	}
	if value, ok := duo.mutation.AddedEndTime(); ok {
		_spec.AddField(delegation.FieldEndTime, field.TypeInt64, value)
	}
	if value, ok := duo.mutation.IsEnabled(); ok {
		_spec.SetField(delegation.FieldIsEnabled, field.TypeBool, value)
	}
	_node = &Delegation{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{delegation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	duo.mutation.done = true
	return _node, nil
}
