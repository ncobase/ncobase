// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/workflow/data/ent/process"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProcessCreate is the builder for creating a Process entity.
type ProcessCreate struct {
	config
	mutation *ProcessMutation
	hooks    []Hook
}

// SetStatus sets the "status" field.
func (pc *ProcessCreate) SetStatus(s string) *ProcessCreate {
	pc.mutation.SetStatus(s)
	return pc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pc *ProcessCreate) SetNillableStatus(s *string) *ProcessCreate {
	if s != nil {
		pc.SetStatus(*s)
	}
	return pc
}

// SetProcessID sets the "process_id" field.
func (pc *ProcessCreate) SetProcessID(s string) *ProcessCreate {
	pc.mutation.SetProcessID(s)
	return pc
}

// SetTemplateID sets the "template_id" field.
func (pc *ProcessCreate) SetTemplateID(s string) *ProcessCreate {
	pc.mutation.SetTemplateID(s)
	return pc
}

// SetBusinessKey sets the "business_key" field.
func (pc *ProcessCreate) SetBusinessKey(s string) *ProcessCreate {
	pc.mutation.SetBusinessKey(s)
	return pc
}

// SetFormCode sets the "form_code" field.
func (pc *ProcessCreate) SetFormCode(s string) *ProcessCreate {
	pc.mutation.SetFormCode(s)
	return pc
}

// SetFormVersion sets the "form_version" field.
func (pc *ProcessCreate) SetFormVersion(s string) *ProcessCreate {
	pc.mutation.SetFormVersion(s)
	return pc
}

// SetNillableFormVersion sets the "form_version" field if the given value is not nil.
func (pc *ProcessCreate) SetNillableFormVersion(s *string) *ProcessCreate {
	if s != nil {
		pc.SetFormVersion(*s)
	}
	return pc
}

// SetFormConfig sets the "form_config" field.
func (pc *ProcessCreate) SetFormConfig(m map[string]interface{}) *ProcessCreate {
	pc.mutation.SetFormConfig(m)
	return pc
}

// SetFormPermissions sets the "form_permissions" field.
func (pc *ProcessCreate) SetFormPermissions(m map[string]interface{}) *ProcessCreate {
	pc.mutation.SetFormPermissions(m)
	return pc
}

// SetFieldPermissions sets the "field_permissions" field.
func (pc *ProcessCreate) SetFieldPermissions(m map[string]interface{}) *ProcessCreate {
	pc.mutation.SetFieldPermissions(m)
	return pc
}

// SetBusinessTags sets the "business_tags" field.
func (pc *ProcessCreate) SetBusinessTags(s []string) *ProcessCreate {
	pc.mutation.SetBusinessTags(s)
	return pc
}

// SetModuleCode sets the "module_code" field.
func (pc *ProcessCreate) SetModuleCode(s string) *ProcessCreate {
	pc.mutation.SetModuleCode(s)
	return pc
}

// SetCategory sets the "category" field.
func (pc *ProcessCreate) SetCategory(s string) *ProcessCreate {
	pc.mutation.SetCategory(s)
	return pc
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (pc *ProcessCreate) SetNillableCategory(s *string) *ProcessCreate {
	if s != nil {
		pc.SetCategory(*s)
	}
	return pc
}

// SetFlowStatus sets the "flow_status" field.
func (pc *ProcessCreate) SetFlowStatus(s string) *ProcessCreate {
	pc.mutation.SetFlowStatus(s)
	return pc
}

// SetNillableFlowStatus sets the "flow_status" field if the given value is not nil.
func (pc *ProcessCreate) SetNillableFlowStatus(s *string) *ProcessCreate {
	if s != nil {
		pc.SetFlowStatus(*s)
	}
	return pc
}

// SetFlowVariables sets the "flow_variables" field.
func (pc *ProcessCreate) SetFlowVariables(m map[string]interface{}) *ProcessCreate {
	pc.mutation.SetFlowVariables(m)
	return pc
}

// SetIsDraft sets the "is_draft" field.
func (pc *ProcessCreate) SetIsDraft(b bool) *ProcessCreate {
	pc.mutation.SetIsDraft(b)
	return pc
}

// SetNillableIsDraft sets the "is_draft" field if the given value is not nil.
func (pc *ProcessCreate) SetNillableIsDraft(b *bool) *ProcessCreate {
	if b != nil {
		pc.SetIsDraft(*b)
	}
	return pc
}

// SetIsTerminated sets the "is_terminated" field.
func (pc *ProcessCreate) SetIsTerminated(b bool) *ProcessCreate {
	pc.mutation.SetIsTerminated(b)
	return pc
}

// SetNillableIsTerminated sets the "is_terminated" field if the given value is not nil.
func (pc *ProcessCreate) SetNillableIsTerminated(b *bool) *ProcessCreate {
	if b != nil {
		pc.SetIsTerminated(*b)
	}
	return pc
}

// SetIsSuspended sets the "is_suspended" field.
func (pc *ProcessCreate) SetIsSuspended(b bool) *ProcessCreate {
	pc.mutation.SetIsSuspended(b)
	return pc
}

// SetNillableIsSuspended sets the "is_suspended" field if the given value is not nil.
func (pc *ProcessCreate) SetNillableIsSuspended(b *bool) *ProcessCreate {
	if b != nil {
		pc.SetIsSuspended(*b)
	}
	return pc
}

// SetSuspendReason sets the "suspend_reason" field.
func (pc *ProcessCreate) SetSuspendReason(s string) *ProcessCreate {
	pc.mutation.SetSuspendReason(s)
	return pc
}

// SetNillableSuspendReason sets the "suspend_reason" field if the given value is not nil.
func (pc *ProcessCreate) SetNillableSuspendReason(s *string) *ProcessCreate {
	if s != nil {
		pc.SetSuspendReason(*s)
	}
	return pc
}

// SetStartTime sets the "start_time" field.
func (pc *ProcessCreate) SetStartTime(i int64) *ProcessCreate {
	pc.mutation.SetStartTime(i)
	return pc
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (pc *ProcessCreate) SetNillableStartTime(i *int64) *ProcessCreate {
	if i != nil {
		pc.SetStartTime(*i)
	}
	return pc
}

// SetEndTime sets the "end_time" field.
func (pc *ProcessCreate) SetEndTime(i int64) *ProcessCreate {
	pc.mutation.SetEndTime(i)
	return pc
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (pc *ProcessCreate) SetNillableEndTime(i *int64) *ProcessCreate {
	if i != nil {
		pc.SetEndTime(*i)
	}
	return pc
}

// SetDueTime sets the "due_time" field.
func (pc *ProcessCreate) SetDueTime(i int64) *ProcessCreate {
	pc.mutation.SetDueTime(i)
	return pc
}

// SetNillableDueTime sets the "due_time" field if the given value is not nil.
func (pc *ProcessCreate) SetNillableDueTime(i *int64) *ProcessCreate {
	if i != nil {
		pc.SetDueTime(*i)
	}
	return pc
}

// SetDuration sets the "duration" field.
func (pc *ProcessCreate) SetDuration(i int) *ProcessCreate {
	pc.mutation.SetDuration(i)
	return pc
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (pc *ProcessCreate) SetNillableDuration(i *int) *ProcessCreate {
	if i != nil {
		pc.SetDuration(*i)
	}
	return pc
}

// SetPriority sets the "priority" field.
func (pc *ProcessCreate) SetPriority(i int) *ProcessCreate {
	pc.mutation.SetPriority(i)
	return pc
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (pc *ProcessCreate) SetNillablePriority(i *int) *ProcessCreate {
	if i != nil {
		pc.SetPriority(*i)
	}
	return pc
}

// SetIsTimeout sets the "is_timeout" field.
func (pc *ProcessCreate) SetIsTimeout(b bool) *ProcessCreate {
	pc.mutation.SetIsTimeout(b)
	return pc
}

// SetNillableIsTimeout sets the "is_timeout" field if the given value is not nil.
func (pc *ProcessCreate) SetNillableIsTimeout(b *bool) *ProcessCreate {
	if b != nil {
		pc.SetIsTimeout(*b)
	}
	return pc
}

// SetReminderCount sets the "reminder_count" field.
func (pc *ProcessCreate) SetReminderCount(i int) *ProcessCreate {
	pc.mutation.SetReminderCount(i)
	return pc
}

// SetNillableReminderCount sets the "reminder_count" field if the given value is not nil.
func (pc *ProcessCreate) SetNillableReminderCount(i *int) *ProcessCreate {
	if i != nil {
		pc.SetReminderCount(*i)
	}
	return pc
}

// SetAllowCancel sets the "allow_cancel" field.
func (pc *ProcessCreate) SetAllowCancel(b bool) *ProcessCreate {
	pc.mutation.SetAllowCancel(b)
	return pc
}

// SetNillableAllowCancel sets the "allow_cancel" field if the given value is not nil.
func (pc *ProcessCreate) SetNillableAllowCancel(b *bool) *ProcessCreate {
	if b != nil {
		pc.SetAllowCancel(*b)
	}
	return pc
}

// SetAllowUrge sets the "allow_urge" field.
func (pc *ProcessCreate) SetAllowUrge(b bool) *ProcessCreate {
	pc.mutation.SetAllowUrge(b)
	return pc
}

// SetNillableAllowUrge sets the "allow_urge" field if the given value is not nil.
func (pc *ProcessCreate) SetNillableAllowUrge(b *bool) *ProcessCreate {
	if b != nil {
		pc.SetAllowUrge(*b)
	}
	return pc
}

// SetAllowDelegate sets the "allow_delegate" field.
func (pc *ProcessCreate) SetAllowDelegate(b bool) *ProcessCreate {
	pc.mutation.SetAllowDelegate(b)
	return pc
}

// SetNillableAllowDelegate sets the "allow_delegate" field if the given value is not nil.
func (pc *ProcessCreate) SetNillableAllowDelegate(b *bool) *ProcessCreate {
	if b != nil {
		pc.SetAllowDelegate(*b)
	}
	return pc
}

// SetAllowTransfer sets the "allow_transfer" field.
func (pc *ProcessCreate) SetAllowTransfer(b bool) *ProcessCreate {
	pc.mutation.SetAllowTransfer(b)
	return pc
}

// SetNillableAllowTransfer sets the "allow_transfer" field if the given value is not nil.
func (pc *ProcessCreate) SetNillableAllowTransfer(b *bool) *ProcessCreate {
	if b != nil {
		pc.SetAllowTransfer(*b)
	}
	return pc
}

// SetIsDraftEnabled sets the "is_draft_enabled" field.
func (pc *ProcessCreate) SetIsDraftEnabled(b bool) *ProcessCreate {
	pc.mutation.SetIsDraftEnabled(b)
	return pc
}

// SetNillableIsDraftEnabled sets the "is_draft_enabled" field if the given value is not nil.
func (pc *ProcessCreate) SetNillableIsDraftEnabled(b *bool) *ProcessCreate {
	if b != nil {
		pc.SetIsDraftEnabled(*b)
	}
	return pc
}

// SetIsAutoStart sets the "is_auto_start" field.
func (pc *ProcessCreate) SetIsAutoStart(b bool) *ProcessCreate {
	pc.mutation.SetIsAutoStart(b)
	return pc
}

// SetNillableIsAutoStart sets the "is_auto_start" field if the given value is not nil.
func (pc *ProcessCreate) SetNillableIsAutoStart(b *bool) *ProcessCreate {
	if b != nil {
		pc.SetIsAutoStart(*b)
	}
	return pc
}

// SetStrictMode sets the "strict_mode" field.
func (pc *ProcessCreate) SetStrictMode(b bool) *ProcessCreate {
	pc.mutation.SetStrictMode(b)
	return pc
}

// SetNillableStrictMode sets the "strict_mode" field if the given value is not nil.
func (pc *ProcessCreate) SetNillableStrictMode(b *bool) *ProcessCreate {
	if b != nil {
		pc.SetStrictMode(*b)
	}
	return pc
}

// SetExtras sets the "extras" field.
func (pc *ProcessCreate) SetExtras(m map[string]interface{}) *ProcessCreate {
	pc.mutation.SetExtras(m)
	return pc
}

// SetSpaceID sets the "space_id" field.
func (pc *ProcessCreate) SetSpaceID(s string) *ProcessCreate {
	pc.mutation.SetSpaceID(s)
	return pc
}

// SetNillableSpaceID sets the "space_id" field if the given value is not nil.
func (pc *ProcessCreate) SetNillableSpaceID(s *string) *ProcessCreate {
	if s != nil {
		pc.SetSpaceID(*s)
	}
	return pc
}

// SetCreatedBy sets the "created_by" field.
func (pc *ProcessCreate) SetCreatedBy(s string) *ProcessCreate {
	pc.mutation.SetCreatedBy(s)
	return pc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (pc *ProcessCreate) SetNillableCreatedBy(s *string) *ProcessCreate {
	if s != nil {
		pc.SetCreatedBy(*s)
	}
	return pc
}

// SetUpdatedBy sets the "updated_by" field.
func (pc *ProcessCreate) SetUpdatedBy(s string) *ProcessCreate {
	pc.mutation.SetUpdatedBy(s)
	return pc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (pc *ProcessCreate) SetNillableUpdatedBy(s *string) *ProcessCreate {
	if s != nil {
		pc.SetUpdatedBy(*s)
	}
	return pc
}

// SetCreatedAt sets the "created_at" field.
func (pc *ProcessCreate) SetCreatedAt(i int64) *ProcessCreate {
	pc.mutation.SetCreatedAt(i)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *ProcessCreate) SetNillableCreatedAt(i *int64) *ProcessCreate {
	if i != nil {
		pc.SetCreatedAt(*i)
	}
	return pc
}

// SetUpdatedAt sets the "updated_at" field.
func (pc *ProcessCreate) SetUpdatedAt(i int64) *ProcessCreate {
	pc.mutation.SetUpdatedAt(i)
	return pc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pc *ProcessCreate) SetNillableUpdatedAt(i *int64) *ProcessCreate {
	if i != nil {
		pc.SetUpdatedAt(*i)
	}
	return pc
}

// SetProcessKey sets the "process_key" field.
func (pc *ProcessCreate) SetProcessKey(s string) *ProcessCreate {
	pc.mutation.SetProcessKey(s)
	return pc
}

// SetInitiator sets the "initiator" field.
func (pc *ProcessCreate) SetInitiator(s string) *ProcessCreate {
	pc.mutation.SetInitiator(s)
	return pc
}

// SetInitiatorDept sets the "initiator_dept" field.
func (pc *ProcessCreate) SetInitiatorDept(s string) *ProcessCreate {
	pc.mutation.SetInitiatorDept(s)
	return pc
}

// SetNillableInitiatorDept sets the "initiator_dept" field if the given value is not nil.
func (pc *ProcessCreate) SetNillableInitiatorDept(s *string) *ProcessCreate {
	if s != nil {
		pc.SetInitiatorDept(*s)
	}
	return pc
}

// SetProcessCode sets the "process_code" field.
func (pc *ProcessCreate) SetProcessCode(s string) *ProcessCreate {
	pc.mutation.SetProcessCode(s)
	return pc
}

// SetVariables sets the "variables" field.
func (pc *ProcessCreate) SetVariables(m map[string]interface{}) *ProcessCreate {
	pc.mutation.SetVariables(m)
	return pc
}

// SetCurrentNode sets the "current_node" field.
func (pc *ProcessCreate) SetCurrentNode(s string) *ProcessCreate {
	pc.mutation.SetCurrentNode(s)
	return pc
}

// SetNillableCurrentNode sets the "current_node" field if the given value is not nil.
func (pc *ProcessCreate) SetNillableCurrentNode(s *string) *ProcessCreate {
	if s != nil {
		pc.SetCurrentNode(*s)
	}
	return pc
}

// SetActiveNodes sets the "active_nodes" field.
func (pc *ProcessCreate) SetActiveNodes(s []string) *ProcessCreate {
	pc.mutation.SetActiveNodes(s)
	return pc
}

// SetProcessSnapshot sets the "process_snapshot" field.
func (pc *ProcessCreate) SetProcessSnapshot(m map[string]interface{}) *ProcessCreate {
	pc.mutation.SetProcessSnapshot(m)
	return pc
}

// SetFormSnapshot sets the "form_snapshot" field.
func (pc *ProcessCreate) SetFormSnapshot(m map[string]interface{}) *ProcessCreate {
	pc.mutation.SetFormSnapshot(m)
	return pc
}

// SetUrgeCount sets the "urge_count" field.
func (pc *ProcessCreate) SetUrgeCount(i int) *ProcessCreate {
	pc.mutation.SetUrgeCount(i)
	return pc
}

// SetNillableUrgeCount sets the "urge_count" field if the given value is not nil.
func (pc *ProcessCreate) SetNillableUrgeCount(i *int) *ProcessCreate {
	if i != nil {
		pc.SetUrgeCount(*i)
	}
	return pc
}

// SetID sets the "id" field.
func (pc *ProcessCreate) SetID(s string) *ProcessCreate {
	pc.mutation.SetID(s)
	return pc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pc *ProcessCreate) SetNillableID(s *string) *ProcessCreate {
	if s != nil {
		pc.SetID(*s)
	}
	return pc
}

// Mutation returns the ProcessMutation object of the builder.
func (pc *ProcessCreate) Mutation() *ProcessMutation {
	return pc.mutation
}

// Save creates the Process in the database.
func (pc *ProcessCreate) Save(ctx context.Context) (*Process, error) {
	pc.defaults()
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *ProcessCreate) SaveX(ctx context.Context) *Process {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *ProcessCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *ProcessCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *ProcessCreate) defaults() {
	if _, ok := pc.mutation.IsDraft(); !ok {
		v := process.DefaultIsDraft
		pc.mutation.SetIsDraft(v)
	}
	if _, ok := pc.mutation.IsTerminated(); !ok {
		v := process.DefaultIsTerminated
		pc.mutation.SetIsTerminated(v)
	}
	if _, ok := pc.mutation.IsSuspended(); !ok {
		v := process.DefaultIsSuspended
		pc.mutation.SetIsSuspended(v)
	}
	if _, ok := pc.mutation.StartTime(); !ok {
		v := process.DefaultStartTime()
		pc.mutation.SetStartTime(v)
	}
	if _, ok := pc.mutation.Priority(); !ok {
		v := process.DefaultPriority
		pc.mutation.SetPriority(v)
	}
	if _, ok := pc.mutation.IsTimeout(); !ok {
		v := process.DefaultIsTimeout
		pc.mutation.SetIsTimeout(v)
	}
	if _, ok := pc.mutation.ReminderCount(); !ok {
		v := process.DefaultReminderCount
		pc.mutation.SetReminderCount(v)
	}
	if _, ok := pc.mutation.AllowCancel(); !ok {
		v := process.DefaultAllowCancel
		pc.mutation.SetAllowCancel(v)
	}
	if _, ok := pc.mutation.AllowUrge(); !ok {
		v := process.DefaultAllowUrge
		pc.mutation.SetAllowUrge(v)
	}
	if _, ok := pc.mutation.AllowDelegate(); !ok {
		v := process.DefaultAllowDelegate
		pc.mutation.SetAllowDelegate(v)
	}
	if _, ok := pc.mutation.AllowTransfer(); !ok {
		v := process.DefaultAllowTransfer
		pc.mutation.SetAllowTransfer(v)
	}
	if _, ok := pc.mutation.IsDraftEnabled(); !ok {
		v := process.DefaultIsDraftEnabled
		pc.mutation.SetIsDraftEnabled(v)
	}
	if _, ok := pc.mutation.IsAutoStart(); !ok {
		v := process.DefaultIsAutoStart
		pc.mutation.SetIsAutoStart(v)
	}
	if _, ok := pc.mutation.StrictMode(); !ok {
		v := process.DefaultStrictMode
		pc.mutation.SetStrictMode(v)
	}
	if _, ok := pc.mutation.Extras(); !ok {
		v := process.DefaultExtras
		pc.mutation.SetExtras(v)
	}
	if _, ok := pc.mutation.CreatedAt(); !ok {
		v := process.DefaultCreatedAt()
		pc.mutation.SetCreatedAt(v)
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		v := process.DefaultUpdatedAt()
		pc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pc.mutation.UrgeCount(); !ok {
		v := process.DefaultUrgeCount
		pc.mutation.SetUrgeCount(v)
	}
	if _, ok := pc.mutation.ID(); !ok {
		v := process.DefaultID()
		pc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *ProcessCreate) check() error {
	if _, ok := pc.mutation.ProcessID(); !ok {
		return &ValidationError{Name: "process_id", err: errors.New(`ent: missing required field "Process.process_id"`)}
	}
	if _, ok := pc.mutation.TemplateID(); !ok {
		return &ValidationError{Name: "template_id", err: errors.New(`ent: missing required field "Process.template_id"`)}
	}
	if _, ok := pc.mutation.BusinessKey(); !ok {
		return &ValidationError{Name: "business_key", err: errors.New(`ent: missing required field "Process.business_key"`)}
	}
	if _, ok := pc.mutation.FormCode(); !ok {
		return &ValidationError{Name: "form_code", err: errors.New(`ent: missing required field "Process.form_code"`)}
	}
	if _, ok := pc.mutation.ModuleCode(); !ok {
		return &ValidationError{Name: "module_code", err: errors.New(`ent: missing required field "Process.module_code"`)}
	}
	if _, ok := pc.mutation.IsDraft(); !ok {
		return &ValidationError{Name: "is_draft", err: errors.New(`ent: missing required field "Process.is_draft"`)}
	}
	if _, ok := pc.mutation.IsTerminated(); !ok {
		return &ValidationError{Name: "is_terminated", err: errors.New(`ent: missing required field "Process.is_terminated"`)}
	}
	if _, ok := pc.mutation.IsSuspended(); !ok {
		return &ValidationError{Name: "is_suspended", err: errors.New(`ent: missing required field "Process.is_suspended"`)}
	}
	if _, ok := pc.mutation.StartTime(); !ok {
		return &ValidationError{Name: "start_time", err: errors.New(`ent: missing required field "Process.start_time"`)}
	}
	if _, ok := pc.mutation.Priority(); !ok {
		return &ValidationError{Name: "priority", err: errors.New(`ent: missing required field "Process.priority"`)}
	}
	if _, ok := pc.mutation.IsTimeout(); !ok {
		return &ValidationError{Name: "is_timeout", err: errors.New(`ent: missing required field "Process.is_timeout"`)}
	}
	if _, ok := pc.mutation.ReminderCount(); !ok {
		return &ValidationError{Name: "reminder_count", err: errors.New(`ent: missing required field "Process.reminder_count"`)}
	}
	if _, ok := pc.mutation.AllowCancel(); !ok {
		return &ValidationError{Name: "allow_cancel", err: errors.New(`ent: missing required field "Process.allow_cancel"`)}
	}
	if _, ok := pc.mutation.AllowUrge(); !ok {
		return &ValidationError{Name: "allow_urge", err: errors.New(`ent: missing required field "Process.allow_urge"`)}
	}
	if _, ok := pc.mutation.AllowDelegate(); !ok {
		return &ValidationError{Name: "allow_delegate", err: errors.New(`ent: missing required field "Process.allow_delegate"`)}
	}
	if _, ok := pc.mutation.AllowTransfer(); !ok {
		return &ValidationError{Name: "allow_transfer", err: errors.New(`ent: missing required field "Process.allow_transfer"`)}
	}
	if _, ok := pc.mutation.IsDraftEnabled(); !ok {
		return &ValidationError{Name: "is_draft_enabled", err: errors.New(`ent: missing required field "Process.is_draft_enabled"`)}
	}
	if _, ok := pc.mutation.IsAutoStart(); !ok {
		return &ValidationError{Name: "is_auto_start", err: errors.New(`ent: missing required field "Process.is_auto_start"`)}
	}
	if _, ok := pc.mutation.StrictMode(); !ok {
		return &ValidationError{Name: "strict_mode", err: errors.New(`ent: missing required field "Process.strict_mode"`)}
	}
	if _, ok := pc.mutation.ProcessKey(); !ok {
		return &ValidationError{Name: "process_key", err: errors.New(`ent: missing required field "Process.process_key"`)}
	}
	if _, ok := pc.mutation.Initiator(); !ok {
		return &ValidationError{Name: "initiator", err: errors.New(`ent: missing required field "Process.initiator"`)}
	}
	if _, ok := pc.mutation.ProcessCode(); !ok {
		return &ValidationError{Name: "process_code", err: errors.New(`ent: missing required field "Process.process_code"`)}
	}
	if _, ok := pc.mutation.Variables(); !ok {
		return &ValidationError{Name: "variables", err: errors.New(`ent: missing required field "Process.variables"`)}
	}
	if _, ok := pc.mutation.UrgeCount(); !ok {
		return &ValidationError{Name: "urge_count", err: errors.New(`ent: missing required field "Process.urge_count"`)}
	}
	if v, ok := pc.mutation.ID(); ok {
		if err := process.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Process.id": %w`, err)}
		}
	}
	return nil
}

func (pc *ProcessCreate) sqlSave(ctx context.Context) (*Process, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Process.ID type: %T", _spec.ID.Value)
		}
	}
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *ProcessCreate) createSpec() (*Process, *sqlgraph.CreateSpec) {
	var (
		_node = &Process{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(process.Table, sqlgraph.NewFieldSpec(process.FieldID, field.TypeString))
	)
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pc.mutation.Status(); ok {
		_spec.SetField(process.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := pc.mutation.ProcessID(); ok {
		_spec.SetField(process.FieldProcessID, field.TypeString, value)
		_node.ProcessID = value
	}
	if value, ok := pc.mutation.TemplateID(); ok {
		_spec.SetField(process.FieldTemplateID, field.TypeString, value)
		_node.TemplateID = value
	}
	if value, ok := pc.mutation.BusinessKey(); ok {
		_spec.SetField(process.FieldBusinessKey, field.TypeString, value)
		_node.BusinessKey = value
	}
	if value, ok := pc.mutation.FormCode(); ok {
		_spec.SetField(process.FieldFormCode, field.TypeString, value)
		_node.FormCode = value
	}
	if value, ok := pc.mutation.FormVersion(); ok {
		_spec.SetField(process.FieldFormVersion, field.TypeString, value)
		_node.FormVersion = value
	}
	if value, ok := pc.mutation.FormConfig(); ok {
		_spec.SetField(process.FieldFormConfig, field.TypeJSON, value)
		_node.FormConfig = value
	}
	if value, ok := pc.mutation.FormPermissions(); ok {
		_spec.SetField(process.FieldFormPermissions, field.TypeJSON, value)
		_node.FormPermissions = value
	}
	if value, ok := pc.mutation.FieldPermissions(); ok {
		_spec.SetField(process.FieldFieldPermissions, field.TypeJSON, value)
		_node.FieldPermissions = value
	}
	if value, ok := pc.mutation.BusinessTags(); ok {
		_spec.SetField(process.FieldBusinessTags, field.TypeJSON, value)
		_node.BusinessTags = value
	}
	if value, ok := pc.mutation.ModuleCode(); ok {
		_spec.SetField(process.FieldModuleCode, field.TypeString, value)
		_node.ModuleCode = value
	}
	if value, ok := pc.mutation.Category(); ok {
		_spec.SetField(process.FieldCategory, field.TypeString, value)
		_node.Category = value
	}
	if value, ok := pc.mutation.FlowStatus(); ok {
		_spec.SetField(process.FieldFlowStatus, field.TypeString, value)
		_node.FlowStatus = value
	}
	if value, ok := pc.mutation.FlowVariables(); ok {
		_spec.SetField(process.FieldFlowVariables, field.TypeJSON, value)
		_node.FlowVariables = value
	}
	if value, ok := pc.mutation.IsDraft(); ok {
		_spec.SetField(process.FieldIsDraft, field.TypeBool, value)
		_node.IsDraft = value
	}
	if value, ok := pc.mutation.IsTerminated(); ok {
		_spec.SetField(process.FieldIsTerminated, field.TypeBool, value)
		_node.IsTerminated = value
	}
	if value, ok := pc.mutation.IsSuspended(); ok {
		_spec.SetField(process.FieldIsSuspended, field.TypeBool, value)
		_node.IsSuspended = value
	}
	if value, ok := pc.mutation.SuspendReason(); ok {
		_spec.SetField(process.FieldSuspendReason, field.TypeString, value)
		_node.SuspendReason = value
	}
	if value, ok := pc.mutation.StartTime(); ok {
		_spec.SetField(process.FieldStartTime, field.TypeInt64, value)
		_node.StartTime = value
	}
	if value, ok := pc.mutation.EndTime(); ok {
		_spec.SetField(process.FieldEndTime, field.TypeInt64, value)
		_node.EndTime = &value
	}
	if value, ok := pc.mutation.DueTime(); ok {
		_spec.SetField(process.FieldDueTime, field.TypeInt64, value)
		_node.DueTime = &value
	}
	if value, ok := pc.mutation.Duration(); ok {
		_spec.SetField(process.FieldDuration, field.TypeInt, value)
		_node.Duration = value
	}
	if value, ok := pc.mutation.Priority(); ok {
		_spec.SetField(process.FieldPriority, field.TypeInt, value)
		_node.Priority = value
	}
	if value, ok := pc.mutation.IsTimeout(); ok {
		_spec.SetField(process.FieldIsTimeout, field.TypeBool, value)
		_node.IsTimeout = value
	}
	if value, ok := pc.mutation.ReminderCount(); ok {
		_spec.SetField(process.FieldReminderCount, field.TypeInt, value)
		_node.ReminderCount = value
	}
	if value, ok := pc.mutation.AllowCancel(); ok {
		_spec.SetField(process.FieldAllowCancel, field.TypeBool, value)
		_node.AllowCancel = value
	}
	if value, ok := pc.mutation.AllowUrge(); ok {
		_spec.SetField(process.FieldAllowUrge, field.TypeBool, value)
		_node.AllowUrge = value
	}
	if value, ok := pc.mutation.AllowDelegate(); ok {
		_spec.SetField(process.FieldAllowDelegate, field.TypeBool, value)
		_node.AllowDelegate = value
	}
	if value, ok := pc.mutation.AllowTransfer(); ok {
		_spec.SetField(process.FieldAllowTransfer, field.TypeBool, value)
		_node.AllowTransfer = value
	}
	if value, ok := pc.mutation.IsDraftEnabled(); ok {
		_spec.SetField(process.FieldIsDraftEnabled, field.TypeBool, value)
		_node.IsDraftEnabled = value
	}
	if value, ok := pc.mutation.IsAutoStart(); ok {
		_spec.SetField(process.FieldIsAutoStart, field.TypeBool, value)
		_node.IsAutoStart = value
	}
	if value, ok := pc.mutation.StrictMode(); ok {
		_spec.SetField(process.FieldStrictMode, field.TypeBool, value)
		_node.StrictMode = value
	}
	if value, ok := pc.mutation.Extras(); ok {
		_spec.SetField(process.FieldExtras, field.TypeJSON, value)
		_node.Extras = value
	}
	if value, ok := pc.mutation.SpaceID(); ok {
		_spec.SetField(process.FieldSpaceID, field.TypeString, value)
		_node.SpaceID = value
	}
	if value, ok := pc.mutation.CreatedBy(); ok {
		_spec.SetField(process.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := pc.mutation.UpdatedBy(); ok {
		_spec.SetField(process.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.SetField(process.FieldCreatedAt, field.TypeInt64, value)
		_node.CreatedAt = value
	}
	if value, ok := pc.mutation.UpdatedAt(); ok {
		_spec.SetField(process.FieldUpdatedAt, field.TypeInt64, value)
		_node.UpdatedAt = value
	}
	if value, ok := pc.mutation.ProcessKey(); ok {
		_spec.SetField(process.FieldProcessKey, field.TypeString, value)
		_node.ProcessKey = value
	}
	if value, ok := pc.mutation.Initiator(); ok {
		_spec.SetField(process.FieldInitiator, field.TypeString, value)
		_node.Initiator = value
	}
	if value, ok := pc.mutation.InitiatorDept(); ok {
		_spec.SetField(process.FieldInitiatorDept, field.TypeString, value)
		_node.InitiatorDept = value
	}
	if value, ok := pc.mutation.ProcessCode(); ok {
		_spec.SetField(process.FieldProcessCode, field.TypeString, value)
		_node.ProcessCode = value
	}
	if value, ok := pc.mutation.Variables(); ok {
		_spec.SetField(process.FieldVariables, field.TypeJSON, value)
		_node.Variables = value
	}
	if value, ok := pc.mutation.CurrentNode(); ok {
		_spec.SetField(process.FieldCurrentNode, field.TypeString, value)
		_node.CurrentNode = value
	}
	if value, ok := pc.mutation.ActiveNodes(); ok {
		_spec.SetField(process.FieldActiveNodes, field.TypeJSON, value)
		_node.ActiveNodes = value
	}
	if value, ok := pc.mutation.ProcessSnapshot(); ok {
		_spec.SetField(process.FieldProcessSnapshot, field.TypeJSON, value)
		_node.ProcessSnapshot = value
	}
	if value, ok := pc.mutation.FormSnapshot(); ok {
		_spec.SetField(process.FieldFormSnapshot, field.TypeJSON, value)
		_node.FormSnapshot = value
	}
	if value, ok := pc.mutation.UrgeCount(); ok {
		_spec.SetField(process.FieldUrgeCount, field.TypeInt, value)
		_node.UrgeCount = value
	}
	return _node, _spec
}

// ProcessCreateBulk is the builder for creating many Process entities in bulk.
type ProcessCreateBulk struct {
	config
	err      error
	builders []*ProcessCreate
}

// Save creates the Process entities in the database.
func (pcb *ProcessCreateBulk) Save(ctx context.Context) ([]*Process, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Process, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProcessMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *ProcessCreateBulk) SaveX(ctx context.Context) []*Process {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *ProcessCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *ProcessCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
