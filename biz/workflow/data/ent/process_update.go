// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/workflow/data/ent/predicate"
	"ncobase/workflow/data/ent/process"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// ProcessUpdate is the builder for updating Process entities.
type ProcessUpdate struct {
	config
	hooks    []Hook
	mutation *ProcessMutation
}

// Where appends a list predicates to the ProcessUpdate builder.
func (pu *ProcessUpdate) Where(ps ...predicate.Process) *ProcessUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetStatus sets the "status" field.
func (pu *ProcessUpdate) SetStatus(s string) *ProcessUpdate {
	pu.mutation.SetStatus(s)
	return pu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pu *ProcessUpdate) SetNillableStatus(s *string) *ProcessUpdate {
	if s != nil {
		pu.SetStatus(*s)
	}
	return pu
}

// ClearStatus clears the value of the "status" field.
func (pu *ProcessUpdate) ClearStatus() *ProcessUpdate {
	pu.mutation.ClearStatus()
	return pu
}

// SetProcessID sets the "process_id" field.
func (pu *ProcessUpdate) SetProcessID(s string) *ProcessUpdate {
	pu.mutation.SetProcessID(s)
	return pu
}

// SetNillableProcessID sets the "process_id" field if the given value is not nil.
func (pu *ProcessUpdate) SetNillableProcessID(s *string) *ProcessUpdate {
	if s != nil {
		pu.SetProcessID(*s)
	}
	return pu
}

// SetTemplateID sets the "template_id" field.
func (pu *ProcessUpdate) SetTemplateID(s string) *ProcessUpdate {
	pu.mutation.SetTemplateID(s)
	return pu
}

// SetNillableTemplateID sets the "template_id" field if the given value is not nil.
func (pu *ProcessUpdate) SetNillableTemplateID(s *string) *ProcessUpdate {
	if s != nil {
		pu.SetTemplateID(*s)
	}
	return pu
}

// SetBusinessKey sets the "business_key" field.
func (pu *ProcessUpdate) SetBusinessKey(s string) *ProcessUpdate {
	pu.mutation.SetBusinessKey(s)
	return pu
}

// SetNillableBusinessKey sets the "business_key" field if the given value is not nil.
func (pu *ProcessUpdate) SetNillableBusinessKey(s *string) *ProcessUpdate {
	if s != nil {
		pu.SetBusinessKey(*s)
	}
	return pu
}

// SetFormCode sets the "form_code" field.
func (pu *ProcessUpdate) SetFormCode(s string) *ProcessUpdate {
	pu.mutation.SetFormCode(s)
	return pu
}

// SetNillableFormCode sets the "form_code" field if the given value is not nil.
func (pu *ProcessUpdate) SetNillableFormCode(s *string) *ProcessUpdate {
	if s != nil {
		pu.SetFormCode(*s)
	}
	return pu
}

// SetFormVersion sets the "form_version" field.
func (pu *ProcessUpdate) SetFormVersion(s string) *ProcessUpdate {
	pu.mutation.SetFormVersion(s)
	return pu
}

// SetNillableFormVersion sets the "form_version" field if the given value is not nil.
func (pu *ProcessUpdate) SetNillableFormVersion(s *string) *ProcessUpdate {
	if s != nil {
		pu.SetFormVersion(*s)
	}
	return pu
}

// ClearFormVersion clears the value of the "form_version" field.
func (pu *ProcessUpdate) ClearFormVersion() *ProcessUpdate {
	pu.mutation.ClearFormVersion()
	return pu
}

// SetFormConfig sets the "form_config" field.
func (pu *ProcessUpdate) SetFormConfig(m map[string]interface{}) *ProcessUpdate {
	pu.mutation.SetFormConfig(m)
	return pu
}

// ClearFormConfig clears the value of the "form_config" field.
func (pu *ProcessUpdate) ClearFormConfig() *ProcessUpdate {
	pu.mutation.ClearFormConfig()
	return pu
}

// SetFormPermissions sets the "form_permissions" field.
func (pu *ProcessUpdate) SetFormPermissions(m map[string]interface{}) *ProcessUpdate {
	pu.mutation.SetFormPermissions(m)
	return pu
}

// ClearFormPermissions clears the value of the "form_permissions" field.
func (pu *ProcessUpdate) ClearFormPermissions() *ProcessUpdate {
	pu.mutation.ClearFormPermissions()
	return pu
}

// SetFieldPermissions sets the "field_permissions" field.
func (pu *ProcessUpdate) SetFieldPermissions(m map[string]interface{}) *ProcessUpdate {
	pu.mutation.SetFieldPermissions(m)
	return pu
}

// ClearFieldPermissions clears the value of the "field_permissions" field.
func (pu *ProcessUpdate) ClearFieldPermissions() *ProcessUpdate {
	pu.mutation.ClearFieldPermissions()
	return pu
}

// SetBusinessTags sets the "business_tags" field.
func (pu *ProcessUpdate) SetBusinessTags(s []string) *ProcessUpdate {
	pu.mutation.SetBusinessTags(s)
	return pu
}

// AppendBusinessTags appends s to the "business_tags" field.
func (pu *ProcessUpdate) AppendBusinessTags(s []string) *ProcessUpdate {
	pu.mutation.AppendBusinessTags(s)
	return pu
}

// ClearBusinessTags clears the value of the "business_tags" field.
func (pu *ProcessUpdate) ClearBusinessTags() *ProcessUpdate {
	pu.mutation.ClearBusinessTags()
	return pu
}

// SetModuleCode sets the "module_code" field.
func (pu *ProcessUpdate) SetModuleCode(s string) *ProcessUpdate {
	pu.mutation.SetModuleCode(s)
	return pu
}

// SetNillableModuleCode sets the "module_code" field if the given value is not nil.
func (pu *ProcessUpdate) SetNillableModuleCode(s *string) *ProcessUpdate {
	if s != nil {
		pu.SetModuleCode(*s)
	}
	return pu
}

// SetCategory sets the "category" field.
func (pu *ProcessUpdate) SetCategory(s string) *ProcessUpdate {
	pu.mutation.SetCategory(s)
	return pu
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (pu *ProcessUpdate) SetNillableCategory(s *string) *ProcessUpdate {
	if s != nil {
		pu.SetCategory(*s)
	}
	return pu
}

// ClearCategory clears the value of the "category" field.
func (pu *ProcessUpdate) ClearCategory() *ProcessUpdate {
	pu.mutation.ClearCategory()
	return pu
}

// SetFlowStatus sets the "flow_status" field.
func (pu *ProcessUpdate) SetFlowStatus(s string) *ProcessUpdate {
	pu.mutation.SetFlowStatus(s)
	return pu
}

// SetNillableFlowStatus sets the "flow_status" field if the given value is not nil.
func (pu *ProcessUpdate) SetNillableFlowStatus(s *string) *ProcessUpdate {
	if s != nil {
		pu.SetFlowStatus(*s)
	}
	return pu
}

// ClearFlowStatus clears the value of the "flow_status" field.
func (pu *ProcessUpdate) ClearFlowStatus() *ProcessUpdate {
	pu.mutation.ClearFlowStatus()
	return pu
}

// SetFlowVariables sets the "flow_variables" field.
func (pu *ProcessUpdate) SetFlowVariables(m map[string]interface{}) *ProcessUpdate {
	pu.mutation.SetFlowVariables(m)
	return pu
}

// ClearFlowVariables clears the value of the "flow_variables" field.
func (pu *ProcessUpdate) ClearFlowVariables() *ProcessUpdate {
	pu.mutation.ClearFlowVariables()
	return pu
}

// SetIsDraft sets the "is_draft" field.
func (pu *ProcessUpdate) SetIsDraft(b bool) *ProcessUpdate {
	pu.mutation.SetIsDraft(b)
	return pu
}

// SetNillableIsDraft sets the "is_draft" field if the given value is not nil.
func (pu *ProcessUpdate) SetNillableIsDraft(b *bool) *ProcessUpdate {
	if b != nil {
		pu.SetIsDraft(*b)
	}
	return pu
}

// SetIsTerminated sets the "is_terminated" field.
func (pu *ProcessUpdate) SetIsTerminated(b bool) *ProcessUpdate {
	pu.mutation.SetIsTerminated(b)
	return pu
}

// SetNillableIsTerminated sets the "is_terminated" field if the given value is not nil.
func (pu *ProcessUpdate) SetNillableIsTerminated(b *bool) *ProcessUpdate {
	if b != nil {
		pu.SetIsTerminated(*b)
	}
	return pu
}

// SetIsSuspended sets the "is_suspended" field.
func (pu *ProcessUpdate) SetIsSuspended(b bool) *ProcessUpdate {
	pu.mutation.SetIsSuspended(b)
	return pu
}

// SetNillableIsSuspended sets the "is_suspended" field if the given value is not nil.
func (pu *ProcessUpdate) SetNillableIsSuspended(b *bool) *ProcessUpdate {
	if b != nil {
		pu.SetIsSuspended(*b)
	}
	return pu
}

// SetSuspendReason sets the "suspend_reason" field.
func (pu *ProcessUpdate) SetSuspendReason(s string) *ProcessUpdate {
	pu.mutation.SetSuspendReason(s)
	return pu
}

// SetNillableSuspendReason sets the "suspend_reason" field if the given value is not nil.
func (pu *ProcessUpdate) SetNillableSuspendReason(s *string) *ProcessUpdate {
	if s != nil {
		pu.SetSuspendReason(*s)
	}
	return pu
}

// ClearSuspendReason clears the value of the "suspend_reason" field.
func (pu *ProcessUpdate) ClearSuspendReason() *ProcessUpdate {
	pu.mutation.ClearSuspendReason()
	return pu
}

// SetStartTime sets the "start_time" field.
func (pu *ProcessUpdate) SetStartTime(i int64) *ProcessUpdate {
	pu.mutation.ResetStartTime()
	pu.mutation.SetStartTime(i)
	return pu
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (pu *ProcessUpdate) SetNillableStartTime(i *int64) *ProcessUpdate {
	if i != nil {
		pu.SetStartTime(*i)
	}
	return pu
}

// AddStartTime adds i to the "start_time" field.
func (pu *ProcessUpdate) AddStartTime(i int64) *ProcessUpdate {
	pu.mutation.AddStartTime(i)
	return pu
}

// SetEndTime sets the "end_time" field.
func (pu *ProcessUpdate) SetEndTime(i int64) *ProcessUpdate {
	pu.mutation.ResetEndTime()
	pu.mutation.SetEndTime(i)
	return pu
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (pu *ProcessUpdate) SetNillableEndTime(i *int64) *ProcessUpdate {
	if i != nil {
		pu.SetEndTime(*i)
	}
	return pu
}

// AddEndTime adds i to the "end_time" field.
func (pu *ProcessUpdate) AddEndTime(i int64) *ProcessUpdate {
	pu.mutation.AddEndTime(i)
	return pu
}

// ClearEndTime clears the value of the "end_time" field.
func (pu *ProcessUpdate) ClearEndTime() *ProcessUpdate {
	pu.mutation.ClearEndTime()
	return pu
}

// SetDueTime sets the "due_time" field.
func (pu *ProcessUpdate) SetDueTime(i int64) *ProcessUpdate {
	pu.mutation.ResetDueTime()
	pu.mutation.SetDueTime(i)
	return pu
}

// SetNillableDueTime sets the "due_time" field if the given value is not nil.
func (pu *ProcessUpdate) SetNillableDueTime(i *int64) *ProcessUpdate {
	if i != nil {
		pu.SetDueTime(*i)
	}
	return pu
}

// AddDueTime adds i to the "due_time" field.
func (pu *ProcessUpdate) AddDueTime(i int64) *ProcessUpdate {
	pu.mutation.AddDueTime(i)
	return pu
}

// ClearDueTime clears the value of the "due_time" field.
func (pu *ProcessUpdate) ClearDueTime() *ProcessUpdate {
	pu.mutation.ClearDueTime()
	return pu
}

// SetDuration sets the "duration" field.
func (pu *ProcessUpdate) SetDuration(i int) *ProcessUpdate {
	pu.mutation.ResetDuration()
	pu.mutation.SetDuration(i)
	return pu
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (pu *ProcessUpdate) SetNillableDuration(i *int) *ProcessUpdate {
	if i != nil {
		pu.SetDuration(*i)
	}
	return pu
}

// AddDuration adds i to the "duration" field.
func (pu *ProcessUpdate) AddDuration(i int) *ProcessUpdate {
	pu.mutation.AddDuration(i)
	return pu
}

// ClearDuration clears the value of the "duration" field.
func (pu *ProcessUpdate) ClearDuration() *ProcessUpdate {
	pu.mutation.ClearDuration()
	return pu
}

// SetPriority sets the "priority" field.
func (pu *ProcessUpdate) SetPriority(i int) *ProcessUpdate {
	pu.mutation.ResetPriority()
	pu.mutation.SetPriority(i)
	return pu
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (pu *ProcessUpdate) SetNillablePriority(i *int) *ProcessUpdate {
	if i != nil {
		pu.SetPriority(*i)
	}
	return pu
}

// AddPriority adds i to the "priority" field.
func (pu *ProcessUpdate) AddPriority(i int) *ProcessUpdate {
	pu.mutation.AddPriority(i)
	return pu
}

// SetIsTimeout sets the "is_timeout" field.
func (pu *ProcessUpdate) SetIsTimeout(b bool) *ProcessUpdate {
	pu.mutation.SetIsTimeout(b)
	return pu
}

// SetNillableIsTimeout sets the "is_timeout" field if the given value is not nil.
func (pu *ProcessUpdate) SetNillableIsTimeout(b *bool) *ProcessUpdate {
	if b != nil {
		pu.SetIsTimeout(*b)
	}
	return pu
}

// SetReminderCount sets the "reminder_count" field.
func (pu *ProcessUpdate) SetReminderCount(i int) *ProcessUpdate {
	pu.mutation.ResetReminderCount()
	pu.mutation.SetReminderCount(i)
	return pu
}

// SetNillableReminderCount sets the "reminder_count" field if the given value is not nil.
func (pu *ProcessUpdate) SetNillableReminderCount(i *int) *ProcessUpdate {
	if i != nil {
		pu.SetReminderCount(*i)
	}
	return pu
}

// AddReminderCount adds i to the "reminder_count" field.
func (pu *ProcessUpdate) AddReminderCount(i int) *ProcessUpdate {
	pu.mutation.AddReminderCount(i)
	return pu
}

// SetAllowCancel sets the "allow_cancel" field.
func (pu *ProcessUpdate) SetAllowCancel(b bool) *ProcessUpdate {
	pu.mutation.SetAllowCancel(b)
	return pu
}

// SetNillableAllowCancel sets the "allow_cancel" field if the given value is not nil.
func (pu *ProcessUpdate) SetNillableAllowCancel(b *bool) *ProcessUpdate {
	if b != nil {
		pu.SetAllowCancel(*b)
	}
	return pu
}

// SetAllowUrge sets the "allow_urge" field.
func (pu *ProcessUpdate) SetAllowUrge(b bool) *ProcessUpdate {
	pu.mutation.SetAllowUrge(b)
	return pu
}

// SetNillableAllowUrge sets the "allow_urge" field if the given value is not nil.
func (pu *ProcessUpdate) SetNillableAllowUrge(b *bool) *ProcessUpdate {
	if b != nil {
		pu.SetAllowUrge(*b)
	}
	return pu
}

// SetAllowDelegate sets the "allow_delegate" field.
func (pu *ProcessUpdate) SetAllowDelegate(b bool) *ProcessUpdate {
	pu.mutation.SetAllowDelegate(b)
	return pu
}

// SetNillableAllowDelegate sets the "allow_delegate" field if the given value is not nil.
func (pu *ProcessUpdate) SetNillableAllowDelegate(b *bool) *ProcessUpdate {
	if b != nil {
		pu.SetAllowDelegate(*b)
	}
	return pu
}

// SetAllowTransfer sets the "allow_transfer" field.
func (pu *ProcessUpdate) SetAllowTransfer(b bool) *ProcessUpdate {
	pu.mutation.SetAllowTransfer(b)
	return pu
}

// SetNillableAllowTransfer sets the "allow_transfer" field if the given value is not nil.
func (pu *ProcessUpdate) SetNillableAllowTransfer(b *bool) *ProcessUpdate {
	if b != nil {
		pu.SetAllowTransfer(*b)
	}
	return pu
}

// SetIsDraftEnabled sets the "is_draft_enabled" field.
func (pu *ProcessUpdate) SetIsDraftEnabled(b bool) *ProcessUpdate {
	pu.mutation.SetIsDraftEnabled(b)
	return pu
}

// SetNillableIsDraftEnabled sets the "is_draft_enabled" field if the given value is not nil.
func (pu *ProcessUpdate) SetNillableIsDraftEnabled(b *bool) *ProcessUpdate {
	if b != nil {
		pu.SetIsDraftEnabled(*b)
	}
	return pu
}

// SetIsAutoStart sets the "is_auto_start" field.
func (pu *ProcessUpdate) SetIsAutoStart(b bool) *ProcessUpdate {
	pu.mutation.SetIsAutoStart(b)
	return pu
}

// SetNillableIsAutoStart sets the "is_auto_start" field if the given value is not nil.
func (pu *ProcessUpdate) SetNillableIsAutoStart(b *bool) *ProcessUpdate {
	if b != nil {
		pu.SetIsAutoStart(*b)
	}
	return pu
}

// SetStrictMode sets the "strict_mode" field.
func (pu *ProcessUpdate) SetStrictMode(b bool) *ProcessUpdate {
	pu.mutation.SetStrictMode(b)
	return pu
}

// SetNillableStrictMode sets the "strict_mode" field if the given value is not nil.
func (pu *ProcessUpdate) SetNillableStrictMode(b *bool) *ProcessUpdate {
	if b != nil {
		pu.SetStrictMode(*b)
	}
	return pu
}

// SetExtras sets the "extras" field.
func (pu *ProcessUpdate) SetExtras(m map[string]interface{}) *ProcessUpdate {
	pu.mutation.SetExtras(m)
	return pu
}

// ClearExtras clears the value of the "extras" field.
func (pu *ProcessUpdate) ClearExtras() *ProcessUpdate {
	pu.mutation.ClearExtras()
	return pu
}

// SetTenantID sets the "tenant_id" field.
func (pu *ProcessUpdate) SetTenantID(s string) *ProcessUpdate {
	pu.mutation.SetTenantID(s)
	return pu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (pu *ProcessUpdate) SetNillableTenantID(s *string) *ProcessUpdate {
	if s != nil {
		pu.SetTenantID(*s)
	}
	return pu
}

// ClearTenantID clears the value of the "tenant_id" field.
func (pu *ProcessUpdate) ClearTenantID() *ProcessUpdate {
	pu.mutation.ClearTenantID()
	return pu
}

// SetCreatedBy sets the "created_by" field.
func (pu *ProcessUpdate) SetCreatedBy(s string) *ProcessUpdate {
	pu.mutation.SetCreatedBy(s)
	return pu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (pu *ProcessUpdate) SetNillableCreatedBy(s *string) *ProcessUpdate {
	if s != nil {
		pu.SetCreatedBy(*s)
	}
	return pu
}

// ClearCreatedBy clears the value of the "created_by" field.
func (pu *ProcessUpdate) ClearCreatedBy() *ProcessUpdate {
	pu.mutation.ClearCreatedBy()
	return pu
}

// SetUpdatedBy sets the "updated_by" field.
func (pu *ProcessUpdate) SetUpdatedBy(s string) *ProcessUpdate {
	pu.mutation.SetUpdatedBy(s)
	return pu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (pu *ProcessUpdate) SetNillableUpdatedBy(s *string) *ProcessUpdate {
	if s != nil {
		pu.SetUpdatedBy(*s)
	}
	return pu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (pu *ProcessUpdate) ClearUpdatedBy() *ProcessUpdate {
	pu.mutation.ClearUpdatedBy()
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *ProcessUpdate) SetUpdatedAt(i int64) *ProcessUpdate {
	pu.mutation.ResetUpdatedAt()
	pu.mutation.SetUpdatedAt(i)
	return pu
}

// AddUpdatedAt adds i to the "updated_at" field.
func (pu *ProcessUpdate) AddUpdatedAt(i int64) *ProcessUpdate {
	pu.mutation.AddUpdatedAt(i)
	return pu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (pu *ProcessUpdate) ClearUpdatedAt() *ProcessUpdate {
	pu.mutation.ClearUpdatedAt()
	return pu
}

// SetProcessKey sets the "process_key" field.
func (pu *ProcessUpdate) SetProcessKey(s string) *ProcessUpdate {
	pu.mutation.SetProcessKey(s)
	return pu
}

// SetNillableProcessKey sets the "process_key" field if the given value is not nil.
func (pu *ProcessUpdate) SetNillableProcessKey(s *string) *ProcessUpdate {
	if s != nil {
		pu.SetProcessKey(*s)
	}
	return pu
}

// SetInitiator sets the "initiator" field.
func (pu *ProcessUpdate) SetInitiator(s string) *ProcessUpdate {
	pu.mutation.SetInitiator(s)
	return pu
}

// SetNillableInitiator sets the "initiator" field if the given value is not nil.
func (pu *ProcessUpdate) SetNillableInitiator(s *string) *ProcessUpdate {
	if s != nil {
		pu.SetInitiator(*s)
	}
	return pu
}

// SetInitiatorDept sets the "initiator_dept" field.
func (pu *ProcessUpdate) SetInitiatorDept(s string) *ProcessUpdate {
	pu.mutation.SetInitiatorDept(s)
	return pu
}

// SetNillableInitiatorDept sets the "initiator_dept" field if the given value is not nil.
func (pu *ProcessUpdate) SetNillableInitiatorDept(s *string) *ProcessUpdate {
	if s != nil {
		pu.SetInitiatorDept(*s)
	}
	return pu
}

// ClearInitiatorDept clears the value of the "initiator_dept" field.
func (pu *ProcessUpdate) ClearInitiatorDept() *ProcessUpdate {
	pu.mutation.ClearInitiatorDept()
	return pu
}

// SetProcessCode sets the "process_code" field.
func (pu *ProcessUpdate) SetProcessCode(s string) *ProcessUpdate {
	pu.mutation.SetProcessCode(s)
	return pu
}

// SetNillableProcessCode sets the "process_code" field if the given value is not nil.
func (pu *ProcessUpdate) SetNillableProcessCode(s *string) *ProcessUpdate {
	if s != nil {
		pu.SetProcessCode(*s)
	}
	return pu
}

// SetVariables sets the "variables" field.
func (pu *ProcessUpdate) SetVariables(m map[string]interface{}) *ProcessUpdate {
	pu.mutation.SetVariables(m)
	return pu
}

// SetCurrentNode sets the "current_node" field.
func (pu *ProcessUpdate) SetCurrentNode(s string) *ProcessUpdate {
	pu.mutation.SetCurrentNode(s)
	return pu
}

// SetNillableCurrentNode sets the "current_node" field if the given value is not nil.
func (pu *ProcessUpdate) SetNillableCurrentNode(s *string) *ProcessUpdate {
	if s != nil {
		pu.SetCurrentNode(*s)
	}
	return pu
}

// ClearCurrentNode clears the value of the "current_node" field.
func (pu *ProcessUpdate) ClearCurrentNode() *ProcessUpdate {
	pu.mutation.ClearCurrentNode()
	return pu
}

// SetActiveNodes sets the "active_nodes" field.
func (pu *ProcessUpdate) SetActiveNodes(s []string) *ProcessUpdate {
	pu.mutation.SetActiveNodes(s)
	return pu
}

// AppendActiveNodes appends s to the "active_nodes" field.
func (pu *ProcessUpdate) AppendActiveNodes(s []string) *ProcessUpdate {
	pu.mutation.AppendActiveNodes(s)
	return pu
}

// ClearActiveNodes clears the value of the "active_nodes" field.
func (pu *ProcessUpdate) ClearActiveNodes() *ProcessUpdate {
	pu.mutation.ClearActiveNodes()
	return pu
}

// SetProcessSnapshot sets the "process_snapshot" field.
func (pu *ProcessUpdate) SetProcessSnapshot(m map[string]interface{}) *ProcessUpdate {
	pu.mutation.SetProcessSnapshot(m)
	return pu
}

// ClearProcessSnapshot clears the value of the "process_snapshot" field.
func (pu *ProcessUpdate) ClearProcessSnapshot() *ProcessUpdate {
	pu.mutation.ClearProcessSnapshot()
	return pu
}

// SetFormSnapshot sets the "form_snapshot" field.
func (pu *ProcessUpdate) SetFormSnapshot(m map[string]interface{}) *ProcessUpdate {
	pu.mutation.SetFormSnapshot(m)
	return pu
}

// ClearFormSnapshot clears the value of the "form_snapshot" field.
func (pu *ProcessUpdate) ClearFormSnapshot() *ProcessUpdate {
	pu.mutation.ClearFormSnapshot()
	return pu
}

// SetUrgeCount sets the "urge_count" field.
func (pu *ProcessUpdate) SetUrgeCount(i int) *ProcessUpdate {
	pu.mutation.ResetUrgeCount()
	pu.mutation.SetUrgeCount(i)
	return pu
}

// SetNillableUrgeCount sets the "urge_count" field if the given value is not nil.
func (pu *ProcessUpdate) SetNillableUrgeCount(i *int) *ProcessUpdate {
	if i != nil {
		pu.SetUrgeCount(*i)
	}
	return pu
}

// AddUrgeCount adds i to the "urge_count" field.
func (pu *ProcessUpdate) AddUrgeCount(i int) *ProcessUpdate {
	pu.mutation.AddUrgeCount(i)
	return pu
}

// Mutation returns the ProcessMutation object of the builder.
func (pu *ProcessUpdate) Mutation() *ProcessMutation {
	return pu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *ProcessUpdate) Save(ctx context.Context) (int, error) {
	pu.defaults()
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ProcessUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ProcessUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ProcessUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *ProcessUpdate) defaults() {
	if _, ok := pu.mutation.UpdatedAt(); !ok && !pu.mutation.UpdatedAtCleared() {
		v := process.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}
}

func (pu *ProcessUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(process.Table, process.Columns, sqlgraph.NewFieldSpec(process.FieldID, field.TypeString))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Status(); ok {
		_spec.SetField(process.FieldStatus, field.TypeString, value)
	}
	if pu.mutation.StatusCleared() {
		_spec.ClearField(process.FieldStatus, field.TypeString)
	}
	if value, ok := pu.mutation.ProcessID(); ok {
		_spec.SetField(process.FieldProcessID, field.TypeString, value)
	}
	if value, ok := pu.mutation.TemplateID(); ok {
		_spec.SetField(process.FieldTemplateID, field.TypeString, value)
	}
	if value, ok := pu.mutation.BusinessKey(); ok {
		_spec.SetField(process.FieldBusinessKey, field.TypeString, value)
	}
	if value, ok := pu.mutation.FormCode(); ok {
		_spec.SetField(process.FieldFormCode, field.TypeString, value)
	}
	if value, ok := pu.mutation.FormVersion(); ok {
		_spec.SetField(process.FieldFormVersion, field.TypeString, value)
	}
	if pu.mutation.FormVersionCleared() {
		_spec.ClearField(process.FieldFormVersion, field.TypeString)
	}
	if value, ok := pu.mutation.FormConfig(); ok {
		_spec.SetField(process.FieldFormConfig, field.TypeJSON, value)
	}
	if pu.mutation.FormConfigCleared() {
		_spec.ClearField(process.FieldFormConfig, field.TypeJSON)
	}
	if value, ok := pu.mutation.FormPermissions(); ok {
		_spec.SetField(process.FieldFormPermissions, field.TypeJSON, value)
	}
	if pu.mutation.FormPermissionsCleared() {
		_spec.ClearField(process.FieldFormPermissions, field.TypeJSON)
	}
	if value, ok := pu.mutation.FieldPermissions(); ok {
		_spec.SetField(process.FieldFieldPermissions, field.TypeJSON, value)
	}
	if pu.mutation.FieldPermissionsCleared() {
		_spec.ClearField(process.FieldFieldPermissions, field.TypeJSON)
	}
	if value, ok := pu.mutation.BusinessTags(); ok {
		_spec.SetField(process.FieldBusinessTags, field.TypeJSON, value)
	}
	if value, ok := pu.mutation.AppendedBusinessTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, process.FieldBusinessTags, value)
		})
	}
	if pu.mutation.BusinessTagsCleared() {
		_spec.ClearField(process.FieldBusinessTags, field.TypeJSON)
	}
	if value, ok := pu.mutation.ModuleCode(); ok {
		_spec.SetField(process.FieldModuleCode, field.TypeString, value)
	}
	if value, ok := pu.mutation.Category(); ok {
		_spec.SetField(process.FieldCategory, field.TypeString, value)
	}
	if pu.mutation.CategoryCleared() {
		_spec.ClearField(process.FieldCategory, field.TypeString)
	}
	if value, ok := pu.mutation.FlowStatus(); ok {
		_spec.SetField(process.FieldFlowStatus, field.TypeString, value)
	}
	if pu.mutation.FlowStatusCleared() {
		_spec.ClearField(process.FieldFlowStatus, field.TypeString)
	}
	if value, ok := pu.mutation.FlowVariables(); ok {
		_spec.SetField(process.FieldFlowVariables, field.TypeJSON, value)
	}
	if pu.mutation.FlowVariablesCleared() {
		_spec.ClearField(process.FieldFlowVariables, field.TypeJSON)
	}
	if value, ok := pu.mutation.IsDraft(); ok {
		_spec.SetField(process.FieldIsDraft, field.TypeBool, value)
	}
	if value, ok := pu.mutation.IsTerminated(); ok {
		_spec.SetField(process.FieldIsTerminated, field.TypeBool, value)
	}
	if value, ok := pu.mutation.IsSuspended(); ok {
		_spec.SetField(process.FieldIsSuspended, field.TypeBool, value)
	}
	if value, ok := pu.mutation.SuspendReason(); ok {
		_spec.SetField(process.FieldSuspendReason, field.TypeString, value)
	}
	if pu.mutation.SuspendReasonCleared() {
		_spec.ClearField(process.FieldSuspendReason, field.TypeString)
	}
	if value, ok := pu.mutation.StartTime(); ok {
		_spec.SetField(process.FieldStartTime, field.TypeInt64, value)
	}
	if value, ok := pu.mutation.AddedStartTime(); ok {
		_spec.AddField(process.FieldStartTime, field.TypeInt64, value)
	}
	if value, ok := pu.mutation.EndTime(); ok {
		_spec.SetField(process.FieldEndTime, field.TypeInt64, value)
	}
	if value, ok := pu.mutation.AddedEndTime(); ok {
		_spec.AddField(process.FieldEndTime, field.TypeInt64, value)
	}
	if pu.mutation.EndTimeCleared() {
		_spec.ClearField(process.FieldEndTime, field.TypeInt64)
	}
	if value, ok := pu.mutation.DueTime(); ok {
		_spec.SetField(process.FieldDueTime, field.TypeInt64, value)
	}
	if value, ok := pu.mutation.AddedDueTime(); ok {
		_spec.AddField(process.FieldDueTime, field.TypeInt64, value)
	}
	if pu.mutation.DueTimeCleared() {
		_spec.ClearField(process.FieldDueTime, field.TypeInt64)
	}
	if value, ok := pu.mutation.Duration(); ok {
		_spec.SetField(process.FieldDuration, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedDuration(); ok {
		_spec.AddField(process.FieldDuration, field.TypeInt, value)
	}
	if pu.mutation.DurationCleared() {
		_spec.ClearField(process.FieldDuration, field.TypeInt)
	}
	if value, ok := pu.mutation.Priority(); ok {
		_spec.SetField(process.FieldPriority, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedPriority(); ok {
		_spec.AddField(process.FieldPriority, field.TypeInt, value)
	}
	if value, ok := pu.mutation.IsTimeout(); ok {
		_spec.SetField(process.FieldIsTimeout, field.TypeBool, value)
	}
	if value, ok := pu.mutation.ReminderCount(); ok {
		_spec.SetField(process.FieldReminderCount, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedReminderCount(); ok {
		_spec.AddField(process.FieldReminderCount, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AllowCancel(); ok {
		_spec.SetField(process.FieldAllowCancel, field.TypeBool, value)
	}
	if value, ok := pu.mutation.AllowUrge(); ok {
		_spec.SetField(process.FieldAllowUrge, field.TypeBool, value)
	}
	if value, ok := pu.mutation.AllowDelegate(); ok {
		_spec.SetField(process.FieldAllowDelegate, field.TypeBool, value)
	}
	if value, ok := pu.mutation.AllowTransfer(); ok {
		_spec.SetField(process.FieldAllowTransfer, field.TypeBool, value)
	}
	if value, ok := pu.mutation.IsDraftEnabled(); ok {
		_spec.SetField(process.FieldIsDraftEnabled, field.TypeBool, value)
	}
	if value, ok := pu.mutation.IsAutoStart(); ok {
		_spec.SetField(process.FieldIsAutoStart, field.TypeBool, value)
	}
	if value, ok := pu.mutation.StrictMode(); ok {
		_spec.SetField(process.FieldStrictMode, field.TypeBool, value)
	}
	if value, ok := pu.mutation.Extras(); ok {
		_spec.SetField(process.FieldExtras, field.TypeJSON, value)
	}
	if pu.mutation.ExtrasCleared() {
		_spec.ClearField(process.FieldExtras, field.TypeJSON)
	}
	if value, ok := pu.mutation.TenantID(); ok {
		_spec.SetField(process.FieldTenantID, field.TypeString, value)
	}
	if pu.mutation.TenantIDCleared() {
		_spec.ClearField(process.FieldTenantID, field.TypeString)
	}
	if value, ok := pu.mutation.CreatedBy(); ok {
		_spec.SetField(process.FieldCreatedBy, field.TypeString, value)
	}
	if pu.mutation.CreatedByCleared() {
		_spec.ClearField(process.FieldCreatedBy, field.TypeString)
	}
	if value, ok := pu.mutation.UpdatedBy(); ok {
		_spec.SetField(process.FieldUpdatedBy, field.TypeString, value)
	}
	if pu.mutation.UpdatedByCleared() {
		_spec.ClearField(process.FieldUpdatedBy, field.TypeString)
	}
	if pu.mutation.CreatedAtCleared() {
		_spec.ClearField(process.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.SetField(process.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := pu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(process.FieldUpdatedAt, field.TypeInt64, value)
	}
	if pu.mutation.UpdatedAtCleared() {
		_spec.ClearField(process.FieldUpdatedAt, field.TypeInt64)
	}
	if value, ok := pu.mutation.ProcessKey(); ok {
		_spec.SetField(process.FieldProcessKey, field.TypeString, value)
	}
	if value, ok := pu.mutation.Initiator(); ok {
		_spec.SetField(process.FieldInitiator, field.TypeString, value)
	}
	if value, ok := pu.mutation.InitiatorDept(); ok {
		_spec.SetField(process.FieldInitiatorDept, field.TypeString, value)
	}
	if pu.mutation.InitiatorDeptCleared() {
		_spec.ClearField(process.FieldInitiatorDept, field.TypeString)
	}
	if value, ok := pu.mutation.ProcessCode(); ok {
		_spec.SetField(process.FieldProcessCode, field.TypeString, value)
	}
	if value, ok := pu.mutation.Variables(); ok {
		_spec.SetField(process.FieldVariables, field.TypeJSON, value)
	}
	if value, ok := pu.mutation.CurrentNode(); ok {
		_spec.SetField(process.FieldCurrentNode, field.TypeString, value)
	}
	if pu.mutation.CurrentNodeCleared() {
		_spec.ClearField(process.FieldCurrentNode, field.TypeString)
	}
	if value, ok := pu.mutation.ActiveNodes(); ok {
		_spec.SetField(process.FieldActiveNodes, field.TypeJSON, value)
	}
	if value, ok := pu.mutation.AppendedActiveNodes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, process.FieldActiveNodes, value)
		})
	}
	if pu.mutation.ActiveNodesCleared() {
		_spec.ClearField(process.FieldActiveNodes, field.TypeJSON)
	}
	if value, ok := pu.mutation.ProcessSnapshot(); ok {
		_spec.SetField(process.FieldProcessSnapshot, field.TypeJSON, value)
	}
	if pu.mutation.ProcessSnapshotCleared() {
		_spec.ClearField(process.FieldProcessSnapshot, field.TypeJSON)
	}
	if value, ok := pu.mutation.FormSnapshot(); ok {
		_spec.SetField(process.FieldFormSnapshot, field.TypeJSON, value)
	}
	if pu.mutation.FormSnapshotCleared() {
		_spec.ClearField(process.FieldFormSnapshot, field.TypeJSON)
	}
	if value, ok := pu.mutation.UrgeCount(); ok {
		_spec.SetField(process.FieldUrgeCount, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedUrgeCount(); ok {
		_spec.AddField(process.FieldUrgeCount, field.TypeInt, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{process.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// ProcessUpdateOne is the builder for updating a single Process entity.
type ProcessUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProcessMutation
}

// SetStatus sets the "status" field.
func (puo *ProcessUpdateOne) SetStatus(s string) *ProcessUpdateOne {
	puo.mutation.SetStatus(s)
	return puo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (puo *ProcessUpdateOne) SetNillableStatus(s *string) *ProcessUpdateOne {
	if s != nil {
		puo.SetStatus(*s)
	}
	return puo
}

// ClearStatus clears the value of the "status" field.
func (puo *ProcessUpdateOne) ClearStatus() *ProcessUpdateOne {
	puo.mutation.ClearStatus()
	return puo
}

// SetProcessID sets the "process_id" field.
func (puo *ProcessUpdateOne) SetProcessID(s string) *ProcessUpdateOne {
	puo.mutation.SetProcessID(s)
	return puo
}

// SetNillableProcessID sets the "process_id" field if the given value is not nil.
func (puo *ProcessUpdateOne) SetNillableProcessID(s *string) *ProcessUpdateOne {
	if s != nil {
		puo.SetProcessID(*s)
	}
	return puo
}

// SetTemplateID sets the "template_id" field.
func (puo *ProcessUpdateOne) SetTemplateID(s string) *ProcessUpdateOne {
	puo.mutation.SetTemplateID(s)
	return puo
}

// SetNillableTemplateID sets the "template_id" field if the given value is not nil.
func (puo *ProcessUpdateOne) SetNillableTemplateID(s *string) *ProcessUpdateOne {
	if s != nil {
		puo.SetTemplateID(*s)
	}
	return puo
}

// SetBusinessKey sets the "business_key" field.
func (puo *ProcessUpdateOne) SetBusinessKey(s string) *ProcessUpdateOne {
	puo.mutation.SetBusinessKey(s)
	return puo
}

// SetNillableBusinessKey sets the "business_key" field if the given value is not nil.
func (puo *ProcessUpdateOne) SetNillableBusinessKey(s *string) *ProcessUpdateOne {
	if s != nil {
		puo.SetBusinessKey(*s)
	}
	return puo
}

// SetFormCode sets the "form_code" field.
func (puo *ProcessUpdateOne) SetFormCode(s string) *ProcessUpdateOne {
	puo.mutation.SetFormCode(s)
	return puo
}

// SetNillableFormCode sets the "form_code" field if the given value is not nil.
func (puo *ProcessUpdateOne) SetNillableFormCode(s *string) *ProcessUpdateOne {
	if s != nil {
		puo.SetFormCode(*s)
	}
	return puo
}

// SetFormVersion sets the "form_version" field.
func (puo *ProcessUpdateOne) SetFormVersion(s string) *ProcessUpdateOne {
	puo.mutation.SetFormVersion(s)
	return puo
}

// SetNillableFormVersion sets the "form_version" field if the given value is not nil.
func (puo *ProcessUpdateOne) SetNillableFormVersion(s *string) *ProcessUpdateOne {
	if s != nil {
		puo.SetFormVersion(*s)
	}
	return puo
}

// ClearFormVersion clears the value of the "form_version" field.
func (puo *ProcessUpdateOne) ClearFormVersion() *ProcessUpdateOne {
	puo.mutation.ClearFormVersion()
	return puo
}

// SetFormConfig sets the "form_config" field.
func (puo *ProcessUpdateOne) SetFormConfig(m map[string]interface{}) *ProcessUpdateOne {
	puo.mutation.SetFormConfig(m)
	return puo
}

// ClearFormConfig clears the value of the "form_config" field.
func (puo *ProcessUpdateOne) ClearFormConfig() *ProcessUpdateOne {
	puo.mutation.ClearFormConfig()
	return puo
}

// SetFormPermissions sets the "form_permissions" field.
func (puo *ProcessUpdateOne) SetFormPermissions(m map[string]interface{}) *ProcessUpdateOne {
	puo.mutation.SetFormPermissions(m)
	return puo
}

// ClearFormPermissions clears the value of the "form_permissions" field.
func (puo *ProcessUpdateOne) ClearFormPermissions() *ProcessUpdateOne {
	puo.mutation.ClearFormPermissions()
	return puo
}

// SetFieldPermissions sets the "field_permissions" field.
func (puo *ProcessUpdateOne) SetFieldPermissions(m map[string]interface{}) *ProcessUpdateOne {
	puo.mutation.SetFieldPermissions(m)
	return puo
}

// ClearFieldPermissions clears the value of the "field_permissions" field.
func (puo *ProcessUpdateOne) ClearFieldPermissions() *ProcessUpdateOne {
	puo.mutation.ClearFieldPermissions()
	return puo
}

// SetBusinessTags sets the "business_tags" field.
func (puo *ProcessUpdateOne) SetBusinessTags(s []string) *ProcessUpdateOne {
	puo.mutation.SetBusinessTags(s)
	return puo
}

// AppendBusinessTags appends s to the "business_tags" field.
func (puo *ProcessUpdateOne) AppendBusinessTags(s []string) *ProcessUpdateOne {
	puo.mutation.AppendBusinessTags(s)
	return puo
}

// ClearBusinessTags clears the value of the "business_tags" field.
func (puo *ProcessUpdateOne) ClearBusinessTags() *ProcessUpdateOne {
	puo.mutation.ClearBusinessTags()
	return puo
}

// SetModuleCode sets the "module_code" field.
func (puo *ProcessUpdateOne) SetModuleCode(s string) *ProcessUpdateOne {
	puo.mutation.SetModuleCode(s)
	return puo
}

// SetNillableModuleCode sets the "module_code" field if the given value is not nil.
func (puo *ProcessUpdateOne) SetNillableModuleCode(s *string) *ProcessUpdateOne {
	if s != nil {
		puo.SetModuleCode(*s)
	}
	return puo
}

// SetCategory sets the "category" field.
func (puo *ProcessUpdateOne) SetCategory(s string) *ProcessUpdateOne {
	puo.mutation.SetCategory(s)
	return puo
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (puo *ProcessUpdateOne) SetNillableCategory(s *string) *ProcessUpdateOne {
	if s != nil {
		puo.SetCategory(*s)
	}
	return puo
}

// ClearCategory clears the value of the "category" field.
func (puo *ProcessUpdateOne) ClearCategory() *ProcessUpdateOne {
	puo.mutation.ClearCategory()
	return puo
}

// SetFlowStatus sets the "flow_status" field.
func (puo *ProcessUpdateOne) SetFlowStatus(s string) *ProcessUpdateOne {
	puo.mutation.SetFlowStatus(s)
	return puo
}

// SetNillableFlowStatus sets the "flow_status" field if the given value is not nil.
func (puo *ProcessUpdateOne) SetNillableFlowStatus(s *string) *ProcessUpdateOne {
	if s != nil {
		puo.SetFlowStatus(*s)
	}
	return puo
}

// ClearFlowStatus clears the value of the "flow_status" field.
func (puo *ProcessUpdateOne) ClearFlowStatus() *ProcessUpdateOne {
	puo.mutation.ClearFlowStatus()
	return puo
}

// SetFlowVariables sets the "flow_variables" field.
func (puo *ProcessUpdateOne) SetFlowVariables(m map[string]interface{}) *ProcessUpdateOne {
	puo.mutation.SetFlowVariables(m)
	return puo
}

// ClearFlowVariables clears the value of the "flow_variables" field.
func (puo *ProcessUpdateOne) ClearFlowVariables() *ProcessUpdateOne {
	puo.mutation.ClearFlowVariables()
	return puo
}

// SetIsDraft sets the "is_draft" field.
func (puo *ProcessUpdateOne) SetIsDraft(b bool) *ProcessUpdateOne {
	puo.mutation.SetIsDraft(b)
	return puo
}

// SetNillableIsDraft sets the "is_draft" field if the given value is not nil.
func (puo *ProcessUpdateOne) SetNillableIsDraft(b *bool) *ProcessUpdateOne {
	if b != nil {
		puo.SetIsDraft(*b)
	}
	return puo
}

// SetIsTerminated sets the "is_terminated" field.
func (puo *ProcessUpdateOne) SetIsTerminated(b bool) *ProcessUpdateOne {
	puo.mutation.SetIsTerminated(b)
	return puo
}

// SetNillableIsTerminated sets the "is_terminated" field if the given value is not nil.
func (puo *ProcessUpdateOne) SetNillableIsTerminated(b *bool) *ProcessUpdateOne {
	if b != nil {
		puo.SetIsTerminated(*b)
	}
	return puo
}

// SetIsSuspended sets the "is_suspended" field.
func (puo *ProcessUpdateOne) SetIsSuspended(b bool) *ProcessUpdateOne {
	puo.mutation.SetIsSuspended(b)
	return puo
}

// SetNillableIsSuspended sets the "is_suspended" field if the given value is not nil.
func (puo *ProcessUpdateOne) SetNillableIsSuspended(b *bool) *ProcessUpdateOne {
	if b != nil {
		puo.SetIsSuspended(*b)
	}
	return puo
}

// SetSuspendReason sets the "suspend_reason" field.
func (puo *ProcessUpdateOne) SetSuspendReason(s string) *ProcessUpdateOne {
	puo.mutation.SetSuspendReason(s)
	return puo
}

// SetNillableSuspendReason sets the "suspend_reason" field if the given value is not nil.
func (puo *ProcessUpdateOne) SetNillableSuspendReason(s *string) *ProcessUpdateOne {
	if s != nil {
		puo.SetSuspendReason(*s)
	}
	return puo
}

// ClearSuspendReason clears the value of the "suspend_reason" field.
func (puo *ProcessUpdateOne) ClearSuspendReason() *ProcessUpdateOne {
	puo.mutation.ClearSuspendReason()
	return puo
}

// SetStartTime sets the "start_time" field.
func (puo *ProcessUpdateOne) SetStartTime(i int64) *ProcessUpdateOne {
	puo.mutation.ResetStartTime()
	puo.mutation.SetStartTime(i)
	return puo
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (puo *ProcessUpdateOne) SetNillableStartTime(i *int64) *ProcessUpdateOne {
	if i != nil {
		puo.SetStartTime(*i)
	}
	return puo
}

// AddStartTime adds i to the "start_time" field.
func (puo *ProcessUpdateOne) AddStartTime(i int64) *ProcessUpdateOne {
	puo.mutation.AddStartTime(i)
	return puo
}

// SetEndTime sets the "end_time" field.
func (puo *ProcessUpdateOne) SetEndTime(i int64) *ProcessUpdateOne {
	puo.mutation.ResetEndTime()
	puo.mutation.SetEndTime(i)
	return puo
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (puo *ProcessUpdateOne) SetNillableEndTime(i *int64) *ProcessUpdateOne {
	if i != nil {
		puo.SetEndTime(*i)
	}
	return puo
}

// AddEndTime adds i to the "end_time" field.
func (puo *ProcessUpdateOne) AddEndTime(i int64) *ProcessUpdateOne {
	puo.mutation.AddEndTime(i)
	return puo
}

// ClearEndTime clears the value of the "end_time" field.
func (puo *ProcessUpdateOne) ClearEndTime() *ProcessUpdateOne {
	puo.mutation.ClearEndTime()
	return puo
}

// SetDueTime sets the "due_time" field.
func (puo *ProcessUpdateOne) SetDueTime(i int64) *ProcessUpdateOne {
	puo.mutation.ResetDueTime()
	puo.mutation.SetDueTime(i)
	return puo
}

// SetNillableDueTime sets the "due_time" field if the given value is not nil.
func (puo *ProcessUpdateOne) SetNillableDueTime(i *int64) *ProcessUpdateOne {
	if i != nil {
		puo.SetDueTime(*i)
	}
	return puo
}

// AddDueTime adds i to the "due_time" field.
func (puo *ProcessUpdateOne) AddDueTime(i int64) *ProcessUpdateOne {
	puo.mutation.AddDueTime(i)
	return puo
}

// ClearDueTime clears the value of the "due_time" field.
func (puo *ProcessUpdateOne) ClearDueTime() *ProcessUpdateOne {
	puo.mutation.ClearDueTime()
	return puo
}

// SetDuration sets the "duration" field.
func (puo *ProcessUpdateOne) SetDuration(i int) *ProcessUpdateOne {
	puo.mutation.ResetDuration()
	puo.mutation.SetDuration(i)
	return puo
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (puo *ProcessUpdateOne) SetNillableDuration(i *int) *ProcessUpdateOne {
	if i != nil {
		puo.SetDuration(*i)
	}
	return puo
}

// AddDuration adds i to the "duration" field.
func (puo *ProcessUpdateOne) AddDuration(i int) *ProcessUpdateOne {
	puo.mutation.AddDuration(i)
	return puo
}

// ClearDuration clears the value of the "duration" field.
func (puo *ProcessUpdateOne) ClearDuration() *ProcessUpdateOne {
	puo.mutation.ClearDuration()
	return puo
}

// SetPriority sets the "priority" field.
func (puo *ProcessUpdateOne) SetPriority(i int) *ProcessUpdateOne {
	puo.mutation.ResetPriority()
	puo.mutation.SetPriority(i)
	return puo
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (puo *ProcessUpdateOne) SetNillablePriority(i *int) *ProcessUpdateOne {
	if i != nil {
		puo.SetPriority(*i)
	}
	return puo
}

// AddPriority adds i to the "priority" field.
func (puo *ProcessUpdateOne) AddPriority(i int) *ProcessUpdateOne {
	puo.mutation.AddPriority(i)
	return puo
}

// SetIsTimeout sets the "is_timeout" field.
func (puo *ProcessUpdateOne) SetIsTimeout(b bool) *ProcessUpdateOne {
	puo.mutation.SetIsTimeout(b)
	return puo
}

// SetNillableIsTimeout sets the "is_timeout" field if the given value is not nil.
func (puo *ProcessUpdateOne) SetNillableIsTimeout(b *bool) *ProcessUpdateOne {
	if b != nil {
		puo.SetIsTimeout(*b)
	}
	return puo
}

// SetReminderCount sets the "reminder_count" field.
func (puo *ProcessUpdateOne) SetReminderCount(i int) *ProcessUpdateOne {
	puo.mutation.ResetReminderCount()
	puo.mutation.SetReminderCount(i)
	return puo
}

// SetNillableReminderCount sets the "reminder_count" field if the given value is not nil.
func (puo *ProcessUpdateOne) SetNillableReminderCount(i *int) *ProcessUpdateOne {
	if i != nil {
		puo.SetReminderCount(*i)
	}
	return puo
}

// AddReminderCount adds i to the "reminder_count" field.
func (puo *ProcessUpdateOne) AddReminderCount(i int) *ProcessUpdateOne {
	puo.mutation.AddReminderCount(i)
	return puo
}

// SetAllowCancel sets the "allow_cancel" field.
func (puo *ProcessUpdateOne) SetAllowCancel(b bool) *ProcessUpdateOne {
	puo.mutation.SetAllowCancel(b)
	return puo
}

// SetNillableAllowCancel sets the "allow_cancel" field if the given value is not nil.
func (puo *ProcessUpdateOne) SetNillableAllowCancel(b *bool) *ProcessUpdateOne {
	if b != nil {
		puo.SetAllowCancel(*b)
	}
	return puo
}

// SetAllowUrge sets the "allow_urge" field.
func (puo *ProcessUpdateOne) SetAllowUrge(b bool) *ProcessUpdateOne {
	puo.mutation.SetAllowUrge(b)
	return puo
}

// SetNillableAllowUrge sets the "allow_urge" field if the given value is not nil.
func (puo *ProcessUpdateOne) SetNillableAllowUrge(b *bool) *ProcessUpdateOne {
	if b != nil {
		puo.SetAllowUrge(*b)
	}
	return puo
}

// SetAllowDelegate sets the "allow_delegate" field.
func (puo *ProcessUpdateOne) SetAllowDelegate(b bool) *ProcessUpdateOne {
	puo.mutation.SetAllowDelegate(b)
	return puo
}

// SetNillableAllowDelegate sets the "allow_delegate" field if the given value is not nil.
func (puo *ProcessUpdateOne) SetNillableAllowDelegate(b *bool) *ProcessUpdateOne {
	if b != nil {
		puo.SetAllowDelegate(*b)
	}
	return puo
}

// SetAllowTransfer sets the "allow_transfer" field.
func (puo *ProcessUpdateOne) SetAllowTransfer(b bool) *ProcessUpdateOne {
	puo.mutation.SetAllowTransfer(b)
	return puo
}

// SetNillableAllowTransfer sets the "allow_transfer" field if the given value is not nil.
func (puo *ProcessUpdateOne) SetNillableAllowTransfer(b *bool) *ProcessUpdateOne {
	if b != nil {
		puo.SetAllowTransfer(*b)
	}
	return puo
}

// SetIsDraftEnabled sets the "is_draft_enabled" field.
func (puo *ProcessUpdateOne) SetIsDraftEnabled(b bool) *ProcessUpdateOne {
	puo.mutation.SetIsDraftEnabled(b)
	return puo
}

// SetNillableIsDraftEnabled sets the "is_draft_enabled" field if the given value is not nil.
func (puo *ProcessUpdateOne) SetNillableIsDraftEnabled(b *bool) *ProcessUpdateOne {
	if b != nil {
		puo.SetIsDraftEnabled(*b)
	}
	return puo
}

// SetIsAutoStart sets the "is_auto_start" field.
func (puo *ProcessUpdateOne) SetIsAutoStart(b bool) *ProcessUpdateOne {
	puo.mutation.SetIsAutoStart(b)
	return puo
}

// SetNillableIsAutoStart sets the "is_auto_start" field if the given value is not nil.
func (puo *ProcessUpdateOne) SetNillableIsAutoStart(b *bool) *ProcessUpdateOne {
	if b != nil {
		puo.SetIsAutoStart(*b)
	}
	return puo
}

// SetStrictMode sets the "strict_mode" field.
func (puo *ProcessUpdateOne) SetStrictMode(b bool) *ProcessUpdateOne {
	puo.mutation.SetStrictMode(b)
	return puo
}

// SetNillableStrictMode sets the "strict_mode" field if the given value is not nil.
func (puo *ProcessUpdateOne) SetNillableStrictMode(b *bool) *ProcessUpdateOne {
	if b != nil {
		puo.SetStrictMode(*b)
	}
	return puo
}

// SetExtras sets the "extras" field.
func (puo *ProcessUpdateOne) SetExtras(m map[string]interface{}) *ProcessUpdateOne {
	puo.mutation.SetExtras(m)
	return puo
}

// ClearExtras clears the value of the "extras" field.
func (puo *ProcessUpdateOne) ClearExtras() *ProcessUpdateOne {
	puo.mutation.ClearExtras()
	return puo
}

// SetTenantID sets the "tenant_id" field.
func (puo *ProcessUpdateOne) SetTenantID(s string) *ProcessUpdateOne {
	puo.mutation.SetTenantID(s)
	return puo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (puo *ProcessUpdateOne) SetNillableTenantID(s *string) *ProcessUpdateOne {
	if s != nil {
		puo.SetTenantID(*s)
	}
	return puo
}

// ClearTenantID clears the value of the "tenant_id" field.
func (puo *ProcessUpdateOne) ClearTenantID() *ProcessUpdateOne {
	puo.mutation.ClearTenantID()
	return puo
}

// SetCreatedBy sets the "created_by" field.
func (puo *ProcessUpdateOne) SetCreatedBy(s string) *ProcessUpdateOne {
	puo.mutation.SetCreatedBy(s)
	return puo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (puo *ProcessUpdateOne) SetNillableCreatedBy(s *string) *ProcessUpdateOne {
	if s != nil {
		puo.SetCreatedBy(*s)
	}
	return puo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (puo *ProcessUpdateOne) ClearCreatedBy() *ProcessUpdateOne {
	puo.mutation.ClearCreatedBy()
	return puo
}

// SetUpdatedBy sets the "updated_by" field.
func (puo *ProcessUpdateOne) SetUpdatedBy(s string) *ProcessUpdateOne {
	puo.mutation.SetUpdatedBy(s)
	return puo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (puo *ProcessUpdateOne) SetNillableUpdatedBy(s *string) *ProcessUpdateOne {
	if s != nil {
		puo.SetUpdatedBy(*s)
	}
	return puo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (puo *ProcessUpdateOne) ClearUpdatedBy() *ProcessUpdateOne {
	puo.mutation.ClearUpdatedBy()
	return puo
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *ProcessUpdateOne) SetUpdatedAt(i int64) *ProcessUpdateOne {
	puo.mutation.ResetUpdatedAt()
	puo.mutation.SetUpdatedAt(i)
	return puo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (puo *ProcessUpdateOne) AddUpdatedAt(i int64) *ProcessUpdateOne {
	puo.mutation.AddUpdatedAt(i)
	return puo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (puo *ProcessUpdateOne) ClearUpdatedAt() *ProcessUpdateOne {
	puo.mutation.ClearUpdatedAt()
	return puo
}

// SetProcessKey sets the "process_key" field.
func (puo *ProcessUpdateOne) SetProcessKey(s string) *ProcessUpdateOne {
	puo.mutation.SetProcessKey(s)
	return puo
}

// SetNillableProcessKey sets the "process_key" field if the given value is not nil.
func (puo *ProcessUpdateOne) SetNillableProcessKey(s *string) *ProcessUpdateOne {
	if s != nil {
		puo.SetProcessKey(*s)
	}
	return puo
}

// SetInitiator sets the "initiator" field.
func (puo *ProcessUpdateOne) SetInitiator(s string) *ProcessUpdateOne {
	puo.mutation.SetInitiator(s)
	return puo
}

// SetNillableInitiator sets the "initiator" field if the given value is not nil.
func (puo *ProcessUpdateOne) SetNillableInitiator(s *string) *ProcessUpdateOne {
	if s != nil {
		puo.SetInitiator(*s)
	}
	return puo
}

// SetInitiatorDept sets the "initiator_dept" field.
func (puo *ProcessUpdateOne) SetInitiatorDept(s string) *ProcessUpdateOne {
	puo.mutation.SetInitiatorDept(s)
	return puo
}

// SetNillableInitiatorDept sets the "initiator_dept" field if the given value is not nil.
func (puo *ProcessUpdateOne) SetNillableInitiatorDept(s *string) *ProcessUpdateOne {
	if s != nil {
		puo.SetInitiatorDept(*s)
	}
	return puo
}

// ClearInitiatorDept clears the value of the "initiator_dept" field.
func (puo *ProcessUpdateOne) ClearInitiatorDept() *ProcessUpdateOne {
	puo.mutation.ClearInitiatorDept()
	return puo
}

// SetProcessCode sets the "process_code" field.
func (puo *ProcessUpdateOne) SetProcessCode(s string) *ProcessUpdateOne {
	puo.mutation.SetProcessCode(s)
	return puo
}

// SetNillableProcessCode sets the "process_code" field if the given value is not nil.
func (puo *ProcessUpdateOne) SetNillableProcessCode(s *string) *ProcessUpdateOne {
	if s != nil {
		puo.SetProcessCode(*s)
	}
	return puo
}

// SetVariables sets the "variables" field.
func (puo *ProcessUpdateOne) SetVariables(m map[string]interface{}) *ProcessUpdateOne {
	puo.mutation.SetVariables(m)
	return puo
}

// SetCurrentNode sets the "current_node" field.
func (puo *ProcessUpdateOne) SetCurrentNode(s string) *ProcessUpdateOne {
	puo.mutation.SetCurrentNode(s)
	return puo
}

// SetNillableCurrentNode sets the "current_node" field if the given value is not nil.
func (puo *ProcessUpdateOne) SetNillableCurrentNode(s *string) *ProcessUpdateOne {
	if s != nil {
		puo.SetCurrentNode(*s)
	}
	return puo
}

// ClearCurrentNode clears the value of the "current_node" field.
func (puo *ProcessUpdateOne) ClearCurrentNode() *ProcessUpdateOne {
	puo.mutation.ClearCurrentNode()
	return puo
}

// SetActiveNodes sets the "active_nodes" field.
func (puo *ProcessUpdateOne) SetActiveNodes(s []string) *ProcessUpdateOne {
	puo.mutation.SetActiveNodes(s)
	return puo
}

// AppendActiveNodes appends s to the "active_nodes" field.
func (puo *ProcessUpdateOne) AppendActiveNodes(s []string) *ProcessUpdateOne {
	puo.mutation.AppendActiveNodes(s)
	return puo
}

// ClearActiveNodes clears the value of the "active_nodes" field.
func (puo *ProcessUpdateOne) ClearActiveNodes() *ProcessUpdateOne {
	puo.mutation.ClearActiveNodes()
	return puo
}

// SetProcessSnapshot sets the "process_snapshot" field.
func (puo *ProcessUpdateOne) SetProcessSnapshot(m map[string]interface{}) *ProcessUpdateOne {
	puo.mutation.SetProcessSnapshot(m)
	return puo
}

// ClearProcessSnapshot clears the value of the "process_snapshot" field.
func (puo *ProcessUpdateOne) ClearProcessSnapshot() *ProcessUpdateOne {
	puo.mutation.ClearProcessSnapshot()
	return puo
}

// SetFormSnapshot sets the "form_snapshot" field.
func (puo *ProcessUpdateOne) SetFormSnapshot(m map[string]interface{}) *ProcessUpdateOne {
	puo.mutation.SetFormSnapshot(m)
	return puo
}

// ClearFormSnapshot clears the value of the "form_snapshot" field.
func (puo *ProcessUpdateOne) ClearFormSnapshot() *ProcessUpdateOne {
	puo.mutation.ClearFormSnapshot()
	return puo
}

// SetUrgeCount sets the "urge_count" field.
func (puo *ProcessUpdateOne) SetUrgeCount(i int) *ProcessUpdateOne {
	puo.mutation.ResetUrgeCount()
	puo.mutation.SetUrgeCount(i)
	return puo
}

// SetNillableUrgeCount sets the "urge_count" field if the given value is not nil.
func (puo *ProcessUpdateOne) SetNillableUrgeCount(i *int) *ProcessUpdateOne {
	if i != nil {
		puo.SetUrgeCount(*i)
	}
	return puo
}

// AddUrgeCount adds i to the "urge_count" field.
func (puo *ProcessUpdateOne) AddUrgeCount(i int) *ProcessUpdateOne {
	puo.mutation.AddUrgeCount(i)
	return puo
}

// Mutation returns the ProcessMutation object of the builder.
func (puo *ProcessUpdateOne) Mutation() *ProcessMutation {
	return puo.mutation
}

// Where appends a list predicates to the ProcessUpdate builder.
func (puo *ProcessUpdateOne) Where(ps ...predicate.Process) *ProcessUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *ProcessUpdateOne) Select(field string, fields ...string) *ProcessUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Process entity.
func (puo *ProcessUpdateOne) Save(ctx context.Context) (*Process, error) {
	puo.defaults()
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ProcessUpdateOne) SaveX(ctx context.Context) *Process {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *ProcessUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ProcessUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *ProcessUpdateOne) defaults() {
	if _, ok := puo.mutation.UpdatedAt(); !ok && !puo.mutation.UpdatedAtCleared() {
		v := process.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}
}

func (puo *ProcessUpdateOne) sqlSave(ctx context.Context) (_node *Process, err error) {
	_spec := sqlgraph.NewUpdateSpec(process.Table, process.Columns, sqlgraph.NewFieldSpec(process.FieldID, field.TypeString))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Process.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, process.FieldID)
		for _, f := range fields {
			if !process.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != process.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Status(); ok {
		_spec.SetField(process.FieldStatus, field.TypeString, value)
	}
	if puo.mutation.StatusCleared() {
		_spec.ClearField(process.FieldStatus, field.TypeString)
	}
	if value, ok := puo.mutation.ProcessID(); ok {
		_spec.SetField(process.FieldProcessID, field.TypeString, value)
	}
	if value, ok := puo.mutation.TemplateID(); ok {
		_spec.SetField(process.FieldTemplateID, field.TypeString, value)
	}
	if value, ok := puo.mutation.BusinessKey(); ok {
		_spec.SetField(process.FieldBusinessKey, field.TypeString, value)
	}
	if value, ok := puo.mutation.FormCode(); ok {
		_spec.SetField(process.FieldFormCode, field.TypeString, value)
	}
	if value, ok := puo.mutation.FormVersion(); ok {
		_spec.SetField(process.FieldFormVersion, field.TypeString, value)
	}
	if puo.mutation.FormVersionCleared() {
		_spec.ClearField(process.FieldFormVersion, field.TypeString)
	}
	if value, ok := puo.mutation.FormConfig(); ok {
		_spec.SetField(process.FieldFormConfig, field.TypeJSON, value)
	}
	if puo.mutation.FormConfigCleared() {
		_spec.ClearField(process.FieldFormConfig, field.TypeJSON)
	}
	if value, ok := puo.mutation.FormPermissions(); ok {
		_spec.SetField(process.FieldFormPermissions, field.TypeJSON, value)
	}
	if puo.mutation.FormPermissionsCleared() {
		_spec.ClearField(process.FieldFormPermissions, field.TypeJSON)
	}
	if value, ok := puo.mutation.FieldPermissions(); ok {
		_spec.SetField(process.FieldFieldPermissions, field.TypeJSON, value)
	}
	if puo.mutation.FieldPermissionsCleared() {
		_spec.ClearField(process.FieldFieldPermissions, field.TypeJSON)
	}
	if value, ok := puo.mutation.BusinessTags(); ok {
		_spec.SetField(process.FieldBusinessTags, field.TypeJSON, value)
	}
	if value, ok := puo.mutation.AppendedBusinessTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, process.FieldBusinessTags, value)
		})
	}
	if puo.mutation.BusinessTagsCleared() {
		_spec.ClearField(process.FieldBusinessTags, field.TypeJSON)
	}
	if value, ok := puo.mutation.ModuleCode(); ok {
		_spec.SetField(process.FieldModuleCode, field.TypeString, value)
	}
	if value, ok := puo.mutation.Category(); ok {
		_spec.SetField(process.FieldCategory, field.TypeString, value)
	}
	if puo.mutation.CategoryCleared() {
		_spec.ClearField(process.FieldCategory, field.TypeString)
	}
	if value, ok := puo.mutation.FlowStatus(); ok {
		_spec.SetField(process.FieldFlowStatus, field.TypeString, value)
	}
	if puo.mutation.FlowStatusCleared() {
		_spec.ClearField(process.FieldFlowStatus, field.TypeString)
	}
	if value, ok := puo.mutation.FlowVariables(); ok {
		_spec.SetField(process.FieldFlowVariables, field.TypeJSON, value)
	}
	if puo.mutation.FlowVariablesCleared() {
		_spec.ClearField(process.FieldFlowVariables, field.TypeJSON)
	}
	if value, ok := puo.mutation.IsDraft(); ok {
		_spec.SetField(process.FieldIsDraft, field.TypeBool, value)
	}
	if value, ok := puo.mutation.IsTerminated(); ok {
		_spec.SetField(process.FieldIsTerminated, field.TypeBool, value)
	}
	if value, ok := puo.mutation.IsSuspended(); ok {
		_spec.SetField(process.FieldIsSuspended, field.TypeBool, value)
	}
	if value, ok := puo.mutation.SuspendReason(); ok {
		_spec.SetField(process.FieldSuspendReason, field.TypeString, value)
	}
	if puo.mutation.SuspendReasonCleared() {
		_spec.ClearField(process.FieldSuspendReason, field.TypeString)
	}
	if value, ok := puo.mutation.StartTime(); ok {
		_spec.SetField(process.FieldStartTime, field.TypeInt64, value)
	}
	if value, ok := puo.mutation.AddedStartTime(); ok {
		_spec.AddField(process.FieldStartTime, field.TypeInt64, value)
	}
	if value, ok := puo.mutation.EndTime(); ok {
		_spec.SetField(process.FieldEndTime, field.TypeInt64, value)
	}
	if value, ok := puo.mutation.AddedEndTime(); ok {
		_spec.AddField(process.FieldEndTime, field.TypeInt64, value)
	}
	if puo.mutation.EndTimeCleared() {
		_spec.ClearField(process.FieldEndTime, field.TypeInt64)
	}
	if value, ok := puo.mutation.DueTime(); ok {
		_spec.SetField(process.FieldDueTime, field.TypeInt64, value)
	}
	if value, ok := puo.mutation.AddedDueTime(); ok {
		_spec.AddField(process.FieldDueTime, field.TypeInt64, value)
	}
	if puo.mutation.DueTimeCleared() {
		_spec.ClearField(process.FieldDueTime, field.TypeInt64)
	}
	if value, ok := puo.mutation.Duration(); ok {
		_spec.SetField(process.FieldDuration, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedDuration(); ok {
		_spec.AddField(process.FieldDuration, field.TypeInt, value)
	}
	if puo.mutation.DurationCleared() {
		_spec.ClearField(process.FieldDuration, field.TypeInt)
	}
	if value, ok := puo.mutation.Priority(); ok {
		_spec.SetField(process.FieldPriority, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedPriority(); ok {
		_spec.AddField(process.FieldPriority, field.TypeInt, value)
	}
	if value, ok := puo.mutation.IsTimeout(); ok {
		_spec.SetField(process.FieldIsTimeout, field.TypeBool, value)
	}
	if value, ok := puo.mutation.ReminderCount(); ok {
		_spec.SetField(process.FieldReminderCount, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedReminderCount(); ok {
		_spec.AddField(process.FieldReminderCount, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AllowCancel(); ok {
		_spec.SetField(process.FieldAllowCancel, field.TypeBool, value)
	}
	if value, ok := puo.mutation.AllowUrge(); ok {
		_spec.SetField(process.FieldAllowUrge, field.TypeBool, value)
	}
	if value, ok := puo.mutation.AllowDelegate(); ok {
		_spec.SetField(process.FieldAllowDelegate, field.TypeBool, value)
	}
	if value, ok := puo.mutation.AllowTransfer(); ok {
		_spec.SetField(process.FieldAllowTransfer, field.TypeBool, value)
	}
	if value, ok := puo.mutation.IsDraftEnabled(); ok {
		_spec.SetField(process.FieldIsDraftEnabled, field.TypeBool, value)
	}
	if value, ok := puo.mutation.IsAutoStart(); ok {
		_spec.SetField(process.FieldIsAutoStart, field.TypeBool, value)
	}
	if value, ok := puo.mutation.StrictMode(); ok {
		_spec.SetField(process.FieldStrictMode, field.TypeBool, value)
	}
	if value, ok := puo.mutation.Extras(); ok {
		_spec.SetField(process.FieldExtras, field.TypeJSON, value)
	}
	if puo.mutation.ExtrasCleared() {
		_spec.ClearField(process.FieldExtras, field.TypeJSON)
	}
	if value, ok := puo.mutation.TenantID(); ok {
		_spec.SetField(process.FieldTenantID, field.TypeString, value)
	}
	if puo.mutation.TenantIDCleared() {
		_spec.ClearField(process.FieldTenantID, field.TypeString)
	}
	if value, ok := puo.mutation.CreatedBy(); ok {
		_spec.SetField(process.FieldCreatedBy, field.TypeString, value)
	}
	if puo.mutation.CreatedByCleared() {
		_spec.ClearField(process.FieldCreatedBy, field.TypeString)
	}
	if value, ok := puo.mutation.UpdatedBy(); ok {
		_spec.SetField(process.FieldUpdatedBy, field.TypeString, value)
	}
	if puo.mutation.UpdatedByCleared() {
		_spec.ClearField(process.FieldUpdatedBy, field.TypeString)
	}
	if puo.mutation.CreatedAtCleared() {
		_spec.ClearField(process.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.SetField(process.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := puo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(process.FieldUpdatedAt, field.TypeInt64, value)
	}
	if puo.mutation.UpdatedAtCleared() {
		_spec.ClearField(process.FieldUpdatedAt, field.TypeInt64)
	}
	if value, ok := puo.mutation.ProcessKey(); ok {
		_spec.SetField(process.FieldProcessKey, field.TypeString, value)
	}
	if value, ok := puo.mutation.Initiator(); ok {
		_spec.SetField(process.FieldInitiator, field.TypeString, value)
	}
	if value, ok := puo.mutation.InitiatorDept(); ok {
		_spec.SetField(process.FieldInitiatorDept, field.TypeString, value)
	}
	if puo.mutation.InitiatorDeptCleared() {
		_spec.ClearField(process.FieldInitiatorDept, field.TypeString)
	}
	if value, ok := puo.mutation.ProcessCode(); ok {
		_spec.SetField(process.FieldProcessCode, field.TypeString, value)
	}
	if value, ok := puo.mutation.Variables(); ok {
		_spec.SetField(process.FieldVariables, field.TypeJSON, value)
	}
	if value, ok := puo.mutation.CurrentNode(); ok {
		_spec.SetField(process.FieldCurrentNode, field.TypeString, value)
	}
	if puo.mutation.CurrentNodeCleared() {
		_spec.ClearField(process.FieldCurrentNode, field.TypeString)
	}
	if value, ok := puo.mutation.ActiveNodes(); ok {
		_spec.SetField(process.FieldActiveNodes, field.TypeJSON, value)
	}
	if value, ok := puo.mutation.AppendedActiveNodes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, process.FieldActiveNodes, value)
		})
	}
	if puo.mutation.ActiveNodesCleared() {
		_spec.ClearField(process.FieldActiveNodes, field.TypeJSON)
	}
	if value, ok := puo.mutation.ProcessSnapshot(); ok {
		_spec.SetField(process.FieldProcessSnapshot, field.TypeJSON, value)
	}
	if puo.mutation.ProcessSnapshotCleared() {
		_spec.ClearField(process.FieldProcessSnapshot, field.TypeJSON)
	}
	if value, ok := puo.mutation.FormSnapshot(); ok {
		_spec.SetField(process.FieldFormSnapshot, field.TypeJSON, value)
	}
	if puo.mutation.FormSnapshotCleared() {
		_spec.ClearField(process.FieldFormSnapshot, field.TypeJSON)
	}
	if value, ok := puo.mutation.UrgeCount(); ok {
		_spec.SetField(process.FieldUrgeCount, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedUrgeCount(); ok {
		_spec.AddField(process.FieldUrgeCount, field.TypeInt, value)
	}
	_node = &Process{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{process.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
