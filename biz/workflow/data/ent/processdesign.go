// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"ncobase/workflow/data/ent/processdesign"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ProcessDesign is the model entity for the ProcessDesign schema.
type ProcessDesign struct {
	config `json:"-"`
	// ID of the ent.
	// primary key
	ID string `json:"id,omitempty"`
	// Version
	Version string `json:"version,omitempty"`
	// is disabled
	Disabled bool `json:"disabled,omitempty"`
	// Extend properties
	Extras map[string]interface{} `json:"extras,omitempty"`
	// space id, e.g. space id, organization id, store id
	SpaceID string `json:"space_id,omitempty"`
	// id of the creator
	CreatedBy string `json:"created_by,omitempty"`
	// id of the last updater
	UpdatedBy string `json:"updated_by,omitempty"`
	// created at
	CreatedAt int64 `json:"created_at,omitempty"`
	// updated at
	UpdatedAt int64 `json:"updated_at,omitempty"`
	// Template ID
	TemplateID string `json:"template_id,omitempty"`
	// Process graph data
	GraphData map[string]interface{} `json:"graph_data,omitempty"`
	// Node layout positions
	NodeLayouts map[string]interface{} `json:"node_layouts,omitempty"`
	// Process design properties
	Properties map[string]interface{} `json:"properties,omitempty"`
	// Process validation rules
	ValidationRules map[string]interface{} `json:"validation_rules,omitempty"`
	// Whether is draft
	IsDraft bool `json:"is_draft,omitempty"`
	// Source version
	SourceVersion string `json:"source_version,omitempty"`
	selectValues  sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProcessDesign) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case processdesign.FieldExtras, processdesign.FieldGraphData, processdesign.FieldNodeLayouts, processdesign.FieldProperties, processdesign.FieldValidationRules:
			values[i] = new([]byte)
		case processdesign.FieldDisabled, processdesign.FieldIsDraft:
			values[i] = new(sql.NullBool)
		case processdesign.FieldCreatedAt, processdesign.FieldUpdatedAt:
			values[i] = new(sql.NullInt64)
		case processdesign.FieldID, processdesign.FieldVersion, processdesign.FieldSpaceID, processdesign.FieldCreatedBy, processdesign.FieldUpdatedBy, processdesign.FieldTemplateID, processdesign.FieldSourceVersion:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProcessDesign fields.
func (pd *ProcessDesign) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case processdesign.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				pd.ID = value.String
			}
		case processdesign.FieldVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				pd.Version = value.String
			}
		case processdesign.FieldDisabled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field disabled", values[i])
			} else if value.Valid {
				pd.Disabled = value.Bool
			}
		case processdesign.FieldExtras:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field extras", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pd.Extras); err != nil {
					return fmt.Errorf("unmarshal field extras: %w", err)
				}
			}
		case processdesign.FieldSpaceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field space_id", values[i])
			} else if value.Valid {
				pd.SpaceID = value.String
			}
		case processdesign.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				pd.CreatedBy = value.String
			}
		case processdesign.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				pd.UpdatedBy = value.String
			}
		case processdesign.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pd.CreatedAt = value.Int64
			}
		case processdesign.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pd.UpdatedAt = value.Int64
			}
		case processdesign.FieldTemplateID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field template_id", values[i])
			} else if value.Valid {
				pd.TemplateID = value.String
			}
		case processdesign.FieldGraphData:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field graph_data", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pd.GraphData); err != nil {
					return fmt.Errorf("unmarshal field graph_data: %w", err)
				}
			}
		case processdesign.FieldNodeLayouts:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field node_layouts", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pd.NodeLayouts); err != nil {
					return fmt.Errorf("unmarshal field node_layouts: %w", err)
				}
			}
		case processdesign.FieldProperties:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field properties", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pd.Properties); err != nil {
					return fmt.Errorf("unmarshal field properties: %w", err)
				}
			}
		case processdesign.FieldValidationRules:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field validation_rules", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pd.ValidationRules); err != nil {
					return fmt.Errorf("unmarshal field validation_rules: %w", err)
				}
			}
		case processdesign.FieldIsDraft:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_draft", values[i])
			} else if value.Valid {
				pd.IsDraft = value.Bool
			}
		case processdesign.FieldSourceVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field source_version", values[i])
			} else if value.Valid {
				pd.SourceVersion = value.String
			}
		default:
			pd.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ProcessDesign.
// This includes values selected through modifiers, order, etc.
func (pd *ProcessDesign) Value(name string) (ent.Value, error) {
	return pd.selectValues.Get(name)
}

// Update returns a builder for updating this ProcessDesign.
// Note that you need to call ProcessDesign.Unwrap() before calling this method if this ProcessDesign
// was returned from a transaction, and the transaction was committed or rolled back.
func (pd *ProcessDesign) Update() *ProcessDesignUpdateOne {
	return NewProcessDesignClient(pd.config).UpdateOne(pd)
}

// Unwrap unwraps the ProcessDesign entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pd *ProcessDesign) Unwrap() *ProcessDesign {
	_tx, ok := pd.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProcessDesign is not a transactional entity")
	}
	pd.config.driver = _tx.drv
	return pd
}

// String implements the fmt.Stringer.
func (pd *ProcessDesign) String() string {
	var builder strings.Builder
	builder.WriteString("ProcessDesign(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pd.ID))
	builder.WriteString("version=")
	builder.WriteString(pd.Version)
	builder.WriteString(", ")
	builder.WriteString("disabled=")
	builder.WriteString(fmt.Sprintf("%v", pd.Disabled))
	builder.WriteString(", ")
	builder.WriteString("extras=")
	builder.WriteString(fmt.Sprintf("%v", pd.Extras))
	builder.WriteString(", ")
	builder.WriteString("space_id=")
	builder.WriteString(pd.SpaceID)
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(pd.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(pd.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", pd.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", pd.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("template_id=")
	builder.WriteString(pd.TemplateID)
	builder.WriteString(", ")
	builder.WriteString("graph_data=")
	builder.WriteString(fmt.Sprintf("%v", pd.GraphData))
	builder.WriteString(", ")
	builder.WriteString("node_layouts=")
	builder.WriteString(fmt.Sprintf("%v", pd.NodeLayouts))
	builder.WriteString(", ")
	builder.WriteString("properties=")
	builder.WriteString(fmt.Sprintf("%v", pd.Properties))
	builder.WriteString(", ")
	builder.WriteString("validation_rules=")
	builder.WriteString(fmt.Sprintf("%v", pd.ValidationRules))
	builder.WriteString(", ")
	builder.WriteString("is_draft=")
	builder.WriteString(fmt.Sprintf("%v", pd.IsDraft))
	builder.WriteString(", ")
	builder.WriteString("source_version=")
	builder.WriteString(pd.SourceVersion)
	builder.WriteByte(')')
	return builder.String()
}

// ProcessDesigns is a parsable slice of ProcessDesign.
type ProcessDesigns []*ProcessDesign
