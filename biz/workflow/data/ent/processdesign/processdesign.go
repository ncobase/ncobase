// Code generated by ent, DO NOT EDIT.

package processdesign

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the processdesign type in the database.
	Label = "process_design"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldVersion holds the string denoting the version field in the database.
	FieldVersion = "version"
	// FieldDisabled holds the string denoting the disabled field in the database.
	FieldDisabled = "disabled"
	// FieldExtras holds the string denoting the extras field in the database.
	FieldExtras = "extras"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldTemplateID holds the string denoting the template_id field in the database.
	FieldTemplateID = "template_id"
	// FieldGraphData holds the string denoting the graph_data field in the database.
	FieldGraphData = "graph_data"
	// FieldNodeLayouts holds the string denoting the node_layouts field in the database.
	FieldNodeLayouts = "node_layouts"
	// FieldProperties holds the string denoting the properties field in the database.
	FieldProperties = "properties"
	// FieldValidationRules holds the string denoting the validation_rules field in the database.
	FieldValidationRules = "validation_rules"
	// FieldIsDraft holds the string denoting the is_draft field in the database.
	FieldIsDraft = "is_draft"
	// FieldSourceVersion holds the string denoting the source_version field in the database.
	FieldSourceVersion = "source_version"
	// Table holds the table name of the processdesign in the database.
	Table = "ncse_flow_process_design"
)

// Columns holds all SQL columns for processdesign fields.
var Columns = []string{
	FieldID,
	FieldVersion,
	FieldDisabled,
	FieldExtras,
	FieldTenantID,
	FieldCreatedBy,
	FieldUpdatedBy,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldTemplateID,
	FieldGraphData,
	FieldNodeLayouts,
	FieldProperties,
	FieldValidationRules,
	FieldIsDraft,
	FieldSourceVersion,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultDisabled holds the default value on creation for the "disabled" field.
	DefaultDisabled bool
	// DefaultExtras holds the default value on creation for the "extras" field.
	DefaultExtras map[string]interface{}
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() int64
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() int64
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() int64
	// DefaultIsDraft holds the default value on creation for the "is_draft" field.
	DefaultIsDraft bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)

// OrderOption defines the ordering options for the ProcessDesign queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByVersion orders the results by the version field.
func ByVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVersion, opts...).ToFunc()
}

// ByDisabled orders the results by the disabled field.
func ByDisabled(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisabled, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the updated_by field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByTemplateID orders the results by the template_id field.
func ByTemplateID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTemplateID, opts...).ToFunc()
}

// ByIsDraft orders the results by the is_draft field.
func ByIsDraft(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsDraft, opts...).ToFunc()
}

// BySourceVersion orders the results by the source_version field.
func BySourceVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSourceVersion, opts...).ToFunc()
}
