// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/workflow/data/ent/processdesign"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProcessDesignCreate is the builder for creating a ProcessDesign entity.
type ProcessDesignCreate struct {
	config
	mutation *ProcessDesignMutation
	hooks    []Hook
}

// SetVersion sets the "version" field.
func (pdc *ProcessDesignCreate) SetVersion(s string) *ProcessDesignCreate {
	pdc.mutation.SetVersion(s)
	return pdc
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (pdc *ProcessDesignCreate) SetNillableVersion(s *string) *ProcessDesignCreate {
	if s != nil {
		pdc.SetVersion(*s)
	}
	return pdc
}

// SetDisabled sets the "disabled" field.
func (pdc *ProcessDesignCreate) SetDisabled(b bool) *ProcessDesignCreate {
	pdc.mutation.SetDisabled(b)
	return pdc
}

// SetNillableDisabled sets the "disabled" field if the given value is not nil.
func (pdc *ProcessDesignCreate) SetNillableDisabled(b *bool) *ProcessDesignCreate {
	if b != nil {
		pdc.SetDisabled(*b)
	}
	return pdc
}

// SetExtras sets the "extras" field.
func (pdc *ProcessDesignCreate) SetExtras(m map[string]interface{}) *ProcessDesignCreate {
	pdc.mutation.SetExtras(m)
	return pdc
}

// SetSpaceID sets the "space_id" field.
func (pdc *ProcessDesignCreate) SetSpaceID(s string) *ProcessDesignCreate {
	pdc.mutation.SetSpaceID(s)
	return pdc
}

// SetNillableSpaceID sets the "space_id" field if the given value is not nil.
func (pdc *ProcessDesignCreate) SetNillableSpaceID(s *string) *ProcessDesignCreate {
	if s != nil {
		pdc.SetSpaceID(*s)
	}
	return pdc
}

// SetCreatedBy sets the "created_by" field.
func (pdc *ProcessDesignCreate) SetCreatedBy(s string) *ProcessDesignCreate {
	pdc.mutation.SetCreatedBy(s)
	return pdc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (pdc *ProcessDesignCreate) SetNillableCreatedBy(s *string) *ProcessDesignCreate {
	if s != nil {
		pdc.SetCreatedBy(*s)
	}
	return pdc
}

// SetUpdatedBy sets the "updated_by" field.
func (pdc *ProcessDesignCreate) SetUpdatedBy(s string) *ProcessDesignCreate {
	pdc.mutation.SetUpdatedBy(s)
	return pdc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (pdc *ProcessDesignCreate) SetNillableUpdatedBy(s *string) *ProcessDesignCreate {
	if s != nil {
		pdc.SetUpdatedBy(*s)
	}
	return pdc
}

// SetCreatedAt sets the "created_at" field.
func (pdc *ProcessDesignCreate) SetCreatedAt(i int64) *ProcessDesignCreate {
	pdc.mutation.SetCreatedAt(i)
	return pdc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pdc *ProcessDesignCreate) SetNillableCreatedAt(i *int64) *ProcessDesignCreate {
	if i != nil {
		pdc.SetCreatedAt(*i)
	}
	return pdc
}

// SetUpdatedAt sets the "updated_at" field.
func (pdc *ProcessDesignCreate) SetUpdatedAt(i int64) *ProcessDesignCreate {
	pdc.mutation.SetUpdatedAt(i)
	return pdc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pdc *ProcessDesignCreate) SetNillableUpdatedAt(i *int64) *ProcessDesignCreate {
	if i != nil {
		pdc.SetUpdatedAt(*i)
	}
	return pdc
}

// SetTemplateID sets the "template_id" field.
func (pdc *ProcessDesignCreate) SetTemplateID(s string) *ProcessDesignCreate {
	pdc.mutation.SetTemplateID(s)
	return pdc
}

// SetGraphData sets the "graph_data" field.
func (pdc *ProcessDesignCreate) SetGraphData(m map[string]interface{}) *ProcessDesignCreate {
	pdc.mutation.SetGraphData(m)
	return pdc
}

// SetNodeLayouts sets the "node_layouts" field.
func (pdc *ProcessDesignCreate) SetNodeLayouts(m map[string]interface{}) *ProcessDesignCreate {
	pdc.mutation.SetNodeLayouts(m)
	return pdc
}

// SetProperties sets the "properties" field.
func (pdc *ProcessDesignCreate) SetProperties(m map[string]interface{}) *ProcessDesignCreate {
	pdc.mutation.SetProperties(m)
	return pdc
}

// SetValidationRules sets the "validation_rules" field.
func (pdc *ProcessDesignCreate) SetValidationRules(m map[string]interface{}) *ProcessDesignCreate {
	pdc.mutation.SetValidationRules(m)
	return pdc
}

// SetIsDraft sets the "is_draft" field.
func (pdc *ProcessDesignCreate) SetIsDraft(b bool) *ProcessDesignCreate {
	pdc.mutation.SetIsDraft(b)
	return pdc
}

// SetNillableIsDraft sets the "is_draft" field if the given value is not nil.
func (pdc *ProcessDesignCreate) SetNillableIsDraft(b *bool) *ProcessDesignCreate {
	if b != nil {
		pdc.SetIsDraft(*b)
	}
	return pdc
}

// SetSourceVersion sets the "source_version" field.
func (pdc *ProcessDesignCreate) SetSourceVersion(s string) *ProcessDesignCreate {
	pdc.mutation.SetSourceVersion(s)
	return pdc
}

// SetNillableSourceVersion sets the "source_version" field if the given value is not nil.
func (pdc *ProcessDesignCreate) SetNillableSourceVersion(s *string) *ProcessDesignCreate {
	if s != nil {
		pdc.SetSourceVersion(*s)
	}
	return pdc
}

// SetID sets the "id" field.
func (pdc *ProcessDesignCreate) SetID(s string) *ProcessDesignCreate {
	pdc.mutation.SetID(s)
	return pdc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pdc *ProcessDesignCreate) SetNillableID(s *string) *ProcessDesignCreate {
	if s != nil {
		pdc.SetID(*s)
	}
	return pdc
}

// Mutation returns the ProcessDesignMutation object of the builder.
func (pdc *ProcessDesignCreate) Mutation() *ProcessDesignMutation {
	return pdc.mutation
}

// Save creates the ProcessDesign in the database.
func (pdc *ProcessDesignCreate) Save(ctx context.Context) (*ProcessDesign, error) {
	pdc.defaults()
	return withHooks(ctx, pdc.sqlSave, pdc.mutation, pdc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pdc *ProcessDesignCreate) SaveX(ctx context.Context) *ProcessDesign {
	v, err := pdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pdc *ProcessDesignCreate) Exec(ctx context.Context) error {
	_, err := pdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pdc *ProcessDesignCreate) ExecX(ctx context.Context) {
	if err := pdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pdc *ProcessDesignCreate) defaults() {
	if _, ok := pdc.mutation.Disabled(); !ok {
		v := processdesign.DefaultDisabled
		pdc.mutation.SetDisabled(v)
	}
	if _, ok := pdc.mutation.Extras(); !ok {
		v := processdesign.DefaultExtras
		pdc.mutation.SetExtras(v)
	}
	if _, ok := pdc.mutation.CreatedAt(); !ok {
		v := processdesign.DefaultCreatedAt()
		pdc.mutation.SetCreatedAt(v)
	}
	if _, ok := pdc.mutation.UpdatedAt(); !ok {
		v := processdesign.DefaultUpdatedAt()
		pdc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pdc.mutation.IsDraft(); !ok {
		v := processdesign.DefaultIsDraft
		pdc.mutation.SetIsDraft(v)
	}
	if _, ok := pdc.mutation.ID(); !ok {
		v := processdesign.DefaultID()
		pdc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pdc *ProcessDesignCreate) check() error {
	if _, ok := pdc.mutation.TemplateID(); !ok {
		return &ValidationError{Name: "template_id", err: errors.New(`ent: missing required field "ProcessDesign.template_id"`)}
	}
	if _, ok := pdc.mutation.IsDraft(); !ok {
		return &ValidationError{Name: "is_draft", err: errors.New(`ent: missing required field "ProcessDesign.is_draft"`)}
	}
	if v, ok := pdc.mutation.ID(); ok {
		if err := processdesign.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "ProcessDesign.id": %w`, err)}
		}
	}
	return nil
}

func (pdc *ProcessDesignCreate) sqlSave(ctx context.Context) (*ProcessDesign, error) {
	if err := pdc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected ProcessDesign.ID type: %T", _spec.ID.Value)
		}
	}
	pdc.mutation.id = &_node.ID
	pdc.mutation.done = true
	return _node, nil
}

func (pdc *ProcessDesignCreate) createSpec() (*ProcessDesign, *sqlgraph.CreateSpec) {
	var (
		_node = &ProcessDesign{config: pdc.config}
		_spec = sqlgraph.NewCreateSpec(processdesign.Table, sqlgraph.NewFieldSpec(processdesign.FieldID, field.TypeString))
	)
	if id, ok := pdc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pdc.mutation.Version(); ok {
		_spec.SetField(processdesign.FieldVersion, field.TypeString, value)
		_node.Version = value
	}
	if value, ok := pdc.mutation.Disabled(); ok {
		_spec.SetField(processdesign.FieldDisabled, field.TypeBool, value)
		_node.Disabled = value
	}
	if value, ok := pdc.mutation.Extras(); ok {
		_spec.SetField(processdesign.FieldExtras, field.TypeJSON, value)
		_node.Extras = value
	}
	if value, ok := pdc.mutation.SpaceID(); ok {
		_spec.SetField(processdesign.FieldSpaceID, field.TypeString, value)
		_node.SpaceID = value
	}
	if value, ok := pdc.mutation.CreatedBy(); ok {
		_spec.SetField(processdesign.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := pdc.mutation.UpdatedBy(); ok {
		_spec.SetField(processdesign.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := pdc.mutation.CreatedAt(); ok {
		_spec.SetField(processdesign.FieldCreatedAt, field.TypeInt64, value)
		_node.CreatedAt = value
	}
	if value, ok := pdc.mutation.UpdatedAt(); ok {
		_spec.SetField(processdesign.FieldUpdatedAt, field.TypeInt64, value)
		_node.UpdatedAt = value
	}
	if value, ok := pdc.mutation.TemplateID(); ok {
		_spec.SetField(processdesign.FieldTemplateID, field.TypeString, value)
		_node.TemplateID = value
	}
	if value, ok := pdc.mutation.GraphData(); ok {
		_spec.SetField(processdesign.FieldGraphData, field.TypeJSON, value)
		_node.GraphData = value
	}
	if value, ok := pdc.mutation.NodeLayouts(); ok {
		_spec.SetField(processdesign.FieldNodeLayouts, field.TypeJSON, value)
		_node.NodeLayouts = value
	}
	if value, ok := pdc.mutation.Properties(); ok {
		_spec.SetField(processdesign.FieldProperties, field.TypeJSON, value)
		_node.Properties = value
	}
	if value, ok := pdc.mutation.ValidationRules(); ok {
		_spec.SetField(processdesign.FieldValidationRules, field.TypeJSON, value)
		_node.ValidationRules = value
	}
	if value, ok := pdc.mutation.IsDraft(); ok {
		_spec.SetField(processdesign.FieldIsDraft, field.TypeBool, value)
		_node.IsDraft = value
	}
	if value, ok := pdc.mutation.SourceVersion(); ok {
		_spec.SetField(processdesign.FieldSourceVersion, field.TypeString, value)
		_node.SourceVersion = value
	}
	return _node, _spec
}

// ProcessDesignCreateBulk is the builder for creating many ProcessDesign entities in bulk.
type ProcessDesignCreateBulk struct {
	config
	err      error
	builders []*ProcessDesignCreate
}

// Save creates the ProcessDesign entities in the database.
func (pdcb *ProcessDesignCreateBulk) Save(ctx context.Context) ([]*ProcessDesign, error) {
	if pdcb.err != nil {
		return nil, pdcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pdcb.builders))
	nodes := make([]*ProcessDesign, len(pdcb.builders))
	mutators := make([]Mutator, len(pdcb.builders))
	for i := range pdcb.builders {
		func(i int, root context.Context) {
			builder := pdcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProcessDesignMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pdcb *ProcessDesignCreateBulk) SaveX(ctx context.Context) []*ProcessDesign {
	v, err := pdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pdcb *ProcessDesignCreateBulk) Exec(ctx context.Context) error {
	_, err := pdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pdcb *ProcessDesignCreateBulk) ExecX(ctx context.Context) {
	if err := pdcb.Exec(ctx); err != nil {
		panic(err)
	}
}
