// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/workflow/data/ent/predicate"
	"ncobase/workflow/data/ent/processdesign"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProcessDesignUpdate is the builder for updating ProcessDesign entities.
type ProcessDesignUpdate struct {
	config
	hooks    []Hook
	mutation *ProcessDesignMutation
}

// Where appends a list predicates to the ProcessDesignUpdate builder.
func (pdu *ProcessDesignUpdate) Where(ps ...predicate.ProcessDesign) *ProcessDesignUpdate {
	pdu.mutation.Where(ps...)
	return pdu
}

// SetVersion sets the "version" field.
func (pdu *ProcessDesignUpdate) SetVersion(s string) *ProcessDesignUpdate {
	pdu.mutation.SetVersion(s)
	return pdu
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (pdu *ProcessDesignUpdate) SetNillableVersion(s *string) *ProcessDesignUpdate {
	if s != nil {
		pdu.SetVersion(*s)
	}
	return pdu
}

// ClearVersion clears the value of the "version" field.
func (pdu *ProcessDesignUpdate) ClearVersion() *ProcessDesignUpdate {
	pdu.mutation.ClearVersion()
	return pdu
}

// SetDisabled sets the "disabled" field.
func (pdu *ProcessDesignUpdate) SetDisabled(b bool) *ProcessDesignUpdate {
	pdu.mutation.SetDisabled(b)
	return pdu
}

// SetNillableDisabled sets the "disabled" field if the given value is not nil.
func (pdu *ProcessDesignUpdate) SetNillableDisabled(b *bool) *ProcessDesignUpdate {
	if b != nil {
		pdu.SetDisabled(*b)
	}
	return pdu
}

// ClearDisabled clears the value of the "disabled" field.
func (pdu *ProcessDesignUpdate) ClearDisabled() *ProcessDesignUpdate {
	pdu.mutation.ClearDisabled()
	return pdu
}

// SetExtras sets the "extras" field.
func (pdu *ProcessDesignUpdate) SetExtras(m map[string]interface{}) *ProcessDesignUpdate {
	pdu.mutation.SetExtras(m)
	return pdu
}

// ClearExtras clears the value of the "extras" field.
func (pdu *ProcessDesignUpdate) ClearExtras() *ProcessDesignUpdate {
	pdu.mutation.ClearExtras()
	return pdu
}

// SetSpaceID sets the "space_id" field.
func (pdu *ProcessDesignUpdate) SetSpaceID(s string) *ProcessDesignUpdate {
	pdu.mutation.SetSpaceID(s)
	return pdu
}

// SetNillableSpaceID sets the "space_id" field if the given value is not nil.
func (pdu *ProcessDesignUpdate) SetNillableSpaceID(s *string) *ProcessDesignUpdate {
	if s != nil {
		pdu.SetSpaceID(*s)
	}
	return pdu
}

// ClearSpaceID clears the value of the "space_id" field.
func (pdu *ProcessDesignUpdate) ClearSpaceID() *ProcessDesignUpdate {
	pdu.mutation.ClearSpaceID()
	return pdu
}

// SetCreatedBy sets the "created_by" field.
func (pdu *ProcessDesignUpdate) SetCreatedBy(s string) *ProcessDesignUpdate {
	pdu.mutation.SetCreatedBy(s)
	return pdu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (pdu *ProcessDesignUpdate) SetNillableCreatedBy(s *string) *ProcessDesignUpdate {
	if s != nil {
		pdu.SetCreatedBy(*s)
	}
	return pdu
}

// ClearCreatedBy clears the value of the "created_by" field.
func (pdu *ProcessDesignUpdate) ClearCreatedBy() *ProcessDesignUpdate {
	pdu.mutation.ClearCreatedBy()
	return pdu
}

// SetUpdatedBy sets the "updated_by" field.
func (pdu *ProcessDesignUpdate) SetUpdatedBy(s string) *ProcessDesignUpdate {
	pdu.mutation.SetUpdatedBy(s)
	return pdu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (pdu *ProcessDesignUpdate) SetNillableUpdatedBy(s *string) *ProcessDesignUpdate {
	if s != nil {
		pdu.SetUpdatedBy(*s)
	}
	return pdu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (pdu *ProcessDesignUpdate) ClearUpdatedBy() *ProcessDesignUpdate {
	pdu.mutation.ClearUpdatedBy()
	return pdu
}

// SetUpdatedAt sets the "updated_at" field.
func (pdu *ProcessDesignUpdate) SetUpdatedAt(i int64) *ProcessDesignUpdate {
	pdu.mutation.ResetUpdatedAt()
	pdu.mutation.SetUpdatedAt(i)
	return pdu
}

// AddUpdatedAt adds i to the "updated_at" field.
func (pdu *ProcessDesignUpdate) AddUpdatedAt(i int64) *ProcessDesignUpdate {
	pdu.mutation.AddUpdatedAt(i)
	return pdu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (pdu *ProcessDesignUpdate) ClearUpdatedAt() *ProcessDesignUpdate {
	pdu.mutation.ClearUpdatedAt()
	return pdu
}

// SetTemplateID sets the "template_id" field.
func (pdu *ProcessDesignUpdate) SetTemplateID(s string) *ProcessDesignUpdate {
	pdu.mutation.SetTemplateID(s)
	return pdu
}

// SetNillableTemplateID sets the "template_id" field if the given value is not nil.
func (pdu *ProcessDesignUpdate) SetNillableTemplateID(s *string) *ProcessDesignUpdate {
	if s != nil {
		pdu.SetTemplateID(*s)
	}
	return pdu
}

// SetGraphData sets the "graph_data" field.
func (pdu *ProcessDesignUpdate) SetGraphData(m map[string]interface{}) *ProcessDesignUpdate {
	pdu.mutation.SetGraphData(m)
	return pdu
}

// ClearGraphData clears the value of the "graph_data" field.
func (pdu *ProcessDesignUpdate) ClearGraphData() *ProcessDesignUpdate {
	pdu.mutation.ClearGraphData()
	return pdu
}

// SetNodeLayouts sets the "node_layouts" field.
func (pdu *ProcessDesignUpdate) SetNodeLayouts(m map[string]interface{}) *ProcessDesignUpdate {
	pdu.mutation.SetNodeLayouts(m)
	return pdu
}

// ClearNodeLayouts clears the value of the "node_layouts" field.
func (pdu *ProcessDesignUpdate) ClearNodeLayouts() *ProcessDesignUpdate {
	pdu.mutation.ClearNodeLayouts()
	return pdu
}

// SetProperties sets the "properties" field.
func (pdu *ProcessDesignUpdate) SetProperties(m map[string]interface{}) *ProcessDesignUpdate {
	pdu.mutation.SetProperties(m)
	return pdu
}

// ClearProperties clears the value of the "properties" field.
func (pdu *ProcessDesignUpdate) ClearProperties() *ProcessDesignUpdate {
	pdu.mutation.ClearProperties()
	return pdu
}

// SetValidationRules sets the "validation_rules" field.
func (pdu *ProcessDesignUpdate) SetValidationRules(m map[string]interface{}) *ProcessDesignUpdate {
	pdu.mutation.SetValidationRules(m)
	return pdu
}

// ClearValidationRules clears the value of the "validation_rules" field.
func (pdu *ProcessDesignUpdate) ClearValidationRules() *ProcessDesignUpdate {
	pdu.mutation.ClearValidationRules()
	return pdu
}

// SetIsDraft sets the "is_draft" field.
func (pdu *ProcessDesignUpdate) SetIsDraft(b bool) *ProcessDesignUpdate {
	pdu.mutation.SetIsDraft(b)
	return pdu
}

// SetNillableIsDraft sets the "is_draft" field if the given value is not nil.
func (pdu *ProcessDesignUpdate) SetNillableIsDraft(b *bool) *ProcessDesignUpdate {
	if b != nil {
		pdu.SetIsDraft(*b)
	}
	return pdu
}

// SetSourceVersion sets the "source_version" field.
func (pdu *ProcessDesignUpdate) SetSourceVersion(s string) *ProcessDesignUpdate {
	pdu.mutation.SetSourceVersion(s)
	return pdu
}

// SetNillableSourceVersion sets the "source_version" field if the given value is not nil.
func (pdu *ProcessDesignUpdate) SetNillableSourceVersion(s *string) *ProcessDesignUpdate {
	if s != nil {
		pdu.SetSourceVersion(*s)
	}
	return pdu
}

// ClearSourceVersion clears the value of the "source_version" field.
func (pdu *ProcessDesignUpdate) ClearSourceVersion() *ProcessDesignUpdate {
	pdu.mutation.ClearSourceVersion()
	return pdu
}

// Mutation returns the ProcessDesignMutation object of the builder.
func (pdu *ProcessDesignUpdate) Mutation() *ProcessDesignMutation {
	return pdu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pdu *ProcessDesignUpdate) Save(ctx context.Context) (int, error) {
	pdu.defaults()
	return withHooks(ctx, pdu.sqlSave, pdu.mutation, pdu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pdu *ProcessDesignUpdate) SaveX(ctx context.Context) int {
	affected, err := pdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pdu *ProcessDesignUpdate) Exec(ctx context.Context) error {
	_, err := pdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pdu *ProcessDesignUpdate) ExecX(ctx context.Context) {
	if err := pdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pdu *ProcessDesignUpdate) defaults() {
	if _, ok := pdu.mutation.UpdatedAt(); !ok && !pdu.mutation.UpdatedAtCleared() {
		v := processdesign.UpdateDefaultUpdatedAt()
		pdu.mutation.SetUpdatedAt(v)
	}
}

func (pdu *ProcessDesignUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(processdesign.Table, processdesign.Columns, sqlgraph.NewFieldSpec(processdesign.FieldID, field.TypeString))
	if ps := pdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pdu.mutation.Version(); ok {
		_spec.SetField(processdesign.FieldVersion, field.TypeString, value)
	}
	if pdu.mutation.VersionCleared() {
		_spec.ClearField(processdesign.FieldVersion, field.TypeString)
	}
	if value, ok := pdu.mutation.Disabled(); ok {
		_spec.SetField(processdesign.FieldDisabled, field.TypeBool, value)
	}
	if pdu.mutation.DisabledCleared() {
		_spec.ClearField(processdesign.FieldDisabled, field.TypeBool)
	}
	if value, ok := pdu.mutation.Extras(); ok {
		_spec.SetField(processdesign.FieldExtras, field.TypeJSON, value)
	}
	if pdu.mutation.ExtrasCleared() {
		_spec.ClearField(processdesign.FieldExtras, field.TypeJSON)
	}
	if value, ok := pdu.mutation.SpaceID(); ok {
		_spec.SetField(processdesign.FieldSpaceID, field.TypeString, value)
	}
	if pdu.mutation.SpaceIDCleared() {
		_spec.ClearField(processdesign.FieldSpaceID, field.TypeString)
	}
	if value, ok := pdu.mutation.CreatedBy(); ok {
		_spec.SetField(processdesign.FieldCreatedBy, field.TypeString, value)
	}
	if pdu.mutation.CreatedByCleared() {
		_spec.ClearField(processdesign.FieldCreatedBy, field.TypeString)
	}
	if value, ok := pdu.mutation.UpdatedBy(); ok {
		_spec.SetField(processdesign.FieldUpdatedBy, field.TypeString, value)
	}
	if pdu.mutation.UpdatedByCleared() {
		_spec.ClearField(processdesign.FieldUpdatedBy, field.TypeString)
	}
	if pdu.mutation.CreatedAtCleared() {
		_spec.ClearField(processdesign.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := pdu.mutation.UpdatedAt(); ok {
		_spec.SetField(processdesign.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := pdu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(processdesign.FieldUpdatedAt, field.TypeInt64, value)
	}
	if pdu.mutation.UpdatedAtCleared() {
		_spec.ClearField(processdesign.FieldUpdatedAt, field.TypeInt64)
	}
	if value, ok := pdu.mutation.TemplateID(); ok {
		_spec.SetField(processdesign.FieldTemplateID, field.TypeString, value)
	}
	if value, ok := pdu.mutation.GraphData(); ok {
		_spec.SetField(processdesign.FieldGraphData, field.TypeJSON, value)
	}
	if pdu.mutation.GraphDataCleared() {
		_spec.ClearField(processdesign.FieldGraphData, field.TypeJSON)
	}
	if value, ok := pdu.mutation.NodeLayouts(); ok {
		_spec.SetField(processdesign.FieldNodeLayouts, field.TypeJSON, value)
	}
	if pdu.mutation.NodeLayoutsCleared() {
		_spec.ClearField(processdesign.FieldNodeLayouts, field.TypeJSON)
	}
	if value, ok := pdu.mutation.Properties(); ok {
		_spec.SetField(processdesign.FieldProperties, field.TypeJSON, value)
	}
	if pdu.mutation.PropertiesCleared() {
		_spec.ClearField(processdesign.FieldProperties, field.TypeJSON)
	}
	if value, ok := pdu.mutation.ValidationRules(); ok {
		_spec.SetField(processdesign.FieldValidationRules, field.TypeJSON, value)
	}
	if pdu.mutation.ValidationRulesCleared() {
		_spec.ClearField(processdesign.FieldValidationRules, field.TypeJSON)
	}
	if value, ok := pdu.mutation.IsDraft(); ok {
		_spec.SetField(processdesign.FieldIsDraft, field.TypeBool, value)
	}
	if value, ok := pdu.mutation.SourceVersion(); ok {
		_spec.SetField(processdesign.FieldSourceVersion, field.TypeString, value)
	}
	if pdu.mutation.SourceVersionCleared() {
		_spec.ClearField(processdesign.FieldSourceVersion, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{processdesign.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pdu.mutation.done = true
	return n, nil
}

// ProcessDesignUpdateOne is the builder for updating a single ProcessDesign entity.
type ProcessDesignUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProcessDesignMutation
}

// SetVersion sets the "version" field.
func (pduo *ProcessDesignUpdateOne) SetVersion(s string) *ProcessDesignUpdateOne {
	pduo.mutation.SetVersion(s)
	return pduo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (pduo *ProcessDesignUpdateOne) SetNillableVersion(s *string) *ProcessDesignUpdateOne {
	if s != nil {
		pduo.SetVersion(*s)
	}
	return pduo
}

// ClearVersion clears the value of the "version" field.
func (pduo *ProcessDesignUpdateOne) ClearVersion() *ProcessDesignUpdateOne {
	pduo.mutation.ClearVersion()
	return pduo
}

// SetDisabled sets the "disabled" field.
func (pduo *ProcessDesignUpdateOne) SetDisabled(b bool) *ProcessDesignUpdateOne {
	pduo.mutation.SetDisabled(b)
	return pduo
}

// SetNillableDisabled sets the "disabled" field if the given value is not nil.
func (pduo *ProcessDesignUpdateOne) SetNillableDisabled(b *bool) *ProcessDesignUpdateOne {
	if b != nil {
		pduo.SetDisabled(*b)
	}
	return pduo
}

// ClearDisabled clears the value of the "disabled" field.
func (pduo *ProcessDesignUpdateOne) ClearDisabled() *ProcessDesignUpdateOne {
	pduo.mutation.ClearDisabled()
	return pduo
}

// SetExtras sets the "extras" field.
func (pduo *ProcessDesignUpdateOne) SetExtras(m map[string]interface{}) *ProcessDesignUpdateOne {
	pduo.mutation.SetExtras(m)
	return pduo
}

// ClearExtras clears the value of the "extras" field.
func (pduo *ProcessDesignUpdateOne) ClearExtras() *ProcessDesignUpdateOne {
	pduo.mutation.ClearExtras()
	return pduo
}

// SetSpaceID sets the "space_id" field.
func (pduo *ProcessDesignUpdateOne) SetSpaceID(s string) *ProcessDesignUpdateOne {
	pduo.mutation.SetSpaceID(s)
	return pduo
}

// SetNillableSpaceID sets the "space_id" field if the given value is not nil.
func (pduo *ProcessDesignUpdateOne) SetNillableSpaceID(s *string) *ProcessDesignUpdateOne {
	if s != nil {
		pduo.SetSpaceID(*s)
	}
	return pduo
}

// ClearSpaceID clears the value of the "space_id" field.
func (pduo *ProcessDesignUpdateOne) ClearSpaceID() *ProcessDesignUpdateOne {
	pduo.mutation.ClearSpaceID()
	return pduo
}

// SetCreatedBy sets the "created_by" field.
func (pduo *ProcessDesignUpdateOne) SetCreatedBy(s string) *ProcessDesignUpdateOne {
	pduo.mutation.SetCreatedBy(s)
	return pduo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (pduo *ProcessDesignUpdateOne) SetNillableCreatedBy(s *string) *ProcessDesignUpdateOne {
	if s != nil {
		pduo.SetCreatedBy(*s)
	}
	return pduo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (pduo *ProcessDesignUpdateOne) ClearCreatedBy() *ProcessDesignUpdateOne {
	pduo.mutation.ClearCreatedBy()
	return pduo
}

// SetUpdatedBy sets the "updated_by" field.
func (pduo *ProcessDesignUpdateOne) SetUpdatedBy(s string) *ProcessDesignUpdateOne {
	pduo.mutation.SetUpdatedBy(s)
	return pduo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (pduo *ProcessDesignUpdateOne) SetNillableUpdatedBy(s *string) *ProcessDesignUpdateOne {
	if s != nil {
		pduo.SetUpdatedBy(*s)
	}
	return pduo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (pduo *ProcessDesignUpdateOne) ClearUpdatedBy() *ProcessDesignUpdateOne {
	pduo.mutation.ClearUpdatedBy()
	return pduo
}

// SetUpdatedAt sets the "updated_at" field.
func (pduo *ProcessDesignUpdateOne) SetUpdatedAt(i int64) *ProcessDesignUpdateOne {
	pduo.mutation.ResetUpdatedAt()
	pduo.mutation.SetUpdatedAt(i)
	return pduo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (pduo *ProcessDesignUpdateOne) AddUpdatedAt(i int64) *ProcessDesignUpdateOne {
	pduo.mutation.AddUpdatedAt(i)
	return pduo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (pduo *ProcessDesignUpdateOne) ClearUpdatedAt() *ProcessDesignUpdateOne {
	pduo.mutation.ClearUpdatedAt()
	return pduo
}

// SetTemplateID sets the "template_id" field.
func (pduo *ProcessDesignUpdateOne) SetTemplateID(s string) *ProcessDesignUpdateOne {
	pduo.mutation.SetTemplateID(s)
	return pduo
}

// SetNillableTemplateID sets the "template_id" field if the given value is not nil.
func (pduo *ProcessDesignUpdateOne) SetNillableTemplateID(s *string) *ProcessDesignUpdateOne {
	if s != nil {
		pduo.SetTemplateID(*s)
	}
	return pduo
}

// SetGraphData sets the "graph_data" field.
func (pduo *ProcessDesignUpdateOne) SetGraphData(m map[string]interface{}) *ProcessDesignUpdateOne {
	pduo.mutation.SetGraphData(m)
	return pduo
}

// ClearGraphData clears the value of the "graph_data" field.
func (pduo *ProcessDesignUpdateOne) ClearGraphData() *ProcessDesignUpdateOne {
	pduo.mutation.ClearGraphData()
	return pduo
}

// SetNodeLayouts sets the "node_layouts" field.
func (pduo *ProcessDesignUpdateOne) SetNodeLayouts(m map[string]interface{}) *ProcessDesignUpdateOne {
	pduo.mutation.SetNodeLayouts(m)
	return pduo
}

// ClearNodeLayouts clears the value of the "node_layouts" field.
func (pduo *ProcessDesignUpdateOne) ClearNodeLayouts() *ProcessDesignUpdateOne {
	pduo.mutation.ClearNodeLayouts()
	return pduo
}

// SetProperties sets the "properties" field.
func (pduo *ProcessDesignUpdateOne) SetProperties(m map[string]interface{}) *ProcessDesignUpdateOne {
	pduo.mutation.SetProperties(m)
	return pduo
}

// ClearProperties clears the value of the "properties" field.
func (pduo *ProcessDesignUpdateOne) ClearProperties() *ProcessDesignUpdateOne {
	pduo.mutation.ClearProperties()
	return pduo
}

// SetValidationRules sets the "validation_rules" field.
func (pduo *ProcessDesignUpdateOne) SetValidationRules(m map[string]interface{}) *ProcessDesignUpdateOne {
	pduo.mutation.SetValidationRules(m)
	return pduo
}

// ClearValidationRules clears the value of the "validation_rules" field.
func (pduo *ProcessDesignUpdateOne) ClearValidationRules() *ProcessDesignUpdateOne {
	pduo.mutation.ClearValidationRules()
	return pduo
}

// SetIsDraft sets the "is_draft" field.
func (pduo *ProcessDesignUpdateOne) SetIsDraft(b bool) *ProcessDesignUpdateOne {
	pduo.mutation.SetIsDraft(b)
	return pduo
}

// SetNillableIsDraft sets the "is_draft" field if the given value is not nil.
func (pduo *ProcessDesignUpdateOne) SetNillableIsDraft(b *bool) *ProcessDesignUpdateOne {
	if b != nil {
		pduo.SetIsDraft(*b)
	}
	return pduo
}

// SetSourceVersion sets the "source_version" field.
func (pduo *ProcessDesignUpdateOne) SetSourceVersion(s string) *ProcessDesignUpdateOne {
	pduo.mutation.SetSourceVersion(s)
	return pduo
}

// SetNillableSourceVersion sets the "source_version" field if the given value is not nil.
func (pduo *ProcessDesignUpdateOne) SetNillableSourceVersion(s *string) *ProcessDesignUpdateOne {
	if s != nil {
		pduo.SetSourceVersion(*s)
	}
	return pduo
}

// ClearSourceVersion clears the value of the "source_version" field.
func (pduo *ProcessDesignUpdateOne) ClearSourceVersion() *ProcessDesignUpdateOne {
	pduo.mutation.ClearSourceVersion()
	return pduo
}

// Mutation returns the ProcessDesignMutation object of the builder.
func (pduo *ProcessDesignUpdateOne) Mutation() *ProcessDesignMutation {
	return pduo.mutation
}

// Where appends a list predicates to the ProcessDesignUpdate builder.
func (pduo *ProcessDesignUpdateOne) Where(ps ...predicate.ProcessDesign) *ProcessDesignUpdateOne {
	pduo.mutation.Where(ps...)
	return pduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pduo *ProcessDesignUpdateOne) Select(field string, fields ...string) *ProcessDesignUpdateOne {
	pduo.fields = append([]string{field}, fields...)
	return pduo
}

// Save executes the query and returns the updated ProcessDesign entity.
func (pduo *ProcessDesignUpdateOne) Save(ctx context.Context) (*ProcessDesign, error) {
	pduo.defaults()
	return withHooks(ctx, pduo.sqlSave, pduo.mutation, pduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pduo *ProcessDesignUpdateOne) SaveX(ctx context.Context) *ProcessDesign {
	node, err := pduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pduo *ProcessDesignUpdateOne) Exec(ctx context.Context) error {
	_, err := pduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pduo *ProcessDesignUpdateOne) ExecX(ctx context.Context) {
	if err := pduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pduo *ProcessDesignUpdateOne) defaults() {
	if _, ok := pduo.mutation.UpdatedAt(); !ok && !pduo.mutation.UpdatedAtCleared() {
		v := processdesign.UpdateDefaultUpdatedAt()
		pduo.mutation.SetUpdatedAt(v)
	}
}

func (pduo *ProcessDesignUpdateOne) sqlSave(ctx context.Context) (_node *ProcessDesign, err error) {
	_spec := sqlgraph.NewUpdateSpec(processdesign.Table, processdesign.Columns, sqlgraph.NewFieldSpec(processdesign.FieldID, field.TypeString))
	id, ok := pduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ProcessDesign.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, processdesign.FieldID)
		for _, f := range fields {
			if !processdesign.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != processdesign.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pduo.mutation.Version(); ok {
		_spec.SetField(processdesign.FieldVersion, field.TypeString, value)
	}
	if pduo.mutation.VersionCleared() {
		_spec.ClearField(processdesign.FieldVersion, field.TypeString)
	}
	if value, ok := pduo.mutation.Disabled(); ok {
		_spec.SetField(processdesign.FieldDisabled, field.TypeBool, value)
	}
	if pduo.mutation.DisabledCleared() {
		_spec.ClearField(processdesign.FieldDisabled, field.TypeBool)
	}
	if value, ok := pduo.mutation.Extras(); ok {
		_spec.SetField(processdesign.FieldExtras, field.TypeJSON, value)
	}
	if pduo.mutation.ExtrasCleared() {
		_spec.ClearField(processdesign.FieldExtras, field.TypeJSON)
	}
	if value, ok := pduo.mutation.SpaceID(); ok {
		_spec.SetField(processdesign.FieldSpaceID, field.TypeString, value)
	}
	if pduo.mutation.SpaceIDCleared() {
		_spec.ClearField(processdesign.FieldSpaceID, field.TypeString)
	}
	if value, ok := pduo.mutation.CreatedBy(); ok {
		_spec.SetField(processdesign.FieldCreatedBy, field.TypeString, value)
	}
	if pduo.mutation.CreatedByCleared() {
		_spec.ClearField(processdesign.FieldCreatedBy, field.TypeString)
	}
	if value, ok := pduo.mutation.UpdatedBy(); ok {
		_spec.SetField(processdesign.FieldUpdatedBy, field.TypeString, value)
	}
	if pduo.mutation.UpdatedByCleared() {
		_spec.ClearField(processdesign.FieldUpdatedBy, field.TypeString)
	}
	if pduo.mutation.CreatedAtCleared() {
		_spec.ClearField(processdesign.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := pduo.mutation.UpdatedAt(); ok {
		_spec.SetField(processdesign.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := pduo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(processdesign.FieldUpdatedAt, field.TypeInt64, value)
	}
	if pduo.mutation.UpdatedAtCleared() {
		_spec.ClearField(processdesign.FieldUpdatedAt, field.TypeInt64)
	}
	if value, ok := pduo.mutation.TemplateID(); ok {
		_spec.SetField(processdesign.FieldTemplateID, field.TypeString, value)
	}
	if value, ok := pduo.mutation.GraphData(); ok {
		_spec.SetField(processdesign.FieldGraphData, field.TypeJSON, value)
	}
	if pduo.mutation.GraphDataCleared() {
		_spec.ClearField(processdesign.FieldGraphData, field.TypeJSON)
	}
	if value, ok := pduo.mutation.NodeLayouts(); ok {
		_spec.SetField(processdesign.FieldNodeLayouts, field.TypeJSON, value)
	}
	if pduo.mutation.NodeLayoutsCleared() {
		_spec.ClearField(processdesign.FieldNodeLayouts, field.TypeJSON)
	}
	if value, ok := pduo.mutation.Properties(); ok {
		_spec.SetField(processdesign.FieldProperties, field.TypeJSON, value)
	}
	if pduo.mutation.PropertiesCleared() {
		_spec.ClearField(processdesign.FieldProperties, field.TypeJSON)
	}
	if value, ok := pduo.mutation.ValidationRules(); ok {
		_spec.SetField(processdesign.FieldValidationRules, field.TypeJSON, value)
	}
	if pduo.mutation.ValidationRulesCleared() {
		_spec.ClearField(processdesign.FieldValidationRules, field.TypeJSON)
	}
	if value, ok := pduo.mutation.IsDraft(); ok {
		_spec.SetField(processdesign.FieldIsDraft, field.TypeBool, value)
	}
	if value, ok := pduo.mutation.SourceVersion(); ok {
		_spec.SetField(processdesign.FieldSourceVersion, field.TypeString, value)
	}
	if pduo.mutation.SourceVersionCleared() {
		_spec.ClearField(processdesign.FieldSourceVersion, field.TypeString)
	}
	_node = &ProcessDesign{config: pduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{processdesign.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pduo.mutation.done = true
	return _node, nil
}
