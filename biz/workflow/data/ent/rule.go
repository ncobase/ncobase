// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"ncobase/workflow/data/ent/rule"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Rule is the model entity for the Rule schema.
type Rule struct {
	config `json:"-"`
	// ID of the ent.
	// primary key
	ID string `json:"id,omitempty"`
	// name
	Name string `json:"name,omitempty"`
	// code
	Code string `json:"code,omitempty"`
	// description
	Description string `json:"description,omitempty"`
	// type
	Type string `json:"type,omitempty"`
	// Status, text status
	Status string `json:"status,omitempty"`
	// Extend properties
	Extras map[string]interface{} `json:"extras,omitempty"`
	// tenant id
	TenantID string `json:"tenant_id,omitempty"`
	// id of the creator
	CreatedBy string `json:"created_by,omitempty"`
	// id of the last updater
	UpdatedBy string `json:"updated_by,omitempty"`
	// created at
	CreatedAt int64 `json:"created_at,omitempty"`
	// updated at
	UpdatedAt int64 `json:"updated_at,omitempty"`
	// Rule unique key
	RuleKey string `json:"rule_key,omitempty"`
	// Template ID if template specific
	TemplateID string `json:"template_id,omitempty"`
	// Node key if node specific
	NodeKey string `json:"node_key,omitempty"`
	// Rule conditions
	Conditions []string `json:"conditions,omitempty"`
	// Rule actions
	Actions map[string]interface{} `json:"actions,omitempty"`
	// Rule priority
	Priority int `json:"priority,omitempty"`
	// Whether rule is enabled
	IsEnabled bool `json:"is_enabled,omitempty"`
	// Rule effective time
	EffectiveTime int64 `json:"effective_time,omitempty"`
	// Rule expire time
	ExpireTime   int64 `json:"expire_time,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Rule) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case rule.FieldExtras, rule.FieldConditions, rule.FieldActions:
			values[i] = new([]byte)
		case rule.FieldIsEnabled:
			values[i] = new(sql.NullBool)
		case rule.FieldCreatedAt, rule.FieldUpdatedAt, rule.FieldPriority, rule.FieldEffectiveTime, rule.FieldExpireTime:
			values[i] = new(sql.NullInt64)
		case rule.FieldID, rule.FieldName, rule.FieldCode, rule.FieldDescription, rule.FieldType, rule.FieldStatus, rule.FieldTenantID, rule.FieldCreatedBy, rule.FieldUpdatedBy, rule.FieldRuleKey, rule.FieldTemplateID, rule.FieldNodeKey:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Rule fields.
func (r *Rule) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case rule.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				r.ID = value.String
			}
		case rule.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				r.Name = value.String
			}
		case rule.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				r.Code = value.String
			}
		case rule.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				r.Description = value.String
			}
		case rule.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				r.Type = value.String
			}
		case rule.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				r.Status = value.String
			}
		case rule.FieldExtras:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field extras", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &r.Extras); err != nil {
					return fmt.Errorf("unmarshal field extras: %w", err)
				}
			}
		case rule.FieldTenantID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				r.TenantID = value.String
			}
		case rule.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				r.CreatedBy = value.String
			}
		case rule.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				r.UpdatedBy = value.String
			}
		case rule.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				r.CreatedAt = value.Int64
			}
		case rule.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				r.UpdatedAt = value.Int64
			}
		case rule.FieldRuleKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field rule_key", values[i])
			} else if value.Valid {
				r.RuleKey = value.String
			}
		case rule.FieldTemplateID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field template_id", values[i])
			} else if value.Valid {
				r.TemplateID = value.String
			}
		case rule.FieldNodeKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field node_key", values[i])
			} else if value.Valid {
				r.NodeKey = value.String
			}
		case rule.FieldConditions:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field conditions", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &r.Conditions); err != nil {
					return fmt.Errorf("unmarshal field conditions: %w", err)
				}
			}
		case rule.FieldActions:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field actions", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &r.Actions); err != nil {
					return fmt.Errorf("unmarshal field actions: %w", err)
				}
			}
		case rule.FieldPriority:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field priority", values[i])
			} else if value.Valid {
				r.Priority = int(value.Int64)
			}
		case rule.FieldIsEnabled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_enabled", values[i])
			} else if value.Valid {
				r.IsEnabled = value.Bool
			}
		case rule.FieldEffectiveTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field effective_time", values[i])
			} else if value.Valid {
				r.EffectiveTime = value.Int64
			}
		case rule.FieldExpireTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field expire_time", values[i])
			} else if value.Valid {
				r.ExpireTime = value.Int64
			}
		default:
			r.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Rule.
// This includes values selected through modifiers, order, etc.
func (r *Rule) Value(name string) (ent.Value, error) {
	return r.selectValues.Get(name)
}

// Update returns a builder for updating this Rule.
// Note that you need to call Rule.Unwrap() before calling this method if this Rule
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Rule) Update() *RuleUpdateOne {
	return NewRuleClient(r.config).UpdateOne(r)
}

// Unwrap unwraps the Rule entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Rule) Unwrap() *Rule {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Rule is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Rule) String() string {
	var builder strings.Builder
	builder.WriteString("Rule(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("name=")
	builder.WriteString(r.Name)
	builder.WriteString(", ")
	builder.WriteString("code=")
	builder.WriteString(r.Code)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(r.Description)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(r.Type)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(r.Status)
	builder.WriteString(", ")
	builder.WriteString("extras=")
	builder.WriteString(fmt.Sprintf("%v", r.Extras))
	builder.WriteString(", ")
	builder.WriteString("tenant_id=")
	builder.WriteString(r.TenantID)
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(r.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(r.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", r.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", r.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("rule_key=")
	builder.WriteString(r.RuleKey)
	builder.WriteString(", ")
	builder.WriteString("template_id=")
	builder.WriteString(r.TemplateID)
	builder.WriteString(", ")
	builder.WriteString("node_key=")
	builder.WriteString(r.NodeKey)
	builder.WriteString(", ")
	builder.WriteString("conditions=")
	builder.WriteString(fmt.Sprintf("%v", r.Conditions))
	builder.WriteString(", ")
	builder.WriteString("actions=")
	builder.WriteString(fmt.Sprintf("%v", r.Actions))
	builder.WriteString(", ")
	builder.WriteString("priority=")
	builder.WriteString(fmt.Sprintf("%v", r.Priority))
	builder.WriteString(", ")
	builder.WriteString("is_enabled=")
	builder.WriteString(fmt.Sprintf("%v", r.IsEnabled))
	builder.WriteString(", ")
	builder.WriteString("effective_time=")
	builder.WriteString(fmt.Sprintf("%v", r.EffectiveTime))
	builder.WriteString(", ")
	builder.WriteString("expire_time=")
	builder.WriteString(fmt.Sprintf("%v", r.ExpireTime))
	builder.WriteByte(')')
	return builder.String()
}

// Rules is a parsable slice of Rule.
type Rules []*Rule
