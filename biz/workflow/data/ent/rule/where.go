// Code generated by ent, DO NOT EDIT.

package rule

import (
	"ncobase/workflow/data/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Rule {
	return predicate.Rule(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Rule {
	return predicate.Rule(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Rule {
	return predicate.Rule(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Rule {
	return predicate.Rule(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Rule {
	return predicate.Rule(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Rule {
	return predicate.Rule(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Rule {
	return predicate.Rule(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Rule {
	return predicate.Rule(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Rule {
	return predicate.Rule(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Rule {
	return predicate.Rule(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Rule {
	return predicate.Rule(sql.FieldContainsFold(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Rule {
	return predicate.Rule(sql.FieldEQ(FieldName, v))
}

// Code applies equality check predicate on the "code" field. It's identical to CodeEQ.
func Code(v string) predicate.Rule {
	return predicate.Rule(sql.FieldEQ(FieldCode, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Rule {
	return predicate.Rule(sql.FieldEQ(FieldDescription, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.Rule {
	return predicate.Rule(sql.FieldEQ(FieldType, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.Rule {
	return predicate.Rule(sql.FieldEQ(FieldStatus, v))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v string) predicate.Rule {
	return predicate.Rule(sql.FieldEQ(FieldTenantID, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v string) predicate.Rule {
	return predicate.Rule(sql.FieldEQ(FieldCreatedBy, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v string) predicate.Rule {
	return predicate.Rule(sql.FieldEQ(FieldUpdatedBy, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v int64) predicate.Rule {
	return predicate.Rule(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v int64) predicate.Rule {
	return predicate.Rule(sql.FieldEQ(FieldUpdatedAt, v))
}

// RuleKey applies equality check predicate on the "rule_key" field. It's identical to RuleKeyEQ.
func RuleKey(v string) predicate.Rule {
	return predicate.Rule(sql.FieldEQ(FieldRuleKey, v))
}

// TemplateID applies equality check predicate on the "template_id" field. It's identical to TemplateIDEQ.
func TemplateID(v string) predicate.Rule {
	return predicate.Rule(sql.FieldEQ(FieldTemplateID, v))
}

// NodeKey applies equality check predicate on the "node_key" field. It's identical to NodeKeyEQ.
func NodeKey(v string) predicate.Rule {
	return predicate.Rule(sql.FieldEQ(FieldNodeKey, v))
}

// Priority applies equality check predicate on the "priority" field. It's identical to PriorityEQ.
func Priority(v int) predicate.Rule {
	return predicate.Rule(sql.FieldEQ(FieldPriority, v))
}

// IsEnabled applies equality check predicate on the "is_enabled" field. It's identical to IsEnabledEQ.
func IsEnabled(v bool) predicate.Rule {
	return predicate.Rule(sql.FieldEQ(FieldIsEnabled, v))
}

// EffectiveTime applies equality check predicate on the "effective_time" field. It's identical to EffectiveTimeEQ.
func EffectiveTime(v int64) predicate.Rule {
	return predicate.Rule(sql.FieldEQ(FieldEffectiveTime, v))
}

// ExpireTime applies equality check predicate on the "expire_time" field. It's identical to ExpireTimeEQ.
func ExpireTime(v int64) predicate.Rule {
	return predicate.Rule(sql.FieldEQ(FieldExpireTime, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Rule {
	return predicate.Rule(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Rule {
	return predicate.Rule(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Rule {
	return predicate.Rule(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Rule {
	return predicate.Rule(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Rule {
	return predicate.Rule(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Rule {
	return predicate.Rule(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Rule {
	return predicate.Rule(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Rule {
	return predicate.Rule(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Rule {
	return predicate.Rule(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Rule {
	return predicate.Rule(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Rule {
	return predicate.Rule(sql.FieldHasSuffix(FieldName, v))
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.Rule {
	return predicate.Rule(sql.FieldIsNull(FieldName))
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.Rule {
	return predicate.Rule(sql.FieldNotNull(FieldName))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Rule {
	return predicate.Rule(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Rule {
	return predicate.Rule(sql.FieldContainsFold(FieldName, v))
}

// CodeEQ applies the EQ predicate on the "code" field.
func CodeEQ(v string) predicate.Rule {
	return predicate.Rule(sql.FieldEQ(FieldCode, v))
}

// CodeNEQ applies the NEQ predicate on the "code" field.
func CodeNEQ(v string) predicate.Rule {
	return predicate.Rule(sql.FieldNEQ(FieldCode, v))
}

// CodeIn applies the In predicate on the "code" field.
func CodeIn(vs ...string) predicate.Rule {
	return predicate.Rule(sql.FieldIn(FieldCode, vs...))
}

// CodeNotIn applies the NotIn predicate on the "code" field.
func CodeNotIn(vs ...string) predicate.Rule {
	return predicate.Rule(sql.FieldNotIn(FieldCode, vs...))
}

// CodeGT applies the GT predicate on the "code" field.
func CodeGT(v string) predicate.Rule {
	return predicate.Rule(sql.FieldGT(FieldCode, v))
}

// CodeGTE applies the GTE predicate on the "code" field.
func CodeGTE(v string) predicate.Rule {
	return predicate.Rule(sql.FieldGTE(FieldCode, v))
}

// CodeLT applies the LT predicate on the "code" field.
func CodeLT(v string) predicate.Rule {
	return predicate.Rule(sql.FieldLT(FieldCode, v))
}

// CodeLTE applies the LTE predicate on the "code" field.
func CodeLTE(v string) predicate.Rule {
	return predicate.Rule(sql.FieldLTE(FieldCode, v))
}

// CodeContains applies the Contains predicate on the "code" field.
func CodeContains(v string) predicate.Rule {
	return predicate.Rule(sql.FieldContains(FieldCode, v))
}

// CodeHasPrefix applies the HasPrefix predicate on the "code" field.
func CodeHasPrefix(v string) predicate.Rule {
	return predicate.Rule(sql.FieldHasPrefix(FieldCode, v))
}

// CodeHasSuffix applies the HasSuffix predicate on the "code" field.
func CodeHasSuffix(v string) predicate.Rule {
	return predicate.Rule(sql.FieldHasSuffix(FieldCode, v))
}

// CodeIsNil applies the IsNil predicate on the "code" field.
func CodeIsNil() predicate.Rule {
	return predicate.Rule(sql.FieldIsNull(FieldCode))
}

// CodeNotNil applies the NotNil predicate on the "code" field.
func CodeNotNil() predicate.Rule {
	return predicate.Rule(sql.FieldNotNull(FieldCode))
}

// CodeEqualFold applies the EqualFold predicate on the "code" field.
func CodeEqualFold(v string) predicate.Rule {
	return predicate.Rule(sql.FieldEqualFold(FieldCode, v))
}

// CodeContainsFold applies the ContainsFold predicate on the "code" field.
func CodeContainsFold(v string) predicate.Rule {
	return predicate.Rule(sql.FieldContainsFold(FieldCode, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Rule {
	return predicate.Rule(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Rule {
	return predicate.Rule(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Rule {
	return predicate.Rule(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Rule {
	return predicate.Rule(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Rule {
	return predicate.Rule(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Rule {
	return predicate.Rule(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Rule {
	return predicate.Rule(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Rule {
	return predicate.Rule(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Rule {
	return predicate.Rule(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Rule {
	return predicate.Rule(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Rule {
	return predicate.Rule(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Rule {
	return predicate.Rule(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Rule {
	return predicate.Rule(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Rule {
	return predicate.Rule(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Rule {
	return predicate.Rule(sql.FieldContainsFold(FieldDescription, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.Rule {
	return predicate.Rule(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.Rule {
	return predicate.Rule(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.Rule {
	return predicate.Rule(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.Rule {
	return predicate.Rule(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.Rule {
	return predicate.Rule(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.Rule {
	return predicate.Rule(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.Rule {
	return predicate.Rule(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.Rule {
	return predicate.Rule(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.Rule {
	return predicate.Rule(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.Rule {
	return predicate.Rule(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.Rule {
	return predicate.Rule(sql.FieldHasSuffix(FieldType, v))
}

// TypeIsNil applies the IsNil predicate on the "type" field.
func TypeIsNil() predicate.Rule {
	return predicate.Rule(sql.FieldIsNull(FieldType))
}

// TypeNotNil applies the NotNil predicate on the "type" field.
func TypeNotNil() predicate.Rule {
	return predicate.Rule(sql.FieldNotNull(FieldType))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.Rule {
	return predicate.Rule(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.Rule {
	return predicate.Rule(sql.FieldContainsFold(FieldType, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.Rule {
	return predicate.Rule(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.Rule {
	return predicate.Rule(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.Rule {
	return predicate.Rule(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.Rule {
	return predicate.Rule(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.Rule {
	return predicate.Rule(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.Rule {
	return predicate.Rule(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.Rule {
	return predicate.Rule(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.Rule {
	return predicate.Rule(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.Rule {
	return predicate.Rule(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.Rule {
	return predicate.Rule(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.Rule {
	return predicate.Rule(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusIsNil applies the IsNil predicate on the "status" field.
func StatusIsNil() predicate.Rule {
	return predicate.Rule(sql.FieldIsNull(FieldStatus))
}

// StatusNotNil applies the NotNil predicate on the "status" field.
func StatusNotNil() predicate.Rule {
	return predicate.Rule(sql.FieldNotNull(FieldStatus))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.Rule {
	return predicate.Rule(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.Rule {
	return predicate.Rule(sql.FieldContainsFold(FieldStatus, v))
}

// ExtrasIsNil applies the IsNil predicate on the "extras" field.
func ExtrasIsNil() predicate.Rule {
	return predicate.Rule(sql.FieldIsNull(FieldExtras))
}

// ExtrasNotNil applies the NotNil predicate on the "extras" field.
func ExtrasNotNil() predicate.Rule {
	return predicate.Rule(sql.FieldNotNull(FieldExtras))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v string) predicate.Rule {
	return predicate.Rule(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v string) predicate.Rule {
	return predicate.Rule(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...string) predicate.Rule {
	return predicate.Rule(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...string) predicate.Rule {
	return predicate.Rule(sql.FieldNotIn(FieldTenantID, vs...))
}

// TenantIDGT applies the GT predicate on the "tenant_id" field.
func TenantIDGT(v string) predicate.Rule {
	return predicate.Rule(sql.FieldGT(FieldTenantID, v))
}

// TenantIDGTE applies the GTE predicate on the "tenant_id" field.
func TenantIDGTE(v string) predicate.Rule {
	return predicate.Rule(sql.FieldGTE(FieldTenantID, v))
}

// TenantIDLT applies the LT predicate on the "tenant_id" field.
func TenantIDLT(v string) predicate.Rule {
	return predicate.Rule(sql.FieldLT(FieldTenantID, v))
}

// TenantIDLTE applies the LTE predicate on the "tenant_id" field.
func TenantIDLTE(v string) predicate.Rule {
	return predicate.Rule(sql.FieldLTE(FieldTenantID, v))
}

// TenantIDContains applies the Contains predicate on the "tenant_id" field.
func TenantIDContains(v string) predicate.Rule {
	return predicate.Rule(sql.FieldContains(FieldTenantID, v))
}

// TenantIDHasPrefix applies the HasPrefix predicate on the "tenant_id" field.
func TenantIDHasPrefix(v string) predicate.Rule {
	return predicate.Rule(sql.FieldHasPrefix(FieldTenantID, v))
}

// TenantIDHasSuffix applies the HasSuffix predicate on the "tenant_id" field.
func TenantIDHasSuffix(v string) predicate.Rule {
	return predicate.Rule(sql.FieldHasSuffix(FieldTenantID, v))
}

// TenantIDIsNil applies the IsNil predicate on the "tenant_id" field.
func TenantIDIsNil() predicate.Rule {
	return predicate.Rule(sql.FieldIsNull(FieldTenantID))
}

// TenantIDNotNil applies the NotNil predicate on the "tenant_id" field.
func TenantIDNotNil() predicate.Rule {
	return predicate.Rule(sql.FieldNotNull(FieldTenantID))
}

// TenantIDEqualFold applies the EqualFold predicate on the "tenant_id" field.
func TenantIDEqualFold(v string) predicate.Rule {
	return predicate.Rule(sql.FieldEqualFold(FieldTenantID, v))
}

// TenantIDContainsFold applies the ContainsFold predicate on the "tenant_id" field.
func TenantIDContainsFold(v string) predicate.Rule {
	return predicate.Rule(sql.FieldContainsFold(FieldTenantID, v))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v string) predicate.Rule {
	return predicate.Rule(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v string) predicate.Rule {
	return predicate.Rule(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...string) predicate.Rule {
	return predicate.Rule(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...string) predicate.Rule {
	return predicate.Rule(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v string) predicate.Rule {
	return predicate.Rule(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v string) predicate.Rule {
	return predicate.Rule(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v string) predicate.Rule {
	return predicate.Rule(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v string) predicate.Rule {
	return predicate.Rule(sql.FieldLTE(FieldCreatedBy, v))
}

// CreatedByContains applies the Contains predicate on the "created_by" field.
func CreatedByContains(v string) predicate.Rule {
	return predicate.Rule(sql.FieldContains(FieldCreatedBy, v))
}

// CreatedByHasPrefix applies the HasPrefix predicate on the "created_by" field.
func CreatedByHasPrefix(v string) predicate.Rule {
	return predicate.Rule(sql.FieldHasPrefix(FieldCreatedBy, v))
}

// CreatedByHasSuffix applies the HasSuffix predicate on the "created_by" field.
func CreatedByHasSuffix(v string) predicate.Rule {
	return predicate.Rule(sql.FieldHasSuffix(FieldCreatedBy, v))
}

// CreatedByIsNil applies the IsNil predicate on the "created_by" field.
func CreatedByIsNil() predicate.Rule {
	return predicate.Rule(sql.FieldIsNull(FieldCreatedBy))
}

// CreatedByNotNil applies the NotNil predicate on the "created_by" field.
func CreatedByNotNil() predicate.Rule {
	return predicate.Rule(sql.FieldNotNull(FieldCreatedBy))
}

// CreatedByEqualFold applies the EqualFold predicate on the "created_by" field.
func CreatedByEqualFold(v string) predicate.Rule {
	return predicate.Rule(sql.FieldEqualFold(FieldCreatedBy, v))
}

// CreatedByContainsFold applies the ContainsFold predicate on the "created_by" field.
func CreatedByContainsFold(v string) predicate.Rule {
	return predicate.Rule(sql.FieldContainsFold(FieldCreatedBy, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v string) predicate.Rule {
	return predicate.Rule(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v string) predicate.Rule {
	return predicate.Rule(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...string) predicate.Rule {
	return predicate.Rule(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...string) predicate.Rule {
	return predicate.Rule(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v string) predicate.Rule {
	return predicate.Rule(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v string) predicate.Rule {
	return predicate.Rule(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v string) predicate.Rule {
	return predicate.Rule(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v string) predicate.Rule {
	return predicate.Rule(sql.FieldLTE(FieldUpdatedBy, v))
}

// UpdatedByContains applies the Contains predicate on the "updated_by" field.
func UpdatedByContains(v string) predicate.Rule {
	return predicate.Rule(sql.FieldContains(FieldUpdatedBy, v))
}

// UpdatedByHasPrefix applies the HasPrefix predicate on the "updated_by" field.
func UpdatedByHasPrefix(v string) predicate.Rule {
	return predicate.Rule(sql.FieldHasPrefix(FieldUpdatedBy, v))
}

// UpdatedByHasSuffix applies the HasSuffix predicate on the "updated_by" field.
func UpdatedByHasSuffix(v string) predicate.Rule {
	return predicate.Rule(sql.FieldHasSuffix(FieldUpdatedBy, v))
}

// UpdatedByIsNil applies the IsNil predicate on the "updated_by" field.
func UpdatedByIsNil() predicate.Rule {
	return predicate.Rule(sql.FieldIsNull(FieldUpdatedBy))
}

// UpdatedByNotNil applies the NotNil predicate on the "updated_by" field.
func UpdatedByNotNil() predicate.Rule {
	return predicate.Rule(sql.FieldNotNull(FieldUpdatedBy))
}

// UpdatedByEqualFold applies the EqualFold predicate on the "updated_by" field.
func UpdatedByEqualFold(v string) predicate.Rule {
	return predicate.Rule(sql.FieldEqualFold(FieldUpdatedBy, v))
}

// UpdatedByContainsFold applies the ContainsFold predicate on the "updated_by" field.
func UpdatedByContainsFold(v string) predicate.Rule {
	return predicate.Rule(sql.FieldContainsFold(FieldUpdatedBy, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v int64) predicate.Rule {
	return predicate.Rule(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v int64) predicate.Rule {
	return predicate.Rule(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...int64) predicate.Rule {
	return predicate.Rule(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...int64) predicate.Rule {
	return predicate.Rule(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v int64) predicate.Rule {
	return predicate.Rule(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v int64) predicate.Rule {
	return predicate.Rule(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v int64) predicate.Rule {
	return predicate.Rule(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v int64) predicate.Rule {
	return predicate.Rule(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.Rule {
	return predicate.Rule(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.Rule {
	return predicate.Rule(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v int64) predicate.Rule {
	return predicate.Rule(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v int64) predicate.Rule {
	return predicate.Rule(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...int64) predicate.Rule {
	return predicate.Rule(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...int64) predicate.Rule {
	return predicate.Rule(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v int64) predicate.Rule {
	return predicate.Rule(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v int64) predicate.Rule {
	return predicate.Rule(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v int64) predicate.Rule {
	return predicate.Rule(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v int64) predicate.Rule {
	return predicate.Rule(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.Rule {
	return predicate.Rule(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.Rule {
	return predicate.Rule(sql.FieldNotNull(FieldUpdatedAt))
}

// RuleKeyEQ applies the EQ predicate on the "rule_key" field.
func RuleKeyEQ(v string) predicate.Rule {
	return predicate.Rule(sql.FieldEQ(FieldRuleKey, v))
}

// RuleKeyNEQ applies the NEQ predicate on the "rule_key" field.
func RuleKeyNEQ(v string) predicate.Rule {
	return predicate.Rule(sql.FieldNEQ(FieldRuleKey, v))
}

// RuleKeyIn applies the In predicate on the "rule_key" field.
func RuleKeyIn(vs ...string) predicate.Rule {
	return predicate.Rule(sql.FieldIn(FieldRuleKey, vs...))
}

// RuleKeyNotIn applies the NotIn predicate on the "rule_key" field.
func RuleKeyNotIn(vs ...string) predicate.Rule {
	return predicate.Rule(sql.FieldNotIn(FieldRuleKey, vs...))
}

// RuleKeyGT applies the GT predicate on the "rule_key" field.
func RuleKeyGT(v string) predicate.Rule {
	return predicate.Rule(sql.FieldGT(FieldRuleKey, v))
}

// RuleKeyGTE applies the GTE predicate on the "rule_key" field.
func RuleKeyGTE(v string) predicate.Rule {
	return predicate.Rule(sql.FieldGTE(FieldRuleKey, v))
}

// RuleKeyLT applies the LT predicate on the "rule_key" field.
func RuleKeyLT(v string) predicate.Rule {
	return predicate.Rule(sql.FieldLT(FieldRuleKey, v))
}

// RuleKeyLTE applies the LTE predicate on the "rule_key" field.
func RuleKeyLTE(v string) predicate.Rule {
	return predicate.Rule(sql.FieldLTE(FieldRuleKey, v))
}

// RuleKeyContains applies the Contains predicate on the "rule_key" field.
func RuleKeyContains(v string) predicate.Rule {
	return predicate.Rule(sql.FieldContains(FieldRuleKey, v))
}

// RuleKeyHasPrefix applies the HasPrefix predicate on the "rule_key" field.
func RuleKeyHasPrefix(v string) predicate.Rule {
	return predicate.Rule(sql.FieldHasPrefix(FieldRuleKey, v))
}

// RuleKeyHasSuffix applies the HasSuffix predicate on the "rule_key" field.
func RuleKeyHasSuffix(v string) predicate.Rule {
	return predicate.Rule(sql.FieldHasSuffix(FieldRuleKey, v))
}

// RuleKeyEqualFold applies the EqualFold predicate on the "rule_key" field.
func RuleKeyEqualFold(v string) predicate.Rule {
	return predicate.Rule(sql.FieldEqualFold(FieldRuleKey, v))
}

// RuleKeyContainsFold applies the ContainsFold predicate on the "rule_key" field.
func RuleKeyContainsFold(v string) predicate.Rule {
	return predicate.Rule(sql.FieldContainsFold(FieldRuleKey, v))
}

// TemplateIDEQ applies the EQ predicate on the "template_id" field.
func TemplateIDEQ(v string) predicate.Rule {
	return predicate.Rule(sql.FieldEQ(FieldTemplateID, v))
}

// TemplateIDNEQ applies the NEQ predicate on the "template_id" field.
func TemplateIDNEQ(v string) predicate.Rule {
	return predicate.Rule(sql.FieldNEQ(FieldTemplateID, v))
}

// TemplateIDIn applies the In predicate on the "template_id" field.
func TemplateIDIn(vs ...string) predicate.Rule {
	return predicate.Rule(sql.FieldIn(FieldTemplateID, vs...))
}

// TemplateIDNotIn applies the NotIn predicate on the "template_id" field.
func TemplateIDNotIn(vs ...string) predicate.Rule {
	return predicate.Rule(sql.FieldNotIn(FieldTemplateID, vs...))
}

// TemplateIDGT applies the GT predicate on the "template_id" field.
func TemplateIDGT(v string) predicate.Rule {
	return predicate.Rule(sql.FieldGT(FieldTemplateID, v))
}

// TemplateIDGTE applies the GTE predicate on the "template_id" field.
func TemplateIDGTE(v string) predicate.Rule {
	return predicate.Rule(sql.FieldGTE(FieldTemplateID, v))
}

// TemplateIDLT applies the LT predicate on the "template_id" field.
func TemplateIDLT(v string) predicate.Rule {
	return predicate.Rule(sql.FieldLT(FieldTemplateID, v))
}

// TemplateIDLTE applies the LTE predicate on the "template_id" field.
func TemplateIDLTE(v string) predicate.Rule {
	return predicate.Rule(sql.FieldLTE(FieldTemplateID, v))
}

// TemplateIDContains applies the Contains predicate on the "template_id" field.
func TemplateIDContains(v string) predicate.Rule {
	return predicate.Rule(sql.FieldContains(FieldTemplateID, v))
}

// TemplateIDHasPrefix applies the HasPrefix predicate on the "template_id" field.
func TemplateIDHasPrefix(v string) predicate.Rule {
	return predicate.Rule(sql.FieldHasPrefix(FieldTemplateID, v))
}

// TemplateIDHasSuffix applies the HasSuffix predicate on the "template_id" field.
func TemplateIDHasSuffix(v string) predicate.Rule {
	return predicate.Rule(sql.FieldHasSuffix(FieldTemplateID, v))
}

// TemplateIDIsNil applies the IsNil predicate on the "template_id" field.
func TemplateIDIsNil() predicate.Rule {
	return predicate.Rule(sql.FieldIsNull(FieldTemplateID))
}

// TemplateIDNotNil applies the NotNil predicate on the "template_id" field.
func TemplateIDNotNil() predicate.Rule {
	return predicate.Rule(sql.FieldNotNull(FieldTemplateID))
}

// TemplateIDEqualFold applies the EqualFold predicate on the "template_id" field.
func TemplateIDEqualFold(v string) predicate.Rule {
	return predicate.Rule(sql.FieldEqualFold(FieldTemplateID, v))
}

// TemplateIDContainsFold applies the ContainsFold predicate on the "template_id" field.
func TemplateIDContainsFold(v string) predicate.Rule {
	return predicate.Rule(sql.FieldContainsFold(FieldTemplateID, v))
}

// NodeKeyEQ applies the EQ predicate on the "node_key" field.
func NodeKeyEQ(v string) predicate.Rule {
	return predicate.Rule(sql.FieldEQ(FieldNodeKey, v))
}

// NodeKeyNEQ applies the NEQ predicate on the "node_key" field.
func NodeKeyNEQ(v string) predicate.Rule {
	return predicate.Rule(sql.FieldNEQ(FieldNodeKey, v))
}

// NodeKeyIn applies the In predicate on the "node_key" field.
func NodeKeyIn(vs ...string) predicate.Rule {
	return predicate.Rule(sql.FieldIn(FieldNodeKey, vs...))
}

// NodeKeyNotIn applies the NotIn predicate on the "node_key" field.
func NodeKeyNotIn(vs ...string) predicate.Rule {
	return predicate.Rule(sql.FieldNotIn(FieldNodeKey, vs...))
}

// NodeKeyGT applies the GT predicate on the "node_key" field.
func NodeKeyGT(v string) predicate.Rule {
	return predicate.Rule(sql.FieldGT(FieldNodeKey, v))
}

// NodeKeyGTE applies the GTE predicate on the "node_key" field.
func NodeKeyGTE(v string) predicate.Rule {
	return predicate.Rule(sql.FieldGTE(FieldNodeKey, v))
}

// NodeKeyLT applies the LT predicate on the "node_key" field.
func NodeKeyLT(v string) predicate.Rule {
	return predicate.Rule(sql.FieldLT(FieldNodeKey, v))
}

// NodeKeyLTE applies the LTE predicate on the "node_key" field.
func NodeKeyLTE(v string) predicate.Rule {
	return predicate.Rule(sql.FieldLTE(FieldNodeKey, v))
}

// NodeKeyContains applies the Contains predicate on the "node_key" field.
func NodeKeyContains(v string) predicate.Rule {
	return predicate.Rule(sql.FieldContains(FieldNodeKey, v))
}

// NodeKeyHasPrefix applies the HasPrefix predicate on the "node_key" field.
func NodeKeyHasPrefix(v string) predicate.Rule {
	return predicate.Rule(sql.FieldHasPrefix(FieldNodeKey, v))
}

// NodeKeyHasSuffix applies the HasSuffix predicate on the "node_key" field.
func NodeKeyHasSuffix(v string) predicate.Rule {
	return predicate.Rule(sql.FieldHasSuffix(FieldNodeKey, v))
}

// NodeKeyIsNil applies the IsNil predicate on the "node_key" field.
func NodeKeyIsNil() predicate.Rule {
	return predicate.Rule(sql.FieldIsNull(FieldNodeKey))
}

// NodeKeyNotNil applies the NotNil predicate on the "node_key" field.
func NodeKeyNotNil() predicate.Rule {
	return predicate.Rule(sql.FieldNotNull(FieldNodeKey))
}

// NodeKeyEqualFold applies the EqualFold predicate on the "node_key" field.
func NodeKeyEqualFold(v string) predicate.Rule {
	return predicate.Rule(sql.FieldEqualFold(FieldNodeKey, v))
}

// NodeKeyContainsFold applies the ContainsFold predicate on the "node_key" field.
func NodeKeyContainsFold(v string) predicate.Rule {
	return predicate.Rule(sql.FieldContainsFold(FieldNodeKey, v))
}

// PriorityEQ applies the EQ predicate on the "priority" field.
func PriorityEQ(v int) predicate.Rule {
	return predicate.Rule(sql.FieldEQ(FieldPriority, v))
}

// PriorityNEQ applies the NEQ predicate on the "priority" field.
func PriorityNEQ(v int) predicate.Rule {
	return predicate.Rule(sql.FieldNEQ(FieldPriority, v))
}

// PriorityIn applies the In predicate on the "priority" field.
func PriorityIn(vs ...int) predicate.Rule {
	return predicate.Rule(sql.FieldIn(FieldPriority, vs...))
}

// PriorityNotIn applies the NotIn predicate on the "priority" field.
func PriorityNotIn(vs ...int) predicate.Rule {
	return predicate.Rule(sql.FieldNotIn(FieldPriority, vs...))
}

// PriorityGT applies the GT predicate on the "priority" field.
func PriorityGT(v int) predicate.Rule {
	return predicate.Rule(sql.FieldGT(FieldPriority, v))
}

// PriorityGTE applies the GTE predicate on the "priority" field.
func PriorityGTE(v int) predicate.Rule {
	return predicate.Rule(sql.FieldGTE(FieldPriority, v))
}

// PriorityLT applies the LT predicate on the "priority" field.
func PriorityLT(v int) predicate.Rule {
	return predicate.Rule(sql.FieldLT(FieldPriority, v))
}

// PriorityLTE applies the LTE predicate on the "priority" field.
func PriorityLTE(v int) predicate.Rule {
	return predicate.Rule(sql.FieldLTE(FieldPriority, v))
}

// IsEnabledEQ applies the EQ predicate on the "is_enabled" field.
func IsEnabledEQ(v bool) predicate.Rule {
	return predicate.Rule(sql.FieldEQ(FieldIsEnabled, v))
}

// IsEnabledNEQ applies the NEQ predicate on the "is_enabled" field.
func IsEnabledNEQ(v bool) predicate.Rule {
	return predicate.Rule(sql.FieldNEQ(FieldIsEnabled, v))
}

// EffectiveTimeEQ applies the EQ predicate on the "effective_time" field.
func EffectiveTimeEQ(v int64) predicate.Rule {
	return predicate.Rule(sql.FieldEQ(FieldEffectiveTime, v))
}

// EffectiveTimeNEQ applies the NEQ predicate on the "effective_time" field.
func EffectiveTimeNEQ(v int64) predicate.Rule {
	return predicate.Rule(sql.FieldNEQ(FieldEffectiveTime, v))
}

// EffectiveTimeIn applies the In predicate on the "effective_time" field.
func EffectiveTimeIn(vs ...int64) predicate.Rule {
	return predicate.Rule(sql.FieldIn(FieldEffectiveTime, vs...))
}

// EffectiveTimeNotIn applies the NotIn predicate on the "effective_time" field.
func EffectiveTimeNotIn(vs ...int64) predicate.Rule {
	return predicate.Rule(sql.FieldNotIn(FieldEffectiveTime, vs...))
}

// EffectiveTimeGT applies the GT predicate on the "effective_time" field.
func EffectiveTimeGT(v int64) predicate.Rule {
	return predicate.Rule(sql.FieldGT(FieldEffectiveTime, v))
}

// EffectiveTimeGTE applies the GTE predicate on the "effective_time" field.
func EffectiveTimeGTE(v int64) predicate.Rule {
	return predicate.Rule(sql.FieldGTE(FieldEffectiveTime, v))
}

// EffectiveTimeLT applies the LT predicate on the "effective_time" field.
func EffectiveTimeLT(v int64) predicate.Rule {
	return predicate.Rule(sql.FieldLT(FieldEffectiveTime, v))
}

// EffectiveTimeLTE applies the LTE predicate on the "effective_time" field.
func EffectiveTimeLTE(v int64) predicate.Rule {
	return predicate.Rule(sql.FieldLTE(FieldEffectiveTime, v))
}

// EffectiveTimeIsNil applies the IsNil predicate on the "effective_time" field.
func EffectiveTimeIsNil() predicate.Rule {
	return predicate.Rule(sql.FieldIsNull(FieldEffectiveTime))
}

// EffectiveTimeNotNil applies the NotNil predicate on the "effective_time" field.
func EffectiveTimeNotNil() predicate.Rule {
	return predicate.Rule(sql.FieldNotNull(FieldEffectiveTime))
}

// ExpireTimeEQ applies the EQ predicate on the "expire_time" field.
func ExpireTimeEQ(v int64) predicate.Rule {
	return predicate.Rule(sql.FieldEQ(FieldExpireTime, v))
}

// ExpireTimeNEQ applies the NEQ predicate on the "expire_time" field.
func ExpireTimeNEQ(v int64) predicate.Rule {
	return predicate.Rule(sql.FieldNEQ(FieldExpireTime, v))
}

// ExpireTimeIn applies the In predicate on the "expire_time" field.
func ExpireTimeIn(vs ...int64) predicate.Rule {
	return predicate.Rule(sql.FieldIn(FieldExpireTime, vs...))
}

// ExpireTimeNotIn applies the NotIn predicate on the "expire_time" field.
func ExpireTimeNotIn(vs ...int64) predicate.Rule {
	return predicate.Rule(sql.FieldNotIn(FieldExpireTime, vs...))
}

// ExpireTimeGT applies the GT predicate on the "expire_time" field.
func ExpireTimeGT(v int64) predicate.Rule {
	return predicate.Rule(sql.FieldGT(FieldExpireTime, v))
}

// ExpireTimeGTE applies the GTE predicate on the "expire_time" field.
func ExpireTimeGTE(v int64) predicate.Rule {
	return predicate.Rule(sql.FieldGTE(FieldExpireTime, v))
}

// ExpireTimeLT applies the LT predicate on the "expire_time" field.
func ExpireTimeLT(v int64) predicate.Rule {
	return predicate.Rule(sql.FieldLT(FieldExpireTime, v))
}

// ExpireTimeLTE applies the LTE predicate on the "expire_time" field.
func ExpireTimeLTE(v int64) predicate.Rule {
	return predicate.Rule(sql.FieldLTE(FieldExpireTime, v))
}

// ExpireTimeIsNil applies the IsNil predicate on the "expire_time" field.
func ExpireTimeIsNil() predicate.Rule {
	return predicate.Rule(sql.FieldIsNull(FieldExpireTime))
}

// ExpireTimeNotNil applies the NotNil predicate on the "expire_time" field.
func ExpireTimeNotNil() predicate.Rule {
	return predicate.Rule(sql.FieldNotNull(FieldExpireTime))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Rule) predicate.Rule {
	return predicate.Rule(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Rule) predicate.Rule {
	return predicate.Rule(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Rule) predicate.Rule {
	return predicate.Rule(sql.NotPredicates(p))
}
