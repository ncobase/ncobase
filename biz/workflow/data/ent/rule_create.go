// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/workflow/data/ent/rule"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RuleCreate is the builder for creating a Rule entity.
type RuleCreate struct {
	config
	mutation *RuleMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (rc *RuleCreate) SetName(s string) *RuleCreate {
	rc.mutation.SetName(s)
	return rc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (rc *RuleCreate) SetNillableName(s *string) *RuleCreate {
	if s != nil {
		rc.SetName(*s)
	}
	return rc
}

// SetCode sets the "code" field.
func (rc *RuleCreate) SetCode(s string) *RuleCreate {
	rc.mutation.SetCode(s)
	return rc
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (rc *RuleCreate) SetNillableCode(s *string) *RuleCreate {
	if s != nil {
		rc.SetCode(*s)
	}
	return rc
}

// SetDescription sets the "description" field.
func (rc *RuleCreate) SetDescription(s string) *RuleCreate {
	rc.mutation.SetDescription(s)
	return rc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (rc *RuleCreate) SetNillableDescription(s *string) *RuleCreate {
	if s != nil {
		rc.SetDescription(*s)
	}
	return rc
}

// SetType sets the "type" field.
func (rc *RuleCreate) SetType(s string) *RuleCreate {
	rc.mutation.SetType(s)
	return rc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (rc *RuleCreate) SetNillableType(s *string) *RuleCreate {
	if s != nil {
		rc.SetType(*s)
	}
	return rc
}

// SetStatus sets the "status" field.
func (rc *RuleCreate) SetStatus(s string) *RuleCreate {
	rc.mutation.SetStatus(s)
	return rc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (rc *RuleCreate) SetNillableStatus(s *string) *RuleCreate {
	if s != nil {
		rc.SetStatus(*s)
	}
	return rc
}

// SetExtras sets the "extras" field.
func (rc *RuleCreate) SetExtras(m map[string]interface{}) *RuleCreate {
	rc.mutation.SetExtras(m)
	return rc
}

// SetTenantID sets the "tenant_id" field.
func (rc *RuleCreate) SetTenantID(s string) *RuleCreate {
	rc.mutation.SetTenantID(s)
	return rc
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (rc *RuleCreate) SetNillableTenantID(s *string) *RuleCreate {
	if s != nil {
		rc.SetTenantID(*s)
	}
	return rc
}

// SetCreatedBy sets the "created_by" field.
func (rc *RuleCreate) SetCreatedBy(s string) *RuleCreate {
	rc.mutation.SetCreatedBy(s)
	return rc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (rc *RuleCreate) SetNillableCreatedBy(s *string) *RuleCreate {
	if s != nil {
		rc.SetCreatedBy(*s)
	}
	return rc
}

// SetUpdatedBy sets the "updated_by" field.
func (rc *RuleCreate) SetUpdatedBy(s string) *RuleCreate {
	rc.mutation.SetUpdatedBy(s)
	return rc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (rc *RuleCreate) SetNillableUpdatedBy(s *string) *RuleCreate {
	if s != nil {
		rc.SetUpdatedBy(*s)
	}
	return rc
}

// SetCreatedAt sets the "created_at" field.
func (rc *RuleCreate) SetCreatedAt(i int64) *RuleCreate {
	rc.mutation.SetCreatedAt(i)
	return rc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rc *RuleCreate) SetNillableCreatedAt(i *int64) *RuleCreate {
	if i != nil {
		rc.SetCreatedAt(*i)
	}
	return rc
}

// SetUpdatedAt sets the "updated_at" field.
func (rc *RuleCreate) SetUpdatedAt(i int64) *RuleCreate {
	rc.mutation.SetUpdatedAt(i)
	return rc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rc *RuleCreate) SetNillableUpdatedAt(i *int64) *RuleCreate {
	if i != nil {
		rc.SetUpdatedAt(*i)
	}
	return rc
}

// SetRuleKey sets the "rule_key" field.
func (rc *RuleCreate) SetRuleKey(s string) *RuleCreate {
	rc.mutation.SetRuleKey(s)
	return rc
}

// SetTemplateID sets the "template_id" field.
func (rc *RuleCreate) SetTemplateID(s string) *RuleCreate {
	rc.mutation.SetTemplateID(s)
	return rc
}

// SetNillableTemplateID sets the "template_id" field if the given value is not nil.
func (rc *RuleCreate) SetNillableTemplateID(s *string) *RuleCreate {
	if s != nil {
		rc.SetTemplateID(*s)
	}
	return rc
}

// SetNodeKey sets the "node_key" field.
func (rc *RuleCreate) SetNodeKey(s string) *RuleCreate {
	rc.mutation.SetNodeKey(s)
	return rc
}

// SetNillableNodeKey sets the "node_key" field if the given value is not nil.
func (rc *RuleCreate) SetNillableNodeKey(s *string) *RuleCreate {
	if s != nil {
		rc.SetNodeKey(*s)
	}
	return rc
}

// SetConditions sets the "conditions" field.
func (rc *RuleCreate) SetConditions(s []string) *RuleCreate {
	rc.mutation.SetConditions(s)
	return rc
}

// SetActions sets the "actions" field.
func (rc *RuleCreate) SetActions(m map[string]interface{}) *RuleCreate {
	rc.mutation.SetActions(m)
	return rc
}

// SetPriority sets the "priority" field.
func (rc *RuleCreate) SetPriority(i int) *RuleCreate {
	rc.mutation.SetPriority(i)
	return rc
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (rc *RuleCreate) SetNillablePriority(i *int) *RuleCreate {
	if i != nil {
		rc.SetPriority(*i)
	}
	return rc
}

// SetIsEnabled sets the "is_enabled" field.
func (rc *RuleCreate) SetIsEnabled(b bool) *RuleCreate {
	rc.mutation.SetIsEnabled(b)
	return rc
}

// SetNillableIsEnabled sets the "is_enabled" field if the given value is not nil.
func (rc *RuleCreate) SetNillableIsEnabled(b *bool) *RuleCreate {
	if b != nil {
		rc.SetIsEnabled(*b)
	}
	return rc
}

// SetEffectiveTime sets the "effective_time" field.
func (rc *RuleCreate) SetEffectiveTime(i int64) *RuleCreate {
	rc.mutation.SetEffectiveTime(i)
	return rc
}

// SetNillableEffectiveTime sets the "effective_time" field if the given value is not nil.
func (rc *RuleCreate) SetNillableEffectiveTime(i *int64) *RuleCreate {
	if i != nil {
		rc.SetEffectiveTime(*i)
	}
	return rc
}

// SetExpireTime sets the "expire_time" field.
func (rc *RuleCreate) SetExpireTime(i int64) *RuleCreate {
	rc.mutation.SetExpireTime(i)
	return rc
}

// SetNillableExpireTime sets the "expire_time" field if the given value is not nil.
func (rc *RuleCreate) SetNillableExpireTime(i *int64) *RuleCreate {
	if i != nil {
		rc.SetExpireTime(*i)
	}
	return rc
}

// SetID sets the "id" field.
func (rc *RuleCreate) SetID(s string) *RuleCreate {
	rc.mutation.SetID(s)
	return rc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (rc *RuleCreate) SetNillableID(s *string) *RuleCreate {
	if s != nil {
		rc.SetID(*s)
	}
	return rc
}

// Mutation returns the RuleMutation object of the builder.
func (rc *RuleCreate) Mutation() *RuleMutation {
	return rc.mutation
}

// Save creates the Rule in the database.
func (rc *RuleCreate) Save(ctx context.Context) (*Rule, error) {
	rc.defaults()
	return withHooks(ctx, rc.sqlSave, rc.mutation, rc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rc *RuleCreate) SaveX(ctx context.Context) *Rule {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *RuleCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *RuleCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rc *RuleCreate) defaults() {
	if _, ok := rc.mutation.Extras(); !ok {
		v := rule.DefaultExtras
		rc.mutation.SetExtras(v)
	}
	if _, ok := rc.mutation.CreatedAt(); !ok {
		v := rule.DefaultCreatedAt()
		rc.mutation.SetCreatedAt(v)
	}
	if _, ok := rc.mutation.UpdatedAt(); !ok {
		v := rule.DefaultUpdatedAt()
		rc.mutation.SetUpdatedAt(v)
	}
	if _, ok := rc.mutation.Priority(); !ok {
		v := rule.DefaultPriority
		rc.mutation.SetPriority(v)
	}
	if _, ok := rc.mutation.IsEnabled(); !ok {
		v := rule.DefaultIsEnabled
		rc.mutation.SetIsEnabled(v)
	}
	if _, ok := rc.mutation.ID(); !ok {
		v := rule.DefaultID()
		rc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rc *RuleCreate) check() error {
	if _, ok := rc.mutation.RuleKey(); !ok {
		return &ValidationError{Name: "rule_key", err: errors.New(`ent: missing required field "Rule.rule_key"`)}
	}
	if _, ok := rc.mutation.Conditions(); !ok {
		return &ValidationError{Name: "conditions", err: errors.New(`ent: missing required field "Rule.conditions"`)}
	}
	if _, ok := rc.mutation.Actions(); !ok {
		return &ValidationError{Name: "actions", err: errors.New(`ent: missing required field "Rule.actions"`)}
	}
	if _, ok := rc.mutation.Priority(); !ok {
		return &ValidationError{Name: "priority", err: errors.New(`ent: missing required field "Rule.priority"`)}
	}
	if _, ok := rc.mutation.IsEnabled(); !ok {
		return &ValidationError{Name: "is_enabled", err: errors.New(`ent: missing required field "Rule.is_enabled"`)}
	}
	if v, ok := rc.mutation.ID(); ok {
		if err := rule.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Rule.id": %w`, err)}
		}
	}
	return nil
}

func (rc *RuleCreate) sqlSave(ctx context.Context) (*Rule, error) {
	if err := rc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Rule.ID type: %T", _spec.ID.Value)
		}
	}
	rc.mutation.id = &_node.ID
	rc.mutation.done = true
	return _node, nil
}

func (rc *RuleCreate) createSpec() (*Rule, *sqlgraph.CreateSpec) {
	var (
		_node = &Rule{config: rc.config}
		_spec = sqlgraph.NewCreateSpec(rule.Table, sqlgraph.NewFieldSpec(rule.FieldID, field.TypeString))
	)
	if id, ok := rc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := rc.mutation.Name(); ok {
		_spec.SetField(rule.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := rc.mutation.Code(); ok {
		_spec.SetField(rule.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if value, ok := rc.mutation.Description(); ok {
		_spec.SetField(rule.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := rc.mutation.GetType(); ok {
		_spec.SetField(rule.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := rc.mutation.Status(); ok {
		_spec.SetField(rule.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := rc.mutation.Extras(); ok {
		_spec.SetField(rule.FieldExtras, field.TypeJSON, value)
		_node.Extras = value
	}
	if value, ok := rc.mutation.TenantID(); ok {
		_spec.SetField(rule.FieldTenantID, field.TypeString, value)
		_node.TenantID = value
	}
	if value, ok := rc.mutation.CreatedBy(); ok {
		_spec.SetField(rule.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := rc.mutation.UpdatedBy(); ok {
		_spec.SetField(rule.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := rc.mutation.CreatedAt(); ok {
		_spec.SetField(rule.FieldCreatedAt, field.TypeInt64, value)
		_node.CreatedAt = value
	}
	if value, ok := rc.mutation.UpdatedAt(); ok {
		_spec.SetField(rule.FieldUpdatedAt, field.TypeInt64, value)
		_node.UpdatedAt = value
	}
	if value, ok := rc.mutation.RuleKey(); ok {
		_spec.SetField(rule.FieldRuleKey, field.TypeString, value)
		_node.RuleKey = value
	}
	if value, ok := rc.mutation.TemplateID(); ok {
		_spec.SetField(rule.FieldTemplateID, field.TypeString, value)
		_node.TemplateID = value
	}
	if value, ok := rc.mutation.NodeKey(); ok {
		_spec.SetField(rule.FieldNodeKey, field.TypeString, value)
		_node.NodeKey = value
	}
	if value, ok := rc.mutation.Conditions(); ok {
		_spec.SetField(rule.FieldConditions, field.TypeJSON, value)
		_node.Conditions = value
	}
	if value, ok := rc.mutation.Actions(); ok {
		_spec.SetField(rule.FieldActions, field.TypeJSON, value)
		_node.Actions = value
	}
	if value, ok := rc.mutation.Priority(); ok {
		_spec.SetField(rule.FieldPriority, field.TypeInt, value)
		_node.Priority = value
	}
	if value, ok := rc.mutation.IsEnabled(); ok {
		_spec.SetField(rule.FieldIsEnabled, field.TypeBool, value)
		_node.IsEnabled = value
	}
	if value, ok := rc.mutation.EffectiveTime(); ok {
		_spec.SetField(rule.FieldEffectiveTime, field.TypeInt64, value)
		_node.EffectiveTime = value
	}
	if value, ok := rc.mutation.ExpireTime(); ok {
		_spec.SetField(rule.FieldExpireTime, field.TypeInt64, value)
		_node.ExpireTime = value
	}
	return _node, _spec
}

// RuleCreateBulk is the builder for creating many Rule entities in bulk.
type RuleCreateBulk struct {
	config
	err      error
	builders []*RuleCreate
}

// Save creates the Rule entities in the database.
func (rcb *RuleCreateBulk) Save(ctx context.Context) ([]*Rule, error) {
	if rcb.err != nil {
		return nil, rcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Rule, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RuleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *RuleCreateBulk) SaveX(ctx context.Context) []*Rule {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *RuleCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *RuleCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}
