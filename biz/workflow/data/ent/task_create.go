// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/workflow/data/ent/task"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TaskCreate is the builder for creating a Task entity.
type TaskCreate struct {
	config
	mutation *TaskMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (tc *TaskCreate) SetName(s string) *TaskCreate {
	tc.mutation.SetName(s)
	return tc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tc *TaskCreate) SetNillableName(s *string) *TaskCreate {
	if s != nil {
		tc.SetName(*s)
	}
	return tc
}

// SetDescription sets the "description" field.
func (tc *TaskCreate) SetDescription(s string) *TaskCreate {
	tc.mutation.SetDescription(s)
	return tc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tc *TaskCreate) SetNillableDescription(s *string) *TaskCreate {
	if s != nil {
		tc.SetDescription(*s)
	}
	return tc
}

// SetStatus sets the "status" field.
func (tc *TaskCreate) SetStatus(s string) *TaskCreate {
	tc.mutation.SetStatus(s)
	return tc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tc *TaskCreate) SetNillableStatus(s *string) *TaskCreate {
	if s != nil {
		tc.SetStatus(*s)
	}
	return tc
}

// SetProcessID sets the "process_id" field.
func (tc *TaskCreate) SetProcessID(s string) *TaskCreate {
	tc.mutation.SetProcessID(s)
	return tc
}

// SetTemplateID sets the "template_id" field.
func (tc *TaskCreate) SetTemplateID(s string) *TaskCreate {
	tc.mutation.SetTemplateID(s)
	return tc
}

// SetBusinessKey sets the "business_key" field.
func (tc *TaskCreate) SetBusinessKey(s string) *TaskCreate {
	tc.mutation.SetBusinessKey(s)
	return tc
}

// SetNodeKey sets the "node_key" field.
func (tc *TaskCreate) SetNodeKey(s string) *TaskCreate {
	tc.mutation.SetNodeKey(s)
	return tc
}

// SetNodeType sets the "node_type" field.
func (tc *TaskCreate) SetNodeType(s string) *TaskCreate {
	tc.mutation.SetNodeType(s)
	return tc
}

// SetNodeConfig sets the "node_config" field.
func (tc *TaskCreate) SetNodeConfig(m map[string]interface{}) *TaskCreate {
	tc.mutation.SetNodeConfig(m)
	return tc
}

// SetNodeRules sets the "node_rules" field.
func (tc *TaskCreate) SetNodeRules(m map[string]interface{}) *TaskCreate {
	tc.mutation.SetNodeRules(m)
	return tc
}

// SetNodeEvents sets the "node_events" field.
func (tc *TaskCreate) SetNodeEvents(m map[string]interface{}) *TaskCreate {
	tc.mutation.SetNodeEvents(m)
	return tc
}

// SetAssignees sets the "assignees" field.
func (tc *TaskCreate) SetAssignees(s []string) *TaskCreate {
	tc.mutation.SetAssignees(s)
	return tc
}

// SetCandidates sets the "candidates" field.
func (tc *TaskCreate) SetCandidates(s []string) *TaskCreate {
	tc.mutation.SetCandidates(s)
	return tc
}

// SetDelegatedFrom sets the "delegated_from" field.
func (tc *TaskCreate) SetDelegatedFrom(s string) *TaskCreate {
	tc.mutation.SetDelegatedFrom(s)
	return tc
}

// SetNillableDelegatedFrom sets the "delegated_from" field if the given value is not nil.
func (tc *TaskCreate) SetNillableDelegatedFrom(s *string) *TaskCreate {
	if s != nil {
		tc.SetDelegatedFrom(*s)
	}
	return tc
}

// SetDelegatedReason sets the "delegated_reason" field.
func (tc *TaskCreate) SetDelegatedReason(s string) *TaskCreate {
	tc.mutation.SetDelegatedReason(s)
	return tc
}

// SetNillableDelegatedReason sets the "delegated_reason" field if the given value is not nil.
func (tc *TaskCreate) SetNillableDelegatedReason(s *string) *TaskCreate {
	if s != nil {
		tc.SetDelegatedReason(*s)
	}
	return tc
}

// SetIsDelegated sets the "is_delegated" field.
func (tc *TaskCreate) SetIsDelegated(b bool) *TaskCreate {
	tc.mutation.SetIsDelegated(b)
	return tc
}

// SetNillableIsDelegated sets the "is_delegated" field if the given value is not nil.
func (tc *TaskCreate) SetNillableIsDelegated(b *bool) *TaskCreate {
	if b != nil {
		tc.SetIsDelegated(*b)
	}
	return tc
}

// SetIsTransferred sets the "is_transferred" field.
func (tc *TaskCreate) SetIsTransferred(b bool) *TaskCreate {
	tc.mutation.SetIsTransferred(b)
	return tc
}

// SetNillableIsTransferred sets the "is_transferred" field if the given value is not nil.
func (tc *TaskCreate) SetNillableIsTransferred(b *bool) *TaskCreate {
	if b != nil {
		tc.SetIsTransferred(*b)
	}
	return tc
}

// SetStartTime sets the "start_time" field.
func (tc *TaskCreate) SetStartTime(i int64) *TaskCreate {
	tc.mutation.SetStartTime(i)
	return tc
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (tc *TaskCreate) SetNillableStartTime(i *int64) *TaskCreate {
	if i != nil {
		tc.SetStartTime(*i)
	}
	return tc
}

// SetEndTime sets the "end_time" field.
func (tc *TaskCreate) SetEndTime(i int64) *TaskCreate {
	tc.mutation.SetEndTime(i)
	return tc
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (tc *TaskCreate) SetNillableEndTime(i *int64) *TaskCreate {
	if i != nil {
		tc.SetEndTime(*i)
	}
	return tc
}

// SetDueTime sets the "due_time" field.
func (tc *TaskCreate) SetDueTime(i int64) *TaskCreate {
	tc.mutation.SetDueTime(i)
	return tc
}

// SetNillableDueTime sets the "due_time" field if the given value is not nil.
func (tc *TaskCreate) SetNillableDueTime(i *int64) *TaskCreate {
	if i != nil {
		tc.SetDueTime(*i)
	}
	return tc
}

// SetDuration sets the "duration" field.
func (tc *TaskCreate) SetDuration(i int) *TaskCreate {
	tc.mutation.SetDuration(i)
	return tc
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (tc *TaskCreate) SetNillableDuration(i *int) *TaskCreate {
	if i != nil {
		tc.SetDuration(*i)
	}
	return tc
}

// SetPriority sets the "priority" field.
func (tc *TaskCreate) SetPriority(i int) *TaskCreate {
	tc.mutation.SetPriority(i)
	return tc
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (tc *TaskCreate) SetNillablePriority(i *int) *TaskCreate {
	if i != nil {
		tc.SetPriority(*i)
	}
	return tc
}

// SetIsTimeout sets the "is_timeout" field.
func (tc *TaskCreate) SetIsTimeout(b bool) *TaskCreate {
	tc.mutation.SetIsTimeout(b)
	return tc
}

// SetNillableIsTimeout sets the "is_timeout" field if the given value is not nil.
func (tc *TaskCreate) SetNillableIsTimeout(b *bool) *TaskCreate {
	if b != nil {
		tc.SetIsTimeout(*b)
	}
	return tc
}

// SetReminderCount sets the "reminder_count" field.
func (tc *TaskCreate) SetReminderCount(i int) *TaskCreate {
	tc.mutation.SetReminderCount(i)
	return tc
}

// SetNillableReminderCount sets the "reminder_count" field if the given value is not nil.
func (tc *TaskCreate) SetNillableReminderCount(i *int) *TaskCreate {
	if i != nil {
		tc.SetReminderCount(*i)
	}
	return tc
}

// SetAllowCancel sets the "allow_cancel" field.
func (tc *TaskCreate) SetAllowCancel(b bool) *TaskCreate {
	tc.mutation.SetAllowCancel(b)
	return tc
}

// SetNillableAllowCancel sets the "allow_cancel" field if the given value is not nil.
func (tc *TaskCreate) SetNillableAllowCancel(b *bool) *TaskCreate {
	if b != nil {
		tc.SetAllowCancel(*b)
	}
	return tc
}

// SetAllowUrge sets the "allow_urge" field.
func (tc *TaskCreate) SetAllowUrge(b bool) *TaskCreate {
	tc.mutation.SetAllowUrge(b)
	return tc
}

// SetNillableAllowUrge sets the "allow_urge" field if the given value is not nil.
func (tc *TaskCreate) SetNillableAllowUrge(b *bool) *TaskCreate {
	if b != nil {
		tc.SetAllowUrge(*b)
	}
	return tc
}

// SetAllowDelegate sets the "allow_delegate" field.
func (tc *TaskCreate) SetAllowDelegate(b bool) *TaskCreate {
	tc.mutation.SetAllowDelegate(b)
	return tc
}

// SetNillableAllowDelegate sets the "allow_delegate" field if the given value is not nil.
func (tc *TaskCreate) SetNillableAllowDelegate(b *bool) *TaskCreate {
	if b != nil {
		tc.SetAllowDelegate(*b)
	}
	return tc
}

// SetAllowTransfer sets the "allow_transfer" field.
func (tc *TaskCreate) SetAllowTransfer(b bool) *TaskCreate {
	tc.mutation.SetAllowTransfer(b)
	return tc
}

// SetNillableAllowTransfer sets the "allow_transfer" field if the given value is not nil.
func (tc *TaskCreate) SetNillableAllowTransfer(b *bool) *TaskCreate {
	if b != nil {
		tc.SetAllowTransfer(*b)
	}
	return tc
}

// SetIsDraftEnabled sets the "is_draft_enabled" field.
func (tc *TaskCreate) SetIsDraftEnabled(b bool) *TaskCreate {
	tc.mutation.SetIsDraftEnabled(b)
	return tc
}

// SetNillableIsDraftEnabled sets the "is_draft_enabled" field if the given value is not nil.
func (tc *TaskCreate) SetNillableIsDraftEnabled(b *bool) *TaskCreate {
	if b != nil {
		tc.SetIsDraftEnabled(*b)
	}
	return tc
}

// SetIsAutoStart sets the "is_auto_start" field.
func (tc *TaskCreate) SetIsAutoStart(b bool) *TaskCreate {
	tc.mutation.SetIsAutoStart(b)
	return tc
}

// SetNillableIsAutoStart sets the "is_auto_start" field if the given value is not nil.
func (tc *TaskCreate) SetNillableIsAutoStart(b *bool) *TaskCreate {
	if b != nil {
		tc.SetIsAutoStart(*b)
	}
	return tc
}

// SetStrictMode sets the "strict_mode" field.
func (tc *TaskCreate) SetStrictMode(b bool) *TaskCreate {
	tc.mutation.SetStrictMode(b)
	return tc
}

// SetNillableStrictMode sets the "strict_mode" field if the given value is not nil.
func (tc *TaskCreate) SetNillableStrictMode(b *bool) *TaskCreate {
	if b != nil {
		tc.SetStrictMode(*b)
	}
	return tc
}

// SetExtras sets the "extras" field.
func (tc *TaskCreate) SetExtras(m map[string]interface{}) *TaskCreate {
	tc.mutation.SetExtras(m)
	return tc
}

// SetSpaceID sets the "space_id" field.
func (tc *TaskCreate) SetSpaceID(s string) *TaskCreate {
	tc.mutation.SetSpaceID(s)
	return tc
}

// SetNillableSpaceID sets the "space_id" field if the given value is not nil.
func (tc *TaskCreate) SetNillableSpaceID(s *string) *TaskCreate {
	if s != nil {
		tc.SetSpaceID(*s)
	}
	return tc
}

// SetCreatedBy sets the "created_by" field.
func (tc *TaskCreate) SetCreatedBy(s string) *TaskCreate {
	tc.mutation.SetCreatedBy(s)
	return tc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (tc *TaskCreate) SetNillableCreatedBy(s *string) *TaskCreate {
	if s != nil {
		tc.SetCreatedBy(*s)
	}
	return tc
}

// SetUpdatedBy sets the "updated_by" field.
func (tc *TaskCreate) SetUpdatedBy(s string) *TaskCreate {
	tc.mutation.SetUpdatedBy(s)
	return tc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (tc *TaskCreate) SetNillableUpdatedBy(s *string) *TaskCreate {
	if s != nil {
		tc.SetUpdatedBy(*s)
	}
	return tc
}

// SetCreatedAt sets the "created_at" field.
func (tc *TaskCreate) SetCreatedAt(i int64) *TaskCreate {
	tc.mutation.SetCreatedAt(i)
	return tc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tc *TaskCreate) SetNillableCreatedAt(i *int64) *TaskCreate {
	if i != nil {
		tc.SetCreatedAt(*i)
	}
	return tc
}

// SetUpdatedAt sets the "updated_at" field.
func (tc *TaskCreate) SetUpdatedAt(i int64) *TaskCreate {
	tc.mutation.SetUpdatedAt(i)
	return tc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tc *TaskCreate) SetNillableUpdatedAt(i *int64) *TaskCreate {
	if i != nil {
		tc.SetUpdatedAt(*i)
	}
	return tc
}

// SetTaskKey sets the "task_key" field.
func (tc *TaskCreate) SetTaskKey(s string) *TaskCreate {
	tc.mutation.SetTaskKey(s)
	return tc
}

// SetParentID sets the "parent_id" field.
func (tc *TaskCreate) SetParentID(s string) *TaskCreate {
	tc.mutation.SetParentID(s)
	return tc
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (tc *TaskCreate) SetNillableParentID(s *string) *TaskCreate {
	if s != nil {
		tc.SetParentID(*s)
	}
	return tc
}

// SetChildIds sets the "child_ids" field.
func (tc *TaskCreate) SetChildIds(s []string) *TaskCreate {
	tc.mutation.SetChildIds(s)
	return tc
}

// SetAction sets the "action" field.
func (tc *TaskCreate) SetAction(s string) *TaskCreate {
	tc.mutation.SetAction(s)
	return tc
}

// SetNillableAction sets the "action" field if the given value is not nil.
func (tc *TaskCreate) SetNillableAction(s *string) *TaskCreate {
	if s != nil {
		tc.SetAction(*s)
	}
	return tc
}

// SetComment sets the "comment" field.
func (tc *TaskCreate) SetComment(s string) *TaskCreate {
	tc.mutation.SetComment(s)
	return tc
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (tc *TaskCreate) SetNillableComment(s *string) *TaskCreate {
	if s != nil {
		tc.SetComment(*s)
	}
	return tc
}

// SetAttachments sets the "attachments" field.
func (tc *TaskCreate) SetAttachments(m map[string]interface{}) *TaskCreate {
	tc.mutation.SetAttachments(m)
	return tc
}

// SetFormData sets the "form_data" field.
func (tc *TaskCreate) SetFormData(m map[string]interface{}) *TaskCreate {
	tc.mutation.SetFormData(m)
	return tc
}

// SetVariables sets the "variables" field.
func (tc *TaskCreate) SetVariables(m map[string]interface{}) *TaskCreate {
	tc.mutation.SetVariables(m)
	return tc
}

// SetIsResubmit sets the "is_resubmit" field.
func (tc *TaskCreate) SetIsResubmit(b bool) *TaskCreate {
	tc.mutation.SetIsResubmit(b)
	return tc
}

// SetNillableIsResubmit sets the "is_resubmit" field if the given value is not nil.
func (tc *TaskCreate) SetNillableIsResubmit(b *bool) *TaskCreate {
	if b != nil {
		tc.SetIsResubmit(*b)
	}
	return tc
}

// SetClaimTime sets the "claim_time" field.
func (tc *TaskCreate) SetClaimTime(i int64) *TaskCreate {
	tc.mutation.SetClaimTime(i)
	return tc
}

// SetNillableClaimTime sets the "claim_time" field if the given value is not nil.
func (tc *TaskCreate) SetNillableClaimTime(i *int64) *TaskCreate {
	if i != nil {
		tc.SetClaimTime(*i)
	}
	return tc
}

// SetIsUrged sets the "is_urged" field.
func (tc *TaskCreate) SetIsUrged(b bool) *TaskCreate {
	tc.mutation.SetIsUrged(b)
	return tc
}

// SetNillableIsUrged sets the "is_urged" field if the given value is not nil.
func (tc *TaskCreate) SetNillableIsUrged(b *bool) *TaskCreate {
	if b != nil {
		tc.SetIsUrged(*b)
	}
	return tc
}

// SetUrgeCount sets the "urge_count" field.
func (tc *TaskCreate) SetUrgeCount(i int) *TaskCreate {
	tc.mutation.SetUrgeCount(i)
	return tc
}

// SetNillableUrgeCount sets the "urge_count" field if the given value is not nil.
func (tc *TaskCreate) SetNillableUrgeCount(i *int) *TaskCreate {
	if i != nil {
		tc.SetUrgeCount(*i)
	}
	return tc
}

// SetID sets the "id" field.
func (tc *TaskCreate) SetID(s string) *TaskCreate {
	tc.mutation.SetID(s)
	return tc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (tc *TaskCreate) SetNillableID(s *string) *TaskCreate {
	if s != nil {
		tc.SetID(*s)
	}
	return tc
}

// Mutation returns the TaskMutation object of the builder.
func (tc *TaskCreate) Mutation() *TaskMutation {
	return tc.mutation
}

// Save creates the Task in the database.
func (tc *TaskCreate) Save(ctx context.Context) (*Task, error) {
	tc.defaults()
	return withHooks(ctx, tc.sqlSave, tc.mutation, tc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TaskCreate) SaveX(ctx context.Context) *Task {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TaskCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TaskCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *TaskCreate) defaults() {
	if _, ok := tc.mutation.IsDelegated(); !ok {
		v := task.DefaultIsDelegated
		tc.mutation.SetIsDelegated(v)
	}
	if _, ok := tc.mutation.IsTransferred(); !ok {
		v := task.DefaultIsTransferred
		tc.mutation.SetIsTransferred(v)
	}
	if _, ok := tc.mutation.StartTime(); !ok {
		v := task.DefaultStartTime()
		tc.mutation.SetStartTime(v)
	}
	if _, ok := tc.mutation.Priority(); !ok {
		v := task.DefaultPriority
		tc.mutation.SetPriority(v)
	}
	if _, ok := tc.mutation.IsTimeout(); !ok {
		v := task.DefaultIsTimeout
		tc.mutation.SetIsTimeout(v)
	}
	if _, ok := tc.mutation.ReminderCount(); !ok {
		v := task.DefaultReminderCount
		tc.mutation.SetReminderCount(v)
	}
	if _, ok := tc.mutation.AllowCancel(); !ok {
		v := task.DefaultAllowCancel
		tc.mutation.SetAllowCancel(v)
	}
	if _, ok := tc.mutation.AllowUrge(); !ok {
		v := task.DefaultAllowUrge
		tc.mutation.SetAllowUrge(v)
	}
	if _, ok := tc.mutation.AllowDelegate(); !ok {
		v := task.DefaultAllowDelegate
		tc.mutation.SetAllowDelegate(v)
	}
	if _, ok := tc.mutation.AllowTransfer(); !ok {
		v := task.DefaultAllowTransfer
		tc.mutation.SetAllowTransfer(v)
	}
	if _, ok := tc.mutation.IsDraftEnabled(); !ok {
		v := task.DefaultIsDraftEnabled
		tc.mutation.SetIsDraftEnabled(v)
	}
	if _, ok := tc.mutation.IsAutoStart(); !ok {
		v := task.DefaultIsAutoStart
		tc.mutation.SetIsAutoStart(v)
	}
	if _, ok := tc.mutation.StrictMode(); !ok {
		v := task.DefaultStrictMode
		tc.mutation.SetStrictMode(v)
	}
	if _, ok := tc.mutation.Extras(); !ok {
		v := task.DefaultExtras
		tc.mutation.SetExtras(v)
	}
	if _, ok := tc.mutation.CreatedAt(); !ok {
		v := task.DefaultCreatedAt()
		tc.mutation.SetCreatedAt(v)
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		v := task.DefaultUpdatedAt()
		tc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tc.mutation.ChildIds(); !ok {
		v := task.DefaultChildIds
		tc.mutation.SetChildIds(v)
	}
	if _, ok := tc.mutation.IsResubmit(); !ok {
		v := task.DefaultIsResubmit
		tc.mutation.SetIsResubmit(v)
	}
	if _, ok := tc.mutation.IsUrged(); !ok {
		v := task.DefaultIsUrged
		tc.mutation.SetIsUrged(v)
	}
	if _, ok := tc.mutation.UrgeCount(); !ok {
		v := task.DefaultUrgeCount
		tc.mutation.SetUrgeCount(v)
	}
	if _, ok := tc.mutation.ID(); !ok {
		v := task.DefaultID()
		tc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TaskCreate) check() error {
	if _, ok := tc.mutation.ProcessID(); !ok {
		return &ValidationError{Name: "process_id", err: errors.New(`ent: missing required field "Task.process_id"`)}
	}
	if _, ok := tc.mutation.TemplateID(); !ok {
		return &ValidationError{Name: "template_id", err: errors.New(`ent: missing required field "Task.template_id"`)}
	}
	if _, ok := tc.mutation.BusinessKey(); !ok {
		return &ValidationError{Name: "business_key", err: errors.New(`ent: missing required field "Task.business_key"`)}
	}
	if _, ok := tc.mutation.NodeKey(); !ok {
		return &ValidationError{Name: "node_key", err: errors.New(`ent: missing required field "Task.node_key"`)}
	}
	if _, ok := tc.mutation.NodeType(); !ok {
		return &ValidationError{Name: "node_type", err: errors.New(`ent: missing required field "Task.node_type"`)}
	}
	if _, ok := tc.mutation.Assignees(); !ok {
		return &ValidationError{Name: "assignees", err: errors.New(`ent: missing required field "Task.assignees"`)}
	}
	if _, ok := tc.mutation.Candidates(); !ok {
		return &ValidationError{Name: "candidates", err: errors.New(`ent: missing required field "Task.candidates"`)}
	}
	if _, ok := tc.mutation.IsDelegated(); !ok {
		return &ValidationError{Name: "is_delegated", err: errors.New(`ent: missing required field "Task.is_delegated"`)}
	}
	if _, ok := tc.mutation.IsTransferred(); !ok {
		return &ValidationError{Name: "is_transferred", err: errors.New(`ent: missing required field "Task.is_transferred"`)}
	}
	if _, ok := tc.mutation.StartTime(); !ok {
		return &ValidationError{Name: "start_time", err: errors.New(`ent: missing required field "Task.start_time"`)}
	}
	if _, ok := tc.mutation.Priority(); !ok {
		return &ValidationError{Name: "priority", err: errors.New(`ent: missing required field "Task.priority"`)}
	}
	if _, ok := tc.mutation.IsTimeout(); !ok {
		return &ValidationError{Name: "is_timeout", err: errors.New(`ent: missing required field "Task.is_timeout"`)}
	}
	if _, ok := tc.mutation.ReminderCount(); !ok {
		return &ValidationError{Name: "reminder_count", err: errors.New(`ent: missing required field "Task.reminder_count"`)}
	}
	if _, ok := tc.mutation.AllowCancel(); !ok {
		return &ValidationError{Name: "allow_cancel", err: errors.New(`ent: missing required field "Task.allow_cancel"`)}
	}
	if _, ok := tc.mutation.AllowUrge(); !ok {
		return &ValidationError{Name: "allow_urge", err: errors.New(`ent: missing required field "Task.allow_urge"`)}
	}
	if _, ok := tc.mutation.AllowDelegate(); !ok {
		return &ValidationError{Name: "allow_delegate", err: errors.New(`ent: missing required field "Task.allow_delegate"`)}
	}
	if _, ok := tc.mutation.AllowTransfer(); !ok {
		return &ValidationError{Name: "allow_transfer", err: errors.New(`ent: missing required field "Task.allow_transfer"`)}
	}
	if _, ok := tc.mutation.IsDraftEnabled(); !ok {
		return &ValidationError{Name: "is_draft_enabled", err: errors.New(`ent: missing required field "Task.is_draft_enabled"`)}
	}
	if _, ok := tc.mutation.IsAutoStart(); !ok {
		return &ValidationError{Name: "is_auto_start", err: errors.New(`ent: missing required field "Task.is_auto_start"`)}
	}
	if _, ok := tc.mutation.StrictMode(); !ok {
		return &ValidationError{Name: "strict_mode", err: errors.New(`ent: missing required field "Task.strict_mode"`)}
	}
	if _, ok := tc.mutation.TaskKey(); !ok {
		return &ValidationError{Name: "task_key", err: errors.New(`ent: missing required field "Task.task_key"`)}
	}
	if _, ok := tc.mutation.ChildIds(); !ok {
		return &ValidationError{Name: "child_ids", err: errors.New(`ent: missing required field "Task.child_ids"`)}
	}
	if _, ok := tc.mutation.IsResubmit(); !ok {
		return &ValidationError{Name: "is_resubmit", err: errors.New(`ent: missing required field "Task.is_resubmit"`)}
	}
	if _, ok := tc.mutation.IsUrged(); !ok {
		return &ValidationError{Name: "is_urged", err: errors.New(`ent: missing required field "Task.is_urged"`)}
	}
	if _, ok := tc.mutation.UrgeCount(); !ok {
		return &ValidationError{Name: "urge_count", err: errors.New(`ent: missing required field "Task.urge_count"`)}
	}
	if v, ok := tc.mutation.ID(); ok {
		if err := task.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Task.id": %w`, err)}
		}
	}
	return nil
}

func (tc *TaskCreate) sqlSave(ctx context.Context) (*Task, error) {
	if err := tc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Task.ID type: %T", _spec.ID.Value)
		}
	}
	tc.mutation.id = &_node.ID
	tc.mutation.done = true
	return _node, nil
}

func (tc *TaskCreate) createSpec() (*Task, *sqlgraph.CreateSpec) {
	var (
		_node = &Task{config: tc.config}
		_spec = sqlgraph.NewCreateSpec(task.Table, sqlgraph.NewFieldSpec(task.FieldID, field.TypeString))
	)
	if id, ok := tc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tc.mutation.Name(); ok {
		_spec.SetField(task.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := tc.mutation.Description(); ok {
		_spec.SetField(task.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := tc.mutation.Status(); ok {
		_spec.SetField(task.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := tc.mutation.ProcessID(); ok {
		_spec.SetField(task.FieldProcessID, field.TypeString, value)
		_node.ProcessID = value
	}
	if value, ok := tc.mutation.TemplateID(); ok {
		_spec.SetField(task.FieldTemplateID, field.TypeString, value)
		_node.TemplateID = value
	}
	if value, ok := tc.mutation.BusinessKey(); ok {
		_spec.SetField(task.FieldBusinessKey, field.TypeString, value)
		_node.BusinessKey = value
	}
	if value, ok := tc.mutation.NodeKey(); ok {
		_spec.SetField(task.FieldNodeKey, field.TypeString, value)
		_node.NodeKey = value
	}
	if value, ok := tc.mutation.NodeType(); ok {
		_spec.SetField(task.FieldNodeType, field.TypeString, value)
		_node.NodeType = value
	}
	if value, ok := tc.mutation.NodeConfig(); ok {
		_spec.SetField(task.FieldNodeConfig, field.TypeJSON, value)
		_node.NodeConfig = value
	}
	if value, ok := tc.mutation.NodeRules(); ok {
		_spec.SetField(task.FieldNodeRules, field.TypeJSON, value)
		_node.NodeRules = value
	}
	if value, ok := tc.mutation.NodeEvents(); ok {
		_spec.SetField(task.FieldNodeEvents, field.TypeJSON, value)
		_node.NodeEvents = value
	}
	if value, ok := tc.mutation.Assignees(); ok {
		_spec.SetField(task.FieldAssignees, field.TypeJSON, value)
		_node.Assignees = value
	}
	if value, ok := tc.mutation.Candidates(); ok {
		_spec.SetField(task.FieldCandidates, field.TypeJSON, value)
		_node.Candidates = value
	}
	if value, ok := tc.mutation.DelegatedFrom(); ok {
		_spec.SetField(task.FieldDelegatedFrom, field.TypeString, value)
		_node.DelegatedFrom = value
	}
	if value, ok := tc.mutation.DelegatedReason(); ok {
		_spec.SetField(task.FieldDelegatedReason, field.TypeString, value)
		_node.DelegatedReason = value
	}
	if value, ok := tc.mutation.IsDelegated(); ok {
		_spec.SetField(task.FieldIsDelegated, field.TypeBool, value)
		_node.IsDelegated = value
	}
	if value, ok := tc.mutation.IsTransferred(); ok {
		_spec.SetField(task.FieldIsTransferred, field.TypeBool, value)
		_node.IsTransferred = value
	}
	if value, ok := tc.mutation.StartTime(); ok {
		_spec.SetField(task.FieldStartTime, field.TypeInt64, value)
		_node.StartTime = value
	}
	if value, ok := tc.mutation.EndTime(); ok {
		_spec.SetField(task.FieldEndTime, field.TypeInt64, value)
		_node.EndTime = &value
	}
	if value, ok := tc.mutation.DueTime(); ok {
		_spec.SetField(task.FieldDueTime, field.TypeInt64, value)
		_node.DueTime = &value
	}
	if value, ok := tc.mutation.Duration(); ok {
		_spec.SetField(task.FieldDuration, field.TypeInt, value)
		_node.Duration = value
	}
	if value, ok := tc.mutation.Priority(); ok {
		_spec.SetField(task.FieldPriority, field.TypeInt, value)
		_node.Priority = value
	}
	if value, ok := tc.mutation.IsTimeout(); ok {
		_spec.SetField(task.FieldIsTimeout, field.TypeBool, value)
		_node.IsTimeout = value
	}
	if value, ok := tc.mutation.ReminderCount(); ok {
		_spec.SetField(task.FieldReminderCount, field.TypeInt, value)
		_node.ReminderCount = value
	}
	if value, ok := tc.mutation.AllowCancel(); ok {
		_spec.SetField(task.FieldAllowCancel, field.TypeBool, value)
		_node.AllowCancel = value
	}
	if value, ok := tc.mutation.AllowUrge(); ok {
		_spec.SetField(task.FieldAllowUrge, field.TypeBool, value)
		_node.AllowUrge = value
	}
	if value, ok := tc.mutation.AllowDelegate(); ok {
		_spec.SetField(task.FieldAllowDelegate, field.TypeBool, value)
		_node.AllowDelegate = value
	}
	if value, ok := tc.mutation.AllowTransfer(); ok {
		_spec.SetField(task.FieldAllowTransfer, field.TypeBool, value)
		_node.AllowTransfer = value
	}
	if value, ok := tc.mutation.IsDraftEnabled(); ok {
		_spec.SetField(task.FieldIsDraftEnabled, field.TypeBool, value)
		_node.IsDraftEnabled = value
	}
	if value, ok := tc.mutation.IsAutoStart(); ok {
		_spec.SetField(task.FieldIsAutoStart, field.TypeBool, value)
		_node.IsAutoStart = value
	}
	if value, ok := tc.mutation.StrictMode(); ok {
		_spec.SetField(task.FieldStrictMode, field.TypeBool, value)
		_node.StrictMode = value
	}
	if value, ok := tc.mutation.Extras(); ok {
		_spec.SetField(task.FieldExtras, field.TypeJSON, value)
		_node.Extras = value
	}
	if value, ok := tc.mutation.SpaceID(); ok {
		_spec.SetField(task.FieldSpaceID, field.TypeString, value)
		_node.SpaceID = value
	}
	if value, ok := tc.mutation.CreatedBy(); ok {
		_spec.SetField(task.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := tc.mutation.UpdatedBy(); ok {
		_spec.SetField(task.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := tc.mutation.CreatedAt(); ok {
		_spec.SetField(task.FieldCreatedAt, field.TypeInt64, value)
		_node.CreatedAt = value
	}
	if value, ok := tc.mutation.UpdatedAt(); ok {
		_spec.SetField(task.FieldUpdatedAt, field.TypeInt64, value)
		_node.UpdatedAt = value
	}
	if value, ok := tc.mutation.TaskKey(); ok {
		_spec.SetField(task.FieldTaskKey, field.TypeString, value)
		_node.TaskKey = value
	}
	if value, ok := tc.mutation.ParentID(); ok {
		_spec.SetField(task.FieldParentID, field.TypeString, value)
		_node.ParentID = value
	}
	if value, ok := tc.mutation.ChildIds(); ok {
		_spec.SetField(task.FieldChildIds, field.TypeJSON, value)
		_node.ChildIds = value
	}
	if value, ok := tc.mutation.Action(); ok {
		_spec.SetField(task.FieldAction, field.TypeString, value)
		_node.Action = value
	}
	if value, ok := tc.mutation.Comment(); ok {
		_spec.SetField(task.FieldComment, field.TypeString, value)
		_node.Comment = value
	}
	if value, ok := tc.mutation.Attachments(); ok {
		_spec.SetField(task.FieldAttachments, field.TypeJSON, value)
		_node.Attachments = value
	}
	if value, ok := tc.mutation.FormData(); ok {
		_spec.SetField(task.FieldFormData, field.TypeJSON, value)
		_node.FormData = value
	}
	if value, ok := tc.mutation.Variables(); ok {
		_spec.SetField(task.FieldVariables, field.TypeJSON, value)
		_node.Variables = value
	}
	if value, ok := tc.mutation.IsResubmit(); ok {
		_spec.SetField(task.FieldIsResubmit, field.TypeBool, value)
		_node.IsResubmit = value
	}
	if value, ok := tc.mutation.ClaimTime(); ok {
		_spec.SetField(task.FieldClaimTime, field.TypeInt64, value)
		_node.ClaimTime = &value
	}
	if value, ok := tc.mutation.IsUrged(); ok {
		_spec.SetField(task.FieldIsUrged, field.TypeBool, value)
		_node.IsUrged = value
	}
	if value, ok := tc.mutation.UrgeCount(); ok {
		_spec.SetField(task.FieldUrgeCount, field.TypeInt, value)
		_node.UrgeCount = value
	}
	return _node, _spec
}

// TaskCreateBulk is the builder for creating many Task entities in bulk.
type TaskCreateBulk struct {
	config
	err      error
	builders []*TaskCreate
}

// Save creates the Task entities in the database.
func (tcb *TaskCreateBulk) Save(ctx context.Context) ([]*Task, error) {
	if tcb.err != nil {
		return nil, tcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Task, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TaskMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TaskCreateBulk) SaveX(ctx context.Context) []*Task {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TaskCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TaskCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}
