// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/workflow/data/ent/predicate"
	"ncobase/workflow/data/ent/task"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// TaskUpdate is the builder for updating Task entities.
type TaskUpdate struct {
	config
	hooks    []Hook
	mutation *TaskMutation
}

// Where appends a list predicates to the TaskUpdate builder.
func (tu *TaskUpdate) Where(ps ...predicate.Task) *TaskUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetName sets the "name" field.
func (tu *TaskUpdate) SetName(s string) *TaskUpdate {
	tu.mutation.SetName(s)
	return tu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableName(s *string) *TaskUpdate {
	if s != nil {
		tu.SetName(*s)
	}
	return tu
}

// ClearName clears the value of the "name" field.
func (tu *TaskUpdate) ClearName() *TaskUpdate {
	tu.mutation.ClearName()
	return tu
}

// SetDescription sets the "description" field.
func (tu *TaskUpdate) SetDescription(s string) *TaskUpdate {
	tu.mutation.SetDescription(s)
	return tu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableDescription(s *string) *TaskUpdate {
	if s != nil {
		tu.SetDescription(*s)
	}
	return tu
}

// ClearDescription clears the value of the "description" field.
func (tu *TaskUpdate) ClearDescription() *TaskUpdate {
	tu.mutation.ClearDescription()
	return tu
}

// SetStatus sets the "status" field.
func (tu *TaskUpdate) SetStatus(s string) *TaskUpdate {
	tu.mutation.SetStatus(s)
	return tu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableStatus(s *string) *TaskUpdate {
	if s != nil {
		tu.SetStatus(*s)
	}
	return tu
}

// ClearStatus clears the value of the "status" field.
func (tu *TaskUpdate) ClearStatus() *TaskUpdate {
	tu.mutation.ClearStatus()
	return tu
}

// SetProcessID sets the "process_id" field.
func (tu *TaskUpdate) SetProcessID(s string) *TaskUpdate {
	tu.mutation.SetProcessID(s)
	return tu
}

// SetNillableProcessID sets the "process_id" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableProcessID(s *string) *TaskUpdate {
	if s != nil {
		tu.SetProcessID(*s)
	}
	return tu
}

// SetTemplateID sets the "template_id" field.
func (tu *TaskUpdate) SetTemplateID(s string) *TaskUpdate {
	tu.mutation.SetTemplateID(s)
	return tu
}

// SetNillableTemplateID sets the "template_id" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableTemplateID(s *string) *TaskUpdate {
	if s != nil {
		tu.SetTemplateID(*s)
	}
	return tu
}

// SetBusinessKey sets the "business_key" field.
func (tu *TaskUpdate) SetBusinessKey(s string) *TaskUpdate {
	tu.mutation.SetBusinessKey(s)
	return tu
}

// SetNillableBusinessKey sets the "business_key" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableBusinessKey(s *string) *TaskUpdate {
	if s != nil {
		tu.SetBusinessKey(*s)
	}
	return tu
}

// SetNodeKey sets the "node_key" field.
func (tu *TaskUpdate) SetNodeKey(s string) *TaskUpdate {
	tu.mutation.SetNodeKey(s)
	return tu
}

// SetNillableNodeKey sets the "node_key" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableNodeKey(s *string) *TaskUpdate {
	if s != nil {
		tu.SetNodeKey(*s)
	}
	return tu
}

// SetNodeType sets the "node_type" field.
func (tu *TaskUpdate) SetNodeType(s string) *TaskUpdate {
	tu.mutation.SetNodeType(s)
	return tu
}

// SetNillableNodeType sets the "node_type" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableNodeType(s *string) *TaskUpdate {
	if s != nil {
		tu.SetNodeType(*s)
	}
	return tu
}

// SetNodeConfig sets the "node_config" field.
func (tu *TaskUpdate) SetNodeConfig(m map[string]interface{}) *TaskUpdate {
	tu.mutation.SetNodeConfig(m)
	return tu
}

// ClearNodeConfig clears the value of the "node_config" field.
func (tu *TaskUpdate) ClearNodeConfig() *TaskUpdate {
	tu.mutation.ClearNodeConfig()
	return tu
}

// SetNodeRules sets the "node_rules" field.
func (tu *TaskUpdate) SetNodeRules(m map[string]interface{}) *TaskUpdate {
	tu.mutation.SetNodeRules(m)
	return tu
}

// ClearNodeRules clears the value of the "node_rules" field.
func (tu *TaskUpdate) ClearNodeRules() *TaskUpdate {
	tu.mutation.ClearNodeRules()
	return tu
}

// SetNodeEvents sets the "node_events" field.
func (tu *TaskUpdate) SetNodeEvents(m map[string]interface{}) *TaskUpdate {
	tu.mutation.SetNodeEvents(m)
	return tu
}

// ClearNodeEvents clears the value of the "node_events" field.
func (tu *TaskUpdate) ClearNodeEvents() *TaskUpdate {
	tu.mutation.ClearNodeEvents()
	return tu
}

// SetAssignees sets the "assignees" field.
func (tu *TaskUpdate) SetAssignees(s []string) *TaskUpdate {
	tu.mutation.SetAssignees(s)
	return tu
}

// AppendAssignees appends s to the "assignees" field.
func (tu *TaskUpdate) AppendAssignees(s []string) *TaskUpdate {
	tu.mutation.AppendAssignees(s)
	return tu
}

// SetCandidates sets the "candidates" field.
func (tu *TaskUpdate) SetCandidates(s []string) *TaskUpdate {
	tu.mutation.SetCandidates(s)
	return tu
}

// AppendCandidates appends s to the "candidates" field.
func (tu *TaskUpdate) AppendCandidates(s []string) *TaskUpdate {
	tu.mutation.AppendCandidates(s)
	return tu
}

// SetDelegatedFrom sets the "delegated_from" field.
func (tu *TaskUpdate) SetDelegatedFrom(s string) *TaskUpdate {
	tu.mutation.SetDelegatedFrom(s)
	return tu
}

// SetNillableDelegatedFrom sets the "delegated_from" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableDelegatedFrom(s *string) *TaskUpdate {
	if s != nil {
		tu.SetDelegatedFrom(*s)
	}
	return tu
}

// ClearDelegatedFrom clears the value of the "delegated_from" field.
func (tu *TaskUpdate) ClearDelegatedFrom() *TaskUpdate {
	tu.mutation.ClearDelegatedFrom()
	return tu
}

// SetDelegatedReason sets the "delegated_reason" field.
func (tu *TaskUpdate) SetDelegatedReason(s string) *TaskUpdate {
	tu.mutation.SetDelegatedReason(s)
	return tu
}

// SetNillableDelegatedReason sets the "delegated_reason" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableDelegatedReason(s *string) *TaskUpdate {
	if s != nil {
		tu.SetDelegatedReason(*s)
	}
	return tu
}

// ClearDelegatedReason clears the value of the "delegated_reason" field.
func (tu *TaskUpdate) ClearDelegatedReason() *TaskUpdate {
	tu.mutation.ClearDelegatedReason()
	return tu
}

// SetIsDelegated sets the "is_delegated" field.
func (tu *TaskUpdate) SetIsDelegated(b bool) *TaskUpdate {
	tu.mutation.SetIsDelegated(b)
	return tu
}

// SetNillableIsDelegated sets the "is_delegated" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableIsDelegated(b *bool) *TaskUpdate {
	if b != nil {
		tu.SetIsDelegated(*b)
	}
	return tu
}

// SetIsTransferred sets the "is_transferred" field.
func (tu *TaskUpdate) SetIsTransferred(b bool) *TaskUpdate {
	tu.mutation.SetIsTransferred(b)
	return tu
}

// SetNillableIsTransferred sets the "is_transferred" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableIsTransferred(b *bool) *TaskUpdate {
	if b != nil {
		tu.SetIsTransferred(*b)
	}
	return tu
}

// SetStartTime sets the "start_time" field.
func (tu *TaskUpdate) SetStartTime(i int64) *TaskUpdate {
	tu.mutation.ResetStartTime()
	tu.mutation.SetStartTime(i)
	return tu
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableStartTime(i *int64) *TaskUpdate {
	if i != nil {
		tu.SetStartTime(*i)
	}
	return tu
}

// AddStartTime adds i to the "start_time" field.
func (tu *TaskUpdate) AddStartTime(i int64) *TaskUpdate {
	tu.mutation.AddStartTime(i)
	return tu
}

// SetEndTime sets the "end_time" field.
func (tu *TaskUpdate) SetEndTime(i int64) *TaskUpdate {
	tu.mutation.ResetEndTime()
	tu.mutation.SetEndTime(i)
	return tu
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableEndTime(i *int64) *TaskUpdate {
	if i != nil {
		tu.SetEndTime(*i)
	}
	return tu
}

// AddEndTime adds i to the "end_time" field.
func (tu *TaskUpdate) AddEndTime(i int64) *TaskUpdate {
	tu.mutation.AddEndTime(i)
	return tu
}

// ClearEndTime clears the value of the "end_time" field.
func (tu *TaskUpdate) ClearEndTime() *TaskUpdate {
	tu.mutation.ClearEndTime()
	return tu
}

// SetDueTime sets the "due_time" field.
func (tu *TaskUpdate) SetDueTime(i int64) *TaskUpdate {
	tu.mutation.ResetDueTime()
	tu.mutation.SetDueTime(i)
	return tu
}

// SetNillableDueTime sets the "due_time" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableDueTime(i *int64) *TaskUpdate {
	if i != nil {
		tu.SetDueTime(*i)
	}
	return tu
}

// AddDueTime adds i to the "due_time" field.
func (tu *TaskUpdate) AddDueTime(i int64) *TaskUpdate {
	tu.mutation.AddDueTime(i)
	return tu
}

// ClearDueTime clears the value of the "due_time" field.
func (tu *TaskUpdate) ClearDueTime() *TaskUpdate {
	tu.mutation.ClearDueTime()
	return tu
}

// SetDuration sets the "duration" field.
func (tu *TaskUpdate) SetDuration(i int) *TaskUpdate {
	tu.mutation.ResetDuration()
	tu.mutation.SetDuration(i)
	return tu
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableDuration(i *int) *TaskUpdate {
	if i != nil {
		tu.SetDuration(*i)
	}
	return tu
}

// AddDuration adds i to the "duration" field.
func (tu *TaskUpdate) AddDuration(i int) *TaskUpdate {
	tu.mutation.AddDuration(i)
	return tu
}

// ClearDuration clears the value of the "duration" field.
func (tu *TaskUpdate) ClearDuration() *TaskUpdate {
	tu.mutation.ClearDuration()
	return tu
}

// SetPriority sets the "priority" field.
func (tu *TaskUpdate) SetPriority(i int) *TaskUpdate {
	tu.mutation.ResetPriority()
	tu.mutation.SetPriority(i)
	return tu
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (tu *TaskUpdate) SetNillablePriority(i *int) *TaskUpdate {
	if i != nil {
		tu.SetPriority(*i)
	}
	return tu
}

// AddPriority adds i to the "priority" field.
func (tu *TaskUpdate) AddPriority(i int) *TaskUpdate {
	tu.mutation.AddPriority(i)
	return tu
}

// SetIsTimeout sets the "is_timeout" field.
func (tu *TaskUpdate) SetIsTimeout(b bool) *TaskUpdate {
	tu.mutation.SetIsTimeout(b)
	return tu
}

// SetNillableIsTimeout sets the "is_timeout" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableIsTimeout(b *bool) *TaskUpdate {
	if b != nil {
		tu.SetIsTimeout(*b)
	}
	return tu
}

// SetReminderCount sets the "reminder_count" field.
func (tu *TaskUpdate) SetReminderCount(i int) *TaskUpdate {
	tu.mutation.ResetReminderCount()
	tu.mutation.SetReminderCount(i)
	return tu
}

// SetNillableReminderCount sets the "reminder_count" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableReminderCount(i *int) *TaskUpdate {
	if i != nil {
		tu.SetReminderCount(*i)
	}
	return tu
}

// AddReminderCount adds i to the "reminder_count" field.
func (tu *TaskUpdate) AddReminderCount(i int) *TaskUpdate {
	tu.mutation.AddReminderCount(i)
	return tu
}

// SetAllowCancel sets the "allow_cancel" field.
func (tu *TaskUpdate) SetAllowCancel(b bool) *TaskUpdate {
	tu.mutation.SetAllowCancel(b)
	return tu
}

// SetNillableAllowCancel sets the "allow_cancel" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableAllowCancel(b *bool) *TaskUpdate {
	if b != nil {
		tu.SetAllowCancel(*b)
	}
	return tu
}

// SetAllowUrge sets the "allow_urge" field.
func (tu *TaskUpdate) SetAllowUrge(b bool) *TaskUpdate {
	tu.mutation.SetAllowUrge(b)
	return tu
}

// SetNillableAllowUrge sets the "allow_urge" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableAllowUrge(b *bool) *TaskUpdate {
	if b != nil {
		tu.SetAllowUrge(*b)
	}
	return tu
}

// SetAllowDelegate sets the "allow_delegate" field.
func (tu *TaskUpdate) SetAllowDelegate(b bool) *TaskUpdate {
	tu.mutation.SetAllowDelegate(b)
	return tu
}

// SetNillableAllowDelegate sets the "allow_delegate" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableAllowDelegate(b *bool) *TaskUpdate {
	if b != nil {
		tu.SetAllowDelegate(*b)
	}
	return tu
}

// SetAllowTransfer sets the "allow_transfer" field.
func (tu *TaskUpdate) SetAllowTransfer(b bool) *TaskUpdate {
	tu.mutation.SetAllowTransfer(b)
	return tu
}

// SetNillableAllowTransfer sets the "allow_transfer" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableAllowTransfer(b *bool) *TaskUpdate {
	if b != nil {
		tu.SetAllowTransfer(*b)
	}
	return tu
}

// SetIsDraftEnabled sets the "is_draft_enabled" field.
func (tu *TaskUpdate) SetIsDraftEnabled(b bool) *TaskUpdate {
	tu.mutation.SetIsDraftEnabled(b)
	return tu
}

// SetNillableIsDraftEnabled sets the "is_draft_enabled" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableIsDraftEnabled(b *bool) *TaskUpdate {
	if b != nil {
		tu.SetIsDraftEnabled(*b)
	}
	return tu
}

// SetIsAutoStart sets the "is_auto_start" field.
func (tu *TaskUpdate) SetIsAutoStart(b bool) *TaskUpdate {
	tu.mutation.SetIsAutoStart(b)
	return tu
}

// SetNillableIsAutoStart sets the "is_auto_start" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableIsAutoStart(b *bool) *TaskUpdate {
	if b != nil {
		tu.SetIsAutoStart(*b)
	}
	return tu
}

// SetStrictMode sets the "strict_mode" field.
func (tu *TaskUpdate) SetStrictMode(b bool) *TaskUpdate {
	tu.mutation.SetStrictMode(b)
	return tu
}

// SetNillableStrictMode sets the "strict_mode" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableStrictMode(b *bool) *TaskUpdate {
	if b != nil {
		tu.SetStrictMode(*b)
	}
	return tu
}

// SetExtras sets the "extras" field.
func (tu *TaskUpdate) SetExtras(m map[string]interface{}) *TaskUpdate {
	tu.mutation.SetExtras(m)
	return tu
}

// ClearExtras clears the value of the "extras" field.
func (tu *TaskUpdate) ClearExtras() *TaskUpdate {
	tu.mutation.ClearExtras()
	return tu
}

// SetSpaceID sets the "space_id" field.
func (tu *TaskUpdate) SetSpaceID(s string) *TaskUpdate {
	tu.mutation.SetSpaceID(s)
	return tu
}

// SetNillableSpaceID sets the "space_id" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableSpaceID(s *string) *TaskUpdate {
	if s != nil {
		tu.SetSpaceID(*s)
	}
	return tu
}

// ClearSpaceID clears the value of the "space_id" field.
func (tu *TaskUpdate) ClearSpaceID() *TaskUpdate {
	tu.mutation.ClearSpaceID()
	return tu
}

// SetCreatedBy sets the "created_by" field.
func (tu *TaskUpdate) SetCreatedBy(s string) *TaskUpdate {
	tu.mutation.SetCreatedBy(s)
	return tu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableCreatedBy(s *string) *TaskUpdate {
	if s != nil {
		tu.SetCreatedBy(*s)
	}
	return tu
}

// ClearCreatedBy clears the value of the "created_by" field.
func (tu *TaskUpdate) ClearCreatedBy() *TaskUpdate {
	tu.mutation.ClearCreatedBy()
	return tu
}

// SetUpdatedBy sets the "updated_by" field.
func (tu *TaskUpdate) SetUpdatedBy(s string) *TaskUpdate {
	tu.mutation.SetUpdatedBy(s)
	return tu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableUpdatedBy(s *string) *TaskUpdate {
	if s != nil {
		tu.SetUpdatedBy(*s)
	}
	return tu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (tu *TaskUpdate) ClearUpdatedBy() *TaskUpdate {
	tu.mutation.ClearUpdatedBy()
	return tu
}

// SetUpdatedAt sets the "updated_at" field.
func (tu *TaskUpdate) SetUpdatedAt(i int64) *TaskUpdate {
	tu.mutation.ResetUpdatedAt()
	tu.mutation.SetUpdatedAt(i)
	return tu
}

// AddUpdatedAt adds i to the "updated_at" field.
func (tu *TaskUpdate) AddUpdatedAt(i int64) *TaskUpdate {
	tu.mutation.AddUpdatedAt(i)
	return tu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tu *TaskUpdate) ClearUpdatedAt() *TaskUpdate {
	tu.mutation.ClearUpdatedAt()
	return tu
}

// SetTaskKey sets the "task_key" field.
func (tu *TaskUpdate) SetTaskKey(s string) *TaskUpdate {
	tu.mutation.SetTaskKey(s)
	return tu
}

// SetNillableTaskKey sets the "task_key" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableTaskKey(s *string) *TaskUpdate {
	if s != nil {
		tu.SetTaskKey(*s)
	}
	return tu
}

// SetParentID sets the "parent_id" field.
func (tu *TaskUpdate) SetParentID(s string) *TaskUpdate {
	tu.mutation.SetParentID(s)
	return tu
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableParentID(s *string) *TaskUpdate {
	if s != nil {
		tu.SetParentID(*s)
	}
	return tu
}

// ClearParentID clears the value of the "parent_id" field.
func (tu *TaskUpdate) ClearParentID() *TaskUpdate {
	tu.mutation.ClearParentID()
	return tu
}

// SetChildIds sets the "child_ids" field.
func (tu *TaskUpdate) SetChildIds(s []string) *TaskUpdate {
	tu.mutation.SetChildIds(s)
	return tu
}

// AppendChildIds appends s to the "child_ids" field.
func (tu *TaskUpdate) AppendChildIds(s []string) *TaskUpdate {
	tu.mutation.AppendChildIds(s)
	return tu
}

// SetAction sets the "action" field.
func (tu *TaskUpdate) SetAction(s string) *TaskUpdate {
	tu.mutation.SetAction(s)
	return tu
}

// SetNillableAction sets the "action" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableAction(s *string) *TaskUpdate {
	if s != nil {
		tu.SetAction(*s)
	}
	return tu
}

// ClearAction clears the value of the "action" field.
func (tu *TaskUpdate) ClearAction() *TaskUpdate {
	tu.mutation.ClearAction()
	return tu
}

// SetComment sets the "comment" field.
func (tu *TaskUpdate) SetComment(s string) *TaskUpdate {
	tu.mutation.SetComment(s)
	return tu
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableComment(s *string) *TaskUpdate {
	if s != nil {
		tu.SetComment(*s)
	}
	return tu
}

// ClearComment clears the value of the "comment" field.
func (tu *TaskUpdate) ClearComment() *TaskUpdate {
	tu.mutation.ClearComment()
	return tu
}

// SetAttachments sets the "attachments" field.
func (tu *TaskUpdate) SetAttachments(m map[string]interface{}) *TaskUpdate {
	tu.mutation.SetAttachments(m)
	return tu
}

// ClearAttachments clears the value of the "attachments" field.
func (tu *TaskUpdate) ClearAttachments() *TaskUpdate {
	tu.mutation.ClearAttachments()
	return tu
}

// SetFormData sets the "form_data" field.
func (tu *TaskUpdate) SetFormData(m map[string]interface{}) *TaskUpdate {
	tu.mutation.SetFormData(m)
	return tu
}

// ClearFormData clears the value of the "form_data" field.
func (tu *TaskUpdate) ClearFormData() *TaskUpdate {
	tu.mutation.ClearFormData()
	return tu
}

// SetVariables sets the "variables" field.
func (tu *TaskUpdate) SetVariables(m map[string]interface{}) *TaskUpdate {
	tu.mutation.SetVariables(m)
	return tu
}

// ClearVariables clears the value of the "variables" field.
func (tu *TaskUpdate) ClearVariables() *TaskUpdate {
	tu.mutation.ClearVariables()
	return tu
}

// SetIsResubmit sets the "is_resubmit" field.
func (tu *TaskUpdate) SetIsResubmit(b bool) *TaskUpdate {
	tu.mutation.SetIsResubmit(b)
	return tu
}

// SetNillableIsResubmit sets the "is_resubmit" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableIsResubmit(b *bool) *TaskUpdate {
	if b != nil {
		tu.SetIsResubmit(*b)
	}
	return tu
}

// SetClaimTime sets the "claim_time" field.
func (tu *TaskUpdate) SetClaimTime(i int64) *TaskUpdate {
	tu.mutation.ResetClaimTime()
	tu.mutation.SetClaimTime(i)
	return tu
}

// SetNillableClaimTime sets the "claim_time" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableClaimTime(i *int64) *TaskUpdate {
	if i != nil {
		tu.SetClaimTime(*i)
	}
	return tu
}

// AddClaimTime adds i to the "claim_time" field.
func (tu *TaskUpdate) AddClaimTime(i int64) *TaskUpdate {
	tu.mutation.AddClaimTime(i)
	return tu
}

// ClearClaimTime clears the value of the "claim_time" field.
func (tu *TaskUpdate) ClearClaimTime() *TaskUpdate {
	tu.mutation.ClearClaimTime()
	return tu
}

// SetIsUrged sets the "is_urged" field.
func (tu *TaskUpdate) SetIsUrged(b bool) *TaskUpdate {
	tu.mutation.SetIsUrged(b)
	return tu
}

// SetNillableIsUrged sets the "is_urged" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableIsUrged(b *bool) *TaskUpdate {
	if b != nil {
		tu.SetIsUrged(*b)
	}
	return tu
}

// SetUrgeCount sets the "urge_count" field.
func (tu *TaskUpdate) SetUrgeCount(i int) *TaskUpdate {
	tu.mutation.ResetUrgeCount()
	tu.mutation.SetUrgeCount(i)
	return tu
}

// SetNillableUrgeCount sets the "urge_count" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableUrgeCount(i *int) *TaskUpdate {
	if i != nil {
		tu.SetUrgeCount(*i)
	}
	return tu
}

// AddUrgeCount adds i to the "urge_count" field.
func (tu *TaskUpdate) AddUrgeCount(i int) *TaskUpdate {
	tu.mutation.AddUrgeCount(i)
	return tu
}

// Mutation returns the TaskMutation object of the builder.
func (tu *TaskUpdate) Mutation() *TaskMutation {
	return tu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TaskUpdate) Save(ctx context.Context) (int, error) {
	tu.defaults()
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TaskUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TaskUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TaskUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tu *TaskUpdate) defaults() {
	if _, ok := tu.mutation.UpdatedAt(); !ok && !tu.mutation.UpdatedAtCleared() {
		v := task.UpdateDefaultUpdatedAt()
		tu.mutation.SetUpdatedAt(v)
	}
}

func (tu *TaskUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(task.Table, task.Columns, sqlgraph.NewFieldSpec(task.FieldID, field.TypeString))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.Name(); ok {
		_spec.SetField(task.FieldName, field.TypeString, value)
	}
	if tu.mutation.NameCleared() {
		_spec.ClearField(task.FieldName, field.TypeString)
	}
	if value, ok := tu.mutation.Description(); ok {
		_spec.SetField(task.FieldDescription, field.TypeString, value)
	}
	if tu.mutation.DescriptionCleared() {
		_spec.ClearField(task.FieldDescription, field.TypeString)
	}
	if value, ok := tu.mutation.Status(); ok {
		_spec.SetField(task.FieldStatus, field.TypeString, value)
	}
	if tu.mutation.StatusCleared() {
		_spec.ClearField(task.FieldStatus, field.TypeString)
	}
	if value, ok := tu.mutation.ProcessID(); ok {
		_spec.SetField(task.FieldProcessID, field.TypeString, value)
	}
	if value, ok := tu.mutation.TemplateID(); ok {
		_spec.SetField(task.FieldTemplateID, field.TypeString, value)
	}
	if value, ok := tu.mutation.BusinessKey(); ok {
		_spec.SetField(task.FieldBusinessKey, field.TypeString, value)
	}
	if value, ok := tu.mutation.NodeKey(); ok {
		_spec.SetField(task.FieldNodeKey, field.TypeString, value)
	}
	if value, ok := tu.mutation.NodeType(); ok {
		_spec.SetField(task.FieldNodeType, field.TypeString, value)
	}
	if value, ok := tu.mutation.NodeConfig(); ok {
		_spec.SetField(task.FieldNodeConfig, field.TypeJSON, value)
	}
	if tu.mutation.NodeConfigCleared() {
		_spec.ClearField(task.FieldNodeConfig, field.TypeJSON)
	}
	if value, ok := tu.mutation.NodeRules(); ok {
		_spec.SetField(task.FieldNodeRules, field.TypeJSON, value)
	}
	if tu.mutation.NodeRulesCleared() {
		_spec.ClearField(task.FieldNodeRules, field.TypeJSON)
	}
	if value, ok := tu.mutation.NodeEvents(); ok {
		_spec.SetField(task.FieldNodeEvents, field.TypeJSON, value)
	}
	if tu.mutation.NodeEventsCleared() {
		_spec.ClearField(task.FieldNodeEvents, field.TypeJSON)
	}
	if value, ok := tu.mutation.Assignees(); ok {
		_spec.SetField(task.FieldAssignees, field.TypeJSON, value)
	}
	if value, ok := tu.mutation.AppendedAssignees(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, task.FieldAssignees, value)
		})
	}
	if value, ok := tu.mutation.Candidates(); ok {
		_spec.SetField(task.FieldCandidates, field.TypeJSON, value)
	}
	if value, ok := tu.mutation.AppendedCandidates(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, task.FieldCandidates, value)
		})
	}
	if value, ok := tu.mutation.DelegatedFrom(); ok {
		_spec.SetField(task.FieldDelegatedFrom, field.TypeString, value)
	}
	if tu.mutation.DelegatedFromCleared() {
		_spec.ClearField(task.FieldDelegatedFrom, field.TypeString)
	}
	if value, ok := tu.mutation.DelegatedReason(); ok {
		_spec.SetField(task.FieldDelegatedReason, field.TypeString, value)
	}
	if tu.mutation.DelegatedReasonCleared() {
		_spec.ClearField(task.FieldDelegatedReason, field.TypeString)
	}
	if value, ok := tu.mutation.IsDelegated(); ok {
		_spec.SetField(task.FieldIsDelegated, field.TypeBool, value)
	}
	if value, ok := tu.mutation.IsTransferred(); ok {
		_spec.SetField(task.FieldIsTransferred, field.TypeBool, value)
	}
	if value, ok := tu.mutation.StartTime(); ok {
		_spec.SetField(task.FieldStartTime, field.TypeInt64, value)
	}
	if value, ok := tu.mutation.AddedStartTime(); ok {
		_spec.AddField(task.FieldStartTime, field.TypeInt64, value)
	}
	if value, ok := tu.mutation.EndTime(); ok {
		_spec.SetField(task.FieldEndTime, field.TypeInt64, value)
	}
	if value, ok := tu.mutation.AddedEndTime(); ok {
		_spec.AddField(task.FieldEndTime, field.TypeInt64, value)
	}
	if tu.mutation.EndTimeCleared() {
		_spec.ClearField(task.FieldEndTime, field.TypeInt64)
	}
	if value, ok := tu.mutation.DueTime(); ok {
		_spec.SetField(task.FieldDueTime, field.TypeInt64, value)
	}
	if value, ok := tu.mutation.AddedDueTime(); ok {
		_spec.AddField(task.FieldDueTime, field.TypeInt64, value)
	}
	if tu.mutation.DueTimeCleared() {
		_spec.ClearField(task.FieldDueTime, field.TypeInt64)
	}
	if value, ok := tu.mutation.Duration(); ok {
		_spec.SetField(task.FieldDuration, field.TypeInt, value)
	}
	if value, ok := tu.mutation.AddedDuration(); ok {
		_spec.AddField(task.FieldDuration, field.TypeInt, value)
	}
	if tu.mutation.DurationCleared() {
		_spec.ClearField(task.FieldDuration, field.TypeInt)
	}
	if value, ok := tu.mutation.Priority(); ok {
		_spec.SetField(task.FieldPriority, field.TypeInt, value)
	}
	if value, ok := tu.mutation.AddedPriority(); ok {
		_spec.AddField(task.FieldPriority, field.TypeInt, value)
	}
	if value, ok := tu.mutation.IsTimeout(); ok {
		_spec.SetField(task.FieldIsTimeout, field.TypeBool, value)
	}
	if value, ok := tu.mutation.ReminderCount(); ok {
		_spec.SetField(task.FieldReminderCount, field.TypeInt, value)
	}
	if value, ok := tu.mutation.AddedReminderCount(); ok {
		_spec.AddField(task.FieldReminderCount, field.TypeInt, value)
	}
	if value, ok := tu.mutation.AllowCancel(); ok {
		_spec.SetField(task.FieldAllowCancel, field.TypeBool, value)
	}
	if value, ok := tu.mutation.AllowUrge(); ok {
		_spec.SetField(task.FieldAllowUrge, field.TypeBool, value)
	}
	if value, ok := tu.mutation.AllowDelegate(); ok {
		_spec.SetField(task.FieldAllowDelegate, field.TypeBool, value)
	}
	if value, ok := tu.mutation.AllowTransfer(); ok {
		_spec.SetField(task.FieldAllowTransfer, field.TypeBool, value)
	}
	if value, ok := tu.mutation.IsDraftEnabled(); ok {
		_spec.SetField(task.FieldIsDraftEnabled, field.TypeBool, value)
	}
	if value, ok := tu.mutation.IsAutoStart(); ok {
		_spec.SetField(task.FieldIsAutoStart, field.TypeBool, value)
	}
	if value, ok := tu.mutation.StrictMode(); ok {
		_spec.SetField(task.FieldStrictMode, field.TypeBool, value)
	}
	if value, ok := tu.mutation.Extras(); ok {
		_spec.SetField(task.FieldExtras, field.TypeJSON, value)
	}
	if tu.mutation.ExtrasCleared() {
		_spec.ClearField(task.FieldExtras, field.TypeJSON)
	}
	if value, ok := tu.mutation.SpaceID(); ok {
		_spec.SetField(task.FieldSpaceID, field.TypeString, value)
	}
	if tu.mutation.SpaceIDCleared() {
		_spec.ClearField(task.FieldSpaceID, field.TypeString)
	}
	if value, ok := tu.mutation.CreatedBy(); ok {
		_spec.SetField(task.FieldCreatedBy, field.TypeString, value)
	}
	if tu.mutation.CreatedByCleared() {
		_spec.ClearField(task.FieldCreatedBy, field.TypeString)
	}
	if value, ok := tu.mutation.UpdatedBy(); ok {
		_spec.SetField(task.FieldUpdatedBy, field.TypeString, value)
	}
	if tu.mutation.UpdatedByCleared() {
		_spec.ClearField(task.FieldUpdatedBy, field.TypeString)
	}
	if tu.mutation.CreatedAtCleared() {
		_spec.ClearField(task.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := tu.mutation.UpdatedAt(); ok {
		_spec.SetField(task.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := tu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(task.FieldUpdatedAt, field.TypeInt64, value)
	}
	if tu.mutation.UpdatedAtCleared() {
		_spec.ClearField(task.FieldUpdatedAt, field.TypeInt64)
	}
	if value, ok := tu.mutation.TaskKey(); ok {
		_spec.SetField(task.FieldTaskKey, field.TypeString, value)
	}
	if value, ok := tu.mutation.ParentID(); ok {
		_spec.SetField(task.FieldParentID, field.TypeString, value)
	}
	if tu.mutation.ParentIDCleared() {
		_spec.ClearField(task.FieldParentID, field.TypeString)
	}
	if value, ok := tu.mutation.ChildIds(); ok {
		_spec.SetField(task.FieldChildIds, field.TypeJSON, value)
	}
	if value, ok := tu.mutation.AppendedChildIds(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, task.FieldChildIds, value)
		})
	}
	if value, ok := tu.mutation.Action(); ok {
		_spec.SetField(task.FieldAction, field.TypeString, value)
	}
	if tu.mutation.ActionCleared() {
		_spec.ClearField(task.FieldAction, field.TypeString)
	}
	if value, ok := tu.mutation.Comment(); ok {
		_spec.SetField(task.FieldComment, field.TypeString, value)
	}
	if tu.mutation.CommentCleared() {
		_spec.ClearField(task.FieldComment, field.TypeString)
	}
	if value, ok := tu.mutation.Attachments(); ok {
		_spec.SetField(task.FieldAttachments, field.TypeJSON, value)
	}
	if tu.mutation.AttachmentsCleared() {
		_spec.ClearField(task.FieldAttachments, field.TypeJSON)
	}
	if value, ok := tu.mutation.FormData(); ok {
		_spec.SetField(task.FieldFormData, field.TypeJSON, value)
	}
	if tu.mutation.FormDataCleared() {
		_spec.ClearField(task.FieldFormData, field.TypeJSON)
	}
	if value, ok := tu.mutation.Variables(); ok {
		_spec.SetField(task.FieldVariables, field.TypeJSON, value)
	}
	if tu.mutation.VariablesCleared() {
		_spec.ClearField(task.FieldVariables, field.TypeJSON)
	}
	if value, ok := tu.mutation.IsResubmit(); ok {
		_spec.SetField(task.FieldIsResubmit, field.TypeBool, value)
	}
	if value, ok := tu.mutation.ClaimTime(); ok {
		_spec.SetField(task.FieldClaimTime, field.TypeInt64, value)
	}
	if value, ok := tu.mutation.AddedClaimTime(); ok {
		_spec.AddField(task.FieldClaimTime, field.TypeInt64, value)
	}
	if tu.mutation.ClaimTimeCleared() {
		_spec.ClearField(task.FieldClaimTime, field.TypeInt64)
	}
	if value, ok := tu.mutation.IsUrged(); ok {
		_spec.SetField(task.FieldIsUrged, field.TypeBool, value)
	}
	if value, ok := tu.mutation.UrgeCount(); ok {
		_spec.SetField(task.FieldUrgeCount, field.TypeInt, value)
	}
	if value, ok := tu.mutation.AddedUrgeCount(); ok {
		_spec.AddField(task.FieldUrgeCount, field.TypeInt, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{task.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TaskUpdateOne is the builder for updating a single Task entity.
type TaskUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TaskMutation
}

// SetName sets the "name" field.
func (tuo *TaskUpdateOne) SetName(s string) *TaskUpdateOne {
	tuo.mutation.SetName(s)
	return tuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableName(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetName(*s)
	}
	return tuo
}

// ClearName clears the value of the "name" field.
func (tuo *TaskUpdateOne) ClearName() *TaskUpdateOne {
	tuo.mutation.ClearName()
	return tuo
}

// SetDescription sets the "description" field.
func (tuo *TaskUpdateOne) SetDescription(s string) *TaskUpdateOne {
	tuo.mutation.SetDescription(s)
	return tuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableDescription(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetDescription(*s)
	}
	return tuo
}

// ClearDescription clears the value of the "description" field.
func (tuo *TaskUpdateOne) ClearDescription() *TaskUpdateOne {
	tuo.mutation.ClearDescription()
	return tuo
}

// SetStatus sets the "status" field.
func (tuo *TaskUpdateOne) SetStatus(s string) *TaskUpdateOne {
	tuo.mutation.SetStatus(s)
	return tuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableStatus(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetStatus(*s)
	}
	return tuo
}

// ClearStatus clears the value of the "status" field.
func (tuo *TaskUpdateOne) ClearStatus() *TaskUpdateOne {
	tuo.mutation.ClearStatus()
	return tuo
}

// SetProcessID sets the "process_id" field.
func (tuo *TaskUpdateOne) SetProcessID(s string) *TaskUpdateOne {
	tuo.mutation.SetProcessID(s)
	return tuo
}

// SetNillableProcessID sets the "process_id" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableProcessID(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetProcessID(*s)
	}
	return tuo
}

// SetTemplateID sets the "template_id" field.
func (tuo *TaskUpdateOne) SetTemplateID(s string) *TaskUpdateOne {
	tuo.mutation.SetTemplateID(s)
	return tuo
}

// SetNillableTemplateID sets the "template_id" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableTemplateID(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetTemplateID(*s)
	}
	return tuo
}

// SetBusinessKey sets the "business_key" field.
func (tuo *TaskUpdateOne) SetBusinessKey(s string) *TaskUpdateOne {
	tuo.mutation.SetBusinessKey(s)
	return tuo
}

// SetNillableBusinessKey sets the "business_key" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableBusinessKey(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetBusinessKey(*s)
	}
	return tuo
}

// SetNodeKey sets the "node_key" field.
func (tuo *TaskUpdateOne) SetNodeKey(s string) *TaskUpdateOne {
	tuo.mutation.SetNodeKey(s)
	return tuo
}

// SetNillableNodeKey sets the "node_key" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableNodeKey(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetNodeKey(*s)
	}
	return tuo
}

// SetNodeType sets the "node_type" field.
func (tuo *TaskUpdateOne) SetNodeType(s string) *TaskUpdateOne {
	tuo.mutation.SetNodeType(s)
	return tuo
}

// SetNillableNodeType sets the "node_type" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableNodeType(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetNodeType(*s)
	}
	return tuo
}

// SetNodeConfig sets the "node_config" field.
func (tuo *TaskUpdateOne) SetNodeConfig(m map[string]interface{}) *TaskUpdateOne {
	tuo.mutation.SetNodeConfig(m)
	return tuo
}

// ClearNodeConfig clears the value of the "node_config" field.
func (tuo *TaskUpdateOne) ClearNodeConfig() *TaskUpdateOne {
	tuo.mutation.ClearNodeConfig()
	return tuo
}

// SetNodeRules sets the "node_rules" field.
func (tuo *TaskUpdateOne) SetNodeRules(m map[string]interface{}) *TaskUpdateOne {
	tuo.mutation.SetNodeRules(m)
	return tuo
}

// ClearNodeRules clears the value of the "node_rules" field.
func (tuo *TaskUpdateOne) ClearNodeRules() *TaskUpdateOne {
	tuo.mutation.ClearNodeRules()
	return tuo
}

// SetNodeEvents sets the "node_events" field.
func (tuo *TaskUpdateOne) SetNodeEvents(m map[string]interface{}) *TaskUpdateOne {
	tuo.mutation.SetNodeEvents(m)
	return tuo
}

// ClearNodeEvents clears the value of the "node_events" field.
func (tuo *TaskUpdateOne) ClearNodeEvents() *TaskUpdateOne {
	tuo.mutation.ClearNodeEvents()
	return tuo
}

// SetAssignees sets the "assignees" field.
func (tuo *TaskUpdateOne) SetAssignees(s []string) *TaskUpdateOne {
	tuo.mutation.SetAssignees(s)
	return tuo
}

// AppendAssignees appends s to the "assignees" field.
func (tuo *TaskUpdateOne) AppendAssignees(s []string) *TaskUpdateOne {
	tuo.mutation.AppendAssignees(s)
	return tuo
}

// SetCandidates sets the "candidates" field.
func (tuo *TaskUpdateOne) SetCandidates(s []string) *TaskUpdateOne {
	tuo.mutation.SetCandidates(s)
	return tuo
}

// AppendCandidates appends s to the "candidates" field.
func (tuo *TaskUpdateOne) AppendCandidates(s []string) *TaskUpdateOne {
	tuo.mutation.AppendCandidates(s)
	return tuo
}

// SetDelegatedFrom sets the "delegated_from" field.
func (tuo *TaskUpdateOne) SetDelegatedFrom(s string) *TaskUpdateOne {
	tuo.mutation.SetDelegatedFrom(s)
	return tuo
}

// SetNillableDelegatedFrom sets the "delegated_from" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableDelegatedFrom(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetDelegatedFrom(*s)
	}
	return tuo
}

// ClearDelegatedFrom clears the value of the "delegated_from" field.
func (tuo *TaskUpdateOne) ClearDelegatedFrom() *TaskUpdateOne {
	tuo.mutation.ClearDelegatedFrom()
	return tuo
}

// SetDelegatedReason sets the "delegated_reason" field.
func (tuo *TaskUpdateOne) SetDelegatedReason(s string) *TaskUpdateOne {
	tuo.mutation.SetDelegatedReason(s)
	return tuo
}

// SetNillableDelegatedReason sets the "delegated_reason" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableDelegatedReason(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetDelegatedReason(*s)
	}
	return tuo
}

// ClearDelegatedReason clears the value of the "delegated_reason" field.
func (tuo *TaskUpdateOne) ClearDelegatedReason() *TaskUpdateOne {
	tuo.mutation.ClearDelegatedReason()
	return tuo
}

// SetIsDelegated sets the "is_delegated" field.
func (tuo *TaskUpdateOne) SetIsDelegated(b bool) *TaskUpdateOne {
	tuo.mutation.SetIsDelegated(b)
	return tuo
}

// SetNillableIsDelegated sets the "is_delegated" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableIsDelegated(b *bool) *TaskUpdateOne {
	if b != nil {
		tuo.SetIsDelegated(*b)
	}
	return tuo
}

// SetIsTransferred sets the "is_transferred" field.
func (tuo *TaskUpdateOne) SetIsTransferred(b bool) *TaskUpdateOne {
	tuo.mutation.SetIsTransferred(b)
	return tuo
}

// SetNillableIsTransferred sets the "is_transferred" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableIsTransferred(b *bool) *TaskUpdateOne {
	if b != nil {
		tuo.SetIsTransferred(*b)
	}
	return tuo
}

// SetStartTime sets the "start_time" field.
func (tuo *TaskUpdateOne) SetStartTime(i int64) *TaskUpdateOne {
	tuo.mutation.ResetStartTime()
	tuo.mutation.SetStartTime(i)
	return tuo
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableStartTime(i *int64) *TaskUpdateOne {
	if i != nil {
		tuo.SetStartTime(*i)
	}
	return tuo
}

// AddStartTime adds i to the "start_time" field.
func (tuo *TaskUpdateOne) AddStartTime(i int64) *TaskUpdateOne {
	tuo.mutation.AddStartTime(i)
	return tuo
}

// SetEndTime sets the "end_time" field.
func (tuo *TaskUpdateOne) SetEndTime(i int64) *TaskUpdateOne {
	tuo.mutation.ResetEndTime()
	tuo.mutation.SetEndTime(i)
	return tuo
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableEndTime(i *int64) *TaskUpdateOne {
	if i != nil {
		tuo.SetEndTime(*i)
	}
	return tuo
}

// AddEndTime adds i to the "end_time" field.
func (tuo *TaskUpdateOne) AddEndTime(i int64) *TaskUpdateOne {
	tuo.mutation.AddEndTime(i)
	return tuo
}

// ClearEndTime clears the value of the "end_time" field.
func (tuo *TaskUpdateOne) ClearEndTime() *TaskUpdateOne {
	tuo.mutation.ClearEndTime()
	return tuo
}

// SetDueTime sets the "due_time" field.
func (tuo *TaskUpdateOne) SetDueTime(i int64) *TaskUpdateOne {
	tuo.mutation.ResetDueTime()
	tuo.mutation.SetDueTime(i)
	return tuo
}

// SetNillableDueTime sets the "due_time" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableDueTime(i *int64) *TaskUpdateOne {
	if i != nil {
		tuo.SetDueTime(*i)
	}
	return tuo
}

// AddDueTime adds i to the "due_time" field.
func (tuo *TaskUpdateOne) AddDueTime(i int64) *TaskUpdateOne {
	tuo.mutation.AddDueTime(i)
	return tuo
}

// ClearDueTime clears the value of the "due_time" field.
func (tuo *TaskUpdateOne) ClearDueTime() *TaskUpdateOne {
	tuo.mutation.ClearDueTime()
	return tuo
}

// SetDuration sets the "duration" field.
func (tuo *TaskUpdateOne) SetDuration(i int) *TaskUpdateOne {
	tuo.mutation.ResetDuration()
	tuo.mutation.SetDuration(i)
	return tuo
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableDuration(i *int) *TaskUpdateOne {
	if i != nil {
		tuo.SetDuration(*i)
	}
	return tuo
}

// AddDuration adds i to the "duration" field.
func (tuo *TaskUpdateOne) AddDuration(i int) *TaskUpdateOne {
	tuo.mutation.AddDuration(i)
	return tuo
}

// ClearDuration clears the value of the "duration" field.
func (tuo *TaskUpdateOne) ClearDuration() *TaskUpdateOne {
	tuo.mutation.ClearDuration()
	return tuo
}

// SetPriority sets the "priority" field.
func (tuo *TaskUpdateOne) SetPriority(i int) *TaskUpdateOne {
	tuo.mutation.ResetPriority()
	tuo.mutation.SetPriority(i)
	return tuo
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillablePriority(i *int) *TaskUpdateOne {
	if i != nil {
		tuo.SetPriority(*i)
	}
	return tuo
}

// AddPriority adds i to the "priority" field.
func (tuo *TaskUpdateOne) AddPriority(i int) *TaskUpdateOne {
	tuo.mutation.AddPriority(i)
	return tuo
}

// SetIsTimeout sets the "is_timeout" field.
func (tuo *TaskUpdateOne) SetIsTimeout(b bool) *TaskUpdateOne {
	tuo.mutation.SetIsTimeout(b)
	return tuo
}

// SetNillableIsTimeout sets the "is_timeout" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableIsTimeout(b *bool) *TaskUpdateOne {
	if b != nil {
		tuo.SetIsTimeout(*b)
	}
	return tuo
}

// SetReminderCount sets the "reminder_count" field.
func (tuo *TaskUpdateOne) SetReminderCount(i int) *TaskUpdateOne {
	tuo.mutation.ResetReminderCount()
	tuo.mutation.SetReminderCount(i)
	return tuo
}

// SetNillableReminderCount sets the "reminder_count" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableReminderCount(i *int) *TaskUpdateOne {
	if i != nil {
		tuo.SetReminderCount(*i)
	}
	return tuo
}

// AddReminderCount adds i to the "reminder_count" field.
func (tuo *TaskUpdateOne) AddReminderCount(i int) *TaskUpdateOne {
	tuo.mutation.AddReminderCount(i)
	return tuo
}

// SetAllowCancel sets the "allow_cancel" field.
func (tuo *TaskUpdateOne) SetAllowCancel(b bool) *TaskUpdateOne {
	tuo.mutation.SetAllowCancel(b)
	return tuo
}

// SetNillableAllowCancel sets the "allow_cancel" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableAllowCancel(b *bool) *TaskUpdateOne {
	if b != nil {
		tuo.SetAllowCancel(*b)
	}
	return tuo
}

// SetAllowUrge sets the "allow_urge" field.
func (tuo *TaskUpdateOne) SetAllowUrge(b bool) *TaskUpdateOne {
	tuo.mutation.SetAllowUrge(b)
	return tuo
}

// SetNillableAllowUrge sets the "allow_urge" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableAllowUrge(b *bool) *TaskUpdateOne {
	if b != nil {
		tuo.SetAllowUrge(*b)
	}
	return tuo
}

// SetAllowDelegate sets the "allow_delegate" field.
func (tuo *TaskUpdateOne) SetAllowDelegate(b bool) *TaskUpdateOne {
	tuo.mutation.SetAllowDelegate(b)
	return tuo
}

// SetNillableAllowDelegate sets the "allow_delegate" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableAllowDelegate(b *bool) *TaskUpdateOne {
	if b != nil {
		tuo.SetAllowDelegate(*b)
	}
	return tuo
}

// SetAllowTransfer sets the "allow_transfer" field.
func (tuo *TaskUpdateOne) SetAllowTransfer(b bool) *TaskUpdateOne {
	tuo.mutation.SetAllowTransfer(b)
	return tuo
}

// SetNillableAllowTransfer sets the "allow_transfer" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableAllowTransfer(b *bool) *TaskUpdateOne {
	if b != nil {
		tuo.SetAllowTransfer(*b)
	}
	return tuo
}

// SetIsDraftEnabled sets the "is_draft_enabled" field.
func (tuo *TaskUpdateOne) SetIsDraftEnabled(b bool) *TaskUpdateOne {
	tuo.mutation.SetIsDraftEnabled(b)
	return tuo
}

// SetNillableIsDraftEnabled sets the "is_draft_enabled" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableIsDraftEnabled(b *bool) *TaskUpdateOne {
	if b != nil {
		tuo.SetIsDraftEnabled(*b)
	}
	return tuo
}

// SetIsAutoStart sets the "is_auto_start" field.
func (tuo *TaskUpdateOne) SetIsAutoStart(b bool) *TaskUpdateOne {
	tuo.mutation.SetIsAutoStart(b)
	return tuo
}

// SetNillableIsAutoStart sets the "is_auto_start" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableIsAutoStart(b *bool) *TaskUpdateOne {
	if b != nil {
		tuo.SetIsAutoStart(*b)
	}
	return tuo
}

// SetStrictMode sets the "strict_mode" field.
func (tuo *TaskUpdateOne) SetStrictMode(b bool) *TaskUpdateOne {
	tuo.mutation.SetStrictMode(b)
	return tuo
}

// SetNillableStrictMode sets the "strict_mode" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableStrictMode(b *bool) *TaskUpdateOne {
	if b != nil {
		tuo.SetStrictMode(*b)
	}
	return tuo
}

// SetExtras sets the "extras" field.
func (tuo *TaskUpdateOne) SetExtras(m map[string]interface{}) *TaskUpdateOne {
	tuo.mutation.SetExtras(m)
	return tuo
}

// ClearExtras clears the value of the "extras" field.
func (tuo *TaskUpdateOne) ClearExtras() *TaskUpdateOne {
	tuo.mutation.ClearExtras()
	return tuo
}

// SetSpaceID sets the "space_id" field.
func (tuo *TaskUpdateOne) SetSpaceID(s string) *TaskUpdateOne {
	tuo.mutation.SetSpaceID(s)
	return tuo
}

// SetNillableSpaceID sets the "space_id" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableSpaceID(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetSpaceID(*s)
	}
	return tuo
}

// ClearSpaceID clears the value of the "space_id" field.
func (tuo *TaskUpdateOne) ClearSpaceID() *TaskUpdateOne {
	tuo.mutation.ClearSpaceID()
	return tuo
}

// SetCreatedBy sets the "created_by" field.
func (tuo *TaskUpdateOne) SetCreatedBy(s string) *TaskUpdateOne {
	tuo.mutation.SetCreatedBy(s)
	return tuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableCreatedBy(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetCreatedBy(*s)
	}
	return tuo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (tuo *TaskUpdateOne) ClearCreatedBy() *TaskUpdateOne {
	tuo.mutation.ClearCreatedBy()
	return tuo
}

// SetUpdatedBy sets the "updated_by" field.
func (tuo *TaskUpdateOne) SetUpdatedBy(s string) *TaskUpdateOne {
	tuo.mutation.SetUpdatedBy(s)
	return tuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableUpdatedBy(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetUpdatedBy(*s)
	}
	return tuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (tuo *TaskUpdateOne) ClearUpdatedBy() *TaskUpdateOne {
	tuo.mutation.ClearUpdatedBy()
	return tuo
}

// SetUpdatedAt sets the "updated_at" field.
func (tuo *TaskUpdateOne) SetUpdatedAt(i int64) *TaskUpdateOne {
	tuo.mutation.ResetUpdatedAt()
	tuo.mutation.SetUpdatedAt(i)
	return tuo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (tuo *TaskUpdateOne) AddUpdatedAt(i int64) *TaskUpdateOne {
	tuo.mutation.AddUpdatedAt(i)
	return tuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tuo *TaskUpdateOne) ClearUpdatedAt() *TaskUpdateOne {
	tuo.mutation.ClearUpdatedAt()
	return tuo
}

// SetTaskKey sets the "task_key" field.
func (tuo *TaskUpdateOne) SetTaskKey(s string) *TaskUpdateOne {
	tuo.mutation.SetTaskKey(s)
	return tuo
}

// SetNillableTaskKey sets the "task_key" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableTaskKey(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetTaskKey(*s)
	}
	return tuo
}

// SetParentID sets the "parent_id" field.
func (tuo *TaskUpdateOne) SetParentID(s string) *TaskUpdateOne {
	tuo.mutation.SetParentID(s)
	return tuo
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableParentID(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetParentID(*s)
	}
	return tuo
}

// ClearParentID clears the value of the "parent_id" field.
func (tuo *TaskUpdateOne) ClearParentID() *TaskUpdateOne {
	tuo.mutation.ClearParentID()
	return tuo
}

// SetChildIds sets the "child_ids" field.
func (tuo *TaskUpdateOne) SetChildIds(s []string) *TaskUpdateOne {
	tuo.mutation.SetChildIds(s)
	return tuo
}

// AppendChildIds appends s to the "child_ids" field.
func (tuo *TaskUpdateOne) AppendChildIds(s []string) *TaskUpdateOne {
	tuo.mutation.AppendChildIds(s)
	return tuo
}

// SetAction sets the "action" field.
func (tuo *TaskUpdateOne) SetAction(s string) *TaskUpdateOne {
	tuo.mutation.SetAction(s)
	return tuo
}

// SetNillableAction sets the "action" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableAction(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetAction(*s)
	}
	return tuo
}

// ClearAction clears the value of the "action" field.
func (tuo *TaskUpdateOne) ClearAction() *TaskUpdateOne {
	tuo.mutation.ClearAction()
	return tuo
}

// SetComment sets the "comment" field.
func (tuo *TaskUpdateOne) SetComment(s string) *TaskUpdateOne {
	tuo.mutation.SetComment(s)
	return tuo
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableComment(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetComment(*s)
	}
	return tuo
}

// ClearComment clears the value of the "comment" field.
func (tuo *TaskUpdateOne) ClearComment() *TaskUpdateOne {
	tuo.mutation.ClearComment()
	return tuo
}

// SetAttachments sets the "attachments" field.
func (tuo *TaskUpdateOne) SetAttachments(m map[string]interface{}) *TaskUpdateOne {
	tuo.mutation.SetAttachments(m)
	return tuo
}

// ClearAttachments clears the value of the "attachments" field.
func (tuo *TaskUpdateOne) ClearAttachments() *TaskUpdateOne {
	tuo.mutation.ClearAttachments()
	return tuo
}

// SetFormData sets the "form_data" field.
func (tuo *TaskUpdateOne) SetFormData(m map[string]interface{}) *TaskUpdateOne {
	tuo.mutation.SetFormData(m)
	return tuo
}

// ClearFormData clears the value of the "form_data" field.
func (tuo *TaskUpdateOne) ClearFormData() *TaskUpdateOne {
	tuo.mutation.ClearFormData()
	return tuo
}

// SetVariables sets the "variables" field.
func (tuo *TaskUpdateOne) SetVariables(m map[string]interface{}) *TaskUpdateOne {
	tuo.mutation.SetVariables(m)
	return tuo
}

// ClearVariables clears the value of the "variables" field.
func (tuo *TaskUpdateOne) ClearVariables() *TaskUpdateOne {
	tuo.mutation.ClearVariables()
	return tuo
}

// SetIsResubmit sets the "is_resubmit" field.
func (tuo *TaskUpdateOne) SetIsResubmit(b bool) *TaskUpdateOne {
	tuo.mutation.SetIsResubmit(b)
	return tuo
}

// SetNillableIsResubmit sets the "is_resubmit" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableIsResubmit(b *bool) *TaskUpdateOne {
	if b != nil {
		tuo.SetIsResubmit(*b)
	}
	return tuo
}

// SetClaimTime sets the "claim_time" field.
func (tuo *TaskUpdateOne) SetClaimTime(i int64) *TaskUpdateOne {
	tuo.mutation.ResetClaimTime()
	tuo.mutation.SetClaimTime(i)
	return tuo
}

// SetNillableClaimTime sets the "claim_time" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableClaimTime(i *int64) *TaskUpdateOne {
	if i != nil {
		tuo.SetClaimTime(*i)
	}
	return tuo
}

// AddClaimTime adds i to the "claim_time" field.
func (tuo *TaskUpdateOne) AddClaimTime(i int64) *TaskUpdateOne {
	tuo.mutation.AddClaimTime(i)
	return tuo
}

// ClearClaimTime clears the value of the "claim_time" field.
func (tuo *TaskUpdateOne) ClearClaimTime() *TaskUpdateOne {
	tuo.mutation.ClearClaimTime()
	return tuo
}

// SetIsUrged sets the "is_urged" field.
func (tuo *TaskUpdateOne) SetIsUrged(b bool) *TaskUpdateOne {
	tuo.mutation.SetIsUrged(b)
	return tuo
}

// SetNillableIsUrged sets the "is_urged" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableIsUrged(b *bool) *TaskUpdateOne {
	if b != nil {
		tuo.SetIsUrged(*b)
	}
	return tuo
}

// SetUrgeCount sets the "urge_count" field.
func (tuo *TaskUpdateOne) SetUrgeCount(i int) *TaskUpdateOne {
	tuo.mutation.ResetUrgeCount()
	tuo.mutation.SetUrgeCount(i)
	return tuo
}

// SetNillableUrgeCount sets the "urge_count" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableUrgeCount(i *int) *TaskUpdateOne {
	if i != nil {
		tuo.SetUrgeCount(*i)
	}
	return tuo
}

// AddUrgeCount adds i to the "urge_count" field.
func (tuo *TaskUpdateOne) AddUrgeCount(i int) *TaskUpdateOne {
	tuo.mutation.AddUrgeCount(i)
	return tuo
}

// Mutation returns the TaskMutation object of the builder.
func (tuo *TaskUpdateOne) Mutation() *TaskMutation {
	return tuo.mutation
}

// Where appends a list predicates to the TaskUpdate builder.
func (tuo *TaskUpdateOne) Where(ps ...predicate.Task) *TaskUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TaskUpdateOne) Select(field string, fields ...string) *TaskUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Task entity.
func (tuo *TaskUpdateOne) Save(ctx context.Context) (*Task, error) {
	tuo.defaults()
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TaskUpdateOne) SaveX(ctx context.Context) *Task {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TaskUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TaskUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tuo *TaskUpdateOne) defaults() {
	if _, ok := tuo.mutation.UpdatedAt(); !ok && !tuo.mutation.UpdatedAtCleared() {
		v := task.UpdateDefaultUpdatedAt()
		tuo.mutation.SetUpdatedAt(v)
	}
}

func (tuo *TaskUpdateOne) sqlSave(ctx context.Context) (_node *Task, err error) {
	_spec := sqlgraph.NewUpdateSpec(task.Table, task.Columns, sqlgraph.NewFieldSpec(task.FieldID, field.TypeString))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Task.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, task.FieldID)
		for _, f := range fields {
			if !task.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != task.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.Name(); ok {
		_spec.SetField(task.FieldName, field.TypeString, value)
	}
	if tuo.mutation.NameCleared() {
		_spec.ClearField(task.FieldName, field.TypeString)
	}
	if value, ok := tuo.mutation.Description(); ok {
		_spec.SetField(task.FieldDescription, field.TypeString, value)
	}
	if tuo.mutation.DescriptionCleared() {
		_spec.ClearField(task.FieldDescription, field.TypeString)
	}
	if value, ok := tuo.mutation.Status(); ok {
		_spec.SetField(task.FieldStatus, field.TypeString, value)
	}
	if tuo.mutation.StatusCleared() {
		_spec.ClearField(task.FieldStatus, field.TypeString)
	}
	if value, ok := tuo.mutation.ProcessID(); ok {
		_spec.SetField(task.FieldProcessID, field.TypeString, value)
	}
	if value, ok := tuo.mutation.TemplateID(); ok {
		_spec.SetField(task.FieldTemplateID, field.TypeString, value)
	}
	if value, ok := tuo.mutation.BusinessKey(); ok {
		_spec.SetField(task.FieldBusinessKey, field.TypeString, value)
	}
	if value, ok := tuo.mutation.NodeKey(); ok {
		_spec.SetField(task.FieldNodeKey, field.TypeString, value)
	}
	if value, ok := tuo.mutation.NodeType(); ok {
		_spec.SetField(task.FieldNodeType, field.TypeString, value)
	}
	if value, ok := tuo.mutation.NodeConfig(); ok {
		_spec.SetField(task.FieldNodeConfig, field.TypeJSON, value)
	}
	if tuo.mutation.NodeConfigCleared() {
		_spec.ClearField(task.FieldNodeConfig, field.TypeJSON)
	}
	if value, ok := tuo.mutation.NodeRules(); ok {
		_spec.SetField(task.FieldNodeRules, field.TypeJSON, value)
	}
	if tuo.mutation.NodeRulesCleared() {
		_spec.ClearField(task.FieldNodeRules, field.TypeJSON)
	}
	if value, ok := tuo.mutation.NodeEvents(); ok {
		_spec.SetField(task.FieldNodeEvents, field.TypeJSON, value)
	}
	if tuo.mutation.NodeEventsCleared() {
		_spec.ClearField(task.FieldNodeEvents, field.TypeJSON)
	}
	if value, ok := tuo.mutation.Assignees(); ok {
		_spec.SetField(task.FieldAssignees, field.TypeJSON, value)
	}
	if value, ok := tuo.mutation.AppendedAssignees(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, task.FieldAssignees, value)
		})
	}
	if value, ok := tuo.mutation.Candidates(); ok {
		_spec.SetField(task.FieldCandidates, field.TypeJSON, value)
	}
	if value, ok := tuo.mutation.AppendedCandidates(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, task.FieldCandidates, value)
		})
	}
	if value, ok := tuo.mutation.DelegatedFrom(); ok {
		_spec.SetField(task.FieldDelegatedFrom, field.TypeString, value)
	}
	if tuo.mutation.DelegatedFromCleared() {
		_spec.ClearField(task.FieldDelegatedFrom, field.TypeString)
	}
	if value, ok := tuo.mutation.DelegatedReason(); ok {
		_spec.SetField(task.FieldDelegatedReason, field.TypeString, value)
	}
	if tuo.mutation.DelegatedReasonCleared() {
		_spec.ClearField(task.FieldDelegatedReason, field.TypeString)
	}
	if value, ok := tuo.mutation.IsDelegated(); ok {
		_spec.SetField(task.FieldIsDelegated, field.TypeBool, value)
	}
	if value, ok := tuo.mutation.IsTransferred(); ok {
		_spec.SetField(task.FieldIsTransferred, field.TypeBool, value)
	}
	if value, ok := tuo.mutation.StartTime(); ok {
		_spec.SetField(task.FieldStartTime, field.TypeInt64, value)
	}
	if value, ok := tuo.mutation.AddedStartTime(); ok {
		_spec.AddField(task.FieldStartTime, field.TypeInt64, value)
	}
	if value, ok := tuo.mutation.EndTime(); ok {
		_spec.SetField(task.FieldEndTime, field.TypeInt64, value)
	}
	if value, ok := tuo.mutation.AddedEndTime(); ok {
		_spec.AddField(task.FieldEndTime, field.TypeInt64, value)
	}
	if tuo.mutation.EndTimeCleared() {
		_spec.ClearField(task.FieldEndTime, field.TypeInt64)
	}
	if value, ok := tuo.mutation.DueTime(); ok {
		_spec.SetField(task.FieldDueTime, field.TypeInt64, value)
	}
	if value, ok := tuo.mutation.AddedDueTime(); ok {
		_spec.AddField(task.FieldDueTime, field.TypeInt64, value)
	}
	if tuo.mutation.DueTimeCleared() {
		_spec.ClearField(task.FieldDueTime, field.TypeInt64)
	}
	if value, ok := tuo.mutation.Duration(); ok {
		_spec.SetField(task.FieldDuration, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.AddedDuration(); ok {
		_spec.AddField(task.FieldDuration, field.TypeInt, value)
	}
	if tuo.mutation.DurationCleared() {
		_spec.ClearField(task.FieldDuration, field.TypeInt)
	}
	if value, ok := tuo.mutation.Priority(); ok {
		_spec.SetField(task.FieldPriority, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.AddedPriority(); ok {
		_spec.AddField(task.FieldPriority, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.IsTimeout(); ok {
		_spec.SetField(task.FieldIsTimeout, field.TypeBool, value)
	}
	if value, ok := tuo.mutation.ReminderCount(); ok {
		_spec.SetField(task.FieldReminderCount, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.AddedReminderCount(); ok {
		_spec.AddField(task.FieldReminderCount, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.AllowCancel(); ok {
		_spec.SetField(task.FieldAllowCancel, field.TypeBool, value)
	}
	if value, ok := tuo.mutation.AllowUrge(); ok {
		_spec.SetField(task.FieldAllowUrge, field.TypeBool, value)
	}
	if value, ok := tuo.mutation.AllowDelegate(); ok {
		_spec.SetField(task.FieldAllowDelegate, field.TypeBool, value)
	}
	if value, ok := tuo.mutation.AllowTransfer(); ok {
		_spec.SetField(task.FieldAllowTransfer, field.TypeBool, value)
	}
	if value, ok := tuo.mutation.IsDraftEnabled(); ok {
		_spec.SetField(task.FieldIsDraftEnabled, field.TypeBool, value)
	}
	if value, ok := tuo.mutation.IsAutoStart(); ok {
		_spec.SetField(task.FieldIsAutoStart, field.TypeBool, value)
	}
	if value, ok := tuo.mutation.StrictMode(); ok {
		_spec.SetField(task.FieldStrictMode, field.TypeBool, value)
	}
	if value, ok := tuo.mutation.Extras(); ok {
		_spec.SetField(task.FieldExtras, field.TypeJSON, value)
	}
	if tuo.mutation.ExtrasCleared() {
		_spec.ClearField(task.FieldExtras, field.TypeJSON)
	}
	if value, ok := tuo.mutation.SpaceID(); ok {
		_spec.SetField(task.FieldSpaceID, field.TypeString, value)
	}
	if tuo.mutation.SpaceIDCleared() {
		_spec.ClearField(task.FieldSpaceID, field.TypeString)
	}
	if value, ok := tuo.mutation.CreatedBy(); ok {
		_spec.SetField(task.FieldCreatedBy, field.TypeString, value)
	}
	if tuo.mutation.CreatedByCleared() {
		_spec.ClearField(task.FieldCreatedBy, field.TypeString)
	}
	if value, ok := tuo.mutation.UpdatedBy(); ok {
		_spec.SetField(task.FieldUpdatedBy, field.TypeString, value)
	}
	if tuo.mutation.UpdatedByCleared() {
		_spec.ClearField(task.FieldUpdatedBy, field.TypeString)
	}
	if tuo.mutation.CreatedAtCleared() {
		_spec.ClearField(task.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := tuo.mutation.UpdatedAt(); ok {
		_spec.SetField(task.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := tuo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(task.FieldUpdatedAt, field.TypeInt64, value)
	}
	if tuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(task.FieldUpdatedAt, field.TypeInt64)
	}
	if value, ok := tuo.mutation.TaskKey(); ok {
		_spec.SetField(task.FieldTaskKey, field.TypeString, value)
	}
	if value, ok := tuo.mutation.ParentID(); ok {
		_spec.SetField(task.FieldParentID, field.TypeString, value)
	}
	if tuo.mutation.ParentIDCleared() {
		_spec.ClearField(task.FieldParentID, field.TypeString)
	}
	if value, ok := tuo.mutation.ChildIds(); ok {
		_spec.SetField(task.FieldChildIds, field.TypeJSON, value)
	}
	if value, ok := tuo.mutation.AppendedChildIds(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, task.FieldChildIds, value)
		})
	}
	if value, ok := tuo.mutation.Action(); ok {
		_spec.SetField(task.FieldAction, field.TypeString, value)
	}
	if tuo.mutation.ActionCleared() {
		_spec.ClearField(task.FieldAction, field.TypeString)
	}
	if value, ok := tuo.mutation.Comment(); ok {
		_spec.SetField(task.FieldComment, field.TypeString, value)
	}
	if tuo.mutation.CommentCleared() {
		_spec.ClearField(task.FieldComment, field.TypeString)
	}
	if value, ok := tuo.mutation.Attachments(); ok {
		_spec.SetField(task.FieldAttachments, field.TypeJSON, value)
	}
	if tuo.mutation.AttachmentsCleared() {
		_spec.ClearField(task.FieldAttachments, field.TypeJSON)
	}
	if value, ok := tuo.mutation.FormData(); ok {
		_spec.SetField(task.FieldFormData, field.TypeJSON, value)
	}
	if tuo.mutation.FormDataCleared() {
		_spec.ClearField(task.FieldFormData, field.TypeJSON)
	}
	if value, ok := tuo.mutation.Variables(); ok {
		_spec.SetField(task.FieldVariables, field.TypeJSON, value)
	}
	if tuo.mutation.VariablesCleared() {
		_spec.ClearField(task.FieldVariables, field.TypeJSON)
	}
	if value, ok := tuo.mutation.IsResubmit(); ok {
		_spec.SetField(task.FieldIsResubmit, field.TypeBool, value)
	}
	if value, ok := tuo.mutation.ClaimTime(); ok {
		_spec.SetField(task.FieldClaimTime, field.TypeInt64, value)
	}
	if value, ok := tuo.mutation.AddedClaimTime(); ok {
		_spec.AddField(task.FieldClaimTime, field.TypeInt64, value)
	}
	if tuo.mutation.ClaimTimeCleared() {
		_spec.ClearField(task.FieldClaimTime, field.TypeInt64)
	}
	if value, ok := tuo.mutation.IsUrged(); ok {
		_spec.SetField(task.FieldIsUrged, field.TypeBool, value)
	}
	if value, ok := tuo.mutation.UrgeCount(); ok {
		_spec.SetField(task.FieldUrgeCount, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.AddedUrgeCount(); ok {
		_spec.AddField(task.FieldUrgeCount, field.TypeInt, value)
	}
	_node = &Task{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{task.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
