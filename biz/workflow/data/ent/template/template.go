// Code generated by ent, DO NOT EDIT.

package template

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the template type in the database.
	Label = "template"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldCode holds the string denoting the code field in the database.
	FieldCode = "code"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldVersion holds the string denoting the version field in the database.
	FieldVersion = "version"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldDisabled holds the string denoting the disabled field in the database.
	FieldDisabled = "disabled"
	// FieldFormCode holds the string denoting the form_code field in the database.
	FieldFormCode = "form_code"
	// FieldFormVersion holds the string denoting the form_version field in the database.
	FieldFormVersion = "form_version"
	// FieldFormConfig holds the string denoting the form_config field in the database.
	FieldFormConfig = "form_config"
	// FieldFormPermissions holds the string denoting the form_permissions field in the database.
	FieldFormPermissions = "form_permissions"
	// FieldFieldPermissions holds the string denoting the field_permissions field in the database.
	FieldFieldPermissions = "field_permissions"
	// FieldNodeKey holds the string denoting the node_key field in the database.
	FieldNodeKey = "node_key"
	// FieldNodeType holds the string denoting the node_type field in the database.
	FieldNodeType = "node_type"
	// FieldNodeConfig holds the string denoting the node_config field in the database.
	FieldNodeConfig = "node_config"
	// FieldNodeRules holds the string denoting the node_rules field in the database.
	FieldNodeRules = "node_rules"
	// FieldNodeEvents holds the string denoting the node_events field in the database.
	FieldNodeEvents = "node_events"
	// FieldBusinessTags holds the string denoting the business_tags field in the database.
	FieldBusinessTags = "business_tags"
	// FieldModuleCode holds the string denoting the module_code field in the database.
	FieldModuleCode = "module_code"
	// FieldCategory holds the string denoting the category field in the database.
	FieldCategory = "category"
	// FieldAllowCancel holds the string denoting the allow_cancel field in the database.
	FieldAllowCancel = "allow_cancel"
	// FieldAllowUrge holds the string denoting the allow_urge field in the database.
	FieldAllowUrge = "allow_urge"
	// FieldAllowDelegate holds the string denoting the allow_delegate field in the database.
	FieldAllowDelegate = "allow_delegate"
	// FieldAllowTransfer holds the string denoting the allow_transfer field in the database.
	FieldAllowTransfer = "allow_transfer"
	// FieldIsDraftEnabled holds the string denoting the is_draft_enabled field in the database.
	FieldIsDraftEnabled = "is_draft_enabled"
	// FieldIsAutoStart holds the string denoting the is_auto_start field in the database.
	FieldIsAutoStart = "is_auto_start"
	// FieldStrictMode holds the string denoting the strict_mode field in the database.
	FieldStrictMode = "strict_mode"
	// FieldViewers holds the string denoting the viewers field in the database.
	FieldViewers = "viewers"
	// FieldEditors holds the string denoting the editors field in the database.
	FieldEditors = "editors"
	// FieldPermissionConfigs holds the string denoting the permission_configs field in the database.
	FieldPermissionConfigs = "permission_configs"
	// FieldRoleConfigs holds the string denoting the role_configs field in the database.
	FieldRoleConfigs = "role_configs"
	// FieldVisibleRange holds the string denoting the visible_range field in the database.
	FieldVisibleRange = "visible_range"
	// FieldExtras holds the string denoting the extras field in the database.
	FieldExtras = "extras"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldTemplateKey holds the string denoting the template_key field in the database.
	FieldTemplateKey = "template_key"
	// FieldProcessRules holds the string denoting the process_rules field in the database.
	FieldProcessRules = "process_rules"
	// FieldTriggerConditions holds the string denoting the trigger_conditions field in the database.
	FieldTriggerConditions = "trigger_conditions"
	// FieldTimeoutConfig holds the string denoting the timeout_config field in the database.
	FieldTimeoutConfig = "timeout_config"
	// FieldReminderConfig holds the string denoting the reminder_config field in the database.
	FieldReminderConfig = "reminder_config"
	// FieldSourceVersion holds the string denoting the source_version field in the database.
	FieldSourceVersion = "source_version"
	// FieldIsLatest holds the string denoting the is_latest field in the database.
	FieldIsLatest = "is_latest"
	// FieldEffectiveTime holds the string denoting the effective_time field in the database.
	FieldEffectiveTime = "effective_time"
	// FieldExpireTime holds the string denoting the expire_time field in the database.
	FieldExpireTime = "expire_time"
	// Table holds the table name of the template in the database.
	Table = "ncse_flow_template"
)

// Columns holds all SQL columns for template fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldCode,
	FieldDescription,
	FieldType,
	FieldVersion,
	FieldStatus,
	FieldDisabled,
	FieldFormCode,
	FieldFormVersion,
	FieldFormConfig,
	FieldFormPermissions,
	FieldFieldPermissions,
	FieldNodeKey,
	FieldNodeType,
	FieldNodeConfig,
	FieldNodeRules,
	FieldNodeEvents,
	FieldBusinessTags,
	FieldModuleCode,
	FieldCategory,
	FieldAllowCancel,
	FieldAllowUrge,
	FieldAllowDelegate,
	FieldAllowTransfer,
	FieldIsDraftEnabled,
	FieldIsAutoStart,
	FieldStrictMode,
	FieldViewers,
	FieldEditors,
	FieldPermissionConfigs,
	FieldRoleConfigs,
	FieldVisibleRange,
	FieldExtras,
	FieldTenantID,
	FieldCreatedBy,
	FieldUpdatedBy,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldTemplateKey,
	FieldProcessRules,
	FieldTriggerConditions,
	FieldTimeoutConfig,
	FieldReminderConfig,
	FieldSourceVersion,
	FieldIsLatest,
	FieldEffectiveTime,
	FieldExpireTime,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultDisabled holds the default value on creation for the "disabled" field.
	DefaultDisabled bool
	// DefaultAllowCancel holds the default value on creation for the "allow_cancel" field.
	DefaultAllowCancel bool
	// DefaultAllowUrge holds the default value on creation for the "allow_urge" field.
	DefaultAllowUrge bool
	// DefaultAllowDelegate holds the default value on creation for the "allow_delegate" field.
	DefaultAllowDelegate bool
	// DefaultAllowTransfer holds the default value on creation for the "allow_transfer" field.
	DefaultAllowTransfer bool
	// DefaultIsDraftEnabled holds the default value on creation for the "is_draft_enabled" field.
	DefaultIsDraftEnabled bool
	// DefaultIsAutoStart holds the default value on creation for the "is_auto_start" field.
	DefaultIsAutoStart bool
	// DefaultStrictMode holds the default value on creation for the "strict_mode" field.
	DefaultStrictMode bool
	// DefaultExtras holds the default value on creation for the "extras" field.
	DefaultExtras map[string]interface{}
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() int64
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() int64
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() int64
	// DefaultIsLatest holds the default value on creation for the "is_latest" field.
	DefaultIsLatest bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)

// OrderOption defines the ordering options for the Template queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByCode orders the results by the code field.
func ByCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCode, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByVersion orders the results by the version field.
func ByVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVersion, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByDisabled orders the results by the disabled field.
func ByDisabled(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisabled, opts...).ToFunc()
}

// ByFormCode orders the results by the form_code field.
func ByFormCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFormCode, opts...).ToFunc()
}

// ByFormVersion orders the results by the form_version field.
func ByFormVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFormVersion, opts...).ToFunc()
}

// ByNodeKey orders the results by the node_key field.
func ByNodeKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNodeKey, opts...).ToFunc()
}

// ByNodeType orders the results by the node_type field.
func ByNodeType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNodeType, opts...).ToFunc()
}

// ByModuleCode orders the results by the module_code field.
func ByModuleCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModuleCode, opts...).ToFunc()
}

// ByCategory orders the results by the category field.
func ByCategory(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCategory, opts...).ToFunc()
}

// ByAllowCancel orders the results by the allow_cancel field.
func ByAllowCancel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAllowCancel, opts...).ToFunc()
}

// ByAllowUrge orders the results by the allow_urge field.
func ByAllowUrge(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAllowUrge, opts...).ToFunc()
}

// ByAllowDelegate orders the results by the allow_delegate field.
func ByAllowDelegate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAllowDelegate, opts...).ToFunc()
}

// ByAllowTransfer orders the results by the allow_transfer field.
func ByAllowTransfer(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAllowTransfer, opts...).ToFunc()
}

// ByIsDraftEnabled orders the results by the is_draft_enabled field.
func ByIsDraftEnabled(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsDraftEnabled, opts...).ToFunc()
}

// ByIsAutoStart orders the results by the is_auto_start field.
func ByIsAutoStart(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsAutoStart, opts...).ToFunc()
}

// ByStrictMode orders the results by the strict_mode field.
func ByStrictMode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStrictMode, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the updated_by field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByTemplateKey orders the results by the template_key field.
func ByTemplateKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTemplateKey, opts...).ToFunc()
}

// BySourceVersion orders the results by the source_version field.
func BySourceVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSourceVersion, opts...).ToFunc()
}

// ByIsLatest orders the results by the is_latest field.
func ByIsLatest(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsLatest, opts...).ToFunc()
}

// ByEffectiveTime orders the results by the effective_time field.
func ByEffectiveTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEffectiveTime, opts...).ToFunc()
}

// ByExpireTime orders the results by the expire_time field.
func ByExpireTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExpireTime, opts...).ToFunc()
}
