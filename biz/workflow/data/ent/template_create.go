// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/workflow/data/ent/template"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TemplateCreate is the builder for creating a Template entity.
type TemplateCreate struct {
	config
	mutation *TemplateMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (tc *TemplateCreate) SetName(s string) *TemplateCreate {
	tc.mutation.SetName(s)
	return tc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tc *TemplateCreate) SetNillableName(s *string) *TemplateCreate {
	if s != nil {
		tc.SetName(*s)
	}
	return tc
}

// SetCode sets the "code" field.
func (tc *TemplateCreate) SetCode(s string) *TemplateCreate {
	tc.mutation.SetCode(s)
	return tc
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (tc *TemplateCreate) SetNillableCode(s *string) *TemplateCreate {
	if s != nil {
		tc.SetCode(*s)
	}
	return tc
}

// SetDescription sets the "description" field.
func (tc *TemplateCreate) SetDescription(s string) *TemplateCreate {
	tc.mutation.SetDescription(s)
	return tc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tc *TemplateCreate) SetNillableDescription(s *string) *TemplateCreate {
	if s != nil {
		tc.SetDescription(*s)
	}
	return tc
}

// SetType sets the "type" field.
func (tc *TemplateCreate) SetType(s string) *TemplateCreate {
	tc.mutation.SetType(s)
	return tc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (tc *TemplateCreate) SetNillableType(s *string) *TemplateCreate {
	if s != nil {
		tc.SetType(*s)
	}
	return tc
}

// SetVersion sets the "version" field.
func (tc *TemplateCreate) SetVersion(s string) *TemplateCreate {
	tc.mutation.SetVersion(s)
	return tc
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (tc *TemplateCreate) SetNillableVersion(s *string) *TemplateCreate {
	if s != nil {
		tc.SetVersion(*s)
	}
	return tc
}

// SetStatus sets the "status" field.
func (tc *TemplateCreate) SetStatus(s string) *TemplateCreate {
	tc.mutation.SetStatus(s)
	return tc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tc *TemplateCreate) SetNillableStatus(s *string) *TemplateCreate {
	if s != nil {
		tc.SetStatus(*s)
	}
	return tc
}

// SetDisabled sets the "disabled" field.
func (tc *TemplateCreate) SetDisabled(b bool) *TemplateCreate {
	tc.mutation.SetDisabled(b)
	return tc
}

// SetNillableDisabled sets the "disabled" field if the given value is not nil.
func (tc *TemplateCreate) SetNillableDisabled(b *bool) *TemplateCreate {
	if b != nil {
		tc.SetDisabled(*b)
	}
	return tc
}

// SetFormCode sets the "form_code" field.
func (tc *TemplateCreate) SetFormCode(s string) *TemplateCreate {
	tc.mutation.SetFormCode(s)
	return tc
}

// SetFormVersion sets the "form_version" field.
func (tc *TemplateCreate) SetFormVersion(s string) *TemplateCreate {
	tc.mutation.SetFormVersion(s)
	return tc
}

// SetNillableFormVersion sets the "form_version" field if the given value is not nil.
func (tc *TemplateCreate) SetNillableFormVersion(s *string) *TemplateCreate {
	if s != nil {
		tc.SetFormVersion(*s)
	}
	return tc
}

// SetFormConfig sets the "form_config" field.
func (tc *TemplateCreate) SetFormConfig(m map[string]interface{}) *TemplateCreate {
	tc.mutation.SetFormConfig(m)
	return tc
}

// SetFormPermissions sets the "form_permissions" field.
func (tc *TemplateCreate) SetFormPermissions(m map[string]interface{}) *TemplateCreate {
	tc.mutation.SetFormPermissions(m)
	return tc
}

// SetFieldPermissions sets the "field_permissions" field.
func (tc *TemplateCreate) SetFieldPermissions(m map[string]interface{}) *TemplateCreate {
	tc.mutation.SetFieldPermissions(m)
	return tc
}

// SetNodeKey sets the "node_key" field.
func (tc *TemplateCreate) SetNodeKey(s string) *TemplateCreate {
	tc.mutation.SetNodeKey(s)
	return tc
}

// SetNodeType sets the "node_type" field.
func (tc *TemplateCreate) SetNodeType(s string) *TemplateCreate {
	tc.mutation.SetNodeType(s)
	return tc
}

// SetNodeConfig sets the "node_config" field.
func (tc *TemplateCreate) SetNodeConfig(m map[string]interface{}) *TemplateCreate {
	tc.mutation.SetNodeConfig(m)
	return tc
}

// SetNodeRules sets the "node_rules" field.
func (tc *TemplateCreate) SetNodeRules(m map[string]interface{}) *TemplateCreate {
	tc.mutation.SetNodeRules(m)
	return tc
}

// SetNodeEvents sets the "node_events" field.
func (tc *TemplateCreate) SetNodeEvents(m map[string]interface{}) *TemplateCreate {
	tc.mutation.SetNodeEvents(m)
	return tc
}

// SetBusinessTags sets the "business_tags" field.
func (tc *TemplateCreate) SetBusinessTags(s []string) *TemplateCreate {
	tc.mutation.SetBusinessTags(s)
	return tc
}

// SetModuleCode sets the "module_code" field.
func (tc *TemplateCreate) SetModuleCode(s string) *TemplateCreate {
	tc.mutation.SetModuleCode(s)
	return tc
}

// SetCategory sets the "category" field.
func (tc *TemplateCreate) SetCategory(s string) *TemplateCreate {
	tc.mutation.SetCategory(s)
	return tc
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (tc *TemplateCreate) SetNillableCategory(s *string) *TemplateCreate {
	if s != nil {
		tc.SetCategory(*s)
	}
	return tc
}

// SetAllowCancel sets the "allow_cancel" field.
func (tc *TemplateCreate) SetAllowCancel(b bool) *TemplateCreate {
	tc.mutation.SetAllowCancel(b)
	return tc
}

// SetNillableAllowCancel sets the "allow_cancel" field if the given value is not nil.
func (tc *TemplateCreate) SetNillableAllowCancel(b *bool) *TemplateCreate {
	if b != nil {
		tc.SetAllowCancel(*b)
	}
	return tc
}

// SetAllowUrge sets the "allow_urge" field.
func (tc *TemplateCreate) SetAllowUrge(b bool) *TemplateCreate {
	tc.mutation.SetAllowUrge(b)
	return tc
}

// SetNillableAllowUrge sets the "allow_urge" field if the given value is not nil.
func (tc *TemplateCreate) SetNillableAllowUrge(b *bool) *TemplateCreate {
	if b != nil {
		tc.SetAllowUrge(*b)
	}
	return tc
}

// SetAllowDelegate sets the "allow_delegate" field.
func (tc *TemplateCreate) SetAllowDelegate(b bool) *TemplateCreate {
	tc.mutation.SetAllowDelegate(b)
	return tc
}

// SetNillableAllowDelegate sets the "allow_delegate" field if the given value is not nil.
func (tc *TemplateCreate) SetNillableAllowDelegate(b *bool) *TemplateCreate {
	if b != nil {
		tc.SetAllowDelegate(*b)
	}
	return tc
}

// SetAllowTransfer sets the "allow_transfer" field.
func (tc *TemplateCreate) SetAllowTransfer(b bool) *TemplateCreate {
	tc.mutation.SetAllowTransfer(b)
	return tc
}

// SetNillableAllowTransfer sets the "allow_transfer" field if the given value is not nil.
func (tc *TemplateCreate) SetNillableAllowTransfer(b *bool) *TemplateCreate {
	if b != nil {
		tc.SetAllowTransfer(*b)
	}
	return tc
}

// SetIsDraftEnabled sets the "is_draft_enabled" field.
func (tc *TemplateCreate) SetIsDraftEnabled(b bool) *TemplateCreate {
	tc.mutation.SetIsDraftEnabled(b)
	return tc
}

// SetNillableIsDraftEnabled sets the "is_draft_enabled" field if the given value is not nil.
func (tc *TemplateCreate) SetNillableIsDraftEnabled(b *bool) *TemplateCreate {
	if b != nil {
		tc.SetIsDraftEnabled(*b)
	}
	return tc
}

// SetIsAutoStart sets the "is_auto_start" field.
func (tc *TemplateCreate) SetIsAutoStart(b bool) *TemplateCreate {
	tc.mutation.SetIsAutoStart(b)
	return tc
}

// SetNillableIsAutoStart sets the "is_auto_start" field if the given value is not nil.
func (tc *TemplateCreate) SetNillableIsAutoStart(b *bool) *TemplateCreate {
	if b != nil {
		tc.SetIsAutoStart(*b)
	}
	return tc
}

// SetStrictMode sets the "strict_mode" field.
func (tc *TemplateCreate) SetStrictMode(b bool) *TemplateCreate {
	tc.mutation.SetStrictMode(b)
	return tc
}

// SetNillableStrictMode sets the "strict_mode" field if the given value is not nil.
func (tc *TemplateCreate) SetNillableStrictMode(b *bool) *TemplateCreate {
	if b != nil {
		tc.SetStrictMode(*b)
	}
	return tc
}

// SetViewers sets the "viewers" field.
func (tc *TemplateCreate) SetViewers(s []string) *TemplateCreate {
	tc.mutation.SetViewers(s)
	return tc
}

// SetEditors sets the "editors" field.
func (tc *TemplateCreate) SetEditors(s []string) *TemplateCreate {
	tc.mutation.SetEditors(s)
	return tc
}

// SetPermissionConfigs sets the "permission_configs" field.
func (tc *TemplateCreate) SetPermissionConfigs(m map[string]interface{}) *TemplateCreate {
	tc.mutation.SetPermissionConfigs(m)
	return tc
}

// SetRoleConfigs sets the "role_configs" field.
func (tc *TemplateCreate) SetRoleConfigs(m map[string]interface{}) *TemplateCreate {
	tc.mutation.SetRoleConfigs(m)
	return tc
}

// SetVisibleRange sets the "visible_range" field.
func (tc *TemplateCreate) SetVisibleRange(m map[string]interface{}) *TemplateCreate {
	tc.mutation.SetVisibleRange(m)
	return tc
}

// SetExtras sets the "extras" field.
func (tc *TemplateCreate) SetExtras(m map[string]interface{}) *TemplateCreate {
	tc.mutation.SetExtras(m)
	return tc
}

// SetSpaceID sets the "space_id" field.
func (tc *TemplateCreate) SetSpaceID(s string) *TemplateCreate {
	tc.mutation.SetSpaceID(s)
	return tc
}

// SetNillableSpaceID sets the "space_id" field if the given value is not nil.
func (tc *TemplateCreate) SetNillableSpaceID(s *string) *TemplateCreate {
	if s != nil {
		tc.SetSpaceID(*s)
	}
	return tc
}

// SetCreatedBy sets the "created_by" field.
func (tc *TemplateCreate) SetCreatedBy(s string) *TemplateCreate {
	tc.mutation.SetCreatedBy(s)
	return tc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (tc *TemplateCreate) SetNillableCreatedBy(s *string) *TemplateCreate {
	if s != nil {
		tc.SetCreatedBy(*s)
	}
	return tc
}

// SetUpdatedBy sets the "updated_by" field.
func (tc *TemplateCreate) SetUpdatedBy(s string) *TemplateCreate {
	tc.mutation.SetUpdatedBy(s)
	return tc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (tc *TemplateCreate) SetNillableUpdatedBy(s *string) *TemplateCreate {
	if s != nil {
		tc.SetUpdatedBy(*s)
	}
	return tc
}

// SetCreatedAt sets the "created_at" field.
func (tc *TemplateCreate) SetCreatedAt(i int64) *TemplateCreate {
	tc.mutation.SetCreatedAt(i)
	return tc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tc *TemplateCreate) SetNillableCreatedAt(i *int64) *TemplateCreate {
	if i != nil {
		tc.SetCreatedAt(*i)
	}
	return tc
}

// SetUpdatedAt sets the "updated_at" field.
func (tc *TemplateCreate) SetUpdatedAt(i int64) *TemplateCreate {
	tc.mutation.SetUpdatedAt(i)
	return tc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tc *TemplateCreate) SetNillableUpdatedAt(i *int64) *TemplateCreate {
	if i != nil {
		tc.SetUpdatedAt(*i)
	}
	return tc
}

// SetTemplateKey sets the "template_key" field.
func (tc *TemplateCreate) SetTemplateKey(s string) *TemplateCreate {
	tc.mutation.SetTemplateKey(s)
	return tc
}

// SetProcessRules sets the "process_rules" field.
func (tc *TemplateCreate) SetProcessRules(m map[string]interface{}) *TemplateCreate {
	tc.mutation.SetProcessRules(m)
	return tc
}

// SetTriggerConditions sets the "trigger_conditions" field.
func (tc *TemplateCreate) SetTriggerConditions(m map[string]interface{}) *TemplateCreate {
	tc.mutation.SetTriggerConditions(m)
	return tc
}

// SetTimeoutConfig sets the "timeout_config" field.
func (tc *TemplateCreate) SetTimeoutConfig(m map[string]interface{}) *TemplateCreate {
	tc.mutation.SetTimeoutConfig(m)
	return tc
}

// SetReminderConfig sets the "reminder_config" field.
func (tc *TemplateCreate) SetReminderConfig(m map[string]interface{}) *TemplateCreate {
	tc.mutation.SetReminderConfig(m)
	return tc
}

// SetSourceVersion sets the "source_version" field.
func (tc *TemplateCreate) SetSourceVersion(s string) *TemplateCreate {
	tc.mutation.SetSourceVersion(s)
	return tc
}

// SetNillableSourceVersion sets the "source_version" field if the given value is not nil.
func (tc *TemplateCreate) SetNillableSourceVersion(s *string) *TemplateCreate {
	if s != nil {
		tc.SetSourceVersion(*s)
	}
	return tc
}

// SetIsLatest sets the "is_latest" field.
func (tc *TemplateCreate) SetIsLatest(b bool) *TemplateCreate {
	tc.mutation.SetIsLatest(b)
	return tc
}

// SetNillableIsLatest sets the "is_latest" field if the given value is not nil.
func (tc *TemplateCreate) SetNillableIsLatest(b *bool) *TemplateCreate {
	if b != nil {
		tc.SetIsLatest(*b)
	}
	return tc
}

// SetEffectiveTime sets the "effective_time" field.
func (tc *TemplateCreate) SetEffectiveTime(i int64) *TemplateCreate {
	tc.mutation.SetEffectiveTime(i)
	return tc
}

// SetNillableEffectiveTime sets the "effective_time" field if the given value is not nil.
func (tc *TemplateCreate) SetNillableEffectiveTime(i *int64) *TemplateCreate {
	if i != nil {
		tc.SetEffectiveTime(*i)
	}
	return tc
}

// SetExpireTime sets the "expire_time" field.
func (tc *TemplateCreate) SetExpireTime(i int64) *TemplateCreate {
	tc.mutation.SetExpireTime(i)
	return tc
}

// SetNillableExpireTime sets the "expire_time" field if the given value is not nil.
func (tc *TemplateCreate) SetNillableExpireTime(i *int64) *TemplateCreate {
	if i != nil {
		tc.SetExpireTime(*i)
	}
	return tc
}

// SetID sets the "id" field.
func (tc *TemplateCreate) SetID(s string) *TemplateCreate {
	tc.mutation.SetID(s)
	return tc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (tc *TemplateCreate) SetNillableID(s *string) *TemplateCreate {
	if s != nil {
		tc.SetID(*s)
	}
	return tc
}

// Mutation returns the TemplateMutation object of the builder.
func (tc *TemplateCreate) Mutation() *TemplateMutation {
	return tc.mutation
}

// Save creates the Template in the database.
func (tc *TemplateCreate) Save(ctx context.Context) (*Template, error) {
	tc.defaults()
	return withHooks(ctx, tc.sqlSave, tc.mutation, tc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TemplateCreate) SaveX(ctx context.Context) *Template {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TemplateCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TemplateCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *TemplateCreate) defaults() {
	if _, ok := tc.mutation.Disabled(); !ok {
		v := template.DefaultDisabled
		tc.mutation.SetDisabled(v)
	}
	if _, ok := tc.mutation.AllowCancel(); !ok {
		v := template.DefaultAllowCancel
		tc.mutation.SetAllowCancel(v)
	}
	if _, ok := tc.mutation.AllowUrge(); !ok {
		v := template.DefaultAllowUrge
		tc.mutation.SetAllowUrge(v)
	}
	if _, ok := tc.mutation.AllowDelegate(); !ok {
		v := template.DefaultAllowDelegate
		tc.mutation.SetAllowDelegate(v)
	}
	if _, ok := tc.mutation.AllowTransfer(); !ok {
		v := template.DefaultAllowTransfer
		tc.mutation.SetAllowTransfer(v)
	}
	if _, ok := tc.mutation.IsDraftEnabled(); !ok {
		v := template.DefaultIsDraftEnabled
		tc.mutation.SetIsDraftEnabled(v)
	}
	if _, ok := tc.mutation.IsAutoStart(); !ok {
		v := template.DefaultIsAutoStart
		tc.mutation.SetIsAutoStart(v)
	}
	if _, ok := tc.mutation.StrictMode(); !ok {
		v := template.DefaultStrictMode
		tc.mutation.SetStrictMode(v)
	}
	if _, ok := tc.mutation.Extras(); !ok {
		v := template.DefaultExtras
		tc.mutation.SetExtras(v)
	}
	if _, ok := tc.mutation.CreatedAt(); !ok {
		v := template.DefaultCreatedAt()
		tc.mutation.SetCreatedAt(v)
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		v := template.DefaultUpdatedAt()
		tc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tc.mutation.IsLatest(); !ok {
		v := template.DefaultIsLatest
		tc.mutation.SetIsLatest(v)
	}
	if _, ok := tc.mutation.ID(); !ok {
		v := template.DefaultID()
		tc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TemplateCreate) check() error {
	if _, ok := tc.mutation.FormCode(); !ok {
		return &ValidationError{Name: "form_code", err: errors.New(`ent: missing required field "Template.form_code"`)}
	}
	if _, ok := tc.mutation.NodeKey(); !ok {
		return &ValidationError{Name: "node_key", err: errors.New(`ent: missing required field "Template.node_key"`)}
	}
	if _, ok := tc.mutation.NodeType(); !ok {
		return &ValidationError{Name: "node_type", err: errors.New(`ent: missing required field "Template.node_type"`)}
	}
	if _, ok := tc.mutation.ModuleCode(); !ok {
		return &ValidationError{Name: "module_code", err: errors.New(`ent: missing required field "Template.module_code"`)}
	}
	if _, ok := tc.mutation.AllowCancel(); !ok {
		return &ValidationError{Name: "allow_cancel", err: errors.New(`ent: missing required field "Template.allow_cancel"`)}
	}
	if _, ok := tc.mutation.AllowUrge(); !ok {
		return &ValidationError{Name: "allow_urge", err: errors.New(`ent: missing required field "Template.allow_urge"`)}
	}
	if _, ok := tc.mutation.AllowDelegate(); !ok {
		return &ValidationError{Name: "allow_delegate", err: errors.New(`ent: missing required field "Template.allow_delegate"`)}
	}
	if _, ok := tc.mutation.AllowTransfer(); !ok {
		return &ValidationError{Name: "allow_transfer", err: errors.New(`ent: missing required field "Template.allow_transfer"`)}
	}
	if _, ok := tc.mutation.IsDraftEnabled(); !ok {
		return &ValidationError{Name: "is_draft_enabled", err: errors.New(`ent: missing required field "Template.is_draft_enabled"`)}
	}
	if _, ok := tc.mutation.IsAutoStart(); !ok {
		return &ValidationError{Name: "is_auto_start", err: errors.New(`ent: missing required field "Template.is_auto_start"`)}
	}
	if _, ok := tc.mutation.StrictMode(); !ok {
		return &ValidationError{Name: "strict_mode", err: errors.New(`ent: missing required field "Template.strict_mode"`)}
	}
	if _, ok := tc.mutation.TemplateKey(); !ok {
		return &ValidationError{Name: "template_key", err: errors.New(`ent: missing required field "Template.template_key"`)}
	}
	if _, ok := tc.mutation.IsLatest(); !ok {
		return &ValidationError{Name: "is_latest", err: errors.New(`ent: missing required field "Template.is_latest"`)}
	}
	if v, ok := tc.mutation.ID(); ok {
		if err := template.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Template.id": %w`, err)}
		}
	}
	return nil
}

func (tc *TemplateCreate) sqlSave(ctx context.Context) (*Template, error) {
	if err := tc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Template.ID type: %T", _spec.ID.Value)
		}
	}
	tc.mutation.id = &_node.ID
	tc.mutation.done = true
	return _node, nil
}

func (tc *TemplateCreate) createSpec() (*Template, *sqlgraph.CreateSpec) {
	var (
		_node = &Template{config: tc.config}
		_spec = sqlgraph.NewCreateSpec(template.Table, sqlgraph.NewFieldSpec(template.FieldID, field.TypeString))
	)
	if id, ok := tc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tc.mutation.Name(); ok {
		_spec.SetField(template.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := tc.mutation.Code(); ok {
		_spec.SetField(template.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if value, ok := tc.mutation.Description(); ok {
		_spec.SetField(template.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := tc.mutation.GetType(); ok {
		_spec.SetField(template.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := tc.mutation.Version(); ok {
		_spec.SetField(template.FieldVersion, field.TypeString, value)
		_node.Version = value
	}
	if value, ok := tc.mutation.Status(); ok {
		_spec.SetField(template.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := tc.mutation.Disabled(); ok {
		_spec.SetField(template.FieldDisabled, field.TypeBool, value)
		_node.Disabled = value
	}
	if value, ok := tc.mutation.FormCode(); ok {
		_spec.SetField(template.FieldFormCode, field.TypeString, value)
		_node.FormCode = value
	}
	if value, ok := tc.mutation.FormVersion(); ok {
		_spec.SetField(template.FieldFormVersion, field.TypeString, value)
		_node.FormVersion = value
	}
	if value, ok := tc.mutation.FormConfig(); ok {
		_spec.SetField(template.FieldFormConfig, field.TypeJSON, value)
		_node.FormConfig = value
	}
	if value, ok := tc.mutation.FormPermissions(); ok {
		_spec.SetField(template.FieldFormPermissions, field.TypeJSON, value)
		_node.FormPermissions = value
	}
	if value, ok := tc.mutation.FieldPermissions(); ok {
		_spec.SetField(template.FieldFieldPermissions, field.TypeJSON, value)
		_node.FieldPermissions = value
	}
	if value, ok := tc.mutation.NodeKey(); ok {
		_spec.SetField(template.FieldNodeKey, field.TypeString, value)
		_node.NodeKey = value
	}
	if value, ok := tc.mutation.NodeType(); ok {
		_spec.SetField(template.FieldNodeType, field.TypeString, value)
		_node.NodeType = value
	}
	if value, ok := tc.mutation.NodeConfig(); ok {
		_spec.SetField(template.FieldNodeConfig, field.TypeJSON, value)
		_node.NodeConfig = value
	}
	if value, ok := tc.mutation.NodeRules(); ok {
		_spec.SetField(template.FieldNodeRules, field.TypeJSON, value)
		_node.NodeRules = value
	}
	if value, ok := tc.mutation.NodeEvents(); ok {
		_spec.SetField(template.FieldNodeEvents, field.TypeJSON, value)
		_node.NodeEvents = value
	}
	if value, ok := tc.mutation.BusinessTags(); ok {
		_spec.SetField(template.FieldBusinessTags, field.TypeJSON, value)
		_node.BusinessTags = value
	}
	if value, ok := tc.mutation.ModuleCode(); ok {
		_spec.SetField(template.FieldModuleCode, field.TypeString, value)
		_node.ModuleCode = value
	}
	if value, ok := tc.mutation.Category(); ok {
		_spec.SetField(template.FieldCategory, field.TypeString, value)
		_node.Category = value
	}
	if value, ok := tc.mutation.AllowCancel(); ok {
		_spec.SetField(template.FieldAllowCancel, field.TypeBool, value)
		_node.AllowCancel = value
	}
	if value, ok := tc.mutation.AllowUrge(); ok {
		_spec.SetField(template.FieldAllowUrge, field.TypeBool, value)
		_node.AllowUrge = value
	}
	if value, ok := tc.mutation.AllowDelegate(); ok {
		_spec.SetField(template.FieldAllowDelegate, field.TypeBool, value)
		_node.AllowDelegate = value
	}
	if value, ok := tc.mutation.AllowTransfer(); ok {
		_spec.SetField(template.FieldAllowTransfer, field.TypeBool, value)
		_node.AllowTransfer = value
	}
	if value, ok := tc.mutation.IsDraftEnabled(); ok {
		_spec.SetField(template.FieldIsDraftEnabled, field.TypeBool, value)
		_node.IsDraftEnabled = value
	}
	if value, ok := tc.mutation.IsAutoStart(); ok {
		_spec.SetField(template.FieldIsAutoStart, field.TypeBool, value)
		_node.IsAutoStart = value
	}
	if value, ok := tc.mutation.StrictMode(); ok {
		_spec.SetField(template.FieldStrictMode, field.TypeBool, value)
		_node.StrictMode = value
	}
	if value, ok := tc.mutation.Viewers(); ok {
		_spec.SetField(template.FieldViewers, field.TypeJSON, value)
		_node.Viewers = value
	}
	if value, ok := tc.mutation.Editors(); ok {
		_spec.SetField(template.FieldEditors, field.TypeJSON, value)
		_node.Editors = value
	}
	if value, ok := tc.mutation.PermissionConfigs(); ok {
		_spec.SetField(template.FieldPermissionConfigs, field.TypeJSON, value)
		_node.PermissionConfigs = value
	}
	if value, ok := tc.mutation.RoleConfigs(); ok {
		_spec.SetField(template.FieldRoleConfigs, field.TypeJSON, value)
		_node.RoleConfigs = value
	}
	if value, ok := tc.mutation.VisibleRange(); ok {
		_spec.SetField(template.FieldVisibleRange, field.TypeJSON, value)
		_node.VisibleRange = value
	}
	if value, ok := tc.mutation.Extras(); ok {
		_spec.SetField(template.FieldExtras, field.TypeJSON, value)
		_node.Extras = value
	}
	if value, ok := tc.mutation.SpaceID(); ok {
		_spec.SetField(template.FieldSpaceID, field.TypeString, value)
		_node.SpaceID = value
	}
	if value, ok := tc.mutation.CreatedBy(); ok {
		_spec.SetField(template.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := tc.mutation.UpdatedBy(); ok {
		_spec.SetField(template.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := tc.mutation.CreatedAt(); ok {
		_spec.SetField(template.FieldCreatedAt, field.TypeInt64, value)
		_node.CreatedAt = value
	}
	if value, ok := tc.mutation.UpdatedAt(); ok {
		_spec.SetField(template.FieldUpdatedAt, field.TypeInt64, value)
		_node.UpdatedAt = value
	}
	if value, ok := tc.mutation.TemplateKey(); ok {
		_spec.SetField(template.FieldTemplateKey, field.TypeString, value)
		_node.TemplateKey = value
	}
	if value, ok := tc.mutation.ProcessRules(); ok {
		_spec.SetField(template.FieldProcessRules, field.TypeJSON, value)
		_node.ProcessRules = value
	}
	if value, ok := tc.mutation.TriggerConditions(); ok {
		_spec.SetField(template.FieldTriggerConditions, field.TypeJSON, value)
		_node.TriggerConditions = value
	}
	if value, ok := tc.mutation.TimeoutConfig(); ok {
		_spec.SetField(template.FieldTimeoutConfig, field.TypeJSON, value)
		_node.TimeoutConfig = value
	}
	if value, ok := tc.mutation.ReminderConfig(); ok {
		_spec.SetField(template.FieldReminderConfig, field.TypeJSON, value)
		_node.ReminderConfig = value
	}
	if value, ok := tc.mutation.SourceVersion(); ok {
		_spec.SetField(template.FieldSourceVersion, field.TypeString, value)
		_node.SourceVersion = value
	}
	if value, ok := tc.mutation.IsLatest(); ok {
		_spec.SetField(template.FieldIsLatest, field.TypeBool, value)
		_node.IsLatest = value
	}
	if value, ok := tc.mutation.EffectiveTime(); ok {
		_spec.SetField(template.FieldEffectiveTime, field.TypeInt64, value)
		_node.EffectiveTime = value
	}
	if value, ok := tc.mutation.ExpireTime(); ok {
		_spec.SetField(template.FieldExpireTime, field.TypeInt64, value)
		_node.ExpireTime = value
	}
	return _node, _spec
}

// TemplateCreateBulk is the builder for creating many Template entities in bulk.
type TemplateCreateBulk struct {
	config
	err      error
	builders []*TemplateCreate
}

// Save creates the Template entities in the database.
func (tcb *TemplateCreateBulk) Save(ctx context.Context) ([]*Template, error) {
	if tcb.err != nil {
		return nil, tcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Template, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TemplateMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TemplateCreateBulk) SaveX(ctx context.Context) []*Template {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TemplateCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TemplateCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}
