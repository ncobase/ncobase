// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"ncobase/access/data/ent/activity"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ActivityCreate is the builder for creating a Activity entity.
type ActivityCreate struct {
	config
	mutation *ActivityMutation
	hooks    []Hook
}

// SetType sets the "type" field.
func (ac *ActivityCreate) SetType(s string) *ActivityCreate {
	ac.mutation.SetType(s)
	return ac
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ac *ActivityCreate) SetNillableType(s *string) *ActivityCreate {
	if s != nil {
		ac.SetType(*s)
	}
	return ac
}

// SetUserID sets the "user_id" field.
func (ac *ActivityCreate) SetUserID(s string) *ActivityCreate {
	ac.mutation.SetUserID(s)
	return ac
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (ac *ActivityCreate) SetNillableUserID(s *string) *ActivityCreate {
	if s != nil {
		ac.SetUserID(*s)
	}
	return ac
}

// SetDetails sets the "details" field.
func (ac *ActivityCreate) SetDetails(s string) *ActivityCreate {
	ac.mutation.SetDetails(s)
	return ac
}

// SetNillableDetails sets the "details" field if the given value is not nil.
func (ac *ActivityCreate) SetNillableDetails(s *string) *ActivityCreate {
	if s != nil {
		ac.SetDetails(*s)
	}
	return ac
}

// SetMetadata sets the "metadata" field.
func (ac *ActivityCreate) SetMetadata(m map[string]interface{}) *ActivityCreate {
	ac.mutation.SetMetadata(m)
	return ac
}

// SetCreatedAt sets the "created_at" field.
func (ac *ActivityCreate) SetCreatedAt(i int64) *ActivityCreate {
	ac.mutation.SetCreatedAt(i)
	return ac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ac *ActivityCreate) SetNillableCreatedAt(i *int64) *ActivityCreate {
	if i != nil {
		ac.SetCreatedAt(*i)
	}
	return ac
}

// SetUpdatedAt sets the "updated_at" field.
func (ac *ActivityCreate) SetUpdatedAt(i int64) *ActivityCreate {
	ac.mutation.SetUpdatedAt(i)
	return ac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ac *ActivityCreate) SetNillableUpdatedAt(i *int64) *ActivityCreate {
	if i != nil {
		ac.SetUpdatedAt(*i)
	}
	return ac
}

// SetID sets the "id" field.
func (ac *ActivityCreate) SetID(s string) *ActivityCreate {
	ac.mutation.SetID(s)
	return ac
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ac *ActivityCreate) SetNillableID(s *string) *ActivityCreate {
	if s != nil {
		ac.SetID(*s)
	}
	return ac
}

// Mutation returns the ActivityMutation object of the builder.
func (ac *ActivityCreate) Mutation() *ActivityMutation {
	return ac.mutation
}

// Save creates the Activity in the database.
func (ac *ActivityCreate) Save(ctx context.Context) (*Activity, error) {
	ac.defaults()
	return withHooks(ctx, ac.sqlSave, ac.mutation, ac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ac *ActivityCreate) SaveX(ctx context.Context) *Activity {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *ActivityCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *ActivityCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *ActivityCreate) defaults() {
	if _, ok := ac.mutation.Metadata(); !ok {
		v := activity.DefaultMetadata
		ac.mutation.SetMetadata(v)
	}
	if _, ok := ac.mutation.CreatedAt(); !ok {
		v := activity.DefaultCreatedAt()
		ac.mutation.SetCreatedAt(v)
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		v := activity.DefaultUpdatedAt()
		ac.mutation.SetUpdatedAt(v)
	}
	if _, ok := ac.mutation.ID(); !ok {
		v := activity.DefaultID()
		ac.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *ActivityCreate) check() error {
	if v, ok := ac.mutation.ID(); ok {
		if err := activity.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Activity.id": %w`, err)}
		}
	}
	return nil
}

func (ac *ActivityCreate) sqlSave(ctx context.Context) (*Activity, error) {
	if err := ac.check(); err != nil {
		return nil, err
	}
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Activity.ID type: %T", _spec.ID.Value)
		}
	}
	ac.mutation.id = &_node.ID
	ac.mutation.done = true
	return _node, nil
}

func (ac *ActivityCreate) createSpec() (*Activity, *sqlgraph.CreateSpec) {
	var (
		_node = &Activity{config: ac.config}
		_spec = sqlgraph.NewCreateSpec(activity.Table, sqlgraph.NewFieldSpec(activity.FieldID, field.TypeString))
	)
	if id, ok := ac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ac.mutation.GetType(); ok {
		_spec.SetField(activity.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := ac.mutation.UserID(); ok {
		_spec.SetField(activity.FieldUserID, field.TypeString, value)
		_node.UserID = value
	}
	if value, ok := ac.mutation.Details(); ok {
		_spec.SetField(activity.FieldDetails, field.TypeString, value)
		_node.Details = value
	}
	if value, ok := ac.mutation.Metadata(); ok {
		_spec.SetField(activity.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if value, ok := ac.mutation.CreatedAt(); ok {
		_spec.SetField(activity.FieldCreatedAt, field.TypeInt64, value)
		_node.CreatedAt = value
	}
	if value, ok := ac.mutation.UpdatedAt(); ok {
		_spec.SetField(activity.FieldUpdatedAt, field.TypeInt64, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// ActivityCreateBulk is the builder for creating many Activity entities in bulk.
type ActivityCreateBulk struct {
	config
	err      error
	builders []*ActivityCreate
}

// Save creates the Activity entities in the database.
func (acb *ActivityCreateBulk) Save(ctx context.Context) ([]*Activity, error) {
	if acb.err != nil {
		return nil, acb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Activity, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ActivityMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *ActivityCreateBulk) SaveX(ctx context.Context) []*Activity {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *ActivityCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *ActivityCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}
