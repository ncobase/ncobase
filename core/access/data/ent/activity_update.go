// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/access/data/ent/activity"
	"ncobase/access/data/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ActivityUpdate is the builder for updating Activity entities.
type ActivityUpdate struct {
	config
	hooks    []Hook
	mutation *ActivityMutation
}

// Where appends a list predicates to the ActivityUpdate builder.
func (au *ActivityUpdate) Where(ps ...predicate.Activity) *ActivityUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetType sets the "type" field.
func (au *ActivityUpdate) SetType(s string) *ActivityUpdate {
	au.mutation.SetType(s)
	return au
}

// SetNillableType sets the "type" field if the given value is not nil.
func (au *ActivityUpdate) SetNillableType(s *string) *ActivityUpdate {
	if s != nil {
		au.SetType(*s)
	}
	return au
}

// ClearType clears the value of the "type" field.
func (au *ActivityUpdate) ClearType() *ActivityUpdate {
	au.mutation.ClearType()
	return au
}

// SetUserID sets the "user_id" field.
func (au *ActivityUpdate) SetUserID(s string) *ActivityUpdate {
	au.mutation.SetUserID(s)
	return au
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (au *ActivityUpdate) SetNillableUserID(s *string) *ActivityUpdate {
	if s != nil {
		au.SetUserID(*s)
	}
	return au
}

// ClearUserID clears the value of the "user_id" field.
func (au *ActivityUpdate) ClearUserID() *ActivityUpdate {
	au.mutation.ClearUserID()
	return au
}

// SetDetails sets the "details" field.
func (au *ActivityUpdate) SetDetails(s string) *ActivityUpdate {
	au.mutation.SetDetails(s)
	return au
}

// SetNillableDetails sets the "details" field if the given value is not nil.
func (au *ActivityUpdate) SetNillableDetails(s *string) *ActivityUpdate {
	if s != nil {
		au.SetDetails(*s)
	}
	return au
}

// ClearDetails clears the value of the "details" field.
func (au *ActivityUpdate) ClearDetails() *ActivityUpdate {
	au.mutation.ClearDetails()
	return au
}

// SetMetadata sets the "metadata" field.
func (au *ActivityUpdate) SetMetadata(m map[string]interface{}) *ActivityUpdate {
	au.mutation.SetMetadata(m)
	return au
}

// ClearMetadata clears the value of the "metadata" field.
func (au *ActivityUpdate) ClearMetadata() *ActivityUpdate {
	au.mutation.ClearMetadata()
	return au
}

// SetUpdatedAt sets the "updated_at" field.
func (au *ActivityUpdate) SetUpdatedAt(i int64) *ActivityUpdate {
	au.mutation.ResetUpdatedAt()
	au.mutation.SetUpdatedAt(i)
	return au
}

// AddUpdatedAt adds i to the "updated_at" field.
func (au *ActivityUpdate) AddUpdatedAt(i int64) *ActivityUpdate {
	au.mutation.AddUpdatedAt(i)
	return au
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (au *ActivityUpdate) ClearUpdatedAt() *ActivityUpdate {
	au.mutation.ClearUpdatedAt()
	return au
}

// Mutation returns the ActivityMutation object of the builder.
func (au *ActivityUpdate) Mutation() *ActivityMutation {
	return au.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *ActivityUpdate) Save(ctx context.Context) (int, error) {
	au.defaults()
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *ActivityUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *ActivityUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *ActivityUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (au *ActivityUpdate) defaults() {
	if _, ok := au.mutation.UpdatedAt(); !ok && !au.mutation.UpdatedAtCleared() {
		v := activity.UpdateDefaultUpdatedAt()
		au.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (au *ActivityUpdate) check() error {
	if v, ok := au.mutation.UserID(); ok {
		if err := activity.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "Activity.user_id": %w`, err)}
		}
	}
	return nil
}

func (au *ActivityUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := au.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(activity.Table, activity.Columns, sqlgraph.NewFieldSpec(activity.FieldID, field.TypeString))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.GetType(); ok {
		_spec.SetField(activity.FieldType, field.TypeString, value)
	}
	if au.mutation.TypeCleared() {
		_spec.ClearField(activity.FieldType, field.TypeString)
	}
	if value, ok := au.mutation.UserID(); ok {
		_spec.SetField(activity.FieldUserID, field.TypeString, value)
	}
	if au.mutation.UserIDCleared() {
		_spec.ClearField(activity.FieldUserID, field.TypeString)
	}
	if value, ok := au.mutation.Details(); ok {
		_spec.SetField(activity.FieldDetails, field.TypeString, value)
	}
	if au.mutation.DetailsCleared() {
		_spec.ClearField(activity.FieldDetails, field.TypeString)
	}
	if value, ok := au.mutation.Metadata(); ok {
		_spec.SetField(activity.FieldMetadata, field.TypeJSON, value)
	}
	if au.mutation.MetadataCleared() {
		_spec.ClearField(activity.FieldMetadata, field.TypeJSON)
	}
	if au.mutation.CreatedAtCleared() {
		_spec.ClearField(activity.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := au.mutation.UpdatedAt(); ok {
		_spec.SetField(activity.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := au.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(activity.FieldUpdatedAt, field.TypeInt64, value)
	}
	if au.mutation.UpdatedAtCleared() {
		_spec.ClearField(activity.FieldUpdatedAt, field.TypeInt64)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{activity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// ActivityUpdateOne is the builder for updating a single Activity entity.
type ActivityUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ActivityMutation
}

// SetType sets the "type" field.
func (auo *ActivityUpdateOne) SetType(s string) *ActivityUpdateOne {
	auo.mutation.SetType(s)
	return auo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (auo *ActivityUpdateOne) SetNillableType(s *string) *ActivityUpdateOne {
	if s != nil {
		auo.SetType(*s)
	}
	return auo
}

// ClearType clears the value of the "type" field.
func (auo *ActivityUpdateOne) ClearType() *ActivityUpdateOne {
	auo.mutation.ClearType()
	return auo
}

// SetUserID sets the "user_id" field.
func (auo *ActivityUpdateOne) SetUserID(s string) *ActivityUpdateOne {
	auo.mutation.SetUserID(s)
	return auo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (auo *ActivityUpdateOne) SetNillableUserID(s *string) *ActivityUpdateOne {
	if s != nil {
		auo.SetUserID(*s)
	}
	return auo
}

// ClearUserID clears the value of the "user_id" field.
func (auo *ActivityUpdateOne) ClearUserID() *ActivityUpdateOne {
	auo.mutation.ClearUserID()
	return auo
}

// SetDetails sets the "details" field.
func (auo *ActivityUpdateOne) SetDetails(s string) *ActivityUpdateOne {
	auo.mutation.SetDetails(s)
	return auo
}

// SetNillableDetails sets the "details" field if the given value is not nil.
func (auo *ActivityUpdateOne) SetNillableDetails(s *string) *ActivityUpdateOne {
	if s != nil {
		auo.SetDetails(*s)
	}
	return auo
}

// ClearDetails clears the value of the "details" field.
func (auo *ActivityUpdateOne) ClearDetails() *ActivityUpdateOne {
	auo.mutation.ClearDetails()
	return auo
}

// SetMetadata sets the "metadata" field.
func (auo *ActivityUpdateOne) SetMetadata(m map[string]interface{}) *ActivityUpdateOne {
	auo.mutation.SetMetadata(m)
	return auo
}

// ClearMetadata clears the value of the "metadata" field.
func (auo *ActivityUpdateOne) ClearMetadata() *ActivityUpdateOne {
	auo.mutation.ClearMetadata()
	return auo
}

// SetUpdatedAt sets the "updated_at" field.
func (auo *ActivityUpdateOne) SetUpdatedAt(i int64) *ActivityUpdateOne {
	auo.mutation.ResetUpdatedAt()
	auo.mutation.SetUpdatedAt(i)
	return auo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (auo *ActivityUpdateOne) AddUpdatedAt(i int64) *ActivityUpdateOne {
	auo.mutation.AddUpdatedAt(i)
	return auo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (auo *ActivityUpdateOne) ClearUpdatedAt() *ActivityUpdateOne {
	auo.mutation.ClearUpdatedAt()
	return auo
}

// Mutation returns the ActivityMutation object of the builder.
func (auo *ActivityUpdateOne) Mutation() *ActivityMutation {
	return auo.mutation
}

// Where appends a list predicates to the ActivityUpdate builder.
func (auo *ActivityUpdateOne) Where(ps ...predicate.Activity) *ActivityUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *ActivityUpdateOne) Select(field string, fields ...string) *ActivityUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Activity entity.
func (auo *ActivityUpdateOne) Save(ctx context.Context) (*Activity, error) {
	auo.defaults()
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *ActivityUpdateOne) SaveX(ctx context.Context) *Activity {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *ActivityUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *ActivityUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auo *ActivityUpdateOne) defaults() {
	if _, ok := auo.mutation.UpdatedAt(); !ok && !auo.mutation.UpdatedAtCleared() {
		v := activity.UpdateDefaultUpdatedAt()
		auo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auo *ActivityUpdateOne) check() error {
	if v, ok := auo.mutation.UserID(); ok {
		if err := activity.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "Activity.user_id": %w`, err)}
		}
	}
	return nil
}

func (auo *ActivityUpdateOne) sqlSave(ctx context.Context) (_node *Activity, err error) {
	if err := auo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(activity.Table, activity.Columns, sqlgraph.NewFieldSpec(activity.FieldID, field.TypeString))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Activity.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, activity.FieldID)
		for _, f := range fields {
			if !activity.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != activity.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.GetType(); ok {
		_spec.SetField(activity.FieldType, field.TypeString, value)
	}
	if auo.mutation.TypeCleared() {
		_spec.ClearField(activity.FieldType, field.TypeString)
	}
	if value, ok := auo.mutation.UserID(); ok {
		_spec.SetField(activity.FieldUserID, field.TypeString, value)
	}
	if auo.mutation.UserIDCleared() {
		_spec.ClearField(activity.FieldUserID, field.TypeString)
	}
	if value, ok := auo.mutation.Details(); ok {
		_spec.SetField(activity.FieldDetails, field.TypeString, value)
	}
	if auo.mutation.DetailsCleared() {
		_spec.ClearField(activity.FieldDetails, field.TypeString)
	}
	if value, ok := auo.mutation.Metadata(); ok {
		_spec.SetField(activity.FieldMetadata, field.TypeJSON, value)
	}
	if auo.mutation.MetadataCleared() {
		_spec.ClearField(activity.FieldMetadata, field.TypeJSON)
	}
	if auo.mutation.CreatedAtCleared() {
		_spec.ClearField(activity.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := auo.mutation.UpdatedAt(); ok {
		_spec.SetField(activity.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := auo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(activity.FieldUpdatedAt, field.TypeInt64, value)
	}
	if auo.mutation.UpdatedAtCleared() {
		_spec.ClearField(activity.FieldUpdatedAt, field.TypeInt64)
	}
	_node = &Activity{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{activity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
