// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"ncobase/access/data/ent/casbinrule"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CasbinRuleCreate is the builder for creating a CasbinRule entity.
type CasbinRuleCreate struct {
	config
	mutation *CasbinRuleMutation
	hooks    []Hook
}

// SetPType sets the "p_type" field.
func (crc *CasbinRuleCreate) SetPType(s string) *CasbinRuleCreate {
	crc.mutation.SetPType(s)
	return crc
}

// SetNillablePType sets the "p_type" field if the given value is not nil.
func (crc *CasbinRuleCreate) SetNillablePType(s *string) *CasbinRuleCreate {
	if s != nil {
		crc.SetPType(*s)
	}
	return crc
}

// SetV0 sets the "v0" field.
func (crc *CasbinRuleCreate) SetV0(s string) *CasbinRuleCreate {
	crc.mutation.SetV0(s)
	return crc
}

// SetNillableV0 sets the "v0" field if the given value is not nil.
func (crc *CasbinRuleCreate) SetNillableV0(s *string) *CasbinRuleCreate {
	if s != nil {
		crc.SetV0(*s)
	}
	return crc
}

// SetV1 sets the "v1" field.
func (crc *CasbinRuleCreate) SetV1(s string) *CasbinRuleCreate {
	crc.mutation.SetV1(s)
	return crc
}

// SetNillableV1 sets the "v1" field if the given value is not nil.
func (crc *CasbinRuleCreate) SetNillableV1(s *string) *CasbinRuleCreate {
	if s != nil {
		crc.SetV1(*s)
	}
	return crc
}

// SetV2 sets the "v2" field.
func (crc *CasbinRuleCreate) SetV2(s string) *CasbinRuleCreate {
	crc.mutation.SetV2(s)
	return crc
}

// SetNillableV2 sets the "v2" field if the given value is not nil.
func (crc *CasbinRuleCreate) SetNillableV2(s *string) *CasbinRuleCreate {
	if s != nil {
		crc.SetV2(*s)
	}
	return crc
}

// SetV3 sets the "v3" field.
func (crc *CasbinRuleCreate) SetV3(s string) *CasbinRuleCreate {
	crc.mutation.SetV3(s)
	return crc
}

// SetNillableV3 sets the "v3" field if the given value is not nil.
func (crc *CasbinRuleCreate) SetNillableV3(s *string) *CasbinRuleCreate {
	if s != nil {
		crc.SetV3(*s)
	}
	return crc
}

// SetV4 sets the "v4" field.
func (crc *CasbinRuleCreate) SetV4(s string) *CasbinRuleCreate {
	crc.mutation.SetV4(s)
	return crc
}

// SetNillableV4 sets the "v4" field if the given value is not nil.
func (crc *CasbinRuleCreate) SetNillableV4(s *string) *CasbinRuleCreate {
	if s != nil {
		crc.SetV4(*s)
	}
	return crc
}

// SetV5 sets the "v5" field.
func (crc *CasbinRuleCreate) SetV5(s string) *CasbinRuleCreate {
	crc.mutation.SetV5(s)
	return crc
}

// SetNillableV5 sets the "v5" field if the given value is not nil.
func (crc *CasbinRuleCreate) SetNillableV5(s *string) *CasbinRuleCreate {
	if s != nil {
		crc.SetV5(*s)
	}
	return crc
}

// SetCreatedBy sets the "created_by" field.
func (crc *CasbinRuleCreate) SetCreatedBy(s string) *CasbinRuleCreate {
	crc.mutation.SetCreatedBy(s)
	return crc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (crc *CasbinRuleCreate) SetNillableCreatedBy(s *string) *CasbinRuleCreate {
	if s != nil {
		crc.SetCreatedBy(*s)
	}
	return crc
}

// SetUpdatedBy sets the "updated_by" field.
func (crc *CasbinRuleCreate) SetUpdatedBy(s string) *CasbinRuleCreate {
	crc.mutation.SetUpdatedBy(s)
	return crc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (crc *CasbinRuleCreate) SetNillableUpdatedBy(s *string) *CasbinRuleCreate {
	if s != nil {
		crc.SetUpdatedBy(*s)
	}
	return crc
}

// SetCreatedAt sets the "created_at" field.
func (crc *CasbinRuleCreate) SetCreatedAt(i int64) *CasbinRuleCreate {
	crc.mutation.SetCreatedAt(i)
	return crc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (crc *CasbinRuleCreate) SetNillableCreatedAt(i *int64) *CasbinRuleCreate {
	if i != nil {
		crc.SetCreatedAt(*i)
	}
	return crc
}

// SetUpdatedAt sets the "updated_at" field.
func (crc *CasbinRuleCreate) SetUpdatedAt(i int64) *CasbinRuleCreate {
	crc.mutation.SetUpdatedAt(i)
	return crc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (crc *CasbinRuleCreate) SetNillableUpdatedAt(i *int64) *CasbinRuleCreate {
	if i != nil {
		crc.SetUpdatedAt(*i)
	}
	return crc
}

// SetID sets the "id" field.
func (crc *CasbinRuleCreate) SetID(s string) *CasbinRuleCreate {
	crc.mutation.SetID(s)
	return crc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (crc *CasbinRuleCreate) SetNillableID(s *string) *CasbinRuleCreate {
	if s != nil {
		crc.SetID(*s)
	}
	return crc
}

// Mutation returns the CasbinRuleMutation object of the builder.
func (crc *CasbinRuleCreate) Mutation() *CasbinRuleMutation {
	return crc.mutation
}

// Save creates the CasbinRule in the database.
func (crc *CasbinRuleCreate) Save(ctx context.Context) (*CasbinRule, error) {
	crc.defaults()
	return withHooks(ctx, crc.sqlSave, crc.mutation, crc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (crc *CasbinRuleCreate) SaveX(ctx context.Context) *CasbinRule {
	v, err := crc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (crc *CasbinRuleCreate) Exec(ctx context.Context) error {
	_, err := crc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (crc *CasbinRuleCreate) ExecX(ctx context.Context) {
	if err := crc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (crc *CasbinRuleCreate) defaults() {
	if _, ok := crc.mutation.CreatedAt(); !ok {
		v := casbinrule.DefaultCreatedAt()
		crc.mutation.SetCreatedAt(v)
	}
	if _, ok := crc.mutation.UpdatedAt(); !ok {
		v := casbinrule.DefaultUpdatedAt()
		crc.mutation.SetUpdatedAt(v)
	}
	if _, ok := crc.mutation.ID(); !ok {
		v := casbinrule.DefaultID()
		crc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (crc *CasbinRuleCreate) check() error {
	if v, ok := crc.mutation.ID(); ok {
		if err := casbinrule.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "CasbinRule.id": %w`, err)}
		}
	}
	return nil
}

func (crc *CasbinRuleCreate) sqlSave(ctx context.Context) (*CasbinRule, error) {
	if err := crc.check(); err != nil {
		return nil, err
	}
	_node, _spec := crc.createSpec()
	if err := sqlgraph.CreateNode(ctx, crc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected CasbinRule.ID type: %T", _spec.ID.Value)
		}
	}
	crc.mutation.id = &_node.ID
	crc.mutation.done = true
	return _node, nil
}

func (crc *CasbinRuleCreate) createSpec() (*CasbinRule, *sqlgraph.CreateSpec) {
	var (
		_node = &CasbinRule{config: crc.config}
		_spec = sqlgraph.NewCreateSpec(casbinrule.Table, sqlgraph.NewFieldSpec(casbinrule.FieldID, field.TypeString))
	)
	if id, ok := crc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := crc.mutation.PType(); ok {
		_spec.SetField(casbinrule.FieldPType, field.TypeString, value)
		_node.PType = value
	}
	if value, ok := crc.mutation.V0(); ok {
		_spec.SetField(casbinrule.FieldV0, field.TypeString, value)
		_node.V0 = value
	}
	if value, ok := crc.mutation.V1(); ok {
		_spec.SetField(casbinrule.FieldV1, field.TypeString, value)
		_node.V1 = value
	}
	if value, ok := crc.mutation.V2(); ok {
		_spec.SetField(casbinrule.FieldV2, field.TypeString, value)
		_node.V2 = value
	}
	if value, ok := crc.mutation.V3(); ok {
		_spec.SetField(casbinrule.FieldV3, field.TypeString, value)
		_node.V3 = value
	}
	if value, ok := crc.mutation.V4(); ok {
		_spec.SetField(casbinrule.FieldV4, field.TypeString, value)
		_node.V4 = value
	}
	if value, ok := crc.mutation.V5(); ok {
		_spec.SetField(casbinrule.FieldV5, field.TypeString, value)
		_node.V5 = value
	}
	if value, ok := crc.mutation.CreatedBy(); ok {
		_spec.SetField(casbinrule.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := crc.mutation.UpdatedBy(); ok {
		_spec.SetField(casbinrule.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := crc.mutation.CreatedAt(); ok {
		_spec.SetField(casbinrule.FieldCreatedAt, field.TypeInt64, value)
		_node.CreatedAt = value
	}
	if value, ok := crc.mutation.UpdatedAt(); ok {
		_spec.SetField(casbinrule.FieldUpdatedAt, field.TypeInt64, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// CasbinRuleCreateBulk is the builder for creating many CasbinRule entities in bulk.
type CasbinRuleCreateBulk struct {
	config
	err      error
	builders []*CasbinRuleCreate
}

// Save creates the CasbinRule entities in the database.
func (crcb *CasbinRuleCreateBulk) Save(ctx context.Context) ([]*CasbinRule, error) {
	if crcb.err != nil {
		return nil, crcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(crcb.builders))
	nodes := make([]*CasbinRule, len(crcb.builders))
	mutators := make([]Mutator, len(crcb.builders))
	for i := range crcb.builders {
		func(i int, root context.Context) {
			builder := crcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CasbinRuleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, crcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, crcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, crcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (crcb *CasbinRuleCreateBulk) SaveX(ctx context.Context) []*CasbinRule {
	v, err := crcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (crcb *CasbinRuleCreateBulk) Exec(ctx context.Context) error {
	_, err := crcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (crcb *CasbinRuleCreateBulk) ExecX(ctx context.Context) {
	if err := crcb.Exec(ctx); err != nil {
		panic(err)
	}
}
