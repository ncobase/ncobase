// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/access/data/ent/casbinrule"
	"ncobase/access/data/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CasbinRuleUpdate is the builder for updating CasbinRule entities.
type CasbinRuleUpdate struct {
	config
	hooks    []Hook
	mutation *CasbinRuleMutation
}

// Where appends a list predicates to the CasbinRuleUpdate builder.
func (cru *CasbinRuleUpdate) Where(ps ...predicate.CasbinRule) *CasbinRuleUpdate {
	cru.mutation.Where(ps...)
	return cru
}

// SetPType sets the "p_type" field.
func (cru *CasbinRuleUpdate) SetPType(s string) *CasbinRuleUpdate {
	cru.mutation.SetPType(s)
	return cru
}

// SetNillablePType sets the "p_type" field if the given value is not nil.
func (cru *CasbinRuleUpdate) SetNillablePType(s *string) *CasbinRuleUpdate {
	if s != nil {
		cru.SetPType(*s)
	}
	return cru
}

// ClearPType clears the value of the "p_type" field.
func (cru *CasbinRuleUpdate) ClearPType() *CasbinRuleUpdate {
	cru.mutation.ClearPType()
	return cru
}

// SetV0 sets the "v0" field.
func (cru *CasbinRuleUpdate) SetV0(s string) *CasbinRuleUpdate {
	cru.mutation.SetV0(s)
	return cru
}

// SetNillableV0 sets the "v0" field if the given value is not nil.
func (cru *CasbinRuleUpdate) SetNillableV0(s *string) *CasbinRuleUpdate {
	if s != nil {
		cru.SetV0(*s)
	}
	return cru
}

// ClearV0 clears the value of the "v0" field.
func (cru *CasbinRuleUpdate) ClearV0() *CasbinRuleUpdate {
	cru.mutation.ClearV0()
	return cru
}

// SetV1 sets the "v1" field.
func (cru *CasbinRuleUpdate) SetV1(s string) *CasbinRuleUpdate {
	cru.mutation.SetV1(s)
	return cru
}

// SetNillableV1 sets the "v1" field if the given value is not nil.
func (cru *CasbinRuleUpdate) SetNillableV1(s *string) *CasbinRuleUpdate {
	if s != nil {
		cru.SetV1(*s)
	}
	return cru
}

// ClearV1 clears the value of the "v1" field.
func (cru *CasbinRuleUpdate) ClearV1() *CasbinRuleUpdate {
	cru.mutation.ClearV1()
	return cru
}

// SetV2 sets the "v2" field.
func (cru *CasbinRuleUpdate) SetV2(s string) *CasbinRuleUpdate {
	cru.mutation.SetV2(s)
	return cru
}

// SetNillableV2 sets the "v2" field if the given value is not nil.
func (cru *CasbinRuleUpdate) SetNillableV2(s *string) *CasbinRuleUpdate {
	if s != nil {
		cru.SetV2(*s)
	}
	return cru
}

// ClearV2 clears the value of the "v2" field.
func (cru *CasbinRuleUpdate) ClearV2() *CasbinRuleUpdate {
	cru.mutation.ClearV2()
	return cru
}

// SetV3 sets the "v3" field.
func (cru *CasbinRuleUpdate) SetV3(s string) *CasbinRuleUpdate {
	cru.mutation.SetV3(s)
	return cru
}

// SetNillableV3 sets the "v3" field if the given value is not nil.
func (cru *CasbinRuleUpdate) SetNillableV3(s *string) *CasbinRuleUpdate {
	if s != nil {
		cru.SetV3(*s)
	}
	return cru
}

// ClearV3 clears the value of the "v3" field.
func (cru *CasbinRuleUpdate) ClearV3() *CasbinRuleUpdate {
	cru.mutation.ClearV3()
	return cru
}

// SetV4 sets the "v4" field.
func (cru *CasbinRuleUpdate) SetV4(s string) *CasbinRuleUpdate {
	cru.mutation.SetV4(s)
	return cru
}

// SetNillableV4 sets the "v4" field if the given value is not nil.
func (cru *CasbinRuleUpdate) SetNillableV4(s *string) *CasbinRuleUpdate {
	if s != nil {
		cru.SetV4(*s)
	}
	return cru
}

// ClearV4 clears the value of the "v4" field.
func (cru *CasbinRuleUpdate) ClearV4() *CasbinRuleUpdate {
	cru.mutation.ClearV4()
	return cru
}

// SetV5 sets the "v5" field.
func (cru *CasbinRuleUpdate) SetV5(s string) *CasbinRuleUpdate {
	cru.mutation.SetV5(s)
	return cru
}

// SetNillableV5 sets the "v5" field if the given value is not nil.
func (cru *CasbinRuleUpdate) SetNillableV5(s *string) *CasbinRuleUpdate {
	if s != nil {
		cru.SetV5(*s)
	}
	return cru
}

// ClearV5 clears the value of the "v5" field.
func (cru *CasbinRuleUpdate) ClearV5() *CasbinRuleUpdate {
	cru.mutation.ClearV5()
	return cru
}

// SetCreatedBy sets the "created_by" field.
func (cru *CasbinRuleUpdate) SetCreatedBy(s string) *CasbinRuleUpdate {
	cru.mutation.SetCreatedBy(s)
	return cru
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (cru *CasbinRuleUpdate) SetNillableCreatedBy(s *string) *CasbinRuleUpdate {
	if s != nil {
		cru.SetCreatedBy(*s)
	}
	return cru
}

// ClearCreatedBy clears the value of the "created_by" field.
func (cru *CasbinRuleUpdate) ClearCreatedBy() *CasbinRuleUpdate {
	cru.mutation.ClearCreatedBy()
	return cru
}

// SetUpdatedBy sets the "updated_by" field.
func (cru *CasbinRuleUpdate) SetUpdatedBy(s string) *CasbinRuleUpdate {
	cru.mutation.SetUpdatedBy(s)
	return cru
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (cru *CasbinRuleUpdate) SetNillableUpdatedBy(s *string) *CasbinRuleUpdate {
	if s != nil {
		cru.SetUpdatedBy(*s)
	}
	return cru
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (cru *CasbinRuleUpdate) ClearUpdatedBy() *CasbinRuleUpdate {
	cru.mutation.ClearUpdatedBy()
	return cru
}

// SetUpdatedAt sets the "updated_at" field.
func (cru *CasbinRuleUpdate) SetUpdatedAt(i int64) *CasbinRuleUpdate {
	cru.mutation.ResetUpdatedAt()
	cru.mutation.SetUpdatedAt(i)
	return cru
}

// AddUpdatedAt adds i to the "updated_at" field.
func (cru *CasbinRuleUpdate) AddUpdatedAt(i int64) *CasbinRuleUpdate {
	cru.mutation.AddUpdatedAt(i)
	return cru
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (cru *CasbinRuleUpdate) ClearUpdatedAt() *CasbinRuleUpdate {
	cru.mutation.ClearUpdatedAt()
	return cru
}

// Mutation returns the CasbinRuleMutation object of the builder.
func (cru *CasbinRuleUpdate) Mutation() *CasbinRuleMutation {
	return cru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cru *CasbinRuleUpdate) Save(ctx context.Context) (int, error) {
	cru.defaults()
	return withHooks(ctx, cru.sqlSave, cru.mutation, cru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cru *CasbinRuleUpdate) SaveX(ctx context.Context) int {
	affected, err := cru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cru *CasbinRuleUpdate) Exec(ctx context.Context) error {
	_, err := cru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cru *CasbinRuleUpdate) ExecX(ctx context.Context) {
	if err := cru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cru *CasbinRuleUpdate) defaults() {
	if _, ok := cru.mutation.UpdatedAt(); !ok && !cru.mutation.UpdatedAtCleared() {
		v := casbinrule.UpdateDefaultUpdatedAt()
		cru.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cru *CasbinRuleUpdate) check() error {
	if v, ok := cru.mutation.CreatedBy(); ok {
		if err := casbinrule.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "CasbinRule.created_by": %w`, err)}
		}
	}
	if v, ok := cru.mutation.UpdatedBy(); ok {
		if err := casbinrule.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "CasbinRule.updated_by": %w`, err)}
		}
	}
	return nil
}

func (cru *CasbinRuleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(casbinrule.Table, casbinrule.Columns, sqlgraph.NewFieldSpec(casbinrule.FieldID, field.TypeString))
	if ps := cru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cru.mutation.PType(); ok {
		_spec.SetField(casbinrule.FieldPType, field.TypeString, value)
	}
	if cru.mutation.PTypeCleared() {
		_spec.ClearField(casbinrule.FieldPType, field.TypeString)
	}
	if value, ok := cru.mutation.V0(); ok {
		_spec.SetField(casbinrule.FieldV0, field.TypeString, value)
	}
	if cru.mutation.V0Cleared() {
		_spec.ClearField(casbinrule.FieldV0, field.TypeString)
	}
	if value, ok := cru.mutation.V1(); ok {
		_spec.SetField(casbinrule.FieldV1, field.TypeString, value)
	}
	if cru.mutation.V1Cleared() {
		_spec.ClearField(casbinrule.FieldV1, field.TypeString)
	}
	if value, ok := cru.mutation.V2(); ok {
		_spec.SetField(casbinrule.FieldV2, field.TypeString, value)
	}
	if cru.mutation.V2Cleared() {
		_spec.ClearField(casbinrule.FieldV2, field.TypeString)
	}
	if value, ok := cru.mutation.V3(); ok {
		_spec.SetField(casbinrule.FieldV3, field.TypeString, value)
	}
	if cru.mutation.V3Cleared() {
		_spec.ClearField(casbinrule.FieldV3, field.TypeString)
	}
	if value, ok := cru.mutation.V4(); ok {
		_spec.SetField(casbinrule.FieldV4, field.TypeString, value)
	}
	if cru.mutation.V4Cleared() {
		_spec.ClearField(casbinrule.FieldV4, field.TypeString)
	}
	if value, ok := cru.mutation.V5(); ok {
		_spec.SetField(casbinrule.FieldV5, field.TypeString, value)
	}
	if cru.mutation.V5Cleared() {
		_spec.ClearField(casbinrule.FieldV5, field.TypeString)
	}
	if value, ok := cru.mutation.CreatedBy(); ok {
		_spec.SetField(casbinrule.FieldCreatedBy, field.TypeString, value)
	}
	if cru.mutation.CreatedByCleared() {
		_spec.ClearField(casbinrule.FieldCreatedBy, field.TypeString)
	}
	if value, ok := cru.mutation.UpdatedBy(); ok {
		_spec.SetField(casbinrule.FieldUpdatedBy, field.TypeString, value)
	}
	if cru.mutation.UpdatedByCleared() {
		_spec.ClearField(casbinrule.FieldUpdatedBy, field.TypeString)
	}
	if cru.mutation.CreatedAtCleared() {
		_spec.ClearField(casbinrule.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := cru.mutation.UpdatedAt(); ok {
		_spec.SetField(casbinrule.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := cru.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(casbinrule.FieldUpdatedAt, field.TypeInt64, value)
	}
	if cru.mutation.UpdatedAtCleared() {
		_spec.ClearField(casbinrule.FieldUpdatedAt, field.TypeInt64)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{casbinrule.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cru.mutation.done = true
	return n, nil
}

// CasbinRuleUpdateOne is the builder for updating a single CasbinRule entity.
type CasbinRuleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CasbinRuleMutation
}

// SetPType sets the "p_type" field.
func (cruo *CasbinRuleUpdateOne) SetPType(s string) *CasbinRuleUpdateOne {
	cruo.mutation.SetPType(s)
	return cruo
}

// SetNillablePType sets the "p_type" field if the given value is not nil.
func (cruo *CasbinRuleUpdateOne) SetNillablePType(s *string) *CasbinRuleUpdateOne {
	if s != nil {
		cruo.SetPType(*s)
	}
	return cruo
}

// ClearPType clears the value of the "p_type" field.
func (cruo *CasbinRuleUpdateOne) ClearPType() *CasbinRuleUpdateOne {
	cruo.mutation.ClearPType()
	return cruo
}

// SetV0 sets the "v0" field.
func (cruo *CasbinRuleUpdateOne) SetV0(s string) *CasbinRuleUpdateOne {
	cruo.mutation.SetV0(s)
	return cruo
}

// SetNillableV0 sets the "v0" field if the given value is not nil.
func (cruo *CasbinRuleUpdateOne) SetNillableV0(s *string) *CasbinRuleUpdateOne {
	if s != nil {
		cruo.SetV0(*s)
	}
	return cruo
}

// ClearV0 clears the value of the "v0" field.
func (cruo *CasbinRuleUpdateOne) ClearV0() *CasbinRuleUpdateOne {
	cruo.mutation.ClearV0()
	return cruo
}

// SetV1 sets the "v1" field.
func (cruo *CasbinRuleUpdateOne) SetV1(s string) *CasbinRuleUpdateOne {
	cruo.mutation.SetV1(s)
	return cruo
}

// SetNillableV1 sets the "v1" field if the given value is not nil.
func (cruo *CasbinRuleUpdateOne) SetNillableV1(s *string) *CasbinRuleUpdateOne {
	if s != nil {
		cruo.SetV1(*s)
	}
	return cruo
}

// ClearV1 clears the value of the "v1" field.
func (cruo *CasbinRuleUpdateOne) ClearV1() *CasbinRuleUpdateOne {
	cruo.mutation.ClearV1()
	return cruo
}

// SetV2 sets the "v2" field.
func (cruo *CasbinRuleUpdateOne) SetV2(s string) *CasbinRuleUpdateOne {
	cruo.mutation.SetV2(s)
	return cruo
}

// SetNillableV2 sets the "v2" field if the given value is not nil.
func (cruo *CasbinRuleUpdateOne) SetNillableV2(s *string) *CasbinRuleUpdateOne {
	if s != nil {
		cruo.SetV2(*s)
	}
	return cruo
}

// ClearV2 clears the value of the "v2" field.
func (cruo *CasbinRuleUpdateOne) ClearV2() *CasbinRuleUpdateOne {
	cruo.mutation.ClearV2()
	return cruo
}

// SetV3 sets the "v3" field.
func (cruo *CasbinRuleUpdateOne) SetV3(s string) *CasbinRuleUpdateOne {
	cruo.mutation.SetV3(s)
	return cruo
}

// SetNillableV3 sets the "v3" field if the given value is not nil.
func (cruo *CasbinRuleUpdateOne) SetNillableV3(s *string) *CasbinRuleUpdateOne {
	if s != nil {
		cruo.SetV3(*s)
	}
	return cruo
}

// ClearV3 clears the value of the "v3" field.
func (cruo *CasbinRuleUpdateOne) ClearV3() *CasbinRuleUpdateOne {
	cruo.mutation.ClearV3()
	return cruo
}

// SetV4 sets the "v4" field.
func (cruo *CasbinRuleUpdateOne) SetV4(s string) *CasbinRuleUpdateOne {
	cruo.mutation.SetV4(s)
	return cruo
}

// SetNillableV4 sets the "v4" field if the given value is not nil.
func (cruo *CasbinRuleUpdateOne) SetNillableV4(s *string) *CasbinRuleUpdateOne {
	if s != nil {
		cruo.SetV4(*s)
	}
	return cruo
}

// ClearV4 clears the value of the "v4" field.
func (cruo *CasbinRuleUpdateOne) ClearV4() *CasbinRuleUpdateOne {
	cruo.mutation.ClearV4()
	return cruo
}

// SetV5 sets the "v5" field.
func (cruo *CasbinRuleUpdateOne) SetV5(s string) *CasbinRuleUpdateOne {
	cruo.mutation.SetV5(s)
	return cruo
}

// SetNillableV5 sets the "v5" field if the given value is not nil.
func (cruo *CasbinRuleUpdateOne) SetNillableV5(s *string) *CasbinRuleUpdateOne {
	if s != nil {
		cruo.SetV5(*s)
	}
	return cruo
}

// ClearV5 clears the value of the "v5" field.
func (cruo *CasbinRuleUpdateOne) ClearV5() *CasbinRuleUpdateOne {
	cruo.mutation.ClearV5()
	return cruo
}

// SetCreatedBy sets the "created_by" field.
func (cruo *CasbinRuleUpdateOne) SetCreatedBy(s string) *CasbinRuleUpdateOne {
	cruo.mutation.SetCreatedBy(s)
	return cruo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (cruo *CasbinRuleUpdateOne) SetNillableCreatedBy(s *string) *CasbinRuleUpdateOne {
	if s != nil {
		cruo.SetCreatedBy(*s)
	}
	return cruo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (cruo *CasbinRuleUpdateOne) ClearCreatedBy() *CasbinRuleUpdateOne {
	cruo.mutation.ClearCreatedBy()
	return cruo
}

// SetUpdatedBy sets the "updated_by" field.
func (cruo *CasbinRuleUpdateOne) SetUpdatedBy(s string) *CasbinRuleUpdateOne {
	cruo.mutation.SetUpdatedBy(s)
	return cruo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (cruo *CasbinRuleUpdateOne) SetNillableUpdatedBy(s *string) *CasbinRuleUpdateOne {
	if s != nil {
		cruo.SetUpdatedBy(*s)
	}
	return cruo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (cruo *CasbinRuleUpdateOne) ClearUpdatedBy() *CasbinRuleUpdateOne {
	cruo.mutation.ClearUpdatedBy()
	return cruo
}

// SetUpdatedAt sets the "updated_at" field.
func (cruo *CasbinRuleUpdateOne) SetUpdatedAt(i int64) *CasbinRuleUpdateOne {
	cruo.mutation.ResetUpdatedAt()
	cruo.mutation.SetUpdatedAt(i)
	return cruo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (cruo *CasbinRuleUpdateOne) AddUpdatedAt(i int64) *CasbinRuleUpdateOne {
	cruo.mutation.AddUpdatedAt(i)
	return cruo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (cruo *CasbinRuleUpdateOne) ClearUpdatedAt() *CasbinRuleUpdateOne {
	cruo.mutation.ClearUpdatedAt()
	return cruo
}

// Mutation returns the CasbinRuleMutation object of the builder.
func (cruo *CasbinRuleUpdateOne) Mutation() *CasbinRuleMutation {
	return cruo.mutation
}

// Where appends a list predicates to the CasbinRuleUpdate builder.
func (cruo *CasbinRuleUpdateOne) Where(ps ...predicate.CasbinRule) *CasbinRuleUpdateOne {
	cruo.mutation.Where(ps...)
	return cruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cruo *CasbinRuleUpdateOne) Select(field string, fields ...string) *CasbinRuleUpdateOne {
	cruo.fields = append([]string{field}, fields...)
	return cruo
}

// Save executes the query and returns the updated CasbinRule entity.
func (cruo *CasbinRuleUpdateOne) Save(ctx context.Context) (*CasbinRule, error) {
	cruo.defaults()
	return withHooks(ctx, cruo.sqlSave, cruo.mutation, cruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cruo *CasbinRuleUpdateOne) SaveX(ctx context.Context) *CasbinRule {
	node, err := cruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cruo *CasbinRuleUpdateOne) Exec(ctx context.Context) error {
	_, err := cruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cruo *CasbinRuleUpdateOne) ExecX(ctx context.Context) {
	if err := cruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cruo *CasbinRuleUpdateOne) defaults() {
	if _, ok := cruo.mutation.UpdatedAt(); !ok && !cruo.mutation.UpdatedAtCleared() {
		v := casbinrule.UpdateDefaultUpdatedAt()
		cruo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cruo *CasbinRuleUpdateOne) check() error {
	if v, ok := cruo.mutation.CreatedBy(); ok {
		if err := casbinrule.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "CasbinRule.created_by": %w`, err)}
		}
	}
	if v, ok := cruo.mutation.UpdatedBy(); ok {
		if err := casbinrule.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "CasbinRule.updated_by": %w`, err)}
		}
	}
	return nil
}

func (cruo *CasbinRuleUpdateOne) sqlSave(ctx context.Context) (_node *CasbinRule, err error) {
	if err := cruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(casbinrule.Table, casbinrule.Columns, sqlgraph.NewFieldSpec(casbinrule.FieldID, field.TypeString))
	id, ok := cruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CasbinRule.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, casbinrule.FieldID)
		for _, f := range fields {
			if !casbinrule.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != casbinrule.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cruo.mutation.PType(); ok {
		_spec.SetField(casbinrule.FieldPType, field.TypeString, value)
	}
	if cruo.mutation.PTypeCleared() {
		_spec.ClearField(casbinrule.FieldPType, field.TypeString)
	}
	if value, ok := cruo.mutation.V0(); ok {
		_spec.SetField(casbinrule.FieldV0, field.TypeString, value)
	}
	if cruo.mutation.V0Cleared() {
		_spec.ClearField(casbinrule.FieldV0, field.TypeString)
	}
	if value, ok := cruo.mutation.V1(); ok {
		_spec.SetField(casbinrule.FieldV1, field.TypeString, value)
	}
	if cruo.mutation.V1Cleared() {
		_spec.ClearField(casbinrule.FieldV1, field.TypeString)
	}
	if value, ok := cruo.mutation.V2(); ok {
		_spec.SetField(casbinrule.FieldV2, field.TypeString, value)
	}
	if cruo.mutation.V2Cleared() {
		_spec.ClearField(casbinrule.FieldV2, field.TypeString)
	}
	if value, ok := cruo.mutation.V3(); ok {
		_spec.SetField(casbinrule.FieldV3, field.TypeString, value)
	}
	if cruo.mutation.V3Cleared() {
		_spec.ClearField(casbinrule.FieldV3, field.TypeString)
	}
	if value, ok := cruo.mutation.V4(); ok {
		_spec.SetField(casbinrule.FieldV4, field.TypeString, value)
	}
	if cruo.mutation.V4Cleared() {
		_spec.ClearField(casbinrule.FieldV4, field.TypeString)
	}
	if value, ok := cruo.mutation.V5(); ok {
		_spec.SetField(casbinrule.FieldV5, field.TypeString, value)
	}
	if cruo.mutation.V5Cleared() {
		_spec.ClearField(casbinrule.FieldV5, field.TypeString)
	}
	if value, ok := cruo.mutation.CreatedBy(); ok {
		_spec.SetField(casbinrule.FieldCreatedBy, field.TypeString, value)
	}
	if cruo.mutation.CreatedByCleared() {
		_spec.ClearField(casbinrule.FieldCreatedBy, field.TypeString)
	}
	if value, ok := cruo.mutation.UpdatedBy(); ok {
		_spec.SetField(casbinrule.FieldUpdatedBy, field.TypeString, value)
	}
	if cruo.mutation.UpdatedByCleared() {
		_spec.ClearField(casbinrule.FieldUpdatedBy, field.TypeString)
	}
	if cruo.mutation.CreatedAtCleared() {
		_spec.ClearField(casbinrule.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := cruo.mutation.UpdatedAt(); ok {
		_spec.SetField(casbinrule.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := cruo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(casbinrule.FieldUpdatedAt, field.TypeInt64, value)
	}
	if cruo.mutation.UpdatedAtCleared() {
		_spec.ClearField(casbinrule.FieldUpdatedAt, field.TypeInt64)
	}
	_node = &CasbinRule{config: cruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{casbinrule.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cruo.mutation.done = true
	return _node, nil
}
