// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/access/data/ent/predicate"
	"ncobase/access/data/ent/role"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RoleUpdate is the builder for updating Role entities.
type RoleUpdate struct {
	config
	hooks    []Hook
	mutation *RoleMutation
}

// Where appends a list predicates to the RoleUpdate builder.
func (ru *RoleUpdate) Where(ps ...predicate.Role) *RoleUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetName sets the "name" field.
func (ru *RoleUpdate) SetName(s string) *RoleUpdate {
	ru.mutation.SetName(s)
	return ru
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ru *RoleUpdate) SetNillableName(s *string) *RoleUpdate {
	if s != nil {
		ru.SetName(*s)
	}
	return ru
}

// ClearName clears the value of the "name" field.
func (ru *RoleUpdate) ClearName() *RoleUpdate {
	ru.mutation.ClearName()
	return ru
}

// SetSlug sets the "slug" field.
func (ru *RoleUpdate) SetSlug(s string) *RoleUpdate {
	ru.mutation.SetSlug(s)
	return ru
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (ru *RoleUpdate) SetNillableSlug(s *string) *RoleUpdate {
	if s != nil {
		ru.SetSlug(*s)
	}
	return ru
}

// ClearSlug clears the value of the "slug" field.
func (ru *RoleUpdate) ClearSlug() *RoleUpdate {
	ru.mutation.ClearSlug()
	return ru
}

// SetDisabled sets the "disabled" field.
func (ru *RoleUpdate) SetDisabled(b bool) *RoleUpdate {
	ru.mutation.SetDisabled(b)
	return ru
}

// SetNillableDisabled sets the "disabled" field if the given value is not nil.
func (ru *RoleUpdate) SetNillableDisabled(b *bool) *RoleUpdate {
	if b != nil {
		ru.SetDisabled(*b)
	}
	return ru
}

// ClearDisabled clears the value of the "disabled" field.
func (ru *RoleUpdate) ClearDisabled() *RoleUpdate {
	ru.mutation.ClearDisabled()
	return ru
}

// SetDescription sets the "description" field.
func (ru *RoleUpdate) SetDescription(s string) *RoleUpdate {
	ru.mutation.SetDescription(s)
	return ru
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ru *RoleUpdate) SetNillableDescription(s *string) *RoleUpdate {
	if s != nil {
		ru.SetDescription(*s)
	}
	return ru
}

// ClearDescription clears the value of the "description" field.
func (ru *RoleUpdate) ClearDescription() *RoleUpdate {
	ru.mutation.ClearDescription()
	return ru
}

// SetExtras sets the "extras" field.
func (ru *RoleUpdate) SetExtras(m map[string]interface{}) *RoleUpdate {
	ru.mutation.SetExtras(m)
	return ru
}

// ClearExtras clears the value of the "extras" field.
func (ru *RoleUpdate) ClearExtras() *RoleUpdate {
	ru.mutation.ClearExtras()
	return ru
}

// SetCreatedBy sets the "created_by" field.
func (ru *RoleUpdate) SetCreatedBy(s string) *RoleUpdate {
	ru.mutation.SetCreatedBy(s)
	return ru
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (ru *RoleUpdate) SetNillableCreatedBy(s *string) *RoleUpdate {
	if s != nil {
		ru.SetCreatedBy(*s)
	}
	return ru
}

// ClearCreatedBy clears the value of the "created_by" field.
func (ru *RoleUpdate) ClearCreatedBy() *RoleUpdate {
	ru.mutation.ClearCreatedBy()
	return ru
}

// SetUpdatedBy sets the "updated_by" field.
func (ru *RoleUpdate) SetUpdatedBy(s string) *RoleUpdate {
	ru.mutation.SetUpdatedBy(s)
	return ru
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ru *RoleUpdate) SetNillableUpdatedBy(s *string) *RoleUpdate {
	if s != nil {
		ru.SetUpdatedBy(*s)
	}
	return ru
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (ru *RoleUpdate) ClearUpdatedBy() *RoleUpdate {
	ru.mutation.ClearUpdatedBy()
	return ru
}

// SetUpdatedAt sets the "updated_at" field.
func (ru *RoleUpdate) SetUpdatedAt(i int64) *RoleUpdate {
	ru.mutation.ResetUpdatedAt()
	ru.mutation.SetUpdatedAt(i)
	return ru
}

// AddUpdatedAt adds i to the "updated_at" field.
func (ru *RoleUpdate) AddUpdatedAt(i int64) *RoleUpdate {
	ru.mutation.AddUpdatedAt(i)
	return ru
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (ru *RoleUpdate) ClearUpdatedAt() *RoleUpdate {
	ru.mutation.ClearUpdatedAt()
	return ru
}

// Mutation returns the RoleMutation object of the builder.
func (ru *RoleUpdate) Mutation() *RoleMutation {
	return ru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RoleUpdate) Save(ctx context.Context) (int, error) {
	ru.defaults()
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RoleUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RoleUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RoleUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ru *RoleUpdate) defaults() {
	if _, ok := ru.mutation.UpdatedAt(); !ok && !ru.mutation.UpdatedAtCleared() {
		v := role.UpdateDefaultUpdatedAt()
		ru.mutation.SetUpdatedAt(v)
	}
}

func (ru *RoleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(role.Table, role.Columns, sqlgraph.NewFieldSpec(role.FieldID, field.TypeString))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.Name(); ok {
		_spec.SetField(role.FieldName, field.TypeString, value)
	}
	if ru.mutation.NameCleared() {
		_spec.ClearField(role.FieldName, field.TypeString)
	}
	if value, ok := ru.mutation.Slug(); ok {
		_spec.SetField(role.FieldSlug, field.TypeString, value)
	}
	if ru.mutation.SlugCleared() {
		_spec.ClearField(role.FieldSlug, field.TypeString)
	}
	if value, ok := ru.mutation.Disabled(); ok {
		_spec.SetField(role.FieldDisabled, field.TypeBool, value)
	}
	if ru.mutation.DisabledCleared() {
		_spec.ClearField(role.FieldDisabled, field.TypeBool)
	}
	if value, ok := ru.mutation.Description(); ok {
		_spec.SetField(role.FieldDescription, field.TypeString, value)
	}
	if ru.mutation.DescriptionCleared() {
		_spec.ClearField(role.FieldDescription, field.TypeString)
	}
	if value, ok := ru.mutation.Extras(); ok {
		_spec.SetField(role.FieldExtras, field.TypeJSON, value)
	}
	if ru.mutation.ExtrasCleared() {
		_spec.ClearField(role.FieldExtras, field.TypeJSON)
	}
	if value, ok := ru.mutation.CreatedBy(); ok {
		_spec.SetField(role.FieldCreatedBy, field.TypeString, value)
	}
	if ru.mutation.CreatedByCleared() {
		_spec.ClearField(role.FieldCreatedBy, field.TypeString)
	}
	if value, ok := ru.mutation.UpdatedBy(); ok {
		_spec.SetField(role.FieldUpdatedBy, field.TypeString, value)
	}
	if ru.mutation.UpdatedByCleared() {
		_spec.ClearField(role.FieldUpdatedBy, field.TypeString)
	}
	if ru.mutation.CreatedAtCleared() {
		_spec.ClearField(role.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := ru.mutation.UpdatedAt(); ok {
		_spec.SetField(role.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := ru.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(role.FieldUpdatedAt, field.TypeInt64, value)
	}
	if ru.mutation.UpdatedAtCleared() {
		_spec.ClearField(role.FieldUpdatedAt, field.TypeInt64)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{role.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// RoleUpdateOne is the builder for updating a single Role entity.
type RoleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RoleMutation
}

// SetName sets the "name" field.
func (ruo *RoleUpdateOne) SetName(s string) *RoleUpdateOne {
	ruo.mutation.SetName(s)
	return ruo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ruo *RoleUpdateOne) SetNillableName(s *string) *RoleUpdateOne {
	if s != nil {
		ruo.SetName(*s)
	}
	return ruo
}

// ClearName clears the value of the "name" field.
func (ruo *RoleUpdateOne) ClearName() *RoleUpdateOne {
	ruo.mutation.ClearName()
	return ruo
}

// SetSlug sets the "slug" field.
func (ruo *RoleUpdateOne) SetSlug(s string) *RoleUpdateOne {
	ruo.mutation.SetSlug(s)
	return ruo
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (ruo *RoleUpdateOne) SetNillableSlug(s *string) *RoleUpdateOne {
	if s != nil {
		ruo.SetSlug(*s)
	}
	return ruo
}

// ClearSlug clears the value of the "slug" field.
func (ruo *RoleUpdateOne) ClearSlug() *RoleUpdateOne {
	ruo.mutation.ClearSlug()
	return ruo
}

// SetDisabled sets the "disabled" field.
func (ruo *RoleUpdateOne) SetDisabled(b bool) *RoleUpdateOne {
	ruo.mutation.SetDisabled(b)
	return ruo
}

// SetNillableDisabled sets the "disabled" field if the given value is not nil.
func (ruo *RoleUpdateOne) SetNillableDisabled(b *bool) *RoleUpdateOne {
	if b != nil {
		ruo.SetDisabled(*b)
	}
	return ruo
}

// ClearDisabled clears the value of the "disabled" field.
func (ruo *RoleUpdateOne) ClearDisabled() *RoleUpdateOne {
	ruo.mutation.ClearDisabled()
	return ruo
}

// SetDescription sets the "description" field.
func (ruo *RoleUpdateOne) SetDescription(s string) *RoleUpdateOne {
	ruo.mutation.SetDescription(s)
	return ruo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ruo *RoleUpdateOne) SetNillableDescription(s *string) *RoleUpdateOne {
	if s != nil {
		ruo.SetDescription(*s)
	}
	return ruo
}

// ClearDescription clears the value of the "description" field.
func (ruo *RoleUpdateOne) ClearDescription() *RoleUpdateOne {
	ruo.mutation.ClearDescription()
	return ruo
}

// SetExtras sets the "extras" field.
func (ruo *RoleUpdateOne) SetExtras(m map[string]interface{}) *RoleUpdateOne {
	ruo.mutation.SetExtras(m)
	return ruo
}

// ClearExtras clears the value of the "extras" field.
func (ruo *RoleUpdateOne) ClearExtras() *RoleUpdateOne {
	ruo.mutation.ClearExtras()
	return ruo
}

// SetCreatedBy sets the "created_by" field.
func (ruo *RoleUpdateOne) SetCreatedBy(s string) *RoleUpdateOne {
	ruo.mutation.SetCreatedBy(s)
	return ruo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (ruo *RoleUpdateOne) SetNillableCreatedBy(s *string) *RoleUpdateOne {
	if s != nil {
		ruo.SetCreatedBy(*s)
	}
	return ruo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (ruo *RoleUpdateOne) ClearCreatedBy() *RoleUpdateOne {
	ruo.mutation.ClearCreatedBy()
	return ruo
}

// SetUpdatedBy sets the "updated_by" field.
func (ruo *RoleUpdateOne) SetUpdatedBy(s string) *RoleUpdateOne {
	ruo.mutation.SetUpdatedBy(s)
	return ruo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ruo *RoleUpdateOne) SetNillableUpdatedBy(s *string) *RoleUpdateOne {
	if s != nil {
		ruo.SetUpdatedBy(*s)
	}
	return ruo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (ruo *RoleUpdateOne) ClearUpdatedBy() *RoleUpdateOne {
	ruo.mutation.ClearUpdatedBy()
	return ruo
}

// SetUpdatedAt sets the "updated_at" field.
func (ruo *RoleUpdateOne) SetUpdatedAt(i int64) *RoleUpdateOne {
	ruo.mutation.ResetUpdatedAt()
	ruo.mutation.SetUpdatedAt(i)
	return ruo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (ruo *RoleUpdateOne) AddUpdatedAt(i int64) *RoleUpdateOne {
	ruo.mutation.AddUpdatedAt(i)
	return ruo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (ruo *RoleUpdateOne) ClearUpdatedAt() *RoleUpdateOne {
	ruo.mutation.ClearUpdatedAt()
	return ruo
}

// Mutation returns the RoleMutation object of the builder.
func (ruo *RoleUpdateOne) Mutation() *RoleMutation {
	return ruo.mutation
}

// Where appends a list predicates to the RoleUpdate builder.
func (ruo *RoleUpdateOne) Where(ps ...predicate.Role) *RoleUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RoleUpdateOne) Select(field string, fields ...string) *RoleUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Role entity.
func (ruo *RoleUpdateOne) Save(ctx context.Context) (*Role, error) {
	ruo.defaults()
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RoleUpdateOne) SaveX(ctx context.Context) *Role {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RoleUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RoleUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ruo *RoleUpdateOne) defaults() {
	if _, ok := ruo.mutation.UpdatedAt(); !ok && !ruo.mutation.UpdatedAtCleared() {
		v := role.UpdateDefaultUpdatedAt()
		ruo.mutation.SetUpdatedAt(v)
	}
}

func (ruo *RoleUpdateOne) sqlSave(ctx context.Context) (_node *Role, err error) {
	_spec := sqlgraph.NewUpdateSpec(role.Table, role.Columns, sqlgraph.NewFieldSpec(role.FieldID, field.TypeString))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Role.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, role.FieldID)
		for _, f := range fields {
			if !role.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != role.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.Name(); ok {
		_spec.SetField(role.FieldName, field.TypeString, value)
	}
	if ruo.mutation.NameCleared() {
		_spec.ClearField(role.FieldName, field.TypeString)
	}
	if value, ok := ruo.mutation.Slug(); ok {
		_spec.SetField(role.FieldSlug, field.TypeString, value)
	}
	if ruo.mutation.SlugCleared() {
		_spec.ClearField(role.FieldSlug, field.TypeString)
	}
	if value, ok := ruo.mutation.Disabled(); ok {
		_spec.SetField(role.FieldDisabled, field.TypeBool, value)
	}
	if ruo.mutation.DisabledCleared() {
		_spec.ClearField(role.FieldDisabled, field.TypeBool)
	}
	if value, ok := ruo.mutation.Description(); ok {
		_spec.SetField(role.FieldDescription, field.TypeString, value)
	}
	if ruo.mutation.DescriptionCleared() {
		_spec.ClearField(role.FieldDescription, field.TypeString)
	}
	if value, ok := ruo.mutation.Extras(); ok {
		_spec.SetField(role.FieldExtras, field.TypeJSON, value)
	}
	if ruo.mutation.ExtrasCleared() {
		_spec.ClearField(role.FieldExtras, field.TypeJSON)
	}
	if value, ok := ruo.mutation.CreatedBy(); ok {
		_spec.SetField(role.FieldCreatedBy, field.TypeString, value)
	}
	if ruo.mutation.CreatedByCleared() {
		_spec.ClearField(role.FieldCreatedBy, field.TypeString)
	}
	if value, ok := ruo.mutation.UpdatedBy(); ok {
		_spec.SetField(role.FieldUpdatedBy, field.TypeString, value)
	}
	if ruo.mutation.UpdatedByCleared() {
		_spec.ClearField(role.FieldUpdatedBy, field.TypeString)
	}
	if ruo.mutation.CreatedAtCleared() {
		_spec.ClearField(role.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := ruo.mutation.UpdatedAt(); ok {
		_spec.SetField(role.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := ruo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(role.FieldUpdatedAt, field.TypeInt64, value)
	}
	if ruo.mutation.UpdatedAtCleared() {
		_spec.ClearField(role.FieldUpdatedAt, field.TypeInt64)
	}
	_node = &Role{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{role.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
