// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/entsql"
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// NcseAuthTokenColumns holds the columns for the "ncse_auth_token" table.
	NcseAuthTokenColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true, Size: 16, Comment: "primary key"},
		{Name: "disabled", Type: field.TypeBool, Nullable: true, Comment: "is disabled", Default: false},
		{Name: "created_at", Type: field.TypeInt64, Nullable: true, Comment: "created at"},
		{Name: "updated_at", Type: field.TypeInt64, Nullable: true, Comment: "updated at"},
		{Name: "user_id", Type: field.TypeString, Nullable: true, Size: 16, Comment: "user id"},
	}
	// NcseAuthTokenTable holds the schema information for the "ncse_auth_token" table.
	NcseAuthTokenTable = &schema.Table{
		Name:       "ncse_auth_token",
		Columns:    NcseAuthTokenColumns,
		PrimaryKey: []*schema.Column{NcseAuthTokenColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "authtoken_id",
				Unique:  true,
				Columns: []*schema.Column{NcseAuthTokenColumns[0]},
			},
			{
				Name:    "authtoken_user_id",
				Unique:  false,
				Columns: []*schema.Column{NcseAuthTokenColumns[4]},
			},
			{
				Name:    "authtoken_id_created_at",
				Unique:  true,
				Columns: []*schema.Column{NcseAuthTokenColumns[0], NcseAuthTokenColumns[2]},
			},
		},
	}
	// NcseCodeAuthColumns holds the columns for the "ncse_code_auth" table.
	NcseCodeAuthColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true, Size: 16, Comment: "primary key"},
		{Name: "code", Type: field.TypeString, Nullable: true, Comment: "code"},
		{Name: "email", Type: field.TypeString, Nullable: true, Comment: "email"},
		{Name: "logged", Type: field.TypeBool, Nullable: true, Comment: "is logged", Default: false},
		{Name: "created_at", Type: field.TypeInt64, Nullable: true, Comment: "created at"},
		{Name: "updated_at", Type: field.TypeInt64, Nullable: true, Comment: "updated at"},
	}
	// NcseCodeAuthTable holds the schema information for the "ncse_code_auth" table.
	NcseCodeAuthTable = &schema.Table{
		Name:       "ncse_code_auth",
		Columns:    NcseCodeAuthColumns,
		PrimaryKey: []*schema.Column{NcseCodeAuthColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "codeauth_id",
				Unique:  true,
				Columns: []*schema.Column{NcseCodeAuthColumns[0]},
			},
			{
				Name:    "codeauth_id_created_at",
				Unique:  true,
				Columns: []*schema.Column{NcseCodeAuthColumns[0], NcseCodeAuthColumns[4]},
			},
			{
				Name:    "codeauth_code",
				Unique:  false,
				Columns: []*schema.Column{NcseCodeAuthColumns[1]},
			},
		},
	}
	// NcseOauthUserColumns holds the columns for the "ncse_oauth_user" table.
	NcseOauthUserColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true, Size: 16, Comment: "primary key"},
		{Name: "oauth_id", Type: field.TypeString, Nullable: true, Comment: "oauth id"},
		{Name: "access_token", Type: field.TypeString, Comment: "access token"},
		{Name: "provider", Type: field.TypeString, Nullable: true, Comment: "provider"},
		{Name: "user_id", Type: field.TypeString, Nullable: true, Size: 16, Comment: "user id"},
		{Name: "created_at", Type: field.TypeInt64, Nullable: true, Comment: "created at"},
		{Name: "updated_at", Type: field.TypeInt64, Nullable: true, Comment: "updated at"},
	}
	// NcseOauthUserTable holds the schema information for the "ncse_oauth_user" table.
	NcseOauthUserTable = &schema.Table{
		Name:       "ncse_oauth_user",
		Columns:    NcseOauthUserColumns,
		PrimaryKey: []*schema.Column{NcseOauthUserColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "oauthuser_id",
				Unique:  true,
				Columns: []*schema.Column{NcseOauthUserColumns[0]},
			},
			{
				Name:    "oauthuser_oauth_id",
				Unique:  false,
				Columns: []*schema.Column{NcseOauthUserColumns[1]},
			},
			{
				Name:    "oauthuser_user_id",
				Unique:  false,
				Columns: []*schema.Column{NcseOauthUserColumns[4]},
			},
			{
				Name:    "oauthuser_id_created_at",
				Unique:  true,
				Columns: []*schema.Column{NcseOauthUserColumns[0], NcseOauthUserColumns[5]},
			},
		},
	}
	// NcseUserSessionColumns holds the columns for the "ncse_user_session" table.
	NcseUserSessionColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true, Size: 64, Comment: "primary key"},
		{Name: "user_id", Type: field.TypeString, Nullable: true, Size: 16, Comment: "user id"},
		{Name: "created_at", Type: field.TypeInt64, Nullable: true, Comment: "created at"},
		{Name: "updated_at", Type: field.TypeInt64, Nullable: true, Comment: "updated at"},
		{Name: "token_id", Type: field.TypeString, Comment: "Associated auth token ID"},
		{Name: "device_info", Type: field.TypeJSON, Nullable: true, Comment: "Device information"},
		{Name: "ip_address", Type: field.TypeString, Nullable: true, Comment: "IP address"},
		{Name: "user_agent", Type: field.TypeString, Nullable: true, Comment: "User agent string"},
		{Name: "location", Type: field.TypeString, Nullable: true, Comment: "Geographic location"},
		{Name: "login_method", Type: field.TypeString, Nullable: true, Comment: "Login method used"},
		{Name: "is_active", Type: field.TypeBool, Comment: "Session active status", Default: true},
		{Name: "last_access_at", Type: field.TypeInt64, Nullable: true, Comment: "Last access timestamp"},
		{Name: "expires_at", Type: field.TypeInt64, Nullable: true, Comment: "Session expiration timestamp"},
	}
	// NcseUserSessionTable holds the schema information for the "ncse_user_session" table.
	NcseUserSessionTable = &schema.Table{
		Name:       "ncse_user_session",
		Columns:    NcseUserSessionColumns,
		PrimaryKey: []*schema.Column{NcseUserSessionColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "session_id",
				Unique:  false,
				Columns: []*schema.Column{NcseUserSessionColumns[0]},
			},
			{
				Name:    "session_user_id",
				Unique:  false,
				Columns: []*schema.Column{NcseUserSessionColumns[1]},
			},
			{
				Name:    "session_id_created_at",
				Unique:  true,
				Columns: []*schema.Column{NcseUserSessionColumns[0], NcseUserSessionColumns[2]},
			},
			{
				Name:    "session_token_id",
				Unique:  false,
				Columns: []*schema.Column{NcseUserSessionColumns[4]},
			},
			{
				Name:    "session_is_active",
				Unique:  false,
				Columns: []*schema.Column{NcseUserSessionColumns[10]},
			},
			{
				Name:    "session_expires_at",
				Unique:  false,
				Columns: []*schema.Column{NcseUserSessionColumns[12]},
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		NcseAuthTokenTable,
		NcseCodeAuthTable,
		NcseOauthUserTable,
		NcseUserSessionTable,
	}
)

func init() {
	NcseAuthTokenTable.Annotation = &entsql.Annotation{
		Table: "ncse_auth_token",
	}
	NcseCodeAuthTable.Annotation = &entsql.Annotation{
		Table: "ncse_code_auth",
	}
	NcseOauthUserTable.Annotation = &entsql.Annotation{
		Table: "ncse_oauth_user",
	}
	NcseUserSessionTable.Annotation = &entsql.Annotation{
		Table: "ncse_user_session",
	}
}
