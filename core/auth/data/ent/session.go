// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"ncobase/auth/data/ent/session"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Session is the model entity for the Session schema.
type Session struct {
	config `json:"-"`
	// ID of the ent.
	// primary key
	ID string `json:"id,omitempty"`
	// user id
	UserID string `json:"user_id,omitempty"`
	// created at
	CreatedAt int64 `json:"created_at,omitempty"`
	// updated at
	UpdatedAt int64 `json:"updated_at,omitempty"`
	// Associated auth token ID
	TokenID string `json:"token_id,omitempty"`
	// Device information
	DeviceInfo map[string]interface{} `json:"device_info,omitempty"`
	// IP address
	IPAddress string `json:"ip_address,omitempty"`
	// User agent string
	UserAgent string `json:"user_agent,omitempty"`
	// Geographic location
	Location string `json:"location,omitempty"`
	// Login method used
	LoginMethod string `json:"login_method,omitempty"`
	// Session active status
	IsActive bool `json:"is_active,omitempty"`
	// Last access timestamp
	LastAccessAt int64 `json:"last_access_at,omitempty"`
	// Session expiration timestamp
	ExpiresAt    int64 `json:"expires_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Session) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case session.FieldDeviceInfo:
			values[i] = new([]byte)
		case session.FieldIsActive:
			values[i] = new(sql.NullBool)
		case session.FieldCreatedAt, session.FieldUpdatedAt, session.FieldLastAccessAt, session.FieldExpiresAt:
			values[i] = new(sql.NullInt64)
		case session.FieldID, session.FieldUserID, session.FieldTokenID, session.FieldIPAddress, session.FieldUserAgent, session.FieldLocation, session.FieldLoginMethod:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Session fields.
func (s *Session) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case session.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				s.ID = value.String
			}
		case session.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				s.UserID = value.String
			}
		case session.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				s.CreatedAt = value.Int64
			}
		case session.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				s.UpdatedAt = value.Int64
			}
		case session.FieldTokenID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field token_id", values[i])
			} else if value.Valid {
				s.TokenID = value.String
			}
		case session.FieldDeviceInfo:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field device_info", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &s.DeviceInfo); err != nil {
					return fmt.Errorf("unmarshal field device_info: %w", err)
				}
			}
		case session.FieldIPAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ip_address", values[i])
			} else if value.Valid {
				s.IPAddress = value.String
			}
		case session.FieldUserAgent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_agent", values[i])
			} else if value.Valid {
				s.UserAgent = value.String
			}
		case session.FieldLocation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field location", values[i])
			} else if value.Valid {
				s.Location = value.String
			}
		case session.FieldLoginMethod:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field login_method", values[i])
			} else if value.Valid {
				s.LoginMethod = value.String
			}
		case session.FieldIsActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_active", values[i])
			} else if value.Valid {
				s.IsActive = value.Bool
			}
		case session.FieldLastAccessAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field last_access_at", values[i])
			} else if value.Valid {
				s.LastAccessAt = value.Int64
			}
		case session.FieldExpiresAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field expires_at", values[i])
			} else if value.Valid {
				s.ExpiresAt = value.Int64
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Session.
// This includes values selected through modifiers, order, etc.
func (s *Session) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// Update returns a builder for updating this Session.
// Note that you need to call Session.Unwrap() before calling this method if this Session
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Session) Update() *SessionUpdateOne {
	return NewSessionClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Session entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Session) Unwrap() *Session {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Session is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Session) String() string {
	var builder strings.Builder
	builder.WriteString("Session(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("user_id=")
	builder.WriteString(s.UserID)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", s.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", s.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("token_id=")
	builder.WriteString(s.TokenID)
	builder.WriteString(", ")
	builder.WriteString("device_info=")
	builder.WriteString(fmt.Sprintf("%v", s.DeviceInfo))
	builder.WriteString(", ")
	builder.WriteString("ip_address=")
	builder.WriteString(s.IPAddress)
	builder.WriteString(", ")
	builder.WriteString("user_agent=")
	builder.WriteString(s.UserAgent)
	builder.WriteString(", ")
	builder.WriteString("location=")
	builder.WriteString(s.Location)
	builder.WriteString(", ")
	builder.WriteString("login_method=")
	builder.WriteString(s.LoginMethod)
	builder.WriteString(", ")
	builder.WriteString("is_active=")
	builder.WriteString(fmt.Sprintf("%v", s.IsActive))
	builder.WriteString(", ")
	builder.WriteString("last_access_at=")
	builder.WriteString(fmt.Sprintf("%v", s.LastAccessAt))
	builder.WriteString(", ")
	builder.WriteString("expires_at=")
	builder.WriteString(fmt.Sprintf("%v", s.ExpiresAt))
	builder.WriteByte(')')
	return builder.String()
}

// Sessions is a parsable slice of Session.
type Sessions []*Session
