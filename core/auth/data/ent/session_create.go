// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/auth/data/ent/session"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SessionCreate is the builder for creating a Session entity.
type SessionCreate struct {
	config
	mutation *SessionMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (sc *SessionCreate) SetUserID(s string) *SessionCreate {
	sc.mutation.SetUserID(s)
	return sc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (sc *SessionCreate) SetNillableUserID(s *string) *SessionCreate {
	if s != nil {
		sc.SetUserID(*s)
	}
	return sc
}

// SetCreatedAt sets the "created_at" field.
func (sc *SessionCreate) SetCreatedAt(i int64) *SessionCreate {
	sc.mutation.SetCreatedAt(i)
	return sc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sc *SessionCreate) SetNillableCreatedAt(i *int64) *SessionCreate {
	if i != nil {
		sc.SetCreatedAt(*i)
	}
	return sc
}

// SetUpdatedAt sets the "updated_at" field.
func (sc *SessionCreate) SetUpdatedAt(i int64) *SessionCreate {
	sc.mutation.SetUpdatedAt(i)
	return sc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sc *SessionCreate) SetNillableUpdatedAt(i *int64) *SessionCreate {
	if i != nil {
		sc.SetUpdatedAt(*i)
	}
	return sc
}

// SetTokenID sets the "token_id" field.
func (sc *SessionCreate) SetTokenID(s string) *SessionCreate {
	sc.mutation.SetTokenID(s)
	return sc
}

// SetDeviceInfo sets the "device_info" field.
func (sc *SessionCreate) SetDeviceInfo(m map[string]interface{}) *SessionCreate {
	sc.mutation.SetDeviceInfo(m)
	return sc
}

// SetIPAddress sets the "ip_address" field.
func (sc *SessionCreate) SetIPAddress(s string) *SessionCreate {
	sc.mutation.SetIPAddress(s)
	return sc
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (sc *SessionCreate) SetNillableIPAddress(s *string) *SessionCreate {
	if s != nil {
		sc.SetIPAddress(*s)
	}
	return sc
}

// SetUserAgent sets the "user_agent" field.
func (sc *SessionCreate) SetUserAgent(s string) *SessionCreate {
	sc.mutation.SetUserAgent(s)
	return sc
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (sc *SessionCreate) SetNillableUserAgent(s *string) *SessionCreate {
	if s != nil {
		sc.SetUserAgent(*s)
	}
	return sc
}

// SetLocation sets the "location" field.
func (sc *SessionCreate) SetLocation(s string) *SessionCreate {
	sc.mutation.SetLocation(s)
	return sc
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (sc *SessionCreate) SetNillableLocation(s *string) *SessionCreate {
	if s != nil {
		sc.SetLocation(*s)
	}
	return sc
}

// SetLoginMethod sets the "login_method" field.
func (sc *SessionCreate) SetLoginMethod(s string) *SessionCreate {
	sc.mutation.SetLoginMethod(s)
	return sc
}

// SetNillableLoginMethod sets the "login_method" field if the given value is not nil.
func (sc *SessionCreate) SetNillableLoginMethod(s *string) *SessionCreate {
	if s != nil {
		sc.SetLoginMethod(*s)
	}
	return sc
}

// SetIsActive sets the "is_active" field.
func (sc *SessionCreate) SetIsActive(b bool) *SessionCreate {
	sc.mutation.SetIsActive(b)
	return sc
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (sc *SessionCreate) SetNillableIsActive(b *bool) *SessionCreate {
	if b != nil {
		sc.SetIsActive(*b)
	}
	return sc
}

// SetLastAccessAt sets the "last_access_at" field.
func (sc *SessionCreate) SetLastAccessAt(i int64) *SessionCreate {
	sc.mutation.SetLastAccessAt(i)
	return sc
}

// SetNillableLastAccessAt sets the "last_access_at" field if the given value is not nil.
func (sc *SessionCreate) SetNillableLastAccessAt(i *int64) *SessionCreate {
	if i != nil {
		sc.SetLastAccessAt(*i)
	}
	return sc
}

// SetExpiresAt sets the "expires_at" field.
func (sc *SessionCreate) SetExpiresAt(i int64) *SessionCreate {
	sc.mutation.SetExpiresAt(i)
	return sc
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (sc *SessionCreate) SetNillableExpiresAt(i *int64) *SessionCreate {
	if i != nil {
		sc.SetExpiresAt(*i)
	}
	return sc
}

// SetID sets the "id" field.
func (sc *SessionCreate) SetID(s string) *SessionCreate {
	sc.mutation.SetID(s)
	return sc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (sc *SessionCreate) SetNillableID(s *string) *SessionCreate {
	if s != nil {
		sc.SetID(*s)
	}
	return sc
}

// Mutation returns the SessionMutation object of the builder.
func (sc *SessionCreate) Mutation() *SessionMutation {
	return sc.mutation
}

// Save creates the Session in the database.
func (sc *SessionCreate) Save(ctx context.Context) (*Session, error) {
	sc.defaults()
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SessionCreate) SaveX(ctx context.Context) *Session {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SessionCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SessionCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *SessionCreate) defaults() {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		v := session.DefaultCreatedAt()
		sc.mutation.SetCreatedAt(v)
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		v := session.DefaultUpdatedAt()
		sc.mutation.SetUpdatedAt(v)
	}
	if _, ok := sc.mutation.IsActive(); !ok {
		v := session.DefaultIsActive
		sc.mutation.SetIsActive(v)
	}
	if _, ok := sc.mutation.ID(); !ok {
		v := session.DefaultID()
		sc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *SessionCreate) check() error {
	if _, ok := sc.mutation.TokenID(); !ok {
		return &ValidationError{Name: "token_id", err: errors.New(`ent: missing required field "Session.token_id"`)}
	}
	if _, ok := sc.mutation.IsActive(); !ok {
		return &ValidationError{Name: "is_active", err: errors.New(`ent: missing required field "Session.is_active"`)}
	}
	if v, ok := sc.mutation.ID(); ok {
		if err := session.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Session.id": %w`, err)}
		}
	}
	return nil
}

func (sc *SessionCreate) sqlSave(ctx context.Context) (*Session, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Session.ID type: %T", _spec.ID.Value)
		}
	}
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *SessionCreate) createSpec() (*Session, *sqlgraph.CreateSpec) {
	var (
		_node = &Session{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(session.Table, sqlgraph.NewFieldSpec(session.FieldID, field.TypeString))
	)
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sc.mutation.UserID(); ok {
		_spec.SetField(session.FieldUserID, field.TypeString, value)
		_node.UserID = value
	}
	if value, ok := sc.mutation.CreatedAt(); ok {
		_spec.SetField(session.FieldCreatedAt, field.TypeInt64, value)
		_node.CreatedAt = value
	}
	if value, ok := sc.mutation.UpdatedAt(); ok {
		_spec.SetField(session.FieldUpdatedAt, field.TypeInt64, value)
		_node.UpdatedAt = value
	}
	if value, ok := sc.mutation.TokenID(); ok {
		_spec.SetField(session.FieldTokenID, field.TypeString, value)
		_node.TokenID = value
	}
	if value, ok := sc.mutation.DeviceInfo(); ok {
		_spec.SetField(session.FieldDeviceInfo, field.TypeJSON, value)
		_node.DeviceInfo = value
	}
	if value, ok := sc.mutation.IPAddress(); ok {
		_spec.SetField(session.FieldIPAddress, field.TypeString, value)
		_node.IPAddress = value
	}
	if value, ok := sc.mutation.UserAgent(); ok {
		_spec.SetField(session.FieldUserAgent, field.TypeString, value)
		_node.UserAgent = value
	}
	if value, ok := sc.mutation.Location(); ok {
		_spec.SetField(session.FieldLocation, field.TypeString, value)
		_node.Location = value
	}
	if value, ok := sc.mutation.LoginMethod(); ok {
		_spec.SetField(session.FieldLoginMethod, field.TypeString, value)
		_node.LoginMethod = value
	}
	if value, ok := sc.mutation.IsActive(); ok {
		_spec.SetField(session.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if value, ok := sc.mutation.LastAccessAt(); ok {
		_spec.SetField(session.FieldLastAccessAt, field.TypeInt64, value)
		_node.LastAccessAt = value
	}
	if value, ok := sc.mutation.ExpiresAt(); ok {
		_spec.SetField(session.FieldExpiresAt, field.TypeInt64, value)
		_node.ExpiresAt = value
	}
	return _node, _spec
}

// SessionCreateBulk is the builder for creating many Session entities in bulk.
type SessionCreateBulk struct {
	config
	err      error
	builders []*SessionCreate
}

// Save creates the Session entities in the database.
func (scb *SessionCreateBulk) Save(ctx context.Context) ([]*Session, error) {
	if scb.err != nil {
		return nil, scb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Session, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SessionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SessionCreateBulk) SaveX(ctx context.Context) []*Session {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SessionCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SessionCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
