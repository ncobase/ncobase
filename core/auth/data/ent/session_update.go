// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/auth/data/ent/predicate"
	"ncobase/auth/data/ent/session"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SessionUpdate is the builder for updating Session entities.
type SessionUpdate struct {
	config
	hooks    []Hook
	mutation *SessionMutation
}

// Where appends a list predicates to the SessionUpdate builder.
func (su *SessionUpdate) Where(ps ...predicate.Session) *SessionUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetUserID sets the "user_id" field.
func (su *SessionUpdate) SetUserID(s string) *SessionUpdate {
	su.mutation.SetUserID(s)
	return su
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (su *SessionUpdate) SetNillableUserID(s *string) *SessionUpdate {
	if s != nil {
		su.SetUserID(*s)
	}
	return su
}

// ClearUserID clears the value of the "user_id" field.
func (su *SessionUpdate) ClearUserID() *SessionUpdate {
	su.mutation.ClearUserID()
	return su
}

// SetUpdatedAt sets the "updated_at" field.
func (su *SessionUpdate) SetUpdatedAt(i int64) *SessionUpdate {
	su.mutation.ResetUpdatedAt()
	su.mutation.SetUpdatedAt(i)
	return su
}

// AddUpdatedAt adds i to the "updated_at" field.
func (su *SessionUpdate) AddUpdatedAt(i int64) *SessionUpdate {
	su.mutation.AddUpdatedAt(i)
	return su
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (su *SessionUpdate) ClearUpdatedAt() *SessionUpdate {
	su.mutation.ClearUpdatedAt()
	return su
}

// SetTokenID sets the "token_id" field.
func (su *SessionUpdate) SetTokenID(s string) *SessionUpdate {
	su.mutation.SetTokenID(s)
	return su
}

// SetNillableTokenID sets the "token_id" field if the given value is not nil.
func (su *SessionUpdate) SetNillableTokenID(s *string) *SessionUpdate {
	if s != nil {
		su.SetTokenID(*s)
	}
	return su
}

// SetDeviceInfo sets the "device_info" field.
func (su *SessionUpdate) SetDeviceInfo(m map[string]interface{}) *SessionUpdate {
	su.mutation.SetDeviceInfo(m)
	return su
}

// ClearDeviceInfo clears the value of the "device_info" field.
func (su *SessionUpdate) ClearDeviceInfo() *SessionUpdate {
	su.mutation.ClearDeviceInfo()
	return su
}

// SetIPAddress sets the "ip_address" field.
func (su *SessionUpdate) SetIPAddress(s string) *SessionUpdate {
	su.mutation.SetIPAddress(s)
	return su
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (su *SessionUpdate) SetNillableIPAddress(s *string) *SessionUpdate {
	if s != nil {
		su.SetIPAddress(*s)
	}
	return su
}

// ClearIPAddress clears the value of the "ip_address" field.
func (su *SessionUpdate) ClearIPAddress() *SessionUpdate {
	su.mutation.ClearIPAddress()
	return su
}

// SetUserAgent sets the "user_agent" field.
func (su *SessionUpdate) SetUserAgent(s string) *SessionUpdate {
	su.mutation.SetUserAgent(s)
	return su
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (su *SessionUpdate) SetNillableUserAgent(s *string) *SessionUpdate {
	if s != nil {
		su.SetUserAgent(*s)
	}
	return su
}

// ClearUserAgent clears the value of the "user_agent" field.
func (su *SessionUpdate) ClearUserAgent() *SessionUpdate {
	su.mutation.ClearUserAgent()
	return su
}

// SetLocation sets the "location" field.
func (su *SessionUpdate) SetLocation(s string) *SessionUpdate {
	su.mutation.SetLocation(s)
	return su
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (su *SessionUpdate) SetNillableLocation(s *string) *SessionUpdate {
	if s != nil {
		su.SetLocation(*s)
	}
	return su
}

// ClearLocation clears the value of the "location" field.
func (su *SessionUpdate) ClearLocation() *SessionUpdate {
	su.mutation.ClearLocation()
	return su
}

// SetLoginMethod sets the "login_method" field.
func (su *SessionUpdate) SetLoginMethod(s string) *SessionUpdate {
	su.mutation.SetLoginMethod(s)
	return su
}

// SetNillableLoginMethod sets the "login_method" field if the given value is not nil.
func (su *SessionUpdate) SetNillableLoginMethod(s *string) *SessionUpdate {
	if s != nil {
		su.SetLoginMethod(*s)
	}
	return su
}

// ClearLoginMethod clears the value of the "login_method" field.
func (su *SessionUpdate) ClearLoginMethod() *SessionUpdate {
	su.mutation.ClearLoginMethod()
	return su
}

// SetIsActive sets the "is_active" field.
func (su *SessionUpdate) SetIsActive(b bool) *SessionUpdate {
	su.mutation.SetIsActive(b)
	return su
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (su *SessionUpdate) SetNillableIsActive(b *bool) *SessionUpdate {
	if b != nil {
		su.SetIsActive(*b)
	}
	return su
}

// SetLastAccessAt sets the "last_access_at" field.
func (su *SessionUpdate) SetLastAccessAt(i int64) *SessionUpdate {
	su.mutation.ResetLastAccessAt()
	su.mutation.SetLastAccessAt(i)
	return su
}

// SetNillableLastAccessAt sets the "last_access_at" field if the given value is not nil.
func (su *SessionUpdate) SetNillableLastAccessAt(i *int64) *SessionUpdate {
	if i != nil {
		su.SetLastAccessAt(*i)
	}
	return su
}

// AddLastAccessAt adds i to the "last_access_at" field.
func (su *SessionUpdate) AddLastAccessAt(i int64) *SessionUpdate {
	su.mutation.AddLastAccessAt(i)
	return su
}

// ClearLastAccessAt clears the value of the "last_access_at" field.
func (su *SessionUpdate) ClearLastAccessAt() *SessionUpdate {
	su.mutation.ClearLastAccessAt()
	return su
}

// SetExpiresAt sets the "expires_at" field.
func (su *SessionUpdate) SetExpiresAt(i int64) *SessionUpdate {
	su.mutation.ResetExpiresAt()
	su.mutation.SetExpiresAt(i)
	return su
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (su *SessionUpdate) SetNillableExpiresAt(i *int64) *SessionUpdate {
	if i != nil {
		su.SetExpiresAt(*i)
	}
	return su
}

// AddExpiresAt adds i to the "expires_at" field.
func (su *SessionUpdate) AddExpiresAt(i int64) *SessionUpdate {
	su.mutation.AddExpiresAt(i)
	return su
}

// ClearExpiresAt clears the value of the "expires_at" field.
func (su *SessionUpdate) ClearExpiresAt() *SessionUpdate {
	su.mutation.ClearExpiresAt()
	return su
}

// Mutation returns the SessionMutation object of the builder.
func (su *SessionUpdate) Mutation() *SessionMutation {
	return su.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SessionUpdate) Save(ctx context.Context) (int, error) {
	su.defaults()
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SessionUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SessionUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SessionUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *SessionUpdate) defaults() {
	if _, ok := su.mutation.UpdatedAt(); !ok && !su.mutation.UpdatedAtCleared() {
		v := session.UpdateDefaultUpdatedAt()
		su.mutation.SetUpdatedAt(v)
	}
}

func (su *SessionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(session.Table, session.Columns, sqlgraph.NewFieldSpec(session.FieldID, field.TypeString))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.UserID(); ok {
		_spec.SetField(session.FieldUserID, field.TypeString, value)
	}
	if su.mutation.UserIDCleared() {
		_spec.ClearField(session.FieldUserID, field.TypeString)
	}
	if su.mutation.CreatedAtCleared() {
		_spec.ClearField(session.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.SetField(session.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := su.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(session.FieldUpdatedAt, field.TypeInt64, value)
	}
	if su.mutation.UpdatedAtCleared() {
		_spec.ClearField(session.FieldUpdatedAt, field.TypeInt64)
	}
	if value, ok := su.mutation.TokenID(); ok {
		_spec.SetField(session.FieldTokenID, field.TypeString, value)
	}
	if value, ok := su.mutation.DeviceInfo(); ok {
		_spec.SetField(session.FieldDeviceInfo, field.TypeJSON, value)
	}
	if su.mutation.DeviceInfoCleared() {
		_spec.ClearField(session.FieldDeviceInfo, field.TypeJSON)
	}
	if value, ok := su.mutation.IPAddress(); ok {
		_spec.SetField(session.FieldIPAddress, field.TypeString, value)
	}
	if su.mutation.IPAddressCleared() {
		_spec.ClearField(session.FieldIPAddress, field.TypeString)
	}
	if value, ok := su.mutation.UserAgent(); ok {
		_spec.SetField(session.FieldUserAgent, field.TypeString, value)
	}
	if su.mutation.UserAgentCleared() {
		_spec.ClearField(session.FieldUserAgent, field.TypeString)
	}
	if value, ok := su.mutation.Location(); ok {
		_spec.SetField(session.FieldLocation, field.TypeString, value)
	}
	if su.mutation.LocationCleared() {
		_spec.ClearField(session.FieldLocation, field.TypeString)
	}
	if value, ok := su.mutation.LoginMethod(); ok {
		_spec.SetField(session.FieldLoginMethod, field.TypeString, value)
	}
	if su.mutation.LoginMethodCleared() {
		_spec.ClearField(session.FieldLoginMethod, field.TypeString)
	}
	if value, ok := su.mutation.IsActive(); ok {
		_spec.SetField(session.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := su.mutation.LastAccessAt(); ok {
		_spec.SetField(session.FieldLastAccessAt, field.TypeInt64, value)
	}
	if value, ok := su.mutation.AddedLastAccessAt(); ok {
		_spec.AddField(session.FieldLastAccessAt, field.TypeInt64, value)
	}
	if su.mutation.LastAccessAtCleared() {
		_spec.ClearField(session.FieldLastAccessAt, field.TypeInt64)
	}
	if value, ok := su.mutation.ExpiresAt(); ok {
		_spec.SetField(session.FieldExpiresAt, field.TypeInt64, value)
	}
	if value, ok := su.mutation.AddedExpiresAt(); ok {
		_spec.AddField(session.FieldExpiresAt, field.TypeInt64, value)
	}
	if su.mutation.ExpiresAtCleared() {
		_spec.ClearField(session.FieldExpiresAt, field.TypeInt64)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{session.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SessionUpdateOne is the builder for updating a single Session entity.
type SessionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SessionMutation
}

// SetUserID sets the "user_id" field.
func (suo *SessionUpdateOne) SetUserID(s string) *SessionUpdateOne {
	suo.mutation.SetUserID(s)
	return suo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (suo *SessionUpdateOne) SetNillableUserID(s *string) *SessionUpdateOne {
	if s != nil {
		suo.SetUserID(*s)
	}
	return suo
}

// ClearUserID clears the value of the "user_id" field.
func (suo *SessionUpdateOne) ClearUserID() *SessionUpdateOne {
	suo.mutation.ClearUserID()
	return suo
}

// SetUpdatedAt sets the "updated_at" field.
func (suo *SessionUpdateOne) SetUpdatedAt(i int64) *SessionUpdateOne {
	suo.mutation.ResetUpdatedAt()
	suo.mutation.SetUpdatedAt(i)
	return suo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (suo *SessionUpdateOne) AddUpdatedAt(i int64) *SessionUpdateOne {
	suo.mutation.AddUpdatedAt(i)
	return suo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (suo *SessionUpdateOne) ClearUpdatedAt() *SessionUpdateOne {
	suo.mutation.ClearUpdatedAt()
	return suo
}

// SetTokenID sets the "token_id" field.
func (suo *SessionUpdateOne) SetTokenID(s string) *SessionUpdateOne {
	suo.mutation.SetTokenID(s)
	return suo
}

// SetNillableTokenID sets the "token_id" field if the given value is not nil.
func (suo *SessionUpdateOne) SetNillableTokenID(s *string) *SessionUpdateOne {
	if s != nil {
		suo.SetTokenID(*s)
	}
	return suo
}

// SetDeviceInfo sets the "device_info" field.
func (suo *SessionUpdateOne) SetDeviceInfo(m map[string]interface{}) *SessionUpdateOne {
	suo.mutation.SetDeviceInfo(m)
	return suo
}

// ClearDeviceInfo clears the value of the "device_info" field.
func (suo *SessionUpdateOne) ClearDeviceInfo() *SessionUpdateOne {
	suo.mutation.ClearDeviceInfo()
	return suo
}

// SetIPAddress sets the "ip_address" field.
func (suo *SessionUpdateOne) SetIPAddress(s string) *SessionUpdateOne {
	suo.mutation.SetIPAddress(s)
	return suo
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (suo *SessionUpdateOne) SetNillableIPAddress(s *string) *SessionUpdateOne {
	if s != nil {
		suo.SetIPAddress(*s)
	}
	return suo
}

// ClearIPAddress clears the value of the "ip_address" field.
func (suo *SessionUpdateOne) ClearIPAddress() *SessionUpdateOne {
	suo.mutation.ClearIPAddress()
	return suo
}

// SetUserAgent sets the "user_agent" field.
func (suo *SessionUpdateOne) SetUserAgent(s string) *SessionUpdateOne {
	suo.mutation.SetUserAgent(s)
	return suo
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (suo *SessionUpdateOne) SetNillableUserAgent(s *string) *SessionUpdateOne {
	if s != nil {
		suo.SetUserAgent(*s)
	}
	return suo
}

// ClearUserAgent clears the value of the "user_agent" field.
func (suo *SessionUpdateOne) ClearUserAgent() *SessionUpdateOne {
	suo.mutation.ClearUserAgent()
	return suo
}

// SetLocation sets the "location" field.
func (suo *SessionUpdateOne) SetLocation(s string) *SessionUpdateOne {
	suo.mutation.SetLocation(s)
	return suo
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (suo *SessionUpdateOne) SetNillableLocation(s *string) *SessionUpdateOne {
	if s != nil {
		suo.SetLocation(*s)
	}
	return suo
}

// ClearLocation clears the value of the "location" field.
func (suo *SessionUpdateOne) ClearLocation() *SessionUpdateOne {
	suo.mutation.ClearLocation()
	return suo
}

// SetLoginMethod sets the "login_method" field.
func (suo *SessionUpdateOne) SetLoginMethod(s string) *SessionUpdateOne {
	suo.mutation.SetLoginMethod(s)
	return suo
}

// SetNillableLoginMethod sets the "login_method" field if the given value is not nil.
func (suo *SessionUpdateOne) SetNillableLoginMethod(s *string) *SessionUpdateOne {
	if s != nil {
		suo.SetLoginMethod(*s)
	}
	return suo
}

// ClearLoginMethod clears the value of the "login_method" field.
func (suo *SessionUpdateOne) ClearLoginMethod() *SessionUpdateOne {
	suo.mutation.ClearLoginMethod()
	return suo
}

// SetIsActive sets the "is_active" field.
func (suo *SessionUpdateOne) SetIsActive(b bool) *SessionUpdateOne {
	suo.mutation.SetIsActive(b)
	return suo
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (suo *SessionUpdateOne) SetNillableIsActive(b *bool) *SessionUpdateOne {
	if b != nil {
		suo.SetIsActive(*b)
	}
	return suo
}

// SetLastAccessAt sets the "last_access_at" field.
func (suo *SessionUpdateOne) SetLastAccessAt(i int64) *SessionUpdateOne {
	suo.mutation.ResetLastAccessAt()
	suo.mutation.SetLastAccessAt(i)
	return suo
}

// SetNillableLastAccessAt sets the "last_access_at" field if the given value is not nil.
func (suo *SessionUpdateOne) SetNillableLastAccessAt(i *int64) *SessionUpdateOne {
	if i != nil {
		suo.SetLastAccessAt(*i)
	}
	return suo
}

// AddLastAccessAt adds i to the "last_access_at" field.
func (suo *SessionUpdateOne) AddLastAccessAt(i int64) *SessionUpdateOne {
	suo.mutation.AddLastAccessAt(i)
	return suo
}

// ClearLastAccessAt clears the value of the "last_access_at" field.
func (suo *SessionUpdateOne) ClearLastAccessAt() *SessionUpdateOne {
	suo.mutation.ClearLastAccessAt()
	return suo
}

// SetExpiresAt sets the "expires_at" field.
func (suo *SessionUpdateOne) SetExpiresAt(i int64) *SessionUpdateOne {
	suo.mutation.ResetExpiresAt()
	suo.mutation.SetExpiresAt(i)
	return suo
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (suo *SessionUpdateOne) SetNillableExpiresAt(i *int64) *SessionUpdateOne {
	if i != nil {
		suo.SetExpiresAt(*i)
	}
	return suo
}

// AddExpiresAt adds i to the "expires_at" field.
func (suo *SessionUpdateOne) AddExpiresAt(i int64) *SessionUpdateOne {
	suo.mutation.AddExpiresAt(i)
	return suo
}

// ClearExpiresAt clears the value of the "expires_at" field.
func (suo *SessionUpdateOne) ClearExpiresAt() *SessionUpdateOne {
	suo.mutation.ClearExpiresAt()
	return suo
}

// Mutation returns the SessionMutation object of the builder.
func (suo *SessionUpdateOne) Mutation() *SessionMutation {
	return suo.mutation
}

// Where appends a list predicates to the SessionUpdate builder.
func (suo *SessionUpdateOne) Where(ps ...predicate.Session) *SessionUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SessionUpdateOne) Select(field string, fields ...string) *SessionUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Session entity.
func (suo *SessionUpdateOne) Save(ctx context.Context) (*Session, error) {
	suo.defaults()
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SessionUpdateOne) SaveX(ctx context.Context) *Session {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SessionUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SessionUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *SessionUpdateOne) defaults() {
	if _, ok := suo.mutation.UpdatedAt(); !ok && !suo.mutation.UpdatedAtCleared() {
		v := session.UpdateDefaultUpdatedAt()
		suo.mutation.SetUpdatedAt(v)
	}
}

func (suo *SessionUpdateOne) sqlSave(ctx context.Context) (_node *Session, err error) {
	_spec := sqlgraph.NewUpdateSpec(session.Table, session.Columns, sqlgraph.NewFieldSpec(session.FieldID, field.TypeString))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Session.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, session.FieldID)
		for _, f := range fields {
			if !session.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != session.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.UserID(); ok {
		_spec.SetField(session.FieldUserID, field.TypeString, value)
	}
	if suo.mutation.UserIDCleared() {
		_spec.ClearField(session.FieldUserID, field.TypeString)
	}
	if suo.mutation.CreatedAtCleared() {
		_spec.ClearField(session.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.SetField(session.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := suo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(session.FieldUpdatedAt, field.TypeInt64, value)
	}
	if suo.mutation.UpdatedAtCleared() {
		_spec.ClearField(session.FieldUpdatedAt, field.TypeInt64)
	}
	if value, ok := suo.mutation.TokenID(); ok {
		_spec.SetField(session.FieldTokenID, field.TypeString, value)
	}
	if value, ok := suo.mutation.DeviceInfo(); ok {
		_spec.SetField(session.FieldDeviceInfo, field.TypeJSON, value)
	}
	if suo.mutation.DeviceInfoCleared() {
		_spec.ClearField(session.FieldDeviceInfo, field.TypeJSON)
	}
	if value, ok := suo.mutation.IPAddress(); ok {
		_spec.SetField(session.FieldIPAddress, field.TypeString, value)
	}
	if suo.mutation.IPAddressCleared() {
		_spec.ClearField(session.FieldIPAddress, field.TypeString)
	}
	if value, ok := suo.mutation.UserAgent(); ok {
		_spec.SetField(session.FieldUserAgent, field.TypeString, value)
	}
	if suo.mutation.UserAgentCleared() {
		_spec.ClearField(session.FieldUserAgent, field.TypeString)
	}
	if value, ok := suo.mutation.Location(); ok {
		_spec.SetField(session.FieldLocation, field.TypeString, value)
	}
	if suo.mutation.LocationCleared() {
		_spec.ClearField(session.FieldLocation, field.TypeString)
	}
	if value, ok := suo.mutation.LoginMethod(); ok {
		_spec.SetField(session.FieldLoginMethod, field.TypeString, value)
	}
	if suo.mutation.LoginMethodCleared() {
		_spec.ClearField(session.FieldLoginMethod, field.TypeString)
	}
	if value, ok := suo.mutation.IsActive(); ok {
		_spec.SetField(session.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := suo.mutation.LastAccessAt(); ok {
		_spec.SetField(session.FieldLastAccessAt, field.TypeInt64, value)
	}
	if value, ok := suo.mutation.AddedLastAccessAt(); ok {
		_spec.AddField(session.FieldLastAccessAt, field.TypeInt64, value)
	}
	if suo.mutation.LastAccessAtCleared() {
		_spec.ClearField(session.FieldLastAccessAt, field.TypeInt64)
	}
	if value, ok := suo.mutation.ExpiresAt(); ok {
		_spec.SetField(session.FieldExpiresAt, field.TypeInt64, value)
	}
	if value, ok := suo.mutation.AddedExpiresAt(); ok {
		_spec.AddField(session.FieldExpiresAt, field.TypeInt64, value)
	}
	if suo.mutation.ExpiresAtCleared() {
		_spec.ClearField(session.FieldExpiresAt, field.TypeInt64)
	}
	_node = &Session{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{session.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
