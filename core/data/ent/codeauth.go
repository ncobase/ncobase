// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"ncobase/core/data/ent/codeauth"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// CodeAuth is the model entity for the CodeAuth schema.
type CodeAuth struct {
	config `json:"-"`
	// ID of the ent.
	// primary key
	ID string `json:"id,omitempty"`
	// code
	Code string `json:"code,omitempty"`
	// email
	Email string `json:"email,omitempty"`
	// is logged
	Logged bool `json:"logged,omitempty"`
	// created at
	CreatedAt time.Time `json:"created_at,omitempty"`
	// updated at
	UpdatedAt    time.Time `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CodeAuth) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case codeauth.FieldLogged:
			values[i] = new(sql.NullBool)
		case codeauth.FieldID, codeauth.FieldCode, codeauth.FieldEmail:
			values[i] = new(sql.NullString)
		case codeauth.FieldCreatedAt, codeauth.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CodeAuth fields.
func (ca *CodeAuth) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case codeauth.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				ca.ID = value.String
			}
		case codeauth.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				ca.Code = value.String
			}
		case codeauth.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				ca.Email = value.String
			}
		case codeauth.FieldLogged:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field logged", values[i])
			} else if value.Valid {
				ca.Logged = value.Bool
			}
		case codeauth.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ca.CreatedAt = value.Time
			}
		case codeauth.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ca.UpdatedAt = value.Time
			}
		default:
			ca.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CodeAuth.
// This includes values selected through modifiers, order, etc.
func (ca *CodeAuth) Value(name string) (ent.Value, error) {
	return ca.selectValues.Get(name)
}

// Update returns a builder for updating this CodeAuth.
// Note that you need to call CodeAuth.Unwrap() before calling this method if this CodeAuth
// was returned from a transaction, and the transaction was committed or rolled back.
func (ca *CodeAuth) Update() *CodeAuthUpdateOne {
	return NewCodeAuthClient(ca.config).UpdateOne(ca)
}

// Unwrap unwraps the CodeAuth entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ca *CodeAuth) Unwrap() *CodeAuth {
	_tx, ok := ca.config.driver.(*txDriver)
	if !ok {
		panic("ent: CodeAuth is not a transactional entity")
	}
	ca.config.driver = _tx.drv
	return ca
}

// String implements the fmt.Stringer.
func (ca *CodeAuth) String() string {
	var builder strings.Builder
	builder.WriteString("CodeAuth(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ca.ID))
	builder.WriteString("code=")
	builder.WriteString(ca.Code)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(ca.Email)
	builder.WriteString(", ")
	builder.WriteString("logged=")
	builder.WriteString(fmt.Sprintf("%v", ca.Logged))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ca.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ca.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// CodeAuths is a parsable slice of CodeAuth.
type CodeAuths []*CodeAuth
