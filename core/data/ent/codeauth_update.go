// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/core/data/ent/codeauth"
	"ncobase/core/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CodeAuthUpdate is the builder for updating CodeAuth entities.
type CodeAuthUpdate struct {
	config
	hooks    []Hook
	mutation *CodeAuthMutation
}

// Where appends a list predicates to the CodeAuthUpdate builder.
func (cau *CodeAuthUpdate) Where(ps ...predicate.CodeAuth) *CodeAuthUpdate {
	cau.mutation.Where(ps...)
	return cau
}

// SetCode sets the "code" field.
func (cau *CodeAuthUpdate) SetCode(s string) *CodeAuthUpdate {
	cau.mutation.SetCode(s)
	return cau
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (cau *CodeAuthUpdate) SetNillableCode(s *string) *CodeAuthUpdate {
	if s != nil {
		cau.SetCode(*s)
	}
	return cau
}

// ClearCode clears the value of the "code" field.
func (cau *CodeAuthUpdate) ClearCode() *CodeAuthUpdate {
	cau.mutation.ClearCode()
	return cau
}

// SetEmail sets the "email" field.
func (cau *CodeAuthUpdate) SetEmail(s string) *CodeAuthUpdate {
	cau.mutation.SetEmail(s)
	return cau
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (cau *CodeAuthUpdate) SetNillableEmail(s *string) *CodeAuthUpdate {
	if s != nil {
		cau.SetEmail(*s)
	}
	return cau
}

// ClearEmail clears the value of the "email" field.
func (cau *CodeAuthUpdate) ClearEmail() *CodeAuthUpdate {
	cau.mutation.ClearEmail()
	return cau
}

// SetLogged sets the "logged" field.
func (cau *CodeAuthUpdate) SetLogged(b bool) *CodeAuthUpdate {
	cau.mutation.SetLogged(b)
	return cau
}

// SetNillableLogged sets the "logged" field if the given value is not nil.
func (cau *CodeAuthUpdate) SetNillableLogged(b *bool) *CodeAuthUpdate {
	if b != nil {
		cau.SetLogged(*b)
	}
	return cau
}

// ClearLogged clears the value of the "logged" field.
func (cau *CodeAuthUpdate) ClearLogged() *CodeAuthUpdate {
	cau.mutation.ClearLogged()
	return cau
}

// SetUpdatedAt sets the "updated_at" field.
func (cau *CodeAuthUpdate) SetUpdatedAt(t time.Time) *CodeAuthUpdate {
	cau.mutation.SetUpdatedAt(t)
	return cau
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (cau *CodeAuthUpdate) ClearUpdatedAt() *CodeAuthUpdate {
	cau.mutation.ClearUpdatedAt()
	return cau
}

// Mutation returns the CodeAuthMutation object of the builder.
func (cau *CodeAuthUpdate) Mutation() *CodeAuthMutation {
	return cau.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cau *CodeAuthUpdate) Save(ctx context.Context) (int, error) {
	cau.defaults()
	return withHooks(ctx, cau.sqlSave, cau.mutation, cau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cau *CodeAuthUpdate) SaveX(ctx context.Context) int {
	affected, err := cau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cau *CodeAuthUpdate) Exec(ctx context.Context) error {
	_, err := cau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cau *CodeAuthUpdate) ExecX(ctx context.Context) {
	if err := cau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cau *CodeAuthUpdate) defaults() {
	if _, ok := cau.mutation.UpdatedAt(); !ok && !cau.mutation.UpdatedAtCleared() {
		v := codeauth.UpdateDefaultUpdatedAt()
		cau.mutation.SetUpdatedAt(v)
	}
}

func (cau *CodeAuthUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(codeauth.Table, codeauth.Columns, sqlgraph.NewFieldSpec(codeauth.FieldID, field.TypeString))
	if ps := cau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cau.mutation.Code(); ok {
		_spec.SetField(codeauth.FieldCode, field.TypeString, value)
	}
	if cau.mutation.CodeCleared() {
		_spec.ClearField(codeauth.FieldCode, field.TypeString)
	}
	if value, ok := cau.mutation.Email(); ok {
		_spec.SetField(codeauth.FieldEmail, field.TypeString, value)
	}
	if cau.mutation.EmailCleared() {
		_spec.ClearField(codeauth.FieldEmail, field.TypeString)
	}
	if value, ok := cau.mutation.Logged(); ok {
		_spec.SetField(codeauth.FieldLogged, field.TypeBool, value)
	}
	if cau.mutation.LoggedCleared() {
		_spec.ClearField(codeauth.FieldLogged, field.TypeBool)
	}
	if cau.mutation.CreatedAtCleared() {
		_spec.ClearField(codeauth.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := cau.mutation.UpdatedAt(); ok {
		_spec.SetField(codeauth.FieldUpdatedAt, field.TypeTime, value)
	}
	if cau.mutation.UpdatedAtCleared() {
		_spec.ClearField(codeauth.FieldUpdatedAt, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{codeauth.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cau.mutation.done = true
	return n, nil
}

// CodeAuthUpdateOne is the builder for updating a single CodeAuth entity.
type CodeAuthUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CodeAuthMutation
}

// SetCode sets the "code" field.
func (cauo *CodeAuthUpdateOne) SetCode(s string) *CodeAuthUpdateOne {
	cauo.mutation.SetCode(s)
	return cauo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (cauo *CodeAuthUpdateOne) SetNillableCode(s *string) *CodeAuthUpdateOne {
	if s != nil {
		cauo.SetCode(*s)
	}
	return cauo
}

// ClearCode clears the value of the "code" field.
func (cauo *CodeAuthUpdateOne) ClearCode() *CodeAuthUpdateOne {
	cauo.mutation.ClearCode()
	return cauo
}

// SetEmail sets the "email" field.
func (cauo *CodeAuthUpdateOne) SetEmail(s string) *CodeAuthUpdateOne {
	cauo.mutation.SetEmail(s)
	return cauo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (cauo *CodeAuthUpdateOne) SetNillableEmail(s *string) *CodeAuthUpdateOne {
	if s != nil {
		cauo.SetEmail(*s)
	}
	return cauo
}

// ClearEmail clears the value of the "email" field.
func (cauo *CodeAuthUpdateOne) ClearEmail() *CodeAuthUpdateOne {
	cauo.mutation.ClearEmail()
	return cauo
}

// SetLogged sets the "logged" field.
func (cauo *CodeAuthUpdateOne) SetLogged(b bool) *CodeAuthUpdateOne {
	cauo.mutation.SetLogged(b)
	return cauo
}

// SetNillableLogged sets the "logged" field if the given value is not nil.
func (cauo *CodeAuthUpdateOne) SetNillableLogged(b *bool) *CodeAuthUpdateOne {
	if b != nil {
		cauo.SetLogged(*b)
	}
	return cauo
}

// ClearLogged clears the value of the "logged" field.
func (cauo *CodeAuthUpdateOne) ClearLogged() *CodeAuthUpdateOne {
	cauo.mutation.ClearLogged()
	return cauo
}

// SetUpdatedAt sets the "updated_at" field.
func (cauo *CodeAuthUpdateOne) SetUpdatedAt(t time.Time) *CodeAuthUpdateOne {
	cauo.mutation.SetUpdatedAt(t)
	return cauo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (cauo *CodeAuthUpdateOne) ClearUpdatedAt() *CodeAuthUpdateOne {
	cauo.mutation.ClearUpdatedAt()
	return cauo
}

// Mutation returns the CodeAuthMutation object of the builder.
func (cauo *CodeAuthUpdateOne) Mutation() *CodeAuthMutation {
	return cauo.mutation
}

// Where appends a list predicates to the CodeAuthUpdate builder.
func (cauo *CodeAuthUpdateOne) Where(ps ...predicate.CodeAuth) *CodeAuthUpdateOne {
	cauo.mutation.Where(ps...)
	return cauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cauo *CodeAuthUpdateOne) Select(field string, fields ...string) *CodeAuthUpdateOne {
	cauo.fields = append([]string{field}, fields...)
	return cauo
}

// Save executes the query and returns the updated CodeAuth entity.
func (cauo *CodeAuthUpdateOne) Save(ctx context.Context) (*CodeAuth, error) {
	cauo.defaults()
	return withHooks(ctx, cauo.sqlSave, cauo.mutation, cauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cauo *CodeAuthUpdateOne) SaveX(ctx context.Context) *CodeAuth {
	node, err := cauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cauo *CodeAuthUpdateOne) Exec(ctx context.Context) error {
	_, err := cauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cauo *CodeAuthUpdateOne) ExecX(ctx context.Context) {
	if err := cauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cauo *CodeAuthUpdateOne) defaults() {
	if _, ok := cauo.mutation.UpdatedAt(); !ok && !cauo.mutation.UpdatedAtCleared() {
		v := codeauth.UpdateDefaultUpdatedAt()
		cauo.mutation.SetUpdatedAt(v)
	}
}

func (cauo *CodeAuthUpdateOne) sqlSave(ctx context.Context) (_node *CodeAuth, err error) {
	_spec := sqlgraph.NewUpdateSpec(codeauth.Table, codeauth.Columns, sqlgraph.NewFieldSpec(codeauth.FieldID, field.TypeString))
	id, ok := cauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CodeAuth.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, codeauth.FieldID)
		for _, f := range fields {
			if !codeauth.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != codeauth.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cauo.mutation.Code(); ok {
		_spec.SetField(codeauth.FieldCode, field.TypeString, value)
	}
	if cauo.mutation.CodeCleared() {
		_spec.ClearField(codeauth.FieldCode, field.TypeString)
	}
	if value, ok := cauo.mutation.Email(); ok {
		_spec.SetField(codeauth.FieldEmail, field.TypeString, value)
	}
	if cauo.mutation.EmailCleared() {
		_spec.ClearField(codeauth.FieldEmail, field.TypeString)
	}
	if value, ok := cauo.mutation.Logged(); ok {
		_spec.SetField(codeauth.FieldLogged, field.TypeBool, value)
	}
	if cauo.mutation.LoggedCleared() {
		_spec.ClearField(codeauth.FieldLogged, field.TypeBool)
	}
	if cauo.mutation.CreatedAtCleared() {
		_spec.ClearField(codeauth.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := cauo.mutation.UpdatedAt(); ok {
		_spec.SetField(codeauth.FieldUpdatedAt, field.TypeTime, value)
	}
	if cauo.mutation.UpdatedAtCleared() {
		_spec.ClearField(codeauth.FieldUpdatedAt, field.TypeTime)
	}
	_node = &CodeAuth{config: cauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{codeauth.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cauo.mutation.done = true
	return _node, nil
}
