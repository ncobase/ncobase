// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/core/data/ent/module"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ModuleCreate is the builder for creating a Module entity.
type ModuleCreate struct {
	config
	mutation *ModuleMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (mc *ModuleCreate) SetName(s string) *ModuleCreate {
	mc.mutation.SetName(s)
	return mc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (mc *ModuleCreate) SetNillableName(s *string) *ModuleCreate {
	if s != nil {
		mc.SetName(*s)
	}
	return mc
}

// SetTitle sets the "title" field.
func (mc *ModuleCreate) SetTitle(s string) *ModuleCreate {
	mc.mutation.SetTitle(s)
	return mc
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (mc *ModuleCreate) SetNillableTitle(s *string) *ModuleCreate {
	if s != nil {
		mc.SetTitle(*s)
	}
	return mc
}

// SetSlug sets the "slug" field.
func (mc *ModuleCreate) SetSlug(s string) *ModuleCreate {
	mc.mutation.SetSlug(s)
	return mc
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (mc *ModuleCreate) SetNillableSlug(s *string) *ModuleCreate {
	if s != nil {
		mc.SetSlug(*s)
	}
	return mc
}

// SetContent sets the "content" field.
func (mc *ModuleCreate) SetContent(s string) *ModuleCreate {
	mc.mutation.SetContent(s)
	return mc
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (mc *ModuleCreate) SetNillableContent(s *string) *ModuleCreate {
	if s != nil {
		mc.SetContent(*s)
	}
	return mc
}

// SetThumbnail sets the "thumbnail" field.
func (mc *ModuleCreate) SetThumbnail(s string) *ModuleCreate {
	mc.mutation.SetThumbnail(s)
	return mc
}

// SetNillableThumbnail sets the "thumbnail" field if the given value is not nil.
func (mc *ModuleCreate) SetNillableThumbnail(s *string) *ModuleCreate {
	if s != nil {
		mc.SetThumbnail(*s)
	}
	return mc
}

// SetTemp sets the "temp" field.
func (mc *ModuleCreate) SetTemp(b bool) *ModuleCreate {
	mc.mutation.SetTemp(b)
	return mc
}

// SetNillableTemp sets the "temp" field if the given value is not nil.
func (mc *ModuleCreate) SetNillableTemp(b *bool) *ModuleCreate {
	if b != nil {
		mc.SetTemp(*b)
	}
	return mc
}

// SetMarkdown sets the "markdown" field.
func (mc *ModuleCreate) SetMarkdown(b bool) *ModuleCreate {
	mc.mutation.SetMarkdown(b)
	return mc
}

// SetNillableMarkdown sets the "markdown" field if the given value is not nil.
func (mc *ModuleCreate) SetNillableMarkdown(b *bool) *ModuleCreate {
	if b != nil {
		mc.SetMarkdown(*b)
	}
	return mc
}

// SetPrivate sets the "private" field.
func (mc *ModuleCreate) SetPrivate(b bool) *ModuleCreate {
	mc.mutation.SetPrivate(b)
	return mc
}

// SetNillablePrivate sets the "private" field if the given value is not nil.
func (mc *ModuleCreate) SetNillablePrivate(b *bool) *ModuleCreate {
	if b != nil {
		mc.SetPrivate(*b)
	}
	return mc
}

// SetStatus sets the "status" field.
func (mc *ModuleCreate) SetStatus(i int) *ModuleCreate {
	mc.mutation.SetStatus(i)
	return mc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mc *ModuleCreate) SetNillableStatus(i *int) *ModuleCreate {
	if i != nil {
		mc.SetStatus(*i)
	}
	return mc
}

// SetReleased sets the "released" field.
func (mc *ModuleCreate) SetReleased(t time.Time) *ModuleCreate {
	mc.mutation.SetReleased(t)
	return mc
}

// SetNillableReleased sets the "released" field if the given value is not nil.
func (mc *ModuleCreate) SetNillableReleased(t *time.Time) *ModuleCreate {
	if t != nil {
		mc.SetReleased(*t)
	}
	return mc
}

// SetCreatedBy sets the "created_by" field.
func (mc *ModuleCreate) SetCreatedBy(s string) *ModuleCreate {
	mc.mutation.SetCreatedBy(s)
	return mc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (mc *ModuleCreate) SetNillableCreatedBy(s *string) *ModuleCreate {
	if s != nil {
		mc.SetCreatedBy(*s)
	}
	return mc
}

// SetUpdatedBy sets the "updated_by" field.
func (mc *ModuleCreate) SetUpdatedBy(s string) *ModuleCreate {
	mc.mutation.SetUpdatedBy(s)
	return mc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (mc *ModuleCreate) SetNillableUpdatedBy(s *string) *ModuleCreate {
	if s != nil {
		mc.SetUpdatedBy(*s)
	}
	return mc
}

// SetCreatedAt sets the "created_at" field.
func (mc *ModuleCreate) SetCreatedAt(t time.Time) *ModuleCreate {
	mc.mutation.SetCreatedAt(t)
	return mc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mc *ModuleCreate) SetNillableCreatedAt(t *time.Time) *ModuleCreate {
	if t != nil {
		mc.SetCreatedAt(*t)
	}
	return mc
}

// SetUpdatedAt sets the "updated_at" field.
func (mc *ModuleCreate) SetUpdatedAt(t time.Time) *ModuleCreate {
	mc.mutation.SetUpdatedAt(t)
	return mc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mc *ModuleCreate) SetNillableUpdatedAt(t *time.Time) *ModuleCreate {
	if t != nil {
		mc.SetUpdatedAt(*t)
	}
	return mc
}

// SetID sets the "id" field.
func (mc *ModuleCreate) SetID(s string) *ModuleCreate {
	mc.mutation.SetID(s)
	return mc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (mc *ModuleCreate) SetNillableID(s *string) *ModuleCreate {
	if s != nil {
		mc.SetID(*s)
	}
	return mc
}

// Mutation returns the ModuleMutation object of the builder.
func (mc *ModuleCreate) Mutation() *ModuleMutation {
	return mc.mutation
}

// Save creates the Module in the database.
func (mc *ModuleCreate) Save(ctx context.Context) (*Module, error) {
	mc.defaults()
	return withHooks(ctx, mc.sqlSave, mc.mutation, mc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mc *ModuleCreate) SaveX(ctx context.Context) *Module {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mc *ModuleCreate) Exec(ctx context.Context) error {
	_, err := mc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mc *ModuleCreate) ExecX(ctx context.Context) {
	if err := mc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mc *ModuleCreate) defaults() {
	if _, ok := mc.mutation.Temp(); !ok {
		v := module.DefaultTemp
		mc.mutation.SetTemp(v)
	}
	if _, ok := mc.mutation.Markdown(); !ok {
		v := module.DefaultMarkdown
		mc.mutation.SetMarkdown(v)
	}
	if _, ok := mc.mutation.Private(); !ok {
		v := module.DefaultPrivate
		mc.mutation.SetPrivate(v)
	}
	if _, ok := mc.mutation.Status(); !ok {
		v := module.DefaultStatus
		mc.mutation.SetStatus(v)
	}
	if _, ok := mc.mutation.CreatedAt(); !ok {
		v := module.DefaultCreatedAt()
		mc.mutation.SetCreatedAt(v)
	}
	if _, ok := mc.mutation.UpdatedAt(); !ok {
		v := module.DefaultUpdatedAt()
		mc.mutation.SetUpdatedAt(v)
	}
	if _, ok := mc.mutation.ID(); !ok {
		v := module.DefaultID()
		mc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mc *ModuleCreate) check() error {
	if _, ok := mc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Module.status"`)}
	}
	if v, ok := mc.mutation.CreatedBy(); ok {
		if err := module.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "Module.created_by": %w`, err)}
		}
	}
	if v, ok := mc.mutation.UpdatedBy(); ok {
		if err := module.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "Module.updated_by": %w`, err)}
		}
	}
	if v, ok := mc.mutation.ID(); ok {
		if err := module.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Module.id": %w`, err)}
		}
	}
	return nil
}

func (mc *ModuleCreate) sqlSave(ctx context.Context) (*Module, error) {
	if err := mc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Module.ID type: %T", _spec.ID.Value)
		}
	}
	mc.mutation.id = &_node.ID
	mc.mutation.done = true
	return _node, nil
}

func (mc *ModuleCreate) createSpec() (*Module, *sqlgraph.CreateSpec) {
	var (
		_node = &Module{config: mc.config}
		_spec = sqlgraph.NewCreateSpec(module.Table, sqlgraph.NewFieldSpec(module.FieldID, field.TypeString))
	)
	if id, ok := mc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := mc.mutation.Name(); ok {
		_spec.SetField(module.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := mc.mutation.Title(); ok {
		_spec.SetField(module.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := mc.mutation.Slug(); ok {
		_spec.SetField(module.FieldSlug, field.TypeString, value)
		_node.Slug = value
	}
	if value, ok := mc.mutation.Content(); ok {
		_spec.SetField(module.FieldContent, field.TypeString, value)
		_node.Content = value
	}
	if value, ok := mc.mutation.Thumbnail(); ok {
		_spec.SetField(module.FieldThumbnail, field.TypeString, value)
		_node.Thumbnail = value
	}
	if value, ok := mc.mutation.Temp(); ok {
		_spec.SetField(module.FieldTemp, field.TypeBool, value)
		_node.Temp = value
	}
	if value, ok := mc.mutation.Markdown(); ok {
		_spec.SetField(module.FieldMarkdown, field.TypeBool, value)
		_node.Markdown = value
	}
	if value, ok := mc.mutation.Private(); ok {
		_spec.SetField(module.FieldPrivate, field.TypeBool, value)
		_node.Private = value
	}
	if value, ok := mc.mutation.Status(); ok {
		_spec.SetField(module.FieldStatus, field.TypeInt, value)
		_node.Status = value
	}
	if value, ok := mc.mutation.Released(); ok {
		_spec.SetField(module.FieldReleased, field.TypeTime, value)
		_node.Released = value
	}
	if value, ok := mc.mutation.CreatedBy(); ok {
		_spec.SetField(module.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := mc.mutation.UpdatedBy(); ok {
		_spec.SetField(module.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := mc.mutation.CreatedAt(); ok {
		_spec.SetField(module.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := mc.mutation.UpdatedAt(); ok {
		_spec.SetField(module.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// ModuleCreateBulk is the builder for creating many Module entities in bulk.
type ModuleCreateBulk struct {
	config
	err      error
	builders []*ModuleCreate
}

// Save creates the Module entities in the database.
func (mcb *ModuleCreateBulk) Save(ctx context.Context) ([]*Module, error) {
	if mcb.err != nil {
		return nil, mcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mcb.builders))
	nodes := make([]*Module, len(mcb.builders))
	mutators := make([]Mutator, len(mcb.builders))
	for i := range mcb.builders {
		func(i int, root context.Context) {
			builder := mcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ModuleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mcb *ModuleCreateBulk) SaveX(ctx context.Context) []*Module {
	v, err := mcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mcb *ModuleCreateBulk) Exec(ctx context.Context) error {
	_, err := mcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcb *ModuleCreateBulk) ExecX(ctx context.Context) {
	if err := mcb.Exec(ctx); err != nil {
		panic(err)
	}
}
