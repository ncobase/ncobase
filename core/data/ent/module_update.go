// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/core/data/ent/module"
	"ncobase/core/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ModuleUpdate is the builder for updating Module entities.
type ModuleUpdate struct {
	config
	hooks    []Hook
	mutation *ModuleMutation
}

// Where appends a list predicates to the ModuleUpdate builder.
func (mu *ModuleUpdate) Where(ps ...predicate.Module) *ModuleUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetName sets the "name" field.
func (mu *ModuleUpdate) SetName(s string) *ModuleUpdate {
	mu.mutation.SetName(s)
	return mu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (mu *ModuleUpdate) SetNillableName(s *string) *ModuleUpdate {
	if s != nil {
		mu.SetName(*s)
	}
	return mu
}

// ClearName clears the value of the "name" field.
func (mu *ModuleUpdate) ClearName() *ModuleUpdate {
	mu.mutation.ClearName()
	return mu
}

// SetTitle sets the "title" field.
func (mu *ModuleUpdate) SetTitle(s string) *ModuleUpdate {
	mu.mutation.SetTitle(s)
	return mu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (mu *ModuleUpdate) SetNillableTitle(s *string) *ModuleUpdate {
	if s != nil {
		mu.SetTitle(*s)
	}
	return mu
}

// ClearTitle clears the value of the "title" field.
func (mu *ModuleUpdate) ClearTitle() *ModuleUpdate {
	mu.mutation.ClearTitle()
	return mu
}

// SetSlug sets the "slug" field.
func (mu *ModuleUpdate) SetSlug(s string) *ModuleUpdate {
	mu.mutation.SetSlug(s)
	return mu
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (mu *ModuleUpdate) SetNillableSlug(s *string) *ModuleUpdate {
	if s != nil {
		mu.SetSlug(*s)
	}
	return mu
}

// ClearSlug clears the value of the "slug" field.
func (mu *ModuleUpdate) ClearSlug() *ModuleUpdate {
	mu.mutation.ClearSlug()
	return mu
}

// SetContent sets the "content" field.
func (mu *ModuleUpdate) SetContent(s string) *ModuleUpdate {
	mu.mutation.SetContent(s)
	return mu
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (mu *ModuleUpdate) SetNillableContent(s *string) *ModuleUpdate {
	if s != nil {
		mu.SetContent(*s)
	}
	return mu
}

// ClearContent clears the value of the "content" field.
func (mu *ModuleUpdate) ClearContent() *ModuleUpdate {
	mu.mutation.ClearContent()
	return mu
}

// SetThumbnail sets the "thumbnail" field.
func (mu *ModuleUpdate) SetThumbnail(s string) *ModuleUpdate {
	mu.mutation.SetThumbnail(s)
	return mu
}

// SetNillableThumbnail sets the "thumbnail" field if the given value is not nil.
func (mu *ModuleUpdate) SetNillableThumbnail(s *string) *ModuleUpdate {
	if s != nil {
		mu.SetThumbnail(*s)
	}
	return mu
}

// ClearThumbnail clears the value of the "thumbnail" field.
func (mu *ModuleUpdate) ClearThumbnail() *ModuleUpdate {
	mu.mutation.ClearThumbnail()
	return mu
}

// SetTemp sets the "temp" field.
func (mu *ModuleUpdate) SetTemp(b bool) *ModuleUpdate {
	mu.mutation.SetTemp(b)
	return mu
}

// SetNillableTemp sets the "temp" field if the given value is not nil.
func (mu *ModuleUpdate) SetNillableTemp(b *bool) *ModuleUpdate {
	if b != nil {
		mu.SetTemp(*b)
	}
	return mu
}

// ClearTemp clears the value of the "temp" field.
func (mu *ModuleUpdate) ClearTemp() *ModuleUpdate {
	mu.mutation.ClearTemp()
	return mu
}

// SetMarkdown sets the "markdown" field.
func (mu *ModuleUpdate) SetMarkdown(b bool) *ModuleUpdate {
	mu.mutation.SetMarkdown(b)
	return mu
}

// SetNillableMarkdown sets the "markdown" field if the given value is not nil.
func (mu *ModuleUpdate) SetNillableMarkdown(b *bool) *ModuleUpdate {
	if b != nil {
		mu.SetMarkdown(*b)
	}
	return mu
}

// ClearMarkdown clears the value of the "markdown" field.
func (mu *ModuleUpdate) ClearMarkdown() *ModuleUpdate {
	mu.mutation.ClearMarkdown()
	return mu
}

// SetPrivate sets the "private" field.
func (mu *ModuleUpdate) SetPrivate(b bool) *ModuleUpdate {
	mu.mutation.SetPrivate(b)
	return mu
}

// SetNillablePrivate sets the "private" field if the given value is not nil.
func (mu *ModuleUpdate) SetNillablePrivate(b *bool) *ModuleUpdate {
	if b != nil {
		mu.SetPrivate(*b)
	}
	return mu
}

// ClearPrivate clears the value of the "private" field.
func (mu *ModuleUpdate) ClearPrivate() *ModuleUpdate {
	mu.mutation.ClearPrivate()
	return mu
}

// SetStatus sets the "status" field.
func (mu *ModuleUpdate) SetStatus(i int) *ModuleUpdate {
	mu.mutation.ResetStatus()
	mu.mutation.SetStatus(i)
	return mu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mu *ModuleUpdate) SetNillableStatus(i *int) *ModuleUpdate {
	if i != nil {
		mu.SetStatus(*i)
	}
	return mu
}

// AddStatus adds i to the "status" field.
func (mu *ModuleUpdate) AddStatus(i int) *ModuleUpdate {
	mu.mutation.AddStatus(i)
	return mu
}

// SetReleased sets the "released" field.
func (mu *ModuleUpdate) SetReleased(t time.Time) *ModuleUpdate {
	mu.mutation.SetReleased(t)
	return mu
}

// SetNillableReleased sets the "released" field if the given value is not nil.
func (mu *ModuleUpdate) SetNillableReleased(t *time.Time) *ModuleUpdate {
	if t != nil {
		mu.SetReleased(*t)
	}
	return mu
}

// ClearReleased clears the value of the "released" field.
func (mu *ModuleUpdate) ClearReleased() *ModuleUpdate {
	mu.mutation.ClearReleased()
	return mu
}

// SetCreatedBy sets the "created_by" field.
func (mu *ModuleUpdate) SetCreatedBy(s string) *ModuleUpdate {
	mu.mutation.SetCreatedBy(s)
	return mu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (mu *ModuleUpdate) SetNillableCreatedBy(s *string) *ModuleUpdate {
	if s != nil {
		mu.SetCreatedBy(*s)
	}
	return mu
}

// ClearCreatedBy clears the value of the "created_by" field.
func (mu *ModuleUpdate) ClearCreatedBy() *ModuleUpdate {
	mu.mutation.ClearCreatedBy()
	return mu
}

// SetUpdatedBy sets the "updated_by" field.
func (mu *ModuleUpdate) SetUpdatedBy(s string) *ModuleUpdate {
	mu.mutation.SetUpdatedBy(s)
	return mu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (mu *ModuleUpdate) SetNillableUpdatedBy(s *string) *ModuleUpdate {
	if s != nil {
		mu.SetUpdatedBy(*s)
	}
	return mu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (mu *ModuleUpdate) ClearUpdatedBy() *ModuleUpdate {
	mu.mutation.ClearUpdatedBy()
	return mu
}

// SetUpdatedAt sets the "updated_at" field.
func (mu *ModuleUpdate) SetUpdatedAt(t time.Time) *ModuleUpdate {
	mu.mutation.SetUpdatedAt(t)
	return mu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (mu *ModuleUpdate) ClearUpdatedAt() *ModuleUpdate {
	mu.mutation.ClearUpdatedAt()
	return mu
}

// Mutation returns the ModuleMutation object of the builder.
func (mu *ModuleUpdate) Mutation() *ModuleMutation {
	return mu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *ModuleUpdate) Save(ctx context.Context) (int, error) {
	mu.defaults()
	return withHooks(ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *ModuleUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *ModuleUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *ModuleUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mu *ModuleUpdate) defaults() {
	if _, ok := mu.mutation.UpdatedAt(); !ok && !mu.mutation.UpdatedAtCleared() {
		v := module.UpdateDefaultUpdatedAt()
		mu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mu *ModuleUpdate) check() error {
	if v, ok := mu.mutation.CreatedBy(); ok {
		if err := module.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "Module.created_by": %w`, err)}
		}
	}
	if v, ok := mu.mutation.UpdatedBy(); ok {
		if err := module.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "Module.updated_by": %w`, err)}
		}
	}
	return nil
}

func (mu *ModuleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := mu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(module.Table, module.Columns, sqlgraph.NewFieldSpec(module.FieldID, field.TypeString))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.Name(); ok {
		_spec.SetField(module.FieldName, field.TypeString, value)
	}
	if mu.mutation.NameCleared() {
		_spec.ClearField(module.FieldName, field.TypeString)
	}
	if value, ok := mu.mutation.Title(); ok {
		_spec.SetField(module.FieldTitle, field.TypeString, value)
	}
	if mu.mutation.TitleCleared() {
		_spec.ClearField(module.FieldTitle, field.TypeString)
	}
	if value, ok := mu.mutation.Slug(); ok {
		_spec.SetField(module.FieldSlug, field.TypeString, value)
	}
	if mu.mutation.SlugCleared() {
		_spec.ClearField(module.FieldSlug, field.TypeString)
	}
	if value, ok := mu.mutation.Content(); ok {
		_spec.SetField(module.FieldContent, field.TypeString, value)
	}
	if mu.mutation.ContentCleared() {
		_spec.ClearField(module.FieldContent, field.TypeString)
	}
	if value, ok := mu.mutation.Thumbnail(); ok {
		_spec.SetField(module.FieldThumbnail, field.TypeString, value)
	}
	if mu.mutation.ThumbnailCleared() {
		_spec.ClearField(module.FieldThumbnail, field.TypeString)
	}
	if value, ok := mu.mutation.Temp(); ok {
		_spec.SetField(module.FieldTemp, field.TypeBool, value)
	}
	if mu.mutation.TempCleared() {
		_spec.ClearField(module.FieldTemp, field.TypeBool)
	}
	if value, ok := mu.mutation.Markdown(); ok {
		_spec.SetField(module.FieldMarkdown, field.TypeBool, value)
	}
	if mu.mutation.MarkdownCleared() {
		_spec.ClearField(module.FieldMarkdown, field.TypeBool)
	}
	if value, ok := mu.mutation.Private(); ok {
		_spec.SetField(module.FieldPrivate, field.TypeBool, value)
	}
	if mu.mutation.PrivateCleared() {
		_spec.ClearField(module.FieldPrivate, field.TypeBool)
	}
	if value, ok := mu.mutation.Status(); ok {
		_spec.SetField(module.FieldStatus, field.TypeInt, value)
	}
	if value, ok := mu.mutation.AddedStatus(); ok {
		_spec.AddField(module.FieldStatus, field.TypeInt, value)
	}
	if value, ok := mu.mutation.Released(); ok {
		_spec.SetField(module.FieldReleased, field.TypeTime, value)
	}
	if mu.mutation.ReleasedCleared() {
		_spec.ClearField(module.FieldReleased, field.TypeTime)
	}
	if value, ok := mu.mutation.CreatedBy(); ok {
		_spec.SetField(module.FieldCreatedBy, field.TypeString, value)
	}
	if mu.mutation.CreatedByCleared() {
		_spec.ClearField(module.FieldCreatedBy, field.TypeString)
	}
	if value, ok := mu.mutation.UpdatedBy(); ok {
		_spec.SetField(module.FieldUpdatedBy, field.TypeString, value)
	}
	if mu.mutation.UpdatedByCleared() {
		_spec.ClearField(module.FieldUpdatedBy, field.TypeString)
	}
	if mu.mutation.CreatedAtCleared() {
		_spec.ClearField(module.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := mu.mutation.UpdatedAt(); ok {
		_spec.SetField(module.FieldUpdatedAt, field.TypeTime, value)
	}
	if mu.mutation.UpdatedAtCleared() {
		_spec.ClearField(module.FieldUpdatedAt, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{module.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// ModuleUpdateOne is the builder for updating a single Module entity.
type ModuleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ModuleMutation
}

// SetName sets the "name" field.
func (muo *ModuleUpdateOne) SetName(s string) *ModuleUpdateOne {
	muo.mutation.SetName(s)
	return muo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (muo *ModuleUpdateOne) SetNillableName(s *string) *ModuleUpdateOne {
	if s != nil {
		muo.SetName(*s)
	}
	return muo
}

// ClearName clears the value of the "name" field.
func (muo *ModuleUpdateOne) ClearName() *ModuleUpdateOne {
	muo.mutation.ClearName()
	return muo
}

// SetTitle sets the "title" field.
func (muo *ModuleUpdateOne) SetTitle(s string) *ModuleUpdateOne {
	muo.mutation.SetTitle(s)
	return muo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (muo *ModuleUpdateOne) SetNillableTitle(s *string) *ModuleUpdateOne {
	if s != nil {
		muo.SetTitle(*s)
	}
	return muo
}

// ClearTitle clears the value of the "title" field.
func (muo *ModuleUpdateOne) ClearTitle() *ModuleUpdateOne {
	muo.mutation.ClearTitle()
	return muo
}

// SetSlug sets the "slug" field.
func (muo *ModuleUpdateOne) SetSlug(s string) *ModuleUpdateOne {
	muo.mutation.SetSlug(s)
	return muo
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (muo *ModuleUpdateOne) SetNillableSlug(s *string) *ModuleUpdateOne {
	if s != nil {
		muo.SetSlug(*s)
	}
	return muo
}

// ClearSlug clears the value of the "slug" field.
func (muo *ModuleUpdateOne) ClearSlug() *ModuleUpdateOne {
	muo.mutation.ClearSlug()
	return muo
}

// SetContent sets the "content" field.
func (muo *ModuleUpdateOne) SetContent(s string) *ModuleUpdateOne {
	muo.mutation.SetContent(s)
	return muo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (muo *ModuleUpdateOne) SetNillableContent(s *string) *ModuleUpdateOne {
	if s != nil {
		muo.SetContent(*s)
	}
	return muo
}

// ClearContent clears the value of the "content" field.
func (muo *ModuleUpdateOne) ClearContent() *ModuleUpdateOne {
	muo.mutation.ClearContent()
	return muo
}

// SetThumbnail sets the "thumbnail" field.
func (muo *ModuleUpdateOne) SetThumbnail(s string) *ModuleUpdateOne {
	muo.mutation.SetThumbnail(s)
	return muo
}

// SetNillableThumbnail sets the "thumbnail" field if the given value is not nil.
func (muo *ModuleUpdateOne) SetNillableThumbnail(s *string) *ModuleUpdateOne {
	if s != nil {
		muo.SetThumbnail(*s)
	}
	return muo
}

// ClearThumbnail clears the value of the "thumbnail" field.
func (muo *ModuleUpdateOne) ClearThumbnail() *ModuleUpdateOne {
	muo.mutation.ClearThumbnail()
	return muo
}

// SetTemp sets the "temp" field.
func (muo *ModuleUpdateOne) SetTemp(b bool) *ModuleUpdateOne {
	muo.mutation.SetTemp(b)
	return muo
}

// SetNillableTemp sets the "temp" field if the given value is not nil.
func (muo *ModuleUpdateOne) SetNillableTemp(b *bool) *ModuleUpdateOne {
	if b != nil {
		muo.SetTemp(*b)
	}
	return muo
}

// ClearTemp clears the value of the "temp" field.
func (muo *ModuleUpdateOne) ClearTemp() *ModuleUpdateOne {
	muo.mutation.ClearTemp()
	return muo
}

// SetMarkdown sets the "markdown" field.
func (muo *ModuleUpdateOne) SetMarkdown(b bool) *ModuleUpdateOne {
	muo.mutation.SetMarkdown(b)
	return muo
}

// SetNillableMarkdown sets the "markdown" field if the given value is not nil.
func (muo *ModuleUpdateOne) SetNillableMarkdown(b *bool) *ModuleUpdateOne {
	if b != nil {
		muo.SetMarkdown(*b)
	}
	return muo
}

// ClearMarkdown clears the value of the "markdown" field.
func (muo *ModuleUpdateOne) ClearMarkdown() *ModuleUpdateOne {
	muo.mutation.ClearMarkdown()
	return muo
}

// SetPrivate sets the "private" field.
func (muo *ModuleUpdateOne) SetPrivate(b bool) *ModuleUpdateOne {
	muo.mutation.SetPrivate(b)
	return muo
}

// SetNillablePrivate sets the "private" field if the given value is not nil.
func (muo *ModuleUpdateOne) SetNillablePrivate(b *bool) *ModuleUpdateOne {
	if b != nil {
		muo.SetPrivate(*b)
	}
	return muo
}

// ClearPrivate clears the value of the "private" field.
func (muo *ModuleUpdateOne) ClearPrivate() *ModuleUpdateOne {
	muo.mutation.ClearPrivate()
	return muo
}

// SetStatus sets the "status" field.
func (muo *ModuleUpdateOne) SetStatus(i int) *ModuleUpdateOne {
	muo.mutation.ResetStatus()
	muo.mutation.SetStatus(i)
	return muo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (muo *ModuleUpdateOne) SetNillableStatus(i *int) *ModuleUpdateOne {
	if i != nil {
		muo.SetStatus(*i)
	}
	return muo
}

// AddStatus adds i to the "status" field.
func (muo *ModuleUpdateOne) AddStatus(i int) *ModuleUpdateOne {
	muo.mutation.AddStatus(i)
	return muo
}

// SetReleased sets the "released" field.
func (muo *ModuleUpdateOne) SetReleased(t time.Time) *ModuleUpdateOne {
	muo.mutation.SetReleased(t)
	return muo
}

// SetNillableReleased sets the "released" field if the given value is not nil.
func (muo *ModuleUpdateOne) SetNillableReleased(t *time.Time) *ModuleUpdateOne {
	if t != nil {
		muo.SetReleased(*t)
	}
	return muo
}

// ClearReleased clears the value of the "released" field.
func (muo *ModuleUpdateOne) ClearReleased() *ModuleUpdateOne {
	muo.mutation.ClearReleased()
	return muo
}

// SetCreatedBy sets the "created_by" field.
func (muo *ModuleUpdateOne) SetCreatedBy(s string) *ModuleUpdateOne {
	muo.mutation.SetCreatedBy(s)
	return muo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (muo *ModuleUpdateOne) SetNillableCreatedBy(s *string) *ModuleUpdateOne {
	if s != nil {
		muo.SetCreatedBy(*s)
	}
	return muo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (muo *ModuleUpdateOne) ClearCreatedBy() *ModuleUpdateOne {
	muo.mutation.ClearCreatedBy()
	return muo
}

// SetUpdatedBy sets the "updated_by" field.
func (muo *ModuleUpdateOne) SetUpdatedBy(s string) *ModuleUpdateOne {
	muo.mutation.SetUpdatedBy(s)
	return muo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (muo *ModuleUpdateOne) SetNillableUpdatedBy(s *string) *ModuleUpdateOne {
	if s != nil {
		muo.SetUpdatedBy(*s)
	}
	return muo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (muo *ModuleUpdateOne) ClearUpdatedBy() *ModuleUpdateOne {
	muo.mutation.ClearUpdatedBy()
	return muo
}

// SetUpdatedAt sets the "updated_at" field.
func (muo *ModuleUpdateOne) SetUpdatedAt(t time.Time) *ModuleUpdateOne {
	muo.mutation.SetUpdatedAt(t)
	return muo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (muo *ModuleUpdateOne) ClearUpdatedAt() *ModuleUpdateOne {
	muo.mutation.ClearUpdatedAt()
	return muo
}

// Mutation returns the ModuleMutation object of the builder.
func (muo *ModuleUpdateOne) Mutation() *ModuleMutation {
	return muo.mutation
}

// Where appends a list predicates to the ModuleUpdate builder.
func (muo *ModuleUpdateOne) Where(ps ...predicate.Module) *ModuleUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *ModuleUpdateOne) Select(field string, fields ...string) *ModuleUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Module entity.
func (muo *ModuleUpdateOne) Save(ctx context.Context) (*Module, error) {
	muo.defaults()
	return withHooks(ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *ModuleUpdateOne) SaveX(ctx context.Context) *Module {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *ModuleUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *ModuleUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (muo *ModuleUpdateOne) defaults() {
	if _, ok := muo.mutation.UpdatedAt(); !ok && !muo.mutation.UpdatedAtCleared() {
		v := module.UpdateDefaultUpdatedAt()
		muo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (muo *ModuleUpdateOne) check() error {
	if v, ok := muo.mutation.CreatedBy(); ok {
		if err := module.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "Module.created_by": %w`, err)}
		}
	}
	if v, ok := muo.mutation.UpdatedBy(); ok {
		if err := module.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "Module.updated_by": %w`, err)}
		}
	}
	return nil
}

func (muo *ModuleUpdateOne) sqlSave(ctx context.Context) (_node *Module, err error) {
	if err := muo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(module.Table, module.Columns, sqlgraph.NewFieldSpec(module.FieldID, field.TypeString))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Module.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, module.FieldID)
		for _, f := range fields {
			if !module.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != module.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.Name(); ok {
		_spec.SetField(module.FieldName, field.TypeString, value)
	}
	if muo.mutation.NameCleared() {
		_spec.ClearField(module.FieldName, field.TypeString)
	}
	if value, ok := muo.mutation.Title(); ok {
		_spec.SetField(module.FieldTitle, field.TypeString, value)
	}
	if muo.mutation.TitleCleared() {
		_spec.ClearField(module.FieldTitle, field.TypeString)
	}
	if value, ok := muo.mutation.Slug(); ok {
		_spec.SetField(module.FieldSlug, field.TypeString, value)
	}
	if muo.mutation.SlugCleared() {
		_spec.ClearField(module.FieldSlug, field.TypeString)
	}
	if value, ok := muo.mutation.Content(); ok {
		_spec.SetField(module.FieldContent, field.TypeString, value)
	}
	if muo.mutation.ContentCleared() {
		_spec.ClearField(module.FieldContent, field.TypeString)
	}
	if value, ok := muo.mutation.Thumbnail(); ok {
		_spec.SetField(module.FieldThumbnail, field.TypeString, value)
	}
	if muo.mutation.ThumbnailCleared() {
		_spec.ClearField(module.FieldThumbnail, field.TypeString)
	}
	if value, ok := muo.mutation.Temp(); ok {
		_spec.SetField(module.FieldTemp, field.TypeBool, value)
	}
	if muo.mutation.TempCleared() {
		_spec.ClearField(module.FieldTemp, field.TypeBool)
	}
	if value, ok := muo.mutation.Markdown(); ok {
		_spec.SetField(module.FieldMarkdown, field.TypeBool, value)
	}
	if muo.mutation.MarkdownCleared() {
		_spec.ClearField(module.FieldMarkdown, field.TypeBool)
	}
	if value, ok := muo.mutation.Private(); ok {
		_spec.SetField(module.FieldPrivate, field.TypeBool, value)
	}
	if muo.mutation.PrivateCleared() {
		_spec.ClearField(module.FieldPrivate, field.TypeBool)
	}
	if value, ok := muo.mutation.Status(); ok {
		_spec.SetField(module.FieldStatus, field.TypeInt, value)
	}
	if value, ok := muo.mutation.AddedStatus(); ok {
		_spec.AddField(module.FieldStatus, field.TypeInt, value)
	}
	if value, ok := muo.mutation.Released(); ok {
		_spec.SetField(module.FieldReleased, field.TypeTime, value)
	}
	if muo.mutation.ReleasedCleared() {
		_spec.ClearField(module.FieldReleased, field.TypeTime)
	}
	if value, ok := muo.mutation.CreatedBy(); ok {
		_spec.SetField(module.FieldCreatedBy, field.TypeString, value)
	}
	if muo.mutation.CreatedByCleared() {
		_spec.ClearField(module.FieldCreatedBy, field.TypeString)
	}
	if value, ok := muo.mutation.UpdatedBy(); ok {
		_spec.SetField(module.FieldUpdatedBy, field.TypeString, value)
	}
	if muo.mutation.UpdatedByCleared() {
		_spec.ClearField(module.FieldUpdatedBy, field.TypeString)
	}
	if muo.mutation.CreatedAtCleared() {
		_spec.ClearField(module.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := muo.mutation.UpdatedAt(); ok {
		_spec.SetField(module.FieldUpdatedAt, field.TypeTime, value)
	}
	if muo.mutation.UpdatedAtCleared() {
		_spec.ClearField(module.FieldUpdatedAt, field.TypeTime)
	}
	_node = &Module{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{module.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}
