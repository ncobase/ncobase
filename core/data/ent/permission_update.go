// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/core/data/ent/permission"
	"ncobase/core/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PermissionUpdate is the builder for updating Permission entities.
type PermissionUpdate struct {
	config
	hooks    []Hook
	mutation *PermissionMutation
}

// Where appends a list predicates to the PermissionUpdate builder.
func (pu *PermissionUpdate) Where(ps ...predicate.Permission) *PermissionUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetName sets the "name" field.
func (pu *PermissionUpdate) SetName(s string) *PermissionUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pu *PermissionUpdate) SetNillableName(s *string) *PermissionUpdate {
	if s != nil {
		pu.SetName(*s)
	}
	return pu
}

// ClearName clears the value of the "name" field.
func (pu *PermissionUpdate) ClearName() *PermissionUpdate {
	pu.mutation.ClearName()
	return pu
}

// SetAction sets the "action" field.
func (pu *PermissionUpdate) SetAction(s string) *PermissionUpdate {
	pu.mutation.SetAction(s)
	return pu
}

// SetNillableAction sets the "action" field if the given value is not nil.
func (pu *PermissionUpdate) SetNillableAction(s *string) *PermissionUpdate {
	if s != nil {
		pu.SetAction(*s)
	}
	return pu
}

// ClearAction clears the value of the "action" field.
func (pu *PermissionUpdate) ClearAction() *PermissionUpdate {
	pu.mutation.ClearAction()
	return pu
}

// SetSubject sets the "subject" field.
func (pu *PermissionUpdate) SetSubject(s string) *PermissionUpdate {
	pu.mutation.SetSubject(s)
	return pu
}

// SetNillableSubject sets the "subject" field if the given value is not nil.
func (pu *PermissionUpdate) SetNillableSubject(s *string) *PermissionUpdate {
	if s != nil {
		pu.SetSubject(*s)
	}
	return pu
}

// ClearSubject clears the value of the "subject" field.
func (pu *PermissionUpdate) ClearSubject() *PermissionUpdate {
	pu.mutation.ClearSubject()
	return pu
}

// SetDescription sets the "description" field.
func (pu *PermissionUpdate) SetDescription(s string) *PermissionUpdate {
	pu.mutation.SetDescription(s)
	return pu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pu *PermissionUpdate) SetNillableDescription(s *string) *PermissionUpdate {
	if s != nil {
		pu.SetDescription(*s)
	}
	return pu
}

// ClearDescription clears the value of the "description" field.
func (pu *PermissionUpdate) ClearDescription() *PermissionUpdate {
	pu.mutation.ClearDescription()
	return pu
}

// SetDefault sets the "default" field.
func (pu *PermissionUpdate) SetDefault(b bool) *PermissionUpdate {
	pu.mutation.SetDefault(b)
	return pu
}

// SetNillableDefault sets the "default" field if the given value is not nil.
func (pu *PermissionUpdate) SetNillableDefault(b *bool) *PermissionUpdate {
	if b != nil {
		pu.SetDefault(*b)
	}
	return pu
}

// ClearDefault clears the value of the "default" field.
func (pu *PermissionUpdate) ClearDefault() *PermissionUpdate {
	pu.mutation.ClearDefault()
	return pu
}

// SetDisabled sets the "disabled" field.
func (pu *PermissionUpdate) SetDisabled(b bool) *PermissionUpdate {
	pu.mutation.SetDisabled(b)
	return pu
}

// SetNillableDisabled sets the "disabled" field if the given value is not nil.
func (pu *PermissionUpdate) SetNillableDisabled(b *bool) *PermissionUpdate {
	if b != nil {
		pu.SetDisabled(*b)
	}
	return pu
}

// ClearDisabled clears the value of the "disabled" field.
func (pu *PermissionUpdate) ClearDisabled() *PermissionUpdate {
	pu.mutation.ClearDisabled()
	return pu
}

// SetExtras sets the "extras" field.
func (pu *PermissionUpdate) SetExtras(m map[string]interface{}) *PermissionUpdate {
	pu.mutation.SetExtras(m)
	return pu
}

// ClearExtras clears the value of the "extras" field.
func (pu *PermissionUpdate) ClearExtras() *PermissionUpdate {
	pu.mutation.ClearExtras()
	return pu
}

// SetCreatedBy sets the "created_by" field.
func (pu *PermissionUpdate) SetCreatedBy(s string) *PermissionUpdate {
	pu.mutation.SetCreatedBy(s)
	return pu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (pu *PermissionUpdate) SetNillableCreatedBy(s *string) *PermissionUpdate {
	if s != nil {
		pu.SetCreatedBy(*s)
	}
	return pu
}

// ClearCreatedBy clears the value of the "created_by" field.
func (pu *PermissionUpdate) ClearCreatedBy() *PermissionUpdate {
	pu.mutation.ClearCreatedBy()
	return pu
}

// SetUpdatedBy sets the "updated_by" field.
func (pu *PermissionUpdate) SetUpdatedBy(s string) *PermissionUpdate {
	pu.mutation.SetUpdatedBy(s)
	return pu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (pu *PermissionUpdate) SetNillableUpdatedBy(s *string) *PermissionUpdate {
	if s != nil {
		pu.SetUpdatedBy(*s)
	}
	return pu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (pu *PermissionUpdate) ClearUpdatedBy() *PermissionUpdate {
	pu.mutation.ClearUpdatedBy()
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *PermissionUpdate) SetUpdatedAt(t time.Time) *PermissionUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (pu *PermissionUpdate) ClearUpdatedAt() *PermissionUpdate {
	pu.mutation.ClearUpdatedAt()
	return pu
}

// Mutation returns the PermissionMutation object of the builder.
func (pu *PermissionUpdate) Mutation() *PermissionMutation {
	return pu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PermissionUpdate) Save(ctx context.Context) (int, error) {
	pu.defaults()
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PermissionUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PermissionUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PermissionUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *PermissionUpdate) defaults() {
	if _, ok := pu.mutation.UpdatedAt(); !ok && !pu.mutation.UpdatedAtCleared() {
		v := permission.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PermissionUpdate) check() error {
	if v, ok := pu.mutation.CreatedBy(); ok {
		if err := permission.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "Permission.created_by": %w`, err)}
		}
	}
	if v, ok := pu.mutation.UpdatedBy(); ok {
		if err := permission.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "Permission.updated_by": %w`, err)}
		}
	}
	return nil
}

func (pu *PermissionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(permission.Table, permission.Columns, sqlgraph.NewFieldSpec(permission.FieldID, field.TypeString))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(permission.FieldName, field.TypeString, value)
	}
	if pu.mutation.NameCleared() {
		_spec.ClearField(permission.FieldName, field.TypeString)
	}
	if value, ok := pu.mutation.Action(); ok {
		_spec.SetField(permission.FieldAction, field.TypeString, value)
	}
	if pu.mutation.ActionCleared() {
		_spec.ClearField(permission.FieldAction, field.TypeString)
	}
	if value, ok := pu.mutation.Subject(); ok {
		_spec.SetField(permission.FieldSubject, field.TypeString, value)
	}
	if pu.mutation.SubjectCleared() {
		_spec.ClearField(permission.FieldSubject, field.TypeString)
	}
	if value, ok := pu.mutation.Description(); ok {
		_spec.SetField(permission.FieldDescription, field.TypeString, value)
	}
	if pu.mutation.DescriptionCleared() {
		_spec.ClearField(permission.FieldDescription, field.TypeString)
	}
	if value, ok := pu.mutation.Default(); ok {
		_spec.SetField(permission.FieldDefault, field.TypeBool, value)
	}
	if pu.mutation.DefaultCleared() {
		_spec.ClearField(permission.FieldDefault, field.TypeBool)
	}
	if value, ok := pu.mutation.Disabled(); ok {
		_spec.SetField(permission.FieldDisabled, field.TypeBool, value)
	}
	if pu.mutation.DisabledCleared() {
		_spec.ClearField(permission.FieldDisabled, field.TypeBool)
	}
	if value, ok := pu.mutation.Extras(); ok {
		_spec.SetField(permission.FieldExtras, field.TypeJSON, value)
	}
	if pu.mutation.ExtrasCleared() {
		_spec.ClearField(permission.FieldExtras, field.TypeJSON)
	}
	if value, ok := pu.mutation.CreatedBy(); ok {
		_spec.SetField(permission.FieldCreatedBy, field.TypeString, value)
	}
	if pu.mutation.CreatedByCleared() {
		_spec.ClearField(permission.FieldCreatedBy, field.TypeString)
	}
	if value, ok := pu.mutation.UpdatedBy(); ok {
		_spec.SetField(permission.FieldUpdatedBy, field.TypeString, value)
	}
	if pu.mutation.UpdatedByCleared() {
		_spec.ClearField(permission.FieldUpdatedBy, field.TypeString)
	}
	if pu.mutation.CreatedAtCleared() {
		_spec.ClearField(permission.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.SetField(permission.FieldUpdatedAt, field.TypeTime, value)
	}
	if pu.mutation.UpdatedAtCleared() {
		_spec.ClearField(permission.FieldUpdatedAt, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{permission.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PermissionUpdateOne is the builder for updating a single Permission entity.
type PermissionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PermissionMutation
}

// SetName sets the "name" field.
func (puo *PermissionUpdateOne) SetName(s string) *PermissionUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (puo *PermissionUpdateOne) SetNillableName(s *string) *PermissionUpdateOne {
	if s != nil {
		puo.SetName(*s)
	}
	return puo
}

// ClearName clears the value of the "name" field.
func (puo *PermissionUpdateOne) ClearName() *PermissionUpdateOne {
	puo.mutation.ClearName()
	return puo
}

// SetAction sets the "action" field.
func (puo *PermissionUpdateOne) SetAction(s string) *PermissionUpdateOne {
	puo.mutation.SetAction(s)
	return puo
}

// SetNillableAction sets the "action" field if the given value is not nil.
func (puo *PermissionUpdateOne) SetNillableAction(s *string) *PermissionUpdateOne {
	if s != nil {
		puo.SetAction(*s)
	}
	return puo
}

// ClearAction clears the value of the "action" field.
func (puo *PermissionUpdateOne) ClearAction() *PermissionUpdateOne {
	puo.mutation.ClearAction()
	return puo
}

// SetSubject sets the "subject" field.
func (puo *PermissionUpdateOne) SetSubject(s string) *PermissionUpdateOne {
	puo.mutation.SetSubject(s)
	return puo
}

// SetNillableSubject sets the "subject" field if the given value is not nil.
func (puo *PermissionUpdateOne) SetNillableSubject(s *string) *PermissionUpdateOne {
	if s != nil {
		puo.SetSubject(*s)
	}
	return puo
}

// ClearSubject clears the value of the "subject" field.
func (puo *PermissionUpdateOne) ClearSubject() *PermissionUpdateOne {
	puo.mutation.ClearSubject()
	return puo
}

// SetDescription sets the "description" field.
func (puo *PermissionUpdateOne) SetDescription(s string) *PermissionUpdateOne {
	puo.mutation.SetDescription(s)
	return puo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (puo *PermissionUpdateOne) SetNillableDescription(s *string) *PermissionUpdateOne {
	if s != nil {
		puo.SetDescription(*s)
	}
	return puo
}

// ClearDescription clears the value of the "description" field.
func (puo *PermissionUpdateOne) ClearDescription() *PermissionUpdateOne {
	puo.mutation.ClearDescription()
	return puo
}

// SetDefault sets the "default" field.
func (puo *PermissionUpdateOne) SetDefault(b bool) *PermissionUpdateOne {
	puo.mutation.SetDefault(b)
	return puo
}

// SetNillableDefault sets the "default" field if the given value is not nil.
func (puo *PermissionUpdateOne) SetNillableDefault(b *bool) *PermissionUpdateOne {
	if b != nil {
		puo.SetDefault(*b)
	}
	return puo
}

// ClearDefault clears the value of the "default" field.
func (puo *PermissionUpdateOne) ClearDefault() *PermissionUpdateOne {
	puo.mutation.ClearDefault()
	return puo
}

// SetDisabled sets the "disabled" field.
func (puo *PermissionUpdateOne) SetDisabled(b bool) *PermissionUpdateOne {
	puo.mutation.SetDisabled(b)
	return puo
}

// SetNillableDisabled sets the "disabled" field if the given value is not nil.
func (puo *PermissionUpdateOne) SetNillableDisabled(b *bool) *PermissionUpdateOne {
	if b != nil {
		puo.SetDisabled(*b)
	}
	return puo
}

// ClearDisabled clears the value of the "disabled" field.
func (puo *PermissionUpdateOne) ClearDisabled() *PermissionUpdateOne {
	puo.mutation.ClearDisabled()
	return puo
}

// SetExtras sets the "extras" field.
func (puo *PermissionUpdateOne) SetExtras(m map[string]interface{}) *PermissionUpdateOne {
	puo.mutation.SetExtras(m)
	return puo
}

// ClearExtras clears the value of the "extras" field.
func (puo *PermissionUpdateOne) ClearExtras() *PermissionUpdateOne {
	puo.mutation.ClearExtras()
	return puo
}

// SetCreatedBy sets the "created_by" field.
func (puo *PermissionUpdateOne) SetCreatedBy(s string) *PermissionUpdateOne {
	puo.mutation.SetCreatedBy(s)
	return puo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (puo *PermissionUpdateOne) SetNillableCreatedBy(s *string) *PermissionUpdateOne {
	if s != nil {
		puo.SetCreatedBy(*s)
	}
	return puo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (puo *PermissionUpdateOne) ClearCreatedBy() *PermissionUpdateOne {
	puo.mutation.ClearCreatedBy()
	return puo
}

// SetUpdatedBy sets the "updated_by" field.
func (puo *PermissionUpdateOne) SetUpdatedBy(s string) *PermissionUpdateOne {
	puo.mutation.SetUpdatedBy(s)
	return puo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (puo *PermissionUpdateOne) SetNillableUpdatedBy(s *string) *PermissionUpdateOne {
	if s != nil {
		puo.SetUpdatedBy(*s)
	}
	return puo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (puo *PermissionUpdateOne) ClearUpdatedBy() *PermissionUpdateOne {
	puo.mutation.ClearUpdatedBy()
	return puo
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *PermissionUpdateOne) SetUpdatedAt(t time.Time) *PermissionUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (puo *PermissionUpdateOne) ClearUpdatedAt() *PermissionUpdateOne {
	puo.mutation.ClearUpdatedAt()
	return puo
}

// Mutation returns the PermissionMutation object of the builder.
func (puo *PermissionUpdateOne) Mutation() *PermissionMutation {
	return puo.mutation
}

// Where appends a list predicates to the PermissionUpdate builder.
func (puo *PermissionUpdateOne) Where(ps ...predicate.Permission) *PermissionUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PermissionUpdateOne) Select(field string, fields ...string) *PermissionUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Permission entity.
func (puo *PermissionUpdateOne) Save(ctx context.Context) (*Permission, error) {
	puo.defaults()
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PermissionUpdateOne) SaveX(ctx context.Context) *Permission {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PermissionUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PermissionUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *PermissionUpdateOne) defaults() {
	if _, ok := puo.mutation.UpdatedAt(); !ok && !puo.mutation.UpdatedAtCleared() {
		v := permission.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PermissionUpdateOne) check() error {
	if v, ok := puo.mutation.CreatedBy(); ok {
		if err := permission.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "Permission.created_by": %w`, err)}
		}
	}
	if v, ok := puo.mutation.UpdatedBy(); ok {
		if err := permission.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "Permission.updated_by": %w`, err)}
		}
	}
	return nil
}

func (puo *PermissionUpdateOne) sqlSave(ctx context.Context) (_node *Permission, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(permission.Table, permission.Columns, sqlgraph.NewFieldSpec(permission.FieldID, field.TypeString))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Permission.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, permission.FieldID)
		for _, f := range fields {
			if !permission.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != permission.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(permission.FieldName, field.TypeString, value)
	}
	if puo.mutation.NameCleared() {
		_spec.ClearField(permission.FieldName, field.TypeString)
	}
	if value, ok := puo.mutation.Action(); ok {
		_spec.SetField(permission.FieldAction, field.TypeString, value)
	}
	if puo.mutation.ActionCleared() {
		_spec.ClearField(permission.FieldAction, field.TypeString)
	}
	if value, ok := puo.mutation.Subject(); ok {
		_spec.SetField(permission.FieldSubject, field.TypeString, value)
	}
	if puo.mutation.SubjectCleared() {
		_spec.ClearField(permission.FieldSubject, field.TypeString)
	}
	if value, ok := puo.mutation.Description(); ok {
		_spec.SetField(permission.FieldDescription, field.TypeString, value)
	}
	if puo.mutation.DescriptionCleared() {
		_spec.ClearField(permission.FieldDescription, field.TypeString)
	}
	if value, ok := puo.mutation.Default(); ok {
		_spec.SetField(permission.FieldDefault, field.TypeBool, value)
	}
	if puo.mutation.DefaultCleared() {
		_spec.ClearField(permission.FieldDefault, field.TypeBool)
	}
	if value, ok := puo.mutation.Disabled(); ok {
		_spec.SetField(permission.FieldDisabled, field.TypeBool, value)
	}
	if puo.mutation.DisabledCleared() {
		_spec.ClearField(permission.FieldDisabled, field.TypeBool)
	}
	if value, ok := puo.mutation.Extras(); ok {
		_spec.SetField(permission.FieldExtras, field.TypeJSON, value)
	}
	if puo.mutation.ExtrasCleared() {
		_spec.ClearField(permission.FieldExtras, field.TypeJSON)
	}
	if value, ok := puo.mutation.CreatedBy(); ok {
		_spec.SetField(permission.FieldCreatedBy, field.TypeString, value)
	}
	if puo.mutation.CreatedByCleared() {
		_spec.ClearField(permission.FieldCreatedBy, field.TypeString)
	}
	if value, ok := puo.mutation.UpdatedBy(); ok {
		_spec.SetField(permission.FieldUpdatedBy, field.TypeString, value)
	}
	if puo.mutation.UpdatedByCleared() {
		_spec.ClearField(permission.FieldUpdatedBy, field.TypeString)
	}
	if puo.mutation.CreatedAtCleared() {
		_spec.ClearField(permission.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.SetField(permission.FieldUpdatedAt, field.TypeTime, value)
	}
	if puo.mutation.UpdatedAtCleared() {
		_spec.ClearField(permission.FieldUpdatedAt, field.TypeTime)
	}
	_node = &Permission{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{permission.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
