// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/core/data/ent/predicate"
	"ncobase/core/data/ent/userprofile"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// UserProfileUpdate is the builder for updating UserProfile entities.
type UserProfileUpdate struct {
	config
	hooks    []Hook
	mutation *UserProfileMutation
}

// Where appends a list predicates to the UserProfileUpdate builder.
func (upu *UserProfileUpdate) Where(ps ...predicate.UserProfile) *UserProfileUpdate {
	upu.mutation.Where(ps...)
	return upu
}

// SetDisplayName sets the "display_name" field.
func (upu *UserProfileUpdate) SetDisplayName(s string) *UserProfileUpdate {
	upu.mutation.SetDisplayName(s)
	return upu
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (upu *UserProfileUpdate) SetNillableDisplayName(s *string) *UserProfileUpdate {
	if s != nil {
		upu.SetDisplayName(*s)
	}
	return upu
}

// ClearDisplayName clears the value of the "display_name" field.
func (upu *UserProfileUpdate) ClearDisplayName() *UserProfileUpdate {
	upu.mutation.ClearDisplayName()
	return upu
}

// SetShortBio sets the "short_bio" field.
func (upu *UserProfileUpdate) SetShortBio(s string) *UserProfileUpdate {
	upu.mutation.SetShortBio(s)
	return upu
}

// SetNillableShortBio sets the "short_bio" field if the given value is not nil.
func (upu *UserProfileUpdate) SetNillableShortBio(s *string) *UserProfileUpdate {
	if s != nil {
		upu.SetShortBio(*s)
	}
	return upu
}

// ClearShortBio clears the value of the "short_bio" field.
func (upu *UserProfileUpdate) ClearShortBio() *UserProfileUpdate {
	upu.mutation.ClearShortBio()
	return upu
}

// SetAbout sets the "about" field.
func (upu *UserProfileUpdate) SetAbout(s string) *UserProfileUpdate {
	upu.mutation.SetAbout(s)
	return upu
}

// SetNillableAbout sets the "about" field if the given value is not nil.
func (upu *UserProfileUpdate) SetNillableAbout(s *string) *UserProfileUpdate {
	if s != nil {
		upu.SetAbout(*s)
	}
	return upu
}

// ClearAbout clears the value of the "about" field.
func (upu *UserProfileUpdate) ClearAbout() *UserProfileUpdate {
	upu.mutation.ClearAbout()
	return upu
}

// SetLinks sets the "links" field.
func (upu *UserProfileUpdate) SetLinks(m []map[string]interface{}) *UserProfileUpdate {
	upu.mutation.SetLinks(m)
	return upu
}

// AppendLinks appends m to the "links" field.
func (upu *UserProfileUpdate) AppendLinks(m []map[string]interface{}) *UserProfileUpdate {
	upu.mutation.AppendLinks(m)
	return upu
}

// ClearLinks clears the value of the "links" field.
func (upu *UserProfileUpdate) ClearLinks() *UserProfileUpdate {
	upu.mutation.ClearLinks()
	return upu
}

// SetThumbnail sets the "thumbnail" field.
func (upu *UserProfileUpdate) SetThumbnail(s string) *UserProfileUpdate {
	upu.mutation.SetThumbnail(s)
	return upu
}

// SetNillableThumbnail sets the "thumbnail" field if the given value is not nil.
func (upu *UserProfileUpdate) SetNillableThumbnail(s *string) *UserProfileUpdate {
	if s != nil {
		upu.SetThumbnail(*s)
	}
	return upu
}

// ClearThumbnail clears the value of the "thumbnail" field.
func (upu *UserProfileUpdate) ClearThumbnail() *UserProfileUpdate {
	upu.mutation.ClearThumbnail()
	return upu
}

// SetExtras sets the "extras" field.
func (upu *UserProfileUpdate) SetExtras(m map[string]interface{}) *UserProfileUpdate {
	upu.mutation.SetExtras(m)
	return upu
}

// ClearExtras clears the value of the "extras" field.
func (upu *UserProfileUpdate) ClearExtras() *UserProfileUpdate {
	upu.mutation.ClearExtras()
	return upu
}

// Mutation returns the UserProfileMutation object of the builder.
func (upu *UserProfileUpdate) Mutation() *UserProfileMutation {
	return upu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (upu *UserProfileUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, upu.sqlSave, upu.mutation, upu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (upu *UserProfileUpdate) SaveX(ctx context.Context) int {
	affected, err := upu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (upu *UserProfileUpdate) Exec(ctx context.Context) error {
	_, err := upu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (upu *UserProfileUpdate) ExecX(ctx context.Context) {
	if err := upu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (upu *UserProfileUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(userprofile.Table, userprofile.Columns, sqlgraph.NewFieldSpec(userprofile.FieldID, field.TypeString))
	if ps := upu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := upu.mutation.DisplayName(); ok {
		_spec.SetField(userprofile.FieldDisplayName, field.TypeString, value)
	}
	if upu.mutation.DisplayNameCleared() {
		_spec.ClearField(userprofile.FieldDisplayName, field.TypeString)
	}
	if value, ok := upu.mutation.ShortBio(); ok {
		_spec.SetField(userprofile.FieldShortBio, field.TypeString, value)
	}
	if upu.mutation.ShortBioCleared() {
		_spec.ClearField(userprofile.FieldShortBio, field.TypeString)
	}
	if value, ok := upu.mutation.About(); ok {
		_spec.SetField(userprofile.FieldAbout, field.TypeString, value)
	}
	if upu.mutation.AboutCleared() {
		_spec.ClearField(userprofile.FieldAbout, field.TypeString)
	}
	if value, ok := upu.mutation.Links(); ok {
		_spec.SetField(userprofile.FieldLinks, field.TypeJSON, value)
	}
	if value, ok := upu.mutation.AppendedLinks(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, userprofile.FieldLinks, value)
		})
	}
	if upu.mutation.LinksCleared() {
		_spec.ClearField(userprofile.FieldLinks, field.TypeJSON)
	}
	if value, ok := upu.mutation.Thumbnail(); ok {
		_spec.SetField(userprofile.FieldThumbnail, field.TypeString, value)
	}
	if upu.mutation.ThumbnailCleared() {
		_spec.ClearField(userprofile.FieldThumbnail, field.TypeString)
	}
	if value, ok := upu.mutation.Extras(); ok {
		_spec.SetField(userprofile.FieldExtras, field.TypeJSON, value)
	}
	if upu.mutation.ExtrasCleared() {
		_spec.ClearField(userprofile.FieldExtras, field.TypeJSON)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, upu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userprofile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	upu.mutation.done = true
	return n, nil
}

// UserProfileUpdateOne is the builder for updating a single UserProfile entity.
type UserProfileUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserProfileMutation
}

// SetDisplayName sets the "display_name" field.
func (upuo *UserProfileUpdateOne) SetDisplayName(s string) *UserProfileUpdateOne {
	upuo.mutation.SetDisplayName(s)
	return upuo
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (upuo *UserProfileUpdateOne) SetNillableDisplayName(s *string) *UserProfileUpdateOne {
	if s != nil {
		upuo.SetDisplayName(*s)
	}
	return upuo
}

// ClearDisplayName clears the value of the "display_name" field.
func (upuo *UserProfileUpdateOne) ClearDisplayName() *UserProfileUpdateOne {
	upuo.mutation.ClearDisplayName()
	return upuo
}

// SetShortBio sets the "short_bio" field.
func (upuo *UserProfileUpdateOne) SetShortBio(s string) *UserProfileUpdateOne {
	upuo.mutation.SetShortBio(s)
	return upuo
}

// SetNillableShortBio sets the "short_bio" field if the given value is not nil.
func (upuo *UserProfileUpdateOne) SetNillableShortBio(s *string) *UserProfileUpdateOne {
	if s != nil {
		upuo.SetShortBio(*s)
	}
	return upuo
}

// ClearShortBio clears the value of the "short_bio" field.
func (upuo *UserProfileUpdateOne) ClearShortBio() *UserProfileUpdateOne {
	upuo.mutation.ClearShortBio()
	return upuo
}

// SetAbout sets the "about" field.
func (upuo *UserProfileUpdateOne) SetAbout(s string) *UserProfileUpdateOne {
	upuo.mutation.SetAbout(s)
	return upuo
}

// SetNillableAbout sets the "about" field if the given value is not nil.
func (upuo *UserProfileUpdateOne) SetNillableAbout(s *string) *UserProfileUpdateOne {
	if s != nil {
		upuo.SetAbout(*s)
	}
	return upuo
}

// ClearAbout clears the value of the "about" field.
func (upuo *UserProfileUpdateOne) ClearAbout() *UserProfileUpdateOne {
	upuo.mutation.ClearAbout()
	return upuo
}

// SetLinks sets the "links" field.
func (upuo *UserProfileUpdateOne) SetLinks(m []map[string]interface{}) *UserProfileUpdateOne {
	upuo.mutation.SetLinks(m)
	return upuo
}

// AppendLinks appends m to the "links" field.
func (upuo *UserProfileUpdateOne) AppendLinks(m []map[string]interface{}) *UserProfileUpdateOne {
	upuo.mutation.AppendLinks(m)
	return upuo
}

// ClearLinks clears the value of the "links" field.
func (upuo *UserProfileUpdateOne) ClearLinks() *UserProfileUpdateOne {
	upuo.mutation.ClearLinks()
	return upuo
}

// SetThumbnail sets the "thumbnail" field.
func (upuo *UserProfileUpdateOne) SetThumbnail(s string) *UserProfileUpdateOne {
	upuo.mutation.SetThumbnail(s)
	return upuo
}

// SetNillableThumbnail sets the "thumbnail" field if the given value is not nil.
func (upuo *UserProfileUpdateOne) SetNillableThumbnail(s *string) *UserProfileUpdateOne {
	if s != nil {
		upuo.SetThumbnail(*s)
	}
	return upuo
}

// ClearThumbnail clears the value of the "thumbnail" field.
func (upuo *UserProfileUpdateOne) ClearThumbnail() *UserProfileUpdateOne {
	upuo.mutation.ClearThumbnail()
	return upuo
}

// SetExtras sets the "extras" field.
func (upuo *UserProfileUpdateOne) SetExtras(m map[string]interface{}) *UserProfileUpdateOne {
	upuo.mutation.SetExtras(m)
	return upuo
}

// ClearExtras clears the value of the "extras" field.
func (upuo *UserProfileUpdateOne) ClearExtras() *UserProfileUpdateOne {
	upuo.mutation.ClearExtras()
	return upuo
}

// Mutation returns the UserProfileMutation object of the builder.
func (upuo *UserProfileUpdateOne) Mutation() *UserProfileMutation {
	return upuo.mutation
}

// Where appends a list predicates to the UserProfileUpdate builder.
func (upuo *UserProfileUpdateOne) Where(ps ...predicate.UserProfile) *UserProfileUpdateOne {
	upuo.mutation.Where(ps...)
	return upuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (upuo *UserProfileUpdateOne) Select(field string, fields ...string) *UserProfileUpdateOne {
	upuo.fields = append([]string{field}, fields...)
	return upuo
}

// Save executes the query and returns the updated UserProfile entity.
func (upuo *UserProfileUpdateOne) Save(ctx context.Context) (*UserProfile, error) {
	return withHooks(ctx, upuo.sqlSave, upuo.mutation, upuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (upuo *UserProfileUpdateOne) SaveX(ctx context.Context) *UserProfile {
	node, err := upuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (upuo *UserProfileUpdateOne) Exec(ctx context.Context) error {
	_, err := upuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (upuo *UserProfileUpdateOne) ExecX(ctx context.Context) {
	if err := upuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (upuo *UserProfileUpdateOne) sqlSave(ctx context.Context) (_node *UserProfile, err error) {
	_spec := sqlgraph.NewUpdateSpec(userprofile.Table, userprofile.Columns, sqlgraph.NewFieldSpec(userprofile.FieldID, field.TypeString))
	id, ok := upuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserProfile.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := upuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userprofile.FieldID)
		for _, f := range fields {
			if !userprofile.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userprofile.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := upuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := upuo.mutation.DisplayName(); ok {
		_spec.SetField(userprofile.FieldDisplayName, field.TypeString, value)
	}
	if upuo.mutation.DisplayNameCleared() {
		_spec.ClearField(userprofile.FieldDisplayName, field.TypeString)
	}
	if value, ok := upuo.mutation.ShortBio(); ok {
		_spec.SetField(userprofile.FieldShortBio, field.TypeString, value)
	}
	if upuo.mutation.ShortBioCleared() {
		_spec.ClearField(userprofile.FieldShortBio, field.TypeString)
	}
	if value, ok := upuo.mutation.About(); ok {
		_spec.SetField(userprofile.FieldAbout, field.TypeString, value)
	}
	if upuo.mutation.AboutCleared() {
		_spec.ClearField(userprofile.FieldAbout, field.TypeString)
	}
	if value, ok := upuo.mutation.Links(); ok {
		_spec.SetField(userprofile.FieldLinks, field.TypeJSON, value)
	}
	if value, ok := upuo.mutation.AppendedLinks(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, userprofile.FieldLinks, value)
		})
	}
	if upuo.mutation.LinksCleared() {
		_spec.ClearField(userprofile.FieldLinks, field.TypeJSON)
	}
	if value, ok := upuo.mutation.Thumbnail(); ok {
		_spec.SetField(userprofile.FieldThumbnail, field.TypeString, value)
	}
	if upuo.mutation.ThumbnailCleared() {
		_spec.ClearField(userprofile.FieldThumbnail, field.TypeString)
	}
	if value, ok := upuo.mutation.Extras(); ok {
		_spec.SetField(userprofile.FieldExtras, field.TypeJSON, value)
	}
	if upuo.mutation.ExtrasCleared() {
		_spec.ClearField(userprofile.FieldExtras, field.TypeJSON)
	}
	_node = &UserProfile{config: upuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, upuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userprofile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	upuo.mutation.done = true
	return _node, nil
}
