// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"ncobase/core/data/ent/usertenant"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserTenantCreate is the builder for creating a UserTenant entity.
type UserTenantCreate struct {
	config
	mutation *UserTenantMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (utc *UserTenantCreate) SetUserID(s string) *UserTenantCreate {
	utc.mutation.SetUserID(s)
	return utc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (utc *UserTenantCreate) SetNillableUserID(s *string) *UserTenantCreate {
	if s != nil {
		utc.SetUserID(*s)
	}
	return utc
}

// SetTenantID sets the "tenant_id" field.
func (utc *UserTenantCreate) SetTenantID(s string) *UserTenantCreate {
	utc.mutation.SetTenantID(s)
	return utc
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (utc *UserTenantCreate) SetNillableTenantID(s *string) *UserTenantCreate {
	if s != nil {
		utc.SetTenantID(*s)
	}
	return utc
}

// SetCreatedBy sets the "created_by" field.
func (utc *UserTenantCreate) SetCreatedBy(s string) *UserTenantCreate {
	utc.mutation.SetCreatedBy(s)
	return utc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (utc *UserTenantCreate) SetNillableCreatedBy(s *string) *UserTenantCreate {
	if s != nil {
		utc.SetCreatedBy(*s)
	}
	return utc
}

// SetUpdatedBy sets the "updated_by" field.
func (utc *UserTenantCreate) SetUpdatedBy(s string) *UserTenantCreate {
	utc.mutation.SetUpdatedBy(s)
	return utc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (utc *UserTenantCreate) SetNillableUpdatedBy(s *string) *UserTenantCreate {
	if s != nil {
		utc.SetUpdatedBy(*s)
	}
	return utc
}

// SetCreatedAt sets the "created_at" field.
func (utc *UserTenantCreate) SetCreatedAt(t time.Time) *UserTenantCreate {
	utc.mutation.SetCreatedAt(t)
	return utc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (utc *UserTenantCreate) SetNillableCreatedAt(t *time.Time) *UserTenantCreate {
	if t != nil {
		utc.SetCreatedAt(*t)
	}
	return utc
}

// SetUpdatedAt sets the "updated_at" field.
func (utc *UserTenantCreate) SetUpdatedAt(t time.Time) *UserTenantCreate {
	utc.mutation.SetUpdatedAt(t)
	return utc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (utc *UserTenantCreate) SetNillableUpdatedAt(t *time.Time) *UserTenantCreate {
	if t != nil {
		utc.SetUpdatedAt(*t)
	}
	return utc
}

// SetID sets the "id" field.
func (utc *UserTenantCreate) SetID(s string) *UserTenantCreate {
	utc.mutation.SetID(s)
	return utc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (utc *UserTenantCreate) SetNillableID(s *string) *UserTenantCreate {
	if s != nil {
		utc.SetID(*s)
	}
	return utc
}

// Mutation returns the UserTenantMutation object of the builder.
func (utc *UserTenantCreate) Mutation() *UserTenantMutation {
	return utc.mutation
}

// Save creates the UserTenant in the database.
func (utc *UserTenantCreate) Save(ctx context.Context) (*UserTenant, error) {
	utc.defaults()
	return withHooks(ctx, utc.sqlSave, utc.mutation, utc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (utc *UserTenantCreate) SaveX(ctx context.Context) *UserTenant {
	v, err := utc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (utc *UserTenantCreate) Exec(ctx context.Context) error {
	_, err := utc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (utc *UserTenantCreate) ExecX(ctx context.Context) {
	if err := utc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (utc *UserTenantCreate) defaults() {
	if _, ok := utc.mutation.CreatedAt(); !ok {
		v := usertenant.DefaultCreatedAt()
		utc.mutation.SetCreatedAt(v)
	}
	if _, ok := utc.mutation.UpdatedAt(); !ok {
		v := usertenant.DefaultUpdatedAt()
		utc.mutation.SetUpdatedAt(v)
	}
	if _, ok := utc.mutation.ID(); !ok {
		v := usertenant.DefaultID()
		utc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (utc *UserTenantCreate) check() error {
	if v, ok := utc.mutation.UserID(); ok {
		if err := usertenant.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "UserTenant.user_id": %w`, err)}
		}
	}
	if v, ok := utc.mutation.TenantID(); ok {
		if err := usertenant.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "UserTenant.tenant_id": %w`, err)}
		}
	}
	if v, ok := utc.mutation.CreatedBy(); ok {
		if err := usertenant.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "UserTenant.created_by": %w`, err)}
		}
	}
	if v, ok := utc.mutation.UpdatedBy(); ok {
		if err := usertenant.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "UserTenant.updated_by": %w`, err)}
		}
	}
	if v, ok := utc.mutation.ID(); ok {
		if err := usertenant.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "UserTenant.id": %w`, err)}
		}
	}
	return nil
}

func (utc *UserTenantCreate) sqlSave(ctx context.Context) (*UserTenant, error) {
	if err := utc.check(); err != nil {
		return nil, err
	}
	_node, _spec := utc.createSpec()
	if err := sqlgraph.CreateNode(ctx, utc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected UserTenant.ID type: %T", _spec.ID.Value)
		}
	}
	utc.mutation.id = &_node.ID
	utc.mutation.done = true
	return _node, nil
}

func (utc *UserTenantCreate) createSpec() (*UserTenant, *sqlgraph.CreateSpec) {
	var (
		_node = &UserTenant{config: utc.config}
		_spec = sqlgraph.NewCreateSpec(usertenant.Table, sqlgraph.NewFieldSpec(usertenant.FieldID, field.TypeString))
	)
	if id, ok := utc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := utc.mutation.UserID(); ok {
		_spec.SetField(usertenant.FieldUserID, field.TypeString, value)
		_node.UserID = value
	}
	if value, ok := utc.mutation.TenantID(); ok {
		_spec.SetField(usertenant.FieldTenantID, field.TypeString, value)
		_node.TenantID = value
	}
	if value, ok := utc.mutation.CreatedBy(); ok {
		_spec.SetField(usertenant.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := utc.mutation.UpdatedBy(); ok {
		_spec.SetField(usertenant.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := utc.mutation.CreatedAt(); ok {
		_spec.SetField(usertenant.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := utc.mutation.UpdatedAt(); ok {
		_spec.SetField(usertenant.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// UserTenantCreateBulk is the builder for creating many UserTenant entities in bulk.
type UserTenantCreateBulk struct {
	config
	err      error
	builders []*UserTenantCreate
}

// Save creates the UserTenant entities in the database.
func (utcb *UserTenantCreateBulk) Save(ctx context.Context) ([]*UserTenant, error) {
	if utcb.err != nil {
		return nil, utcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(utcb.builders))
	nodes := make([]*UserTenant, len(utcb.builders))
	mutators := make([]Mutator, len(utcb.builders))
	for i := range utcb.builders {
		func(i int, root context.Context) {
			builder := utcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserTenantMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, utcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, utcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, utcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (utcb *UserTenantCreateBulk) SaveX(ctx context.Context) []*UserTenant {
	v, err := utcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (utcb *UserTenantCreateBulk) Exec(ctx context.Context) error {
	_, err := utcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (utcb *UserTenantCreateBulk) ExecX(ctx context.Context) {
	if err := utcb.Exec(ctx); err != nil {
		panic(err)
	}
}
