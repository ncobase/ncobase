// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"ncobase/organization/data/ent/migrate"

	"ncobase/organization/data/ent/organization"
	"ncobase/organization/data/ent/organizationrole"
	"ncobase/organization/data/ent/userorganization"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Organization is the client for interacting with the Organization builders.
	Organization *OrganizationClient
	// OrganizationRole is the client for interacting with the OrganizationRole builders.
	OrganizationRole *OrganizationRoleClient
	// UserOrganization is the client for interacting with the UserOrganization builders.
	UserOrganization *UserOrganizationClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Organization = NewOrganizationClient(c.config)
	c.OrganizationRole = NewOrganizationRoleClient(c.config)
	c.UserOrganization = NewUserOrganizationClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:              ctx,
		config:           cfg,
		Organization:     NewOrganizationClient(cfg),
		OrganizationRole: NewOrganizationRoleClient(cfg),
		UserOrganization: NewUserOrganizationClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:              ctx,
		config:           cfg,
		Organization:     NewOrganizationClient(cfg),
		OrganizationRole: NewOrganizationRoleClient(cfg),
		UserOrganization: NewUserOrganizationClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Organization.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Organization.Use(hooks...)
	c.OrganizationRole.Use(hooks...)
	c.UserOrganization.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.Organization.Intercept(interceptors...)
	c.OrganizationRole.Intercept(interceptors...)
	c.UserOrganization.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *OrganizationMutation:
		return c.Organization.mutate(ctx, m)
	case *OrganizationRoleMutation:
		return c.OrganizationRole.mutate(ctx, m)
	case *UserOrganizationMutation:
		return c.UserOrganization.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// OrganizationClient is a client for the Organization schema.
type OrganizationClient struct {
	config
}

// NewOrganizationClient returns a client for the Organization from the given config.
func NewOrganizationClient(c config) *OrganizationClient {
	return &OrganizationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `organization.Hooks(f(g(h())))`.
func (c *OrganizationClient) Use(hooks ...Hook) {
	c.hooks.Organization = append(c.hooks.Organization, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `organization.Intercept(f(g(h())))`.
func (c *OrganizationClient) Intercept(interceptors ...Interceptor) {
	c.inters.Organization = append(c.inters.Organization, interceptors...)
}

// Create returns a builder for creating a Organization entity.
func (c *OrganizationClient) Create() *OrganizationCreate {
	mutation := newOrganizationMutation(c.config, OpCreate)
	return &OrganizationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Organization entities.
func (c *OrganizationClient) CreateBulk(builders ...*OrganizationCreate) *OrganizationCreateBulk {
	return &OrganizationCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *OrganizationClient) MapCreateBulk(slice any, setFunc func(*OrganizationCreate, int)) *OrganizationCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &OrganizationCreateBulk{err: fmt.Errorf("calling to OrganizationClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*OrganizationCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &OrganizationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Organization.
func (c *OrganizationClient) Update() *OrganizationUpdate {
	mutation := newOrganizationMutation(c.config, OpUpdate)
	return &OrganizationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrganizationClient) UpdateOne(o *Organization) *OrganizationUpdateOne {
	mutation := newOrganizationMutation(c.config, OpUpdateOne, withOrganization(o))
	return &OrganizationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrganizationClient) UpdateOneID(id string) *OrganizationUpdateOne {
	mutation := newOrganizationMutation(c.config, OpUpdateOne, withOrganizationID(id))
	return &OrganizationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Organization.
func (c *OrganizationClient) Delete() *OrganizationDelete {
	mutation := newOrganizationMutation(c.config, OpDelete)
	return &OrganizationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OrganizationClient) DeleteOne(o *Organization) *OrganizationDeleteOne {
	return c.DeleteOneID(o.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OrganizationClient) DeleteOneID(id string) *OrganizationDeleteOne {
	builder := c.Delete().Where(organization.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrganizationDeleteOne{builder}
}

// Query returns a query builder for Organization.
func (c *OrganizationClient) Query() *OrganizationQuery {
	return &OrganizationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOrganization},
		inters: c.Interceptors(),
	}
}

// Get returns a Organization entity by its id.
func (c *OrganizationClient) Get(ctx context.Context, id string) (*Organization, error) {
	return c.Query().Where(organization.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrganizationClient) GetX(ctx context.Context, id string) *Organization {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *OrganizationClient) Hooks() []Hook {
	return c.hooks.Organization
}

// Interceptors returns the client interceptors.
func (c *OrganizationClient) Interceptors() []Interceptor {
	return c.inters.Organization
}

func (c *OrganizationClient) mutate(ctx context.Context, m *OrganizationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OrganizationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OrganizationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OrganizationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OrganizationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Organization mutation op: %q", m.Op())
	}
}

// OrganizationRoleClient is a client for the OrganizationRole schema.
type OrganizationRoleClient struct {
	config
}

// NewOrganizationRoleClient returns a client for the OrganizationRole from the given config.
func NewOrganizationRoleClient(c config) *OrganizationRoleClient {
	return &OrganizationRoleClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `organizationrole.Hooks(f(g(h())))`.
func (c *OrganizationRoleClient) Use(hooks ...Hook) {
	c.hooks.OrganizationRole = append(c.hooks.OrganizationRole, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `organizationrole.Intercept(f(g(h())))`.
func (c *OrganizationRoleClient) Intercept(interceptors ...Interceptor) {
	c.inters.OrganizationRole = append(c.inters.OrganizationRole, interceptors...)
}

// Create returns a builder for creating a OrganizationRole entity.
func (c *OrganizationRoleClient) Create() *OrganizationRoleCreate {
	mutation := newOrganizationRoleMutation(c.config, OpCreate)
	return &OrganizationRoleCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OrganizationRole entities.
func (c *OrganizationRoleClient) CreateBulk(builders ...*OrganizationRoleCreate) *OrganizationRoleCreateBulk {
	return &OrganizationRoleCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *OrganizationRoleClient) MapCreateBulk(slice any, setFunc func(*OrganizationRoleCreate, int)) *OrganizationRoleCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &OrganizationRoleCreateBulk{err: fmt.Errorf("calling to OrganizationRoleClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*OrganizationRoleCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &OrganizationRoleCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OrganizationRole.
func (c *OrganizationRoleClient) Update() *OrganizationRoleUpdate {
	mutation := newOrganizationRoleMutation(c.config, OpUpdate)
	return &OrganizationRoleUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrganizationRoleClient) UpdateOne(or *OrganizationRole) *OrganizationRoleUpdateOne {
	mutation := newOrganizationRoleMutation(c.config, OpUpdateOne, withOrganizationRole(or))
	return &OrganizationRoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrganizationRoleClient) UpdateOneID(id string) *OrganizationRoleUpdateOne {
	mutation := newOrganizationRoleMutation(c.config, OpUpdateOne, withOrganizationRoleID(id))
	return &OrganizationRoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OrganizationRole.
func (c *OrganizationRoleClient) Delete() *OrganizationRoleDelete {
	mutation := newOrganizationRoleMutation(c.config, OpDelete)
	return &OrganizationRoleDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OrganizationRoleClient) DeleteOne(or *OrganizationRole) *OrganizationRoleDeleteOne {
	return c.DeleteOneID(or.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OrganizationRoleClient) DeleteOneID(id string) *OrganizationRoleDeleteOne {
	builder := c.Delete().Where(organizationrole.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrganizationRoleDeleteOne{builder}
}

// Query returns a query builder for OrganizationRole.
func (c *OrganizationRoleClient) Query() *OrganizationRoleQuery {
	return &OrganizationRoleQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOrganizationRole},
		inters: c.Interceptors(),
	}
}

// Get returns a OrganizationRole entity by its id.
func (c *OrganizationRoleClient) Get(ctx context.Context, id string) (*OrganizationRole, error) {
	return c.Query().Where(organizationrole.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrganizationRoleClient) GetX(ctx context.Context, id string) *OrganizationRole {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *OrganizationRoleClient) Hooks() []Hook {
	return c.hooks.OrganizationRole
}

// Interceptors returns the client interceptors.
func (c *OrganizationRoleClient) Interceptors() []Interceptor {
	return c.inters.OrganizationRole
}

func (c *OrganizationRoleClient) mutate(ctx context.Context, m *OrganizationRoleMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OrganizationRoleCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OrganizationRoleUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OrganizationRoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OrganizationRoleDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown OrganizationRole mutation op: %q", m.Op())
	}
}

// UserOrganizationClient is a client for the UserOrganization schema.
type UserOrganizationClient struct {
	config
}

// NewUserOrganizationClient returns a client for the UserOrganization from the given config.
func NewUserOrganizationClient(c config) *UserOrganizationClient {
	return &UserOrganizationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `userorganization.Hooks(f(g(h())))`.
func (c *UserOrganizationClient) Use(hooks ...Hook) {
	c.hooks.UserOrganization = append(c.hooks.UserOrganization, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `userorganization.Intercept(f(g(h())))`.
func (c *UserOrganizationClient) Intercept(interceptors ...Interceptor) {
	c.inters.UserOrganization = append(c.inters.UserOrganization, interceptors...)
}

// Create returns a builder for creating a UserOrganization entity.
func (c *UserOrganizationClient) Create() *UserOrganizationCreate {
	mutation := newUserOrganizationMutation(c.config, OpCreate)
	return &UserOrganizationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserOrganization entities.
func (c *UserOrganizationClient) CreateBulk(builders ...*UserOrganizationCreate) *UserOrganizationCreateBulk {
	return &UserOrganizationCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserOrganizationClient) MapCreateBulk(slice any, setFunc func(*UserOrganizationCreate, int)) *UserOrganizationCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserOrganizationCreateBulk{err: fmt.Errorf("calling to UserOrganizationClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserOrganizationCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserOrganizationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserOrganization.
func (c *UserOrganizationClient) Update() *UserOrganizationUpdate {
	mutation := newUserOrganizationMutation(c.config, OpUpdate)
	return &UserOrganizationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserOrganizationClient) UpdateOne(uo *UserOrganization) *UserOrganizationUpdateOne {
	mutation := newUserOrganizationMutation(c.config, OpUpdateOne, withUserOrganization(uo))
	return &UserOrganizationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserOrganizationClient) UpdateOneID(id string) *UserOrganizationUpdateOne {
	mutation := newUserOrganizationMutation(c.config, OpUpdateOne, withUserOrganizationID(id))
	return &UserOrganizationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserOrganization.
func (c *UserOrganizationClient) Delete() *UserOrganizationDelete {
	mutation := newUserOrganizationMutation(c.config, OpDelete)
	return &UserOrganizationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserOrganizationClient) DeleteOne(uo *UserOrganization) *UserOrganizationDeleteOne {
	return c.DeleteOneID(uo.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserOrganizationClient) DeleteOneID(id string) *UserOrganizationDeleteOne {
	builder := c.Delete().Where(userorganization.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserOrganizationDeleteOne{builder}
}

// Query returns a query builder for UserOrganization.
func (c *UserOrganizationClient) Query() *UserOrganizationQuery {
	return &UserOrganizationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUserOrganization},
		inters: c.Interceptors(),
	}
}

// Get returns a UserOrganization entity by its id.
func (c *UserOrganizationClient) Get(ctx context.Context, id string) (*UserOrganization, error) {
	return c.Query().Where(userorganization.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserOrganizationClient) GetX(ctx context.Context, id string) *UserOrganization {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserOrganizationClient) Hooks() []Hook {
	return c.hooks.UserOrganization
}

// Interceptors returns the client interceptors.
func (c *UserOrganizationClient) Interceptors() []Interceptor {
	return c.inters.UserOrganization
}

func (c *UserOrganizationClient) mutate(ctx context.Context, m *UserOrganizationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserOrganizationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserOrganizationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserOrganizationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserOrganizationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UserOrganization mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Organization, OrganizationRole, UserOrganization []ent.Hook
	}
	inters struct {
		Organization, OrganizationRole, UserOrganization []ent.Interceptor
	}
)
