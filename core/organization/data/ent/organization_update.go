// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/organization/data/ent/organization"
	"ncobase/organization/data/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OrganizationUpdate is the builder for updating Organization entities.
type OrganizationUpdate struct {
	config
	hooks    []Hook
	mutation *OrganizationMutation
}

// Where appends a list predicates to the OrganizationUpdate builder.
func (ou *OrganizationUpdate) Where(ps ...predicate.Organization) *OrganizationUpdate {
	ou.mutation.Where(ps...)
	return ou
}

// SetName sets the "name" field.
func (ou *OrganizationUpdate) SetName(s string) *OrganizationUpdate {
	ou.mutation.SetName(s)
	return ou
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableName(s *string) *OrganizationUpdate {
	if s != nil {
		ou.SetName(*s)
	}
	return ou
}

// ClearName clears the value of the "name" field.
func (ou *OrganizationUpdate) ClearName() *OrganizationUpdate {
	ou.mutation.ClearName()
	return ou
}

// SetSlug sets the "slug" field.
func (ou *OrganizationUpdate) SetSlug(s string) *OrganizationUpdate {
	ou.mutation.SetSlug(s)
	return ou
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableSlug(s *string) *OrganizationUpdate {
	if s != nil {
		ou.SetSlug(*s)
	}
	return ou
}

// ClearSlug clears the value of the "slug" field.
func (ou *OrganizationUpdate) ClearSlug() *OrganizationUpdate {
	ou.mutation.ClearSlug()
	return ou
}

// SetType sets the "type" field.
func (ou *OrganizationUpdate) SetType(s string) *OrganizationUpdate {
	ou.mutation.SetType(s)
	return ou
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableType(s *string) *OrganizationUpdate {
	if s != nil {
		ou.SetType(*s)
	}
	return ou
}

// ClearType clears the value of the "type" field.
func (ou *OrganizationUpdate) ClearType() *OrganizationUpdate {
	ou.mutation.ClearType()
	return ou
}

// SetDisabled sets the "disabled" field.
func (ou *OrganizationUpdate) SetDisabled(b bool) *OrganizationUpdate {
	ou.mutation.SetDisabled(b)
	return ou
}

// SetNillableDisabled sets the "disabled" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableDisabled(b *bool) *OrganizationUpdate {
	if b != nil {
		ou.SetDisabled(*b)
	}
	return ou
}

// ClearDisabled clears the value of the "disabled" field.
func (ou *OrganizationUpdate) ClearDisabled() *OrganizationUpdate {
	ou.mutation.ClearDisabled()
	return ou
}

// SetDescription sets the "description" field.
func (ou *OrganizationUpdate) SetDescription(s string) *OrganizationUpdate {
	ou.mutation.SetDescription(s)
	return ou
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableDescription(s *string) *OrganizationUpdate {
	if s != nil {
		ou.SetDescription(*s)
	}
	return ou
}

// ClearDescription clears the value of the "description" field.
func (ou *OrganizationUpdate) ClearDescription() *OrganizationUpdate {
	ou.mutation.ClearDescription()
	return ou
}

// SetLeader sets the "leader" field.
func (ou *OrganizationUpdate) SetLeader(m map[string]interface{}) *OrganizationUpdate {
	ou.mutation.SetLeader(m)
	return ou
}

// ClearLeader clears the value of the "leader" field.
func (ou *OrganizationUpdate) ClearLeader() *OrganizationUpdate {
	ou.mutation.ClearLeader()
	return ou
}

// SetExtras sets the "extras" field.
func (ou *OrganizationUpdate) SetExtras(m map[string]interface{}) *OrganizationUpdate {
	ou.mutation.SetExtras(m)
	return ou
}

// ClearExtras clears the value of the "extras" field.
func (ou *OrganizationUpdate) ClearExtras() *OrganizationUpdate {
	ou.mutation.ClearExtras()
	return ou
}

// SetParentID sets the "parent_id" field.
func (ou *OrganizationUpdate) SetParentID(s string) *OrganizationUpdate {
	ou.mutation.SetParentID(s)
	return ou
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableParentID(s *string) *OrganizationUpdate {
	if s != nil {
		ou.SetParentID(*s)
	}
	return ou
}

// ClearParentID clears the value of the "parent_id" field.
func (ou *OrganizationUpdate) ClearParentID() *OrganizationUpdate {
	ou.mutation.ClearParentID()
	return ou
}

// SetCreatedBy sets the "created_by" field.
func (ou *OrganizationUpdate) SetCreatedBy(s string) *OrganizationUpdate {
	ou.mutation.SetCreatedBy(s)
	return ou
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableCreatedBy(s *string) *OrganizationUpdate {
	if s != nil {
		ou.SetCreatedBy(*s)
	}
	return ou
}

// ClearCreatedBy clears the value of the "created_by" field.
func (ou *OrganizationUpdate) ClearCreatedBy() *OrganizationUpdate {
	ou.mutation.ClearCreatedBy()
	return ou
}

// SetUpdatedBy sets the "updated_by" field.
func (ou *OrganizationUpdate) SetUpdatedBy(s string) *OrganizationUpdate {
	ou.mutation.SetUpdatedBy(s)
	return ou
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableUpdatedBy(s *string) *OrganizationUpdate {
	if s != nil {
		ou.SetUpdatedBy(*s)
	}
	return ou
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (ou *OrganizationUpdate) ClearUpdatedBy() *OrganizationUpdate {
	ou.mutation.ClearUpdatedBy()
	return ou
}

// SetUpdatedAt sets the "updated_at" field.
func (ou *OrganizationUpdate) SetUpdatedAt(i int64) *OrganizationUpdate {
	ou.mutation.ResetUpdatedAt()
	ou.mutation.SetUpdatedAt(i)
	return ou
}

// AddUpdatedAt adds i to the "updated_at" field.
func (ou *OrganizationUpdate) AddUpdatedAt(i int64) *OrganizationUpdate {
	ou.mutation.AddUpdatedAt(i)
	return ou
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (ou *OrganizationUpdate) ClearUpdatedAt() *OrganizationUpdate {
	ou.mutation.ClearUpdatedAt()
	return ou
}

// Mutation returns the OrganizationMutation object of the builder.
func (ou *OrganizationUpdate) Mutation() *OrganizationMutation {
	return ou.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ou *OrganizationUpdate) Save(ctx context.Context) (int, error) {
	ou.defaults()
	return withHooks(ctx, ou.sqlSave, ou.mutation, ou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ou *OrganizationUpdate) SaveX(ctx context.Context) int {
	affected, err := ou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ou *OrganizationUpdate) Exec(ctx context.Context) error {
	_, err := ou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ou *OrganizationUpdate) ExecX(ctx context.Context) {
	if err := ou.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ou *OrganizationUpdate) defaults() {
	if _, ok := ou.mutation.UpdatedAt(); !ok && !ou.mutation.UpdatedAtCleared() {
		v := organization.UpdateDefaultUpdatedAt()
		ou.mutation.SetUpdatedAt(v)
	}
}

func (ou *OrganizationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(organization.Table, organization.Columns, sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString))
	if ps := ou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ou.mutation.Name(); ok {
		_spec.SetField(organization.FieldName, field.TypeString, value)
	}
	if ou.mutation.NameCleared() {
		_spec.ClearField(organization.FieldName, field.TypeString)
	}
	if value, ok := ou.mutation.Slug(); ok {
		_spec.SetField(organization.FieldSlug, field.TypeString, value)
	}
	if ou.mutation.SlugCleared() {
		_spec.ClearField(organization.FieldSlug, field.TypeString)
	}
	if value, ok := ou.mutation.GetType(); ok {
		_spec.SetField(organization.FieldType, field.TypeString, value)
	}
	if ou.mutation.TypeCleared() {
		_spec.ClearField(organization.FieldType, field.TypeString)
	}
	if value, ok := ou.mutation.Disabled(); ok {
		_spec.SetField(organization.FieldDisabled, field.TypeBool, value)
	}
	if ou.mutation.DisabledCleared() {
		_spec.ClearField(organization.FieldDisabled, field.TypeBool)
	}
	if value, ok := ou.mutation.Description(); ok {
		_spec.SetField(organization.FieldDescription, field.TypeString, value)
	}
	if ou.mutation.DescriptionCleared() {
		_spec.ClearField(organization.FieldDescription, field.TypeString)
	}
	if value, ok := ou.mutation.Leader(); ok {
		_spec.SetField(organization.FieldLeader, field.TypeJSON, value)
	}
	if ou.mutation.LeaderCleared() {
		_spec.ClearField(organization.FieldLeader, field.TypeJSON)
	}
	if value, ok := ou.mutation.Extras(); ok {
		_spec.SetField(organization.FieldExtras, field.TypeJSON, value)
	}
	if ou.mutation.ExtrasCleared() {
		_spec.ClearField(organization.FieldExtras, field.TypeJSON)
	}
	if value, ok := ou.mutation.ParentID(); ok {
		_spec.SetField(organization.FieldParentID, field.TypeString, value)
	}
	if ou.mutation.ParentIDCleared() {
		_spec.ClearField(organization.FieldParentID, field.TypeString)
	}
	if value, ok := ou.mutation.CreatedBy(); ok {
		_spec.SetField(organization.FieldCreatedBy, field.TypeString, value)
	}
	if ou.mutation.CreatedByCleared() {
		_spec.ClearField(organization.FieldCreatedBy, field.TypeString)
	}
	if value, ok := ou.mutation.UpdatedBy(); ok {
		_spec.SetField(organization.FieldUpdatedBy, field.TypeString, value)
	}
	if ou.mutation.UpdatedByCleared() {
		_spec.ClearField(organization.FieldUpdatedBy, field.TypeString)
	}
	if ou.mutation.CreatedAtCleared() {
		_spec.ClearField(organization.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := ou.mutation.UpdatedAt(); ok {
		_spec.SetField(organization.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := ou.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(organization.FieldUpdatedAt, field.TypeInt64, value)
	}
	if ou.mutation.UpdatedAtCleared() {
		_spec.ClearField(organization.FieldUpdatedAt, field.TypeInt64)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{organization.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ou.mutation.done = true
	return n, nil
}

// OrganizationUpdateOne is the builder for updating a single Organization entity.
type OrganizationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrganizationMutation
}

// SetName sets the "name" field.
func (ouo *OrganizationUpdateOne) SetName(s string) *OrganizationUpdateOne {
	ouo.mutation.SetName(s)
	return ouo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableName(s *string) *OrganizationUpdateOne {
	if s != nil {
		ouo.SetName(*s)
	}
	return ouo
}

// ClearName clears the value of the "name" field.
func (ouo *OrganizationUpdateOne) ClearName() *OrganizationUpdateOne {
	ouo.mutation.ClearName()
	return ouo
}

// SetSlug sets the "slug" field.
func (ouo *OrganizationUpdateOne) SetSlug(s string) *OrganizationUpdateOne {
	ouo.mutation.SetSlug(s)
	return ouo
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableSlug(s *string) *OrganizationUpdateOne {
	if s != nil {
		ouo.SetSlug(*s)
	}
	return ouo
}

// ClearSlug clears the value of the "slug" field.
func (ouo *OrganizationUpdateOne) ClearSlug() *OrganizationUpdateOne {
	ouo.mutation.ClearSlug()
	return ouo
}

// SetType sets the "type" field.
func (ouo *OrganizationUpdateOne) SetType(s string) *OrganizationUpdateOne {
	ouo.mutation.SetType(s)
	return ouo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableType(s *string) *OrganizationUpdateOne {
	if s != nil {
		ouo.SetType(*s)
	}
	return ouo
}

// ClearType clears the value of the "type" field.
func (ouo *OrganizationUpdateOne) ClearType() *OrganizationUpdateOne {
	ouo.mutation.ClearType()
	return ouo
}

// SetDisabled sets the "disabled" field.
func (ouo *OrganizationUpdateOne) SetDisabled(b bool) *OrganizationUpdateOne {
	ouo.mutation.SetDisabled(b)
	return ouo
}

// SetNillableDisabled sets the "disabled" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableDisabled(b *bool) *OrganizationUpdateOne {
	if b != nil {
		ouo.SetDisabled(*b)
	}
	return ouo
}

// ClearDisabled clears the value of the "disabled" field.
func (ouo *OrganizationUpdateOne) ClearDisabled() *OrganizationUpdateOne {
	ouo.mutation.ClearDisabled()
	return ouo
}

// SetDescription sets the "description" field.
func (ouo *OrganizationUpdateOne) SetDescription(s string) *OrganizationUpdateOne {
	ouo.mutation.SetDescription(s)
	return ouo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableDescription(s *string) *OrganizationUpdateOne {
	if s != nil {
		ouo.SetDescription(*s)
	}
	return ouo
}

// ClearDescription clears the value of the "description" field.
func (ouo *OrganizationUpdateOne) ClearDescription() *OrganizationUpdateOne {
	ouo.mutation.ClearDescription()
	return ouo
}

// SetLeader sets the "leader" field.
func (ouo *OrganizationUpdateOne) SetLeader(m map[string]interface{}) *OrganizationUpdateOne {
	ouo.mutation.SetLeader(m)
	return ouo
}

// ClearLeader clears the value of the "leader" field.
func (ouo *OrganizationUpdateOne) ClearLeader() *OrganizationUpdateOne {
	ouo.mutation.ClearLeader()
	return ouo
}

// SetExtras sets the "extras" field.
func (ouo *OrganizationUpdateOne) SetExtras(m map[string]interface{}) *OrganizationUpdateOne {
	ouo.mutation.SetExtras(m)
	return ouo
}

// ClearExtras clears the value of the "extras" field.
func (ouo *OrganizationUpdateOne) ClearExtras() *OrganizationUpdateOne {
	ouo.mutation.ClearExtras()
	return ouo
}

// SetParentID sets the "parent_id" field.
func (ouo *OrganizationUpdateOne) SetParentID(s string) *OrganizationUpdateOne {
	ouo.mutation.SetParentID(s)
	return ouo
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableParentID(s *string) *OrganizationUpdateOne {
	if s != nil {
		ouo.SetParentID(*s)
	}
	return ouo
}

// ClearParentID clears the value of the "parent_id" field.
func (ouo *OrganizationUpdateOne) ClearParentID() *OrganizationUpdateOne {
	ouo.mutation.ClearParentID()
	return ouo
}

// SetCreatedBy sets the "created_by" field.
func (ouo *OrganizationUpdateOne) SetCreatedBy(s string) *OrganizationUpdateOne {
	ouo.mutation.SetCreatedBy(s)
	return ouo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableCreatedBy(s *string) *OrganizationUpdateOne {
	if s != nil {
		ouo.SetCreatedBy(*s)
	}
	return ouo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (ouo *OrganizationUpdateOne) ClearCreatedBy() *OrganizationUpdateOne {
	ouo.mutation.ClearCreatedBy()
	return ouo
}

// SetUpdatedBy sets the "updated_by" field.
func (ouo *OrganizationUpdateOne) SetUpdatedBy(s string) *OrganizationUpdateOne {
	ouo.mutation.SetUpdatedBy(s)
	return ouo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableUpdatedBy(s *string) *OrganizationUpdateOne {
	if s != nil {
		ouo.SetUpdatedBy(*s)
	}
	return ouo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (ouo *OrganizationUpdateOne) ClearUpdatedBy() *OrganizationUpdateOne {
	ouo.mutation.ClearUpdatedBy()
	return ouo
}

// SetUpdatedAt sets the "updated_at" field.
func (ouo *OrganizationUpdateOne) SetUpdatedAt(i int64) *OrganizationUpdateOne {
	ouo.mutation.ResetUpdatedAt()
	ouo.mutation.SetUpdatedAt(i)
	return ouo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (ouo *OrganizationUpdateOne) AddUpdatedAt(i int64) *OrganizationUpdateOne {
	ouo.mutation.AddUpdatedAt(i)
	return ouo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (ouo *OrganizationUpdateOne) ClearUpdatedAt() *OrganizationUpdateOne {
	ouo.mutation.ClearUpdatedAt()
	return ouo
}

// Mutation returns the OrganizationMutation object of the builder.
func (ouo *OrganizationUpdateOne) Mutation() *OrganizationMutation {
	return ouo.mutation
}

// Where appends a list predicates to the OrganizationUpdate builder.
func (ouo *OrganizationUpdateOne) Where(ps ...predicate.Organization) *OrganizationUpdateOne {
	ouo.mutation.Where(ps...)
	return ouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ouo *OrganizationUpdateOne) Select(field string, fields ...string) *OrganizationUpdateOne {
	ouo.fields = append([]string{field}, fields...)
	return ouo
}

// Save executes the query and returns the updated Organization entity.
func (ouo *OrganizationUpdateOne) Save(ctx context.Context) (*Organization, error) {
	ouo.defaults()
	return withHooks(ctx, ouo.sqlSave, ouo.mutation, ouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ouo *OrganizationUpdateOne) SaveX(ctx context.Context) *Organization {
	node, err := ouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ouo *OrganizationUpdateOne) Exec(ctx context.Context) error {
	_, err := ouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouo *OrganizationUpdateOne) ExecX(ctx context.Context) {
	if err := ouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ouo *OrganizationUpdateOne) defaults() {
	if _, ok := ouo.mutation.UpdatedAt(); !ok && !ouo.mutation.UpdatedAtCleared() {
		v := organization.UpdateDefaultUpdatedAt()
		ouo.mutation.SetUpdatedAt(v)
	}
}

func (ouo *OrganizationUpdateOne) sqlSave(ctx context.Context) (_node *Organization, err error) {
	_spec := sqlgraph.NewUpdateSpec(organization.Table, organization.Columns, sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString))
	id, ok := ouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Organization.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, organization.FieldID)
		for _, f := range fields {
			if !organization.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != organization.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ouo.mutation.Name(); ok {
		_spec.SetField(organization.FieldName, field.TypeString, value)
	}
	if ouo.mutation.NameCleared() {
		_spec.ClearField(organization.FieldName, field.TypeString)
	}
	if value, ok := ouo.mutation.Slug(); ok {
		_spec.SetField(organization.FieldSlug, field.TypeString, value)
	}
	if ouo.mutation.SlugCleared() {
		_spec.ClearField(organization.FieldSlug, field.TypeString)
	}
	if value, ok := ouo.mutation.GetType(); ok {
		_spec.SetField(organization.FieldType, field.TypeString, value)
	}
	if ouo.mutation.TypeCleared() {
		_spec.ClearField(organization.FieldType, field.TypeString)
	}
	if value, ok := ouo.mutation.Disabled(); ok {
		_spec.SetField(organization.FieldDisabled, field.TypeBool, value)
	}
	if ouo.mutation.DisabledCleared() {
		_spec.ClearField(organization.FieldDisabled, field.TypeBool)
	}
	if value, ok := ouo.mutation.Description(); ok {
		_spec.SetField(organization.FieldDescription, field.TypeString, value)
	}
	if ouo.mutation.DescriptionCleared() {
		_spec.ClearField(organization.FieldDescription, field.TypeString)
	}
	if value, ok := ouo.mutation.Leader(); ok {
		_spec.SetField(organization.FieldLeader, field.TypeJSON, value)
	}
	if ouo.mutation.LeaderCleared() {
		_spec.ClearField(organization.FieldLeader, field.TypeJSON)
	}
	if value, ok := ouo.mutation.Extras(); ok {
		_spec.SetField(organization.FieldExtras, field.TypeJSON, value)
	}
	if ouo.mutation.ExtrasCleared() {
		_spec.ClearField(organization.FieldExtras, field.TypeJSON)
	}
	if value, ok := ouo.mutation.ParentID(); ok {
		_spec.SetField(organization.FieldParentID, field.TypeString, value)
	}
	if ouo.mutation.ParentIDCleared() {
		_spec.ClearField(organization.FieldParentID, field.TypeString)
	}
	if value, ok := ouo.mutation.CreatedBy(); ok {
		_spec.SetField(organization.FieldCreatedBy, field.TypeString, value)
	}
	if ouo.mutation.CreatedByCleared() {
		_spec.ClearField(organization.FieldCreatedBy, field.TypeString)
	}
	if value, ok := ouo.mutation.UpdatedBy(); ok {
		_spec.SetField(organization.FieldUpdatedBy, field.TypeString, value)
	}
	if ouo.mutation.UpdatedByCleared() {
		_spec.ClearField(organization.FieldUpdatedBy, field.TypeString)
	}
	if ouo.mutation.CreatedAtCleared() {
		_spec.ClearField(organization.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := ouo.mutation.UpdatedAt(); ok {
		_spec.SetField(organization.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := ouo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(organization.FieldUpdatedAt, field.TypeInt64, value)
	}
	if ouo.mutation.UpdatedAtCleared() {
		_spec.ClearField(organization.FieldUpdatedAt, field.TypeInt64)
	}
	_node = &Organization{config: ouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{organization.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ouo.mutation.done = true
	return _node, nil
}
