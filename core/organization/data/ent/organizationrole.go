// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"ncobase/organization/data/ent/organizationrole"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// OrganizationRole is the model entity for the OrganizationRole schema.
type OrganizationRole struct {
	config `json:"-"`
	// ID of the ent.
	// primary key
	ID string `json:"id,omitempty"`
	// organization id
	OrgID string `json:"org_id,omitempty"`
	// role id
	RoleID string `json:"role_id,omitempty"`
	// id of the creator
	CreatedBy string `json:"created_by,omitempty"`
	// id of the last updater
	UpdatedBy string `json:"updated_by,omitempty"`
	// created at
	CreatedAt int64 `json:"created_at,omitempty"`
	// updated at
	UpdatedAt    int64 `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OrganizationRole) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case organizationrole.FieldCreatedAt, organizationrole.FieldUpdatedAt:
			values[i] = new(sql.NullInt64)
		case organizationrole.FieldID, organizationrole.FieldOrgID, organizationrole.FieldRoleID, organizationrole.FieldCreatedBy, organizationrole.FieldUpdatedBy:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OrganizationRole fields.
func (or *OrganizationRole) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case organizationrole.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				or.ID = value.String
			}
		case organizationrole.FieldOrgID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field org_id", values[i])
			} else if value.Valid {
				or.OrgID = value.String
			}
		case organizationrole.FieldRoleID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field role_id", values[i])
			} else if value.Valid {
				or.RoleID = value.String
			}
		case organizationrole.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				or.CreatedBy = value.String
			}
		case organizationrole.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				or.UpdatedBy = value.String
			}
		case organizationrole.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				or.CreatedAt = value.Int64
			}
		case organizationrole.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				or.UpdatedAt = value.Int64
			}
		default:
			or.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OrganizationRole.
// This includes values selected through modifiers, order, etc.
func (or *OrganizationRole) Value(name string) (ent.Value, error) {
	return or.selectValues.Get(name)
}

// Update returns a builder for updating this OrganizationRole.
// Note that you need to call OrganizationRole.Unwrap() before calling this method if this OrganizationRole
// was returned from a transaction, and the transaction was committed or rolled back.
func (or *OrganizationRole) Update() *OrganizationRoleUpdateOne {
	return NewOrganizationRoleClient(or.config).UpdateOne(or)
}

// Unwrap unwraps the OrganizationRole entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (or *OrganizationRole) Unwrap() *OrganizationRole {
	_tx, ok := or.config.driver.(*txDriver)
	if !ok {
		panic("ent: OrganizationRole is not a transactional entity")
	}
	or.config.driver = _tx.drv
	return or
}

// String implements the fmt.Stringer.
func (or *OrganizationRole) String() string {
	var builder strings.Builder
	builder.WriteString("OrganizationRole(")
	builder.WriteString(fmt.Sprintf("id=%v, ", or.ID))
	builder.WriteString("org_id=")
	builder.WriteString(or.OrgID)
	builder.WriteString(", ")
	builder.WriteString("role_id=")
	builder.WriteString(or.RoleID)
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(or.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(or.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", or.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", or.UpdatedAt))
	builder.WriteByte(')')
	return builder.String()
}

// OrganizationRoles is a parsable slice of OrganizationRole.
type OrganizationRoles []*OrganizationRole
