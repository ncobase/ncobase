// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"ncobase/organization/data/ent/organizationrole"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OrganizationRoleCreate is the builder for creating a OrganizationRole entity.
type OrganizationRoleCreate struct {
	config
	mutation *OrganizationRoleMutation
	hooks    []Hook
}

// SetOrgID sets the "org_id" field.
func (orc *OrganizationRoleCreate) SetOrgID(s string) *OrganizationRoleCreate {
	orc.mutation.SetOrgID(s)
	return orc
}

// SetNillableOrgID sets the "org_id" field if the given value is not nil.
func (orc *OrganizationRoleCreate) SetNillableOrgID(s *string) *OrganizationRoleCreate {
	if s != nil {
		orc.SetOrgID(*s)
	}
	return orc
}

// SetRoleID sets the "role_id" field.
func (orc *OrganizationRoleCreate) SetRoleID(s string) *OrganizationRoleCreate {
	orc.mutation.SetRoleID(s)
	return orc
}

// SetNillableRoleID sets the "role_id" field if the given value is not nil.
func (orc *OrganizationRoleCreate) SetNillableRoleID(s *string) *OrganizationRoleCreate {
	if s != nil {
		orc.SetRoleID(*s)
	}
	return orc
}

// SetCreatedBy sets the "created_by" field.
func (orc *OrganizationRoleCreate) SetCreatedBy(s string) *OrganizationRoleCreate {
	orc.mutation.SetCreatedBy(s)
	return orc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (orc *OrganizationRoleCreate) SetNillableCreatedBy(s *string) *OrganizationRoleCreate {
	if s != nil {
		orc.SetCreatedBy(*s)
	}
	return orc
}

// SetUpdatedBy sets the "updated_by" field.
func (orc *OrganizationRoleCreate) SetUpdatedBy(s string) *OrganizationRoleCreate {
	orc.mutation.SetUpdatedBy(s)
	return orc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (orc *OrganizationRoleCreate) SetNillableUpdatedBy(s *string) *OrganizationRoleCreate {
	if s != nil {
		orc.SetUpdatedBy(*s)
	}
	return orc
}

// SetCreatedAt sets the "created_at" field.
func (orc *OrganizationRoleCreate) SetCreatedAt(i int64) *OrganizationRoleCreate {
	orc.mutation.SetCreatedAt(i)
	return orc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (orc *OrganizationRoleCreate) SetNillableCreatedAt(i *int64) *OrganizationRoleCreate {
	if i != nil {
		orc.SetCreatedAt(*i)
	}
	return orc
}

// SetUpdatedAt sets the "updated_at" field.
func (orc *OrganizationRoleCreate) SetUpdatedAt(i int64) *OrganizationRoleCreate {
	orc.mutation.SetUpdatedAt(i)
	return orc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (orc *OrganizationRoleCreate) SetNillableUpdatedAt(i *int64) *OrganizationRoleCreate {
	if i != nil {
		orc.SetUpdatedAt(*i)
	}
	return orc
}

// SetID sets the "id" field.
func (orc *OrganizationRoleCreate) SetID(s string) *OrganizationRoleCreate {
	orc.mutation.SetID(s)
	return orc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (orc *OrganizationRoleCreate) SetNillableID(s *string) *OrganizationRoleCreate {
	if s != nil {
		orc.SetID(*s)
	}
	return orc
}

// Mutation returns the OrganizationRoleMutation object of the builder.
func (orc *OrganizationRoleCreate) Mutation() *OrganizationRoleMutation {
	return orc.mutation
}

// Save creates the OrganizationRole in the database.
func (orc *OrganizationRoleCreate) Save(ctx context.Context) (*OrganizationRole, error) {
	orc.defaults()
	return withHooks(ctx, orc.sqlSave, orc.mutation, orc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (orc *OrganizationRoleCreate) SaveX(ctx context.Context) *OrganizationRole {
	v, err := orc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (orc *OrganizationRoleCreate) Exec(ctx context.Context) error {
	_, err := orc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (orc *OrganizationRoleCreate) ExecX(ctx context.Context) {
	if err := orc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (orc *OrganizationRoleCreate) defaults() {
	if _, ok := orc.mutation.CreatedAt(); !ok {
		v := organizationrole.DefaultCreatedAt()
		orc.mutation.SetCreatedAt(v)
	}
	if _, ok := orc.mutation.UpdatedAt(); !ok {
		v := organizationrole.DefaultUpdatedAt()
		orc.mutation.SetUpdatedAt(v)
	}
	if _, ok := orc.mutation.ID(); !ok {
		v := organizationrole.DefaultID()
		orc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (orc *OrganizationRoleCreate) check() error {
	if v, ok := orc.mutation.ID(); ok {
		if err := organizationrole.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "OrganizationRole.id": %w`, err)}
		}
	}
	return nil
}

func (orc *OrganizationRoleCreate) sqlSave(ctx context.Context) (*OrganizationRole, error) {
	if err := orc.check(); err != nil {
		return nil, err
	}
	_node, _spec := orc.createSpec()
	if err := sqlgraph.CreateNode(ctx, orc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected OrganizationRole.ID type: %T", _spec.ID.Value)
		}
	}
	orc.mutation.id = &_node.ID
	orc.mutation.done = true
	return _node, nil
}

func (orc *OrganizationRoleCreate) createSpec() (*OrganizationRole, *sqlgraph.CreateSpec) {
	var (
		_node = &OrganizationRole{config: orc.config}
		_spec = sqlgraph.NewCreateSpec(organizationrole.Table, sqlgraph.NewFieldSpec(organizationrole.FieldID, field.TypeString))
	)
	if id, ok := orc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := orc.mutation.OrgID(); ok {
		_spec.SetField(organizationrole.FieldOrgID, field.TypeString, value)
		_node.OrgID = value
	}
	if value, ok := orc.mutation.RoleID(); ok {
		_spec.SetField(organizationrole.FieldRoleID, field.TypeString, value)
		_node.RoleID = value
	}
	if value, ok := orc.mutation.CreatedBy(); ok {
		_spec.SetField(organizationrole.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := orc.mutation.UpdatedBy(); ok {
		_spec.SetField(organizationrole.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := orc.mutation.CreatedAt(); ok {
		_spec.SetField(organizationrole.FieldCreatedAt, field.TypeInt64, value)
		_node.CreatedAt = value
	}
	if value, ok := orc.mutation.UpdatedAt(); ok {
		_spec.SetField(organizationrole.FieldUpdatedAt, field.TypeInt64, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// OrganizationRoleCreateBulk is the builder for creating many OrganizationRole entities in bulk.
type OrganizationRoleCreateBulk struct {
	config
	err      error
	builders []*OrganizationRoleCreate
}

// Save creates the OrganizationRole entities in the database.
func (orcb *OrganizationRoleCreateBulk) Save(ctx context.Context) ([]*OrganizationRole, error) {
	if orcb.err != nil {
		return nil, orcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(orcb.builders))
	nodes := make([]*OrganizationRole, len(orcb.builders))
	mutators := make([]Mutator, len(orcb.builders))
	for i := range orcb.builders {
		func(i int, root context.Context) {
			builder := orcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrganizationRoleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, orcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, orcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, orcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (orcb *OrganizationRoleCreateBulk) SaveX(ctx context.Context) []*OrganizationRole {
	v, err := orcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (orcb *OrganizationRoleCreateBulk) Exec(ctx context.Context) error {
	_, err := orcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (orcb *OrganizationRoleCreateBulk) ExecX(ctx context.Context) {
	if err := orcb.Exec(ctx); err != nil {
		panic(err)
	}
}
