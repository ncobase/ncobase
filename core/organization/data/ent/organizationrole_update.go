// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/organization/data/ent/organizationrole"
	"ncobase/organization/data/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OrganizationRoleUpdate is the builder for updating OrganizationRole entities.
type OrganizationRoleUpdate struct {
	config
	hooks    []Hook
	mutation *OrganizationRoleMutation
}

// Where appends a list predicates to the OrganizationRoleUpdate builder.
func (oru *OrganizationRoleUpdate) Where(ps ...predicate.OrganizationRole) *OrganizationRoleUpdate {
	oru.mutation.Where(ps...)
	return oru
}

// SetOrgID sets the "org_id" field.
func (oru *OrganizationRoleUpdate) SetOrgID(s string) *OrganizationRoleUpdate {
	oru.mutation.SetOrgID(s)
	return oru
}

// SetNillableOrgID sets the "org_id" field if the given value is not nil.
func (oru *OrganizationRoleUpdate) SetNillableOrgID(s *string) *OrganizationRoleUpdate {
	if s != nil {
		oru.SetOrgID(*s)
	}
	return oru
}

// ClearOrgID clears the value of the "org_id" field.
func (oru *OrganizationRoleUpdate) ClearOrgID() *OrganizationRoleUpdate {
	oru.mutation.ClearOrgID()
	return oru
}

// SetRoleID sets the "role_id" field.
func (oru *OrganizationRoleUpdate) SetRoleID(s string) *OrganizationRoleUpdate {
	oru.mutation.SetRoleID(s)
	return oru
}

// SetNillableRoleID sets the "role_id" field if the given value is not nil.
func (oru *OrganizationRoleUpdate) SetNillableRoleID(s *string) *OrganizationRoleUpdate {
	if s != nil {
		oru.SetRoleID(*s)
	}
	return oru
}

// ClearRoleID clears the value of the "role_id" field.
func (oru *OrganizationRoleUpdate) ClearRoleID() *OrganizationRoleUpdate {
	oru.mutation.ClearRoleID()
	return oru
}

// SetCreatedBy sets the "created_by" field.
func (oru *OrganizationRoleUpdate) SetCreatedBy(s string) *OrganizationRoleUpdate {
	oru.mutation.SetCreatedBy(s)
	return oru
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (oru *OrganizationRoleUpdate) SetNillableCreatedBy(s *string) *OrganizationRoleUpdate {
	if s != nil {
		oru.SetCreatedBy(*s)
	}
	return oru
}

// ClearCreatedBy clears the value of the "created_by" field.
func (oru *OrganizationRoleUpdate) ClearCreatedBy() *OrganizationRoleUpdate {
	oru.mutation.ClearCreatedBy()
	return oru
}

// SetUpdatedBy sets the "updated_by" field.
func (oru *OrganizationRoleUpdate) SetUpdatedBy(s string) *OrganizationRoleUpdate {
	oru.mutation.SetUpdatedBy(s)
	return oru
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (oru *OrganizationRoleUpdate) SetNillableUpdatedBy(s *string) *OrganizationRoleUpdate {
	if s != nil {
		oru.SetUpdatedBy(*s)
	}
	return oru
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (oru *OrganizationRoleUpdate) ClearUpdatedBy() *OrganizationRoleUpdate {
	oru.mutation.ClearUpdatedBy()
	return oru
}

// SetUpdatedAt sets the "updated_at" field.
func (oru *OrganizationRoleUpdate) SetUpdatedAt(i int64) *OrganizationRoleUpdate {
	oru.mutation.ResetUpdatedAt()
	oru.mutation.SetUpdatedAt(i)
	return oru
}

// AddUpdatedAt adds i to the "updated_at" field.
func (oru *OrganizationRoleUpdate) AddUpdatedAt(i int64) *OrganizationRoleUpdate {
	oru.mutation.AddUpdatedAt(i)
	return oru
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (oru *OrganizationRoleUpdate) ClearUpdatedAt() *OrganizationRoleUpdate {
	oru.mutation.ClearUpdatedAt()
	return oru
}

// Mutation returns the OrganizationRoleMutation object of the builder.
func (oru *OrganizationRoleUpdate) Mutation() *OrganizationRoleMutation {
	return oru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (oru *OrganizationRoleUpdate) Save(ctx context.Context) (int, error) {
	oru.defaults()
	return withHooks(ctx, oru.sqlSave, oru.mutation, oru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (oru *OrganizationRoleUpdate) SaveX(ctx context.Context) int {
	affected, err := oru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (oru *OrganizationRoleUpdate) Exec(ctx context.Context) error {
	_, err := oru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oru *OrganizationRoleUpdate) ExecX(ctx context.Context) {
	if err := oru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oru *OrganizationRoleUpdate) defaults() {
	if _, ok := oru.mutation.UpdatedAt(); !ok && !oru.mutation.UpdatedAtCleared() {
		v := organizationrole.UpdateDefaultUpdatedAt()
		oru.mutation.SetUpdatedAt(v)
	}
}

func (oru *OrganizationRoleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(organizationrole.Table, organizationrole.Columns, sqlgraph.NewFieldSpec(organizationrole.FieldID, field.TypeString))
	if ps := oru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oru.mutation.OrgID(); ok {
		_spec.SetField(organizationrole.FieldOrgID, field.TypeString, value)
	}
	if oru.mutation.OrgIDCleared() {
		_spec.ClearField(organizationrole.FieldOrgID, field.TypeString)
	}
	if value, ok := oru.mutation.RoleID(); ok {
		_spec.SetField(organizationrole.FieldRoleID, field.TypeString, value)
	}
	if oru.mutation.RoleIDCleared() {
		_spec.ClearField(organizationrole.FieldRoleID, field.TypeString)
	}
	if value, ok := oru.mutation.CreatedBy(); ok {
		_spec.SetField(organizationrole.FieldCreatedBy, field.TypeString, value)
	}
	if oru.mutation.CreatedByCleared() {
		_spec.ClearField(organizationrole.FieldCreatedBy, field.TypeString)
	}
	if value, ok := oru.mutation.UpdatedBy(); ok {
		_spec.SetField(organizationrole.FieldUpdatedBy, field.TypeString, value)
	}
	if oru.mutation.UpdatedByCleared() {
		_spec.ClearField(organizationrole.FieldUpdatedBy, field.TypeString)
	}
	if oru.mutation.CreatedAtCleared() {
		_spec.ClearField(organizationrole.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := oru.mutation.UpdatedAt(); ok {
		_spec.SetField(organizationrole.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := oru.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(organizationrole.FieldUpdatedAt, field.TypeInt64, value)
	}
	if oru.mutation.UpdatedAtCleared() {
		_spec.ClearField(organizationrole.FieldUpdatedAt, field.TypeInt64)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, oru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{organizationrole.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	oru.mutation.done = true
	return n, nil
}

// OrganizationRoleUpdateOne is the builder for updating a single OrganizationRole entity.
type OrganizationRoleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrganizationRoleMutation
}

// SetOrgID sets the "org_id" field.
func (oruo *OrganizationRoleUpdateOne) SetOrgID(s string) *OrganizationRoleUpdateOne {
	oruo.mutation.SetOrgID(s)
	return oruo
}

// SetNillableOrgID sets the "org_id" field if the given value is not nil.
func (oruo *OrganizationRoleUpdateOne) SetNillableOrgID(s *string) *OrganizationRoleUpdateOne {
	if s != nil {
		oruo.SetOrgID(*s)
	}
	return oruo
}

// ClearOrgID clears the value of the "org_id" field.
func (oruo *OrganizationRoleUpdateOne) ClearOrgID() *OrganizationRoleUpdateOne {
	oruo.mutation.ClearOrgID()
	return oruo
}

// SetRoleID sets the "role_id" field.
func (oruo *OrganizationRoleUpdateOne) SetRoleID(s string) *OrganizationRoleUpdateOne {
	oruo.mutation.SetRoleID(s)
	return oruo
}

// SetNillableRoleID sets the "role_id" field if the given value is not nil.
func (oruo *OrganizationRoleUpdateOne) SetNillableRoleID(s *string) *OrganizationRoleUpdateOne {
	if s != nil {
		oruo.SetRoleID(*s)
	}
	return oruo
}

// ClearRoleID clears the value of the "role_id" field.
func (oruo *OrganizationRoleUpdateOne) ClearRoleID() *OrganizationRoleUpdateOne {
	oruo.mutation.ClearRoleID()
	return oruo
}

// SetCreatedBy sets the "created_by" field.
func (oruo *OrganizationRoleUpdateOne) SetCreatedBy(s string) *OrganizationRoleUpdateOne {
	oruo.mutation.SetCreatedBy(s)
	return oruo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (oruo *OrganizationRoleUpdateOne) SetNillableCreatedBy(s *string) *OrganizationRoleUpdateOne {
	if s != nil {
		oruo.SetCreatedBy(*s)
	}
	return oruo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (oruo *OrganizationRoleUpdateOne) ClearCreatedBy() *OrganizationRoleUpdateOne {
	oruo.mutation.ClearCreatedBy()
	return oruo
}

// SetUpdatedBy sets the "updated_by" field.
func (oruo *OrganizationRoleUpdateOne) SetUpdatedBy(s string) *OrganizationRoleUpdateOne {
	oruo.mutation.SetUpdatedBy(s)
	return oruo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (oruo *OrganizationRoleUpdateOne) SetNillableUpdatedBy(s *string) *OrganizationRoleUpdateOne {
	if s != nil {
		oruo.SetUpdatedBy(*s)
	}
	return oruo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (oruo *OrganizationRoleUpdateOne) ClearUpdatedBy() *OrganizationRoleUpdateOne {
	oruo.mutation.ClearUpdatedBy()
	return oruo
}

// SetUpdatedAt sets the "updated_at" field.
func (oruo *OrganizationRoleUpdateOne) SetUpdatedAt(i int64) *OrganizationRoleUpdateOne {
	oruo.mutation.ResetUpdatedAt()
	oruo.mutation.SetUpdatedAt(i)
	return oruo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (oruo *OrganizationRoleUpdateOne) AddUpdatedAt(i int64) *OrganizationRoleUpdateOne {
	oruo.mutation.AddUpdatedAt(i)
	return oruo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (oruo *OrganizationRoleUpdateOne) ClearUpdatedAt() *OrganizationRoleUpdateOne {
	oruo.mutation.ClearUpdatedAt()
	return oruo
}

// Mutation returns the OrganizationRoleMutation object of the builder.
func (oruo *OrganizationRoleUpdateOne) Mutation() *OrganizationRoleMutation {
	return oruo.mutation
}

// Where appends a list predicates to the OrganizationRoleUpdate builder.
func (oruo *OrganizationRoleUpdateOne) Where(ps ...predicate.OrganizationRole) *OrganizationRoleUpdateOne {
	oruo.mutation.Where(ps...)
	return oruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (oruo *OrganizationRoleUpdateOne) Select(field string, fields ...string) *OrganizationRoleUpdateOne {
	oruo.fields = append([]string{field}, fields...)
	return oruo
}

// Save executes the query and returns the updated OrganizationRole entity.
func (oruo *OrganizationRoleUpdateOne) Save(ctx context.Context) (*OrganizationRole, error) {
	oruo.defaults()
	return withHooks(ctx, oruo.sqlSave, oruo.mutation, oruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (oruo *OrganizationRoleUpdateOne) SaveX(ctx context.Context) *OrganizationRole {
	node, err := oruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (oruo *OrganizationRoleUpdateOne) Exec(ctx context.Context) error {
	_, err := oruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oruo *OrganizationRoleUpdateOne) ExecX(ctx context.Context) {
	if err := oruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oruo *OrganizationRoleUpdateOne) defaults() {
	if _, ok := oruo.mutation.UpdatedAt(); !ok && !oruo.mutation.UpdatedAtCleared() {
		v := organizationrole.UpdateDefaultUpdatedAt()
		oruo.mutation.SetUpdatedAt(v)
	}
}

func (oruo *OrganizationRoleUpdateOne) sqlSave(ctx context.Context) (_node *OrganizationRole, err error) {
	_spec := sqlgraph.NewUpdateSpec(organizationrole.Table, organizationrole.Columns, sqlgraph.NewFieldSpec(organizationrole.FieldID, field.TypeString))
	id, ok := oruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OrganizationRole.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := oruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, organizationrole.FieldID)
		for _, f := range fields {
			if !organizationrole.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != organizationrole.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := oruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oruo.mutation.OrgID(); ok {
		_spec.SetField(organizationrole.FieldOrgID, field.TypeString, value)
	}
	if oruo.mutation.OrgIDCleared() {
		_spec.ClearField(organizationrole.FieldOrgID, field.TypeString)
	}
	if value, ok := oruo.mutation.RoleID(); ok {
		_spec.SetField(organizationrole.FieldRoleID, field.TypeString, value)
	}
	if oruo.mutation.RoleIDCleared() {
		_spec.ClearField(organizationrole.FieldRoleID, field.TypeString)
	}
	if value, ok := oruo.mutation.CreatedBy(); ok {
		_spec.SetField(organizationrole.FieldCreatedBy, field.TypeString, value)
	}
	if oruo.mutation.CreatedByCleared() {
		_spec.ClearField(organizationrole.FieldCreatedBy, field.TypeString)
	}
	if value, ok := oruo.mutation.UpdatedBy(); ok {
		_spec.SetField(organizationrole.FieldUpdatedBy, field.TypeString, value)
	}
	if oruo.mutation.UpdatedByCleared() {
		_spec.ClearField(organizationrole.FieldUpdatedBy, field.TypeString)
	}
	if oruo.mutation.CreatedAtCleared() {
		_spec.ClearField(organizationrole.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := oruo.mutation.UpdatedAt(); ok {
		_spec.SetField(organizationrole.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := oruo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(organizationrole.FieldUpdatedAt, field.TypeInt64, value)
	}
	if oruo.mutation.UpdatedAtCleared() {
		_spec.ClearField(organizationrole.FieldUpdatedAt, field.TypeInt64)
	}
	_node = &OrganizationRole{config: oruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, oruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{organizationrole.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	oruo.mutation.done = true
	return _node, nil
}
