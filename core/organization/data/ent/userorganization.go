// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"ncobase/organization/data/ent/userorganization"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// UserOrganization is the model entity for the UserOrganization schema.
type UserOrganization struct {
	config `json:"-"`
	// ID of the ent.
	// primary key
	ID string `json:"id,omitempty"`
	// user id
	UserID string `json:"user_id,omitempty"`
	// organization id
	OrgID string `json:"org_id,omitempty"`
	// id of the creator
	CreatedBy string `json:"created_by,omitempty"`
	// id of the last updater
	UpdatedBy string `json:"updated_by,omitempty"`
	// created at
	CreatedAt int64 `json:"created_at,omitempty"`
	// updated at
	UpdatedAt int64 `json:"updated_at,omitempty"`
	// Role of the user in the organization
	Role         string `json:"role,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserOrganization) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case userorganization.FieldCreatedAt, userorganization.FieldUpdatedAt:
			values[i] = new(sql.NullInt64)
		case userorganization.FieldID, userorganization.FieldUserID, userorganization.FieldOrgID, userorganization.FieldCreatedBy, userorganization.FieldUpdatedBy, userorganization.FieldRole:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserOrganization fields.
func (uo *UserOrganization) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userorganization.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				uo.ID = value.String
			}
		case userorganization.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				uo.UserID = value.String
			}
		case userorganization.FieldOrgID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field org_id", values[i])
			} else if value.Valid {
				uo.OrgID = value.String
			}
		case userorganization.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				uo.CreatedBy = value.String
			}
		case userorganization.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				uo.UpdatedBy = value.String
			}
		case userorganization.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				uo.CreatedAt = value.Int64
			}
		case userorganization.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				uo.UpdatedAt = value.Int64
			}
		case userorganization.FieldRole:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field role", values[i])
			} else if value.Valid {
				uo.Role = value.String
			}
		default:
			uo.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserOrganization.
// This includes values selected through modifiers, order, etc.
func (uo *UserOrganization) Value(name string) (ent.Value, error) {
	return uo.selectValues.Get(name)
}

// Update returns a builder for updating this UserOrganization.
// Note that you need to call UserOrganization.Unwrap() before calling this method if this UserOrganization
// was returned from a transaction, and the transaction was committed or rolled back.
func (uo *UserOrganization) Update() *UserOrganizationUpdateOne {
	return NewUserOrganizationClient(uo.config).UpdateOne(uo)
}

// Unwrap unwraps the UserOrganization entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (uo *UserOrganization) Unwrap() *UserOrganization {
	_tx, ok := uo.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserOrganization is not a transactional entity")
	}
	uo.config.driver = _tx.drv
	return uo
}

// String implements the fmt.Stringer.
func (uo *UserOrganization) String() string {
	var builder strings.Builder
	builder.WriteString("UserOrganization(")
	builder.WriteString(fmt.Sprintf("id=%v, ", uo.ID))
	builder.WriteString("user_id=")
	builder.WriteString(uo.UserID)
	builder.WriteString(", ")
	builder.WriteString("org_id=")
	builder.WriteString(uo.OrgID)
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(uo.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(uo.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", uo.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", uo.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("role=")
	builder.WriteString(uo.Role)
	builder.WriteByte(')')
	return builder.String()
}

// UserOrganizations is a parsable slice of UserOrganization.
type UserOrganizations []*UserOrganization
