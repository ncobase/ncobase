// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/organization/data/ent/userorganization"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserOrganizationCreate is the builder for creating a UserOrganization entity.
type UserOrganizationCreate struct {
	config
	mutation *UserOrganizationMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (uoc *UserOrganizationCreate) SetUserID(s string) *UserOrganizationCreate {
	uoc.mutation.SetUserID(s)
	return uoc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (uoc *UserOrganizationCreate) SetNillableUserID(s *string) *UserOrganizationCreate {
	if s != nil {
		uoc.SetUserID(*s)
	}
	return uoc
}

// SetOrgID sets the "org_id" field.
func (uoc *UserOrganizationCreate) SetOrgID(s string) *UserOrganizationCreate {
	uoc.mutation.SetOrgID(s)
	return uoc
}

// SetNillableOrgID sets the "org_id" field if the given value is not nil.
func (uoc *UserOrganizationCreate) SetNillableOrgID(s *string) *UserOrganizationCreate {
	if s != nil {
		uoc.SetOrgID(*s)
	}
	return uoc
}

// SetCreatedBy sets the "created_by" field.
func (uoc *UserOrganizationCreate) SetCreatedBy(s string) *UserOrganizationCreate {
	uoc.mutation.SetCreatedBy(s)
	return uoc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (uoc *UserOrganizationCreate) SetNillableCreatedBy(s *string) *UserOrganizationCreate {
	if s != nil {
		uoc.SetCreatedBy(*s)
	}
	return uoc
}

// SetUpdatedBy sets the "updated_by" field.
func (uoc *UserOrganizationCreate) SetUpdatedBy(s string) *UserOrganizationCreate {
	uoc.mutation.SetUpdatedBy(s)
	return uoc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (uoc *UserOrganizationCreate) SetNillableUpdatedBy(s *string) *UserOrganizationCreate {
	if s != nil {
		uoc.SetUpdatedBy(*s)
	}
	return uoc
}

// SetCreatedAt sets the "created_at" field.
func (uoc *UserOrganizationCreate) SetCreatedAt(i int64) *UserOrganizationCreate {
	uoc.mutation.SetCreatedAt(i)
	return uoc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uoc *UserOrganizationCreate) SetNillableCreatedAt(i *int64) *UserOrganizationCreate {
	if i != nil {
		uoc.SetCreatedAt(*i)
	}
	return uoc
}

// SetUpdatedAt sets the "updated_at" field.
func (uoc *UserOrganizationCreate) SetUpdatedAt(i int64) *UserOrganizationCreate {
	uoc.mutation.SetUpdatedAt(i)
	return uoc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (uoc *UserOrganizationCreate) SetNillableUpdatedAt(i *int64) *UserOrganizationCreate {
	if i != nil {
		uoc.SetUpdatedAt(*i)
	}
	return uoc
}

// SetRole sets the "role" field.
func (uoc *UserOrganizationCreate) SetRole(s string) *UserOrganizationCreate {
	uoc.mutation.SetRole(s)
	return uoc
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (uoc *UserOrganizationCreate) SetNillableRole(s *string) *UserOrganizationCreate {
	if s != nil {
		uoc.SetRole(*s)
	}
	return uoc
}

// SetID sets the "id" field.
func (uoc *UserOrganizationCreate) SetID(s string) *UserOrganizationCreate {
	uoc.mutation.SetID(s)
	return uoc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (uoc *UserOrganizationCreate) SetNillableID(s *string) *UserOrganizationCreate {
	if s != nil {
		uoc.SetID(*s)
	}
	return uoc
}

// Mutation returns the UserOrganizationMutation object of the builder.
func (uoc *UserOrganizationCreate) Mutation() *UserOrganizationMutation {
	return uoc.mutation
}

// Save creates the UserOrganization in the database.
func (uoc *UserOrganizationCreate) Save(ctx context.Context) (*UserOrganization, error) {
	uoc.defaults()
	return withHooks(ctx, uoc.sqlSave, uoc.mutation, uoc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (uoc *UserOrganizationCreate) SaveX(ctx context.Context) *UserOrganization {
	v, err := uoc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uoc *UserOrganizationCreate) Exec(ctx context.Context) error {
	_, err := uoc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uoc *UserOrganizationCreate) ExecX(ctx context.Context) {
	if err := uoc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uoc *UserOrganizationCreate) defaults() {
	if _, ok := uoc.mutation.CreatedAt(); !ok {
		v := userorganization.DefaultCreatedAt()
		uoc.mutation.SetCreatedAt(v)
	}
	if _, ok := uoc.mutation.UpdatedAt(); !ok {
		v := userorganization.DefaultUpdatedAt()
		uoc.mutation.SetUpdatedAt(v)
	}
	if _, ok := uoc.mutation.Role(); !ok {
		v := userorganization.DefaultRole
		uoc.mutation.SetRole(v)
	}
	if _, ok := uoc.mutation.ID(); !ok {
		v := userorganization.DefaultID()
		uoc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uoc *UserOrganizationCreate) check() error {
	if _, ok := uoc.mutation.Role(); !ok {
		return &ValidationError{Name: "role", err: errors.New(`ent: missing required field "UserOrganization.role"`)}
	}
	if v, ok := uoc.mutation.Role(); ok {
		if err := userorganization.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "UserOrganization.role": %w`, err)}
		}
	}
	if v, ok := uoc.mutation.ID(); ok {
		if err := userorganization.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "UserOrganization.id": %w`, err)}
		}
	}
	return nil
}

func (uoc *UserOrganizationCreate) sqlSave(ctx context.Context) (*UserOrganization, error) {
	if err := uoc.check(); err != nil {
		return nil, err
	}
	_node, _spec := uoc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uoc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected UserOrganization.ID type: %T", _spec.ID.Value)
		}
	}
	uoc.mutation.id = &_node.ID
	uoc.mutation.done = true
	return _node, nil
}

func (uoc *UserOrganizationCreate) createSpec() (*UserOrganization, *sqlgraph.CreateSpec) {
	var (
		_node = &UserOrganization{config: uoc.config}
		_spec = sqlgraph.NewCreateSpec(userorganization.Table, sqlgraph.NewFieldSpec(userorganization.FieldID, field.TypeString))
	)
	if id, ok := uoc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := uoc.mutation.UserID(); ok {
		_spec.SetField(userorganization.FieldUserID, field.TypeString, value)
		_node.UserID = value
	}
	if value, ok := uoc.mutation.OrgID(); ok {
		_spec.SetField(userorganization.FieldOrgID, field.TypeString, value)
		_node.OrgID = value
	}
	if value, ok := uoc.mutation.CreatedBy(); ok {
		_spec.SetField(userorganization.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := uoc.mutation.UpdatedBy(); ok {
		_spec.SetField(userorganization.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := uoc.mutation.CreatedAt(); ok {
		_spec.SetField(userorganization.FieldCreatedAt, field.TypeInt64, value)
		_node.CreatedAt = value
	}
	if value, ok := uoc.mutation.UpdatedAt(); ok {
		_spec.SetField(userorganization.FieldUpdatedAt, field.TypeInt64, value)
		_node.UpdatedAt = value
	}
	if value, ok := uoc.mutation.Role(); ok {
		_spec.SetField(userorganization.FieldRole, field.TypeString, value)
		_node.Role = value
	}
	return _node, _spec
}

// UserOrganizationCreateBulk is the builder for creating many UserOrganization entities in bulk.
type UserOrganizationCreateBulk struct {
	config
	err      error
	builders []*UserOrganizationCreate
}

// Save creates the UserOrganization entities in the database.
func (uocb *UserOrganizationCreateBulk) Save(ctx context.Context) ([]*UserOrganization, error) {
	if uocb.err != nil {
		return nil, uocb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(uocb.builders))
	nodes := make([]*UserOrganization, len(uocb.builders))
	mutators := make([]Mutator, len(uocb.builders))
	for i := range uocb.builders {
		func(i int, root context.Context) {
			builder := uocb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserOrganizationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, uocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, uocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, uocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (uocb *UserOrganizationCreateBulk) SaveX(ctx context.Context) []*UserOrganization {
	v, err := uocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uocb *UserOrganizationCreateBulk) Exec(ctx context.Context) error {
	_, err := uocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uocb *UserOrganizationCreateBulk) ExecX(ctx context.Context) {
	if err := uocb.Exec(ctx); err != nil {
		panic(err)
	}
}
