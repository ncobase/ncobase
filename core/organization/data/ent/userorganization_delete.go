// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"ncobase/organization/data/ent/predicate"
	"ncobase/organization/data/ent/userorganization"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserOrganizationDelete is the builder for deleting a UserOrganization entity.
type UserOrganizationDelete struct {
	config
	hooks    []Hook
	mutation *UserOrganizationMutation
}

// Where appends a list predicates to the UserOrganizationDelete builder.
func (uod *UserOrganizationDelete) Where(ps ...predicate.UserOrganization) *UserOrganizationDelete {
	uod.mutation.Where(ps...)
	return uod
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (uod *UserOrganizationDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, uod.sqlExec, uod.mutation, uod.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (uod *UserOrganizationDelete) ExecX(ctx context.Context) int {
	n, err := uod.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (uod *UserOrganizationDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(userorganization.Table, sqlgraph.NewFieldSpec(userorganization.FieldID, field.TypeString))
	if ps := uod.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, uod.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	uod.mutation.done = true
	return affected, err
}

// UserOrganizationDeleteOne is the builder for deleting a single UserOrganization entity.
type UserOrganizationDeleteOne struct {
	uod *UserOrganizationDelete
}

// Where appends a list predicates to the UserOrganizationDelete builder.
func (uodo *UserOrganizationDeleteOne) Where(ps ...predicate.UserOrganization) *UserOrganizationDeleteOne {
	uodo.uod.mutation.Where(ps...)
	return uodo
}

// Exec executes the deletion query.
func (uodo *UserOrganizationDeleteOne) Exec(ctx context.Context) error {
	n, err := uodo.uod.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{userorganization.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (uodo *UserOrganizationDeleteOne) ExecX(ctx context.Context) {
	if err := uodo.Exec(ctx); err != nil {
		panic(err)
	}
}
