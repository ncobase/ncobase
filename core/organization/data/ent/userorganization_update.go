// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/organization/data/ent/predicate"
	"ncobase/organization/data/ent/userorganization"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserOrganizationUpdate is the builder for updating UserOrganization entities.
type UserOrganizationUpdate struct {
	config
	hooks    []Hook
	mutation *UserOrganizationMutation
}

// Where appends a list predicates to the UserOrganizationUpdate builder.
func (uou *UserOrganizationUpdate) Where(ps ...predicate.UserOrganization) *UserOrganizationUpdate {
	uou.mutation.Where(ps...)
	return uou
}

// SetUserID sets the "user_id" field.
func (uou *UserOrganizationUpdate) SetUserID(s string) *UserOrganizationUpdate {
	uou.mutation.SetUserID(s)
	return uou
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (uou *UserOrganizationUpdate) SetNillableUserID(s *string) *UserOrganizationUpdate {
	if s != nil {
		uou.SetUserID(*s)
	}
	return uou
}

// ClearUserID clears the value of the "user_id" field.
func (uou *UserOrganizationUpdate) ClearUserID() *UserOrganizationUpdate {
	uou.mutation.ClearUserID()
	return uou
}

// SetOrgID sets the "org_id" field.
func (uou *UserOrganizationUpdate) SetOrgID(s string) *UserOrganizationUpdate {
	uou.mutation.SetOrgID(s)
	return uou
}

// SetNillableOrgID sets the "org_id" field if the given value is not nil.
func (uou *UserOrganizationUpdate) SetNillableOrgID(s *string) *UserOrganizationUpdate {
	if s != nil {
		uou.SetOrgID(*s)
	}
	return uou
}

// ClearOrgID clears the value of the "org_id" field.
func (uou *UserOrganizationUpdate) ClearOrgID() *UserOrganizationUpdate {
	uou.mutation.ClearOrgID()
	return uou
}

// SetCreatedBy sets the "created_by" field.
func (uou *UserOrganizationUpdate) SetCreatedBy(s string) *UserOrganizationUpdate {
	uou.mutation.SetCreatedBy(s)
	return uou
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (uou *UserOrganizationUpdate) SetNillableCreatedBy(s *string) *UserOrganizationUpdate {
	if s != nil {
		uou.SetCreatedBy(*s)
	}
	return uou
}

// ClearCreatedBy clears the value of the "created_by" field.
func (uou *UserOrganizationUpdate) ClearCreatedBy() *UserOrganizationUpdate {
	uou.mutation.ClearCreatedBy()
	return uou
}

// SetUpdatedBy sets the "updated_by" field.
func (uou *UserOrganizationUpdate) SetUpdatedBy(s string) *UserOrganizationUpdate {
	uou.mutation.SetUpdatedBy(s)
	return uou
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (uou *UserOrganizationUpdate) SetNillableUpdatedBy(s *string) *UserOrganizationUpdate {
	if s != nil {
		uou.SetUpdatedBy(*s)
	}
	return uou
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (uou *UserOrganizationUpdate) ClearUpdatedBy() *UserOrganizationUpdate {
	uou.mutation.ClearUpdatedBy()
	return uou
}

// SetUpdatedAt sets the "updated_at" field.
func (uou *UserOrganizationUpdate) SetUpdatedAt(i int64) *UserOrganizationUpdate {
	uou.mutation.ResetUpdatedAt()
	uou.mutation.SetUpdatedAt(i)
	return uou
}

// AddUpdatedAt adds i to the "updated_at" field.
func (uou *UserOrganizationUpdate) AddUpdatedAt(i int64) *UserOrganizationUpdate {
	uou.mutation.AddUpdatedAt(i)
	return uou
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (uou *UserOrganizationUpdate) ClearUpdatedAt() *UserOrganizationUpdate {
	uou.mutation.ClearUpdatedAt()
	return uou
}

// SetRole sets the "role" field.
func (uou *UserOrganizationUpdate) SetRole(s string) *UserOrganizationUpdate {
	uou.mutation.SetRole(s)
	return uou
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (uou *UserOrganizationUpdate) SetNillableRole(s *string) *UserOrganizationUpdate {
	if s != nil {
		uou.SetRole(*s)
	}
	return uou
}

// Mutation returns the UserOrganizationMutation object of the builder.
func (uou *UserOrganizationUpdate) Mutation() *UserOrganizationMutation {
	return uou.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uou *UserOrganizationUpdate) Save(ctx context.Context) (int, error) {
	uou.defaults()
	return withHooks(ctx, uou.sqlSave, uou.mutation, uou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uou *UserOrganizationUpdate) SaveX(ctx context.Context) int {
	affected, err := uou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uou *UserOrganizationUpdate) Exec(ctx context.Context) error {
	_, err := uou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uou *UserOrganizationUpdate) ExecX(ctx context.Context) {
	if err := uou.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uou *UserOrganizationUpdate) defaults() {
	if _, ok := uou.mutation.UpdatedAt(); !ok && !uou.mutation.UpdatedAtCleared() {
		v := userorganization.UpdateDefaultUpdatedAt()
		uou.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uou *UserOrganizationUpdate) check() error {
	if v, ok := uou.mutation.Role(); ok {
		if err := userorganization.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "UserOrganization.role": %w`, err)}
		}
	}
	return nil
}

func (uou *UserOrganizationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := uou.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(userorganization.Table, userorganization.Columns, sqlgraph.NewFieldSpec(userorganization.FieldID, field.TypeString))
	if ps := uou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uou.mutation.UserID(); ok {
		_spec.SetField(userorganization.FieldUserID, field.TypeString, value)
	}
	if uou.mutation.UserIDCleared() {
		_spec.ClearField(userorganization.FieldUserID, field.TypeString)
	}
	if value, ok := uou.mutation.OrgID(); ok {
		_spec.SetField(userorganization.FieldOrgID, field.TypeString, value)
	}
	if uou.mutation.OrgIDCleared() {
		_spec.ClearField(userorganization.FieldOrgID, field.TypeString)
	}
	if value, ok := uou.mutation.CreatedBy(); ok {
		_spec.SetField(userorganization.FieldCreatedBy, field.TypeString, value)
	}
	if uou.mutation.CreatedByCleared() {
		_spec.ClearField(userorganization.FieldCreatedBy, field.TypeString)
	}
	if value, ok := uou.mutation.UpdatedBy(); ok {
		_spec.SetField(userorganization.FieldUpdatedBy, field.TypeString, value)
	}
	if uou.mutation.UpdatedByCleared() {
		_spec.ClearField(userorganization.FieldUpdatedBy, field.TypeString)
	}
	if uou.mutation.CreatedAtCleared() {
		_spec.ClearField(userorganization.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := uou.mutation.UpdatedAt(); ok {
		_spec.SetField(userorganization.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := uou.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(userorganization.FieldUpdatedAt, field.TypeInt64, value)
	}
	if uou.mutation.UpdatedAtCleared() {
		_spec.ClearField(userorganization.FieldUpdatedAt, field.TypeInt64)
	}
	if value, ok := uou.mutation.Role(); ok {
		_spec.SetField(userorganization.FieldRole, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userorganization.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uou.mutation.done = true
	return n, nil
}

// UserOrganizationUpdateOne is the builder for updating a single UserOrganization entity.
type UserOrganizationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserOrganizationMutation
}

// SetUserID sets the "user_id" field.
func (uouo *UserOrganizationUpdateOne) SetUserID(s string) *UserOrganizationUpdateOne {
	uouo.mutation.SetUserID(s)
	return uouo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (uouo *UserOrganizationUpdateOne) SetNillableUserID(s *string) *UserOrganizationUpdateOne {
	if s != nil {
		uouo.SetUserID(*s)
	}
	return uouo
}

// ClearUserID clears the value of the "user_id" field.
func (uouo *UserOrganizationUpdateOne) ClearUserID() *UserOrganizationUpdateOne {
	uouo.mutation.ClearUserID()
	return uouo
}

// SetOrgID sets the "org_id" field.
func (uouo *UserOrganizationUpdateOne) SetOrgID(s string) *UserOrganizationUpdateOne {
	uouo.mutation.SetOrgID(s)
	return uouo
}

// SetNillableOrgID sets the "org_id" field if the given value is not nil.
func (uouo *UserOrganizationUpdateOne) SetNillableOrgID(s *string) *UserOrganizationUpdateOne {
	if s != nil {
		uouo.SetOrgID(*s)
	}
	return uouo
}

// ClearOrgID clears the value of the "org_id" field.
func (uouo *UserOrganizationUpdateOne) ClearOrgID() *UserOrganizationUpdateOne {
	uouo.mutation.ClearOrgID()
	return uouo
}

// SetCreatedBy sets the "created_by" field.
func (uouo *UserOrganizationUpdateOne) SetCreatedBy(s string) *UserOrganizationUpdateOne {
	uouo.mutation.SetCreatedBy(s)
	return uouo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (uouo *UserOrganizationUpdateOne) SetNillableCreatedBy(s *string) *UserOrganizationUpdateOne {
	if s != nil {
		uouo.SetCreatedBy(*s)
	}
	return uouo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (uouo *UserOrganizationUpdateOne) ClearCreatedBy() *UserOrganizationUpdateOne {
	uouo.mutation.ClearCreatedBy()
	return uouo
}

// SetUpdatedBy sets the "updated_by" field.
func (uouo *UserOrganizationUpdateOne) SetUpdatedBy(s string) *UserOrganizationUpdateOne {
	uouo.mutation.SetUpdatedBy(s)
	return uouo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (uouo *UserOrganizationUpdateOne) SetNillableUpdatedBy(s *string) *UserOrganizationUpdateOne {
	if s != nil {
		uouo.SetUpdatedBy(*s)
	}
	return uouo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (uouo *UserOrganizationUpdateOne) ClearUpdatedBy() *UserOrganizationUpdateOne {
	uouo.mutation.ClearUpdatedBy()
	return uouo
}

// SetUpdatedAt sets the "updated_at" field.
func (uouo *UserOrganizationUpdateOne) SetUpdatedAt(i int64) *UserOrganizationUpdateOne {
	uouo.mutation.ResetUpdatedAt()
	uouo.mutation.SetUpdatedAt(i)
	return uouo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (uouo *UserOrganizationUpdateOne) AddUpdatedAt(i int64) *UserOrganizationUpdateOne {
	uouo.mutation.AddUpdatedAt(i)
	return uouo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (uouo *UserOrganizationUpdateOne) ClearUpdatedAt() *UserOrganizationUpdateOne {
	uouo.mutation.ClearUpdatedAt()
	return uouo
}

// SetRole sets the "role" field.
func (uouo *UserOrganizationUpdateOne) SetRole(s string) *UserOrganizationUpdateOne {
	uouo.mutation.SetRole(s)
	return uouo
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (uouo *UserOrganizationUpdateOne) SetNillableRole(s *string) *UserOrganizationUpdateOne {
	if s != nil {
		uouo.SetRole(*s)
	}
	return uouo
}

// Mutation returns the UserOrganizationMutation object of the builder.
func (uouo *UserOrganizationUpdateOne) Mutation() *UserOrganizationMutation {
	return uouo.mutation
}

// Where appends a list predicates to the UserOrganizationUpdate builder.
func (uouo *UserOrganizationUpdateOne) Where(ps ...predicate.UserOrganization) *UserOrganizationUpdateOne {
	uouo.mutation.Where(ps...)
	return uouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uouo *UserOrganizationUpdateOne) Select(field string, fields ...string) *UserOrganizationUpdateOne {
	uouo.fields = append([]string{field}, fields...)
	return uouo
}

// Save executes the query and returns the updated UserOrganization entity.
func (uouo *UserOrganizationUpdateOne) Save(ctx context.Context) (*UserOrganization, error) {
	uouo.defaults()
	return withHooks(ctx, uouo.sqlSave, uouo.mutation, uouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uouo *UserOrganizationUpdateOne) SaveX(ctx context.Context) *UserOrganization {
	node, err := uouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uouo *UserOrganizationUpdateOne) Exec(ctx context.Context) error {
	_, err := uouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uouo *UserOrganizationUpdateOne) ExecX(ctx context.Context) {
	if err := uouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uouo *UserOrganizationUpdateOne) defaults() {
	if _, ok := uouo.mutation.UpdatedAt(); !ok && !uouo.mutation.UpdatedAtCleared() {
		v := userorganization.UpdateDefaultUpdatedAt()
		uouo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uouo *UserOrganizationUpdateOne) check() error {
	if v, ok := uouo.mutation.Role(); ok {
		if err := userorganization.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "UserOrganization.role": %w`, err)}
		}
	}
	return nil
}

func (uouo *UserOrganizationUpdateOne) sqlSave(ctx context.Context) (_node *UserOrganization, err error) {
	if err := uouo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(userorganization.Table, userorganization.Columns, sqlgraph.NewFieldSpec(userorganization.FieldID, field.TypeString))
	id, ok := uouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserOrganization.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userorganization.FieldID)
		for _, f := range fields {
			if !userorganization.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userorganization.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uouo.mutation.UserID(); ok {
		_spec.SetField(userorganization.FieldUserID, field.TypeString, value)
	}
	if uouo.mutation.UserIDCleared() {
		_spec.ClearField(userorganization.FieldUserID, field.TypeString)
	}
	if value, ok := uouo.mutation.OrgID(); ok {
		_spec.SetField(userorganization.FieldOrgID, field.TypeString, value)
	}
	if uouo.mutation.OrgIDCleared() {
		_spec.ClearField(userorganization.FieldOrgID, field.TypeString)
	}
	if value, ok := uouo.mutation.CreatedBy(); ok {
		_spec.SetField(userorganization.FieldCreatedBy, field.TypeString, value)
	}
	if uouo.mutation.CreatedByCleared() {
		_spec.ClearField(userorganization.FieldCreatedBy, field.TypeString)
	}
	if value, ok := uouo.mutation.UpdatedBy(); ok {
		_spec.SetField(userorganization.FieldUpdatedBy, field.TypeString, value)
	}
	if uouo.mutation.UpdatedByCleared() {
		_spec.ClearField(userorganization.FieldUpdatedBy, field.TypeString)
	}
	if uouo.mutation.CreatedAtCleared() {
		_spec.ClearField(userorganization.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := uouo.mutation.UpdatedAt(); ok {
		_spec.SetField(userorganization.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := uouo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(userorganization.FieldUpdatedAt, field.TypeInt64, value)
	}
	if uouo.mutation.UpdatedAtCleared() {
		_spec.ClearField(userorganization.FieldUpdatedAt, field.TypeInt64)
	}
	if value, ok := uouo.mutation.Role(); ok {
		_spec.SetField(userorganization.FieldRole, field.TypeString, value)
	}
	_node = &UserOrganization{config: uouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userorganization.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uouo.mutation.done = true
	return _node, nil
}
