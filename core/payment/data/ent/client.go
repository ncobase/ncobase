// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"ncobase/payment/data/ent/migrate"

	"ncobase/payment/data/ent/paymentchannel"
	"ncobase/payment/data/ent/paymentlog"
	"ncobase/payment/data/ent/paymentorder"
	"ncobase/payment/data/ent/paymentproduct"
	"ncobase/payment/data/ent/paymentsubscription"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// PaymentChannel is the client for interacting with the PaymentChannel builders.
	PaymentChannel *PaymentChannelClient
	// PaymentLog is the client for interacting with the PaymentLog builders.
	PaymentLog *PaymentLogClient
	// PaymentOrder is the client for interacting with the PaymentOrder builders.
	PaymentOrder *PaymentOrderClient
	// PaymentProduct is the client for interacting with the PaymentProduct builders.
	PaymentProduct *PaymentProductClient
	// PaymentSubscription is the client for interacting with the PaymentSubscription builders.
	PaymentSubscription *PaymentSubscriptionClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.PaymentChannel = NewPaymentChannelClient(c.config)
	c.PaymentLog = NewPaymentLogClient(c.config)
	c.PaymentOrder = NewPaymentOrderClient(c.config)
	c.PaymentProduct = NewPaymentProductClient(c.config)
	c.PaymentSubscription = NewPaymentSubscriptionClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                 ctx,
		config:              cfg,
		PaymentChannel:      NewPaymentChannelClient(cfg),
		PaymentLog:          NewPaymentLogClient(cfg),
		PaymentOrder:        NewPaymentOrderClient(cfg),
		PaymentProduct:      NewPaymentProductClient(cfg),
		PaymentSubscription: NewPaymentSubscriptionClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                 ctx,
		config:              cfg,
		PaymentChannel:      NewPaymentChannelClient(cfg),
		PaymentLog:          NewPaymentLogClient(cfg),
		PaymentOrder:        NewPaymentOrderClient(cfg),
		PaymentProduct:      NewPaymentProductClient(cfg),
		PaymentSubscription: NewPaymentSubscriptionClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		PaymentChannel.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.PaymentChannel.Use(hooks...)
	c.PaymentLog.Use(hooks...)
	c.PaymentOrder.Use(hooks...)
	c.PaymentProduct.Use(hooks...)
	c.PaymentSubscription.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.PaymentChannel.Intercept(interceptors...)
	c.PaymentLog.Intercept(interceptors...)
	c.PaymentOrder.Intercept(interceptors...)
	c.PaymentProduct.Intercept(interceptors...)
	c.PaymentSubscription.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *PaymentChannelMutation:
		return c.PaymentChannel.mutate(ctx, m)
	case *PaymentLogMutation:
		return c.PaymentLog.mutate(ctx, m)
	case *PaymentOrderMutation:
		return c.PaymentOrder.mutate(ctx, m)
	case *PaymentProductMutation:
		return c.PaymentProduct.mutate(ctx, m)
	case *PaymentSubscriptionMutation:
		return c.PaymentSubscription.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// PaymentChannelClient is a client for the PaymentChannel schema.
type PaymentChannelClient struct {
	config
}

// NewPaymentChannelClient returns a client for the PaymentChannel from the given config.
func NewPaymentChannelClient(c config) *PaymentChannelClient {
	return &PaymentChannelClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `paymentchannel.Hooks(f(g(h())))`.
func (c *PaymentChannelClient) Use(hooks ...Hook) {
	c.hooks.PaymentChannel = append(c.hooks.PaymentChannel, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `paymentchannel.Intercept(f(g(h())))`.
func (c *PaymentChannelClient) Intercept(interceptors ...Interceptor) {
	c.inters.PaymentChannel = append(c.inters.PaymentChannel, interceptors...)
}

// Create returns a builder for creating a PaymentChannel entity.
func (c *PaymentChannelClient) Create() *PaymentChannelCreate {
	mutation := newPaymentChannelMutation(c.config, OpCreate)
	return &PaymentChannelCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PaymentChannel entities.
func (c *PaymentChannelClient) CreateBulk(builders ...*PaymentChannelCreate) *PaymentChannelCreateBulk {
	return &PaymentChannelCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PaymentChannelClient) MapCreateBulk(slice any, setFunc func(*PaymentChannelCreate, int)) *PaymentChannelCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PaymentChannelCreateBulk{err: fmt.Errorf("calling to PaymentChannelClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PaymentChannelCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PaymentChannelCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PaymentChannel.
func (c *PaymentChannelClient) Update() *PaymentChannelUpdate {
	mutation := newPaymentChannelMutation(c.config, OpUpdate)
	return &PaymentChannelUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PaymentChannelClient) UpdateOne(pc *PaymentChannel) *PaymentChannelUpdateOne {
	mutation := newPaymentChannelMutation(c.config, OpUpdateOne, withPaymentChannel(pc))
	return &PaymentChannelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PaymentChannelClient) UpdateOneID(id string) *PaymentChannelUpdateOne {
	mutation := newPaymentChannelMutation(c.config, OpUpdateOne, withPaymentChannelID(id))
	return &PaymentChannelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PaymentChannel.
func (c *PaymentChannelClient) Delete() *PaymentChannelDelete {
	mutation := newPaymentChannelMutation(c.config, OpDelete)
	return &PaymentChannelDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PaymentChannelClient) DeleteOne(pc *PaymentChannel) *PaymentChannelDeleteOne {
	return c.DeleteOneID(pc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PaymentChannelClient) DeleteOneID(id string) *PaymentChannelDeleteOne {
	builder := c.Delete().Where(paymentchannel.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PaymentChannelDeleteOne{builder}
}

// Query returns a query builder for PaymentChannel.
func (c *PaymentChannelClient) Query() *PaymentChannelQuery {
	return &PaymentChannelQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePaymentChannel},
		inters: c.Interceptors(),
	}
}

// Get returns a PaymentChannel entity by its id.
func (c *PaymentChannelClient) Get(ctx context.Context, id string) (*PaymentChannel, error) {
	return c.Query().Where(paymentchannel.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PaymentChannelClient) GetX(ctx context.Context, id string) *PaymentChannel {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *PaymentChannelClient) Hooks() []Hook {
	return c.hooks.PaymentChannel
}

// Interceptors returns the client interceptors.
func (c *PaymentChannelClient) Interceptors() []Interceptor {
	return c.inters.PaymentChannel
}

func (c *PaymentChannelClient) mutate(ctx context.Context, m *PaymentChannelMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PaymentChannelCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PaymentChannelUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PaymentChannelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PaymentChannelDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PaymentChannel mutation op: %q", m.Op())
	}
}

// PaymentLogClient is a client for the PaymentLog schema.
type PaymentLogClient struct {
	config
}

// NewPaymentLogClient returns a client for the PaymentLog from the given config.
func NewPaymentLogClient(c config) *PaymentLogClient {
	return &PaymentLogClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `paymentlog.Hooks(f(g(h())))`.
func (c *PaymentLogClient) Use(hooks ...Hook) {
	c.hooks.PaymentLog = append(c.hooks.PaymentLog, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `paymentlog.Intercept(f(g(h())))`.
func (c *PaymentLogClient) Intercept(interceptors ...Interceptor) {
	c.inters.PaymentLog = append(c.inters.PaymentLog, interceptors...)
}

// Create returns a builder for creating a PaymentLog entity.
func (c *PaymentLogClient) Create() *PaymentLogCreate {
	mutation := newPaymentLogMutation(c.config, OpCreate)
	return &PaymentLogCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PaymentLog entities.
func (c *PaymentLogClient) CreateBulk(builders ...*PaymentLogCreate) *PaymentLogCreateBulk {
	return &PaymentLogCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PaymentLogClient) MapCreateBulk(slice any, setFunc func(*PaymentLogCreate, int)) *PaymentLogCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PaymentLogCreateBulk{err: fmt.Errorf("calling to PaymentLogClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PaymentLogCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PaymentLogCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PaymentLog.
func (c *PaymentLogClient) Update() *PaymentLogUpdate {
	mutation := newPaymentLogMutation(c.config, OpUpdate)
	return &PaymentLogUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PaymentLogClient) UpdateOne(pl *PaymentLog) *PaymentLogUpdateOne {
	mutation := newPaymentLogMutation(c.config, OpUpdateOne, withPaymentLog(pl))
	return &PaymentLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PaymentLogClient) UpdateOneID(id string) *PaymentLogUpdateOne {
	mutation := newPaymentLogMutation(c.config, OpUpdateOne, withPaymentLogID(id))
	return &PaymentLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PaymentLog.
func (c *PaymentLogClient) Delete() *PaymentLogDelete {
	mutation := newPaymentLogMutation(c.config, OpDelete)
	return &PaymentLogDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PaymentLogClient) DeleteOne(pl *PaymentLog) *PaymentLogDeleteOne {
	return c.DeleteOneID(pl.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PaymentLogClient) DeleteOneID(id string) *PaymentLogDeleteOne {
	builder := c.Delete().Where(paymentlog.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PaymentLogDeleteOne{builder}
}

// Query returns a query builder for PaymentLog.
func (c *PaymentLogClient) Query() *PaymentLogQuery {
	return &PaymentLogQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePaymentLog},
		inters: c.Interceptors(),
	}
}

// Get returns a PaymentLog entity by its id.
func (c *PaymentLogClient) Get(ctx context.Context, id string) (*PaymentLog, error) {
	return c.Query().Where(paymentlog.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PaymentLogClient) GetX(ctx context.Context, id string) *PaymentLog {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOrder queries the order edge of a PaymentLog.
func (c *PaymentLogClient) QueryOrder(pl *PaymentLog) *PaymentOrderQuery {
	query := (&PaymentOrderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(paymentlog.Table, paymentlog.FieldID, id),
			sqlgraph.To(paymentorder.Table, paymentorder.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, paymentlog.OrderTable, paymentlog.OrderColumn),
		)
		fromV = sqlgraph.Neighbors(pl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PaymentLogClient) Hooks() []Hook {
	return c.hooks.PaymentLog
}

// Interceptors returns the client interceptors.
func (c *PaymentLogClient) Interceptors() []Interceptor {
	return c.inters.PaymentLog
}

func (c *PaymentLogClient) mutate(ctx context.Context, m *PaymentLogMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PaymentLogCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PaymentLogUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PaymentLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PaymentLogDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PaymentLog mutation op: %q", m.Op())
	}
}

// PaymentOrderClient is a client for the PaymentOrder schema.
type PaymentOrderClient struct {
	config
}

// NewPaymentOrderClient returns a client for the PaymentOrder from the given config.
func NewPaymentOrderClient(c config) *PaymentOrderClient {
	return &PaymentOrderClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `paymentorder.Hooks(f(g(h())))`.
func (c *PaymentOrderClient) Use(hooks ...Hook) {
	c.hooks.PaymentOrder = append(c.hooks.PaymentOrder, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `paymentorder.Intercept(f(g(h())))`.
func (c *PaymentOrderClient) Intercept(interceptors ...Interceptor) {
	c.inters.PaymentOrder = append(c.inters.PaymentOrder, interceptors...)
}

// Create returns a builder for creating a PaymentOrder entity.
func (c *PaymentOrderClient) Create() *PaymentOrderCreate {
	mutation := newPaymentOrderMutation(c.config, OpCreate)
	return &PaymentOrderCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PaymentOrder entities.
func (c *PaymentOrderClient) CreateBulk(builders ...*PaymentOrderCreate) *PaymentOrderCreateBulk {
	return &PaymentOrderCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PaymentOrderClient) MapCreateBulk(slice any, setFunc func(*PaymentOrderCreate, int)) *PaymentOrderCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PaymentOrderCreateBulk{err: fmt.Errorf("calling to PaymentOrderClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PaymentOrderCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PaymentOrderCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PaymentOrder.
func (c *PaymentOrderClient) Update() *PaymentOrderUpdate {
	mutation := newPaymentOrderMutation(c.config, OpUpdate)
	return &PaymentOrderUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PaymentOrderClient) UpdateOne(po *PaymentOrder) *PaymentOrderUpdateOne {
	mutation := newPaymentOrderMutation(c.config, OpUpdateOne, withPaymentOrder(po))
	return &PaymentOrderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PaymentOrderClient) UpdateOneID(id string) *PaymentOrderUpdateOne {
	mutation := newPaymentOrderMutation(c.config, OpUpdateOne, withPaymentOrderID(id))
	return &PaymentOrderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PaymentOrder.
func (c *PaymentOrderClient) Delete() *PaymentOrderDelete {
	mutation := newPaymentOrderMutation(c.config, OpDelete)
	return &PaymentOrderDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PaymentOrderClient) DeleteOne(po *PaymentOrder) *PaymentOrderDeleteOne {
	return c.DeleteOneID(po.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PaymentOrderClient) DeleteOneID(id string) *PaymentOrderDeleteOne {
	builder := c.Delete().Where(paymentorder.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PaymentOrderDeleteOne{builder}
}

// Query returns a query builder for PaymentOrder.
func (c *PaymentOrderClient) Query() *PaymentOrderQuery {
	return &PaymentOrderQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePaymentOrder},
		inters: c.Interceptors(),
	}
}

// Get returns a PaymentOrder entity by its id.
func (c *PaymentOrderClient) Get(ctx context.Context, id string) (*PaymentOrder, error) {
	return c.Query().Where(paymentorder.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PaymentOrderClient) GetX(ctx context.Context, id string) *PaymentOrder {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryLogs queries the logs edge of a PaymentOrder.
func (c *PaymentOrderClient) QueryLogs(po *PaymentOrder) *PaymentLogQuery {
	query := (&PaymentLogClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := po.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(paymentorder.Table, paymentorder.FieldID, id),
			sqlgraph.To(paymentlog.Table, paymentlog.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, paymentorder.LogsTable, paymentorder.LogsColumn),
		)
		fromV = sqlgraph.Neighbors(po.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PaymentOrderClient) Hooks() []Hook {
	return c.hooks.PaymentOrder
}

// Interceptors returns the client interceptors.
func (c *PaymentOrderClient) Interceptors() []Interceptor {
	return c.inters.PaymentOrder
}

func (c *PaymentOrderClient) mutate(ctx context.Context, m *PaymentOrderMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PaymentOrderCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PaymentOrderUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PaymentOrderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PaymentOrderDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PaymentOrder mutation op: %q", m.Op())
	}
}

// PaymentProductClient is a client for the PaymentProduct schema.
type PaymentProductClient struct {
	config
}

// NewPaymentProductClient returns a client for the PaymentProduct from the given config.
func NewPaymentProductClient(c config) *PaymentProductClient {
	return &PaymentProductClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `paymentproduct.Hooks(f(g(h())))`.
func (c *PaymentProductClient) Use(hooks ...Hook) {
	c.hooks.PaymentProduct = append(c.hooks.PaymentProduct, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `paymentproduct.Intercept(f(g(h())))`.
func (c *PaymentProductClient) Intercept(interceptors ...Interceptor) {
	c.inters.PaymentProduct = append(c.inters.PaymentProduct, interceptors...)
}

// Create returns a builder for creating a PaymentProduct entity.
func (c *PaymentProductClient) Create() *PaymentProductCreate {
	mutation := newPaymentProductMutation(c.config, OpCreate)
	return &PaymentProductCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PaymentProduct entities.
func (c *PaymentProductClient) CreateBulk(builders ...*PaymentProductCreate) *PaymentProductCreateBulk {
	return &PaymentProductCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PaymentProductClient) MapCreateBulk(slice any, setFunc func(*PaymentProductCreate, int)) *PaymentProductCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PaymentProductCreateBulk{err: fmt.Errorf("calling to PaymentProductClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PaymentProductCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PaymentProductCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PaymentProduct.
func (c *PaymentProductClient) Update() *PaymentProductUpdate {
	mutation := newPaymentProductMutation(c.config, OpUpdate)
	return &PaymentProductUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PaymentProductClient) UpdateOne(pp *PaymentProduct) *PaymentProductUpdateOne {
	mutation := newPaymentProductMutation(c.config, OpUpdateOne, withPaymentProduct(pp))
	return &PaymentProductUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PaymentProductClient) UpdateOneID(id string) *PaymentProductUpdateOne {
	mutation := newPaymentProductMutation(c.config, OpUpdateOne, withPaymentProductID(id))
	return &PaymentProductUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PaymentProduct.
func (c *PaymentProductClient) Delete() *PaymentProductDelete {
	mutation := newPaymentProductMutation(c.config, OpDelete)
	return &PaymentProductDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PaymentProductClient) DeleteOne(pp *PaymentProduct) *PaymentProductDeleteOne {
	return c.DeleteOneID(pp.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PaymentProductClient) DeleteOneID(id string) *PaymentProductDeleteOne {
	builder := c.Delete().Where(paymentproduct.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PaymentProductDeleteOne{builder}
}

// Query returns a query builder for PaymentProduct.
func (c *PaymentProductClient) Query() *PaymentProductQuery {
	return &PaymentProductQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePaymentProduct},
		inters: c.Interceptors(),
	}
}

// Get returns a PaymentProduct entity by its id.
func (c *PaymentProductClient) Get(ctx context.Context, id string) (*PaymentProduct, error) {
	return c.Query().Where(paymentproduct.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PaymentProductClient) GetX(ctx context.Context, id string) *PaymentProduct {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySubscriptions queries the subscriptions edge of a PaymentProduct.
func (c *PaymentProductClient) QuerySubscriptions(pp *PaymentProduct) *PaymentSubscriptionQuery {
	query := (&PaymentSubscriptionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(paymentproduct.Table, paymentproduct.FieldID, id),
			sqlgraph.To(paymentsubscription.Table, paymentsubscription.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, paymentproduct.SubscriptionsTable, paymentproduct.SubscriptionsColumn),
		)
		fromV = sqlgraph.Neighbors(pp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PaymentProductClient) Hooks() []Hook {
	return c.hooks.PaymentProduct
}

// Interceptors returns the client interceptors.
func (c *PaymentProductClient) Interceptors() []Interceptor {
	return c.inters.PaymentProduct
}

func (c *PaymentProductClient) mutate(ctx context.Context, m *PaymentProductMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PaymentProductCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PaymentProductUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PaymentProductUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PaymentProductDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PaymentProduct mutation op: %q", m.Op())
	}
}

// PaymentSubscriptionClient is a client for the PaymentSubscription schema.
type PaymentSubscriptionClient struct {
	config
}

// NewPaymentSubscriptionClient returns a client for the PaymentSubscription from the given config.
func NewPaymentSubscriptionClient(c config) *PaymentSubscriptionClient {
	return &PaymentSubscriptionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `paymentsubscription.Hooks(f(g(h())))`.
func (c *PaymentSubscriptionClient) Use(hooks ...Hook) {
	c.hooks.PaymentSubscription = append(c.hooks.PaymentSubscription, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `paymentsubscription.Intercept(f(g(h())))`.
func (c *PaymentSubscriptionClient) Intercept(interceptors ...Interceptor) {
	c.inters.PaymentSubscription = append(c.inters.PaymentSubscription, interceptors...)
}

// Create returns a builder for creating a PaymentSubscription entity.
func (c *PaymentSubscriptionClient) Create() *PaymentSubscriptionCreate {
	mutation := newPaymentSubscriptionMutation(c.config, OpCreate)
	return &PaymentSubscriptionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PaymentSubscription entities.
func (c *PaymentSubscriptionClient) CreateBulk(builders ...*PaymentSubscriptionCreate) *PaymentSubscriptionCreateBulk {
	return &PaymentSubscriptionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PaymentSubscriptionClient) MapCreateBulk(slice any, setFunc func(*PaymentSubscriptionCreate, int)) *PaymentSubscriptionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PaymentSubscriptionCreateBulk{err: fmt.Errorf("calling to PaymentSubscriptionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PaymentSubscriptionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PaymentSubscriptionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PaymentSubscription.
func (c *PaymentSubscriptionClient) Update() *PaymentSubscriptionUpdate {
	mutation := newPaymentSubscriptionMutation(c.config, OpUpdate)
	return &PaymentSubscriptionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PaymentSubscriptionClient) UpdateOne(ps *PaymentSubscription) *PaymentSubscriptionUpdateOne {
	mutation := newPaymentSubscriptionMutation(c.config, OpUpdateOne, withPaymentSubscription(ps))
	return &PaymentSubscriptionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PaymentSubscriptionClient) UpdateOneID(id string) *PaymentSubscriptionUpdateOne {
	mutation := newPaymentSubscriptionMutation(c.config, OpUpdateOne, withPaymentSubscriptionID(id))
	return &PaymentSubscriptionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PaymentSubscription.
func (c *PaymentSubscriptionClient) Delete() *PaymentSubscriptionDelete {
	mutation := newPaymentSubscriptionMutation(c.config, OpDelete)
	return &PaymentSubscriptionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PaymentSubscriptionClient) DeleteOne(ps *PaymentSubscription) *PaymentSubscriptionDeleteOne {
	return c.DeleteOneID(ps.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PaymentSubscriptionClient) DeleteOneID(id string) *PaymentSubscriptionDeleteOne {
	builder := c.Delete().Where(paymentsubscription.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PaymentSubscriptionDeleteOne{builder}
}

// Query returns a query builder for PaymentSubscription.
func (c *PaymentSubscriptionClient) Query() *PaymentSubscriptionQuery {
	return &PaymentSubscriptionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePaymentSubscription},
		inters: c.Interceptors(),
	}
}

// Get returns a PaymentSubscription entity by its id.
func (c *PaymentSubscriptionClient) Get(ctx context.Context, id string) (*PaymentSubscription, error) {
	return c.Query().Where(paymentsubscription.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PaymentSubscriptionClient) GetX(ctx context.Context, id string) *PaymentSubscription {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProduct queries the product edge of a PaymentSubscription.
func (c *PaymentSubscriptionClient) QueryProduct(ps *PaymentSubscription) *PaymentProductQuery {
	query := (&PaymentProductClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ps.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(paymentsubscription.Table, paymentsubscription.FieldID, id),
			sqlgraph.To(paymentproduct.Table, paymentproduct.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, paymentsubscription.ProductTable, paymentsubscription.ProductColumn),
		)
		fromV = sqlgraph.Neighbors(ps.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PaymentSubscriptionClient) Hooks() []Hook {
	return c.hooks.PaymentSubscription
}

// Interceptors returns the client interceptors.
func (c *PaymentSubscriptionClient) Interceptors() []Interceptor {
	return c.inters.PaymentSubscription
}

func (c *PaymentSubscriptionClient) mutate(ctx context.Context, m *PaymentSubscriptionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PaymentSubscriptionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PaymentSubscriptionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PaymentSubscriptionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PaymentSubscriptionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PaymentSubscription mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		PaymentChannel, PaymentLog, PaymentOrder, PaymentProduct,
		PaymentSubscription []ent.Hook
	}
	inters struct {
		PaymentChannel, PaymentLog, PaymentOrder, PaymentProduct,
		PaymentSubscription []ent.Interceptor
	}
)
