// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/payment/data/ent/paymentchannel"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PaymentChannelCreate is the builder for creating a PaymentChannel entity.
type PaymentChannelCreate struct {
	config
	mutation *PaymentChannelMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (pcc *PaymentChannelCreate) SetName(s string) *PaymentChannelCreate {
	pcc.mutation.SetName(s)
	return pcc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pcc *PaymentChannelCreate) SetNillableName(s *string) *PaymentChannelCreate {
	if s != nil {
		pcc.SetName(*s)
	}
	return pcc
}

// SetDescription sets the "description" field.
func (pcc *PaymentChannelCreate) SetDescription(s string) *PaymentChannelCreate {
	pcc.mutation.SetDescription(s)
	return pcc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pcc *PaymentChannelCreate) SetNillableDescription(s *string) *PaymentChannelCreate {
	if s != nil {
		pcc.SetDescription(*s)
	}
	return pcc
}

// SetExtras sets the "extras" field.
func (pcc *PaymentChannelCreate) SetExtras(m map[string]interface{}) *PaymentChannelCreate {
	pcc.mutation.SetExtras(m)
	return pcc
}

// SetCreatedBy sets the "created_by" field.
func (pcc *PaymentChannelCreate) SetCreatedBy(s string) *PaymentChannelCreate {
	pcc.mutation.SetCreatedBy(s)
	return pcc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (pcc *PaymentChannelCreate) SetNillableCreatedBy(s *string) *PaymentChannelCreate {
	if s != nil {
		pcc.SetCreatedBy(*s)
	}
	return pcc
}

// SetUpdatedBy sets the "updated_by" field.
func (pcc *PaymentChannelCreate) SetUpdatedBy(s string) *PaymentChannelCreate {
	pcc.mutation.SetUpdatedBy(s)
	return pcc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (pcc *PaymentChannelCreate) SetNillableUpdatedBy(s *string) *PaymentChannelCreate {
	if s != nil {
		pcc.SetUpdatedBy(*s)
	}
	return pcc
}

// SetCreatedAt sets the "created_at" field.
func (pcc *PaymentChannelCreate) SetCreatedAt(i int64) *PaymentChannelCreate {
	pcc.mutation.SetCreatedAt(i)
	return pcc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pcc *PaymentChannelCreate) SetNillableCreatedAt(i *int64) *PaymentChannelCreate {
	if i != nil {
		pcc.SetCreatedAt(*i)
	}
	return pcc
}

// SetUpdatedAt sets the "updated_at" field.
func (pcc *PaymentChannelCreate) SetUpdatedAt(i int64) *PaymentChannelCreate {
	pcc.mutation.SetUpdatedAt(i)
	return pcc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pcc *PaymentChannelCreate) SetNillableUpdatedAt(i *int64) *PaymentChannelCreate {
	if i != nil {
		pcc.SetUpdatedAt(*i)
	}
	return pcc
}

// SetProvider sets the "provider" field.
func (pcc *PaymentChannelCreate) SetProvider(s string) *PaymentChannelCreate {
	pcc.mutation.SetProvider(s)
	return pcc
}

// SetStatus sets the "status" field.
func (pcc *PaymentChannelCreate) SetStatus(s string) *PaymentChannelCreate {
	pcc.mutation.SetStatus(s)
	return pcc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pcc *PaymentChannelCreate) SetNillableStatus(s *string) *PaymentChannelCreate {
	if s != nil {
		pcc.SetStatus(*s)
	}
	return pcc
}

// SetIsDefault sets the "is_default" field.
func (pcc *PaymentChannelCreate) SetIsDefault(b bool) *PaymentChannelCreate {
	pcc.mutation.SetIsDefault(b)
	return pcc
}

// SetNillableIsDefault sets the "is_default" field if the given value is not nil.
func (pcc *PaymentChannelCreate) SetNillableIsDefault(b *bool) *PaymentChannelCreate {
	if b != nil {
		pcc.SetIsDefault(*b)
	}
	return pcc
}

// SetSupportedTypes sets the "supported_types" field.
func (pcc *PaymentChannelCreate) SetSupportedTypes(s []string) *PaymentChannelCreate {
	pcc.mutation.SetSupportedTypes(s)
	return pcc
}

// SetConfig sets the "config" field.
func (pcc *PaymentChannelCreate) SetConfig(m map[string]interface{}) *PaymentChannelCreate {
	pcc.mutation.SetConfig(m)
	return pcc
}

// SetTenantID sets the "tenant_id" field.
func (pcc *PaymentChannelCreate) SetTenantID(s string) *PaymentChannelCreate {
	pcc.mutation.SetTenantID(s)
	return pcc
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (pcc *PaymentChannelCreate) SetNillableTenantID(s *string) *PaymentChannelCreate {
	if s != nil {
		pcc.SetTenantID(*s)
	}
	return pcc
}

// SetID sets the "id" field.
func (pcc *PaymentChannelCreate) SetID(s string) *PaymentChannelCreate {
	pcc.mutation.SetID(s)
	return pcc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pcc *PaymentChannelCreate) SetNillableID(s *string) *PaymentChannelCreate {
	if s != nil {
		pcc.SetID(*s)
	}
	return pcc
}

// Mutation returns the PaymentChannelMutation object of the builder.
func (pcc *PaymentChannelCreate) Mutation() *PaymentChannelMutation {
	return pcc.mutation
}

// Save creates the PaymentChannel in the database.
func (pcc *PaymentChannelCreate) Save(ctx context.Context) (*PaymentChannel, error) {
	pcc.defaults()
	return withHooks(ctx, pcc.sqlSave, pcc.mutation, pcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pcc *PaymentChannelCreate) SaveX(ctx context.Context) *PaymentChannel {
	v, err := pcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcc *PaymentChannelCreate) Exec(ctx context.Context) error {
	_, err := pcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcc *PaymentChannelCreate) ExecX(ctx context.Context) {
	if err := pcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pcc *PaymentChannelCreate) defaults() {
	if _, ok := pcc.mutation.Extras(); !ok {
		v := paymentchannel.DefaultExtras
		pcc.mutation.SetExtras(v)
	}
	if _, ok := pcc.mutation.CreatedAt(); !ok {
		v := paymentchannel.DefaultCreatedAt()
		pcc.mutation.SetCreatedAt(v)
	}
	if _, ok := pcc.mutation.UpdatedAt(); !ok {
		v := paymentchannel.DefaultUpdatedAt()
		pcc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pcc.mutation.Status(); !ok {
		v := paymentchannel.DefaultStatus
		pcc.mutation.SetStatus(v)
	}
	if _, ok := pcc.mutation.IsDefault(); !ok {
		v := paymentchannel.DefaultIsDefault
		pcc.mutation.SetIsDefault(v)
	}
	if _, ok := pcc.mutation.ID(); !ok {
		v := paymentchannel.DefaultID()
		pcc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pcc *PaymentChannelCreate) check() error {
	if v, ok := pcc.mutation.CreatedBy(); ok {
		if err := paymentchannel.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "PaymentChannel.created_by": %w`, err)}
		}
	}
	if v, ok := pcc.mutation.UpdatedBy(); ok {
		if err := paymentchannel.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "PaymentChannel.updated_by": %w`, err)}
		}
	}
	if _, ok := pcc.mutation.Provider(); !ok {
		return &ValidationError{Name: "provider", err: errors.New(`ent: missing required field "PaymentChannel.provider"`)}
	}
	if v, ok := pcc.mutation.Provider(); ok {
		if err := paymentchannel.ProviderValidator(v); err != nil {
			return &ValidationError{Name: "provider", err: fmt.Errorf(`ent: validator failed for field "PaymentChannel.provider": %w`, err)}
		}
	}
	if _, ok := pcc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "PaymentChannel.status"`)}
	}
	if _, ok := pcc.mutation.IsDefault(); !ok {
		return &ValidationError{Name: "is_default", err: errors.New(`ent: missing required field "PaymentChannel.is_default"`)}
	}
	if _, ok := pcc.mutation.SupportedTypes(); !ok {
		return &ValidationError{Name: "supported_types", err: errors.New(`ent: missing required field "PaymentChannel.supported_types"`)}
	}
	if _, ok := pcc.mutation.Config(); !ok {
		return &ValidationError{Name: "config", err: errors.New(`ent: missing required field "PaymentChannel.config"`)}
	}
	if v, ok := pcc.mutation.ID(); ok {
		if err := paymentchannel.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "PaymentChannel.id": %w`, err)}
		}
	}
	return nil
}

func (pcc *PaymentChannelCreate) sqlSave(ctx context.Context) (*PaymentChannel, error) {
	if err := pcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected PaymentChannel.ID type: %T", _spec.ID.Value)
		}
	}
	pcc.mutation.id = &_node.ID
	pcc.mutation.done = true
	return _node, nil
}

func (pcc *PaymentChannelCreate) createSpec() (*PaymentChannel, *sqlgraph.CreateSpec) {
	var (
		_node = &PaymentChannel{config: pcc.config}
		_spec = sqlgraph.NewCreateSpec(paymentchannel.Table, sqlgraph.NewFieldSpec(paymentchannel.FieldID, field.TypeString))
	)
	if id, ok := pcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pcc.mutation.Name(); ok {
		_spec.SetField(paymentchannel.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := pcc.mutation.Description(); ok {
		_spec.SetField(paymentchannel.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := pcc.mutation.Extras(); ok {
		_spec.SetField(paymentchannel.FieldExtras, field.TypeJSON, value)
		_node.Extras = value
	}
	if value, ok := pcc.mutation.CreatedBy(); ok {
		_spec.SetField(paymentchannel.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := pcc.mutation.UpdatedBy(); ok {
		_spec.SetField(paymentchannel.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := pcc.mutation.CreatedAt(); ok {
		_spec.SetField(paymentchannel.FieldCreatedAt, field.TypeInt64, value)
		_node.CreatedAt = value
	}
	if value, ok := pcc.mutation.UpdatedAt(); ok {
		_spec.SetField(paymentchannel.FieldUpdatedAt, field.TypeInt64, value)
		_node.UpdatedAt = value
	}
	if value, ok := pcc.mutation.Provider(); ok {
		_spec.SetField(paymentchannel.FieldProvider, field.TypeString, value)
		_node.Provider = value
	}
	if value, ok := pcc.mutation.Status(); ok {
		_spec.SetField(paymentchannel.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := pcc.mutation.IsDefault(); ok {
		_spec.SetField(paymentchannel.FieldIsDefault, field.TypeBool, value)
		_node.IsDefault = value
	}
	if value, ok := pcc.mutation.SupportedTypes(); ok {
		_spec.SetField(paymentchannel.FieldSupportedTypes, field.TypeJSON, value)
		_node.SupportedTypes = value
	}
	if value, ok := pcc.mutation.Config(); ok {
		_spec.SetField(paymentchannel.FieldConfig, field.TypeJSON, value)
		_node.Config = value
	}
	if value, ok := pcc.mutation.TenantID(); ok {
		_spec.SetField(paymentchannel.FieldTenantID, field.TypeString, value)
		_node.TenantID = value
	}
	return _node, _spec
}

// PaymentChannelCreateBulk is the builder for creating many PaymentChannel entities in bulk.
type PaymentChannelCreateBulk struct {
	config
	err      error
	builders []*PaymentChannelCreate
}

// Save creates the PaymentChannel entities in the database.
func (pccb *PaymentChannelCreateBulk) Save(ctx context.Context) ([]*PaymentChannel, error) {
	if pccb.err != nil {
		return nil, pccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pccb.builders))
	nodes := make([]*PaymentChannel, len(pccb.builders))
	mutators := make([]Mutator, len(pccb.builders))
	for i := range pccb.builders {
		func(i int, root context.Context) {
			builder := pccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PaymentChannelMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pccb *PaymentChannelCreateBulk) SaveX(ctx context.Context) []*PaymentChannel {
	v, err := pccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pccb *PaymentChannelCreateBulk) Exec(ctx context.Context) error {
	_, err := pccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pccb *PaymentChannelCreateBulk) ExecX(ctx context.Context) {
	if err := pccb.Exec(ctx); err != nil {
		panic(err)
	}
}
