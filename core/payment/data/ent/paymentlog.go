// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"ncobase/core/payment/data/ent/paymentlog"
	"ncobase/core/payment/data/ent/paymentorder"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// PaymentLog is the model entity for the PaymentLog schema.
type PaymentLog struct {
	config `json:"-"`
	// ID of the ent.
	// primary key
	ID string `json:"id,omitempty"`
	// Extend properties
	Extras map[string]interface{} `json:"extras,omitempty"`
	// created at
	CreatedAt int64 `json:"created_at,omitempty"`
	// updated at
	UpdatedAt int64 `json:"updated_at,omitempty"`
	// Payment order ID
	OrderID string `json:"order_id,omitempty"`
	// Payment channel ID
	ChannelID string `json:"channel_id,omitempty"`
	// Log type (create, update, verify, callback, notify, refund, error)
	Type string `json:"type,omitempty"`
	// Payment status before the action
	StatusBefore string `json:"status_before,omitempty"`
	// Payment status after the action
	StatusAfter string `json:"status_after,omitempty"`
	// Request data in JSON format
	RequestData string `json:"request_data,omitempty"`
	// Response data in JSON format
	ResponseData string `json:"response_data,omitempty"`
	// IP address
	IP string `json:"ip,omitempty"`
	// User agent
	UserAgent string `json:"user_agent,omitempty"`
	// User ID
	UserID string `json:"user_id,omitempty"`
	// Error message if any
	Error string `json:"error,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PaymentLogQuery when eager-loading is set.
	Edges        PaymentLogEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PaymentLogEdges holds the relations/edges for other nodes in the graph.
type PaymentLogEdges struct {
	// Order holds the value of the order edge.
	Order *PaymentOrder `json:"order,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OrderOrErr returns the Order value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PaymentLogEdges) OrderOrErr() (*PaymentOrder, error) {
	if e.Order != nil {
		return e.Order, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: paymentorder.Label}
	}
	return nil, &NotLoadedError{edge: "order"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PaymentLog) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case paymentlog.FieldExtras:
			values[i] = new([]byte)
		case paymentlog.FieldCreatedAt, paymentlog.FieldUpdatedAt:
			values[i] = new(sql.NullInt64)
		case paymentlog.FieldID, paymentlog.FieldOrderID, paymentlog.FieldChannelID, paymentlog.FieldType, paymentlog.FieldStatusBefore, paymentlog.FieldStatusAfter, paymentlog.FieldRequestData, paymentlog.FieldResponseData, paymentlog.FieldIP, paymentlog.FieldUserAgent, paymentlog.FieldUserID, paymentlog.FieldError:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PaymentLog fields.
func (pl *PaymentLog) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case paymentlog.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				pl.ID = value.String
			}
		case paymentlog.FieldExtras:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field extras", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pl.Extras); err != nil {
					return fmt.Errorf("unmarshal field extras: %w", err)
				}
			}
		case paymentlog.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pl.CreatedAt = value.Int64
			}
		case paymentlog.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pl.UpdatedAt = value.Int64
			}
		case paymentlog.FieldOrderID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field order_id", values[i])
			} else if value.Valid {
				pl.OrderID = value.String
			}
		case paymentlog.FieldChannelID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field channel_id", values[i])
			} else if value.Valid {
				pl.ChannelID = value.String
			}
		case paymentlog.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				pl.Type = value.String
			}
		case paymentlog.FieldStatusBefore:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status_before", values[i])
			} else if value.Valid {
				pl.StatusBefore = value.String
			}
		case paymentlog.FieldStatusAfter:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status_after", values[i])
			} else if value.Valid {
				pl.StatusAfter = value.String
			}
		case paymentlog.FieldRequestData:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field request_data", values[i])
			} else if value.Valid {
				pl.RequestData = value.String
			}
		case paymentlog.FieldResponseData:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field response_data", values[i])
			} else if value.Valid {
				pl.ResponseData = value.String
			}
		case paymentlog.FieldIP:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ip", values[i])
			} else if value.Valid {
				pl.IP = value.String
			}
		case paymentlog.FieldUserAgent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_agent", values[i])
			} else if value.Valid {
				pl.UserAgent = value.String
			}
		case paymentlog.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				pl.UserID = value.String
			}
		case paymentlog.FieldError:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field error", values[i])
			} else if value.Valid {
				pl.Error = value.String
			}
		default:
			pl.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PaymentLog.
// This includes values selected through modifiers, order, etc.
func (pl *PaymentLog) Value(name string) (ent.Value, error) {
	return pl.selectValues.Get(name)
}

// QueryOrder queries the "order" edge of the PaymentLog entity.
func (pl *PaymentLog) QueryOrder() *PaymentOrderQuery {
	return NewPaymentLogClient(pl.config).QueryOrder(pl)
}

// Update returns a builder for updating this PaymentLog.
// Note that you need to call PaymentLog.Unwrap() before calling this method if this PaymentLog
// was returned from a transaction, and the transaction was committed or rolled back.
func (pl *PaymentLog) Update() *PaymentLogUpdateOne {
	return NewPaymentLogClient(pl.config).UpdateOne(pl)
}

// Unwrap unwraps the PaymentLog entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pl *PaymentLog) Unwrap() *PaymentLog {
	_tx, ok := pl.config.driver.(*txDriver)
	if !ok {
		panic("ent: PaymentLog is not a transactional entity")
	}
	pl.config.driver = _tx.drv
	return pl
}

// String implements the fmt.Stringer.
func (pl *PaymentLog) String() string {
	var builder strings.Builder
	builder.WriteString("PaymentLog(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pl.ID))
	builder.WriteString("extras=")
	builder.WriteString(fmt.Sprintf("%v", pl.Extras))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", pl.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", pl.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("order_id=")
	builder.WriteString(pl.OrderID)
	builder.WriteString(", ")
	builder.WriteString("channel_id=")
	builder.WriteString(pl.ChannelID)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(pl.Type)
	builder.WriteString(", ")
	builder.WriteString("status_before=")
	builder.WriteString(pl.StatusBefore)
	builder.WriteString(", ")
	builder.WriteString("status_after=")
	builder.WriteString(pl.StatusAfter)
	builder.WriteString(", ")
	builder.WriteString("request_data=")
	builder.WriteString(pl.RequestData)
	builder.WriteString(", ")
	builder.WriteString("response_data=")
	builder.WriteString(pl.ResponseData)
	builder.WriteString(", ")
	builder.WriteString("ip=")
	builder.WriteString(pl.IP)
	builder.WriteString(", ")
	builder.WriteString("user_agent=")
	builder.WriteString(pl.UserAgent)
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(pl.UserID)
	builder.WriteString(", ")
	builder.WriteString("error=")
	builder.WriteString(pl.Error)
	builder.WriteByte(')')
	return builder.String()
}

// PaymentLogs is a parsable slice of PaymentLog.
type PaymentLogs []*PaymentLog
