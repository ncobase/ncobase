// Code generated by ent, DO NOT EDIT.

package paymentlog

import (
	"ncobase/core/payment/data/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldContainsFold(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v int64) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v int64) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldEQ(FieldUpdatedAt, v))
}

// OrderID applies equality check predicate on the "order_id" field. It's identical to OrderIDEQ.
func OrderID(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldEQ(FieldOrderID, v))
}

// ChannelID applies equality check predicate on the "channel_id" field. It's identical to ChannelIDEQ.
func ChannelID(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldEQ(FieldChannelID, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldEQ(FieldType, v))
}

// StatusBefore applies equality check predicate on the "status_before" field. It's identical to StatusBeforeEQ.
func StatusBefore(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldEQ(FieldStatusBefore, v))
}

// StatusAfter applies equality check predicate on the "status_after" field. It's identical to StatusAfterEQ.
func StatusAfter(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldEQ(FieldStatusAfter, v))
}

// RequestData applies equality check predicate on the "request_data" field. It's identical to RequestDataEQ.
func RequestData(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldEQ(FieldRequestData, v))
}

// ResponseData applies equality check predicate on the "response_data" field. It's identical to ResponseDataEQ.
func ResponseData(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldEQ(FieldResponseData, v))
}

// IP applies equality check predicate on the "ip" field. It's identical to IPEQ.
func IP(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldEQ(FieldIP, v))
}

// UserAgent applies equality check predicate on the "user_agent" field. It's identical to UserAgentEQ.
func UserAgent(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldEQ(FieldUserAgent, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldEQ(FieldUserID, v))
}

// Error applies equality check predicate on the "error" field. It's identical to ErrorEQ.
func Error(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldEQ(FieldError, v))
}

// ExtrasIsNil applies the IsNil predicate on the "extras" field.
func ExtrasIsNil() predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldIsNull(FieldExtras))
}

// ExtrasNotNil applies the NotNil predicate on the "extras" field.
func ExtrasNotNil() predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldNotNull(FieldExtras))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v int64) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v int64) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...int64) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...int64) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v int64) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v int64) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v int64) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v int64) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v int64) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v int64) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...int64) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...int64) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v int64) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v int64) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v int64) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v int64) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldNotNull(FieldUpdatedAt))
}

// OrderIDEQ applies the EQ predicate on the "order_id" field.
func OrderIDEQ(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldEQ(FieldOrderID, v))
}

// OrderIDNEQ applies the NEQ predicate on the "order_id" field.
func OrderIDNEQ(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldNEQ(FieldOrderID, v))
}

// OrderIDIn applies the In predicate on the "order_id" field.
func OrderIDIn(vs ...string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldIn(FieldOrderID, vs...))
}

// OrderIDNotIn applies the NotIn predicate on the "order_id" field.
func OrderIDNotIn(vs ...string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldNotIn(FieldOrderID, vs...))
}

// OrderIDGT applies the GT predicate on the "order_id" field.
func OrderIDGT(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldGT(FieldOrderID, v))
}

// OrderIDGTE applies the GTE predicate on the "order_id" field.
func OrderIDGTE(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldGTE(FieldOrderID, v))
}

// OrderIDLT applies the LT predicate on the "order_id" field.
func OrderIDLT(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldLT(FieldOrderID, v))
}

// OrderIDLTE applies the LTE predicate on the "order_id" field.
func OrderIDLTE(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldLTE(FieldOrderID, v))
}

// OrderIDContains applies the Contains predicate on the "order_id" field.
func OrderIDContains(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldContains(FieldOrderID, v))
}

// OrderIDHasPrefix applies the HasPrefix predicate on the "order_id" field.
func OrderIDHasPrefix(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldHasPrefix(FieldOrderID, v))
}

// OrderIDHasSuffix applies the HasSuffix predicate on the "order_id" field.
func OrderIDHasSuffix(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldHasSuffix(FieldOrderID, v))
}

// OrderIDEqualFold applies the EqualFold predicate on the "order_id" field.
func OrderIDEqualFold(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldEqualFold(FieldOrderID, v))
}

// OrderIDContainsFold applies the ContainsFold predicate on the "order_id" field.
func OrderIDContainsFold(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldContainsFold(FieldOrderID, v))
}

// ChannelIDEQ applies the EQ predicate on the "channel_id" field.
func ChannelIDEQ(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldEQ(FieldChannelID, v))
}

// ChannelIDNEQ applies the NEQ predicate on the "channel_id" field.
func ChannelIDNEQ(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldNEQ(FieldChannelID, v))
}

// ChannelIDIn applies the In predicate on the "channel_id" field.
func ChannelIDIn(vs ...string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldIn(FieldChannelID, vs...))
}

// ChannelIDNotIn applies the NotIn predicate on the "channel_id" field.
func ChannelIDNotIn(vs ...string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldNotIn(FieldChannelID, vs...))
}

// ChannelIDGT applies the GT predicate on the "channel_id" field.
func ChannelIDGT(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldGT(FieldChannelID, v))
}

// ChannelIDGTE applies the GTE predicate on the "channel_id" field.
func ChannelIDGTE(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldGTE(FieldChannelID, v))
}

// ChannelIDLT applies the LT predicate on the "channel_id" field.
func ChannelIDLT(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldLT(FieldChannelID, v))
}

// ChannelIDLTE applies the LTE predicate on the "channel_id" field.
func ChannelIDLTE(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldLTE(FieldChannelID, v))
}

// ChannelIDContains applies the Contains predicate on the "channel_id" field.
func ChannelIDContains(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldContains(FieldChannelID, v))
}

// ChannelIDHasPrefix applies the HasPrefix predicate on the "channel_id" field.
func ChannelIDHasPrefix(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldHasPrefix(FieldChannelID, v))
}

// ChannelIDHasSuffix applies the HasSuffix predicate on the "channel_id" field.
func ChannelIDHasSuffix(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldHasSuffix(FieldChannelID, v))
}

// ChannelIDEqualFold applies the EqualFold predicate on the "channel_id" field.
func ChannelIDEqualFold(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldEqualFold(FieldChannelID, v))
}

// ChannelIDContainsFold applies the ContainsFold predicate on the "channel_id" field.
func ChannelIDContainsFold(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldContainsFold(FieldChannelID, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldHasSuffix(FieldType, v))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldContainsFold(FieldType, v))
}

// StatusBeforeEQ applies the EQ predicate on the "status_before" field.
func StatusBeforeEQ(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldEQ(FieldStatusBefore, v))
}

// StatusBeforeNEQ applies the NEQ predicate on the "status_before" field.
func StatusBeforeNEQ(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldNEQ(FieldStatusBefore, v))
}

// StatusBeforeIn applies the In predicate on the "status_before" field.
func StatusBeforeIn(vs ...string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldIn(FieldStatusBefore, vs...))
}

// StatusBeforeNotIn applies the NotIn predicate on the "status_before" field.
func StatusBeforeNotIn(vs ...string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldNotIn(FieldStatusBefore, vs...))
}

// StatusBeforeGT applies the GT predicate on the "status_before" field.
func StatusBeforeGT(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldGT(FieldStatusBefore, v))
}

// StatusBeforeGTE applies the GTE predicate on the "status_before" field.
func StatusBeforeGTE(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldGTE(FieldStatusBefore, v))
}

// StatusBeforeLT applies the LT predicate on the "status_before" field.
func StatusBeforeLT(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldLT(FieldStatusBefore, v))
}

// StatusBeforeLTE applies the LTE predicate on the "status_before" field.
func StatusBeforeLTE(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldLTE(FieldStatusBefore, v))
}

// StatusBeforeContains applies the Contains predicate on the "status_before" field.
func StatusBeforeContains(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldContains(FieldStatusBefore, v))
}

// StatusBeforeHasPrefix applies the HasPrefix predicate on the "status_before" field.
func StatusBeforeHasPrefix(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldHasPrefix(FieldStatusBefore, v))
}

// StatusBeforeHasSuffix applies the HasSuffix predicate on the "status_before" field.
func StatusBeforeHasSuffix(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldHasSuffix(FieldStatusBefore, v))
}

// StatusBeforeIsNil applies the IsNil predicate on the "status_before" field.
func StatusBeforeIsNil() predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldIsNull(FieldStatusBefore))
}

// StatusBeforeNotNil applies the NotNil predicate on the "status_before" field.
func StatusBeforeNotNil() predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldNotNull(FieldStatusBefore))
}

// StatusBeforeEqualFold applies the EqualFold predicate on the "status_before" field.
func StatusBeforeEqualFold(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldEqualFold(FieldStatusBefore, v))
}

// StatusBeforeContainsFold applies the ContainsFold predicate on the "status_before" field.
func StatusBeforeContainsFold(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldContainsFold(FieldStatusBefore, v))
}

// StatusAfterEQ applies the EQ predicate on the "status_after" field.
func StatusAfterEQ(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldEQ(FieldStatusAfter, v))
}

// StatusAfterNEQ applies the NEQ predicate on the "status_after" field.
func StatusAfterNEQ(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldNEQ(FieldStatusAfter, v))
}

// StatusAfterIn applies the In predicate on the "status_after" field.
func StatusAfterIn(vs ...string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldIn(FieldStatusAfter, vs...))
}

// StatusAfterNotIn applies the NotIn predicate on the "status_after" field.
func StatusAfterNotIn(vs ...string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldNotIn(FieldStatusAfter, vs...))
}

// StatusAfterGT applies the GT predicate on the "status_after" field.
func StatusAfterGT(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldGT(FieldStatusAfter, v))
}

// StatusAfterGTE applies the GTE predicate on the "status_after" field.
func StatusAfterGTE(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldGTE(FieldStatusAfter, v))
}

// StatusAfterLT applies the LT predicate on the "status_after" field.
func StatusAfterLT(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldLT(FieldStatusAfter, v))
}

// StatusAfterLTE applies the LTE predicate on the "status_after" field.
func StatusAfterLTE(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldLTE(FieldStatusAfter, v))
}

// StatusAfterContains applies the Contains predicate on the "status_after" field.
func StatusAfterContains(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldContains(FieldStatusAfter, v))
}

// StatusAfterHasPrefix applies the HasPrefix predicate on the "status_after" field.
func StatusAfterHasPrefix(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldHasPrefix(FieldStatusAfter, v))
}

// StatusAfterHasSuffix applies the HasSuffix predicate on the "status_after" field.
func StatusAfterHasSuffix(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldHasSuffix(FieldStatusAfter, v))
}

// StatusAfterIsNil applies the IsNil predicate on the "status_after" field.
func StatusAfterIsNil() predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldIsNull(FieldStatusAfter))
}

// StatusAfterNotNil applies the NotNil predicate on the "status_after" field.
func StatusAfterNotNil() predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldNotNull(FieldStatusAfter))
}

// StatusAfterEqualFold applies the EqualFold predicate on the "status_after" field.
func StatusAfterEqualFold(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldEqualFold(FieldStatusAfter, v))
}

// StatusAfterContainsFold applies the ContainsFold predicate on the "status_after" field.
func StatusAfterContainsFold(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldContainsFold(FieldStatusAfter, v))
}

// RequestDataEQ applies the EQ predicate on the "request_data" field.
func RequestDataEQ(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldEQ(FieldRequestData, v))
}

// RequestDataNEQ applies the NEQ predicate on the "request_data" field.
func RequestDataNEQ(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldNEQ(FieldRequestData, v))
}

// RequestDataIn applies the In predicate on the "request_data" field.
func RequestDataIn(vs ...string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldIn(FieldRequestData, vs...))
}

// RequestDataNotIn applies the NotIn predicate on the "request_data" field.
func RequestDataNotIn(vs ...string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldNotIn(FieldRequestData, vs...))
}

// RequestDataGT applies the GT predicate on the "request_data" field.
func RequestDataGT(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldGT(FieldRequestData, v))
}

// RequestDataGTE applies the GTE predicate on the "request_data" field.
func RequestDataGTE(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldGTE(FieldRequestData, v))
}

// RequestDataLT applies the LT predicate on the "request_data" field.
func RequestDataLT(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldLT(FieldRequestData, v))
}

// RequestDataLTE applies the LTE predicate on the "request_data" field.
func RequestDataLTE(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldLTE(FieldRequestData, v))
}

// RequestDataContains applies the Contains predicate on the "request_data" field.
func RequestDataContains(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldContains(FieldRequestData, v))
}

// RequestDataHasPrefix applies the HasPrefix predicate on the "request_data" field.
func RequestDataHasPrefix(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldHasPrefix(FieldRequestData, v))
}

// RequestDataHasSuffix applies the HasSuffix predicate on the "request_data" field.
func RequestDataHasSuffix(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldHasSuffix(FieldRequestData, v))
}

// RequestDataIsNil applies the IsNil predicate on the "request_data" field.
func RequestDataIsNil() predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldIsNull(FieldRequestData))
}

// RequestDataNotNil applies the NotNil predicate on the "request_data" field.
func RequestDataNotNil() predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldNotNull(FieldRequestData))
}

// RequestDataEqualFold applies the EqualFold predicate on the "request_data" field.
func RequestDataEqualFold(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldEqualFold(FieldRequestData, v))
}

// RequestDataContainsFold applies the ContainsFold predicate on the "request_data" field.
func RequestDataContainsFold(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldContainsFold(FieldRequestData, v))
}

// ResponseDataEQ applies the EQ predicate on the "response_data" field.
func ResponseDataEQ(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldEQ(FieldResponseData, v))
}

// ResponseDataNEQ applies the NEQ predicate on the "response_data" field.
func ResponseDataNEQ(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldNEQ(FieldResponseData, v))
}

// ResponseDataIn applies the In predicate on the "response_data" field.
func ResponseDataIn(vs ...string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldIn(FieldResponseData, vs...))
}

// ResponseDataNotIn applies the NotIn predicate on the "response_data" field.
func ResponseDataNotIn(vs ...string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldNotIn(FieldResponseData, vs...))
}

// ResponseDataGT applies the GT predicate on the "response_data" field.
func ResponseDataGT(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldGT(FieldResponseData, v))
}

// ResponseDataGTE applies the GTE predicate on the "response_data" field.
func ResponseDataGTE(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldGTE(FieldResponseData, v))
}

// ResponseDataLT applies the LT predicate on the "response_data" field.
func ResponseDataLT(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldLT(FieldResponseData, v))
}

// ResponseDataLTE applies the LTE predicate on the "response_data" field.
func ResponseDataLTE(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldLTE(FieldResponseData, v))
}

// ResponseDataContains applies the Contains predicate on the "response_data" field.
func ResponseDataContains(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldContains(FieldResponseData, v))
}

// ResponseDataHasPrefix applies the HasPrefix predicate on the "response_data" field.
func ResponseDataHasPrefix(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldHasPrefix(FieldResponseData, v))
}

// ResponseDataHasSuffix applies the HasSuffix predicate on the "response_data" field.
func ResponseDataHasSuffix(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldHasSuffix(FieldResponseData, v))
}

// ResponseDataIsNil applies the IsNil predicate on the "response_data" field.
func ResponseDataIsNil() predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldIsNull(FieldResponseData))
}

// ResponseDataNotNil applies the NotNil predicate on the "response_data" field.
func ResponseDataNotNil() predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldNotNull(FieldResponseData))
}

// ResponseDataEqualFold applies the EqualFold predicate on the "response_data" field.
func ResponseDataEqualFold(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldEqualFold(FieldResponseData, v))
}

// ResponseDataContainsFold applies the ContainsFold predicate on the "response_data" field.
func ResponseDataContainsFold(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldContainsFold(FieldResponseData, v))
}

// IPEQ applies the EQ predicate on the "ip" field.
func IPEQ(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldEQ(FieldIP, v))
}

// IPNEQ applies the NEQ predicate on the "ip" field.
func IPNEQ(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldNEQ(FieldIP, v))
}

// IPIn applies the In predicate on the "ip" field.
func IPIn(vs ...string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldIn(FieldIP, vs...))
}

// IPNotIn applies the NotIn predicate on the "ip" field.
func IPNotIn(vs ...string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldNotIn(FieldIP, vs...))
}

// IPGT applies the GT predicate on the "ip" field.
func IPGT(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldGT(FieldIP, v))
}

// IPGTE applies the GTE predicate on the "ip" field.
func IPGTE(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldGTE(FieldIP, v))
}

// IPLT applies the LT predicate on the "ip" field.
func IPLT(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldLT(FieldIP, v))
}

// IPLTE applies the LTE predicate on the "ip" field.
func IPLTE(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldLTE(FieldIP, v))
}

// IPContains applies the Contains predicate on the "ip" field.
func IPContains(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldContains(FieldIP, v))
}

// IPHasPrefix applies the HasPrefix predicate on the "ip" field.
func IPHasPrefix(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldHasPrefix(FieldIP, v))
}

// IPHasSuffix applies the HasSuffix predicate on the "ip" field.
func IPHasSuffix(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldHasSuffix(FieldIP, v))
}

// IPIsNil applies the IsNil predicate on the "ip" field.
func IPIsNil() predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldIsNull(FieldIP))
}

// IPNotNil applies the NotNil predicate on the "ip" field.
func IPNotNil() predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldNotNull(FieldIP))
}

// IPEqualFold applies the EqualFold predicate on the "ip" field.
func IPEqualFold(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldEqualFold(FieldIP, v))
}

// IPContainsFold applies the ContainsFold predicate on the "ip" field.
func IPContainsFold(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldContainsFold(FieldIP, v))
}

// UserAgentEQ applies the EQ predicate on the "user_agent" field.
func UserAgentEQ(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldEQ(FieldUserAgent, v))
}

// UserAgentNEQ applies the NEQ predicate on the "user_agent" field.
func UserAgentNEQ(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldNEQ(FieldUserAgent, v))
}

// UserAgentIn applies the In predicate on the "user_agent" field.
func UserAgentIn(vs ...string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldIn(FieldUserAgent, vs...))
}

// UserAgentNotIn applies the NotIn predicate on the "user_agent" field.
func UserAgentNotIn(vs ...string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldNotIn(FieldUserAgent, vs...))
}

// UserAgentGT applies the GT predicate on the "user_agent" field.
func UserAgentGT(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldGT(FieldUserAgent, v))
}

// UserAgentGTE applies the GTE predicate on the "user_agent" field.
func UserAgentGTE(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldGTE(FieldUserAgent, v))
}

// UserAgentLT applies the LT predicate on the "user_agent" field.
func UserAgentLT(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldLT(FieldUserAgent, v))
}

// UserAgentLTE applies the LTE predicate on the "user_agent" field.
func UserAgentLTE(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldLTE(FieldUserAgent, v))
}

// UserAgentContains applies the Contains predicate on the "user_agent" field.
func UserAgentContains(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldContains(FieldUserAgent, v))
}

// UserAgentHasPrefix applies the HasPrefix predicate on the "user_agent" field.
func UserAgentHasPrefix(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldHasPrefix(FieldUserAgent, v))
}

// UserAgentHasSuffix applies the HasSuffix predicate on the "user_agent" field.
func UserAgentHasSuffix(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldHasSuffix(FieldUserAgent, v))
}

// UserAgentIsNil applies the IsNil predicate on the "user_agent" field.
func UserAgentIsNil() predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldIsNull(FieldUserAgent))
}

// UserAgentNotNil applies the NotNil predicate on the "user_agent" field.
func UserAgentNotNil() predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldNotNull(FieldUserAgent))
}

// UserAgentEqualFold applies the EqualFold predicate on the "user_agent" field.
func UserAgentEqualFold(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldEqualFold(FieldUserAgent, v))
}

// UserAgentContainsFold applies the ContainsFold predicate on the "user_agent" field.
func UserAgentContainsFold(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldContainsFold(FieldUserAgent, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldLTE(FieldUserID, v))
}

// UserIDContains applies the Contains predicate on the "user_id" field.
func UserIDContains(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldContains(FieldUserID, v))
}

// UserIDHasPrefix applies the HasPrefix predicate on the "user_id" field.
func UserIDHasPrefix(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldHasPrefix(FieldUserID, v))
}

// UserIDHasSuffix applies the HasSuffix predicate on the "user_id" field.
func UserIDHasSuffix(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldHasSuffix(FieldUserID, v))
}

// UserIDIsNil applies the IsNil predicate on the "user_id" field.
func UserIDIsNil() predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldIsNull(FieldUserID))
}

// UserIDNotNil applies the NotNil predicate on the "user_id" field.
func UserIDNotNil() predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldNotNull(FieldUserID))
}

// UserIDEqualFold applies the EqualFold predicate on the "user_id" field.
func UserIDEqualFold(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldEqualFold(FieldUserID, v))
}

// UserIDContainsFold applies the ContainsFold predicate on the "user_id" field.
func UserIDContainsFold(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldContainsFold(FieldUserID, v))
}

// ErrorEQ applies the EQ predicate on the "error" field.
func ErrorEQ(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldEQ(FieldError, v))
}

// ErrorNEQ applies the NEQ predicate on the "error" field.
func ErrorNEQ(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldNEQ(FieldError, v))
}

// ErrorIn applies the In predicate on the "error" field.
func ErrorIn(vs ...string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldIn(FieldError, vs...))
}

// ErrorNotIn applies the NotIn predicate on the "error" field.
func ErrorNotIn(vs ...string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldNotIn(FieldError, vs...))
}

// ErrorGT applies the GT predicate on the "error" field.
func ErrorGT(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldGT(FieldError, v))
}

// ErrorGTE applies the GTE predicate on the "error" field.
func ErrorGTE(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldGTE(FieldError, v))
}

// ErrorLT applies the LT predicate on the "error" field.
func ErrorLT(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldLT(FieldError, v))
}

// ErrorLTE applies the LTE predicate on the "error" field.
func ErrorLTE(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldLTE(FieldError, v))
}

// ErrorContains applies the Contains predicate on the "error" field.
func ErrorContains(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldContains(FieldError, v))
}

// ErrorHasPrefix applies the HasPrefix predicate on the "error" field.
func ErrorHasPrefix(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldHasPrefix(FieldError, v))
}

// ErrorHasSuffix applies the HasSuffix predicate on the "error" field.
func ErrorHasSuffix(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldHasSuffix(FieldError, v))
}

// ErrorIsNil applies the IsNil predicate on the "error" field.
func ErrorIsNil() predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldIsNull(FieldError))
}

// ErrorNotNil applies the NotNil predicate on the "error" field.
func ErrorNotNil() predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldNotNull(FieldError))
}

// ErrorEqualFold applies the EqualFold predicate on the "error" field.
func ErrorEqualFold(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldEqualFold(FieldError, v))
}

// ErrorContainsFold applies the ContainsFold predicate on the "error" field.
func ErrorContainsFold(v string) predicate.PaymentLog {
	return predicate.PaymentLog(sql.FieldContainsFold(FieldError, v))
}

// HasOrder applies the HasEdge predicate on the "order" edge.
func HasOrder() predicate.PaymentLog {
	return predicate.PaymentLog(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OrderTable, OrderColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrderWith applies the HasEdge predicate on the "order" edge with a given conditions (other predicates).
func HasOrderWith(preds ...predicate.PaymentOrder) predicate.PaymentLog {
	return predicate.PaymentLog(func(s *sql.Selector) {
		step := newOrderStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PaymentLog) predicate.PaymentLog {
	return predicate.PaymentLog(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PaymentLog) predicate.PaymentLog {
	return predicate.PaymentLog(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PaymentLog) predicate.PaymentLog {
	return predicate.PaymentLog(sql.NotPredicates(p))
}
