// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/payment/data/ent/paymentlog"
	"ncobase/payment/data/ent/paymentorder"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PaymentLogCreate is the builder for creating a PaymentLog entity.
type PaymentLogCreate struct {
	config
	mutation *PaymentLogMutation
	hooks    []Hook
}

// SetExtras sets the "extras" field.
func (plc *PaymentLogCreate) SetExtras(m map[string]interface{}) *PaymentLogCreate {
	plc.mutation.SetExtras(m)
	return plc
}

// SetCreatedAt sets the "created_at" field.
func (plc *PaymentLogCreate) SetCreatedAt(i int64) *PaymentLogCreate {
	plc.mutation.SetCreatedAt(i)
	return plc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (plc *PaymentLogCreate) SetNillableCreatedAt(i *int64) *PaymentLogCreate {
	if i != nil {
		plc.SetCreatedAt(*i)
	}
	return plc
}

// SetUpdatedAt sets the "updated_at" field.
func (plc *PaymentLogCreate) SetUpdatedAt(i int64) *PaymentLogCreate {
	plc.mutation.SetUpdatedAt(i)
	return plc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (plc *PaymentLogCreate) SetNillableUpdatedAt(i *int64) *PaymentLogCreate {
	if i != nil {
		plc.SetUpdatedAt(*i)
	}
	return plc
}

// SetOrderID sets the "order_id" field.
func (plc *PaymentLogCreate) SetOrderID(s string) *PaymentLogCreate {
	plc.mutation.SetOrderID(s)
	return plc
}

// SetChannelID sets the "channel_id" field.
func (plc *PaymentLogCreate) SetChannelID(s string) *PaymentLogCreate {
	plc.mutation.SetChannelID(s)
	return plc
}

// SetType sets the "type" field.
func (plc *PaymentLogCreate) SetType(s string) *PaymentLogCreate {
	plc.mutation.SetType(s)
	return plc
}

// SetStatusBefore sets the "status_before" field.
func (plc *PaymentLogCreate) SetStatusBefore(s string) *PaymentLogCreate {
	plc.mutation.SetStatusBefore(s)
	return plc
}

// SetNillableStatusBefore sets the "status_before" field if the given value is not nil.
func (plc *PaymentLogCreate) SetNillableStatusBefore(s *string) *PaymentLogCreate {
	if s != nil {
		plc.SetStatusBefore(*s)
	}
	return plc
}

// SetStatusAfter sets the "status_after" field.
func (plc *PaymentLogCreate) SetStatusAfter(s string) *PaymentLogCreate {
	plc.mutation.SetStatusAfter(s)
	return plc
}

// SetNillableStatusAfter sets the "status_after" field if the given value is not nil.
func (plc *PaymentLogCreate) SetNillableStatusAfter(s *string) *PaymentLogCreate {
	if s != nil {
		plc.SetStatusAfter(*s)
	}
	return plc
}

// SetRequestData sets the "request_data" field.
func (plc *PaymentLogCreate) SetRequestData(s string) *PaymentLogCreate {
	plc.mutation.SetRequestData(s)
	return plc
}

// SetNillableRequestData sets the "request_data" field if the given value is not nil.
func (plc *PaymentLogCreate) SetNillableRequestData(s *string) *PaymentLogCreate {
	if s != nil {
		plc.SetRequestData(*s)
	}
	return plc
}

// SetResponseData sets the "response_data" field.
func (plc *PaymentLogCreate) SetResponseData(s string) *PaymentLogCreate {
	plc.mutation.SetResponseData(s)
	return plc
}

// SetNillableResponseData sets the "response_data" field if the given value is not nil.
func (plc *PaymentLogCreate) SetNillableResponseData(s *string) *PaymentLogCreate {
	if s != nil {
		plc.SetResponseData(*s)
	}
	return plc
}

// SetIP sets the "ip" field.
func (plc *PaymentLogCreate) SetIP(s string) *PaymentLogCreate {
	plc.mutation.SetIP(s)
	return plc
}

// SetNillableIP sets the "ip" field if the given value is not nil.
func (plc *PaymentLogCreate) SetNillableIP(s *string) *PaymentLogCreate {
	if s != nil {
		plc.SetIP(*s)
	}
	return plc
}

// SetUserAgent sets the "user_agent" field.
func (plc *PaymentLogCreate) SetUserAgent(s string) *PaymentLogCreate {
	plc.mutation.SetUserAgent(s)
	return plc
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (plc *PaymentLogCreate) SetNillableUserAgent(s *string) *PaymentLogCreate {
	if s != nil {
		plc.SetUserAgent(*s)
	}
	return plc
}

// SetUserID sets the "user_id" field.
func (plc *PaymentLogCreate) SetUserID(s string) *PaymentLogCreate {
	plc.mutation.SetUserID(s)
	return plc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (plc *PaymentLogCreate) SetNillableUserID(s *string) *PaymentLogCreate {
	if s != nil {
		plc.SetUserID(*s)
	}
	return plc
}

// SetError sets the "error" field.
func (plc *PaymentLogCreate) SetError(s string) *PaymentLogCreate {
	plc.mutation.SetError(s)
	return plc
}

// SetNillableError sets the "error" field if the given value is not nil.
func (plc *PaymentLogCreate) SetNillableError(s *string) *PaymentLogCreate {
	if s != nil {
		plc.SetError(*s)
	}
	return plc
}

// SetID sets the "id" field.
func (plc *PaymentLogCreate) SetID(s string) *PaymentLogCreate {
	plc.mutation.SetID(s)
	return plc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (plc *PaymentLogCreate) SetNillableID(s *string) *PaymentLogCreate {
	if s != nil {
		plc.SetID(*s)
	}
	return plc
}

// SetOrder sets the "order" edge to the PaymentOrder entity.
func (plc *PaymentLogCreate) SetOrder(p *PaymentOrder) *PaymentLogCreate {
	return plc.SetOrderID(p.ID)
}

// Mutation returns the PaymentLogMutation object of the builder.
func (plc *PaymentLogCreate) Mutation() *PaymentLogMutation {
	return plc.mutation
}

// Save creates the PaymentLog in the database.
func (plc *PaymentLogCreate) Save(ctx context.Context) (*PaymentLog, error) {
	plc.defaults()
	return withHooks(ctx, plc.sqlSave, plc.mutation, plc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (plc *PaymentLogCreate) SaveX(ctx context.Context) *PaymentLog {
	v, err := plc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (plc *PaymentLogCreate) Exec(ctx context.Context) error {
	_, err := plc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (plc *PaymentLogCreate) ExecX(ctx context.Context) {
	if err := plc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (plc *PaymentLogCreate) defaults() {
	if _, ok := plc.mutation.Extras(); !ok {
		v := paymentlog.DefaultExtras
		plc.mutation.SetExtras(v)
	}
	if _, ok := plc.mutation.CreatedAt(); !ok {
		v := paymentlog.DefaultCreatedAt()
		plc.mutation.SetCreatedAt(v)
	}
	if _, ok := plc.mutation.UpdatedAt(); !ok {
		v := paymentlog.DefaultUpdatedAt()
		plc.mutation.SetUpdatedAt(v)
	}
	if _, ok := plc.mutation.ID(); !ok {
		v := paymentlog.DefaultID()
		plc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (plc *PaymentLogCreate) check() error {
	if _, ok := plc.mutation.OrderID(); !ok {
		return &ValidationError{Name: "order_id", err: errors.New(`ent: missing required field "PaymentLog.order_id"`)}
	}
	if v, ok := plc.mutation.OrderID(); ok {
		if err := paymentlog.OrderIDValidator(v); err != nil {
			return &ValidationError{Name: "order_id", err: fmt.Errorf(`ent: validator failed for field "PaymentLog.order_id": %w`, err)}
		}
	}
	if _, ok := plc.mutation.ChannelID(); !ok {
		return &ValidationError{Name: "channel_id", err: errors.New(`ent: missing required field "PaymentLog.channel_id"`)}
	}
	if v, ok := plc.mutation.ChannelID(); ok {
		if err := paymentlog.ChannelIDValidator(v); err != nil {
			return &ValidationError{Name: "channel_id", err: fmt.Errorf(`ent: validator failed for field "PaymentLog.channel_id": %w`, err)}
		}
	}
	if _, ok := plc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "PaymentLog.type"`)}
	}
	if v, ok := plc.mutation.GetType(); ok {
		if err := paymentlog.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "PaymentLog.type": %w`, err)}
		}
	}
	if v, ok := plc.mutation.ID(); ok {
		if err := paymentlog.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "PaymentLog.id": %w`, err)}
		}
	}
	if len(plc.mutation.OrderIDs()) == 0 {
		return &ValidationError{Name: "order", err: errors.New(`ent: missing required edge "PaymentLog.order"`)}
	}
	return nil
}

func (plc *PaymentLogCreate) sqlSave(ctx context.Context) (*PaymentLog, error) {
	if err := plc.check(); err != nil {
		return nil, err
	}
	_node, _spec := plc.createSpec()
	if err := sqlgraph.CreateNode(ctx, plc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected PaymentLog.ID type: %T", _spec.ID.Value)
		}
	}
	plc.mutation.id = &_node.ID
	plc.mutation.done = true
	return _node, nil
}

func (plc *PaymentLogCreate) createSpec() (*PaymentLog, *sqlgraph.CreateSpec) {
	var (
		_node = &PaymentLog{config: plc.config}
		_spec = sqlgraph.NewCreateSpec(paymentlog.Table, sqlgraph.NewFieldSpec(paymentlog.FieldID, field.TypeString))
	)
	if id, ok := plc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := plc.mutation.Extras(); ok {
		_spec.SetField(paymentlog.FieldExtras, field.TypeJSON, value)
		_node.Extras = value
	}
	if value, ok := plc.mutation.CreatedAt(); ok {
		_spec.SetField(paymentlog.FieldCreatedAt, field.TypeInt64, value)
		_node.CreatedAt = value
	}
	if value, ok := plc.mutation.UpdatedAt(); ok {
		_spec.SetField(paymentlog.FieldUpdatedAt, field.TypeInt64, value)
		_node.UpdatedAt = value
	}
	if value, ok := plc.mutation.ChannelID(); ok {
		_spec.SetField(paymentlog.FieldChannelID, field.TypeString, value)
		_node.ChannelID = value
	}
	if value, ok := plc.mutation.GetType(); ok {
		_spec.SetField(paymentlog.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := plc.mutation.StatusBefore(); ok {
		_spec.SetField(paymentlog.FieldStatusBefore, field.TypeString, value)
		_node.StatusBefore = value
	}
	if value, ok := plc.mutation.StatusAfter(); ok {
		_spec.SetField(paymentlog.FieldStatusAfter, field.TypeString, value)
		_node.StatusAfter = value
	}
	if value, ok := plc.mutation.RequestData(); ok {
		_spec.SetField(paymentlog.FieldRequestData, field.TypeString, value)
		_node.RequestData = value
	}
	if value, ok := plc.mutation.ResponseData(); ok {
		_spec.SetField(paymentlog.FieldResponseData, field.TypeString, value)
		_node.ResponseData = value
	}
	if value, ok := plc.mutation.IP(); ok {
		_spec.SetField(paymentlog.FieldIP, field.TypeString, value)
		_node.IP = value
	}
	if value, ok := plc.mutation.UserAgent(); ok {
		_spec.SetField(paymentlog.FieldUserAgent, field.TypeString, value)
		_node.UserAgent = value
	}
	if value, ok := plc.mutation.UserID(); ok {
		_spec.SetField(paymentlog.FieldUserID, field.TypeString, value)
		_node.UserID = value
	}
	if value, ok := plc.mutation.Error(); ok {
		_spec.SetField(paymentlog.FieldError, field.TypeString, value)
		_node.Error = value
	}
	if nodes := plc.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   paymentlog.OrderTable,
			Columns: []string{paymentlog.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentorder.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OrderID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PaymentLogCreateBulk is the builder for creating many PaymentLog entities in bulk.
type PaymentLogCreateBulk struct {
	config
	err      error
	builders []*PaymentLogCreate
}

// Save creates the PaymentLog entities in the database.
func (plcb *PaymentLogCreateBulk) Save(ctx context.Context) ([]*PaymentLog, error) {
	if plcb.err != nil {
		return nil, plcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(plcb.builders))
	nodes := make([]*PaymentLog, len(plcb.builders))
	mutators := make([]Mutator, len(plcb.builders))
	for i := range plcb.builders {
		func(i int, root context.Context) {
			builder := plcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PaymentLogMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, plcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, plcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, plcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (plcb *PaymentLogCreateBulk) SaveX(ctx context.Context) []*PaymentLog {
	v, err := plcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (plcb *PaymentLogCreateBulk) Exec(ctx context.Context) error {
	_, err := plcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (plcb *PaymentLogCreateBulk) ExecX(ctx context.Context) {
	if err := plcb.Exec(ctx); err != nil {
		panic(err)
	}
}
