// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"ncobase/core/payment/data/ent/paymentorder"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// PaymentOrder is the model entity for the PaymentOrder schema.
type PaymentOrder struct {
	config `json:"-"`
	// ID of the ent.
	// primary key
	ID string `json:"id,omitempty"`
	// Extend properties
	Extras map[string]interface{} `json:"extras,omitempty"`
	// id of the creator
	CreatedBy string `json:"created_by,omitempty"`
	// id of the last updater
	UpdatedBy string `json:"updated_by,omitempty"`
	// created at
	CreatedAt int64 `json:"created_at,omitempty"`
	// updated at
	UpdatedAt int64 `json:"updated_at,omitempty"`
	// Unique order number
	OrderNumber string `json:"order_number,omitempty"`
	// Payment amount
	Amount float64 `json:"amount,omitempty"`
	// Currency code (USD, EUR, GBP, etc.)
	Currency string `json:"currency,omitempty"`
	// Payment status (pending, completed, failed, refunded, cancelled)
	Status string `json:"status,omitempty"`
	// Payment type (one_time, subscription, recurring)
	Type string `json:"type,omitempty"`
	// Payment channel ID
	ChannelID string `json:"channel_id,omitempty"`
	// User ID
	UserID string `json:"user_id,omitempty"`
	// Tenant ID
	TenantID string `json:"tenant_id,omitempty"`
	// PaymentProduct ID if associated with a product
	ProductID string `json:"product_id,omitempty"`
	// PaymentSubscription ID if associated with a subscription
	SubscriptionID string `json:"subscription_id,omitempty"`
	// Expiration time for the payment
	ExpiresAt time.Time `json:"expires_at,omitempty"`
	// Time when the payment was completed
	PaidAt *time.Time `json:"paid_at,omitempty"`
	// Reference ID from the payment provider
	ProviderRef string `json:"provider_ref,omitempty"`
	// Payment description
	Description string `json:"description,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PaymentOrderQuery when eager-loading is set.
	Edges        PaymentOrderEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PaymentOrderEdges holds the relations/edges for other nodes in the graph.
type PaymentOrderEdges struct {
	// Logs holds the value of the logs edge.
	Logs []*PaymentLog `json:"logs,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// LogsOrErr returns the Logs value or an error if the edge
// was not loaded in eager-loading.
func (e PaymentOrderEdges) LogsOrErr() ([]*PaymentLog, error) {
	if e.loadedTypes[0] {
		return e.Logs, nil
	}
	return nil, &NotLoadedError{edge: "logs"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PaymentOrder) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case paymentorder.FieldExtras:
			values[i] = new([]byte)
		case paymentorder.FieldAmount:
			values[i] = new(sql.NullFloat64)
		case paymentorder.FieldCreatedAt, paymentorder.FieldUpdatedAt:
			values[i] = new(sql.NullInt64)
		case paymentorder.FieldID, paymentorder.FieldCreatedBy, paymentorder.FieldUpdatedBy, paymentorder.FieldOrderNumber, paymentorder.FieldCurrency, paymentorder.FieldStatus, paymentorder.FieldType, paymentorder.FieldChannelID, paymentorder.FieldUserID, paymentorder.FieldTenantID, paymentorder.FieldProductID, paymentorder.FieldSubscriptionID, paymentorder.FieldProviderRef, paymentorder.FieldDescription:
			values[i] = new(sql.NullString)
		case paymentorder.FieldExpiresAt, paymentorder.FieldPaidAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PaymentOrder fields.
func (po *PaymentOrder) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case paymentorder.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				po.ID = value.String
			}
		case paymentorder.FieldExtras:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field extras", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &po.Extras); err != nil {
					return fmt.Errorf("unmarshal field extras: %w", err)
				}
			}
		case paymentorder.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				po.CreatedBy = value.String
			}
		case paymentorder.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				po.UpdatedBy = value.String
			}
		case paymentorder.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				po.CreatedAt = value.Int64
			}
		case paymentorder.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				po.UpdatedAt = value.Int64
			}
		case paymentorder.FieldOrderNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field order_number", values[i])
			} else if value.Valid {
				po.OrderNumber = value.String
			}
		case paymentorder.FieldAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value.Valid {
				po.Amount = value.Float64
			}
		case paymentorder.FieldCurrency:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field currency", values[i])
			} else if value.Valid {
				po.Currency = value.String
			}
		case paymentorder.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				po.Status = value.String
			}
		case paymentorder.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				po.Type = value.String
			}
		case paymentorder.FieldChannelID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field channel_id", values[i])
			} else if value.Valid {
				po.ChannelID = value.String
			}
		case paymentorder.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				po.UserID = value.String
			}
		case paymentorder.FieldTenantID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				po.TenantID = value.String
			}
		case paymentorder.FieldProductID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field product_id", values[i])
			} else if value.Valid {
				po.ProductID = value.String
			}
		case paymentorder.FieldSubscriptionID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subscription_id", values[i])
			} else if value.Valid {
				po.SubscriptionID = value.String
			}
		case paymentorder.FieldExpiresAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expires_at", values[i])
			} else if value.Valid {
				po.ExpiresAt = value.Time
			}
		case paymentorder.FieldPaidAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field paid_at", values[i])
			} else if value.Valid {
				po.PaidAt = new(time.Time)
				*po.PaidAt = value.Time
			}
		case paymentorder.FieldProviderRef:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field provider_ref", values[i])
			} else if value.Valid {
				po.ProviderRef = value.String
			}
		case paymentorder.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				po.Description = value.String
			}
		default:
			po.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PaymentOrder.
// This includes values selected through modifiers, order, etc.
func (po *PaymentOrder) Value(name string) (ent.Value, error) {
	return po.selectValues.Get(name)
}

// QueryLogs queries the "logs" edge of the PaymentOrder entity.
func (po *PaymentOrder) QueryLogs() *PaymentLogQuery {
	return NewPaymentOrderClient(po.config).QueryLogs(po)
}

// Update returns a builder for updating this PaymentOrder.
// Note that you need to call PaymentOrder.Unwrap() before calling this method if this PaymentOrder
// was returned from a transaction, and the transaction was committed or rolled back.
func (po *PaymentOrder) Update() *PaymentOrderUpdateOne {
	return NewPaymentOrderClient(po.config).UpdateOne(po)
}

// Unwrap unwraps the PaymentOrder entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (po *PaymentOrder) Unwrap() *PaymentOrder {
	_tx, ok := po.config.driver.(*txDriver)
	if !ok {
		panic("ent: PaymentOrder is not a transactional entity")
	}
	po.config.driver = _tx.drv
	return po
}

// String implements the fmt.Stringer.
func (po *PaymentOrder) String() string {
	var builder strings.Builder
	builder.WriteString("PaymentOrder(")
	builder.WriteString(fmt.Sprintf("id=%v, ", po.ID))
	builder.WriteString("extras=")
	builder.WriteString(fmt.Sprintf("%v", po.Extras))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(po.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(po.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", po.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", po.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("order_number=")
	builder.WriteString(po.OrderNumber)
	builder.WriteString(", ")
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", po.Amount))
	builder.WriteString(", ")
	builder.WriteString("currency=")
	builder.WriteString(po.Currency)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(po.Status)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(po.Type)
	builder.WriteString(", ")
	builder.WriteString("channel_id=")
	builder.WriteString(po.ChannelID)
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(po.UserID)
	builder.WriteString(", ")
	builder.WriteString("tenant_id=")
	builder.WriteString(po.TenantID)
	builder.WriteString(", ")
	builder.WriteString("product_id=")
	builder.WriteString(po.ProductID)
	builder.WriteString(", ")
	builder.WriteString("subscription_id=")
	builder.WriteString(po.SubscriptionID)
	builder.WriteString(", ")
	builder.WriteString("expires_at=")
	builder.WriteString(po.ExpiresAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := po.PaidAt; v != nil {
		builder.WriteString("paid_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("provider_ref=")
	builder.WriteString(po.ProviderRef)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(po.Description)
	builder.WriteByte(')')
	return builder.String()
}

// PaymentOrders is a parsable slice of PaymentOrder.
type PaymentOrders []*PaymentOrder
