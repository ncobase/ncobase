// Code generated by ent, DO NOT EDIT.

package paymentproduct

import (
	"ncobase/payment/data/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldContainsFold(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldEQ(FieldName, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldEQ(FieldDescription, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldEQ(FieldCreatedBy, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldEQ(FieldUpdatedBy, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v int64) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v int64) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldEQ(FieldUpdatedAt, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldEQ(FieldStatus, v))
}

// PricingType applies equality check predicate on the "pricing_type" field. It's identical to PricingTypeEQ.
func PricingType(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldEQ(FieldPricingType, v))
}

// Price applies equality check predicate on the "price" field. It's identical to PriceEQ.
func Price(v float64) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldEQ(FieldPrice, v))
}

// Currency applies equality check predicate on the "currency" field. It's identical to CurrencyEQ.
func Currency(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldEQ(FieldCurrency, v))
}

// BillingInterval applies equality check predicate on the "billing_interval" field. It's identical to BillingIntervalEQ.
func BillingInterval(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldEQ(FieldBillingInterval, v))
}

// TrialDays applies equality check predicate on the "trial_days" field. It's identical to TrialDaysEQ.
func TrialDays(v int) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldEQ(FieldTrialDays, v))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldEQ(FieldTenantID, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldHasSuffix(FieldName, v))
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldIsNull(FieldName))
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldNotNull(FieldName))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldContainsFold(FieldName, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldContainsFold(FieldDescription, v))
}

// ExtrasIsNil applies the IsNil predicate on the "extras" field.
func ExtrasIsNil() predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldIsNull(FieldExtras))
}

// ExtrasNotNil applies the NotNil predicate on the "extras" field.
func ExtrasNotNil() predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldNotNull(FieldExtras))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldLTE(FieldCreatedBy, v))
}

// CreatedByContains applies the Contains predicate on the "created_by" field.
func CreatedByContains(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldContains(FieldCreatedBy, v))
}

// CreatedByHasPrefix applies the HasPrefix predicate on the "created_by" field.
func CreatedByHasPrefix(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldHasPrefix(FieldCreatedBy, v))
}

// CreatedByHasSuffix applies the HasSuffix predicate on the "created_by" field.
func CreatedByHasSuffix(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldHasSuffix(FieldCreatedBy, v))
}

// CreatedByIsNil applies the IsNil predicate on the "created_by" field.
func CreatedByIsNil() predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldIsNull(FieldCreatedBy))
}

// CreatedByNotNil applies the NotNil predicate on the "created_by" field.
func CreatedByNotNil() predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldNotNull(FieldCreatedBy))
}

// CreatedByEqualFold applies the EqualFold predicate on the "created_by" field.
func CreatedByEqualFold(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldEqualFold(FieldCreatedBy, v))
}

// CreatedByContainsFold applies the ContainsFold predicate on the "created_by" field.
func CreatedByContainsFold(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldContainsFold(FieldCreatedBy, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldLTE(FieldUpdatedBy, v))
}

// UpdatedByContains applies the Contains predicate on the "updated_by" field.
func UpdatedByContains(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldContains(FieldUpdatedBy, v))
}

// UpdatedByHasPrefix applies the HasPrefix predicate on the "updated_by" field.
func UpdatedByHasPrefix(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldHasPrefix(FieldUpdatedBy, v))
}

// UpdatedByHasSuffix applies the HasSuffix predicate on the "updated_by" field.
func UpdatedByHasSuffix(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldHasSuffix(FieldUpdatedBy, v))
}

// UpdatedByIsNil applies the IsNil predicate on the "updated_by" field.
func UpdatedByIsNil() predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldIsNull(FieldUpdatedBy))
}

// UpdatedByNotNil applies the NotNil predicate on the "updated_by" field.
func UpdatedByNotNil() predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldNotNull(FieldUpdatedBy))
}

// UpdatedByEqualFold applies the EqualFold predicate on the "updated_by" field.
func UpdatedByEqualFold(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldEqualFold(FieldUpdatedBy, v))
}

// UpdatedByContainsFold applies the ContainsFold predicate on the "updated_by" field.
func UpdatedByContainsFold(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldContainsFold(FieldUpdatedBy, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v int64) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v int64) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...int64) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...int64) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v int64) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v int64) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v int64) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v int64) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v int64) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v int64) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...int64) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...int64) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v int64) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v int64) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v int64) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v int64) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldNotNull(FieldUpdatedAt))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldContainsFold(FieldStatus, v))
}

// PricingTypeEQ applies the EQ predicate on the "pricing_type" field.
func PricingTypeEQ(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldEQ(FieldPricingType, v))
}

// PricingTypeNEQ applies the NEQ predicate on the "pricing_type" field.
func PricingTypeNEQ(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldNEQ(FieldPricingType, v))
}

// PricingTypeIn applies the In predicate on the "pricing_type" field.
func PricingTypeIn(vs ...string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldIn(FieldPricingType, vs...))
}

// PricingTypeNotIn applies the NotIn predicate on the "pricing_type" field.
func PricingTypeNotIn(vs ...string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldNotIn(FieldPricingType, vs...))
}

// PricingTypeGT applies the GT predicate on the "pricing_type" field.
func PricingTypeGT(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldGT(FieldPricingType, v))
}

// PricingTypeGTE applies the GTE predicate on the "pricing_type" field.
func PricingTypeGTE(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldGTE(FieldPricingType, v))
}

// PricingTypeLT applies the LT predicate on the "pricing_type" field.
func PricingTypeLT(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldLT(FieldPricingType, v))
}

// PricingTypeLTE applies the LTE predicate on the "pricing_type" field.
func PricingTypeLTE(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldLTE(FieldPricingType, v))
}

// PricingTypeContains applies the Contains predicate on the "pricing_type" field.
func PricingTypeContains(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldContains(FieldPricingType, v))
}

// PricingTypeHasPrefix applies the HasPrefix predicate on the "pricing_type" field.
func PricingTypeHasPrefix(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldHasPrefix(FieldPricingType, v))
}

// PricingTypeHasSuffix applies the HasSuffix predicate on the "pricing_type" field.
func PricingTypeHasSuffix(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldHasSuffix(FieldPricingType, v))
}

// PricingTypeEqualFold applies the EqualFold predicate on the "pricing_type" field.
func PricingTypeEqualFold(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldEqualFold(FieldPricingType, v))
}

// PricingTypeContainsFold applies the ContainsFold predicate on the "pricing_type" field.
func PricingTypeContainsFold(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldContainsFold(FieldPricingType, v))
}

// PriceEQ applies the EQ predicate on the "price" field.
func PriceEQ(v float64) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldEQ(FieldPrice, v))
}

// PriceNEQ applies the NEQ predicate on the "price" field.
func PriceNEQ(v float64) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldNEQ(FieldPrice, v))
}

// PriceIn applies the In predicate on the "price" field.
func PriceIn(vs ...float64) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldIn(FieldPrice, vs...))
}

// PriceNotIn applies the NotIn predicate on the "price" field.
func PriceNotIn(vs ...float64) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldNotIn(FieldPrice, vs...))
}

// PriceGT applies the GT predicate on the "price" field.
func PriceGT(v float64) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldGT(FieldPrice, v))
}

// PriceGTE applies the GTE predicate on the "price" field.
func PriceGTE(v float64) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldGTE(FieldPrice, v))
}

// PriceLT applies the LT predicate on the "price" field.
func PriceLT(v float64) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldLT(FieldPrice, v))
}

// PriceLTE applies the LTE predicate on the "price" field.
func PriceLTE(v float64) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldLTE(FieldPrice, v))
}

// CurrencyEQ applies the EQ predicate on the "currency" field.
func CurrencyEQ(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldEQ(FieldCurrency, v))
}

// CurrencyNEQ applies the NEQ predicate on the "currency" field.
func CurrencyNEQ(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldNEQ(FieldCurrency, v))
}

// CurrencyIn applies the In predicate on the "currency" field.
func CurrencyIn(vs ...string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldIn(FieldCurrency, vs...))
}

// CurrencyNotIn applies the NotIn predicate on the "currency" field.
func CurrencyNotIn(vs ...string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldNotIn(FieldCurrency, vs...))
}

// CurrencyGT applies the GT predicate on the "currency" field.
func CurrencyGT(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldGT(FieldCurrency, v))
}

// CurrencyGTE applies the GTE predicate on the "currency" field.
func CurrencyGTE(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldGTE(FieldCurrency, v))
}

// CurrencyLT applies the LT predicate on the "currency" field.
func CurrencyLT(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldLT(FieldCurrency, v))
}

// CurrencyLTE applies the LTE predicate on the "currency" field.
func CurrencyLTE(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldLTE(FieldCurrency, v))
}

// CurrencyContains applies the Contains predicate on the "currency" field.
func CurrencyContains(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldContains(FieldCurrency, v))
}

// CurrencyHasPrefix applies the HasPrefix predicate on the "currency" field.
func CurrencyHasPrefix(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldHasPrefix(FieldCurrency, v))
}

// CurrencyHasSuffix applies the HasSuffix predicate on the "currency" field.
func CurrencyHasSuffix(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldHasSuffix(FieldCurrency, v))
}

// CurrencyEqualFold applies the EqualFold predicate on the "currency" field.
func CurrencyEqualFold(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldEqualFold(FieldCurrency, v))
}

// CurrencyContainsFold applies the ContainsFold predicate on the "currency" field.
func CurrencyContainsFold(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldContainsFold(FieldCurrency, v))
}

// BillingIntervalEQ applies the EQ predicate on the "billing_interval" field.
func BillingIntervalEQ(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldEQ(FieldBillingInterval, v))
}

// BillingIntervalNEQ applies the NEQ predicate on the "billing_interval" field.
func BillingIntervalNEQ(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldNEQ(FieldBillingInterval, v))
}

// BillingIntervalIn applies the In predicate on the "billing_interval" field.
func BillingIntervalIn(vs ...string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldIn(FieldBillingInterval, vs...))
}

// BillingIntervalNotIn applies the NotIn predicate on the "billing_interval" field.
func BillingIntervalNotIn(vs ...string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldNotIn(FieldBillingInterval, vs...))
}

// BillingIntervalGT applies the GT predicate on the "billing_interval" field.
func BillingIntervalGT(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldGT(FieldBillingInterval, v))
}

// BillingIntervalGTE applies the GTE predicate on the "billing_interval" field.
func BillingIntervalGTE(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldGTE(FieldBillingInterval, v))
}

// BillingIntervalLT applies the LT predicate on the "billing_interval" field.
func BillingIntervalLT(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldLT(FieldBillingInterval, v))
}

// BillingIntervalLTE applies the LTE predicate on the "billing_interval" field.
func BillingIntervalLTE(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldLTE(FieldBillingInterval, v))
}

// BillingIntervalContains applies the Contains predicate on the "billing_interval" field.
func BillingIntervalContains(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldContains(FieldBillingInterval, v))
}

// BillingIntervalHasPrefix applies the HasPrefix predicate on the "billing_interval" field.
func BillingIntervalHasPrefix(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldHasPrefix(FieldBillingInterval, v))
}

// BillingIntervalHasSuffix applies the HasSuffix predicate on the "billing_interval" field.
func BillingIntervalHasSuffix(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldHasSuffix(FieldBillingInterval, v))
}

// BillingIntervalIsNil applies the IsNil predicate on the "billing_interval" field.
func BillingIntervalIsNil() predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldIsNull(FieldBillingInterval))
}

// BillingIntervalNotNil applies the NotNil predicate on the "billing_interval" field.
func BillingIntervalNotNil() predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldNotNull(FieldBillingInterval))
}

// BillingIntervalEqualFold applies the EqualFold predicate on the "billing_interval" field.
func BillingIntervalEqualFold(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldEqualFold(FieldBillingInterval, v))
}

// BillingIntervalContainsFold applies the ContainsFold predicate on the "billing_interval" field.
func BillingIntervalContainsFold(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldContainsFold(FieldBillingInterval, v))
}

// TrialDaysEQ applies the EQ predicate on the "trial_days" field.
func TrialDaysEQ(v int) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldEQ(FieldTrialDays, v))
}

// TrialDaysNEQ applies the NEQ predicate on the "trial_days" field.
func TrialDaysNEQ(v int) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldNEQ(FieldTrialDays, v))
}

// TrialDaysIn applies the In predicate on the "trial_days" field.
func TrialDaysIn(vs ...int) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldIn(FieldTrialDays, vs...))
}

// TrialDaysNotIn applies the NotIn predicate on the "trial_days" field.
func TrialDaysNotIn(vs ...int) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldNotIn(FieldTrialDays, vs...))
}

// TrialDaysGT applies the GT predicate on the "trial_days" field.
func TrialDaysGT(v int) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldGT(FieldTrialDays, v))
}

// TrialDaysGTE applies the GTE predicate on the "trial_days" field.
func TrialDaysGTE(v int) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldGTE(FieldTrialDays, v))
}

// TrialDaysLT applies the LT predicate on the "trial_days" field.
func TrialDaysLT(v int) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldLT(FieldTrialDays, v))
}

// TrialDaysLTE applies the LTE predicate on the "trial_days" field.
func TrialDaysLTE(v int) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldLTE(FieldTrialDays, v))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldNotIn(FieldTenantID, vs...))
}

// TenantIDGT applies the GT predicate on the "tenant_id" field.
func TenantIDGT(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldGT(FieldTenantID, v))
}

// TenantIDGTE applies the GTE predicate on the "tenant_id" field.
func TenantIDGTE(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldGTE(FieldTenantID, v))
}

// TenantIDLT applies the LT predicate on the "tenant_id" field.
func TenantIDLT(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldLT(FieldTenantID, v))
}

// TenantIDLTE applies the LTE predicate on the "tenant_id" field.
func TenantIDLTE(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldLTE(FieldTenantID, v))
}

// TenantIDContains applies the Contains predicate on the "tenant_id" field.
func TenantIDContains(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldContains(FieldTenantID, v))
}

// TenantIDHasPrefix applies the HasPrefix predicate on the "tenant_id" field.
func TenantIDHasPrefix(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldHasPrefix(FieldTenantID, v))
}

// TenantIDHasSuffix applies the HasSuffix predicate on the "tenant_id" field.
func TenantIDHasSuffix(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldHasSuffix(FieldTenantID, v))
}

// TenantIDIsNil applies the IsNil predicate on the "tenant_id" field.
func TenantIDIsNil() predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldIsNull(FieldTenantID))
}

// TenantIDNotNil applies the NotNil predicate on the "tenant_id" field.
func TenantIDNotNil() predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldNotNull(FieldTenantID))
}

// TenantIDEqualFold applies the EqualFold predicate on the "tenant_id" field.
func TenantIDEqualFold(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldEqualFold(FieldTenantID, v))
}

// TenantIDContainsFold applies the ContainsFold predicate on the "tenant_id" field.
func TenantIDContainsFold(v string) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.FieldContainsFold(FieldTenantID, v))
}

// HasSubscriptions applies the HasEdge predicate on the "subscriptions" edge.
func HasSubscriptions() predicate.PaymentProduct {
	return predicate.PaymentProduct(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SubscriptionsTable, SubscriptionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSubscriptionsWith applies the HasEdge predicate on the "subscriptions" edge with a given conditions (other predicates).
func HasSubscriptionsWith(preds ...predicate.PaymentSubscription) predicate.PaymentProduct {
	return predicate.PaymentProduct(func(s *sql.Selector) {
		step := newSubscriptionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PaymentProduct) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PaymentProduct) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PaymentProduct) predicate.PaymentProduct {
	return predicate.PaymentProduct(sql.NotPredicates(p))
}
