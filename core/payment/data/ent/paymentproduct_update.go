// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/core/payment/data/ent/paymentproduct"
	"ncobase/core/payment/data/ent/paymentsubscription"
	"ncobase/core/payment/data/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// PaymentProductUpdate is the builder for updating PaymentProduct entities.
type PaymentProductUpdate struct {
	config
	hooks    []Hook
	mutation *PaymentProductMutation
}

// Where appends a list predicates to the PaymentProductUpdate builder.
func (ppu *PaymentProductUpdate) Where(ps ...predicate.PaymentProduct) *PaymentProductUpdate {
	ppu.mutation.Where(ps...)
	return ppu
}

// SetName sets the "name" field.
func (ppu *PaymentProductUpdate) SetName(s string) *PaymentProductUpdate {
	ppu.mutation.SetName(s)
	return ppu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ppu *PaymentProductUpdate) SetNillableName(s *string) *PaymentProductUpdate {
	if s != nil {
		ppu.SetName(*s)
	}
	return ppu
}

// ClearName clears the value of the "name" field.
func (ppu *PaymentProductUpdate) ClearName() *PaymentProductUpdate {
	ppu.mutation.ClearName()
	return ppu
}

// SetDescription sets the "description" field.
func (ppu *PaymentProductUpdate) SetDescription(s string) *PaymentProductUpdate {
	ppu.mutation.SetDescription(s)
	return ppu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ppu *PaymentProductUpdate) SetNillableDescription(s *string) *PaymentProductUpdate {
	if s != nil {
		ppu.SetDescription(*s)
	}
	return ppu
}

// ClearDescription clears the value of the "description" field.
func (ppu *PaymentProductUpdate) ClearDescription() *PaymentProductUpdate {
	ppu.mutation.ClearDescription()
	return ppu
}

// SetExtras sets the "extras" field.
func (ppu *PaymentProductUpdate) SetExtras(m map[string]interface{}) *PaymentProductUpdate {
	ppu.mutation.SetExtras(m)
	return ppu
}

// ClearExtras clears the value of the "extras" field.
func (ppu *PaymentProductUpdate) ClearExtras() *PaymentProductUpdate {
	ppu.mutation.ClearExtras()
	return ppu
}

// SetCreatedBy sets the "created_by" field.
func (ppu *PaymentProductUpdate) SetCreatedBy(s string) *PaymentProductUpdate {
	ppu.mutation.SetCreatedBy(s)
	return ppu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (ppu *PaymentProductUpdate) SetNillableCreatedBy(s *string) *PaymentProductUpdate {
	if s != nil {
		ppu.SetCreatedBy(*s)
	}
	return ppu
}

// ClearCreatedBy clears the value of the "created_by" field.
func (ppu *PaymentProductUpdate) ClearCreatedBy() *PaymentProductUpdate {
	ppu.mutation.ClearCreatedBy()
	return ppu
}

// SetUpdatedBy sets the "updated_by" field.
func (ppu *PaymentProductUpdate) SetUpdatedBy(s string) *PaymentProductUpdate {
	ppu.mutation.SetUpdatedBy(s)
	return ppu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ppu *PaymentProductUpdate) SetNillableUpdatedBy(s *string) *PaymentProductUpdate {
	if s != nil {
		ppu.SetUpdatedBy(*s)
	}
	return ppu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (ppu *PaymentProductUpdate) ClearUpdatedBy() *PaymentProductUpdate {
	ppu.mutation.ClearUpdatedBy()
	return ppu
}

// SetUpdatedAt sets the "updated_at" field.
func (ppu *PaymentProductUpdate) SetUpdatedAt(i int64) *PaymentProductUpdate {
	ppu.mutation.ResetUpdatedAt()
	ppu.mutation.SetUpdatedAt(i)
	return ppu
}

// AddUpdatedAt adds i to the "updated_at" field.
func (ppu *PaymentProductUpdate) AddUpdatedAt(i int64) *PaymentProductUpdate {
	ppu.mutation.AddUpdatedAt(i)
	return ppu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (ppu *PaymentProductUpdate) ClearUpdatedAt() *PaymentProductUpdate {
	ppu.mutation.ClearUpdatedAt()
	return ppu
}

// SetStatus sets the "status" field.
func (ppu *PaymentProductUpdate) SetStatus(s string) *PaymentProductUpdate {
	ppu.mutation.SetStatus(s)
	return ppu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ppu *PaymentProductUpdate) SetNillableStatus(s *string) *PaymentProductUpdate {
	if s != nil {
		ppu.SetStatus(*s)
	}
	return ppu
}

// SetPricingType sets the "pricing_type" field.
func (ppu *PaymentProductUpdate) SetPricingType(s string) *PaymentProductUpdate {
	ppu.mutation.SetPricingType(s)
	return ppu
}

// SetNillablePricingType sets the "pricing_type" field if the given value is not nil.
func (ppu *PaymentProductUpdate) SetNillablePricingType(s *string) *PaymentProductUpdate {
	if s != nil {
		ppu.SetPricingType(*s)
	}
	return ppu
}

// SetPrice sets the "price" field.
func (ppu *PaymentProductUpdate) SetPrice(f float64) *PaymentProductUpdate {
	ppu.mutation.ResetPrice()
	ppu.mutation.SetPrice(f)
	return ppu
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (ppu *PaymentProductUpdate) SetNillablePrice(f *float64) *PaymentProductUpdate {
	if f != nil {
		ppu.SetPrice(*f)
	}
	return ppu
}

// AddPrice adds f to the "price" field.
func (ppu *PaymentProductUpdate) AddPrice(f float64) *PaymentProductUpdate {
	ppu.mutation.AddPrice(f)
	return ppu
}

// SetCurrency sets the "currency" field.
func (ppu *PaymentProductUpdate) SetCurrency(s string) *PaymentProductUpdate {
	ppu.mutation.SetCurrency(s)
	return ppu
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (ppu *PaymentProductUpdate) SetNillableCurrency(s *string) *PaymentProductUpdate {
	if s != nil {
		ppu.SetCurrency(*s)
	}
	return ppu
}

// SetBillingInterval sets the "billing_interval" field.
func (ppu *PaymentProductUpdate) SetBillingInterval(s string) *PaymentProductUpdate {
	ppu.mutation.SetBillingInterval(s)
	return ppu
}

// SetNillableBillingInterval sets the "billing_interval" field if the given value is not nil.
func (ppu *PaymentProductUpdate) SetNillableBillingInterval(s *string) *PaymentProductUpdate {
	if s != nil {
		ppu.SetBillingInterval(*s)
	}
	return ppu
}

// ClearBillingInterval clears the value of the "billing_interval" field.
func (ppu *PaymentProductUpdate) ClearBillingInterval() *PaymentProductUpdate {
	ppu.mutation.ClearBillingInterval()
	return ppu
}

// SetTrialDays sets the "trial_days" field.
func (ppu *PaymentProductUpdate) SetTrialDays(i int) *PaymentProductUpdate {
	ppu.mutation.ResetTrialDays()
	ppu.mutation.SetTrialDays(i)
	return ppu
}

// SetNillableTrialDays sets the "trial_days" field if the given value is not nil.
func (ppu *PaymentProductUpdate) SetNillableTrialDays(i *int) *PaymentProductUpdate {
	if i != nil {
		ppu.SetTrialDays(*i)
	}
	return ppu
}

// AddTrialDays adds i to the "trial_days" field.
func (ppu *PaymentProductUpdate) AddTrialDays(i int) *PaymentProductUpdate {
	ppu.mutation.AddTrialDays(i)
	return ppu
}

// SetFeatures sets the "features" field.
func (ppu *PaymentProductUpdate) SetFeatures(s []string) *PaymentProductUpdate {
	ppu.mutation.SetFeatures(s)
	return ppu
}

// AppendFeatures appends s to the "features" field.
func (ppu *PaymentProductUpdate) AppendFeatures(s []string) *PaymentProductUpdate {
	ppu.mutation.AppendFeatures(s)
	return ppu
}

// SetTenantID sets the "tenant_id" field.
func (ppu *PaymentProductUpdate) SetTenantID(s string) *PaymentProductUpdate {
	ppu.mutation.SetTenantID(s)
	return ppu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (ppu *PaymentProductUpdate) SetNillableTenantID(s *string) *PaymentProductUpdate {
	if s != nil {
		ppu.SetTenantID(*s)
	}
	return ppu
}

// ClearTenantID clears the value of the "tenant_id" field.
func (ppu *PaymentProductUpdate) ClearTenantID() *PaymentProductUpdate {
	ppu.mutation.ClearTenantID()
	return ppu
}

// AddSubscriptionIDs adds the "subscriptions" edge to the PaymentSubscription entity by IDs.
func (ppu *PaymentProductUpdate) AddSubscriptionIDs(ids ...string) *PaymentProductUpdate {
	ppu.mutation.AddSubscriptionIDs(ids...)
	return ppu
}

// AddSubscriptions adds the "subscriptions" edges to the PaymentSubscription entity.
func (ppu *PaymentProductUpdate) AddSubscriptions(p ...*PaymentSubscription) *PaymentProductUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ppu.AddSubscriptionIDs(ids...)
}

// Mutation returns the PaymentProductMutation object of the builder.
func (ppu *PaymentProductUpdate) Mutation() *PaymentProductMutation {
	return ppu.mutation
}

// ClearSubscriptions clears all "subscriptions" edges to the PaymentSubscription entity.
func (ppu *PaymentProductUpdate) ClearSubscriptions() *PaymentProductUpdate {
	ppu.mutation.ClearSubscriptions()
	return ppu
}

// RemoveSubscriptionIDs removes the "subscriptions" edge to PaymentSubscription entities by IDs.
func (ppu *PaymentProductUpdate) RemoveSubscriptionIDs(ids ...string) *PaymentProductUpdate {
	ppu.mutation.RemoveSubscriptionIDs(ids...)
	return ppu
}

// RemoveSubscriptions removes "subscriptions" edges to PaymentSubscription entities.
func (ppu *PaymentProductUpdate) RemoveSubscriptions(p ...*PaymentSubscription) *PaymentProductUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ppu.RemoveSubscriptionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ppu *PaymentProductUpdate) Save(ctx context.Context) (int, error) {
	ppu.defaults()
	return withHooks(ctx, ppu.sqlSave, ppu.mutation, ppu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ppu *PaymentProductUpdate) SaveX(ctx context.Context) int {
	affected, err := ppu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ppu *PaymentProductUpdate) Exec(ctx context.Context) error {
	_, err := ppu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ppu *PaymentProductUpdate) ExecX(ctx context.Context) {
	if err := ppu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ppu *PaymentProductUpdate) defaults() {
	if _, ok := ppu.mutation.UpdatedAt(); !ok && !ppu.mutation.UpdatedAtCleared() {
		v := paymentproduct.UpdateDefaultUpdatedAt()
		ppu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ppu *PaymentProductUpdate) check() error {
	if v, ok := ppu.mutation.CreatedBy(); ok {
		if err := paymentproduct.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "PaymentProduct.created_by": %w`, err)}
		}
	}
	if v, ok := ppu.mutation.UpdatedBy(); ok {
		if err := paymentproduct.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "PaymentProduct.updated_by": %w`, err)}
		}
	}
	if v, ok := ppu.mutation.Price(); ok {
		if err := paymentproduct.PriceValidator(v); err != nil {
			return &ValidationError{Name: "price", err: fmt.Errorf(`ent: validator failed for field "PaymentProduct.price": %w`, err)}
		}
	}
	return nil
}

func (ppu *PaymentProductUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ppu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(paymentproduct.Table, paymentproduct.Columns, sqlgraph.NewFieldSpec(paymentproduct.FieldID, field.TypeString))
	if ps := ppu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ppu.mutation.Name(); ok {
		_spec.SetField(paymentproduct.FieldName, field.TypeString, value)
	}
	if ppu.mutation.NameCleared() {
		_spec.ClearField(paymentproduct.FieldName, field.TypeString)
	}
	if value, ok := ppu.mutation.Description(); ok {
		_spec.SetField(paymentproduct.FieldDescription, field.TypeString, value)
	}
	if ppu.mutation.DescriptionCleared() {
		_spec.ClearField(paymentproduct.FieldDescription, field.TypeString)
	}
	if value, ok := ppu.mutation.Extras(); ok {
		_spec.SetField(paymentproduct.FieldExtras, field.TypeJSON, value)
	}
	if ppu.mutation.ExtrasCleared() {
		_spec.ClearField(paymentproduct.FieldExtras, field.TypeJSON)
	}
	if value, ok := ppu.mutation.CreatedBy(); ok {
		_spec.SetField(paymentproduct.FieldCreatedBy, field.TypeString, value)
	}
	if ppu.mutation.CreatedByCleared() {
		_spec.ClearField(paymentproduct.FieldCreatedBy, field.TypeString)
	}
	if value, ok := ppu.mutation.UpdatedBy(); ok {
		_spec.SetField(paymentproduct.FieldUpdatedBy, field.TypeString, value)
	}
	if ppu.mutation.UpdatedByCleared() {
		_spec.ClearField(paymentproduct.FieldUpdatedBy, field.TypeString)
	}
	if ppu.mutation.CreatedAtCleared() {
		_spec.ClearField(paymentproduct.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := ppu.mutation.UpdatedAt(); ok {
		_spec.SetField(paymentproduct.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := ppu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(paymentproduct.FieldUpdatedAt, field.TypeInt64, value)
	}
	if ppu.mutation.UpdatedAtCleared() {
		_spec.ClearField(paymentproduct.FieldUpdatedAt, field.TypeInt64)
	}
	if value, ok := ppu.mutation.Status(); ok {
		_spec.SetField(paymentproduct.FieldStatus, field.TypeString, value)
	}
	if value, ok := ppu.mutation.PricingType(); ok {
		_spec.SetField(paymentproduct.FieldPricingType, field.TypeString, value)
	}
	if value, ok := ppu.mutation.Price(); ok {
		_spec.SetField(paymentproduct.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := ppu.mutation.AddedPrice(); ok {
		_spec.AddField(paymentproduct.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := ppu.mutation.Currency(); ok {
		_spec.SetField(paymentproduct.FieldCurrency, field.TypeString, value)
	}
	if value, ok := ppu.mutation.BillingInterval(); ok {
		_spec.SetField(paymentproduct.FieldBillingInterval, field.TypeString, value)
	}
	if ppu.mutation.BillingIntervalCleared() {
		_spec.ClearField(paymentproduct.FieldBillingInterval, field.TypeString)
	}
	if value, ok := ppu.mutation.TrialDays(); ok {
		_spec.SetField(paymentproduct.FieldTrialDays, field.TypeInt, value)
	}
	if value, ok := ppu.mutation.AddedTrialDays(); ok {
		_spec.AddField(paymentproduct.FieldTrialDays, field.TypeInt, value)
	}
	if value, ok := ppu.mutation.Features(); ok {
		_spec.SetField(paymentproduct.FieldFeatures, field.TypeJSON, value)
	}
	if value, ok := ppu.mutation.AppendedFeatures(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, paymentproduct.FieldFeatures, value)
		})
	}
	if value, ok := ppu.mutation.TenantID(); ok {
		_spec.SetField(paymentproduct.FieldTenantID, field.TypeString, value)
	}
	if ppu.mutation.TenantIDCleared() {
		_spec.ClearField(paymentproduct.FieldTenantID, field.TypeString)
	}
	if ppu.mutation.SubscriptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   paymentproduct.SubscriptionsTable,
			Columns: []string{paymentproduct.SubscriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentsubscription.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ppu.mutation.RemovedSubscriptionsIDs(); len(nodes) > 0 && !ppu.mutation.SubscriptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   paymentproduct.SubscriptionsTable,
			Columns: []string{paymentproduct.SubscriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentsubscription.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ppu.mutation.SubscriptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   paymentproduct.SubscriptionsTable,
			Columns: []string{paymentproduct.SubscriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentsubscription.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ppu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{paymentproduct.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ppu.mutation.done = true
	return n, nil
}

// PaymentProductUpdateOne is the builder for updating a single PaymentProduct entity.
type PaymentProductUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PaymentProductMutation
}

// SetName sets the "name" field.
func (ppuo *PaymentProductUpdateOne) SetName(s string) *PaymentProductUpdateOne {
	ppuo.mutation.SetName(s)
	return ppuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ppuo *PaymentProductUpdateOne) SetNillableName(s *string) *PaymentProductUpdateOne {
	if s != nil {
		ppuo.SetName(*s)
	}
	return ppuo
}

// ClearName clears the value of the "name" field.
func (ppuo *PaymentProductUpdateOne) ClearName() *PaymentProductUpdateOne {
	ppuo.mutation.ClearName()
	return ppuo
}

// SetDescription sets the "description" field.
func (ppuo *PaymentProductUpdateOne) SetDescription(s string) *PaymentProductUpdateOne {
	ppuo.mutation.SetDescription(s)
	return ppuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ppuo *PaymentProductUpdateOne) SetNillableDescription(s *string) *PaymentProductUpdateOne {
	if s != nil {
		ppuo.SetDescription(*s)
	}
	return ppuo
}

// ClearDescription clears the value of the "description" field.
func (ppuo *PaymentProductUpdateOne) ClearDescription() *PaymentProductUpdateOne {
	ppuo.mutation.ClearDescription()
	return ppuo
}

// SetExtras sets the "extras" field.
func (ppuo *PaymentProductUpdateOne) SetExtras(m map[string]interface{}) *PaymentProductUpdateOne {
	ppuo.mutation.SetExtras(m)
	return ppuo
}

// ClearExtras clears the value of the "extras" field.
func (ppuo *PaymentProductUpdateOne) ClearExtras() *PaymentProductUpdateOne {
	ppuo.mutation.ClearExtras()
	return ppuo
}

// SetCreatedBy sets the "created_by" field.
func (ppuo *PaymentProductUpdateOne) SetCreatedBy(s string) *PaymentProductUpdateOne {
	ppuo.mutation.SetCreatedBy(s)
	return ppuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (ppuo *PaymentProductUpdateOne) SetNillableCreatedBy(s *string) *PaymentProductUpdateOne {
	if s != nil {
		ppuo.SetCreatedBy(*s)
	}
	return ppuo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (ppuo *PaymentProductUpdateOne) ClearCreatedBy() *PaymentProductUpdateOne {
	ppuo.mutation.ClearCreatedBy()
	return ppuo
}

// SetUpdatedBy sets the "updated_by" field.
func (ppuo *PaymentProductUpdateOne) SetUpdatedBy(s string) *PaymentProductUpdateOne {
	ppuo.mutation.SetUpdatedBy(s)
	return ppuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ppuo *PaymentProductUpdateOne) SetNillableUpdatedBy(s *string) *PaymentProductUpdateOne {
	if s != nil {
		ppuo.SetUpdatedBy(*s)
	}
	return ppuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (ppuo *PaymentProductUpdateOne) ClearUpdatedBy() *PaymentProductUpdateOne {
	ppuo.mutation.ClearUpdatedBy()
	return ppuo
}

// SetUpdatedAt sets the "updated_at" field.
func (ppuo *PaymentProductUpdateOne) SetUpdatedAt(i int64) *PaymentProductUpdateOne {
	ppuo.mutation.ResetUpdatedAt()
	ppuo.mutation.SetUpdatedAt(i)
	return ppuo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (ppuo *PaymentProductUpdateOne) AddUpdatedAt(i int64) *PaymentProductUpdateOne {
	ppuo.mutation.AddUpdatedAt(i)
	return ppuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (ppuo *PaymentProductUpdateOne) ClearUpdatedAt() *PaymentProductUpdateOne {
	ppuo.mutation.ClearUpdatedAt()
	return ppuo
}

// SetStatus sets the "status" field.
func (ppuo *PaymentProductUpdateOne) SetStatus(s string) *PaymentProductUpdateOne {
	ppuo.mutation.SetStatus(s)
	return ppuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ppuo *PaymentProductUpdateOne) SetNillableStatus(s *string) *PaymentProductUpdateOne {
	if s != nil {
		ppuo.SetStatus(*s)
	}
	return ppuo
}

// SetPricingType sets the "pricing_type" field.
func (ppuo *PaymentProductUpdateOne) SetPricingType(s string) *PaymentProductUpdateOne {
	ppuo.mutation.SetPricingType(s)
	return ppuo
}

// SetNillablePricingType sets the "pricing_type" field if the given value is not nil.
func (ppuo *PaymentProductUpdateOne) SetNillablePricingType(s *string) *PaymentProductUpdateOne {
	if s != nil {
		ppuo.SetPricingType(*s)
	}
	return ppuo
}

// SetPrice sets the "price" field.
func (ppuo *PaymentProductUpdateOne) SetPrice(f float64) *PaymentProductUpdateOne {
	ppuo.mutation.ResetPrice()
	ppuo.mutation.SetPrice(f)
	return ppuo
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (ppuo *PaymentProductUpdateOne) SetNillablePrice(f *float64) *PaymentProductUpdateOne {
	if f != nil {
		ppuo.SetPrice(*f)
	}
	return ppuo
}

// AddPrice adds f to the "price" field.
func (ppuo *PaymentProductUpdateOne) AddPrice(f float64) *PaymentProductUpdateOne {
	ppuo.mutation.AddPrice(f)
	return ppuo
}

// SetCurrency sets the "currency" field.
func (ppuo *PaymentProductUpdateOne) SetCurrency(s string) *PaymentProductUpdateOne {
	ppuo.mutation.SetCurrency(s)
	return ppuo
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (ppuo *PaymentProductUpdateOne) SetNillableCurrency(s *string) *PaymentProductUpdateOne {
	if s != nil {
		ppuo.SetCurrency(*s)
	}
	return ppuo
}

// SetBillingInterval sets the "billing_interval" field.
func (ppuo *PaymentProductUpdateOne) SetBillingInterval(s string) *PaymentProductUpdateOne {
	ppuo.mutation.SetBillingInterval(s)
	return ppuo
}

// SetNillableBillingInterval sets the "billing_interval" field if the given value is not nil.
func (ppuo *PaymentProductUpdateOne) SetNillableBillingInterval(s *string) *PaymentProductUpdateOne {
	if s != nil {
		ppuo.SetBillingInterval(*s)
	}
	return ppuo
}

// ClearBillingInterval clears the value of the "billing_interval" field.
func (ppuo *PaymentProductUpdateOne) ClearBillingInterval() *PaymentProductUpdateOne {
	ppuo.mutation.ClearBillingInterval()
	return ppuo
}

// SetTrialDays sets the "trial_days" field.
func (ppuo *PaymentProductUpdateOne) SetTrialDays(i int) *PaymentProductUpdateOne {
	ppuo.mutation.ResetTrialDays()
	ppuo.mutation.SetTrialDays(i)
	return ppuo
}

// SetNillableTrialDays sets the "trial_days" field if the given value is not nil.
func (ppuo *PaymentProductUpdateOne) SetNillableTrialDays(i *int) *PaymentProductUpdateOne {
	if i != nil {
		ppuo.SetTrialDays(*i)
	}
	return ppuo
}

// AddTrialDays adds i to the "trial_days" field.
func (ppuo *PaymentProductUpdateOne) AddTrialDays(i int) *PaymentProductUpdateOne {
	ppuo.mutation.AddTrialDays(i)
	return ppuo
}

// SetFeatures sets the "features" field.
func (ppuo *PaymentProductUpdateOne) SetFeatures(s []string) *PaymentProductUpdateOne {
	ppuo.mutation.SetFeatures(s)
	return ppuo
}

// AppendFeatures appends s to the "features" field.
func (ppuo *PaymentProductUpdateOne) AppendFeatures(s []string) *PaymentProductUpdateOne {
	ppuo.mutation.AppendFeatures(s)
	return ppuo
}

// SetTenantID sets the "tenant_id" field.
func (ppuo *PaymentProductUpdateOne) SetTenantID(s string) *PaymentProductUpdateOne {
	ppuo.mutation.SetTenantID(s)
	return ppuo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (ppuo *PaymentProductUpdateOne) SetNillableTenantID(s *string) *PaymentProductUpdateOne {
	if s != nil {
		ppuo.SetTenantID(*s)
	}
	return ppuo
}

// ClearTenantID clears the value of the "tenant_id" field.
func (ppuo *PaymentProductUpdateOne) ClearTenantID() *PaymentProductUpdateOne {
	ppuo.mutation.ClearTenantID()
	return ppuo
}

// AddSubscriptionIDs adds the "subscriptions" edge to the PaymentSubscription entity by IDs.
func (ppuo *PaymentProductUpdateOne) AddSubscriptionIDs(ids ...string) *PaymentProductUpdateOne {
	ppuo.mutation.AddSubscriptionIDs(ids...)
	return ppuo
}

// AddSubscriptions adds the "subscriptions" edges to the PaymentSubscription entity.
func (ppuo *PaymentProductUpdateOne) AddSubscriptions(p ...*PaymentSubscription) *PaymentProductUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ppuo.AddSubscriptionIDs(ids...)
}

// Mutation returns the PaymentProductMutation object of the builder.
func (ppuo *PaymentProductUpdateOne) Mutation() *PaymentProductMutation {
	return ppuo.mutation
}

// ClearSubscriptions clears all "subscriptions" edges to the PaymentSubscription entity.
func (ppuo *PaymentProductUpdateOne) ClearSubscriptions() *PaymentProductUpdateOne {
	ppuo.mutation.ClearSubscriptions()
	return ppuo
}

// RemoveSubscriptionIDs removes the "subscriptions" edge to PaymentSubscription entities by IDs.
func (ppuo *PaymentProductUpdateOne) RemoveSubscriptionIDs(ids ...string) *PaymentProductUpdateOne {
	ppuo.mutation.RemoveSubscriptionIDs(ids...)
	return ppuo
}

// RemoveSubscriptions removes "subscriptions" edges to PaymentSubscription entities.
func (ppuo *PaymentProductUpdateOne) RemoveSubscriptions(p ...*PaymentSubscription) *PaymentProductUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ppuo.RemoveSubscriptionIDs(ids...)
}

// Where appends a list predicates to the PaymentProductUpdate builder.
func (ppuo *PaymentProductUpdateOne) Where(ps ...predicate.PaymentProduct) *PaymentProductUpdateOne {
	ppuo.mutation.Where(ps...)
	return ppuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ppuo *PaymentProductUpdateOne) Select(field string, fields ...string) *PaymentProductUpdateOne {
	ppuo.fields = append([]string{field}, fields...)
	return ppuo
}

// Save executes the query and returns the updated PaymentProduct entity.
func (ppuo *PaymentProductUpdateOne) Save(ctx context.Context) (*PaymentProduct, error) {
	ppuo.defaults()
	return withHooks(ctx, ppuo.sqlSave, ppuo.mutation, ppuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ppuo *PaymentProductUpdateOne) SaveX(ctx context.Context) *PaymentProduct {
	node, err := ppuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ppuo *PaymentProductUpdateOne) Exec(ctx context.Context) error {
	_, err := ppuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ppuo *PaymentProductUpdateOne) ExecX(ctx context.Context) {
	if err := ppuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ppuo *PaymentProductUpdateOne) defaults() {
	if _, ok := ppuo.mutation.UpdatedAt(); !ok && !ppuo.mutation.UpdatedAtCleared() {
		v := paymentproduct.UpdateDefaultUpdatedAt()
		ppuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ppuo *PaymentProductUpdateOne) check() error {
	if v, ok := ppuo.mutation.CreatedBy(); ok {
		if err := paymentproduct.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "PaymentProduct.created_by": %w`, err)}
		}
	}
	if v, ok := ppuo.mutation.UpdatedBy(); ok {
		if err := paymentproduct.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "PaymentProduct.updated_by": %w`, err)}
		}
	}
	if v, ok := ppuo.mutation.Price(); ok {
		if err := paymentproduct.PriceValidator(v); err != nil {
			return &ValidationError{Name: "price", err: fmt.Errorf(`ent: validator failed for field "PaymentProduct.price": %w`, err)}
		}
	}
	return nil
}

func (ppuo *PaymentProductUpdateOne) sqlSave(ctx context.Context) (_node *PaymentProduct, err error) {
	if err := ppuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(paymentproduct.Table, paymentproduct.Columns, sqlgraph.NewFieldSpec(paymentproduct.FieldID, field.TypeString))
	id, ok := ppuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PaymentProduct.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ppuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, paymentproduct.FieldID)
		for _, f := range fields {
			if !paymentproduct.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != paymentproduct.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ppuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ppuo.mutation.Name(); ok {
		_spec.SetField(paymentproduct.FieldName, field.TypeString, value)
	}
	if ppuo.mutation.NameCleared() {
		_spec.ClearField(paymentproduct.FieldName, field.TypeString)
	}
	if value, ok := ppuo.mutation.Description(); ok {
		_spec.SetField(paymentproduct.FieldDescription, field.TypeString, value)
	}
	if ppuo.mutation.DescriptionCleared() {
		_spec.ClearField(paymentproduct.FieldDescription, field.TypeString)
	}
	if value, ok := ppuo.mutation.Extras(); ok {
		_spec.SetField(paymentproduct.FieldExtras, field.TypeJSON, value)
	}
	if ppuo.mutation.ExtrasCleared() {
		_spec.ClearField(paymentproduct.FieldExtras, field.TypeJSON)
	}
	if value, ok := ppuo.mutation.CreatedBy(); ok {
		_spec.SetField(paymentproduct.FieldCreatedBy, field.TypeString, value)
	}
	if ppuo.mutation.CreatedByCleared() {
		_spec.ClearField(paymentproduct.FieldCreatedBy, field.TypeString)
	}
	if value, ok := ppuo.mutation.UpdatedBy(); ok {
		_spec.SetField(paymentproduct.FieldUpdatedBy, field.TypeString, value)
	}
	if ppuo.mutation.UpdatedByCleared() {
		_spec.ClearField(paymentproduct.FieldUpdatedBy, field.TypeString)
	}
	if ppuo.mutation.CreatedAtCleared() {
		_spec.ClearField(paymentproduct.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := ppuo.mutation.UpdatedAt(); ok {
		_spec.SetField(paymentproduct.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := ppuo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(paymentproduct.FieldUpdatedAt, field.TypeInt64, value)
	}
	if ppuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(paymentproduct.FieldUpdatedAt, field.TypeInt64)
	}
	if value, ok := ppuo.mutation.Status(); ok {
		_spec.SetField(paymentproduct.FieldStatus, field.TypeString, value)
	}
	if value, ok := ppuo.mutation.PricingType(); ok {
		_spec.SetField(paymentproduct.FieldPricingType, field.TypeString, value)
	}
	if value, ok := ppuo.mutation.Price(); ok {
		_spec.SetField(paymentproduct.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := ppuo.mutation.AddedPrice(); ok {
		_spec.AddField(paymentproduct.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := ppuo.mutation.Currency(); ok {
		_spec.SetField(paymentproduct.FieldCurrency, field.TypeString, value)
	}
	if value, ok := ppuo.mutation.BillingInterval(); ok {
		_spec.SetField(paymentproduct.FieldBillingInterval, field.TypeString, value)
	}
	if ppuo.mutation.BillingIntervalCleared() {
		_spec.ClearField(paymentproduct.FieldBillingInterval, field.TypeString)
	}
	if value, ok := ppuo.mutation.TrialDays(); ok {
		_spec.SetField(paymentproduct.FieldTrialDays, field.TypeInt, value)
	}
	if value, ok := ppuo.mutation.AddedTrialDays(); ok {
		_spec.AddField(paymentproduct.FieldTrialDays, field.TypeInt, value)
	}
	if value, ok := ppuo.mutation.Features(); ok {
		_spec.SetField(paymentproduct.FieldFeatures, field.TypeJSON, value)
	}
	if value, ok := ppuo.mutation.AppendedFeatures(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, paymentproduct.FieldFeatures, value)
		})
	}
	if value, ok := ppuo.mutation.TenantID(); ok {
		_spec.SetField(paymentproduct.FieldTenantID, field.TypeString, value)
	}
	if ppuo.mutation.TenantIDCleared() {
		_spec.ClearField(paymentproduct.FieldTenantID, field.TypeString)
	}
	if ppuo.mutation.SubscriptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   paymentproduct.SubscriptionsTable,
			Columns: []string{paymentproduct.SubscriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentsubscription.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ppuo.mutation.RemovedSubscriptionsIDs(); len(nodes) > 0 && !ppuo.mutation.SubscriptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   paymentproduct.SubscriptionsTable,
			Columns: []string{paymentproduct.SubscriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentsubscription.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ppuo.mutation.SubscriptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   paymentproduct.SubscriptionsTable,
			Columns: []string{paymentproduct.SubscriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentsubscription.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PaymentProduct{config: ppuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ppuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{paymentproduct.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ppuo.mutation.done = true
	return _node, nil
}
