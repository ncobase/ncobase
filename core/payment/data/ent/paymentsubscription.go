// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"ncobase/payment/data/ent/paymentproduct"
	"ncobase/payment/data/ent/paymentsubscription"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// PaymentSubscription is the model entity for the PaymentSubscription schema.
type PaymentSubscription struct {
	config `json:"-"`
	// ID of the ent.
	// primary key
	ID string `json:"id,omitempty"`
	// Extend properties
	Extras map[string]interface{} `json:"extras,omitempty"`
	// id of the creator
	CreatedBy string `json:"created_by,omitempty"`
	// id of the last updater
	UpdatedBy string `json:"updated_by,omitempty"`
	// created at
	CreatedAt int64 `json:"created_at,omitempty"`
	// updated at
	UpdatedAt int64 `json:"updated_at,omitempty"`
	// PaymentSubscription status (active, trialing, cancelled, expired, past_due)
	Status string `json:"status,omitempty"`
	// User ID
	UserID string `json:"user_id,omitempty"`
	// Tenant ID
	TenantID string `json:"tenant_id,omitempty"`
	// PaymentProduct ID
	ProductID string `json:"product_id,omitempty"`
	// Payment channel ID
	ChannelID string `json:"channel_id,omitempty"`
	// Start of the current billing period
	CurrentPeriodStart time.Time `json:"current_period_start,omitempty"`
	// End of the current billing period
	CurrentPeriodEnd time.Time `json:"current_period_end,omitempty"`
	// When to cancel the subscription
	CancelAt *time.Time `json:"cancel_at,omitempty"`
	// When the subscription was cancelled
	CancelledAt *time.Time `json:"cancelled_at,omitempty"`
	// When the trial started
	TrialStart *time.Time `json:"trial_start,omitempty"`
	// When the trial ends
	TrialEnd *time.Time `json:"trial_end,omitempty"`
	// Reference ID from the payment provider
	ProviderRef string `json:"provider_ref,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PaymentSubscriptionQuery when eager-loading is set.
	Edges        PaymentSubscriptionEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PaymentSubscriptionEdges holds the relations/edges for other nodes in the graph.
type PaymentSubscriptionEdges struct {
	// Product holds the value of the product edge.
	Product *PaymentProduct `json:"product,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ProductOrErr returns the Product value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PaymentSubscriptionEdges) ProductOrErr() (*PaymentProduct, error) {
	if e.Product != nil {
		return e.Product, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: paymentproduct.Label}
	}
	return nil, &NotLoadedError{edge: "product"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PaymentSubscription) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case paymentsubscription.FieldExtras:
			values[i] = new([]byte)
		case paymentsubscription.FieldCreatedAt, paymentsubscription.FieldUpdatedAt:
			values[i] = new(sql.NullInt64)
		case paymentsubscription.FieldID, paymentsubscription.FieldCreatedBy, paymentsubscription.FieldUpdatedBy, paymentsubscription.FieldStatus, paymentsubscription.FieldUserID, paymentsubscription.FieldTenantID, paymentsubscription.FieldProductID, paymentsubscription.FieldChannelID, paymentsubscription.FieldProviderRef:
			values[i] = new(sql.NullString)
		case paymentsubscription.FieldCurrentPeriodStart, paymentsubscription.FieldCurrentPeriodEnd, paymentsubscription.FieldCancelAt, paymentsubscription.FieldCancelledAt, paymentsubscription.FieldTrialStart, paymentsubscription.FieldTrialEnd:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PaymentSubscription fields.
func (ps *PaymentSubscription) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case paymentsubscription.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				ps.ID = value.String
			}
		case paymentsubscription.FieldExtras:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field extras", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ps.Extras); err != nil {
					return fmt.Errorf("unmarshal field extras: %w", err)
				}
			}
		case paymentsubscription.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				ps.CreatedBy = value.String
			}
		case paymentsubscription.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				ps.UpdatedBy = value.String
			}
		case paymentsubscription.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ps.CreatedAt = value.Int64
			}
		case paymentsubscription.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ps.UpdatedAt = value.Int64
			}
		case paymentsubscription.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				ps.Status = value.String
			}
		case paymentsubscription.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				ps.UserID = value.String
			}
		case paymentsubscription.FieldTenantID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				ps.TenantID = value.String
			}
		case paymentsubscription.FieldProductID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field product_id", values[i])
			} else if value.Valid {
				ps.ProductID = value.String
			}
		case paymentsubscription.FieldChannelID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field channel_id", values[i])
			} else if value.Valid {
				ps.ChannelID = value.String
			}
		case paymentsubscription.FieldCurrentPeriodStart:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field current_period_start", values[i])
			} else if value.Valid {
				ps.CurrentPeriodStart = value.Time
			}
		case paymentsubscription.FieldCurrentPeriodEnd:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field current_period_end", values[i])
			} else if value.Valid {
				ps.CurrentPeriodEnd = value.Time
			}
		case paymentsubscription.FieldCancelAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field cancel_at", values[i])
			} else if value.Valid {
				ps.CancelAt = new(time.Time)
				*ps.CancelAt = value.Time
			}
		case paymentsubscription.FieldCancelledAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field cancelled_at", values[i])
			} else if value.Valid {
				ps.CancelledAt = new(time.Time)
				*ps.CancelledAt = value.Time
			}
		case paymentsubscription.FieldTrialStart:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field trial_start", values[i])
			} else if value.Valid {
				ps.TrialStart = new(time.Time)
				*ps.TrialStart = value.Time
			}
		case paymentsubscription.FieldTrialEnd:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field trial_end", values[i])
			} else if value.Valid {
				ps.TrialEnd = new(time.Time)
				*ps.TrialEnd = value.Time
			}
		case paymentsubscription.FieldProviderRef:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field provider_ref", values[i])
			} else if value.Valid {
				ps.ProviderRef = value.String
			}
		default:
			ps.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PaymentSubscription.
// This includes values selected through modifiers, order, etc.
func (ps *PaymentSubscription) Value(name string) (ent.Value, error) {
	return ps.selectValues.Get(name)
}

// QueryProduct queries the "product" edge of the PaymentSubscription entity.
func (ps *PaymentSubscription) QueryProduct() *PaymentProductQuery {
	return NewPaymentSubscriptionClient(ps.config).QueryProduct(ps)
}

// Update returns a builder for updating this PaymentSubscription.
// Note that you need to call PaymentSubscription.Unwrap() before calling this method if this PaymentSubscription
// was returned from a transaction, and the transaction was committed or rolled back.
func (ps *PaymentSubscription) Update() *PaymentSubscriptionUpdateOne {
	return NewPaymentSubscriptionClient(ps.config).UpdateOne(ps)
}

// Unwrap unwraps the PaymentSubscription entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ps *PaymentSubscription) Unwrap() *PaymentSubscription {
	_tx, ok := ps.config.driver.(*txDriver)
	if !ok {
		panic("ent: PaymentSubscription is not a transactional entity")
	}
	ps.config.driver = _tx.drv
	return ps
}

// String implements the fmt.Stringer.
func (ps *PaymentSubscription) String() string {
	var builder strings.Builder
	builder.WriteString("PaymentSubscription(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ps.ID))
	builder.WriteString("extras=")
	builder.WriteString(fmt.Sprintf("%v", ps.Extras))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(ps.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(ps.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", ps.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", ps.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(ps.Status)
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(ps.UserID)
	builder.WriteString(", ")
	builder.WriteString("tenant_id=")
	builder.WriteString(ps.TenantID)
	builder.WriteString(", ")
	builder.WriteString("product_id=")
	builder.WriteString(ps.ProductID)
	builder.WriteString(", ")
	builder.WriteString("channel_id=")
	builder.WriteString(ps.ChannelID)
	builder.WriteString(", ")
	builder.WriteString("current_period_start=")
	builder.WriteString(ps.CurrentPeriodStart.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("current_period_end=")
	builder.WriteString(ps.CurrentPeriodEnd.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := ps.CancelAt; v != nil {
		builder.WriteString("cancel_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := ps.CancelledAt; v != nil {
		builder.WriteString("cancelled_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := ps.TrialStart; v != nil {
		builder.WriteString("trial_start=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := ps.TrialEnd; v != nil {
		builder.WriteString("trial_end=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("provider_ref=")
	builder.WriteString(ps.ProviderRef)
	builder.WriteByte(')')
	return builder.String()
}

// PaymentSubscriptions is a parsable slice of PaymentSubscription.
type PaymentSubscriptions []*PaymentSubscription
