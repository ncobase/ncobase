// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/core/payment/data/ent/paymentproduct"
	"ncobase/core/payment/data/ent/paymentsubscription"
	"ncobase/core/payment/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PaymentSubscriptionUpdate is the builder for updating PaymentSubscription entities.
type PaymentSubscriptionUpdate struct {
	config
	hooks    []Hook
	mutation *PaymentSubscriptionMutation
}

// Where appends a list predicates to the PaymentSubscriptionUpdate builder.
func (psu *PaymentSubscriptionUpdate) Where(ps ...predicate.PaymentSubscription) *PaymentSubscriptionUpdate {
	psu.mutation.Where(ps...)
	return psu
}

// SetExtras sets the "extras" field.
func (psu *PaymentSubscriptionUpdate) SetExtras(m map[string]interface{}) *PaymentSubscriptionUpdate {
	psu.mutation.SetExtras(m)
	return psu
}

// ClearExtras clears the value of the "extras" field.
func (psu *PaymentSubscriptionUpdate) ClearExtras() *PaymentSubscriptionUpdate {
	psu.mutation.ClearExtras()
	return psu
}

// SetCreatedBy sets the "created_by" field.
func (psu *PaymentSubscriptionUpdate) SetCreatedBy(s string) *PaymentSubscriptionUpdate {
	psu.mutation.SetCreatedBy(s)
	return psu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (psu *PaymentSubscriptionUpdate) SetNillableCreatedBy(s *string) *PaymentSubscriptionUpdate {
	if s != nil {
		psu.SetCreatedBy(*s)
	}
	return psu
}

// ClearCreatedBy clears the value of the "created_by" field.
func (psu *PaymentSubscriptionUpdate) ClearCreatedBy() *PaymentSubscriptionUpdate {
	psu.mutation.ClearCreatedBy()
	return psu
}

// SetUpdatedBy sets the "updated_by" field.
func (psu *PaymentSubscriptionUpdate) SetUpdatedBy(s string) *PaymentSubscriptionUpdate {
	psu.mutation.SetUpdatedBy(s)
	return psu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (psu *PaymentSubscriptionUpdate) SetNillableUpdatedBy(s *string) *PaymentSubscriptionUpdate {
	if s != nil {
		psu.SetUpdatedBy(*s)
	}
	return psu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (psu *PaymentSubscriptionUpdate) ClearUpdatedBy() *PaymentSubscriptionUpdate {
	psu.mutation.ClearUpdatedBy()
	return psu
}

// SetUpdatedAt sets the "updated_at" field.
func (psu *PaymentSubscriptionUpdate) SetUpdatedAt(i int64) *PaymentSubscriptionUpdate {
	psu.mutation.ResetUpdatedAt()
	psu.mutation.SetUpdatedAt(i)
	return psu
}

// AddUpdatedAt adds i to the "updated_at" field.
func (psu *PaymentSubscriptionUpdate) AddUpdatedAt(i int64) *PaymentSubscriptionUpdate {
	psu.mutation.AddUpdatedAt(i)
	return psu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (psu *PaymentSubscriptionUpdate) ClearUpdatedAt() *PaymentSubscriptionUpdate {
	psu.mutation.ClearUpdatedAt()
	return psu
}

// SetStatus sets the "status" field.
func (psu *PaymentSubscriptionUpdate) SetStatus(s string) *PaymentSubscriptionUpdate {
	psu.mutation.SetStatus(s)
	return psu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (psu *PaymentSubscriptionUpdate) SetNillableStatus(s *string) *PaymentSubscriptionUpdate {
	if s != nil {
		psu.SetStatus(*s)
	}
	return psu
}

// SetUserID sets the "user_id" field.
func (psu *PaymentSubscriptionUpdate) SetUserID(s string) *PaymentSubscriptionUpdate {
	psu.mutation.SetUserID(s)
	return psu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (psu *PaymentSubscriptionUpdate) SetNillableUserID(s *string) *PaymentSubscriptionUpdate {
	if s != nil {
		psu.SetUserID(*s)
	}
	return psu
}

// SetTenantID sets the "tenant_id" field.
func (psu *PaymentSubscriptionUpdate) SetTenantID(s string) *PaymentSubscriptionUpdate {
	psu.mutation.SetTenantID(s)
	return psu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (psu *PaymentSubscriptionUpdate) SetNillableTenantID(s *string) *PaymentSubscriptionUpdate {
	if s != nil {
		psu.SetTenantID(*s)
	}
	return psu
}

// ClearTenantID clears the value of the "tenant_id" field.
func (psu *PaymentSubscriptionUpdate) ClearTenantID() *PaymentSubscriptionUpdate {
	psu.mutation.ClearTenantID()
	return psu
}

// SetProductID sets the "product_id" field.
func (psu *PaymentSubscriptionUpdate) SetProductID(s string) *PaymentSubscriptionUpdate {
	psu.mutation.SetProductID(s)
	return psu
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (psu *PaymentSubscriptionUpdate) SetNillableProductID(s *string) *PaymentSubscriptionUpdate {
	if s != nil {
		psu.SetProductID(*s)
	}
	return psu
}

// SetChannelID sets the "channel_id" field.
func (psu *PaymentSubscriptionUpdate) SetChannelID(s string) *PaymentSubscriptionUpdate {
	psu.mutation.SetChannelID(s)
	return psu
}

// SetNillableChannelID sets the "channel_id" field if the given value is not nil.
func (psu *PaymentSubscriptionUpdate) SetNillableChannelID(s *string) *PaymentSubscriptionUpdate {
	if s != nil {
		psu.SetChannelID(*s)
	}
	return psu
}

// SetCurrentPeriodStart sets the "current_period_start" field.
func (psu *PaymentSubscriptionUpdate) SetCurrentPeriodStart(t time.Time) *PaymentSubscriptionUpdate {
	psu.mutation.SetCurrentPeriodStart(t)
	return psu
}

// SetNillableCurrentPeriodStart sets the "current_period_start" field if the given value is not nil.
func (psu *PaymentSubscriptionUpdate) SetNillableCurrentPeriodStart(t *time.Time) *PaymentSubscriptionUpdate {
	if t != nil {
		psu.SetCurrentPeriodStart(*t)
	}
	return psu
}

// SetCurrentPeriodEnd sets the "current_period_end" field.
func (psu *PaymentSubscriptionUpdate) SetCurrentPeriodEnd(t time.Time) *PaymentSubscriptionUpdate {
	psu.mutation.SetCurrentPeriodEnd(t)
	return psu
}

// SetNillableCurrentPeriodEnd sets the "current_period_end" field if the given value is not nil.
func (psu *PaymentSubscriptionUpdate) SetNillableCurrentPeriodEnd(t *time.Time) *PaymentSubscriptionUpdate {
	if t != nil {
		psu.SetCurrentPeriodEnd(*t)
	}
	return psu
}

// SetCancelAt sets the "cancel_at" field.
func (psu *PaymentSubscriptionUpdate) SetCancelAt(t time.Time) *PaymentSubscriptionUpdate {
	psu.mutation.SetCancelAt(t)
	return psu
}

// SetNillableCancelAt sets the "cancel_at" field if the given value is not nil.
func (psu *PaymentSubscriptionUpdate) SetNillableCancelAt(t *time.Time) *PaymentSubscriptionUpdate {
	if t != nil {
		psu.SetCancelAt(*t)
	}
	return psu
}

// ClearCancelAt clears the value of the "cancel_at" field.
func (psu *PaymentSubscriptionUpdate) ClearCancelAt() *PaymentSubscriptionUpdate {
	psu.mutation.ClearCancelAt()
	return psu
}

// SetCancelledAt sets the "cancelled_at" field.
func (psu *PaymentSubscriptionUpdate) SetCancelledAt(t time.Time) *PaymentSubscriptionUpdate {
	psu.mutation.SetCancelledAt(t)
	return psu
}

// SetNillableCancelledAt sets the "cancelled_at" field if the given value is not nil.
func (psu *PaymentSubscriptionUpdate) SetNillableCancelledAt(t *time.Time) *PaymentSubscriptionUpdate {
	if t != nil {
		psu.SetCancelledAt(*t)
	}
	return psu
}

// ClearCancelledAt clears the value of the "cancelled_at" field.
func (psu *PaymentSubscriptionUpdate) ClearCancelledAt() *PaymentSubscriptionUpdate {
	psu.mutation.ClearCancelledAt()
	return psu
}

// SetTrialStart sets the "trial_start" field.
func (psu *PaymentSubscriptionUpdate) SetTrialStart(t time.Time) *PaymentSubscriptionUpdate {
	psu.mutation.SetTrialStart(t)
	return psu
}

// SetNillableTrialStart sets the "trial_start" field if the given value is not nil.
func (psu *PaymentSubscriptionUpdate) SetNillableTrialStart(t *time.Time) *PaymentSubscriptionUpdate {
	if t != nil {
		psu.SetTrialStart(*t)
	}
	return psu
}

// ClearTrialStart clears the value of the "trial_start" field.
func (psu *PaymentSubscriptionUpdate) ClearTrialStart() *PaymentSubscriptionUpdate {
	psu.mutation.ClearTrialStart()
	return psu
}

// SetTrialEnd sets the "trial_end" field.
func (psu *PaymentSubscriptionUpdate) SetTrialEnd(t time.Time) *PaymentSubscriptionUpdate {
	psu.mutation.SetTrialEnd(t)
	return psu
}

// SetNillableTrialEnd sets the "trial_end" field if the given value is not nil.
func (psu *PaymentSubscriptionUpdate) SetNillableTrialEnd(t *time.Time) *PaymentSubscriptionUpdate {
	if t != nil {
		psu.SetTrialEnd(*t)
	}
	return psu
}

// ClearTrialEnd clears the value of the "trial_end" field.
func (psu *PaymentSubscriptionUpdate) ClearTrialEnd() *PaymentSubscriptionUpdate {
	psu.mutation.ClearTrialEnd()
	return psu
}

// SetProviderRef sets the "provider_ref" field.
func (psu *PaymentSubscriptionUpdate) SetProviderRef(s string) *PaymentSubscriptionUpdate {
	psu.mutation.SetProviderRef(s)
	return psu
}

// SetNillableProviderRef sets the "provider_ref" field if the given value is not nil.
func (psu *PaymentSubscriptionUpdate) SetNillableProviderRef(s *string) *PaymentSubscriptionUpdate {
	if s != nil {
		psu.SetProviderRef(*s)
	}
	return psu
}

// ClearProviderRef clears the value of the "provider_ref" field.
func (psu *PaymentSubscriptionUpdate) ClearProviderRef() *PaymentSubscriptionUpdate {
	psu.mutation.ClearProviderRef()
	return psu
}

// SetProduct sets the "product" edge to the PaymentProduct entity.
func (psu *PaymentSubscriptionUpdate) SetProduct(p *PaymentProduct) *PaymentSubscriptionUpdate {
	return psu.SetProductID(p.ID)
}

// Mutation returns the PaymentSubscriptionMutation object of the builder.
func (psu *PaymentSubscriptionUpdate) Mutation() *PaymentSubscriptionMutation {
	return psu.mutation
}

// ClearProduct clears the "product" edge to the PaymentProduct entity.
func (psu *PaymentSubscriptionUpdate) ClearProduct() *PaymentSubscriptionUpdate {
	psu.mutation.ClearProduct()
	return psu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (psu *PaymentSubscriptionUpdate) Save(ctx context.Context) (int, error) {
	psu.defaults()
	return withHooks(ctx, psu.sqlSave, psu.mutation, psu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (psu *PaymentSubscriptionUpdate) SaveX(ctx context.Context) int {
	affected, err := psu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (psu *PaymentSubscriptionUpdate) Exec(ctx context.Context) error {
	_, err := psu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psu *PaymentSubscriptionUpdate) ExecX(ctx context.Context) {
	if err := psu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (psu *PaymentSubscriptionUpdate) defaults() {
	if _, ok := psu.mutation.UpdatedAt(); !ok && !psu.mutation.UpdatedAtCleared() {
		v := paymentsubscription.UpdateDefaultUpdatedAt()
		psu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (psu *PaymentSubscriptionUpdate) check() error {
	if v, ok := psu.mutation.CreatedBy(); ok {
		if err := paymentsubscription.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "PaymentSubscription.created_by": %w`, err)}
		}
	}
	if v, ok := psu.mutation.UpdatedBy(); ok {
		if err := paymentsubscription.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "PaymentSubscription.updated_by": %w`, err)}
		}
	}
	if v, ok := psu.mutation.UserID(); ok {
		if err := paymentsubscription.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "PaymentSubscription.user_id": %w`, err)}
		}
	}
	if v, ok := psu.mutation.ProductID(); ok {
		if err := paymentsubscription.ProductIDValidator(v); err != nil {
			return &ValidationError{Name: "product_id", err: fmt.Errorf(`ent: validator failed for field "PaymentSubscription.product_id": %w`, err)}
		}
	}
	if v, ok := psu.mutation.ChannelID(); ok {
		if err := paymentsubscription.ChannelIDValidator(v); err != nil {
			return &ValidationError{Name: "channel_id", err: fmt.Errorf(`ent: validator failed for field "PaymentSubscription.channel_id": %w`, err)}
		}
	}
	if psu.mutation.ProductCleared() && len(psu.mutation.ProductIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PaymentSubscription.product"`)
	}
	return nil
}

func (psu *PaymentSubscriptionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := psu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(paymentsubscription.Table, paymentsubscription.Columns, sqlgraph.NewFieldSpec(paymentsubscription.FieldID, field.TypeString))
	if ps := psu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := psu.mutation.Extras(); ok {
		_spec.SetField(paymentsubscription.FieldExtras, field.TypeJSON, value)
	}
	if psu.mutation.ExtrasCleared() {
		_spec.ClearField(paymentsubscription.FieldExtras, field.TypeJSON)
	}
	if value, ok := psu.mutation.CreatedBy(); ok {
		_spec.SetField(paymentsubscription.FieldCreatedBy, field.TypeString, value)
	}
	if psu.mutation.CreatedByCleared() {
		_spec.ClearField(paymentsubscription.FieldCreatedBy, field.TypeString)
	}
	if value, ok := psu.mutation.UpdatedBy(); ok {
		_spec.SetField(paymentsubscription.FieldUpdatedBy, field.TypeString, value)
	}
	if psu.mutation.UpdatedByCleared() {
		_spec.ClearField(paymentsubscription.FieldUpdatedBy, field.TypeString)
	}
	if psu.mutation.CreatedAtCleared() {
		_spec.ClearField(paymentsubscription.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := psu.mutation.UpdatedAt(); ok {
		_spec.SetField(paymentsubscription.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := psu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(paymentsubscription.FieldUpdatedAt, field.TypeInt64, value)
	}
	if psu.mutation.UpdatedAtCleared() {
		_spec.ClearField(paymentsubscription.FieldUpdatedAt, field.TypeInt64)
	}
	if value, ok := psu.mutation.Status(); ok {
		_spec.SetField(paymentsubscription.FieldStatus, field.TypeString, value)
	}
	if value, ok := psu.mutation.UserID(); ok {
		_spec.SetField(paymentsubscription.FieldUserID, field.TypeString, value)
	}
	if value, ok := psu.mutation.TenantID(); ok {
		_spec.SetField(paymentsubscription.FieldTenantID, field.TypeString, value)
	}
	if psu.mutation.TenantIDCleared() {
		_spec.ClearField(paymentsubscription.FieldTenantID, field.TypeString)
	}
	if value, ok := psu.mutation.ChannelID(); ok {
		_spec.SetField(paymentsubscription.FieldChannelID, field.TypeString, value)
	}
	if value, ok := psu.mutation.CurrentPeriodStart(); ok {
		_spec.SetField(paymentsubscription.FieldCurrentPeriodStart, field.TypeTime, value)
	}
	if value, ok := psu.mutation.CurrentPeriodEnd(); ok {
		_spec.SetField(paymentsubscription.FieldCurrentPeriodEnd, field.TypeTime, value)
	}
	if value, ok := psu.mutation.CancelAt(); ok {
		_spec.SetField(paymentsubscription.FieldCancelAt, field.TypeTime, value)
	}
	if psu.mutation.CancelAtCleared() {
		_spec.ClearField(paymentsubscription.FieldCancelAt, field.TypeTime)
	}
	if value, ok := psu.mutation.CancelledAt(); ok {
		_spec.SetField(paymentsubscription.FieldCancelledAt, field.TypeTime, value)
	}
	if psu.mutation.CancelledAtCleared() {
		_spec.ClearField(paymentsubscription.FieldCancelledAt, field.TypeTime)
	}
	if value, ok := psu.mutation.TrialStart(); ok {
		_spec.SetField(paymentsubscription.FieldTrialStart, field.TypeTime, value)
	}
	if psu.mutation.TrialStartCleared() {
		_spec.ClearField(paymentsubscription.FieldTrialStart, field.TypeTime)
	}
	if value, ok := psu.mutation.TrialEnd(); ok {
		_spec.SetField(paymentsubscription.FieldTrialEnd, field.TypeTime, value)
	}
	if psu.mutation.TrialEndCleared() {
		_spec.ClearField(paymentsubscription.FieldTrialEnd, field.TypeTime)
	}
	if value, ok := psu.mutation.ProviderRef(); ok {
		_spec.SetField(paymentsubscription.FieldProviderRef, field.TypeString, value)
	}
	if psu.mutation.ProviderRefCleared() {
		_spec.ClearField(paymentsubscription.FieldProviderRef, field.TypeString)
	}
	if psu.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   paymentsubscription.ProductTable,
			Columns: []string{paymentsubscription.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentproduct.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   paymentsubscription.ProductTable,
			Columns: []string{paymentsubscription.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentproduct.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, psu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{paymentsubscription.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	psu.mutation.done = true
	return n, nil
}

// PaymentSubscriptionUpdateOne is the builder for updating a single PaymentSubscription entity.
type PaymentSubscriptionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PaymentSubscriptionMutation
}

// SetExtras sets the "extras" field.
func (psuo *PaymentSubscriptionUpdateOne) SetExtras(m map[string]interface{}) *PaymentSubscriptionUpdateOne {
	psuo.mutation.SetExtras(m)
	return psuo
}

// ClearExtras clears the value of the "extras" field.
func (psuo *PaymentSubscriptionUpdateOne) ClearExtras() *PaymentSubscriptionUpdateOne {
	psuo.mutation.ClearExtras()
	return psuo
}

// SetCreatedBy sets the "created_by" field.
func (psuo *PaymentSubscriptionUpdateOne) SetCreatedBy(s string) *PaymentSubscriptionUpdateOne {
	psuo.mutation.SetCreatedBy(s)
	return psuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (psuo *PaymentSubscriptionUpdateOne) SetNillableCreatedBy(s *string) *PaymentSubscriptionUpdateOne {
	if s != nil {
		psuo.SetCreatedBy(*s)
	}
	return psuo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (psuo *PaymentSubscriptionUpdateOne) ClearCreatedBy() *PaymentSubscriptionUpdateOne {
	psuo.mutation.ClearCreatedBy()
	return psuo
}

// SetUpdatedBy sets the "updated_by" field.
func (psuo *PaymentSubscriptionUpdateOne) SetUpdatedBy(s string) *PaymentSubscriptionUpdateOne {
	psuo.mutation.SetUpdatedBy(s)
	return psuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (psuo *PaymentSubscriptionUpdateOne) SetNillableUpdatedBy(s *string) *PaymentSubscriptionUpdateOne {
	if s != nil {
		psuo.SetUpdatedBy(*s)
	}
	return psuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (psuo *PaymentSubscriptionUpdateOne) ClearUpdatedBy() *PaymentSubscriptionUpdateOne {
	psuo.mutation.ClearUpdatedBy()
	return psuo
}

// SetUpdatedAt sets the "updated_at" field.
func (psuo *PaymentSubscriptionUpdateOne) SetUpdatedAt(i int64) *PaymentSubscriptionUpdateOne {
	psuo.mutation.ResetUpdatedAt()
	psuo.mutation.SetUpdatedAt(i)
	return psuo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (psuo *PaymentSubscriptionUpdateOne) AddUpdatedAt(i int64) *PaymentSubscriptionUpdateOne {
	psuo.mutation.AddUpdatedAt(i)
	return psuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (psuo *PaymentSubscriptionUpdateOne) ClearUpdatedAt() *PaymentSubscriptionUpdateOne {
	psuo.mutation.ClearUpdatedAt()
	return psuo
}

// SetStatus sets the "status" field.
func (psuo *PaymentSubscriptionUpdateOne) SetStatus(s string) *PaymentSubscriptionUpdateOne {
	psuo.mutation.SetStatus(s)
	return psuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (psuo *PaymentSubscriptionUpdateOne) SetNillableStatus(s *string) *PaymentSubscriptionUpdateOne {
	if s != nil {
		psuo.SetStatus(*s)
	}
	return psuo
}

// SetUserID sets the "user_id" field.
func (psuo *PaymentSubscriptionUpdateOne) SetUserID(s string) *PaymentSubscriptionUpdateOne {
	psuo.mutation.SetUserID(s)
	return psuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (psuo *PaymentSubscriptionUpdateOne) SetNillableUserID(s *string) *PaymentSubscriptionUpdateOne {
	if s != nil {
		psuo.SetUserID(*s)
	}
	return psuo
}

// SetTenantID sets the "tenant_id" field.
func (psuo *PaymentSubscriptionUpdateOne) SetTenantID(s string) *PaymentSubscriptionUpdateOne {
	psuo.mutation.SetTenantID(s)
	return psuo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (psuo *PaymentSubscriptionUpdateOne) SetNillableTenantID(s *string) *PaymentSubscriptionUpdateOne {
	if s != nil {
		psuo.SetTenantID(*s)
	}
	return psuo
}

// ClearTenantID clears the value of the "tenant_id" field.
func (psuo *PaymentSubscriptionUpdateOne) ClearTenantID() *PaymentSubscriptionUpdateOne {
	psuo.mutation.ClearTenantID()
	return psuo
}

// SetProductID sets the "product_id" field.
func (psuo *PaymentSubscriptionUpdateOne) SetProductID(s string) *PaymentSubscriptionUpdateOne {
	psuo.mutation.SetProductID(s)
	return psuo
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (psuo *PaymentSubscriptionUpdateOne) SetNillableProductID(s *string) *PaymentSubscriptionUpdateOne {
	if s != nil {
		psuo.SetProductID(*s)
	}
	return psuo
}

// SetChannelID sets the "channel_id" field.
func (psuo *PaymentSubscriptionUpdateOne) SetChannelID(s string) *PaymentSubscriptionUpdateOne {
	psuo.mutation.SetChannelID(s)
	return psuo
}

// SetNillableChannelID sets the "channel_id" field if the given value is not nil.
func (psuo *PaymentSubscriptionUpdateOne) SetNillableChannelID(s *string) *PaymentSubscriptionUpdateOne {
	if s != nil {
		psuo.SetChannelID(*s)
	}
	return psuo
}

// SetCurrentPeriodStart sets the "current_period_start" field.
func (psuo *PaymentSubscriptionUpdateOne) SetCurrentPeriodStart(t time.Time) *PaymentSubscriptionUpdateOne {
	psuo.mutation.SetCurrentPeriodStart(t)
	return psuo
}

// SetNillableCurrentPeriodStart sets the "current_period_start" field if the given value is not nil.
func (psuo *PaymentSubscriptionUpdateOne) SetNillableCurrentPeriodStart(t *time.Time) *PaymentSubscriptionUpdateOne {
	if t != nil {
		psuo.SetCurrentPeriodStart(*t)
	}
	return psuo
}

// SetCurrentPeriodEnd sets the "current_period_end" field.
func (psuo *PaymentSubscriptionUpdateOne) SetCurrentPeriodEnd(t time.Time) *PaymentSubscriptionUpdateOne {
	psuo.mutation.SetCurrentPeriodEnd(t)
	return psuo
}

// SetNillableCurrentPeriodEnd sets the "current_period_end" field if the given value is not nil.
func (psuo *PaymentSubscriptionUpdateOne) SetNillableCurrentPeriodEnd(t *time.Time) *PaymentSubscriptionUpdateOne {
	if t != nil {
		psuo.SetCurrentPeriodEnd(*t)
	}
	return psuo
}

// SetCancelAt sets the "cancel_at" field.
func (psuo *PaymentSubscriptionUpdateOne) SetCancelAt(t time.Time) *PaymentSubscriptionUpdateOne {
	psuo.mutation.SetCancelAt(t)
	return psuo
}

// SetNillableCancelAt sets the "cancel_at" field if the given value is not nil.
func (psuo *PaymentSubscriptionUpdateOne) SetNillableCancelAt(t *time.Time) *PaymentSubscriptionUpdateOne {
	if t != nil {
		psuo.SetCancelAt(*t)
	}
	return psuo
}

// ClearCancelAt clears the value of the "cancel_at" field.
func (psuo *PaymentSubscriptionUpdateOne) ClearCancelAt() *PaymentSubscriptionUpdateOne {
	psuo.mutation.ClearCancelAt()
	return psuo
}

// SetCancelledAt sets the "cancelled_at" field.
func (psuo *PaymentSubscriptionUpdateOne) SetCancelledAt(t time.Time) *PaymentSubscriptionUpdateOne {
	psuo.mutation.SetCancelledAt(t)
	return psuo
}

// SetNillableCancelledAt sets the "cancelled_at" field if the given value is not nil.
func (psuo *PaymentSubscriptionUpdateOne) SetNillableCancelledAt(t *time.Time) *PaymentSubscriptionUpdateOne {
	if t != nil {
		psuo.SetCancelledAt(*t)
	}
	return psuo
}

// ClearCancelledAt clears the value of the "cancelled_at" field.
func (psuo *PaymentSubscriptionUpdateOne) ClearCancelledAt() *PaymentSubscriptionUpdateOne {
	psuo.mutation.ClearCancelledAt()
	return psuo
}

// SetTrialStart sets the "trial_start" field.
func (psuo *PaymentSubscriptionUpdateOne) SetTrialStart(t time.Time) *PaymentSubscriptionUpdateOne {
	psuo.mutation.SetTrialStart(t)
	return psuo
}

// SetNillableTrialStart sets the "trial_start" field if the given value is not nil.
func (psuo *PaymentSubscriptionUpdateOne) SetNillableTrialStart(t *time.Time) *PaymentSubscriptionUpdateOne {
	if t != nil {
		psuo.SetTrialStart(*t)
	}
	return psuo
}

// ClearTrialStart clears the value of the "trial_start" field.
func (psuo *PaymentSubscriptionUpdateOne) ClearTrialStart() *PaymentSubscriptionUpdateOne {
	psuo.mutation.ClearTrialStart()
	return psuo
}

// SetTrialEnd sets the "trial_end" field.
func (psuo *PaymentSubscriptionUpdateOne) SetTrialEnd(t time.Time) *PaymentSubscriptionUpdateOne {
	psuo.mutation.SetTrialEnd(t)
	return psuo
}

// SetNillableTrialEnd sets the "trial_end" field if the given value is not nil.
func (psuo *PaymentSubscriptionUpdateOne) SetNillableTrialEnd(t *time.Time) *PaymentSubscriptionUpdateOne {
	if t != nil {
		psuo.SetTrialEnd(*t)
	}
	return psuo
}

// ClearTrialEnd clears the value of the "trial_end" field.
func (psuo *PaymentSubscriptionUpdateOne) ClearTrialEnd() *PaymentSubscriptionUpdateOne {
	psuo.mutation.ClearTrialEnd()
	return psuo
}

// SetProviderRef sets the "provider_ref" field.
func (psuo *PaymentSubscriptionUpdateOne) SetProviderRef(s string) *PaymentSubscriptionUpdateOne {
	psuo.mutation.SetProviderRef(s)
	return psuo
}

// SetNillableProviderRef sets the "provider_ref" field if the given value is not nil.
func (psuo *PaymentSubscriptionUpdateOne) SetNillableProviderRef(s *string) *PaymentSubscriptionUpdateOne {
	if s != nil {
		psuo.SetProviderRef(*s)
	}
	return psuo
}

// ClearProviderRef clears the value of the "provider_ref" field.
func (psuo *PaymentSubscriptionUpdateOne) ClearProviderRef() *PaymentSubscriptionUpdateOne {
	psuo.mutation.ClearProviderRef()
	return psuo
}

// SetProduct sets the "product" edge to the PaymentProduct entity.
func (psuo *PaymentSubscriptionUpdateOne) SetProduct(p *PaymentProduct) *PaymentSubscriptionUpdateOne {
	return psuo.SetProductID(p.ID)
}

// Mutation returns the PaymentSubscriptionMutation object of the builder.
func (psuo *PaymentSubscriptionUpdateOne) Mutation() *PaymentSubscriptionMutation {
	return psuo.mutation
}

// ClearProduct clears the "product" edge to the PaymentProduct entity.
func (psuo *PaymentSubscriptionUpdateOne) ClearProduct() *PaymentSubscriptionUpdateOne {
	psuo.mutation.ClearProduct()
	return psuo
}

// Where appends a list predicates to the PaymentSubscriptionUpdate builder.
func (psuo *PaymentSubscriptionUpdateOne) Where(ps ...predicate.PaymentSubscription) *PaymentSubscriptionUpdateOne {
	psuo.mutation.Where(ps...)
	return psuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (psuo *PaymentSubscriptionUpdateOne) Select(field string, fields ...string) *PaymentSubscriptionUpdateOne {
	psuo.fields = append([]string{field}, fields...)
	return psuo
}

// Save executes the query and returns the updated PaymentSubscription entity.
func (psuo *PaymentSubscriptionUpdateOne) Save(ctx context.Context) (*PaymentSubscription, error) {
	psuo.defaults()
	return withHooks(ctx, psuo.sqlSave, psuo.mutation, psuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (psuo *PaymentSubscriptionUpdateOne) SaveX(ctx context.Context) *PaymentSubscription {
	node, err := psuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (psuo *PaymentSubscriptionUpdateOne) Exec(ctx context.Context) error {
	_, err := psuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psuo *PaymentSubscriptionUpdateOne) ExecX(ctx context.Context) {
	if err := psuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (psuo *PaymentSubscriptionUpdateOne) defaults() {
	if _, ok := psuo.mutation.UpdatedAt(); !ok && !psuo.mutation.UpdatedAtCleared() {
		v := paymentsubscription.UpdateDefaultUpdatedAt()
		psuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (psuo *PaymentSubscriptionUpdateOne) check() error {
	if v, ok := psuo.mutation.CreatedBy(); ok {
		if err := paymentsubscription.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "PaymentSubscription.created_by": %w`, err)}
		}
	}
	if v, ok := psuo.mutation.UpdatedBy(); ok {
		if err := paymentsubscription.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "PaymentSubscription.updated_by": %w`, err)}
		}
	}
	if v, ok := psuo.mutation.UserID(); ok {
		if err := paymentsubscription.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "PaymentSubscription.user_id": %w`, err)}
		}
	}
	if v, ok := psuo.mutation.ProductID(); ok {
		if err := paymentsubscription.ProductIDValidator(v); err != nil {
			return &ValidationError{Name: "product_id", err: fmt.Errorf(`ent: validator failed for field "PaymentSubscription.product_id": %w`, err)}
		}
	}
	if v, ok := psuo.mutation.ChannelID(); ok {
		if err := paymentsubscription.ChannelIDValidator(v); err != nil {
			return &ValidationError{Name: "channel_id", err: fmt.Errorf(`ent: validator failed for field "PaymentSubscription.channel_id": %w`, err)}
		}
	}
	if psuo.mutation.ProductCleared() && len(psuo.mutation.ProductIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PaymentSubscription.product"`)
	}
	return nil
}

func (psuo *PaymentSubscriptionUpdateOne) sqlSave(ctx context.Context) (_node *PaymentSubscription, err error) {
	if err := psuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(paymentsubscription.Table, paymentsubscription.Columns, sqlgraph.NewFieldSpec(paymentsubscription.FieldID, field.TypeString))
	id, ok := psuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PaymentSubscription.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := psuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, paymentsubscription.FieldID)
		for _, f := range fields {
			if !paymentsubscription.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != paymentsubscription.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := psuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := psuo.mutation.Extras(); ok {
		_spec.SetField(paymentsubscription.FieldExtras, field.TypeJSON, value)
	}
	if psuo.mutation.ExtrasCleared() {
		_spec.ClearField(paymentsubscription.FieldExtras, field.TypeJSON)
	}
	if value, ok := psuo.mutation.CreatedBy(); ok {
		_spec.SetField(paymentsubscription.FieldCreatedBy, field.TypeString, value)
	}
	if psuo.mutation.CreatedByCleared() {
		_spec.ClearField(paymentsubscription.FieldCreatedBy, field.TypeString)
	}
	if value, ok := psuo.mutation.UpdatedBy(); ok {
		_spec.SetField(paymentsubscription.FieldUpdatedBy, field.TypeString, value)
	}
	if psuo.mutation.UpdatedByCleared() {
		_spec.ClearField(paymentsubscription.FieldUpdatedBy, field.TypeString)
	}
	if psuo.mutation.CreatedAtCleared() {
		_spec.ClearField(paymentsubscription.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := psuo.mutation.UpdatedAt(); ok {
		_spec.SetField(paymentsubscription.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := psuo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(paymentsubscription.FieldUpdatedAt, field.TypeInt64, value)
	}
	if psuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(paymentsubscription.FieldUpdatedAt, field.TypeInt64)
	}
	if value, ok := psuo.mutation.Status(); ok {
		_spec.SetField(paymentsubscription.FieldStatus, field.TypeString, value)
	}
	if value, ok := psuo.mutation.UserID(); ok {
		_spec.SetField(paymentsubscription.FieldUserID, field.TypeString, value)
	}
	if value, ok := psuo.mutation.TenantID(); ok {
		_spec.SetField(paymentsubscription.FieldTenantID, field.TypeString, value)
	}
	if psuo.mutation.TenantIDCleared() {
		_spec.ClearField(paymentsubscription.FieldTenantID, field.TypeString)
	}
	if value, ok := psuo.mutation.ChannelID(); ok {
		_spec.SetField(paymentsubscription.FieldChannelID, field.TypeString, value)
	}
	if value, ok := psuo.mutation.CurrentPeriodStart(); ok {
		_spec.SetField(paymentsubscription.FieldCurrentPeriodStart, field.TypeTime, value)
	}
	if value, ok := psuo.mutation.CurrentPeriodEnd(); ok {
		_spec.SetField(paymentsubscription.FieldCurrentPeriodEnd, field.TypeTime, value)
	}
	if value, ok := psuo.mutation.CancelAt(); ok {
		_spec.SetField(paymentsubscription.FieldCancelAt, field.TypeTime, value)
	}
	if psuo.mutation.CancelAtCleared() {
		_spec.ClearField(paymentsubscription.FieldCancelAt, field.TypeTime)
	}
	if value, ok := psuo.mutation.CancelledAt(); ok {
		_spec.SetField(paymentsubscription.FieldCancelledAt, field.TypeTime, value)
	}
	if psuo.mutation.CancelledAtCleared() {
		_spec.ClearField(paymentsubscription.FieldCancelledAt, field.TypeTime)
	}
	if value, ok := psuo.mutation.TrialStart(); ok {
		_spec.SetField(paymentsubscription.FieldTrialStart, field.TypeTime, value)
	}
	if psuo.mutation.TrialStartCleared() {
		_spec.ClearField(paymentsubscription.FieldTrialStart, field.TypeTime)
	}
	if value, ok := psuo.mutation.TrialEnd(); ok {
		_spec.SetField(paymentsubscription.FieldTrialEnd, field.TypeTime, value)
	}
	if psuo.mutation.TrialEndCleared() {
		_spec.ClearField(paymentsubscription.FieldTrialEnd, field.TypeTime)
	}
	if value, ok := psuo.mutation.ProviderRef(); ok {
		_spec.SetField(paymentsubscription.FieldProviderRef, field.TypeString, value)
	}
	if psuo.mutation.ProviderRefCleared() {
		_spec.ClearField(paymentsubscription.FieldProviderRef, field.TypeString)
	}
	if psuo.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   paymentsubscription.ProductTable,
			Columns: []string{paymentsubscription.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentproduct.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   paymentsubscription.ProductTable,
			Columns: []string{paymentsubscription.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentproduct.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PaymentSubscription{config: psuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, psuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{paymentsubscription.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	psuo.mutation.done = true
	return _node, nil
}
