// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/core/realtime/data/ent/channel"
	"ncobase/core/realtime/data/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ChannelUpdate is the builder for updating Channel entities.
type ChannelUpdate struct {
	config
	hooks    []Hook
	mutation *ChannelMutation
}

// Where appends a list predicates to the ChannelUpdate builder.
func (cu *ChannelUpdate) Where(ps ...predicate.Channel) *ChannelUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetName sets the "name" field.
func (cu *ChannelUpdate) SetName(s string) *ChannelUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cu *ChannelUpdate) SetNillableName(s *string) *ChannelUpdate {
	if s != nil {
		cu.SetName(*s)
	}
	return cu
}

// ClearName clears the value of the "name" field.
func (cu *ChannelUpdate) ClearName() *ChannelUpdate {
	cu.mutation.ClearName()
	return cu
}

// SetDescription sets the "description" field.
func (cu *ChannelUpdate) SetDescription(s string) *ChannelUpdate {
	cu.mutation.SetDescription(s)
	return cu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cu *ChannelUpdate) SetNillableDescription(s *string) *ChannelUpdate {
	if s != nil {
		cu.SetDescription(*s)
	}
	return cu
}

// ClearDescription clears the value of the "description" field.
func (cu *ChannelUpdate) ClearDescription() *ChannelUpdate {
	cu.mutation.ClearDescription()
	return cu
}

// SetType sets the "type" field.
func (cu *ChannelUpdate) SetType(s string) *ChannelUpdate {
	cu.mutation.SetType(s)
	return cu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (cu *ChannelUpdate) SetNillableType(s *string) *ChannelUpdate {
	if s != nil {
		cu.SetType(*s)
	}
	return cu
}

// ClearType clears the value of the "type" field.
func (cu *ChannelUpdate) ClearType() *ChannelUpdate {
	cu.mutation.ClearType()
	return cu
}

// SetStatus sets the "status" field.
func (cu *ChannelUpdate) SetStatus(i int) *ChannelUpdate {
	cu.mutation.ResetStatus()
	cu.mutation.SetStatus(i)
	return cu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cu *ChannelUpdate) SetNillableStatus(i *int) *ChannelUpdate {
	if i != nil {
		cu.SetStatus(*i)
	}
	return cu
}

// AddStatus adds i to the "status" field.
func (cu *ChannelUpdate) AddStatus(i int) *ChannelUpdate {
	cu.mutation.AddStatus(i)
	return cu
}

// SetExtras sets the "extras" field.
func (cu *ChannelUpdate) SetExtras(m map[string]interface{}) *ChannelUpdate {
	cu.mutation.SetExtras(m)
	return cu
}

// ClearExtras clears the value of the "extras" field.
func (cu *ChannelUpdate) ClearExtras() *ChannelUpdate {
	cu.mutation.ClearExtras()
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *ChannelUpdate) SetUpdatedAt(i int64) *ChannelUpdate {
	cu.mutation.ResetUpdatedAt()
	cu.mutation.SetUpdatedAt(i)
	return cu
}

// AddUpdatedAt adds i to the "updated_at" field.
func (cu *ChannelUpdate) AddUpdatedAt(i int64) *ChannelUpdate {
	cu.mutation.AddUpdatedAt(i)
	return cu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (cu *ChannelUpdate) ClearUpdatedAt() *ChannelUpdate {
	cu.mutation.ClearUpdatedAt()
	return cu
}

// Mutation returns the ChannelMutation object of the builder.
func (cu *ChannelUpdate) Mutation() *ChannelMutation {
	return cu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *ChannelUpdate) Save(ctx context.Context) (int, error) {
	cu.defaults()
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ChannelUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ChannelUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ChannelUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *ChannelUpdate) defaults() {
	if _, ok := cu.mutation.UpdatedAt(); !ok && !cu.mutation.UpdatedAtCleared() {
		v := channel.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
}

func (cu *ChannelUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(channel.Table, channel.Columns, sqlgraph.NewFieldSpec(channel.FieldID, field.TypeString))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.SetField(channel.FieldName, field.TypeString, value)
	}
	if cu.mutation.NameCleared() {
		_spec.ClearField(channel.FieldName, field.TypeString)
	}
	if value, ok := cu.mutation.Description(); ok {
		_spec.SetField(channel.FieldDescription, field.TypeString, value)
	}
	if cu.mutation.DescriptionCleared() {
		_spec.ClearField(channel.FieldDescription, field.TypeString)
	}
	if value, ok := cu.mutation.GetType(); ok {
		_spec.SetField(channel.FieldType, field.TypeString, value)
	}
	if cu.mutation.TypeCleared() {
		_spec.ClearField(channel.FieldType, field.TypeString)
	}
	if value, ok := cu.mutation.Status(); ok {
		_spec.SetField(channel.FieldStatus, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedStatus(); ok {
		_spec.AddField(channel.FieldStatus, field.TypeInt, value)
	}
	if value, ok := cu.mutation.Extras(); ok {
		_spec.SetField(channel.FieldExtras, field.TypeJSON, value)
	}
	if cu.mutation.ExtrasCleared() {
		_spec.ClearField(channel.FieldExtras, field.TypeJSON)
	}
	if cu.mutation.CreatedAtCleared() {
		_spec.ClearField(channel.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.SetField(channel.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := cu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(channel.FieldUpdatedAt, field.TypeInt64, value)
	}
	if cu.mutation.UpdatedAtCleared() {
		_spec.ClearField(channel.FieldUpdatedAt, field.TypeInt64)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{channel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// ChannelUpdateOne is the builder for updating a single Channel entity.
type ChannelUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ChannelMutation
}

// SetName sets the "name" field.
func (cuo *ChannelUpdateOne) SetName(s string) *ChannelUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cuo *ChannelUpdateOne) SetNillableName(s *string) *ChannelUpdateOne {
	if s != nil {
		cuo.SetName(*s)
	}
	return cuo
}

// ClearName clears the value of the "name" field.
func (cuo *ChannelUpdateOne) ClearName() *ChannelUpdateOne {
	cuo.mutation.ClearName()
	return cuo
}

// SetDescription sets the "description" field.
func (cuo *ChannelUpdateOne) SetDescription(s string) *ChannelUpdateOne {
	cuo.mutation.SetDescription(s)
	return cuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cuo *ChannelUpdateOne) SetNillableDescription(s *string) *ChannelUpdateOne {
	if s != nil {
		cuo.SetDescription(*s)
	}
	return cuo
}

// ClearDescription clears the value of the "description" field.
func (cuo *ChannelUpdateOne) ClearDescription() *ChannelUpdateOne {
	cuo.mutation.ClearDescription()
	return cuo
}

// SetType sets the "type" field.
func (cuo *ChannelUpdateOne) SetType(s string) *ChannelUpdateOne {
	cuo.mutation.SetType(s)
	return cuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (cuo *ChannelUpdateOne) SetNillableType(s *string) *ChannelUpdateOne {
	if s != nil {
		cuo.SetType(*s)
	}
	return cuo
}

// ClearType clears the value of the "type" field.
func (cuo *ChannelUpdateOne) ClearType() *ChannelUpdateOne {
	cuo.mutation.ClearType()
	return cuo
}

// SetStatus sets the "status" field.
func (cuo *ChannelUpdateOne) SetStatus(i int) *ChannelUpdateOne {
	cuo.mutation.ResetStatus()
	cuo.mutation.SetStatus(i)
	return cuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cuo *ChannelUpdateOne) SetNillableStatus(i *int) *ChannelUpdateOne {
	if i != nil {
		cuo.SetStatus(*i)
	}
	return cuo
}

// AddStatus adds i to the "status" field.
func (cuo *ChannelUpdateOne) AddStatus(i int) *ChannelUpdateOne {
	cuo.mutation.AddStatus(i)
	return cuo
}

// SetExtras sets the "extras" field.
func (cuo *ChannelUpdateOne) SetExtras(m map[string]interface{}) *ChannelUpdateOne {
	cuo.mutation.SetExtras(m)
	return cuo
}

// ClearExtras clears the value of the "extras" field.
func (cuo *ChannelUpdateOne) ClearExtras() *ChannelUpdateOne {
	cuo.mutation.ClearExtras()
	return cuo
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *ChannelUpdateOne) SetUpdatedAt(i int64) *ChannelUpdateOne {
	cuo.mutation.ResetUpdatedAt()
	cuo.mutation.SetUpdatedAt(i)
	return cuo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (cuo *ChannelUpdateOne) AddUpdatedAt(i int64) *ChannelUpdateOne {
	cuo.mutation.AddUpdatedAt(i)
	return cuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (cuo *ChannelUpdateOne) ClearUpdatedAt() *ChannelUpdateOne {
	cuo.mutation.ClearUpdatedAt()
	return cuo
}

// Mutation returns the ChannelMutation object of the builder.
func (cuo *ChannelUpdateOne) Mutation() *ChannelMutation {
	return cuo.mutation
}

// Where appends a list predicates to the ChannelUpdate builder.
func (cuo *ChannelUpdateOne) Where(ps ...predicate.Channel) *ChannelUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *ChannelUpdateOne) Select(field string, fields ...string) *ChannelUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Channel entity.
func (cuo *ChannelUpdateOne) Save(ctx context.Context) (*Channel, error) {
	cuo.defaults()
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ChannelUpdateOne) SaveX(ctx context.Context) *Channel {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *ChannelUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ChannelUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *ChannelUpdateOne) defaults() {
	if _, ok := cuo.mutation.UpdatedAt(); !ok && !cuo.mutation.UpdatedAtCleared() {
		v := channel.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
}

func (cuo *ChannelUpdateOne) sqlSave(ctx context.Context) (_node *Channel, err error) {
	_spec := sqlgraph.NewUpdateSpec(channel.Table, channel.Columns, sqlgraph.NewFieldSpec(channel.FieldID, field.TypeString))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Channel.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, channel.FieldID)
		for _, f := range fields {
			if !channel.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != channel.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.SetField(channel.FieldName, field.TypeString, value)
	}
	if cuo.mutation.NameCleared() {
		_spec.ClearField(channel.FieldName, field.TypeString)
	}
	if value, ok := cuo.mutation.Description(); ok {
		_spec.SetField(channel.FieldDescription, field.TypeString, value)
	}
	if cuo.mutation.DescriptionCleared() {
		_spec.ClearField(channel.FieldDescription, field.TypeString)
	}
	if value, ok := cuo.mutation.GetType(); ok {
		_spec.SetField(channel.FieldType, field.TypeString, value)
	}
	if cuo.mutation.TypeCleared() {
		_spec.ClearField(channel.FieldType, field.TypeString)
	}
	if value, ok := cuo.mutation.Status(); ok {
		_spec.SetField(channel.FieldStatus, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedStatus(); ok {
		_spec.AddField(channel.FieldStatus, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.Extras(); ok {
		_spec.SetField(channel.FieldExtras, field.TypeJSON, value)
	}
	if cuo.mutation.ExtrasCleared() {
		_spec.ClearField(channel.FieldExtras, field.TypeJSON)
	}
	if cuo.mutation.CreatedAtCleared() {
		_spec.ClearField(channel.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.SetField(channel.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := cuo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(channel.FieldUpdatedAt, field.TypeInt64, value)
	}
	if cuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(channel.FieldUpdatedAt, field.TypeInt64)
	}
	_node = &Channel{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{channel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
