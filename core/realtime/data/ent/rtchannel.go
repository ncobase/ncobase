// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"ncobase/realtime/data/ent/rtchannel"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// RTChannel is the model entity for the RTChannel schema.
type RTChannel struct {
	config `json:"-"`
	// ID of the ent.
	// primary key
	ID string `json:"id,omitempty"`
	// name
	Name string `json:"name,omitempty"`
	// description
	Description string `json:"description,omitempty"`
	// type
	Type string `json:"type,omitempty"`
	// status: 0 activated, 1 unactivated, 2 disabled
	Status int `json:"status,omitempty"`
	// Extend properties
	Extras map[string]interface{} `json:"extras,omitempty"`
	// created at
	CreatedAt int64 `json:"created_at,omitempty"`
	// updated at
	UpdatedAt    int64 `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*RTChannel) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case rtchannel.FieldExtras:
			values[i] = new([]byte)
		case rtchannel.FieldStatus, rtchannel.FieldCreatedAt, rtchannel.FieldUpdatedAt:
			values[i] = new(sql.NullInt64)
		case rtchannel.FieldID, rtchannel.FieldName, rtchannel.FieldDescription, rtchannel.FieldType:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the RTChannel fields.
func (rc *RTChannel) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case rtchannel.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				rc.ID = value.String
			}
		case rtchannel.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				rc.Name = value.String
			}
		case rtchannel.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				rc.Description = value.String
			}
		case rtchannel.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				rc.Type = value.String
			}
		case rtchannel.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				rc.Status = int(value.Int64)
			}
		case rtchannel.FieldExtras:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field extras", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &rc.Extras); err != nil {
					return fmt.Errorf("unmarshal field extras: %w", err)
				}
			}
		case rtchannel.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				rc.CreatedAt = value.Int64
			}
		case rtchannel.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				rc.UpdatedAt = value.Int64
			}
		default:
			rc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the RTChannel.
// This includes values selected through modifiers, order, etc.
func (rc *RTChannel) Value(name string) (ent.Value, error) {
	return rc.selectValues.Get(name)
}

// Update returns a builder for updating this RTChannel.
// Note that you need to call RTChannel.Unwrap() before calling this method if this RTChannel
// was returned from a transaction, and the transaction was committed or rolled back.
func (rc *RTChannel) Update() *RTChannelUpdateOne {
	return NewRTChannelClient(rc.config).UpdateOne(rc)
}

// Unwrap unwraps the RTChannel entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rc *RTChannel) Unwrap() *RTChannel {
	_tx, ok := rc.config.driver.(*txDriver)
	if !ok {
		panic("ent: RTChannel is not a transactional entity")
	}
	rc.config.driver = _tx.drv
	return rc
}

// String implements the fmt.Stringer.
func (rc *RTChannel) String() string {
	var builder strings.Builder
	builder.WriteString("RTChannel(")
	builder.WriteString(fmt.Sprintf("id=%v, ", rc.ID))
	builder.WriteString("name=")
	builder.WriteString(rc.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(rc.Description)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(rc.Type)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", rc.Status))
	builder.WriteString(", ")
	builder.WriteString("extras=")
	builder.WriteString(fmt.Sprintf("%v", rc.Extras))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", rc.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", rc.UpdatedAt))
	builder.WriteByte(')')
	return builder.String()
}

// RTChannels is a parsable slice of RTChannel.
type RTChannels []*RTChannel
