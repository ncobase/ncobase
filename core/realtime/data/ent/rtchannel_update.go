// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/core/realtime/data/ent/predicate"
	"ncobase/core/realtime/data/ent/rtchannel"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RTChannelUpdate is the builder for updating RTChannel entities.
type RTChannelUpdate struct {
	config
	hooks    []Hook
	mutation *RTChannelMutation
}

// Where appends a list predicates to the RTChannelUpdate builder.
func (rcu *RTChannelUpdate) Where(ps ...predicate.RTChannel) *RTChannelUpdate {
	rcu.mutation.Where(ps...)
	return rcu
}

// SetName sets the "name" field.
func (rcu *RTChannelUpdate) SetName(s string) *RTChannelUpdate {
	rcu.mutation.SetName(s)
	return rcu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (rcu *RTChannelUpdate) SetNillableName(s *string) *RTChannelUpdate {
	if s != nil {
		rcu.SetName(*s)
	}
	return rcu
}

// ClearName clears the value of the "name" field.
func (rcu *RTChannelUpdate) ClearName() *RTChannelUpdate {
	rcu.mutation.ClearName()
	return rcu
}

// SetDescription sets the "description" field.
func (rcu *RTChannelUpdate) SetDescription(s string) *RTChannelUpdate {
	rcu.mutation.SetDescription(s)
	return rcu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (rcu *RTChannelUpdate) SetNillableDescription(s *string) *RTChannelUpdate {
	if s != nil {
		rcu.SetDescription(*s)
	}
	return rcu
}

// ClearDescription clears the value of the "description" field.
func (rcu *RTChannelUpdate) ClearDescription() *RTChannelUpdate {
	rcu.mutation.ClearDescription()
	return rcu
}

// SetType sets the "type" field.
func (rcu *RTChannelUpdate) SetType(s string) *RTChannelUpdate {
	rcu.mutation.SetType(s)
	return rcu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (rcu *RTChannelUpdate) SetNillableType(s *string) *RTChannelUpdate {
	if s != nil {
		rcu.SetType(*s)
	}
	return rcu
}

// ClearType clears the value of the "type" field.
func (rcu *RTChannelUpdate) ClearType() *RTChannelUpdate {
	rcu.mutation.ClearType()
	return rcu
}

// SetStatus sets the "status" field.
func (rcu *RTChannelUpdate) SetStatus(i int) *RTChannelUpdate {
	rcu.mutation.ResetStatus()
	rcu.mutation.SetStatus(i)
	return rcu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (rcu *RTChannelUpdate) SetNillableStatus(i *int) *RTChannelUpdate {
	if i != nil {
		rcu.SetStatus(*i)
	}
	return rcu
}

// AddStatus adds i to the "status" field.
func (rcu *RTChannelUpdate) AddStatus(i int) *RTChannelUpdate {
	rcu.mutation.AddStatus(i)
	return rcu
}

// SetExtras sets the "extras" field.
func (rcu *RTChannelUpdate) SetExtras(m map[string]interface{}) *RTChannelUpdate {
	rcu.mutation.SetExtras(m)
	return rcu
}

// ClearExtras clears the value of the "extras" field.
func (rcu *RTChannelUpdate) ClearExtras() *RTChannelUpdate {
	rcu.mutation.ClearExtras()
	return rcu
}

// SetUpdatedAt sets the "updated_at" field.
func (rcu *RTChannelUpdate) SetUpdatedAt(i int64) *RTChannelUpdate {
	rcu.mutation.ResetUpdatedAt()
	rcu.mutation.SetUpdatedAt(i)
	return rcu
}

// AddUpdatedAt adds i to the "updated_at" field.
func (rcu *RTChannelUpdate) AddUpdatedAt(i int64) *RTChannelUpdate {
	rcu.mutation.AddUpdatedAt(i)
	return rcu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (rcu *RTChannelUpdate) ClearUpdatedAt() *RTChannelUpdate {
	rcu.mutation.ClearUpdatedAt()
	return rcu
}

// Mutation returns the RTChannelMutation object of the builder.
func (rcu *RTChannelUpdate) Mutation() *RTChannelMutation {
	return rcu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rcu *RTChannelUpdate) Save(ctx context.Context) (int, error) {
	rcu.defaults()
	return withHooks(ctx, rcu.sqlSave, rcu.mutation, rcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rcu *RTChannelUpdate) SaveX(ctx context.Context) int {
	affected, err := rcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rcu *RTChannelUpdate) Exec(ctx context.Context) error {
	_, err := rcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcu *RTChannelUpdate) ExecX(ctx context.Context) {
	if err := rcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rcu *RTChannelUpdate) defaults() {
	if _, ok := rcu.mutation.UpdatedAt(); !ok && !rcu.mutation.UpdatedAtCleared() {
		v := rtchannel.UpdateDefaultUpdatedAt()
		rcu.mutation.SetUpdatedAt(v)
	}
}

func (rcu *RTChannelUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(rtchannel.Table, rtchannel.Columns, sqlgraph.NewFieldSpec(rtchannel.FieldID, field.TypeString))
	if ps := rcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rcu.mutation.Name(); ok {
		_spec.SetField(rtchannel.FieldName, field.TypeString, value)
	}
	if rcu.mutation.NameCleared() {
		_spec.ClearField(rtchannel.FieldName, field.TypeString)
	}
	if value, ok := rcu.mutation.Description(); ok {
		_spec.SetField(rtchannel.FieldDescription, field.TypeString, value)
	}
	if rcu.mutation.DescriptionCleared() {
		_spec.ClearField(rtchannel.FieldDescription, field.TypeString)
	}
	if value, ok := rcu.mutation.GetType(); ok {
		_spec.SetField(rtchannel.FieldType, field.TypeString, value)
	}
	if rcu.mutation.TypeCleared() {
		_spec.ClearField(rtchannel.FieldType, field.TypeString)
	}
	if value, ok := rcu.mutation.Status(); ok {
		_spec.SetField(rtchannel.FieldStatus, field.TypeInt, value)
	}
	if value, ok := rcu.mutation.AddedStatus(); ok {
		_spec.AddField(rtchannel.FieldStatus, field.TypeInt, value)
	}
	if value, ok := rcu.mutation.Extras(); ok {
		_spec.SetField(rtchannel.FieldExtras, field.TypeJSON, value)
	}
	if rcu.mutation.ExtrasCleared() {
		_spec.ClearField(rtchannel.FieldExtras, field.TypeJSON)
	}
	if rcu.mutation.CreatedAtCleared() {
		_spec.ClearField(rtchannel.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := rcu.mutation.UpdatedAt(); ok {
		_spec.SetField(rtchannel.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := rcu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(rtchannel.FieldUpdatedAt, field.TypeInt64, value)
	}
	if rcu.mutation.UpdatedAtCleared() {
		_spec.ClearField(rtchannel.FieldUpdatedAt, field.TypeInt64)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rtchannel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rcu.mutation.done = true
	return n, nil
}

// RTChannelUpdateOne is the builder for updating a single RTChannel entity.
type RTChannelUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RTChannelMutation
}

// SetName sets the "name" field.
func (rcuo *RTChannelUpdateOne) SetName(s string) *RTChannelUpdateOne {
	rcuo.mutation.SetName(s)
	return rcuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (rcuo *RTChannelUpdateOne) SetNillableName(s *string) *RTChannelUpdateOne {
	if s != nil {
		rcuo.SetName(*s)
	}
	return rcuo
}

// ClearName clears the value of the "name" field.
func (rcuo *RTChannelUpdateOne) ClearName() *RTChannelUpdateOne {
	rcuo.mutation.ClearName()
	return rcuo
}

// SetDescription sets the "description" field.
func (rcuo *RTChannelUpdateOne) SetDescription(s string) *RTChannelUpdateOne {
	rcuo.mutation.SetDescription(s)
	return rcuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (rcuo *RTChannelUpdateOne) SetNillableDescription(s *string) *RTChannelUpdateOne {
	if s != nil {
		rcuo.SetDescription(*s)
	}
	return rcuo
}

// ClearDescription clears the value of the "description" field.
func (rcuo *RTChannelUpdateOne) ClearDescription() *RTChannelUpdateOne {
	rcuo.mutation.ClearDescription()
	return rcuo
}

// SetType sets the "type" field.
func (rcuo *RTChannelUpdateOne) SetType(s string) *RTChannelUpdateOne {
	rcuo.mutation.SetType(s)
	return rcuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (rcuo *RTChannelUpdateOne) SetNillableType(s *string) *RTChannelUpdateOne {
	if s != nil {
		rcuo.SetType(*s)
	}
	return rcuo
}

// ClearType clears the value of the "type" field.
func (rcuo *RTChannelUpdateOne) ClearType() *RTChannelUpdateOne {
	rcuo.mutation.ClearType()
	return rcuo
}

// SetStatus sets the "status" field.
func (rcuo *RTChannelUpdateOne) SetStatus(i int) *RTChannelUpdateOne {
	rcuo.mutation.ResetStatus()
	rcuo.mutation.SetStatus(i)
	return rcuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (rcuo *RTChannelUpdateOne) SetNillableStatus(i *int) *RTChannelUpdateOne {
	if i != nil {
		rcuo.SetStatus(*i)
	}
	return rcuo
}

// AddStatus adds i to the "status" field.
func (rcuo *RTChannelUpdateOne) AddStatus(i int) *RTChannelUpdateOne {
	rcuo.mutation.AddStatus(i)
	return rcuo
}

// SetExtras sets the "extras" field.
func (rcuo *RTChannelUpdateOne) SetExtras(m map[string]interface{}) *RTChannelUpdateOne {
	rcuo.mutation.SetExtras(m)
	return rcuo
}

// ClearExtras clears the value of the "extras" field.
func (rcuo *RTChannelUpdateOne) ClearExtras() *RTChannelUpdateOne {
	rcuo.mutation.ClearExtras()
	return rcuo
}

// SetUpdatedAt sets the "updated_at" field.
func (rcuo *RTChannelUpdateOne) SetUpdatedAt(i int64) *RTChannelUpdateOne {
	rcuo.mutation.ResetUpdatedAt()
	rcuo.mutation.SetUpdatedAt(i)
	return rcuo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (rcuo *RTChannelUpdateOne) AddUpdatedAt(i int64) *RTChannelUpdateOne {
	rcuo.mutation.AddUpdatedAt(i)
	return rcuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (rcuo *RTChannelUpdateOne) ClearUpdatedAt() *RTChannelUpdateOne {
	rcuo.mutation.ClearUpdatedAt()
	return rcuo
}

// Mutation returns the RTChannelMutation object of the builder.
func (rcuo *RTChannelUpdateOne) Mutation() *RTChannelMutation {
	return rcuo.mutation
}

// Where appends a list predicates to the RTChannelUpdate builder.
func (rcuo *RTChannelUpdateOne) Where(ps ...predicate.RTChannel) *RTChannelUpdateOne {
	rcuo.mutation.Where(ps...)
	return rcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rcuo *RTChannelUpdateOne) Select(field string, fields ...string) *RTChannelUpdateOne {
	rcuo.fields = append([]string{field}, fields...)
	return rcuo
}

// Save executes the query and returns the updated RTChannel entity.
func (rcuo *RTChannelUpdateOne) Save(ctx context.Context) (*RTChannel, error) {
	rcuo.defaults()
	return withHooks(ctx, rcuo.sqlSave, rcuo.mutation, rcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rcuo *RTChannelUpdateOne) SaveX(ctx context.Context) *RTChannel {
	node, err := rcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rcuo *RTChannelUpdateOne) Exec(ctx context.Context) error {
	_, err := rcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcuo *RTChannelUpdateOne) ExecX(ctx context.Context) {
	if err := rcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rcuo *RTChannelUpdateOne) defaults() {
	if _, ok := rcuo.mutation.UpdatedAt(); !ok && !rcuo.mutation.UpdatedAtCleared() {
		v := rtchannel.UpdateDefaultUpdatedAt()
		rcuo.mutation.SetUpdatedAt(v)
	}
}

func (rcuo *RTChannelUpdateOne) sqlSave(ctx context.Context) (_node *RTChannel, err error) {
	_spec := sqlgraph.NewUpdateSpec(rtchannel.Table, rtchannel.Columns, sqlgraph.NewFieldSpec(rtchannel.FieldID, field.TypeString))
	id, ok := rcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "RTChannel.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, rtchannel.FieldID)
		for _, f := range fields {
			if !rtchannel.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != rtchannel.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rcuo.mutation.Name(); ok {
		_spec.SetField(rtchannel.FieldName, field.TypeString, value)
	}
	if rcuo.mutation.NameCleared() {
		_spec.ClearField(rtchannel.FieldName, field.TypeString)
	}
	if value, ok := rcuo.mutation.Description(); ok {
		_spec.SetField(rtchannel.FieldDescription, field.TypeString, value)
	}
	if rcuo.mutation.DescriptionCleared() {
		_spec.ClearField(rtchannel.FieldDescription, field.TypeString)
	}
	if value, ok := rcuo.mutation.GetType(); ok {
		_spec.SetField(rtchannel.FieldType, field.TypeString, value)
	}
	if rcuo.mutation.TypeCleared() {
		_spec.ClearField(rtchannel.FieldType, field.TypeString)
	}
	if value, ok := rcuo.mutation.Status(); ok {
		_spec.SetField(rtchannel.FieldStatus, field.TypeInt, value)
	}
	if value, ok := rcuo.mutation.AddedStatus(); ok {
		_spec.AddField(rtchannel.FieldStatus, field.TypeInt, value)
	}
	if value, ok := rcuo.mutation.Extras(); ok {
		_spec.SetField(rtchannel.FieldExtras, field.TypeJSON, value)
	}
	if rcuo.mutation.ExtrasCleared() {
		_spec.ClearField(rtchannel.FieldExtras, field.TypeJSON)
	}
	if rcuo.mutation.CreatedAtCleared() {
		_spec.ClearField(rtchannel.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := rcuo.mutation.UpdatedAt(); ok {
		_spec.SetField(rtchannel.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := rcuo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(rtchannel.FieldUpdatedAt, field.TypeInt64, value)
	}
	if rcuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(rtchannel.FieldUpdatedAt, field.TypeInt64)
	}
	_node = &RTChannel{config: rcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rtchannel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rcuo.mutation.done = true
	return _node, nil
}
