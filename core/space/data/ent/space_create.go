// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/space/data/ent/space"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SpaceCreate is the builder for creating a Space entity.
type SpaceCreate struct {
	config
	mutation *SpaceMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (sc *SpaceCreate) SetName(s string) *SpaceCreate {
	sc.mutation.SetName(s)
	return sc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (sc *SpaceCreate) SetNillableName(s *string) *SpaceCreate {
	if s != nil {
		sc.SetName(*s)
	}
	return sc
}

// SetSlug sets the "slug" field.
func (sc *SpaceCreate) SetSlug(s string) *SpaceCreate {
	sc.mutation.SetSlug(s)
	return sc
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (sc *SpaceCreate) SetNillableSlug(s *string) *SpaceCreate {
	if s != nil {
		sc.SetSlug(*s)
	}
	return sc
}

// SetType sets the "type" field.
func (sc *SpaceCreate) SetType(s string) *SpaceCreate {
	sc.mutation.SetType(s)
	return sc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (sc *SpaceCreate) SetNillableType(s *string) *SpaceCreate {
	if s != nil {
		sc.SetType(*s)
	}
	return sc
}

// SetTitle sets the "title" field.
func (sc *SpaceCreate) SetTitle(s string) *SpaceCreate {
	sc.mutation.SetTitle(s)
	return sc
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (sc *SpaceCreate) SetNillableTitle(s *string) *SpaceCreate {
	if s != nil {
		sc.SetTitle(*s)
	}
	return sc
}

// SetURL sets the "url" field.
func (sc *SpaceCreate) SetURL(s string) *SpaceCreate {
	sc.mutation.SetURL(s)
	return sc
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (sc *SpaceCreate) SetNillableURL(s *string) *SpaceCreate {
	if s != nil {
		sc.SetURL(*s)
	}
	return sc
}

// SetLogo sets the "logo" field.
func (sc *SpaceCreate) SetLogo(s string) *SpaceCreate {
	sc.mutation.SetLogo(s)
	return sc
}

// SetNillableLogo sets the "logo" field if the given value is not nil.
func (sc *SpaceCreate) SetNillableLogo(s *string) *SpaceCreate {
	if s != nil {
		sc.SetLogo(*s)
	}
	return sc
}

// SetLogoAlt sets the "logo_alt" field.
func (sc *SpaceCreate) SetLogoAlt(s string) *SpaceCreate {
	sc.mutation.SetLogoAlt(s)
	return sc
}

// SetNillableLogoAlt sets the "logo_alt" field if the given value is not nil.
func (sc *SpaceCreate) SetNillableLogoAlt(s *string) *SpaceCreate {
	if s != nil {
		sc.SetLogoAlt(*s)
	}
	return sc
}

// SetKeywords sets the "keywords" field.
func (sc *SpaceCreate) SetKeywords(s string) *SpaceCreate {
	sc.mutation.SetKeywords(s)
	return sc
}

// SetNillableKeywords sets the "keywords" field if the given value is not nil.
func (sc *SpaceCreate) SetNillableKeywords(s *string) *SpaceCreate {
	if s != nil {
		sc.SetKeywords(*s)
	}
	return sc
}

// SetCopyright sets the "copyright" field.
func (sc *SpaceCreate) SetCopyright(s string) *SpaceCreate {
	sc.mutation.SetCopyright(s)
	return sc
}

// SetNillableCopyright sets the "copyright" field if the given value is not nil.
func (sc *SpaceCreate) SetNillableCopyright(s *string) *SpaceCreate {
	if s != nil {
		sc.SetCopyright(*s)
	}
	return sc
}

// SetDescription sets the "description" field.
func (sc *SpaceCreate) SetDescription(s string) *SpaceCreate {
	sc.mutation.SetDescription(s)
	return sc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (sc *SpaceCreate) SetNillableDescription(s *string) *SpaceCreate {
	if s != nil {
		sc.SetDescription(*s)
	}
	return sc
}

// SetOrder sets the "order" field.
func (sc *SpaceCreate) SetOrder(i int) *SpaceCreate {
	sc.mutation.SetOrder(i)
	return sc
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (sc *SpaceCreate) SetNillableOrder(i *int) *SpaceCreate {
	if i != nil {
		sc.SetOrder(*i)
	}
	return sc
}

// SetDisabled sets the "disabled" field.
func (sc *SpaceCreate) SetDisabled(b bool) *SpaceCreate {
	sc.mutation.SetDisabled(b)
	return sc
}

// SetNillableDisabled sets the "disabled" field if the given value is not nil.
func (sc *SpaceCreate) SetNillableDisabled(b *bool) *SpaceCreate {
	if b != nil {
		sc.SetDisabled(*b)
	}
	return sc
}

// SetExtras sets the "extras" field.
func (sc *SpaceCreate) SetExtras(m map[string]interface{}) *SpaceCreate {
	sc.mutation.SetExtras(m)
	return sc
}

// SetCreatedBy sets the "created_by" field.
func (sc *SpaceCreate) SetCreatedBy(s string) *SpaceCreate {
	sc.mutation.SetCreatedBy(s)
	return sc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (sc *SpaceCreate) SetNillableCreatedBy(s *string) *SpaceCreate {
	if s != nil {
		sc.SetCreatedBy(*s)
	}
	return sc
}

// SetUpdatedBy sets the "updated_by" field.
func (sc *SpaceCreate) SetUpdatedBy(s string) *SpaceCreate {
	sc.mutation.SetUpdatedBy(s)
	return sc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (sc *SpaceCreate) SetNillableUpdatedBy(s *string) *SpaceCreate {
	if s != nil {
		sc.SetUpdatedBy(*s)
	}
	return sc
}

// SetExpiredAt sets the "expired_at" field.
func (sc *SpaceCreate) SetExpiredAt(i int64) *SpaceCreate {
	sc.mutation.SetExpiredAt(i)
	return sc
}

// SetNillableExpiredAt sets the "expired_at" field if the given value is not nil.
func (sc *SpaceCreate) SetNillableExpiredAt(i *int64) *SpaceCreate {
	if i != nil {
		sc.SetExpiredAt(*i)
	}
	return sc
}

// SetCreatedAt sets the "created_at" field.
func (sc *SpaceCreate) SetCreatedAt(i int64) *SpaceCreate {
	sc.mutation.SetCreatedAt(i)
	return sc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sc *SpaceCreate) SetNillableCreatedAt(i *int64) *SpaceCreate {
	if i != nil {
		sc.SetCreatedAt(*i)
	}
	return sc
}

// SetUpdatedAt sets the "updated_at" field.
func (sc *SpaceCreate) SetUpdatedAt(i int64) *SpaceCreate {
	sc.mutation.SetUpdatedAt(i)
	return sc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sc *SpaceCreate) SetNillableUpdatedAt(i *int64) *SpaceCreate {
	if i != nil {
		sc.SetUpdatedAt(*i)
	}
	return sc
}

// SetID sets the "id" field.
func (sc *SpaceCreate) SetID(s string) *SpaceCreate {
	sc.mutation.SetID(s)
	return sc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (sc *SpaceCreate) SetNillableID(s *string) *SpaceCreate {
	if s != nil {
		sc.SetID(*s)
	}
	return sc
}

// Mutation returns the SpaceMutation object of the builder.
func (sc *SpaceCreate) Mutation() *SpaceMutation {
	return sc.mutation
}

// Save creates the Space in the database.
func (sc *SpaceCreate) Save(ctx context.Context) (*Space, error) {
	sc.defaults()
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SpaceCreate) SaveX(ctx context.Context) *Space {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SpaceCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SpaceCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *SpaceCreate) defaults() {
	if _, ok := sc.mutation.Order(); !ok {
		v := space.DefaultOrder
		sc.mutation.SetOrder(v)
	}
	if _, ok := sc.mutation.Disabled(); !ok {
		v := space.DefaultDisabled
		sc.mutation.SetDisabled(v)
	}
	if _, ok := sc.mutation.Extras(); !ok {
		v := space.DefaultExtras
		sc.mutation.SetExtras(v)
	}
	if _, ok := sc.mutation.CreatedAt(); !ok {
		v := space.DefaultCreatedAt()
		sc.mutation.SetCreatedAt(v)
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		v := space.DefaultUpdatedAt()
		sc.mutation.SetUpdatedAt(v)
	}
	if _, ok := sc.mutation.ID(); !ok {
		v := space.DefaultID()
		sc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *SpaceCreate) check() error {
	if _, ok := sc.mutation.Order(); !ok {
		return &ValidationError{Name: "order", err: errors.New(`ent: missing required field "Space.order"`)}
	}
	if v, ok := sc.mutation.ID(); ok {
		if err := space.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Space.id": %w`, err)}
		}
	}
	return nil
}

func (sc *SpaceCreate) sqlSave(ctx context.Context) (*Space, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Space.ID type: %T", _spec.ID.Value)
		}
	}
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *SpaceCreate) createSpec() (*Space, *sqlgraph.CreateSpec) {
	var (
		_node = &Space{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(space.Table, sqlgraph.NewFieldSpec(space.FieldID, field.TypeString))
	)
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sc.mutation.Name(); ok {
		_spec.SetField(space.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := sc.mutation.Slug(); ok {
		_spec.SetField(space.FieldSlug, field.TypeString, value)
		_node.Slug = value
	}
	if value, ok := sc.mutation.GetType(); ok {
		_spec.SetField(space.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := sc.mutation.Title(); ok {
		_spec.SetField(space.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := sc.mutation.URL(); ok {
		_spec.SetField(space.FieldURL, field.TypeString, value)
		_node.URL = value
	}
	if value, ok := sc.mutation.Logo(); ok {
		_spec.SetField(space.FieldLogo, field.TypeString, value)
		_node.Logo = value
	}
	if value, ok := sc.mutation.LogoAlt(); ok {
		_spec.SetField(space.FieldLogoAlt, field.TypeString, value)
		_node.LogoAlt = value
	}
	if value, ok := sc.mutation.Keywords(); ok {
		_spec.SetField(space.FieldKeywords, field.TypeString, value)
		_node.Keywords = value
	}
	if value, ok := sc.mutation.Copyright(); ok {
		_spec.SetField(space.FieldCopyright, field.TypeString, value)
		_node.Copyright = value
	}
	if value, ok := sc.mutation.Description(); ok {
		_spec.SetField(space.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := sc.mutation.Order(); ok {
		_spec.SetField(space.FieldOrder, field.TypeInt, value)
		_node.Order = value
	}
	if value, ok := sc.mutation.Disabled(); ok {
		_spec.SetField(space.FieldDisabled, field.TypeBool, value)
		_node.Disabled = value
	}
	if value, ok := sc.mutation.Extras(); ok {
		_spec.SetField(space.FieldExtras, field.TypeJSON, value)
		_node.Extras = value
	}
	if value, ok := sc.mutation.CreatedBy(); ok {
		_spec.SetField(space.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := sc.mutation.UpdatedBy(); ok {
		_spec.SetField(space.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := sc.mutation.ExpiredAt(); ok {
		_spec.SetField(space.FieldExpiredAt, field.TypeInt64, value)
		_node.ExpiredAt = value
	}
	if value, ok := sc.mutation.CreatedAt(); ok {
		_spec.SetField(space.FieldCreatedAt, field.TypeInt64, value)
		_node.CreatedAt = value
	}
	if value, ok := sc.mutation.UpdatedAt(); ok {
		_spec.SetField(space.FieldUpdatedAt, field.TypeInt64, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// SpaceCreateBulk is the builder for creating many Space entities in bulk.
type SpaceCreateBulk struct {
	config
	err      error
	builders []*SpaceCreate
}

// Save creates the Space entities in the database.
func (scb *SpaceCreateBulk) Save(ctx context.Context) ([]*Space, error) {
	if scb.err != nil {
		return nil, scb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Space, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SpaceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SpaceCreateBulk) SaveX(ctx context.Context) []*Space {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SpaceCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SpaceCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
