// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/space/data/ent/predicate"
	"ncobase/space/data/ent/space"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SpaceUpdate is the builder for updating Space entities.
type SpaceUpdate struct {
	config
	hooks    []Hook
	mutation *SpaceMutation
}

// Where appends a list predicates to the SpaceUpdate builder.
func (su *SpaceUpdate) Where(ps ...predicate.Space) *SpaceUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetName sets the "name" field.
func (su *SpaceUpdate) SetName(s string) *SpaceUpdate {
	su.mutation.SetName(s)
	return su
}

// SetNillableName sets the "name" field if the given value is not nil.
func (su *SpaceUpdate) SetNillableName(s *string) *SpaceUpdate {
	if s != nil {
		su.SetName(*s)
	}
	return su
}

// ClearName clears the value of the "name" field.
func (su *SpaceUpdate) ClearName() *SpaceUpdate {
	su.mutation.ClearName()
	return su
}

// SetSlug sets the "slug" field.
func (su *SpaceUpdate) SetSlug(s string) *SpaceUpdate {
	su.mutation.SetSlug(s)
	return su
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (su *SpaceUpdate) SetNillableSlug(s *string) *SpaceUpdate {
	if s != nil {
		su.SetSlug(*s)
	}
	return su
}

// ClearSlug clears the value of the "slug" field.
func (su *SpaceUpdate) ClearSlug() *SpaceUpdate {
	su.mutation.ClearSlug()
	return su
}

// SetType sets the "type" field.
func (su *SpaceUpdate) SetType(s string) *SpaceUpdate {
	su.mutation.SetType(s)
	return su
}

// SetNillableType sets the "type" field if the given value is not nil.
func (su *SpaceUpdate) SetNillableType(s *string) *SpaceUpdate {
	if s != nil {
		su.SetType(*s)
	}
	return su
}

// ClearType clears the value of the "type" field.
func (su *SpaceUpdate) ClearType() *SpaceUpdate {
	su.mutation.ClearType()
	return su
}

// SetTitle sets the "title" field.
func (su *SpaceUpdate) SetTitle(s string) *SpaceUpdate {
	su.mutation.SetTitle(s)
	return su
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (su *SpaceUpdate) SetNillableTitle(s *string) *SpaceUpdate {
	if s != nil {
		su.SetTitle(*s)
	}
	return su
}

// ClearTitle clears the value of the "title" field.
func (su *SpaceUpdate) ClearTitle() *SpaceUpdate {
	su.mutation.ClearTitle()
	return su
}

// SetURL sets the "url" field.
func (su *SpaceUpdate) SetURL(s string) *SpaceUpdate {
	su.mutation.SetURL(s)
	return su
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (su *SpaceUpdate) SetNillableURL(s *string) *SpaceUpdate {
	if s != nil {
		su.SetURL(*s)
	}
	return su
}

// ClearURL clears the value of the "url" field.
func (su *SpaceUpdate) ClearURL() *SpaceUpdate {
	su.mutation.ClearURL()
	return su
}

// SetLogo sets the "logo" field.
func (su *SpaceUpdate) SetLogo(s string) *SpaceUpdate {
	su.mutation.SetLogo(s)
	return su
}

// SetNillableLogo sets the "logo" field if the given value is not nil.
func (su *SpaceUpdate) SetNillableLogo(s *string) *SpaceUpdate {
	if s != nil {
		su.SetLogo(*s)
	}
	return su
}

// ClearLogo clears the value of the "logo" field.
func (su *SpaceUpdate) ClearLogo() *SpaceUpdate {
	su.mutation.ClearLogo()
	return su
}

// SetLogoAlt sets the "logo_alt" field.
func (su *SpaceUpdate) SetLogoAlt(s string) *SpaceUpdate {
	su.mutation.SetLogoAlt(s)
	return su
}

// SetNillableLogoAlt sets the "logo_alt" field if the given value is not nil.
func (su *SpaceUpdate) SetNillableLogoAlt(s *string) *SpaceUpdate {
	if s != nil {
		su.SetLogoAlt(*s)
	}
	return su
}

// ClearLogoAlt clears the value of the "logo_alt" field.
func (su *SpaceUpdate) ClearLogoAlt() *SpaceUpdate {
	su.mutation.ClearLogoAlt()
	return su
}

// SetKeywords sets the "keywords" field.
func (su *SpaceUpdate) SetKeywords(s string) *SpaceUpdate {
	su.mutation.SetKeywords(s)
	return su
}

// SetNillableKeywords sets the "keywords" field if the given value is not nil.
func (su *SpaceUpdate) SetNillableKeywords(s *string) *SpaceUpdate {
	if s != nil {
		su.SetKeywords(*s)
	}
	return su
}

// ClearKeywords clears the value of the "keywords" field.
func (su *SpaceUpdate) ClearKeywords() *SpaceUpdate {
	su.mutation.ClearKeywords()
	return su
}

// SetCopyright sets the "copyright" field.
func (su *SpaceUpdate) SetCopyright(s string) *SpaceUpdate {
	su.mutation.SetCopyright(s)
	return su
}

// SetNillableCopyright sets the "copyright" field if the given value is not nil.
func (su *SpaceUpdate) SetNillableCopyright(s *string) *SpaceUpdate {
	if s != nil {
		su.SetCopyright(*s)
	}
	return su
}

// ClearCopyright clears the value of the "copyright" field.
func (su *SpaceUpdate) ClearCopyright() *SpaceUpdate {
	su.mutation.ClearCopyright()
	return su
}

// SetDescription sets the "description" field.
func (su *SpaceUpdate) SetDescription(s string) *SpaceUpdate {
	su.mutation.SetDescription(s)
	return su
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (su *SpaceUpdate) SetNillableDescription(s *string) *SpaceUpdate {
	if s != nil {
		su.SetDescription(*s)
	}
	return su
}

// ClearDescription clears the value of the "description" field.
func (su *SpaceUpdate) ClearDescription() *SpaceUpdate {
	su.mutation.ClearDescription()
	return su
}

// SetOrder sets the "order" field.
func (su *SpaceUpdate) SetOrder(i int) *SpaceUpdate {
	su.mutation.ResetOrder()
	su.mutation.SetOrder(i)
	return su
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (su *SpaceUpdate) SetNillableOrder(i *int) *SpaceUpdate {
	if i != nil {
		su.SetOrder(*i)
	}
	return su
}

// AddOrder adds i to the "order" field.
func (su *SpaceUpdate) AddOrder(i int) *SpaceUpdate {
	su.mutation.AddOrder(i)
	return su
}

// SetDisabled sets the "disabled" field.
func (su *SpaceUpdate) SetDisabled(b bool) *SpaceUpdate {
	su.mutation.SetDisabled(b)
	return su
}

// SetNillableDisabled sets the "disabled" field if the given value is not nil.
func (su *SpaceUpdate) SetNillableDisabled(b *bool) *SpaceUpdate {
	if b != nil {
		su.SetDisabled(*b)
	}
	return su
}

// ClearDisabled clears the value of the "disabled" field.
func (su *SpaceUpdate) ClearDisabled() *SpaceUpdate {
	su.mutation.ClearDisabled()
	return su
}

// SetExtras sets the "extras" field.
func (su *SpaceUpdate) SetExtras(m map[string]interface{}) *SpaceUpdate {
	su.mutation.SetExtras(m)
	return su
}

// ClearExtras clears the value of the "extras" field.
func (su *SpaceUpdate) ClearExtras() *SpaceUpdate {
	su.mutation.ClearExtras()
	return su
}

// SetCreatedBy sets the "created_by" field.
func (su *SpaceUpdate) SetCreatedBy(s string) *SpaceUpdate {
	su.mutation.SetCreatedBy(s)
	return su
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (su *SpaceUpdate) SetNillableCreatedBy(s *string) *SpaceUpdate {
	if s != nil {
		su.SetCreatedBy(*s)
	}
	return su
}

// ClearCreatedBy clears the value of the "created_by" field.
func (su *SpaceUpdate) ClearCreatedBy() *SpaceUpdate {
	su.mutation.ClearCreatedBy()
	return su
}

// SetUpdatedBy sets the "updated_by" field.
func (su *SpaceUpdate) SetUpdatedBy(s string) *SpaceUpdate {
	su.mutation.SetUpdatedBy(s)
	return su
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (su *SpaceUpdate) SetNillableUpdatedBy(s *string) *SpaceUpdate {
	if s != nil {
		su.SetUpdatedBy(*s)
	}
	return su
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (su *SpaceUpdate) ClearUpdatedBy() *SpaceUpdate {
	su.mutation.ClearUpdatedBy()
	return su
}

// SetExpiredAt sets the "expired_at" field.
func (su *SpaceUpdate) SetExpiredAt(i int64) *SpaceUpdate {
	su.mutation.ResetExpiredAt()
	su.mutation.SetExpiredAt(i)
	return su
}

// SetNillableExpiredAt sets the "expired_at" field if the given value is not nil.
func (su *SpaceUpdate) SetNillableExpiredAt(i *int64) *SpaceUpdate {
	if i != nil {
		su.SetExpiredAt(*i)
	}
	return su
}

// AddExpiredAt adds i to the "expired_at" field.
func (su *SpaceUpdate) AddExpiredAt(i int64) *SpaceUpdate {
	su.mutation.AddExpiredAt(i)
	return su
}

// ClearExpiredAt clears the value of the "expired_at" field.
func (su *SpaceUpdate) ClearExpiredAt() *SpaceUpdate {
	su.mutation.ClearExpiredAt()
	return su
}

// SetUpdatedAt sets the "updated_at" field.
func (su *SpaceUpdate) SetUpdatedAt(i int64) *SpaceUpdate {
	su.mutation.ResetUpdatedAt()
	su.mutation.SetUpdatedAt(i)
	return su
}

// AddUpdatedAt adds i to the "updated_at" field.
func (su *SpaceUpdate) AddUpdatedAt(i int64) *SpaceUpdate {
	su.mutation.AddUpdatedAt(i)
	return su
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (su *SpaceUpdate) ClearUpdatedAt() *SpaceUpdate {
	su.mutation.ClearUpdatedAt()
	return su
}

// Mutation returns the SpaceMutation object of the builder.
func (su *SpaceUpdate) Mutation() *SpaceMutation {
	return su.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SpaceUpdate) Save(ctx context.Context) (int, error) {
	su.defaults()
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SpaceUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SpaceUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SpaceUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *SpaceUpdate) defaults() {
	if _, ok := su.mutation.UpdatedAt(); !ok && !su.mutation.UpdatedAtCleared() {
		v := space.UpdateDefaultUpdatedAt()
		su.mutation.SetUpdatedAt(v)
	}
}

func (su *SpaceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(space.Table, space.Columns, sqlgraph.NewFieldSpec(space.FieldID, field.TypeString))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Name(); ok {
		_spec.SetField(space.FieldName, field.TypeString, value)
	}
	if su.mutation.NameCleared() {
		_spec.ClearField(space.FieldName, field.TypeString)
	}
	if value, ok := su.mutation.Slug(); ok {
		_spec.SetField(space.FieldSlug, field.TypeString, value)
	}
	if su.mutation.SlugCleared() {
		_spec.ClearField(space.FieldSlug, field.TypeString)
	}
	if value, ok := su.mutation.GetType(); ok {
		_spec.SetField(space.FieldType, field.TypeString, value)
	}
	if su.mutation.TypeCleared() {
		_spec.ClearField(space.FieldType, field.TypeString)
	}
	if value, ok := su.mutation.Title(); ok {
		_spec.SetField(space.FieldTitle, field.TypeString, value)
	}
	if su.mutation.TitleCleared() {
		_spec.ClearField(space.FieldTitle, field.TypeString)
	}
	if value, ok := su.mutation.URL(); ok {
		_spec.SetField(space.FieldURL, field.TypeString, value)
	}
	if su.mutation.URLCleared() {
		_spec.ClearField(space.FieldURL, field.TypeString)
	}
	if value, ok := su.mutation.Logo(); ok {
		_spec.SetField(space.FieldLogo, field.TypeString, value)
	}
	if su.mutation.LogoCleared() {
		_spec.ClearField(space.FieldLogo, field.TypeString)
	}
	if value, ok := su.mutation.LogoAlt(); ok {
		_spec.SetField(space.FieldLogoAlt, field.TypeString, value)
	}
	if su.mutation.LogoAltCleared() {
		_spec.ClearField(space.FieldLogoAlt, field.TypeString)
	}
	if value, ok := su.mutation.Keywords(); ok {
		_spec.SetField(space.FieldKeywords, field.TypeString, value)
	}
	if su.mutation.KeywordsCleared() {
		_spec.ClearField(space.FieldKeywords, field.TypeString)
	}
	if value, ok := su.mutation.Copyright(); ok {
		_spec.SetField(space.FieldCopyright, field.TypeString, value)
	}
	if su.mutation.CopyrightCleared() {
		_spec.ClearField(space.FieldCopyright, field.TypeString)
	}
	if value, ok := su.mutation.Description(); ok {
		_spec.SetField(space.FieldDescription, field.TypeString, value)
	}
	if su.mutation.DescriptionCleared() {
		_spec.ClearField(space.FieldDescription, field.TypeString)
	}
	if value, ok := su.mutation.Order(); ok {
		_spec.SetField(space.FieldOrder, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedOrder(); ok {
		_spec.AddField(space.FieldOrder, field.TypeInt, value)
	}
	if value, ok := su.mutation.Disabled(); ok {
		_spec.SetField(space.FieldDisabled, field.TypeBool, value)
	}
	if su.mutation.DisabledCleared() {
		_spec.ClearField(space.FieldDisabled, field.TypeBool)
	}
	if value, ok := su.mutation.Extras(); ok {
		_spec.SetField(space.FieldExtras, field.TypeJSON, value)
	}
	if su.mutation.ExtrasCleared() {
		_spec.ClearField(space.FieldExtras, field.TypeJSON)
	}
	if value, ok := su.mutation.CreatedBy(); ok {
		_spec.SetField(space.FieldCreatedBy, field.TypeString, value)
	}
	if su.mutation.CreatedByCleared() {
		_spec.ClearField(space.FieldCreatedBy, field.TypeString)
	}
	if value, ok := su.mutation.UpdatedBy(); ok {
		_spec.SetField(space.FieldUpdatedBy, field.TypeString, value)
	}
	if su.mutation.UpdatedByCleared() {
		_spec.ClearField(space.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := su.mutation.ExpiredAt(); ok {
		_spec.SetField(space.FieldExpiredAt, field.TypeInt64, value)
	}
	if value, ok := su.mutation.AddedExpiredAt(); ok {
		_spec.AddField(space.FieldExpiredAt, field.TypeInt64, value)
	}
	if su.mutation.ExpiredAtCleared() {
		_spec.ClearField(space.FieldExpiredAt, field.TypeInt64)
	}
	if su.mutation.CreatedAtCleared() {
		_spec.ClearField(space.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.SetField(space.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := su.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(space.FieldUpdatedAt, field.TypeInt64, value)
	}
	if su.mutation.UpdatedAtCleared() {
		_spec.ClearField(space.FieldUpdatedAt, field.TypeInt64)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{space.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SpaceUpdateOne is the builder for updating a single Space entity.
type SpaceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SpaceMutation
}

// SetName sets the "name" field.
func (suo *SpaceUpdateOne) SetName(s string) *SpaceUpdateOne {
	suo.mutation.SetName(s)
	return suo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (suo *SpaceUpdateOne) SetNillableName(s *string) *SpaceUpdateOne {
	if s != nil {
		suo.SetName(*s)
	}
	return suo
}

// ClearName clears the value of the "name" field.
func (suo *SpaceUpdateOne) ClearName() *SpaceUpdateOne {
	suo.mutation.ClearName()
	return suo
}

// SetSlug sets the "slug" field.
func (suo *SpaceUpdateOne) SetSlug(s string) *SpaceUpdateOne {
	suo.mutation.SetSlug(s)
	return suo
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (suo *SpaceUpdateOne) SetNillableSlug(s *string) *SpaceUpdateOne {
	if s != nil {
		suo.SetSlug(*s)
	}
	return suo
}

// ClearSlug clears the value of the "slug" field.
func (suo *SpaceUpdateOne) ClearSlug() *SpaceUpdateOne {
	suo.mutation.ClearSlug()
	return suo
}

// SetType sets the "type" field.
func (suo *SpaceUpdateOne) SetType(s string) *SpaceUpdateOne {
	suo.mutation.SetType(s)
	return suo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (suo *SpaceUpdateOne) SetNillableType(s *string) *SpaceUpdateOne {
	if s != nil {
		suo.SetType(*s)
	}
	return suo
}

// ClearType clears the value of the "type" field.
func (suo *SpaceUpdateOne) ClearType() *SpaceUpdateOne {
	suo.mutation.ClearType()
	return suo
}

// SetTitle sets the "title" field.
func (suo *SpaceUpdateOne) SetTitle(s string) *SpaceUpdateOne {
	suo.mutation.SetTitle(s)
	return suo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (suo *SpaceUpdateOne) SetNillableTitle(s *string) *SpaceUpdateOne {
	if s != nil {
		suo.SetTitle(*s)
	}
	return suo
}

// ClearTitle clears the value of the "title" field.
func (suo *SpaceUpdateOne) ClearTitle() *SpaceUpdateOne {
	suo.mutation.ClearTitle()
	return suo
}

// SetURL sets the "url" field.
func (suo *SpaceUpdateOne) SetURL(s string) *SpaceUpdateOne {
	suo.mutation.SetURL(s)
	return suo
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (suo *SpaceUpdateOne) SetNillableURL(s *string) *SpaceUpdateOne {
	if s != nil {
		suo.SetURL(*s)
	}
	return suo
}

// ClearURL clears the value of the "url" field.
func (suo *SpaceUpdateOne) ClearURL() *SpaceUpdateOne {
	suo.mutation.ClearURL()
	return suo
}

// SetLogo sets the "logo" field.
func (suo *SpaceUpdateOne) SetLogo(s string) *SpaceUpdateOne {
	suo.mutation.SetLogo(s)
	return suo
}

// SetNillableLogo sets the "logo" field if the given value is not nil.
func (suo *SpaceUpdateOne) SetNillableLogo(s *string) *SpaceUpdateOne {
	if s != nil {
		suo.SetLogo(*s)
	}
	return suo
}

// ClearLogo clears the value of the "logo" field.
func (suo *SpaceUpdateOne) ClearLogo() *SpaceUpdateOne {
	suo.mutation.ClearLogo()
	return suo
}

// SetLogoAlt sets the "logo_alt" field.
func (suo *SpaceUpdateOne) SetLogoAlt(s string) *SpaceUpdateOne {
	suo.mutation.SetLogoAlt(s)
	return suo
}

// SetNillableLogoAlt sets the "logo_alt" field if the given value is not nil.
func (suo *SpaceUpdateOne) SetNillableLogoAlt(s *string) *SpaceUpdateOne {
	if s != nil {
		suo.SetLogoAlt(*s)
	}
	return suo
}

// ClearLogoAlt clears the value of the "logo_alt" field.
func (suo *SpaceUpdateOne) ClearLogoAlt() *SpaceUpdateOne {
	suo.mutation.ClearLogoAlt()
	return suo
}

// SetKeywords sets the "keywords" field.
func (suo *SpaceUpdateOne) SetKeywords(s string) *SpaceUpdateOne {
	suo.mutation.SetKeywords(s)
	return suo
}

// SetNillableKeywords sets the "keywords" field if the given value is not nil.
func (suo *SpaceUpdateOne) SetNillableKeywords(s *string) *SpaceUpdateOne {
	if s != nil {
		suo.SetKeywords(*s)
	}
	return suo
}

// ClearKeywords clears the value of the "keywords" field.
func (suo *SpaceUpdateOne) ClearKeywords() *SpaceUpdateOne {
	suo.mutation.ClearKeywords()
	return suo
}

// SetCopyright sets the "copyright" field.
func (suo *SpaceUpdateOne) SetCopyright(s string) *SpaceUpdateOne {
	suo.mutation.SetCopyright(s)
	return suo
}

// SetNillableCopyright sets the "copyright" field if the given value is not nil.
func (suo *SpaceUpdateOne) SetNillableCopyright(s *string) *SpaceUpdateOne {
	if s != nil {
		suo.SetCopyright(*s)
	}
	return suo
}

// ClearCopyright clears the value of the "copyright" field.
func (suo *SpaceUpdateOne) ClearCopyright() *SpaceUpdateOne {
	suo.mutation.ClearCopyright()
	return suo
}

// SetDescription sets the "description" field.
func (suo *SpaceUpdateOne) SetDescription(s string) *SpaceUpdateOne {
	suo.mutation.SetDescription(s)
	return suo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (suo *SpaceUpdateOne) SetNillableDescription(s *string) *SpaceUpdateOne {
	if s != nil {
		suo.SetDescription(*s)
	}
	return suo
}

// ClearDescription clears the value of the "description" field.
func (suo *SpaceUpdateOne) ClearDescription() *SpaceUpdateOne {
	suo.mutation.ClearDescription()
	return suo
}

// SetOrder sets the "order" field.
func (suo *SpaceUpdateOne) SetOrder(i int) *SpaceUpdateOne {
	suo.mutation.ResetOrder()
	suo.mutation.SetOrder(i)
	return suo
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (suo *SpaceUpdateOne) SetNillableOrder(i *int) *SpaceUpdateOne {
	if i != nil {
		suo.SetOrder(*i)
	}
	return suo
}

// AddOrder adds i to the "order" field.
func (suo *SpaceUpdateOne) AddOrder(i int) *SpaceUpdateOne {
	suo.mutation.AddOrder(i)
	return suo
}

// SetDisabled sets the "disabled" field.
func (suo *SpaceUpdateOne) SetDisabled(b bool) *SpaceUpdateOne {
	suo.mutation.SetDisabled(b)
	return suo
}

// SetNillableDisabled sets the "disabled" field if the given value is not nil.
func (suo *SpaceUpdateOne) SetNillableDisabled(b *bool) *SpaceUpdateOne {
	if b != nil {
		suo.SetDisabled(*b)
	}
	return suo
}

// ClearDisabled clears the value of the "disabled" field.
func (suo *SpaceUpdateOne) ClearDisabled() *SpaceUpdateOne {
	suo.mutation.ClearDisabled()
	return suo
}

// SetExtras sets the "extras" field.
func (suo *SpaceUpdateOne) SetExtras(m map[string]interface{}) *SpaceUpdateOne {
	suo.mutation.SetExtras(m)
	return suo
}

// ClearExtras clears the value of the "extras" field.
func (suo *SpaceUpdateOne) ClearExtras() *SpaceUpdateOne {
	suo.mutation.ClearExtras()
	return suo
}

// SetCreatedBy sets the "created_by" field.
func (suo *SpaceUpdateOne) SetCreatedBy(s string) *SpaceUpdateOne {
	suo.mutation.SetCreatedBy(s)
	return suo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (suo *SpaceUpdateOne) SetNillableCreatedBy(s *string) *SpaceUpdateOne {
	if s != nil {
		suo.SetCreatedBy(*s)
	}
	return suo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (suo *SpaceUpdateOne) ClearCreatedBy() *SpaceUpdateOne {
	suo.mutation.ClearCreatedBy()
	return suo
}

// SetUpdatedBy sets the "updated_by" field.
func (suo *SpaceUpdateOne) SetUpdatedBy(s string) *SpaceUpdateOne {
	suo.mutation.SetUpdatedBy(s)
	return suo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (suo *SpaceUpdateOne) SetNillableUpdatedBy(s *string) *SpaceUpdateOne {
	if s != nil {
		suo.SetUpdatedBy(*s)
	}
	return suo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (suo *SpaceUpdateOne) ClearUpdatedBy() *SpaceUpdateOne {
	suo.mutation.ClearUpdatedBy()
	return suo
}

// SetExpiredAt sets the "expired_at" field.
func (suo *SpaceUpdateOne) SetExpiredAt(i int64) *SpaceUpdateOne {
	suo.mutation.ResetExpiredAt()
	suo.mutation.SetExpiredAt(i)
	return suo
}

// SetNillableExpiredAt sets the "expired_at" field if the given value is not nil.
func (suo *SpaceUpdateOne) SetNillableExpiredAt(i *int64) *SpaceUpdateOne {
	if i != nil {
		suo.SetExpiredAt(*i)
	}
	return suo
}

// AddExpiredAt adds i to the "expired_at" field.
func (suo *SpaceUpdateOne) AddExpiredAt(i int64) *SpaceUpdateOne {
	suo.mutation.AddExpiredAt(i)
	return suo
}

// ClearExpiredAt clears the value of the "expired_at" field.
func (suo *SpaceUpdateOne) ClearExpiredAt() *SpaceUpdateOne {
	suo.mutation.ClearExpiredAt()
	return suo
}

// SetUpdatedAt sets the "updated_at" field.
func (suo *SpaceUpdateOne) SetUpdatedAt(i int64) *SpaceUpdateOne {
	suo.mutation.ResetUpdatedAt()
	suo.mutation.SetUpdatedAt(i)
	return suo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (suo *SpaceUpdateOne) AddUpdatedAt(i int64) *SpaceUpdateOne {
	suo.mutation.AddUpdatedAt(i)
	return suo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (suo *SpaceUpdateOne) ClearUpdatedAt() *SpaceUpdateOne {
	suo.mutation.ClearUpdatedAt()
	return suo
}

// Mutation returns the SpaceMutation object of the builder.
func (suo *SpaceUpdateOne) Mutation() *SpaceMutation {
	return suo.mutation
}

// Where appends a list predicates to the SpaceUpdate builder.
func (suo *SpaceUpdateOne) Where(ps ...predicate.Space) *SpaceUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SpaceUpdateOne) Select(field string, fields ...string) *SpaceUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Space entity.
func (suo *SpaceUpdateOne) Save(ctx context.Context) (*Space, error) {
	suo.defaults()
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SpaceUpdateOne) SaveX(ctx context.Context) *Space {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SpaceUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SpaceUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *SpaceUpdateOne) defaults() {
	if _, ok := suo.mutation.UpdatedAt(); !ok && !suo.mutation.UpdatedAtCleared() {
		v := space.UpdateDefaultUpdatedAt()
		suo.mutation.SetUpdatedAt(v)
	}
}

func (suo *SpaceUpdateOne) sqlSave(ctx context.Context) (_node *Space, err error) {
	_spec := sqlgraph.NewUpdateSpec(space.Table, space.Columns, sqlgraph.NewFieldSpec(space.FieldID, field.TypeString))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Space.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, space.FieldID)
		for _, f := range fields {
			if !space.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != space.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Name(); ok {
		_spec.SetField(space.FieldName, field.TypeString, value)
	}
	if suo.mutation.NameCleared() {
		_spec.ClearField(space.FieldName, field.TypeString)
	}
	if value, ok := suo.mutation.Slug(); ok {
		_spec.SetField(space.FieldSlug, field.TypeString, value)
	}
	if suo.mutation.SlugCleared() {
		_spec.ClearField(space.FieldSlug, field.TypeString)
	}
	if value, ok := suo.mutation.GetType(); ok {
		_spec.SetField(space.FieldType, field.TypeString, value)
	}
	if suo.mutation.TypeCleared() {
		_spec.ClearField(space.FieldType, field.TypeString)
	}
	if value, ok := suo.mutation.Title(); ok {
		_spec.SetField(space.FieldTitle, field.TypeString, value)
	}
	if suo.mutation.TitleCleared() {
		_spec.ClearField(space.FieldTitle, field.TypeString)
	}
	if value, ok := suo.mutation.URL(); ok {
		_spec.SetField(space.FieldURL, field.TypeString, value)
	}
	if suo.mutation.URLCleared() {
		_spec.ClearField(space.FieldURL, field.TypeString)
	}
	if value, ok := suo.mutation.Logo(); ok {
		_spec.SetField(space.FieldLogo, field.TypeString, value)
	}
	if suo.mutation.LogoCleared() {
		_spec.ClearField(space.FieldLogo, field.TypeString)
	}
	if value, ok := suo.mutation.LogoAlt(); ok {
		_spec.SetField(space.FieldLogoAlt, field.TypeString, value)
	}
	if suo.mutation.LogoAltCleared() {
		_spec.ClearField(space.FieldLogoAlt, field.TypeString)
	}
	if value, ok := suo.mutation.Keywords(); ok {
		_spec.SetField(space.FieldKeywords, field.TypeString, value)
	}
	if suo.mutation.KeywordsCleared() {
		_spec.ClearField(space.FieldKeywords, field.TypeString)
	}
	if value, ok := suo.mutation.Copyright(); ok {
		_spec.SetField(space.FieldCopyright, field.TypeString, value)
	}
	if suo.mutation.CopyrightCleared() {
		_spec.ClearField(space.FieldCopyright, field.TypeString)
	}
	if value, ok := suo.mutation.Description(); ok {
		_spec.SetField(space.FieldDescription, field.TypeString, value)
	}
	if suo.mutation.DescriptionCleared() {
		_spec.ClearField(space.FieldDescription, field.TypeString)
	}
	if value, ok := suo.mutation.Order(); ok {
		_spec.SetField(space.FieldOrder, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedOrder(); ok {
		_spec.AddField(space.FieldOrder, field.TypeInt, value)
	}
	if value, ok := suo.mutation.Disabled(); ok {
		_spec.SetField(space.FieldDisabled, field.TypeBool, value)
	}
	if suo.mutation.DisabledCleared() {
		_spec.ClearField(space.FieldDisabled, field.TypeBool)
	}
	if value, ok := suo.mutation.Extras(); ok {
		_spec.SetField(space.FieldExtras, field.TypeJSON, value)
	}
	if suo.mutation.ExtrasCleared() {
		_spec.ClearField(space.FieldExtras, field.TypeJSON)
	}
	if value, ok := suo.mutation.CreatedBy(); ok {
		_spec.SetField(space.FieldCreatedBy, field.TypeString, value)
	}
	if suo.mutation.CreatedByCleared() {
		_spec.ClearField(space.FieldCreatedBy, field.TypeString)
	}
	if value, ok := suo.mutation.UpdatedBy(); ok {
		_spec.SetField(space.FieldUpdatedBy, field.TypeString, value)
	}
	if suo.mutation.UpdatedByCleared() {
		_spec.ClearField(space.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := suo.mutation.ExpiredAt(); ok {
		_spec.SetField(space.FieldExpiredAt, field.TypeInt64, value)
	}
	if value, ok := suo.mutation.AddedExpiredAt(); ok {
		_spec.AddField(space.FieldExpiredAt, field.TypeInt64, value)
	}
	if suo.mutation.ExpiredAtCleared() {
		_spec.ClearField(space.FieldExpiredAt, field.TypeInt64)
	}
	if suo.mutation.CreatedAtCleared() {
		_spec.ClearField(space.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.SetField(space.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := suo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(space.FieldUpdatedAt, field.TypeInt64, value)
	}
	if suo.mutation.UpdatedAtCleared() {
		_spec.ClearField(space.FieldUpdatedAt, field.TypeInt64)
	}
	_node = &Space{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{space.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
