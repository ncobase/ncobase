// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"ncobase/space/data/ent/spacebilling"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// SpaceBilling is the model entity for the SpaceBilling schema.
type SpaceBilling struct {
	config `json:"-"`
	// ID of the ent.
	// primary key
	ID string `json:"id,omitempty"`
	// space id, e.g. space id, organization id, store id
	SpaceID string `json:"space_id,omitempty"`
	// description
	Description string `json:"description,omitempty"`
	// Extend properties
	Extras map[string]interface{} `json:"extras,omitempty"`
	// id of the creator
	CreatedBy string `json:"created_by,omitempty"`
	// id of the last updater
	UpdatedBy string `json:"updated_by,omitempty"`
	// created at
	CreatedAt int64 `json:"created_at,omitempty"`
	// updated at
	UpdatedAt int64 `json:"updated_at,omitempty"`
	// Billing period type (monthly, yearly, one_time, usage_based)
	BillingPeriod string `json:"billing_period,omitempty"`
	// Start timestamp of billing period
	PeriodStart int64 `json:"period_start,omitempty"`
	// End timestamp of billing period
	PeriodEnd int64 `json:"period_end,omitempty"`
	// Billing amount
	Amount float64 `json:"amount,omitempty"`
	// Currency code (USD, EUR, etc.)
	Currency string `json:"currency,omitempty"`
	// Billing status (pending, paid, overdue, cancelled, refunded)
	Status string `json:"status,omitempty"`
	// Invoice or reference number
	InvoiceNumber string `json:"invoice_number,omitempty"`
	// Payment method used
	PaymentMethod string `json:"payment_method,omitempty"`
	// Payment timestamp
	PaidAt int64 `json:"paid_at,omitempty"`
	// Payment due date timestamp
	DueDate int64 `json:"due_date,omitempty"`
	// Detailed usage information for billing period
	UsageDetails map[string]interface{} `json:"usage_details,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SpaceBilling) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case spacebilling.FieldExtras, spacebilling.FieldUsageDetails:
			values[i] = new([]byte)
		case spacebilling.FieldAmount:
			values[i] = new(sql.NullFloat64)
		case spacebilling.FieldCreatedAt, spacebilling.FieldUpdatedAt, spacebilling.FieldPeriodStart, spacebilling.FieldPeriodEnd, spacebilling.FieldPaidAt, spacebilling.FieldDueDate:
			values[i] = new(sql.NullInt64)
		case spacebilling.FieldID, spacebilling.FieldSpaceID, spacebilling.FieldDescription, spacebilling.FieldCreatedBy, spacebilling.FieldUpdatedBy, spacebilling.FieldBillingPeriod, spacebilling.FieldCurrency, spacebilling.FieldStatus, spacebilling.FieldInvoiceNumber, spacebilling.FieldPaymentMethod:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SpaceBilling fields.
func (sb *SpaceBilling) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case spacebilling.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				sb.ID = value.String
			}
		case spacebilling.FieldSpaceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field space_id", values[i])
			} else if value.Valid {
				sb.SpaceID = value.String
			}
		case spacebilling.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				sb.Description = value.String
			}
		case spacebilling.FieldExtras:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field extras", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &sb.Extras); err != nil {
					return fmt.Errorf("unmarshal field extras: %w", err)
				}
			}
		case spacebilling.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				sb.CreatedBy = value.String
			}
		case spacebilling.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				sb.UpdatedBy = value.String
			}
		case spacebilling.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sb.CreatedAt = value.Int64
			}
		case spacebilling.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				sb.UpdatedAt = value.Int64
			}
		case spacebilling.FieldBillingPeriod:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field billing_period", values[i])
			} else if value.Valid {
				sb.BillingPeriod = value.String
			}
		case spacebilling.FieldPeriodStart:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field period_start", values[i])
			} else if value.Valid {
				sb.PeriodStart = value.Int64
			}
		case spacebilling.FieldPeriodEnd:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field period_end", values[i])
			} else if value.Valid {
				sb.PeriodEnd = value.Int64
			}
		case spacebilling.FieldAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value.Valid {
				sb.Amount = value.Float64
			}
		case spacebilling.FieldCurrency:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field currency", values[i])
			} else if value.Valid {
				sb.Currency = value.String
			}
		case spacebilling.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				sb.Status = value.String
			}
		case spacebilling.FieldInvoiceNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field invoice_number", values[i])
			} else if value.Valid {
				sb.InvoiceNumber = value.String
			}
		case spacebilling.FieldPaymentMethod:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field payment_method", values[i])
			} else if value.Valid {
				sb.PaymentMethod = value.String
			}
		case spacebilling.FieldPaidAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field paid_at", values[i])
			} else if value.Valid {
				sb.PaidAt = value.Int64
			}
		case spacebilling.FieldDueDate:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field due_date", values[i])
			} else if value.Valid {
				sb.DueDate = value.Int64
			}
		case spacebilling.FieldUsageDetails:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field usage_details", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &sb.UsageDetails); err != nil {
					return fmt.Errorf("unmarshal field usage_details: %w", err)
				}
			}
		default:
			sb.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SpaceBilling.
// This includes values selected through modifiers, order, etc.
func (sb *SpaceBilling) Value(name string) (ent.Value, error) {
	return sb.selectValues.Get(name)
}

// Update returns a builder for updating this SpaceBilling.
// Note that you need to call SpaceBilling.Unwrap() before calling this method if this SpaceBilling
// was returned from a transaction, and the transaction was committed or rolled back.
func (sb *SpaceBilling) Update() *SpaceBillingUpdateOne {
	return NewSpaceBillingClient(sb.config).UpdateOne(sb)
}

// Unwrap unwraps the SpaceBilling entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sb *SpaceBilling) Unwrap() *SpaceBilling {
	_tx, ok := sb.config.driver.(*txDriver)
	if !ok {
		panic("ent: SpaceBilling is not a transactional entity")
	}
	sb.config.driver = _tx.drv
	return sb
}

// String implements the fmt.Stringer.
func (sb *SpaceBilling) String() string {
	var builder strings.Builder
	builder.WriteString("SpaceBilling(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sb.ID))
	builder.WriteString("space_id=")
	builder.WriteString(sb.SpaceID)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(sb.Description)
	builder.WriteString(", ")
	builder.WriteString("extras=")
	builder.WriteString(fmt.Sprintf("%v", sb.Extras))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(sb.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(sb.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", sb.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", sb.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("billing_period=")
	builder.WriteString(sb.BillingPeriod)
	builder.WriteString(", ")
	builder.WriteString("period_start=")
	builder.WriteString(fmt.Sprintf("%v", sb.PeriodStart))
	builder.WriteString(", ")
	builder.WriteString("period_end=")
	builder.WriteString(fmt.Sprintf("%v", sb.PeriodEnd))
	builder.WriteString(", ")
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", sb.Amount))
	builder.WriteString(", ")
	builder.WriteString("currency=")
	builder.WriteString(sb.Currency)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(sb.Status)
	builder.WriteString(", ")
	builder.WriteString("invoice_number=")
	builder.WriteString(sb.InvoiceNumber)
	builder.WriteString(", ")
	builder.WriteString("payment_method=")
	builder.WriteString(sb.PaymentMethod)
	builder.WriteString(", ")
	builder.WriteString("paid_at=")
	builder.WriteString(fmt.Sprintf("%v", sb.PaidAt))
	builder.WriteString(", ")
	builder.WriteString("due_date=")
	builder.WriteString(fmt.Sprintf("%v", sb.DueDate))
	builder.WriteString(", ")
	builder.WriteString("usage_details=")
	builder.WriteString(fmt.Sprintf("%v", sb.UsageDetails))
	builder.WriteByte(')')
	return builder.String()
}

// SpaceBillings is a parsable slice of SpaceBilling.
type SpaceBillings []*SpaceBilling
