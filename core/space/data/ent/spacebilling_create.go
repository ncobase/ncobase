// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/space/data/ent/spacebilling"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SpaceBillingCreate is the builder for creating a SpaceBilling entity.
type SpaceBillingCreate struct {
	config
	mutation *SpaceBillingMutation
	hooks    []Hook
}

// SetSpaceID sets the "space_id" field.
func (sbc *SpaceBillingCreate) SetSpaceID(s string) *SpaceBillingCreate {
	sbc.mutation.SetSpaceID(s)
	return sbc
}

// SetNillableSpaceID sets the "space_id" field if the given value is not nil.
func (sbc *SpaceBillingCreate) SetNillableSpaceID(s *string) *SpaceBillingCreate {
	if s != nil {
		sbc.SetSpaceID(*s)
	}
	return sbc
}

// SetDescription sets the "description" field.
func (sbc *SpaceBillingCreate) SetDescription(s string) *SpaceBillingCreate {
	sbc.mutation.SetDescription(s)
	return sbc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (sbc *SpaceBillingCreate) SetNillableDescription(s *string) *SpaceBillingCreate {
	if s != nil {
		sbc.SetDescription(*s)
	}
	return sbc
}

// SetExtras sets the "extras" field.
func (sbc *SpaceBillingCreate) SetExtras(m map[string]interface{}) *SpaceBillingCreate {
	sbc.mutation.SetExtras(m)
	return sbc
}

// SetCreatedBy sets the "created_by" field.
func (sbc *SpaceBillingCreate) SetCreatedBy(s string) *SpaceBillingCreate {
	sbc.mutation.SetCreatedBy(s)
	return sbc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (sbc *SpaceBillingCreate) SetNillableCreatedBy(s *string) *SpaceBillingCreate {
	if s != nil {
		sbc.SetCreatedBy(*s)
	}
	return sbc
}

// SetUpdatedBy sets the "updated_by" field.
func (sbc *SpaceBillingCreate) SetUpdatedBy(s string) *SpaceBillingCreate {
	sbc.mutation.SetUpdatedBy(s)
	return sbc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (sbc *SpaceBillingCreate) SetNillableUpdatedBy(s *string) *SpaceBillingCreate {
	if s != nil {
		sbc.SetUpdatedBy(*s)
	}
	return sbc
}

// SetCreatedAt sets the "created_at" field.
func (sbc *SpaceBillingCreate) SetCreatedAt(i int64) *SpaceBillingCreate {
	sbc.mutation.SetCreatedAt(i)
	return sbc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sbc *SpaceBillingCreate) SetNillableCreatedAt(i *int64) *SpaceBillingCreate {
	if i != nil {
		sbc.SetCreatedAt(*i)
	}
	return sbc
}

// SetUpdatedAt sets the "updated_at" field.
func (sbc *SpaceBillingCreate) SetUpdatedAt(i int64) *SpaceBillingCreate {
	sbc.mutation.SetUpdatedAt(i)
	return sbc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sbc *SpaceBillingCreate) SetNillableUpdatedAt(i *int64) *SpaceBillingCreate {
	if i != nil {
		sbc.SetUpdatedAt(*i)
	}
	return sbc
}

// SetBillingPeriod sets the "billing_period" field.
func (sbc *SpaceBillingCreate) SetBillingPeriod(s string) *SpaceBillingCreate {
	sbc.mutation.SetBillingPeriod(s)
	return sbc
}

// SetNillableBillingPeriod sets the "billing_period" field if the given value is not nil.
func (sbc *SpaceBillingCreate) SetNillableBillingPeriod(s *string) *SpaceBillingCreate {
	if s != nil {
		sbc.SetBillingPeriod(*s)
	}
	return sbc
}

// SetPeriodStart sets the "period_start" field.
func (sbc *SpaceBillingCreate) SetPeriodStart(i int64) *SpaceBillingCreate {
	sbc.mutation.SetPeriodStart(i)
	return sbc
}

// SetNillablePeriodStart sets the "period_start" field if the given value is not nil.
func (sbc *SpaceBillingCreate) SetNillablePeriodStart(i *int64) *SpaceBillingCreate {
	if i != nil {
		sbc.SetPeriodStart(*i)
	}
	return sbc
}

// SetPeriodEnd sets the "period_end" field.
func (sbc *SpaceBillingCreate) SetPeriodEnd(i int64) *SpaceBillingCreate {
	sbc.mutation.SetPeriodEnd(i)
	return sbc
}

// SetNillablePeriodEnd sets the "period_end" field if the given value is not nil.
func (sbc *SpaceBillingCreate) SetNillablePeriodEnd(i *int64) *SpaceBillingCreate {
	if i != nil {
		sbc.SetPeriodEnd(*i)
	}
	return sbc
}

// SetAmount sets the "amount" field.
func (sbc *SpaceBillingCreate) SetAmount(f float64) *SpaceBillingCreate {
	sbc.mutation.SetAmount(f)
	return sbc
}

// SetCurrency sets the "currency" field.
func (sbc *SpaceBillingCreate) SetCurrency(s string) *SpaceBillingCreate {
	sbc.mutation.SetCurrency(s)
	return sbc
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (sbc *SpaceBillingCreate) SetNillableCurrency(s *string) *SpaceBillingCreate {
	if s != nil {
		sbc.SetCurrency(*s)
	}
	return sbc
}

// SetStatus sets the "status" field.
func (sbc *SpaceBillingCreate) SetStatus(s string) *SpaceBillingCreate {
	sbc.mutation.SetStatus(s)
	return sbc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (sbc *SpaceBillingCreate) SetNillableStatus(s *string) *SpaceBillingCreate {
	if s != nil {
		sbc.SetStatus(*s)
	}
	return sbc
}

// SetInvoiceNumber sets the "invoice_number" field.
func (sbc *SpaceBillingCreate) SetInvoiceNumber(s string) *SpaceBillingCreate {
	sbc.mutation.SetInvoiceNumber(s)
	return sbc
}

// SetNillableInvoiceNumber sets the "invoice_number" field if the given value is not nil.
func (sbc *SpaceBillingCreate) SetNillableInvoiceNumber(s *string) *SpaceBillingCreate {
	if s != nil {
		sbc.SetInvoiceNumber(*s)
	}
	return sbc
}

// SetPaymentMethod sets the "payment_method" field.
func (sbc *SpaceBillingCreate) SetPaymentMethod(s string) *SpaceBillingCreate {
	sbc.mutation.SetPaymentMethod(s)
	return sbc
}

// SetNillablePaymentMethod sets the "payment_method" field if the given value is not nil.
func (sbc *SpaceBillingCreate) SetNillablePaymentMethod(s *string) *SpaceBillingCreate {
	if s != nil {
		sbc.SetPaymentMethod(*s)
	}
	return sbc
}

// SetPaidAt sets the "paid_at" field.
func (sbc *SpaceBillingCreate) SetPaidAt(i int64) *SpaceBillingCreate {
	sbc.mutation.SetPaidAt(i)
	return sbc
}

// SetNillablePaidAt sets the "paid_at" field if the given value is not nil.
func (sbc *SpaceBillingCreate) SetNillablePaidAt(i *int64) *SpaceBillingCreate {
	if i != nil {
		sbc.SetPaidAt(*i)
	}
	return sbc
}

// SetDueDate sets the "due_date" field.
func (sbc *SpaceBillingCreate) SetDueDate(i int64) *SpaceBillingCreate {
	sbc.mutation.SetDueDate(i)
	return sbc
}

// SetNillableDueDate sets the "due_date" field if the given value is not nil.
func (sbc *SpaceBillingCreate) SetNillableDueDate(i *int64) *SpaceBillingCreate {
	if i != nil {
		sbc.SetDueDate(*i)
	}
	return sbc
}

// SetUsageDetails sets the "usage_details" field.
func (sbc *SpaceBillingCreate) SetUsageDetails(m map[string]interface{}) *SpaceBillingCreate {
	sbc.mutation.SetUsageDetails(m)
	return sbc
}

// SetID sets the "id" field.
func (sbc *SpaceBillingCreate) SetID(s string) *SpaceBillingCreate {
	sbc.mutation.SetID(s)
	return sbc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (sbc *SpaceBillingCreate) SetNillableID(s *string) *SpaceBillingCreate {
	if s != nil {
		sbc.SetID(*s)
	}
	return sbc
}

// Mutation returns the SpaceBillingMutation object of the builder.
func (sbc *SpaceBillingCreate) Mutation() *SpaceBillingMutation {
	return sbc.mutation
}

// Save creates the SpaceBilling in the database.
func (sbc *SpaceBillingCreate) Save(ctx context.Context) (*SpaceBilling, error) {
	sbc.defaults()
	return withHooks(ctx, sbc.sqlSave, sbc.mutation, sbc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sbc *SpaceBillingCreate) SaveX(ctx context.Context) *SpaceBilling {
	v, err := sbc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sbc *SpaceBillingCreate) Exec(ctx context.Context) error {
	_, err := sbc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sbc *SpaceBillingCreate) ExecX(ctx context.Context) {
	if err := sbc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sbc *SpaceBillingCreate) defaults() {
	if _, ok := sbc.mutation.Extras(); !ok {
		v := spacebilling.DefaultExtras
		sbc.mutation.SetExtras(v)
	}
	if _, ok := sbc.mutation.CreatedAt(); !ok {
		v := spacebilling.DefaultCreatedAt()
		sbc.mutation.SetCreatedAt(v)
	}
	if _, ok := sbc.mutation.UpdatedAt(); !ok {
		v := spacebilling.DefaultUpdatedAt()
		sbc.mutation.SetUpdatedAt(v)
	}
	if _, ok := sbc.mutation.BillingPeriod(); !ok {
		v := spacebilling.DefaultBillingPeriod
		sbc.mutation.SetBillingPeriod(v)
	}
	if _, ok := sbc.mutation.Currency(); !ok {
		v := spacebilling.DefaultCurrency
		sbc.mutation.SetCurrency(v)
	}
	if _, ok := sbc.mutation.Status(); !ok {
		v := spacebilling.DefaultStatus
		sbc.mutation.SetStatus(v)
	}
	if _, ok := sbc.mutation.ID(); !ok {
		v := spacebilling.DefaultID()
		sbc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sbc *SpaceBillingCreate) check() error {
	if _, ok := sbc.mutation.BillingPeriod(); !ok {
		return &ValidationError{Name: "billing_period", err: errors.New(`ent: missing required field "SpaceBilling.billing_period"`)}
	}
	if _, ok := sbc.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New(`ent: missing required field "SpaceBilling.amount"`)}
	}
	if v, ok := sbc.mutation.Amount(); ok {
		if err := spacebilling.AmountValidator(v); err != nil {
			return &ValidationError{Name: "amount", err: fmt.Errorf(`ent: validator failed for field "SpaceBilling.amount": %w`, err)}
		}
	}
	if _, ok := sbc.mutation.Currency(); !ok {
		return &ValidationError{Name: "currency", err: errors.New(`ent: missing required field "SpaceBilling.currency"`)}
	}
	if _, ok := sbc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "SpaceBilling.status"`)}
	}
	if v, ok := sbc.mutation.ID(); ok {
		if err := spacebilling.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "SpaceBilling.id": %w`, err)}
		}
	}
	return nil
}

func (sbc *SpaceBillingCreate) sqlSave(ctx context.Context) (*SpaceBilling, error) {
	if err := sbc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sbc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sbc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected SpaceBilling.ID type: %T", _spec.ID.Value)
		}
	}
	sbc.mutation.id = &_node.ID
	sbc.mutation.done = true
	return _node, nil
}

func (sbc *SpaceBillingCreate) createSpec() (*SpaceBilling, *sqlgraph.CreateSpec) {
	var (
		_node = &SpaceBilling{config: sbc.config}
		_spec = sqlgraph.NewCreateSpec(spacebilling.Table, sqlgraph.NewFieldSpec(spacebilling.FieldID, field.TypeString))
	)
	if id, ok := sbc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sbc.mutation.SpaceID(); ok {
		_spec.SetField(spacebilling.FieldSpaceID, field.TypeString, value)
		_node.SpaceID = value
	}
	if value, ok := sbc.mutation.Description(); ok {
		_spec.SetField(spacebilling.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := sbc.mutation.Extras(); ok {
		_spec.SetField(spacebilling.FieldExtras, field.TypeJSON, value)
		_node.Extras = value
	}
	if value, ok := sbc.mutation.CreatedBy(); ok {
		_spec.SetField(spacebilling.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := sbc.mutation.UpdatedBy(); ok {
		_spec.SetField(spacebilling.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := sbc.mutation.CreatedAt(); ok {
		_spec.SetField(spacebilling.FieldCreatedAt, field.TypeInt64, value)
		_node.CreatedAt = value
	}
	if value, ok := sbc.mutation.UpdatedAt(); ok {
		_spec.SetField(spacebilling.FieldUpdatedAt, field.TypeInt64, value)
		_node.UpdatedAt = value
	}
	if value, ok := sbc.mutation.BillingPeriod(); ok {
		_spec.SetField(spacebilling.FieldBillingPeriod, field.TypeString, value)
		_node.BillingPeriod = value
	}
	if value, ok := sbc.mutation.PeriodStart(); ok {
		_spec.SetField(spacebilling.FieldPeriodStart, field.TypeInt64, value)
		_node.PeriodStart = value
	}
	if value, ok := sbc.mutation.PeriodEnd(); ok {
		_spec.SetField(spacebilling.FieldPeriodEnd, field.TypeInt64, value)
		_node.PeriodEnd = value
	}
	if value, ok := sbc.mutation.Amount(); ok {
		_spec.SetField(spacebilling.FieldAmount, field.TypeFloat64, value)
		_node.Amount = value
	}
	if value, ok := sbc.mutation.Currency(); ok {
		_spec.SetField(spacebilling.FieldCurrency, field.TypeString, value)
		_node.Currency = value
	}
	if value, ok := sbc.mutation.Status(); ok {
		_spec.SetField(spacebilling.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := sbc.mutation.InvoiceNumber(); ok {
		_spec.SetField(spacebilling.FieldInvoiceNumber, field.TypeString, value)
		_node.InvoiceNumber = value
	}
	if value, ok := sbc.mutation.PaymentMethod(); ok {
		_spec.SetField(spacebilling.FieldPaymentMethod, field.TypeString, value)
		_node.PaymentMethod = value
	}
	if value, ok := sbc.mutation.PaidAt(); ok {
		_spec.SetField(spacebilling.FieldPaidAt, field.TypeInt64, value)
		_node.PaidAt = value
	}
	if value, ok := sbc.mutation.DueDate(); ok {
		_spec.SetField(spacebilling.FieldDueDate, field.TypeInt64, value)
		_node.DueDate = value
	}
	if value, ok := sbc.mutation.UsageDetails(); ok {
		_spec.SetField(spacebilling.FieldUsageDetails, field.TypeJSON, value)
		_node.UsageDetails = value
	}
	return _node, _spec
}

// SpaceBillingCreateBulk is the builder for creating many SpaceBilling entities in bulk.
type SpaceBillingCreateBulk struct {
	config
	err      error
	builders []*SpaceBillingCreate
}

// Save creates the SpaceBilling entities in the database.
func (sbcb *SpaceBillingCreateBulk) Save(ctx context.Context) ([]*SpaceBilling, error) {
	if sbcb.err != nil {
		return nil, sbcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sbcb.builders))
	nodes := make([]*SpaceBilling, len(sbcb.builders))
	mutators := make([]Mutator, len(sbcb.builders))
	for i := range sbcb.builders {
		func(i int, root context.Context) {
			builder := sbcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SpaceBillingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sbcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sbcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sbcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sbcb *SpaceBillingCreateBulk) SaveX(ctx context.Context) []*SpaceBilling {
	v, err := sbcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sbcb *SpaceBillingCreateBulk) Exec(ctx context.Context) error {
	_, err := sbcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sbcb *SpaceBillingCreateBulk) ExecX(ctx context.Context) {
	if err := sbcb.Exec(ctx); err != nil {
		panic(err)
	}
}
