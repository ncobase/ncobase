// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/space/data/ent/predicate"
	"ncobase/space/data/ent/spacebilling"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SpaceBillingUpdate is the builder for updating SpaceBilling entities.
type SpaceBillingUpdate struct {
	config
	hooks    []Hook
	mutation *SpaceBillingMutation
}

// Where appends a list predicates to the SpaceBillingUpdate builder.
func (sbu *SpaceBillingUpdate) Where(ps ...predicate.SpaceBilling) *SpaceBillingUpdate {
	sbu.mutation.Where(ps...)
	return sbu
}

// SetSpaceID sets the "space_id" field.
func (sbu *SpaceBillingUpdate) SetSpaceID(s string) *SpaceBillingUpdate {
	sbu.mutation.SetSpaceID(s)
	return sbu
}

// SetNillableSpaceID sets the "space_id" field if the given value is not nil.
func (sbu *SpaceBillingUpdate) SetNillableSpaceID(s *string) *SpaceBillingUpdate {
	if s != nil {
		sbu.SetSpaceID(*s)
	}
	return sbu
}

// ClearSpaceID clears the value of the "space_id" field.
func (sbu *SpaceBillingUpdate) ClearSpaceID() *SpaceBillingUpdate {
	sbu.mutation.ClearSpaceID()
	return sbu
}

// SetDescription sets the "description" field.
func (sbu *SpaceBillingUpdate) SetDescription(s string) *SpaceBillingUpdate {
	sbu.mutation.SetDescription(s)
	return sbu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (sbu *SpaceBillingUpdate) SetNillableDescription(s *string) *SpaceBillingUpdate {
	if s != nil {
		sbu.SetDescription(*s)
	}
	return sbu
}

// ClearDescription clears the value of the "description" field.
func (sbu *SpaceBillingUpdate) ClearDescription() *SpaceBillingUpdate {
	sbu.mutation.ClearDescription()
	return sbu
}

// SetExtras sets the "extras" field.
func (sbu *SpaceBillingUpdate) SetExtras(m map[string]interface{}) *SpaceBillingUpdate {
	sbu.mutation.SetExtras(m)
	return sbu
}

// ClearExtras clears the value of the "extras" field.
func (sbu *SpaceBillingUpdate) ClearExtras() *SpaceBillingUpdate {
	sbu.mutation.ClearExtras()
	return sbu
}

// SetCreatedBy sets the "created_by" field.
func (sbu *SpaceBillingUpdate) SetCreatedBy(s string) *SpaceBillingUpdate {
	sbu.mutation.SetCreatedBy(s)
	return sbu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (sbu *SpaceBillingUpdate) SetNillableCreatedBy(s *string) *SpaceBillingUpdate {
	if s != nil {
		sbu.SetCreatedBy(*s)
	}
	return sbu
}

// ClearCreatedBy clears the value of the "created_by" field.
func (sbu *SpaceBillingUpdate) ClearCreatedBy() *SpaceBillingUpdate {
	sbu.mutation.ClearCreatedBy()
	return sbu
}

// SetUpdatedBy sets the "updated_by" field.
func (sbu *SpaceBillingUpdate) SetUpdatedBy(s string) *SpaceBillingUpdate {
	sbu.mutation.SetUpdatedBy(s)
	return sbu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (sbu *SpaceBillingUpdate) SetNillableUpdatedBy(s *string) *SpaceBillingUpdate {
	if s != nil {
		sbu.SetUpdatedBy(*s)
	}
	return sbu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (sbu *SpaceBillingUpdate) ClearUpdatedBy() *SpaceBillingUpdate {
	sbu.mutation.ClearUpdatedBy()
	return sbu
}

// SetUpdatedAt sets the "updated_at" field.
func (sbu *SpaceBillingUpdate) SetUpdatedAt(i int64) *SpaceBillingUpdate {
	sbu.mutation.ResetUpdatedAt()
	sbu.mutation.SetUpdatedAt(i)
	return sbu
}

// AddUpdatedAt adds i to the "updated_at" field.
func (sbu *SpaceBillingUpdate) AddUpdatedAt(i int64) *SpaceBillingUpdate {
	sbu.mutation.AddUpdatedAt(i)
	return sbu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (sbu *SpaceBillingUpdate) ClearUpdatedAt() *SpaceBillingUpdate {
	sbu.mutation.ClearUpdatedAt()
	return sbu
}

// SetBillingPeriod sets the "billing_period" field.
func (sbu *SpaceBillingUpdate) SetBillingPeriod(s string) *SpaceBillingUpdate {
	sbu.mutation.SetBillingPeriod(s)
	return sbu
}

// SetNillableBillingPeriod sets the "billing_period" field if the given value is not nil.
func (sbu *SpaceBillingUpdate) SetNillableBillingPeriod(s *string) *SpaceBillingUpdate {
	if s != nil {
		sbu.SetBillingPeriod(*s)
	}
	return sbu
}

// SetPeriodStart sets the "period_start" field.
func (sbu *SpaceBillingUpdate) SetPeriodStart(i int64) *SpaceBillingUpdate {
	sbu.mutation.ResetPeriodStart()
	sbu.mutation.SetPeriodStart(i)
	return sbu
}

// SetNillablePeriodStart sets the "period_start" field if the given value is not nil.
func (sbu *SpaceBillingUpdate) SetNillablePeriodStart(i *int64) *SpaceBillingUpdate {
	if i != nil {
		sbu.SetPeriodStart(*i)
	}
	return sbu
}

// AddPeriodStart adds i to the "period_start" field.
func (sbu *SpaceBillingUpdate) AddPeriodStart(i int64) *SpaceBillingUpdate {
	sbu.mutation.AddPeriodStart(i)
	return sbu
}

// ClearPeriodStart clears the value of the "period_start" field.
func (sbu *SpaceBillingUpdate) ClearPeriodStart() *SpaceBillingUpdate {
	sbu.mutation.ClearPeriodStart()
	return sbu
}

// SetPeriodEnd sets the "period_end" field.
func (sbu *SpaceBillingUpdate) SetPeriodEnd(i int64) *SpaceBillingUpdate {
	sbu.mutation.ResetPeriodEnd()
	sbu.mutation.SetPeriodEnd(i)
	return sbu
}

// SetNillablePeriodEnd sets the "period_end" field if the given value is not nil.
func (sbu *SpaceBillingUpdate) SetNillablePeriodEnd(i *int64) *SpaceBillingUpdate {
	if i != nil {
		sbu.SetPeriodEnd(*i)
	}
	return sbu
}

// AddPeriodEnd adds i to the "period_end" field.
func (sbu *SpaceBillingUpdate) AddPeriodEnd(i int64) *SpaceBillingUpdate {
	sbu.mutation.AddPeriodEnd(i)
	return sbu
}

// ClearPeriodEnd clears the value of the "period_end" field.
func (sbu *SpaceBillingUpdate) ClearPeriodEnd() *SpaceBillingUpdate {
	sbu.mutation.ClearPeriodEnd()
	return sbu
}

// SetAmount sets the "amount" field.
func (sbu *SpaceBillingUpdate) SetAmount(f float64) *SpaceBillingUpdate {
	sbu.mutation.ResetAmount()
	sbu.mutation.SetAmount(f)
	return sbu
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (sbu *SpaceBillingUpdate) SetNillableAmount(f *float64) *SpaceBillingUpdate {
	if f != nil {
		sbu.SetAmount(*f)
	}
	return sbu
}

// AddAmount adds f to the "amount" field.
func (sbu *SpaceBillingUpdate) AddAmount(f float64) *SpaceBillingUpdate {
	sbu.mutation.AddAmount(f)
	return sbu
}

// SetCurrency sets the "currency" field.
func (sbu *SpaceBillingUpdate) SetCurrency(s string) *SpaceBillingUpdate {
	sbu.mutation.SetCurrency(s)
	return sbu
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (sbu *SpaceBillingUpdate) SetNillableCurrency(s *string) *SpaceBillingUpdate {
	if s != nil {
		sbu.SetCurrency(*s)
	}
	return sbu
}

// SetStatus sets the "status" field.
func (sbu *SpaceBillingUpdate) SetStatus(s string) *SpaceBillingUpdate {
	sbu.mutation.SetStatus(s)
	return sbu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (sbu *SpaceBillingUpdate) SetNillableStatus(s *string) *SpaceBillingUpdate {
	if s != nil {
		sbu.SetStatus(*s)
	}
	return sbu
}

// SetInvoiceNumber sets the "invoice_number" field.
func (sbu *SpaceBillingUpdate) SetInvoiceNumber(s string) *SpaceBillingUpdate {
	sbu.mutation.SetInvoiceNumber(s)
	return sbu
}

// SetNillableInvoiceNumber sets the "invoice_number" field if the given value is not nil.
func (sbu *SpaceBillingUpdate) SetNillableInvoiceNumber(s *string) *SpaceBillingUpdate {
	if s != nil {
		sbu.SetInvoiceNumber(*s)
	}
	return sbu
}

// ClearInvoiceNumber clears the value of the "invoice_number" field.
func (sbu *SpaceBillingUpdate) ClearInvoiceNumber() *SpaceBillingUpdate {
	sbu.mutation.ClearInvoiceNumber()
	return sbu
}

// SetPaymentMethod sets the "payment_method" field.
func (sbu *SpaceBillingUpdate) SetPaymentMethod(s string) *SpaceBillingUpdate {
	sbu.mutation.SetPaymentMethod(s)
	return sbu
}

// SetNillablePaymentMethod sets the "payment_method" field if the given value is not nil.
func (sbu *SpaceBillingUpdate) SetNillablePaymentMethod(s *string) *SpaceBillingUpdate {
	if s != nil {
		sbu.SetPaymentMethod(*s)
	}
	return sbu
}

// ClearPaymentMethod clears the value of the "payment_method" field.
func (sbu *SpaceBillingUpdate) ClearPaymentMethod() *SpaceBillingUpdate {
	sbu.mutation.ClearPaymentMethod()
	return sbu
}

// SetPaidAt sets the "paid_at" field.
func (sbu *SpaceBillingUpdate) SetPaidAt(i int64) *SpaceBillingUpdate {
	sbu.mutation.ResetPaidAt()
	sbu.mutation.SetPaidAt(i)
	return sbu
}

// SetNillablePaidAt sets the "paid_at" field if the given value is not nil.
func (sbu *SpaceBillingUpdate) SetNillablePaidAt(i *int64) *SpaceBillingUpdate {
	if i != nil {
		sbu.SetPaidAt(*i)
	}
	return sbu
}

// AddPaidAt adds i to the "paid_at" field.
func (sbu *SpaceBillingUpdate) AddPaidAt(i int64) *SpaceBillingUpdate {
	sbu.mutation.AddPaidAt(i)
	return sbu
}

// ClearPaidAt clears the value of the "paid_at" field.
func (sbu *SpaceBillingUpdate) ClearPaidAt() *SpaceBillingUpdate {
	sbu.mutation.ClearPaidAt()
	return sbu
}

// SetDueDate sets the "due_date" field.
func (sbu *SpaceBillingUpdate) SetDueDate(i int64) *SpaceBillingUpdate {
	sbu.mutation.ResetDueDate()
	sbu.mutation.SetDueDate(i)
	return sbu
}

// SetNillableDueDate sets the "due_date" field if the given value is not nil.
func (sbu *SpaceBillingUpdate) SetNillableDueDate(i *int64) *SpaceBillingUpdate {
	if i != nil {
		sbu.SetDueDate(*i)
	}
	return sbu
}

// AddDueDate adds i to the "due_date" field.
func (sbu *SpaceBillingUpdate) AddDueDate(i int64) *SpaceBillingUpdate {
	sbu.mutation.AddDueDate(i)
	return sbu
}

// ClearDueDate clears the value of the "due_date" field.
func (sbu *SpaceBillingUpdate) ClearDueDate() *SpaceBillingUpdate {
	sbu.mutation.ClearDueDate()
	return sbu
}

// SetUsageDetails sets the "usage_details" field.
func (sbu *SpaceBillingUpdate) SetUsageDetails(m map[string]interface{}) *SpaceBillingUpdate {
	sbu.mutation.SetUsageDetails(m)
	return sbu
}

// ClearUsageDetails clears the value of the "usage_details" field.
func (sbu *SpaceBillingUpdate) ClearUsageDetails() *SpaceBillingUpdate {
	sbu.mutation.ClearUsageDetails()
	return sbu
}

// Mutation returns the SpaceBillingMutation object of the builder.
func (sbu *SpaceBillingUpdate) Mutation() *SpaceBillingMutation {
	return sbu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sbu *SpaceBillingUpdate) Save(ctx context.Context) (int, error) {
	sbu.defaults()
	return withHooks(ctx, sbu.sqlSave, sbu.mutation, sbu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sbu *SpaceBillingUpdate) SaveX(ctx context.Context) int {
	affected, err := sbu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sbu *SpaceBillingUpdate) Exec(ctx context.Context) error {
	_, err := sbu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sbu *SpaceBillingUpdate) ExecX(ctx context.Context) {
	if err := sbu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sbu *SpaceBillingUpdate) defaults() {
	if _, ok := sbu.mutation.UpdatedAt(); !ok && !sbu.mutation.UpdatedAtCleared() {
		v := spacebilling.UpdateDefaultUpdatedAt()
		sbu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sbu *SpaceBillingUpdate) check() error {
	if v, ok := sbu.mutation.Amount(); ok {
		if err := spacebilling.AmountValidator(v); err != nil {
			return &ValidationError{Name: "amount", err: fmt.Errorf(`ent: validator failed for field "SpaceBilling.amount": %w`, err)}
		}
	}
	return nil
}

func (sbu *SpaceBillingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := sbu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(spacebilling.Table, spacebilling.Columns, sqlgraph.NewFieldSpec(spacebilling.FieldID, field.TypeString))
	if ps := sbu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sbu.mutation.SpaceID(); ok {
		_spec.SetField(spacebilling.FieldSpaceID, field.TypeString, value)
	}
	if sbu.mutation.SpaceIDCleared() {
		_spec.ClearField(spacebilling.FieldSpaceID, field.TypeString)
	}
	if value, ok := sbu.mutation.Description(); ok {
		_spec.SetField(spacebilling.FieldDescription, field.TypeString, value)
	}
	if sbu.mutation.DescriptionCleared() {
		_spec.ClearField(spacebilling.FieldDescription, field.TypeString)
	}
	if value, ok := sbu.mutation.Extras(); ok {
		_spec.SetField(spacebilling.FieldExtras, field.TypeJSON, value)
	}
	if sbu.mutation.ExtrasCleared() {
		_spec.ClearField(spacebilling.FieldExtras, field.TypeJSON)
	}
	if value, ok := sbu.mutation.CreatedBy(); ok {
		_spec.SetField(spacebilling.FieldCreatedBy, field.TypeString, value)
	}
	if sbu.mutation.CreatedByCleared() {
		_spec.ClearField(spacebilling.FieldCreatedBy, field.TypeString)
	}
	if value, ok := sbu.mutation.UpdatedBy(); ok {
		_spec.SetField(spacebilling.FieldUpdatedBy, field.TypeString, value)
	}
	if sbu.mutation.UpdatedByCleared() {
		_spec.ClearField(spacebilling.FieldUpdatedBy, field.TypeString)
	}
	if sbu.mutation.CreatedAtCleared() {
		_spec.ClearField(spacebilling.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := sbu.mutation.UpdatedAt(); ok {
		_spec.SetField(spacebilling.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := sbu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(spacebilling.FieldUpdatedAt, field.TypeInt64, value)
	}
	if sbu.mutation.UpdatedAtCleared() {
		_spec.ClearField(spacebilling.FieldUpdatedAt, field.TypeInt64)
	}
	if value, ok := sbu.mutation.BillingPeriod(); ok {
		_spec.SetField(spacebilling.FieldBillingPeriod, field.TypeString, value)
	}
	if value, ok := sbu.mutation.PeriodStart(); ok {
		_spec.SetField(spacebilling.FieldPeriodStart, field.TypeInt64, value)
	}
	if value, ok := sbu.mutation.AddedPeriodStart(); ok {
		_spec.AddField(spacebilling.FieldPeriodStart, field.TypeInt64, value)
	}
	if sbu.mutation.PeriodStartCleared() {
		_spec.ClearField(spacebilling.FieldPeriodStart, field.TypeInt64)
	}
	if value, ok := sbu.mutation.PeriodEnd(); ok {
		_spec.SetField(spacebilling.FieldPeriodEnd, field.TypeInt64, value)
	}
	if value, ok := sbu.mutation.AddedPeriodEnd(); ok {
		_spec.AddField(spacebilling.FieldPeriodEnd, field.TypeInt64, value)
	}
	if sbu.mutation.PeriodEndCleared() {
		_spec.ClearField(spacebilling.FieldPeriodEnd, field.TypeInt64)
	}
	if value, ok := sbu.mutation.Amount(); ok {
		_spec.SetField(spacebilling.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := sbu.mutation.AddedAmount(); ok {
		_spec.AddField(spacebilling.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := sbu.mutation.Currency(); ok {
		_spec.SetField(spacebilling.FieldCurrency, field.TypeString, value)
	}
	if value, ok := sbu.mutation.Status(); ok {
		_spec.SetField(spacebilling.FieldStatus, field.TypeString, value)
	}
	if value, ok := sbu.mutation.InvoiceNumber(); ok {
		_spec.SetField(spacebilling.FieldInvoiceNumber, field.TypeString, value)
	}
	if sbu.mutation.InvoiceNumberCleared() {
		_spec.ClearField(spacebilling.FieldInvoiceNumber, field.TypeString)
	}
	if value, ok := sbu.mutation.PaymentMethod(); ok {
		_spec.SetField(spacebilling.FieldPaymentMethod, field.TypeString, value)
	}
	if sbu.mutation.PaymentMethodCleared() {
		_spec.ClearField(spacebilling.FieldPaymentMethod, field.TypeString)
	}
	if value, ok := sbu.mutation.PaidAt(); ok {
		_spec.SetField(spacebilling.FieldPaidAt, field.TypeInt64, value)
	}
	if value, ok := sbu.mutation.AddedPaidAt(); ok {
		_spec.AddField(spacebilling.FieldPaidAt, field.TypeInt64, value)
	}
	if sbu.mutation.PaidAtCleared() {
		_spec.ClearField(spacebilling.FieldPaidAt, field.TypeInt64)
	}
	if value, ok := sbu.mutation.DueDate(); ok {
		_spec.SetField(spacebilling.FieldDueDate, field.TypeInt64, value)
	}
	if value, ok := sbu.mutation.AddedDueDate(); ok {
		_spec.AddField(spacebilling.FieldDueDate, field.TypeInt64, value)
	}
	if sbu.mutation.DueDateCleared() {
		_spec.ClearField(spacebilling.FieldDueDate, field.TypeInt64)
	}
	if value, ok := sbu.mutation.UsageDetails(); ok {
		_spec.SetField(spacebilling.FieldUsageDetails, field.TypeJSON, value)
	}
	if sbu.mutation.UsageDetailsCleared() {
		_spec.ClearField(spacebilling.FieldUsageDetails, field.TypeJSON)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sbu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{spacebilling.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sbu.mutation.done = true
	return n, nil
}

// SpaceBillingUpdateOne is the builder for updating a single SpaceBilling entity.
type SpaceBillingUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SpaceBillingMutation
}

// SetSpaceID sets the "space_id" field.
func (sbuo *SpaceBillingUpdateOne) SetSpaceID(s string) *SpaceBillingUpdateOne {
	sbuo.mutation.SetSpaceID(s)
	return sbuo
}

// SetNillableSpaceID sets the "space_id" field if the given value is not nil.
func (sbuo *SpaceBillingUpdateOne) SetNillableSpaceID(s *string) *SpaceBillingUpdateOne {
	if s != nil {
		sbuo.SetSpaceID(*s)
	}
	return sbuo
}

// ClearSpaceID clears the value of the "space_id" field.
func (sbuo *SpaceBillingUpdateOne) ClearSpaceID() *SpaceBillingUpdateOne {
	sbuo.mutation.ClearSpaceID()
	return sbuo
}

// SetDescription sets the "description" field.
func (sbuo *SpaceBillingUpdateOne) SetDescription(s string) *SpaceBillingUpdateOne {
	sbuo.mutation.SetDescription(s)
	return sbuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (sbuo *SpaceBillingUpdateOne) SetNillableDescription(s *string) *SpaceBillingUpdateOne {
	if s != nil {
		sbuo.SetDescription(*s)
	}
	return sbuo
}

// ClearDescription clears the value of the "description" field.
func (sbuo *SpaceBillingUpdateOne) ClearDescription() *SpaceBillingUpdateOne {
	sbuo.mutation.ClearDescription()
	return sbuo
}

// SetExtras sets the "extras" field.
func (sbuo *SpaceBillingUpdateOne) SetExtras(m map[string]interface{}) *SpaceBillingUpdateOne {
	sbuo.mutation.SetExtras(m)
	return sbuo
}

// ClearExtras clears the value of the "extras" field.
func (sbuo *SpaceBillingUpdateOne) ClearExtras() *SpaceBillingUpdateOne {
	sbuo.mutation.ClearExtras()
	return sbuo
}

// SetCreatedBy sets the "created_by" field.
func (sbuo *SpaceBillingUpdateOne) SetCreatedBy(s string) *SpaceBillingUpdateOne {
	sbuo.mutation.SetCreatedBy(s)
	return sbuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (sbuo *SpaceBillingUpdateOne) SetNillableCreatedBy(s *string) *SpaceBillingUpdateOne {
	if s != nil {
		sbuo.SetCreatedBy(*s)
	}
	return sbuo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (sbuo *SpaceBillingUpdateOne) ClearCreatedBy() *SpaceBillingUpdateOne {
	sbuo.mutation.ClearCreatedBy()
	return sbuo
}

// SetUpdatedBy sets the "updated_by" field.
func (sbuo *SpaceBillingUpdateOne) SetUpdatedBy(s string) *SpaceBillingUpdateOne {
	sbuo.mutation.SetUpdatedBy(s)
	return sbuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (sbuo *SpaceBillingUpdateOne) SetNillableUpdatedBy(s *string) *SpaceBillingUpdateOne {
	if s != nil {
		sbuo.SetUpdatedBy(*s)
	}
	return sbuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (sbuo *SpaceBillingUpdateOne) ClearUpdatedBy() *SpaceBillingUpdateOne {
	sbuo.mutation.ClearUpdatedBy()
	return sbuo
}

// SetUpdatedAt sets the "updated_at" field.
func (sbuo *SpaceBillingUpdateOne) SetUpdatedAt(i int64) *SpaceBillingUpdateOne {
	sbuo.mutation.ResetUpdatedAt()
	sbuo.mutation.SetUpdatedAt(i)
	return sbuo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (sbuo *SpaceBillingUpdateOne) AddUpdatedAt(i int64) *SpaceBillingUpdateOne {
	sbuo.mutation.AddUpdatedAt(i)
	return sbuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (sbuo *SpaceBillingUpdateOne) ClearUpdatedAt() *SpaceBillingUpdateOne {
	sbuo.mutation.ClearUpdatedAt()
	return sbuo
}

// SetBillingPeriod sets the "billing_period" field.
func (sbuo *SpaceBillingUpdateOne) SetBillingPeriod(s string) *SpaceBillingUpdateOne {
	sbuo.mutation.SetBillingPeriod(s)
	return sbuo
}

// SetNillableBillingPeriod sets the "billing_period" field if the given value is not nil.
func (sbuo *SpaceBillingUpdateOne) SetNillableBillingPeriod(s *string) *SpaceBillingUpdateOne {
	if s != nil {
		sbuo.SetBillingPeriod(*s)
	}
	return sbuo
}

// SetPeriodStart sets the "period_start" field.
func (sbuo *SpaceBillingUpdateOne) SetPeriodStart(i int64) *SpaceBillingUpdateOne {
	sbuo.mutation.ResetPeriodStart()
	sbuo.mutation.SetPeriodStart(i)
	return sbuo
}

// SetNillablePeriodStart sets the "period_start" field if the given value is not nil.
func (sbuo *SpaceBillingUpdateOne) SetNillablePeriodStart(i *int64) *SpaceBillingUpdateOne {
	if i != nil {
		sbuo.SetPeriodStart(*i)
	}
	return sbuo
}

// AddPeriodStart adds i to the "period_start" field.
func (sbuo *SpaceBillingUpdateOne) AddPeriodStart(i int64) *SpaceBillingUpdateOne {
	sbuo.mutation.AddPeriodStart(i)
	return sbuo
}

// ClearPeriodStart clears the value of the "period_start" field.
func (sbuo *SpaceBillingUpdateOne) ClearPeriodStart() *SpaceBillingUpdateOne {
	sbuo.mutation.ClearPeriodStart()
	return sbuo
}

// SetPeriodEnd sets the "period_end" field.
func (sbuo *SpaceBillingUpdateOne) SetPeriodEnd(i int64) *SpaceBillingUpdateOne {
	sbuo.mutation.ResetPeriodEnd()
	sbuo.mutation.SetPeriodEnd(i)
	return sbuo
}

// SetNillablePeriodEnd sets the "period_end" field if the given value is not nil.
func (sbuo *SpaceBillingUpdateOne) SetNillablePeriodEnd(i *int64) *SpaceBillingUpdateOne {
	if i != nil {
		sbuo.SetPeriodEnd(*i)
	}
	return sbuo
}

// AddPeriodEnd adds i to the "period_end" field.
func (sbuo *SpaceBillingUpdateOne) AddPeriodEnd(i int64) *SpaceBillingUpdateOne {
	sbuo.mutation.AddPeriodEnd(i)
	return sbuo
}

// ClearPeriodEnd clears the value of the "period_end" field.
func (sbuo *SpaceBillingUpdateOne) ClearPeriodEnd() *SpaceBillingUpdateOne {
	sbuo.mutation.ClearPeriodEnd()
	return sbuo
}

// SetAmount sets the "amount" field.
func (sbuo *SpaceBillingUpdateOne) SetAmount(f float64) *SpaceBillingUpdateOne {
	sbuo.mutation.ResetAmount()
	sbuo.mutation.SetAmount(f)
	return sbuo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (sbuo *SpaceBillingUpdateOne) SetNillableAmount(f *float64) *SpaceBillingUpdateOne {
	if f != nil {
		sbuo.SetAmount(*f)
	}
	return sbuo
}

// AddAmount adds f to the "amount" field.
func (sbuo *SpaceBillingUpdateOne) AddAmount(f float64) *SpaceBillingUpdateOne {
	sbuo.mutation.AddAmount(f)
	return sbuo
}

// SetCurrency sets the "currency" field.
func (sbuo *SpaceBillingUpdateOne) SetCurrency(s string) *SpaceBillingUpdateOne {
	sbuo.mutation.SetCurrency(s)
	return sbuo
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (sbuo *SpaceBillingUpdateOne) SetNillableCurrency(s *string) *SpaceBillingUpdateOne {
	if s != nil {
		sbuo.SetCurrency(*s)
	}
	return sbuo
}

// SetStatus sets the "status" field.
func (sbuo *SpaceBillingUpdateOne) SetStatus(s string) *SpaceBillingUpdateOne {
	sbuo.mutation.SetStatus(s)
	return sbuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (sbuo *SpaceBillingUpdateOne) SetNillableStatus(s *string) *SpaceBillingUpdateOne {
	if s != nil {
		sbuo.SetStatus(*s)
	}
	return sbuo
}

// SetInvoiceNumber sets the "invoice_number" field.
func (sbuo *SpaceBillingUpdateOne) SetInvoiceNumber(s string) *SpaceBillingUpdateOne {
	sbuo.mutation.SetInvoiceNumber(s)
	return sbuo
}

// SetNillableInvoiceNumber sets the "invoice_number" field if the given value is not nil.
func (sbuo *SpaceBillingUpdateOne) SetNillableInvoiceNumber(s *string) *SpaceBillingUpdateOne {
	if s != nil {
		sbuo.SetInvoiceNumber(*s)
	}
	return sbuo
}

// ClearInvoiceNumber clears the value of the "invoice_number" field.
func (sbuo *SpaceBillingUpdateOne) ClearInvoiceNumber() *SpaceBillingUpdateOne {
	sbuo.mutation.ClearInvoiceNumber()
	return sbuo
}

// SetPaymentMethod sets the "payment_method" field.
func (sbuo *SpaceBillingUpdateOne) SetPaymentMethod(s string) *SpaceBillingUpdateOne {
	sbuo.mutation.SetPaymentMethod(s)
	return sbuo
}

// SetNillablePaymentMethod sets the "payment_method" field if the given value is not nil.
func (sbuo *SpaceBillingUpdateOne) SetNillablePaymentMethod(s *string) *SpaceBillingUpdateOne {
	if s != nil {
		sbuo.SetPaymentMethod(*s)
	}
	return sbuo
}

// ClearPaymentMethod clears the value of the "payment_method" field.
func (sbuo *SpaceBillingUpdateOne) ClearPaymentMethod() *SpaceBillingUpdateOne {
	sbuo.mutation.ClearPaymentMethod()
	return sbuo
}

// SetPaidAt sets the "paid_at" field.
func (sbuo *SpaceBillingUpdateOne) SetPaidAt(i int64) *SpaceBillingUpdateOne {
	sbuo.mutation.ResetPaidAt()
	sbuo.mutation.SetPaidAt(i)
	return sbuo
}

// SetNillablePaidAt sets the "paid_at" field if the given value is not nil.
func (sbuo *SpaceBillingUpdateOne) SetNillablePaidAt(i *int64) *SpaceBillingUpdateOne {
	if i != nil {
		sbuo.SetPaidAt(*i)
	}
	return sbuo
}

// AddPaidAt adds i to the "paid_at" field.
func (sbuo *SpaceBillingUpdateOne) AddPaidAt(i int64) *SpaceBillingUpdateOne {
	sbuo.mutation.AddPaidAt(i)
	return sbuo
}

// ClearPaidAt clears the value of the "paid_at" field.
func (sbuo *SpaceBillingUpdateOne) ClearPaidAt() *SpaceBillingUpdateOne {
	sbuo.mutation.ClearPaidAt()
	return sbuo
}

// SetDueDate sets the "due_date" field.
func (sbuo *SpaceBillingUpdateOne) SetDueDate(i int64) *SpaceBillingUpdateOne {
	sbuo.mutation.ResetDueDate()
	sbuo.mutation.SetDueDate(i)
	return sbuo
}

// SetNillableDueDate sets the "due_date" field if the given value is not nil.
func (sbuo *SpaceBillingUpdateOne) SetNillableDueDate(i *int64) *SpaceBillingUpdateOne {
	if i != nil {
		sbuo.SetDueDate(*i)
	}
	return sbuo
}

// AddDueDate adds i to the "due_date" field.
func (sbuo *SpaceBillingUpdateOne) AddDueDate(i int64) *SpaceBillingUpdateOne {
	sbuo.mutation.AddDueDate(i)
	return sbuo
}

// ClearDueDate clears the value of the "due_date" field.
func (sbuo *SpaceBillingUpdateOne) ClearDueDate() *SpaceBillingUpdateOne {
	sbuo.mutation.ClearDueDate()
	return sbuo
}

// SetUsageDetails sets the "usage_details" field.
func (sbuo *SpaceBillingUpdateOne) SetUsageDetails(m map[string]interface{}) *SpaceBillingUpdateOne {
	sbuo.mutation.SetUsageDetails(m)
	return sbuo
}

// ClearUsageDetails clears the value of the "usage_details" field.
func (sbuo *SpaceBillingUpdateOne) ClearUsageDetails() *SpaceBillingUpdateOne {
	sbuo.mutation.ClearUsageDetails()
	return sbuo
}

// Mutation returns the SpaceBillingMutation object of the builder.
func (sbuo *SpaceBillingUpdateOne) Mutation() *SpaceBillingMutation {
	return sbuo.mutation
}

// Where appends a list predicates to the SpaceBillingUpdate builder.
func (sbuo *SpaceBillingUpdateOne) Where(ps ...predicate.SpaceBilling) *SpaceBillingUpdateOne {
	sbuo.mutation.Where(ps...)
	return sbuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sbuo *SpaceBillingUpdateOne) Select(field string, fields ...string) *SpaceBillingUpdateOne {
	sbuo.fields = append([]string{field}, fields...)
	return sbuo
}

// Save executes the query and returns the updated SpaceBilling entity.
func (sbuo *SpaceBillingUpdateOne) Save(ctx context.Context) (*SpaceBilling, error) {
	sbuo.defaults()
	return withHooks(ctx, sbuo.sqlSave, sbuo.mutation, sbuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sbuo *SpaceBillingUpdateOne) SaveX(ctx context.Context) *SpaceBilling {
	node, err := sbuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sbuo *SpaceBillingUpdateOne) Exec(ctx context.Context) error {
	_, err := sbuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sbuo *SpaceBillingUpdateOne) ExecX(ctx context.Context) {
	if err := sbuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sbuo *SpaceBillingUpdateOne) defaults() {
	if _, ok := sbuo.mutation.UpdatedAt(); !ok && !sbuo.mutation.UpdatedAtCleared() {
		v := spacebilling.UpdateDefaultUpdatedAt()
		sbuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sbuo *SpaceBillingUpdateOne) check() error {
	if v, ok := sbuo.mutation.Amount(); ok {
		if err := spacebilling.AmountValidator(v); err != nil {
			return &ValidationError{Name: "amount", err: fmt.Errorf(`ent: validator failed for field "SpaceBilling.amount": %w`, err)}
		}
	}
	return nil
}

func (sbuo *SpaceBillingUpdateOne) sqlSave(ctx context.Context) (_node *SpaceBilling, err error) {
	if err := sbuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(spacebilling.Table, spacebilling.Columns, sqlgraph.NewFieldSpec(spacebilling.FieldID, field.TypeString))
	id, ok := sbuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SpaceBilling.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sbuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, spacebilling.FieldID)
		for _, f := range fields {
			if !spacebilling.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != spacebilling.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sbuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sbuo.mutation.SpaceID(); ok {
		_spec.SetField(spacebilling.FieldSpaceID, field.TypeString, value)
	}
	if sbuo.mutation.SpaceIDCleared() {
		_spec.ClearField(spacebilling.FieldSpaceID, field.TypeString)
	}
	if value, ok := sbuo.mutation.Description(); ok {
		_spec.SetField(spacebilling.FieldDescription, field.TypeString, value)
	}
	if sbuo.mutation.DescriptionCleared() {
		_spec.ClearField(spacebilling.FieldDescription, field.TypeString)
	}
	if value, ok := sbuo.mutation.Extras(); ok {
		_spec.SetField(spacebilling.FieldExtras, field.TypeJSON, value)
	}
	if sbuo.mutation.ExtrasCleared() {
		_spec.ClearField(spacebilling.FieldExtras, field.TypeJSON)
	}
	if value, ok := sbuo.mutation.CreatedBy(); ok {
		_spec.SetField(spacebilling.FieldCreatedBy, field.TypeString, value)
	}
	if sbuo.mutation.CreatedByCleared() {
		_spec.ClearField(spacebilling.FieldCreatedBy, field.TypeString)
	}
	if value, ok := sbuo.mutation.UpdatedBy(); ok {
		_spec.SetField(spacebilling.FieldUpdatedBy, field.TypeString, value)
	}
	if sbuo.mutation.UpdatedByCleared() {
		_spec.ClearField(spacebilling.FieldUpdatedBy, field.TypeString)
	}
	if sbuo.mutation.CreatedAtCleared() {
		_spec.ClearField(spacebilling.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := sbuo.mutation.UpdatedAt(); ok {
		_spec.SetField(spacebilling.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := sbuo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(spacebilling.FieldUpdatedAt, field.TypeInt64, value)
	}
	if sbuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(spacebilling.FieldUpdatedAt, field.TypeInt64)
	}
	if value, ok := sbuo.mutation.BillingPeriod(); ok {
		_spec.SetField(spacebilling.FieldBillingPeriod, field.TypeString, value)
	}
	if value, ok := sbuo.mutation.PeriodStart(); ok {
		_spec.SetField(spacebilling.FieldPeriodStart, field.TypeInt64, value)
	}
	if value, ok := sbuo.mutation.AddedPeriodStart(); ok {
		_spec.AddField(spacebilling.FieldPeriodStart, field.TypeInt64, value)
	}
	if sbuo.mutation.PeriodStartCleared() {
		_spec.ClearField(spacebilling.FieldPeriodStart, field.TypeInt64)
	}
	if value, ok := sbuo.mutation.PeriodEnd(); ok {
		_spec.SetField(spacebilling.FieldPeriodEnd, field.TypeInt64, value)
	}
	if value, ok := sbuo.mutation.AddedPeriodEnd(); ok {
		_spec.AddField(spacebilling.FieldPeriodEnd, field.TypeInt64, value)
	}
	if sbuo.mutation.PeriodEndCleared() {
		_spec.ClearField(spacebilling.FieldPeriodEnd, field.TypeInt64)
	}
	if value, ok := sbuo.mutation.Amount(); ok {
		_spec.SetField(spacebilling.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := sbuo.mutation.AddedAmount(); ok {
		_spec.AddField(spacebilling.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := sbuo.mutation.Currency(); ok {
		_spec.SetField(spacebilling.FieldCurrency, field.TypeString, value)
	}
	if value, ok := sbuo.mutation.Status(); ok {
		_spec.SetField(spacebilling.FieldStatus, field.TypeString, value)
	}
	if value, ok := sbuo.mutation.InvoiceNumber(); ok {
		_spec.SetField(spacebilling.FieldInvoiceNumber, field.TypeString, value)
	}
	if sbuo.mutation.InvoiceNumberCleared() {
		_spec.ClearField(spacebilling.FieldInvoiceNumber, field.TypeString)
	}
	if value, ok := sbuo.mutation.PaymentMethod(); ok {
		_spec.SetField(spacebilling.FieldPaymentMethod, field.TypeString, value)
	}
	if sbuo.mutation.PaymentMethodCleared() {
		_spec.ClearField(spacebilling.FieldPaymentMethod, field.TypeString)
	}
	if value, ok := sbuo.mutation.PaidAt(); ok {
		_spec.SetField(spacebilling.FieldPaidAt, field.TypeInt64, value)
	}
	if value, ok := sbuo.mutation.AddedPaidAt(); ok {
		_spec.AddField(spacebilling.FieldPaidAt, field.TypeInt64, value)
	}
	if sbuo.mutation.PaidAtCleared() {
		_spec.ClearField(spacebilling.FieldPaidAt, field.TypeInt64)
	}
	if value, ok := sbuo.mutation.DueDate(); ok {
		_spec.SetField(spacebilling.FieldDueDate, field.TypeInt64, value)
	}
	if value, ok := sbuo.mutation.AddedDueDate(); ok {
		_spec.AddField(spacebilling.FieldDueDate, field.TypeInt64, value)
	}
	if sbuo.mutation.DueDateCleared() {
		_spec.ClearField(spacebilling.FieldDueDate, field.TypeInt64)
	}
	if value, ok := sbuo.mutation.UsageDetails(); ok {
		_spec.SetField(spacebilling.FieldUsageDetails, field.TypeJSON, value)
	}
	if sbuo.mutation.UsageDetailsCleared() {
		_spec.ClearField(spacebilling.FieldUsageDetails, field.TypeJSON)
	}
	_node = &SpaceBilling{config: sbuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sbuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{spacebilling.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sbuo.mutation.done = true
	return _node, nil
}
