// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"ncobase/space/data/ent/spacedictionary"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// SpaceDictionary is the model entity for the SpaceDictionary schema.
type SpaceDictionary struct {
	config `json:"-"`
	// ID of the ent.
	// primary key
	ID string `json:"id,omitempty"`
	// space id, e.g. space id, organization id, store id
	SpaceID string `json:"space_id,omitempty"`
	// dictionary id
	DictionaryID string `json:"dictionary_id,omitempty"`
	// id of the creator
	CreatedBy string `json:"created_by,omitempty"`
	// id of the last updater
	UpdatedBy string `json:"updated_by,omitempty"`
	// created at
	CreatedAt int64 `json:"created_at,omitempty"`
	// updated at
	UpdatedAt    int64 `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SpaceDictionary) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case spacedictionary.FieldCreatedAt, spacedictionary.FieldUpdatedAt:
			values[i] = new(sql.NullInt64)
		case spacedictionary.FieldID, spacedictionary.FieldSpaceID, spacedictionary.FieldDictionaryID, spacedictionary.FieldCreatedBy, spacedictionary.FieldUpdatedBy:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SpaceDictionary fields.
func (sd *SpaceDictionary) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case spacedictionary.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				sd.ID = value.String
			}
		case spacedictionary.FieldSpaceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field space_id", values[i])
			} else if value.Valid {
				sd.SpaceID = value.String
			}
		case spacedictionary.FieldDictionaryID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field dictionary_id", values[i])
			} else if value.Valid {
				sd.DictionaryID = value.String
			}
		case spacedictionary.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				sd.CreatedBy = value.String
			}
		case spacedictionary.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				sd.UpdatedBy = value.String
			}
		case spacedictionary.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sd.CreatedAt = value.Int64
			}
		case spacedictionary.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				sd.UpdatedAt = value.Int64
			}
		default:
			sd.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SpaceDictionary.
// This includes values selected through modifiers, order, etc.
func (sd *SpaceDictionary) Value(name string) (ent.Value, error) {
	return sd.selectValues.Get(name)
}

// Update returns a builder for updating this SpaceDictionary.
// Note that you need to call SpaceDictionary.Unwrap() before calling this method if this SpaceDictionary
// was returned from a transaction, and the transaction was committed or rolled back.
func (sd *SpaceDictionary) Update() *SpaceDictionaryUpdateOne {
	return NewSpaceDictionaryClient(sd.config).UpdateOne(sd)
}

// Unwrap unwraps the SpaceDictionary entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sd *SpaceDictionary) Unwrap() *SpaceDictionary {
	_tx, ok := sd.config.driver.(*txDriver)
	if !ok {
		panic("ent: SpaceDictionary is not a transactional entity")
	}
	sd.config.driver = _tx.drv
	return sd
}

// String implements the fmt.Stringer.
func (sd *SpaceDictionary) String() string {
	var builder strings.Builder
	builder.WriteString("SpaceDictionary(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sd.ID))
	builder.WriteString("space_id=")
	builder.WriteString(sd.SpaceID)
	builder.WriteString(", ")
	builder.WriteString("dictionary_id=")
	builder.WriteString(sd.DictionaryID)
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(sd.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(sd.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", sd.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", sd.UpdatedAt))
	builder.WriteByte(')')
	return builder.String()
}

// SpaceDictionaries is a parsable slice of SpaceDictionary.
type SpaceDictionaries []*SpaceDictionary
