// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/space/data/ent/predicate"
	"ncobase/space/data/ent/spacedictionary"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SpaceDictionaryUpdate is the builder for updating SpaceDictionary entities.
type SpaceDictionaryUpdate struct {
	config
	hooks    []Hook
	mutation *SpaceDictionaryMutation
}

// Where appends a list predicates to the SpaceDictionaryUpdate builder.
func (sdu *SpaceDictionaryUpdate) Where(ps ...predicate.SpaceDictionary) *SpaceDictionaryUpdate {
	sdu.mutation.Where(ps...)
	return sdu
}

// SetSpaceID sets the "space_id" field.
func (sdu *SpaceDictionaryUpdate) SetSpaceID(s string) *SpaceDictionaryUpdate {
	sdu.mutation.SetSpaceID(s)
	return sdu
}

// SetNillableSpaceID sets the "space_id" field if the given value is not nil.
func (sdu *SpaceDictionaryUpdate) SetNillableSpaceID(s *string) *SpaceDictionaryUpdate {
	if s != nil {
		sdu.SetSpaceID(*s)
	}
	return sdu
}

// ClearSpaceID clears the value of the "space_id" field.
func (sdu *SpaceDictionaryUpdate) ClearSpaceID() *SpaceDictionaryUpdate {
	sdu.mutation.ClearSpaceID()
	return sdu
}

// SetDictionaryID sets the "dictionary_id" field.
func (sdu *SpaceDictionaryUpdate) SetDictionaryID(s string) *SpaceDictionaryUpdate {
	sdu.mutation.SetDictionaryID(s)
	return sdu
}

// SetNillableDictionaryID sets the "dictionary_id" field if the given value is not nil.
func (sdu *SpaceDictionaryUpdate) SetNillableDictionaryID(s *string) *SpaceDictionaryUpdate {
	if s != nil {
		sdu.SetDictionaryID(*s)
	}
	return sdu
}

// ClearDictionaryID clears the value of the "dictionary_id" field.
func (sdu *SpaceDictionaryUpdate) ClearDictionaryID() *SpaceDictionaryUpdate {
	sdu.mutation.ClearDictionaryID()
	return sdu
}

// SetCreatedBy sets the "created_by" field.
func (sdu *SpaceDictionaryUpdate) SetCreatedBy(s string) *SpaceDictionaryUpdate {
	sdu.mutation.SetCreatedBy(s)
	return sdu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (sdu *SpaceDictionaryUpdate) SetNillableCreatedBy(s *string) *SpaceDictionaryUpdate {
	if s != nil {
		sdu.SetCreatedBy(*s)
	}
	return sdu
}

// ClearCreatedBy clears the value of the "created_by" field.
func (sdu *SpaceDictionaryUpdate) ClearCreatedBy() *SpaceDictionaryUpdate {
	sdu.mutation.ClearCreatedBy()
	return sdu
}

// SetUpdatedBy sets the "updated_by" field.
func (sdu *SpaceDictionaryUpdate) SetUpdatedBy(s string) *SpaceDictionaryUpdate {
	sdu.mutation.SetUpdatedBy(s)
	return sdu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (sdu *SpaceDictionaryUpdate) SetNillableUpdatedBy(s *string) *SpaceDictionaryUpdate {
	if s != nil {
		sdu.SetUpdatedBy(*s)
	}
	return sdu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (sdu *SpaceDictionaryUpdate) ClearUpdatedBy() *SpaceDictionaryUpdate {
	sdu.mutation.ClearUpdatedBy()
	return sdu
}

// SetUpdatedAt sets the "updated_at" field.
func (sdu *SpaceDictionaryUpdate) SetUpdatedAt(i int64) *SpaceDictionaryUpdate {
	sdu.mutation.ResetUpdatedAt()
	sdu.mutation.SetUpdatedAt(i)
	return sdu
}

// AddUpdatedAt adds i to the "updated_at" field.
func (sdu *SpaceDictionaryUpdate) AddUpdatedAt(i int64) *SpaceDictionaryUpdate {
	sdu.mutation.AddUpdatedAt(i)
	return sdu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (sdu *SpaceDictionaryUpdate) ClearUpdatedAt() *SpaceDictionaryUpdate {
	sdu.mutation.ClearUpdatedAt()
	return sdu
}

// Mutation returns the SpaceDictionaryMutation object of the builder.
func (sdu *SpaceDictionaryUpdate) Mutation() *SpaceDictionaryMutation {
	return sdu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sdu *SpaceDictionaryUpdate) Save(ctx context.Context) (int, error) {
	sdu.defaults()
	return withHooks(ctx, sdu.sqlSave, sdu.mutation, sdu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sdu *SpaceDictionaryUpdate) SaveX(ctx context.Context) int {
	affected, err := sdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sdu *SpaceDictionaryUpdate) Exec(ctx context.Context) error {
	_, err := sdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sdu *SpaceDictionaryUpdate) ExecX(ctx context.Context) {
	if err := sdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sdu *SpaceDictionaryUpdate) defaults() {
	if _, ok := sdu.mutation.UpdatedAt(); !ok && !sdu.mutation.UpdatedAtCleared() {
		v := spacedictionary.UpdateDefaultUpdatedAt()
		sdu.mutation.SetUpdatedAt(v)
	}
}

func (sdu *SpaceDictionaryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(spacedictionary.Table, spacedictionary.Columns, sqlgraph.NewFieldSpec(spacedictionary.FieldID, field.TypeString))
	if ps := sdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sdu.mutation.SpaceID(); ok {
		_spec.SetField(spacedictionary.FieldSpaceID, field.TypeString, value)
	}
	if sdu.mutation.SpaceIDCleared() {
		_spec.ClearField(spacedictionary.FieldSpaceID, field.TypeString)
	}
	if value, ok := sdu.mutation.DictionaryID(); ok {
		_spec.SetField(spacedictionary.FieldDictionaryID, field.TypeString, value)
	}
	if sdu.mutation.DictionaryIDCleared() {
		_spec.ClearField(spacedictionary.FieldDictionaryID, field.TypeString)
	}
	if value, ok := sdu.mutation.CreatedBy(); ok {
		_spec.SetField(spacedictionary.FieldCreatedBy, field.TypeString, value)
	}
	if sdu.mutation.CreatedByCleared() {
		_spec.ClearField(spacedictionary.FieldCreatedBy, field.TypeString)
	}
	if value, ok := sdu.mutation.UpdatedBy(); ok {
		_spec.SetField(spacedictionary.FieldUpdatedBy, field.TypeString, value)
	}
	if sdu.mutation.UpdatedByCleared() {
		_spec.ClearField(spacedictionary.FieldUpdatedBy, field.TypeString)
	}
	if sdu.mutation.CreatedAtCleared() {
		_spec.ClearField(spacedictionary.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := sdu.mutation.UpdatedAt(); ok {
		_spec.SetField(spacedictionary.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := sdu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(spacedictionary.FieldUpdatedAt, field.TypeInt64, value)
	}
	if sdu.mutation.UpdatedAtCleared() {
		_spec.ClearField(spacedictionary.FieldUpdatedAt, field.TypeInt64)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{spacedictionary.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sdu.mutation.done = true
	return n, nil
}

// SpaceDictionaryUpdateOne is the builder for updating a single SpaceDictionary entity.
type SpaceDictionaryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SpaceDictionaryMutation
}

// SetSpaceID sets the "space_id" field.
func (sduo *SpaceDictionaryUpdateOne) SetSpaceID(s string) *SpaceDictionaryUpdateOne {
	sduo.mutation.SetSpaceID(s)
	return sduo
}

// SetNillableSpaceID sets the "space_id" field if the given value is not nil.
func (sduo *SpaceDictionaryUpdateOne) SetNillableSpaceID(s *string) *SpaceDictionaryUpdateOne {
	if s != nil {
		sduo.SetSpaceID(*s)
	}
	return sduo
}

// ClearSpaceID clears the value of the "space_id" field.
func (sduo *SpaceDictionaryUpdateOne) ClearSpaceID() *SpaceDictionaryUpdateOne {
	sduo.mutation.ClearSpaceID()
	return sduo
}

// SetDictionaryID sets the "dictionary_id" field.
func (sduo *SpaceDictionaryUpdateOne) SetDictionaryID(s string) *SpaceDictionaryUpdateOne {
	sduo.mutation.SetDictionaryID(s)
	return sduo
}

// SetNillableDictionaryID sets the "dictionary_id" field if the given value is not nil.
func (sduo *SpaceDictionaryUpdateOne) SetNillableDictionaryID(s *string) *SpaceDictionaryUpdateOne {
	if s != nil {
		sduo.SetDictionaryID(*s)
	}
	return sduo
}

// ClearDictionaryID clears the value of the "dictionary_id" field.
func (sduo *SpaceDictionaryUpdateOne) ClearDictionaryID() *SpaceDictionaryUpdateOne {
	sduo.mutation.ClearDictionaryID()
	return sduo
}

// SetCreatedBy sets the "created_by" field.
func (sduo *SpaceDictionaryUpdateOne) SetCreatedBy(s string) *SpaceDictionaryUpdateOne {
	sduo.mutation.SetCreatedBy(s)
	return sduo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (sduo *SpaceDictionaryUpdateOne) SetNillableCreatedBy(s *string) *SpaceDictionaryUpdateOne {
	if s != nil {
		sduo.SetCreatedBy(*s)
	}
	return sduo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (sduo *SpaceDictionaryUpdateOne) ClearCreatedBy() *SpaceDictionaryUpdateOne {
	sduo.mutation.ClearCreatedBy()
	return sduo
}

// SetUpdatedBy sets the "updated_by" field.
func (sduo *SpaceDictionaryUpdateOne) SetUpdatedBy(s string) *SpaceDictionaryUpdateOne {
	sduo.mutation.SetUpdatedBy(s)
	return sduo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (sduo *SpaceDictionaryUpdateOne) SetNillableUpdatedBy(s *string) *SpaceDictionaryUpdateOne {
	if s != nil {
		sduo.SetUpdatedBy(*s)
	}
	return sduo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (sduo *SpaceDictionaryUpdateOne) ClearUpdatedBy() *SpaceDictionaryUpdateOne {
	sduo.mutation.ClearUpdatedBy()
	return sduo
}

// SetUpdatedAt sets the "updated_at" field.
func (sduo *SpaceDictionaryUpdateOne) SetUpdatedAt(i int64) *SpaceDictionaryUpdateOne {
	sduo.mutation.ResetUpdatedAt()
	sduo.mutation.SetUpdatedAt(i)
	return sduo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (sduo *SpaceDictionaryUpdateOne) AddUpdatedAt(i int64) *SpaceDictionaryUpdateOne {
	sduo.mutation.AddUpdatedAt(i)
	return sduo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (sduo *SpaceDictionaryUpdateOne) ClearUpdatedAt() *SpaceDictionaryUpdateOne {
	sduo.mutation.ClearUpdatedAt()
	return sduo
}

// Mutation returns the SpaceDictionaryMutation object of the builder.
func (sduo *SpaceDictionaryUpdateOne) Mutation() *SpaceDictionaryMutation {
	return sduo.mutation
}

// Where appends a list predicates to the SpaceDictionaryUpdate builder.
func (sduo *SpaceDictionaryUpdateOne) Where(ps ...predicate.SpaceDictionary) *SpaceDictionaryUpdateOne {
	sduo.mutation.Where(ps...)
	return sduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sduo *SpaceDictionaryUpdateOne) Select(field string, fields ...string) *SpaceDictionaryUpdateOne {
	sduo.fields = append([]string{field}, fields...)
	return sduo
}

// Save executes the query and returns the updated SpaceDictionary entity.
func (sduo *SpaceDictionaryUpdateOne) Save(ctx context.Context) (*SpaceDictionary, error) {
	sduo.defaults()
	return withHooks(ctx, sduo.sqlSave, sduo.mutation, sduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sduo *SpaceDictionaryUpdateOne) SaveX(ctx context.Context) *SpaceDictionary {
	node, err := sduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sduo *SpaceDictionaryUpdateOne) Exec(ctx context.Context) error {
	_, err := sduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sduo *SpaceDictionaryUpdateOne) ExecX(ctx context.Context) {
	if err := sduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sduo *SpaceDictionaryUpdateOne) defaults() {
	if _, ok := sduo.mutation.UpdatedAt(); !ok && !sduo.mutation.UpdatedAtCleared() {
		v := spacedictionary.UpdateDefaultUpdatedAt()
		sduo.mutation.SetUpdatedAt(v)
	}
}

func (sduo *SpaceDictionaryUpdateOne) sqlSave(ctx context.Context) (_node *SpaceDictionary, err error) {
	_spec := sqlgraph.NewUpdateSpec(spacedictionary.Table, spacedictionary.Columns, sqlgraph.NewFieldSpec(spacedictionary.FieldID, field.TypeString))
	id, ok := sduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SpaceDictionary.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, spacedictionary.FieldID)
		for _, f := range fields {
			if !spacedictionary.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != spacedictionary.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sduo.mutation.SpaceID(); ok {
		_spec.SetField(spacedictionary.FieldSpaceID, field.TypeString, value)
	}
	if sduo.mutation.SpaceIDCleared() {
		_spec.ClearField(spacedictionary.FieldSpaceID, field.TypeString)
	}
	if value, ok := sduo.mutation.DictionaryID(); ok {
		_spec.SetField(spacedictionary.FieldDictionaryID, field.TypeString, value)
	}
	if sduo.mutation.DictionaryIDCleared() {
		_spec.ClearField(spacedictionary.FieldDictionaryID, field.TypeString)
	}
	if value, ok := sduo.mutation.CreatedBy(); ok {
		_spec.SetField(spacedictionary.FieldCreatedBy, field.TypeString, value)
	}
	if sduo.mutation.CreatedByCleared() {
		_spec.ClearField(spacedictionary.FieldCreatedBy, field.TypeString)
	}
	if value, ok := sduo.mutation.UpdatedBy(); ok {
		_spec.SetField(spacedictionary.FieldUpdatedBy, field.TypeString, value)
	}
	if sduo.mutation.UpdatedByCleared() {
		_spec.ClearField(spacedictionary.FieldUpdatedBy, field.TypeString)
	}
	if sduo.mutation.CreatedAtCleared() {
		_spec.ClearField(spacedictionary.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := sduo.mutation.UpdatedAt(); ok {
		_spec.SetField(spacedictionary.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := sduo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(spacedictionary.FieldUpdatedAt, field.TypeInt64, value)
	}
	if sduo.mutation.UpdatedAtCleared() {
		_spec.ClearField(spacedictionary.FieldUpdatedAt, field.TypeInt64)
	}
	_node = &SpaceDictionary{config: sduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{spacedictionary.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sduo.mutation.done = true
	return _node, nil
}
