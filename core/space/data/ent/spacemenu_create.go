// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"ncobase/space/data/ent/spacemenu"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SpaceMenuCreate is the builder for creating a SpaceMenu entity.
type SpaceMenuCreate struct {
	config
	mutation *SpaceMenuMutation
	hooks    []Hook
}

// SetSpaceID sets the "space_id" field.
func (smc *SpaceMenuCreate) SetSpaceID(s string) *SpaceMenuCreate {
	smc.mutation.SetSpaceID(s)
	return smc
}

// SetNillableSpaceID sets the "space_id" field if the given value is not nil.
func (smc *SpaceMenuCreate) SetNillableSpaceID(s *string) *SpaceMenuCreate {
	if s != nil {
		smc.SetSpaceID(*s)
	}
	return smc
}

// SetMenuID sets the "menu_id" field.
func (smc *SpaceMenuCreate) SetMenuID(s string) *SpaceMenuCreate {
	smc.mutation.SetMenuID(s)
	return smc
}

// SetNillableMenuID sets the "menu_id" field if the given value is not nil.
func (smc *SpaceMenuCreate) SetNillableMenuID(s *string) *SpaceMenuCreate {
	if s != nil {
		smc.SetMenuID(*s)
	}
	return smc
}

// SetCreatedBy sets the "created_by" field.
func (smc *SpaceMenuCreate) SetCreatedBy(s string) *SpaceMenuCreate {
	smc.mutation.SetCreatedBy(s)
	return smc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (smc *SpaceMenuCreate) SetNillableCreatedBy(s *string) *SpaceMenuCreate {
	if s != nil {
		smc.SetCreatedBy(*s)
	}
	return smc
}

// SetUpdatedBy sets the "updated_by" field.
func (smc *SpaceMenuCreate) SetUpdatedBy(s string) *SpaceMenuCreate {
	smc.mutation.SetUpdatedBy(s)
	return smc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (smc *SpaceMenuCreate) SetNillableUpdatedBy(s *string) *SpaceMenuCreate {
	if s != nil {
		smc.SetUpdatedBy(*s)
	}
	return smc
}

// SetCreatedAt sets the "created_at" field.
func (smc *SpaceMenuCreate) SetCreatedAt(i int64) *SpaceMenuCreate {
	smc.mutation.SetCreatedAt(i)
	return smc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (smc *SpaceMenuCreate) SetNillableCreatedAt(i *int64) *SpaceMenuCreate {
	if i != nil {
		smc.SetCreatedAt(*i)
	}
	return smc
}

// SetUpdatedAt sets the "updated_at" field.
func (smc *SpaceMenuCreate) SetUpdatedAt(i int64) *SpaceMenuCreate {
	smc.mutation.SetUpdatedAt(i)
	return smc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (smc *SpaceMenuCreate) SetNillableUpdatedAt(i *int64) *SpaceMenuCreate {
	if i != nil {
		smc.SetUpdatedAt(*i)
	}
	return smc
}

// SetID sets the "id" field.
func (smc *SpaceMenuCreate) SetID(s string) *SpaceMenuCreate {
	smc.mutation.SetID(s)
	return smc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (smc *SpaceMenuCreate) SetNillableID(s *string) *SpaceMenuCreate {
	if s != nil {
		smc.SetID(*s)
	}
	return smc
}

// Mutation returns the SpaceMenuMutation object of the builder.
func (smc *SpaceMenuCreate) Mutation() *SpaceMenuMutation {
	return smc.mutation
}

// Save creates the SpaceMenu in the database.
func (smc *SpaceMenuCreate) Save(ctx context.Context) (*SpaceMenu, error) {
	smc.defaults()
	return withHooks(ctx, smc.sqlSave, smc.mutation, smc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (smc *SpaceMenuCreate) SaveX(ctx context.Context) *SpaceMenu {
	v, err := smc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (smc *SpaceMenuCreate) Exec(ctx context.Context) error {
	_, err := smc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (smc *SpaceMenuCreate) ExecX(ctx context.Context) {
	if err := smc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (smc *SpaceMenuCreate) defaults() {
	if _, ok := smc.mutation.CreatedAt(); !ok {
		v := spacemenu.DefaultCreatedAt()
		smc.mutation.SetCreatedAt(v)
	}
	if _, ok := smc.mutation.UpdatedAt(); !ok {
		v := spacemenu.DefaultUpdatedAt()
		smc.mutation.SetUpdatedAt(v)
	}
	if _, ok := smc.mutation.ID(); !ok {
		v := spacemenu.DefaultID()
		smc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (smc *SpaceMenuCreate) check() error {
	if v, ok := smc.mutation.ID(); ok {
		if err := spacemenu.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "SpaceMenu.id": %w`, err)}
		}
	}
	return nil
}

func (smc *SpaceMenuCreate) sqlSave(ctx context.Context) (*SpaceMenu, error) {
	if err := smc.check(); err != nil {
		return nil, err
	}
	_node, _spec := smc.createSpec()
	if err := sqlgraph.CreateNode(ctx, smc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected SpaceMenu.ID type: %T", _spec.ID.Value)
		}
	}
	smc.mutation.id = &_node.ID
	smc.mutation.done = true
	return _node, nil
}

func (smc *SpaceMenuCreate) createSpec() (*SpaceMenu, *sqlgraph.CreateSpec) {
	var (
		_node = &SpaceMenu{config: smc.config}
		_spec = sqlgraph.NewCreateSpec(spacemenu.Table, sqlgraph.NewFieldSpec(spacemenu.FieldID, field.TypeString))
	)
	if id, ok := smc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := smc.mutation.SpaceID(); ok {
		_spec.SetField(spacemenu.FieldSpaceID, field.TypeString, value)
		_node.SpaceID = value
	}
	if value, ok := smc.mutation.MenuID(); ok {
		_spec.SetField(spacemenu.FieldMenuID, field.TypeString, value)
		_node.MenuID = value
	}
	if value, ok := smc.mutation.CreatedBy(); ok {
		_spec.SetField(spacemenu.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := smc.mutation.UpdatedBy(); ok {
		_spec.SetField(spacemenu.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := smc.mutation.CreatedAt(); ok {
		_spec.SetField(spacemenu.FieldCreatedAt, field.TypeInt64, value)
		_node.CreatedAt = value
	}
	if value, ok := smc.mutation.UpdatedAt(); ok {
		_spec.SetField(spacemenu.FieldUpdatedAt, field.TypeInt64, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// SpaceMenuCreateBulk is the builder for creating many SpaceMenu entities in bulk.
type SpaceMenuCreateBulk struct {
	config
	err      error
	builders []*SpaceMenuCreate
}

// Save creates the SpaceMenu entities in the database.
func (smcb *SpaceMenuCreateBulk) Save(ctx context.Context) ([]*SpaceMenu, error) {
	if smcb.err != nil {
		return nil, smcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(smcb.builders))
	nodes := make([]*SpaceMenu, len(smcb.builders))
	mutators := make([]Mutator, len(smcb.builders))
	for i := range smcb.builders {
		func(i int, root context.Context) {
			builder := smcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SpaceMenuMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, smcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, smcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, smcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (smcb *SpaceMenuCreateBulk) SaveX(ctx context.Context) []*SpaceMenu {
	v, err := smcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (smcb *SpaceMenuCreateBulk) Exec(ctx context.Context) error {
	_, err := smcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (smcb *SpaceMenuCreateBulk) ExecX(ctx context.Context) {
	if err := smcb.Exec(ctx); err != nil {
		panic(err)
	}
}
