// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/space/data/ent/predicate"
	"ncobase/space/data/ent/spacemenu"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SpaceMenuUpdate is the builder for updating SpaceMenu entities.
type SpaceMenuUpdate struct {
	config
	hooks    []Hook
	mutation *SpaceMenuMutation
}

// Where appends a list predicates to the SpaceMenuUpdate builder.
func (smu *SpaceMenuUpdate) Where(ps ...predicate.SpaceMenu) *SpaceMenuUpdate {
	smu.mutation.Where(ps...)
	return smu
}

// SetSpaceID sets the "space_id" field.
func (smu *SpaceMenuUpdate) SetSpaceID(s string) *SpaceMenuUpdate {
	smu.mutation.SetSpaceID(s)
	return smu
}

// SetNillableSpaceID sets the "space_id" field if the given value is not nil.
func (smu *SpaceMenuUpdate) SetNillableSpaceID(s *string) *SpaceMenuUpdate {
	if s != nil {
		smu.SetSpaceID(*s)
	}
	return smu
}

// ClearSpaceID clears the value of the "space_id" field.
func (smu *SpaceMenuUpdate) ClearSpaceID() *SpaceMenuUpdate {
	smu.mutation.ClearSpaceID()
	return smu
}

// SetMenuID sets the "menu_id" field.
func (smu *SpaceMenuUpdate) SetMenuID(s string) *SpaceMenuUpdate {
	smu.mutation.SetMenuID(s)
	return smu
}

// SetNillableMenuID sets the "menu_id" field if the given value is not nil.
func (smu *SpaceMenuUpdate) SetNillableMenuID(s *string) *SpaceMenuUpdate {
	if s != nil {
		smu.SetMenuID(*s)
	}
	return smu
}

// ClearMenuID clears the value of the "menu_id" field.
func (smu *SpaceMenuUpdate) ClearMenuID() *SpaceMenuUpdate {
	smu.mutation.ClearMenuID()
	return smu
}

// SetCreatedBy sets the "created_by" field.
func (smu *SpaceMenuUpdate) SetCreatedBy(s string) *SpaceMenuUpdate {
	smu.mutation.SetCreatedBy(s)
	return smu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (smu *SpaceMenuUpdate) SetNillableCreatedBy(s *string) *SpaceMenuUpdate {
	if s != nil {
		smu.SetCreatedBy(*s)
	}
	return smu
}

// ClearCreatedBy clears the value of the "created_by" field.
func (smu *SpaceMenuUpdate) ClearCreatedBy() *SpaceMenuUpdate {
	smu.mutation.ClearCreatedBy()
	return smu
}

// SetUpdatedBy sets the "updated_by" field.
func (smu *SpaceMenuUpdate) SetUpdatedBy(s string) *SpaceMenuUpdate {
	smu.mutation.SetUpdatedBy(s)
	return smu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (smu *SpaceMenuUpdate) SetNillableUpdatedBy(s *string) *SpaceMenuUpdate {
	if s != nil {
		smu.SetUpdatedBy(*s)
	}
	return smu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (smu *SpaceMenuUpdate) ClearUpdatedBy() *SpaceMenuUpdate {
	smu.mutation.ClearUpdatedBy()
	return smu
}

// SetUpdatedAt sets the "updated_at" field.
func (smu *SpaceMenuUpdate) SetUpdatedAt(i int64) *SpaceMenuUpdate {
	smu.mutation.ResetUpdatedAt()
	smu.mutation.SetUpdatedAt(i)
	return smu
}

// AddUpdatedAt adds i to the "updated_at" field.
func (smu *SpaceMenuUpdate) AddUpdatedAt(i int64) *SpaceMenuUpdate {
	smu.mutation.AddUpdatedAt(i)
	return smu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (smu *SpaceMenuUpdate) ClearUpdatedAt() *SpaceMenuUpdate {
	smu.mutation.ClearUpdatedAt()
	return smu
}

// Mutation returns the SpaceMenuMutation object of the builder.
func (smu *SpaceMenuUpdate) Mutation() *SpaceMenuMutation {
	return smu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (smu *SpaceMenuUpdate) Save(ctx context.Context) (int, error) {
	smu.defaults()
	return withHooks(ctx, smu.sqlSave, smu.mutation, smu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (smu *SpaceMenuUpdate) SaveX(ctx context.Context) int {
	affected, err := smu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (smu *SpaceMenuUpdate) Exec(ctx context.Context) error {
	_, err := smu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (smu *SpaceMenuUpdate) ExecX(ctx context.Context) {
	if err := smu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (smu *SpaceMenuUpdate) defaults() {
	if _, ok := smu.mutation.UpdatedAt(); !ok && !smu.mutation.UpdatedAtCleared() {
		v := spacemenu.UpdateDefaultUpdatedAt()
		smu.mutation.SetUpdatedAt(v)
	}
}

func (smu *SpaceMenuUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(spacemenu.Table, spacemenu.Columns, sqlgraph.NewFieldSpec(spacemenu.FieldID, field.TypeString))
	if ps := smu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := smu.mutation.SpaceID(); ok {
		_spec.SetField(spacemenu.FieldSpaceID, field.TypeString, value)
	}
	if smu.mutation.SpaceIDCleared() {
		_spec.ClearField(spacemenu.FieldSpaceID, field.TypeString)
	}
	if value, ok := smu.mutation.MenuID(); ok {
		_spec.SetField(spacemenu.FieldMenuID, field.TypeString, value)
	}
	if smu.mutation.MenuIDCleared() {
		_spec.ClearField(spacemenu.FieldMenuID, field.TypeString)
	}
	if value, ok := smu.mutation.CreatedBy(); ok {
		_spec.SetField(spacemenu.FieldCreatedBy, field.TypeString, value)
	}
	if smu.mutation.CreatedByCleared() {
		_spec.ClearField(spacemenu.FieldCreatedBy, field.TypeString)
	}
	if value, ok := smu.mutation.UpdatedBy(); ok {
		_spec.SetField(spacemenu.FieldUpdatedBy, field.TypeString, value)
	}
	if smu.mutation.UpdatedByCleared() {
		_spec.ClearField(spacemenu.FieldUpdatedBy, field.TypeString)
	}
	if smu.mutation.CreatedAtCleared() {
		_spec.ClearField(spacemenu.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := smu.mutation.UpdatedAt(); ok {
		_spec.SetField(spacemenu.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := smu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(spacemenu.FieldUpdatedAt, field.TypeInt64, value)
	}
	if smu.mutation.UpdatedAtCleared() {
		_spec.ClearField(spacemenu.FieldUpdatedAt, field.TypeInt64)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, smu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{spacemenu.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	smu.mutation.done = true
	return n, nil
}

// SpaceMenuUpdateOne is the builder for updating a single SpaceMenu entity.
type SpaceMenuUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SpaceMenuMutation
}

// SetSpaceID sets the "space_id" field.
func (smuo *SpaceMenuUpdateOne) SetSpaceID(s string) *SpaceMenuUpdateOne {
	smuo.mutation.SetSpaceID(s)
	return smuo
}

// SetNillableSpaceID sets the "space_id" field if the given value is not nil.
func (smuo *SpaceMenuUpdateOne) SetNillableSpaceID(s *string) *SpaceMenuUpdateOne {
	if s != nil {
		smuo.SetSpaceID(*s)
	}
	return smuo
}

// ClearSpaceID clears the value of the "space_id" field.
func (smuo *SpaceMenuUpdateOne) ClearSpaceID() *SpaceMenuUpdateOne {
	smuo.mutation.ClearSpaceID()
	return smuo
}

// SetMenuID sets the "menu_id" field.
func (smuo *SpaceMenuUpdateOne) SetMenuID(s string) *SpaceMenuUpdateOne {
	smuo.mutation.SetMenuID(s)
	return smuo
}

// SetNillableMenuID sets the "menu_id" field if the given value is not nil.
func (smuo *SpaceMenuUpdateOne) SetNillableMenuID(s *string) *SpaceMenuUpdateOne {
	if s != nil {
		smuo.SetMenuID(*s)
	}
	return smuo
}

// ClearMenuID clears the value of the "menu_id" field.
func (smuo *SpaceMenuUpdateOne) ClearMenuID() *SpaceMenuUpdateOne {
	smuo.mutation.ClearMenuID()
	return smuo
}

// SetCreatedBy sets the "created_by" field.
func (smuo *SpaceMenuUpdateOne) SetCreatedBy(s string) *SpaceMenuUpdateOne {
	smuo.mutation.SetCreatedBy(s)
	return smuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (smuo *SpaceMenuUpdateOne) SetNillableCreatedBy(s *string) *SpaceMenuUpdateOne {
	if s != nil {
		smuo.SetCreatedBy(*s)
	}
	return smuo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (smuo *SpaceMenuUpdateOne) ClearCreatedBy() *SpaceMenuUpdateOne {
	smuo.mutation.ClearCreatedBy()
	return smuo
}

// SetUpdatedBy sets the "updated_by" field.
func (smuo *SpaceMenuUpdateOne) SetUpdatedBy(s string) *SpaceMenuUpdateOne {
	smuo.mutation.SetUpdatedBy(s)
	return smuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (smuo *SpaceMenuUpdateOne) SetNillableUpdatedBy(s *string) *SpaceMenuUpdateOne {
	if s != nil {
		smuo.SetUpdatedBy(*s)
	}
	return smuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (smuo *SpaceMenuUpdateOne) ClearUpdatedBy() *SpaceMenuUpdateOne {
	smuo.mutation.ClearUpdatedBy()
	return smuo
}

// SetUpdatedAt sets the "updated_at" field.
func (smuo *SpaceMenuUpdateOne) SetUpdatedAt(i int64) *SpaceMenuUpdateOne {
	smuo.mutation.ResetUpdatedAt()
	smuo.mutation.SetUpdatedAt(i)
	return smuo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (smuo *SpaceMenuUpdateOne) AddUpdatedAt(i int64) *SpaceMenuUpdateOne {
	smuo.mutation.AddUpdatedAt(i)
	return smuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (smuo *SpaceMenuUpdateOne) ClearUpdatedAt() *SpaceMenuUpdateOne {
	smuo.mutation.ClearUpdatedAt()
	return smuo
}

// Mutation returns the SpaceMenuMutation object of the builder.
func (smuo *SpaceMenuUpdateOne) Mutation() *SpaceMenuMutation {
	return smuo.mutation
}

// Where appends a list predicates to the SpaceMenuUpdate builder.
func (smuo *SpaceMenuUpdateOne) Where(ps ...predicate.SpaceMenu) *SpaceMenuUpdateOne {
	smuo.mutation.Where(ps...)
	return smuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (smuo *SpaceMenuUpdateOne) Select(field string, fields ...string) *SpaceMenuUpdateOne {
	smuo.fields = append([]string{field}, fields...)
	return smuo
}

// Save executes the query and returns the updated SpaceMenu entity.
func (smuo *SpaceMenuUpdateOne) Save(ctx context.Context) (*SpaceMenu, error) {
	smuo.defaults()
	return withHooks(ctx, smuo.sqlSave, smuo.mutation, smuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (smuo *SpaceMenuUpdateOne) SaveX(ctx context.Context) *SpaceMenu {
	node, err := smuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (smuo *SpaceMenuUpdateOne) Exec(ctx context.Context) error {
	_, err := smuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (smuo *SpaceMenuUpdateOne) ExecX(ctx context.Context) {
	if err := smuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (smuo *SpaceMenuUpdateOne) defaults() {
	if _, ok := smuo.mutation.UpdatedAt(); !ok && !smuo.mutation.UpdatedAtCleared() {
		v := spacemenu.UpdateDefaultUpdatedAt()
		smuo.mutation.SetUpdatedAt(v)
	}
}

func (smuo *SpaceMenuUpdateOne) sqlSave(ctx context.Context) (_node *SpaceMenu, err error) {
	_spec := sqlgraph.NewUpdateSpec(spacemenu.Table, spacemenu.Columns, sqlgraph.NewFieldSpec(spacemenu.FieldID, field.TypeString))
	id, ok := smuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SpaceMenu.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := smuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, spacemenu.FieldID)
		for _, f := range fields {
			if !spacemenu.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != spacemenu.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := smuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := smuo.mutation.SpaceID(); ok {
		_spec.SetField(spacemenu.FieldSpaceID, field.TypeString, value)
	}
	if smuo.mutation.SpaceIDCleared() {
		_spec.ClearField(spacemenu.FieldSpaceID, field.TypeString)
	}
	if value, ok := smuo.mutation.MenuID(); ok {
		_spec.SetField(spacemenu.FieldMenuID, field.TypeString, value)
	}
	if smuo.mutation.MenuIDCleared() {
		_spec.ClearField(spacemenu.FieldMenuID, field.TypeString)
	}
	if value, ok := smuo.mutation.CreatedBy(); ok {
		_spec.SetField(spacemenu.FieldCreatedBy, field.TypeString, value)
	}
	if smuo.mutation.CreatedByCleared() {
		_spec.ClearField(spacemenu.FieldCreatedBy, field.TypeString)
	}
	if value, ok := smuo.mutation.UpdatedBy(); ok {
		_spec.SetField(spacemenu.FieldUpdatedBy, field.TypeString, value)
	}
	if smuo.mutation.UpdatedByCleared() {
		_spec.ClearField(spacemenu.FieldUpdatedBy, field.TypeString)
	}
	if smuo.mutation.CreatedAtCleared() {
		_spec.ClearField(spacemenu.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := smuo.mutation.UpdatedAt(); ok {
		_spec.SetField(spacemenu.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := smuo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(spacemenu.FieldUpdatedAt, field.TypeInt64, value)
	}
	if smuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(spacemenu.FieldUpdatedAt, field.TypeInt64)
	}
	_node = &SpaceMenu{config: smuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, smuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{spacemenu.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	smuo.mutation.done = true
	return _node, nil
}
