// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"ncobase/space/data/ent/spaceoption"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// SpaceOption is the model entity for the SpaceOption schema.
type SpaceOption struct {
	config `json:"-"`
	// ID of the ent.
	// primary key
	ID string `json:"id,omitempty"`
	// space id, e.g. space id, organization id, store id
	SpaceID string `json:"space_id,omitempty"`
	// option id
	OptionID string `json:"option_id,omitempty"`
	// id of the creator
	CreatedBy string `json:"created_by,omitempty"`
	// id of the last updater
	UpdatedBy string `json:"updated_by,omitempty"`
	// created at
	CreatedAt int64 `json:"created_at,omitempty"`
	// updated at
	UpdatedAt    int64 `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SpaceOption) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case spaceoption.FieldCreatedAt, spaceoption.FieldUpdatedAt:
			values[i] = new(sql.NullInt64)
		case spaceoption.FieldID, spaceoption.FieldSpaceID, spaceoption.FieldOptionID, spaceoption.FieldCreatedBy, spaceoption.FieldUpdatedBy:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SpaceOption fields.
func (so *SpaceOption) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case spaceoption.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				so.ID = value.String
			}
		case spaceoption.FieldSpaceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field space_id", values[i])
			} else if value.Valid {
				so.SpaceID = value.String
			}
		case spaceoption.FieldOptionID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field option_id", values[i])
			} else if value.Valid {
				so.OptionID = value.String
			}
		case spaceoption.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				so.CreatedBy = value.String
			}
		case spaceoption.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				so.UpdatedBy = value.String
			}
		case spaceoption.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				so.CreatedAt = value.Int64
			}
		case spaceoption.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				so.UpdatedAt = value.Int64
			}
		default:
			so.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SpaceOption.
// This includes values selected through modifiers, order, etc.
func (so *SpaceOption) Value(name string) (ent.Value, error) {
	return so.selectValues.Get(name)
}

// Update returns a builder for updating this SpaceOption.
// Note that you need to call SpaceOption.Unwrap() before calling this method if this SpaceOption
// was returned from a transaction, and the transaction was committed or rolled back.
func (so *SpaceOption) Update() *SpaceOptionUpdateOne {
	return NewSpaceOptionClient(so.config).UpdateOne(so)
}

// Unwrap unwraps the SpaceOption entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (so *SpaceOption) Unwrap() *SpaceOption {
	_tx, ok := so.config.driver.(*txDriver)
	if !ok {
		panic("ent: SpaceOption is not a transactional entity")
	}
	so.config.driver = _tx.drv
	return so
}

// String implements the fmt.Stringer.
func (so *SpaceOption) String() string {
	var builder strings.Builder
	builder.WriteString("SpaceOption(")
	builder.WriteString(fmt.Sprintf("id=%v, ", so.ID))
	builder.WriteString("space_id=")
	builder.WriteString(so.SpaceID)
	builder.WriteString(", ")
	builder.WriteString("option_id=")
	builder.WriteString(so.OptionID)
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(so.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(so.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", so.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", so.UpdatedAt))
	builder.WriteByte(')')
	return builder.String()
}

// SpaceOptions is a parsable slice of SpaceOption.
type SpaceOptions []*SpaceOption
