// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"ncobase/space/data/ent/spaceoption"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SpaceOptionCreate is the builder for creating a SpaceOption entity.
type SpaceOptionCreate struct {
	config
	mutation *SpaceOptionMutation
	hooks    []Hook
}

// SetSpaceID sets the "space_id" field.
func (soc *SpaceOptionCreate) SetSpaceID(s string) *SpaceOptionCreate {
	soc.mutation.SetSpaceID(s)
	return soc
}

// SetNillableSpaceID sets the "space_id" field if the given value is not nil.
func (soc *SpaceOptionCreate) SetNillableSpaceID(s *string) *SpaceOptionCreate {
	if s != nil {
		soc.SetSpaceID(*s)
	}
	return soc
}

// SetOptionID sets the "option_id" field.
func (soc *SpaceOptionCreate) SetOptionID(s string) *SpaceOptionCreate {
	soc.mutation.SetOptionID(s)
	return soc
}

// SetNillableOptionID sets the "option_id" field if the given value is not nil.
func (soc *SpaceOptionCreate) SetNillableOptionID(s *string) *SpaceOptionCreate {
	if s != nil {
		soc.SetOptionID(*s)
	}
	return soc
}

// SetCreatedBy sets the "created_by" field.
func (soc *SpaceOptionCreate) SetCreatedBy(s string) *SpaceOptionCreate {
	soc.mutation.SetCreatedBy(s)
	return soc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (soc *SpaceOptionCreate) SetNillableCreatedBy(s *string) *SpaceOptionCreate {
	if s != nil {
		soc.SetCreatedBy(*s)
	}
	return soc
}

// SetUpdatedBy sets the "updated_by" field.
func (soc *SpaceOptionCreate) SetUpdatedBy(s string) *SpaceOptionCreate {
	soc.mutation.SetUpdatedBy(s)
	return soc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (soc *SpaceOptionCreate) SetNillableUpdatedBy(s *string) *SpaceOptionCreate {
	if s != nil {
		soc.SetUpdatedBy(*s)
	}
	return soc
}

// SetCreatedAt sets the "created_at" field.
func (soc *SpaceOptionCreate) SetCreatedAt(i int64) *SpaceOptionCreate {
	soc.mutation.SetCreatedAt(i)
	return soc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (soc *SpaceOptionCreate) SetNillableCreatedAt(i *int64) *SpaceOptionCreate {
	if i != nil {
		soc.SetCreatedAt(*i)
	}
	return soc
}

// SetUpdatedAt sets the "updated_at" field.
func (soc *SpaceOptionCreate) SetUpdatedAt(i int64) *SpaceOptionCreate {
	soc.mutation.SetUpdatedAt(i)
	return soc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (soc *SpaceOptionCreate) SetNillableUpdatedAt(i *int64) *SpaceOptionCreate {
	if i != nil {
		soc.SetUpdatedAt(*i)
	}
	return soc
}

// SetID sets the "id" field.
func (soc *SpaceOptionCreate) SetID(s string) *SpaceOptionCreate {
	soc.mutation.SetID(s)
	return soc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (soc *SpaceOptionCreate) SetNillableID(s *string) *SpaceOptionCreate {
	if s != nil {
		soc.SetID(*s)
	}
	return soc
}

// Mutation returns the SpaceOptionMutation object of the builder.
func (soc *SpaceOptionCreate) Mutation() *SpaceOptionMutation {
	return soc.mutation
}

// Save creates the SpaceOption in the database.
func (soc *SpaceOptionCreate) Save(ctx context.Context) (*SpaceOption, error) {
	soc.defaults()
	return withHooks(ctx, soc.sqlSave, soc.mutation, soc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (soc *SpaceOptionCreate) SaveX(ctx context.Context) *SpaceOption {
	v, err := soc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (soc *SpaceOptionCreate) Exec(ctx context.Context) error {
	_, err := soc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (soc *SpaceOptionCreate) ExecX(ctx context.Context) {
	if err := soc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (soc *SpaceOptionCreate) defaults() {
	if _, ok := soc.mutation.CreatedAt(); !ok {
		v := spaceoption.DefaultCreatedAt()
		soc.mutation.SetCreatedAt(v)
	}
	if _, ok := soc.mutation.UpdatedAt(); !ok {
		v := spaceoption.DefaultUpdatedAt()
		soc.mutation.SetUpdatedAt(v)
	}
	if _, ok := soc.mutation.ID(); !ok {
		v := spaceoption.DefaultID()
		soc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (soc *SpaceOptionCreate) check() error {
	if v, ok := soc.mutation.ID(); ok {
		if err := spaceoption.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "SpaceOption.id": %w`, err)}
		}
	}
	return nil
}

func (soc *SpaceOptionCreate) sqlSave(ctx context.Context) (*SpaceOption, error) {
	if err := soc.check(); err != nil {
		return nil, err
	}
	_node, _spec := soc.createSpec()
	if err := sqlgraph.CreateNode(ctx, soc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected SpaceOption.ID type: %T", _spec.ID.Value)
		}
	}
	soc.mutation.id = &_node.ID
	soc.mutation.done = true
	return _node, nil
}

func (soc *SpaceOptionCreate) createSpec() (*SpaceOption, *sqlgraph.CreateSpec) {
	var (
		_node = &SpaceOption{config: soc.config}
		_spec = sqlgraph.NewCreateSpec(spaceoption.Table, sqlgraph.NewFieldSpec(spaceoption.FieldID, field.TypeString))
	)
	if id, ok := soc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := soc.mutation.SpaceID(); ok {
		_spec.SetField(spaceoption.FieldSpaceID, field.TypeString, value)
		_node.SpaceID = value
	}
	if value, ok := soc.mutation.OptionID(); ok {
		_spec.SetField(spaceoption.FieldOptionID, field.TypeString, value)
		_node.OptionID = value
	}
	if value, ok := soc.mutation.CreatedBy(); ok {
		_spec.SetField(spaceoption.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := soc.mutation.UpdatedBy(); ok {
		_spec.SetField(spaceoption.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := soc.mutation.CreatedAt(); ok {
		_spec.SetField(spaceoption.FieldCreatedAt, field.TypeInt64, value)
		_node.CreatedAt = value
	}
	if value, ok := soc.mutation.UpdatedAt(); ok {
		_spec.SetField(spaceoption.FieldUpdatedAt, field.TypeInt64, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// SpaceOptionCreateBulk is the builder for creating many SpaceOption entities in bulk.
type SpaceOptionCreateBulk struct {
	config
	err      error
	builders []*SpaceOptionCreate
}

// Save creates the SpaceOption entities in the database.
func (socb *SpaceOptionCreateBulk) Save(ctx context.Context) ([]*SpaceOption, error) {
	if socb.err != nil {
		return nil, socb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(socb.builders))
	nodes := make([]*SpaceOption, len(socb.builders))
	mutators := make([]Mutator, len(socb.builders))
	for i := range socb.builders {
		func(i int, root context.Context) {
			builder := socb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SpaceOptionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, socb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, socb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, socb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (socb *SpaceOptionCreateBulk) SaveX(ctx context.Context) []*SpaceOption {
	v, err := socb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (socb *SpaceOptionCreateBulk) Exec(ctx context.Context) error {
	_, err := socb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (socb *SpaceOptionCreateBulk) ExecX(ctx context.Context) {
	if err := socb.Exec(ctx); err != nil {
		panic(err)
	}
}
