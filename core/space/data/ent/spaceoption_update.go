// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/space/data/ent/predicate"
	"ncobase/space/data/ent/spaceoption"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SpaceOptionUpdate is the builder for updating SpaceOption entities.
type SpaceOptionUpdate struct {
	config
	hooks    []Hook
	mutation *SpaceOptionMutation
}

// Where appends a list predicates to the SpaceOptionUpdate builder.
func (sou *SpaceOptionUpdate) Where(ps ...predicate.SpaceOption) *SpaceOptionUpdate {
	sou.mutation.Where(ps...)
	return sou
}

// SetSpaceID sets the "space_id" field.
func (sou *SpaceOptionUpdate) SetSpaceID(s string) *SpaceOptionUpdate {
	sou.mutation.SetSpaceID(s)
	return sou
}

// SetNillableSpaceID sets the "space_id" field if the given value is not nil.
func (sou *SpaceOptionUpdate) SetNillableSpaceID(s *string) *SpaceOptionUpdate {
	if s != nil {
		sou.SetSpaceID(*s)
	}
	return sou
}

// ClearSpaceID clears the value of the "space_id" field.
func (sou *SpaceOptionUpdate) ClearSpaceID() *SpaceOptionUpdate {
	sou.mutation.ClearSpaceID()
	return sou
}

// SetOptionID sets the "option_id" field.
func (sou *SpaceOptionUpdate) SetOptionID(s string) *SpaceOptionUpdate {
	sou.mutation.SetOptionID(s)
	return sou
}

// SetNillableOptionID sets the "option_id" field if the given value is not nil.
func (sou *SpaceOptionUpdate) SetNillableOptionID(s *string) *SpaceOptionUpdate {
	if s != nil {
		sou.SetOptionID(*s)
	}
	return sou
}

// ClearOptionID clears the value of the "option_id" field.
func (sou *SpaceOptionUpdate) ClearOptionID() *SpaceOptionUpdate {
	sou.mutation.ClearOptionID()
	return sou
}

// SetCreatedBy sets the "created_by" field.
func (sou *SpaceOptionUpdate) SetCreatedBy(s string) *SpaceOptionUpdate {
	sou.mutation.SetCreatedBy(s)
	return sou
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (sou *SpaceOptionUpdate) SetNillableCreatedBy(s *string) *SpaceOptionUpdate {
	if s != nil {
		sou.SetCreatedBy(*s)
	}
	return sou
}

// ClearCreatedBy clears the value of the "created_by" field.
func (sou *SpaceOptionUpdate) ClearCreatedBy() *SpaceOptionUpdate {
	sou.mutation.ClearCreatedBy()
	return sou
}

// SetUpdatedBy sets the "updated_by" field.
func (sou *SpaceOptionUpdate) SetUpdatedBy(s string) *SpaceOptionUpdate {
	sou.mutation.SetUpdatedBy(s)
	return sou
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (sou *SpaceOptionUpdate) SetNillableUpdatedBy(s *string) *SpaceOptionUpdate {
	if s != nil {
		sou.SetUpdatedBy(*s)
	}
	return sou
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (sou *SpaceOptionUpdate) ClearUpdatedBy() *SpaceOptionUpdate {
	sou.mutation.ClearUpdatedBy()
	return sou
}

// SetUpdatedAt sets the "updated_at" field.
func (sou *SpaceOptionUpdate) SetUpdatedAt(i int64) *SpaceOptionUpdate {
	sou.mutation.ResetUpdatedAt()
	sou.mutation.SetUpdatedAt(i)
	return sou
}

// AddUpdatedAt adds i to the "updated_at" field.
func (sou *SpaceOptionUpdate) AddUpdatedAt(i int64) *SpaceOptionUpdate {
	sou.mutation.AddUpdatedAt(i)
	return sou
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (sou *SpaceOptionUpdate) ClearUpdatedAt() *SpaceOptionUpdate {
	sou.mutation.ClearUpdatedAt()
	return sou
}

// Mutation returns the SpaceOptionMutation object of the builder.
func (sou *SpaceOptionUpdate) Mutation() *SpaceOptionMutation {
	return sou.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sou *SpaceOptionUpdate) Save(ctx context.Context) (int, error) {
	sou.defaults()
	return withHooks(ctx, sou.sqlSave, sou.mutation, sou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sou *SpaceOptionUpdate) SaveX(ctx context.Context) int {
	affected, err := sou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sou *SpaceOptionUpdate) Exec(ctx context.Context) error {
	_, err := sou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sou *SpaceOptionUpdate) ExecX(ctx context.Context) {
	if err := sou.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sou *SpaceOptionUpdate) defaults() {
	if _, ok := sou.mutation.UpdatedAt(); !ok && !sou.mutation.UpdatedAtCleared() {
		v := spaceoption.UpdateDefaultUpdatedAt()
		sou.mutation.SetUpdatedAt(v)
	}
}

func (sou *SpaceOptionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(spaceoption.Table, spaceoption.Columns, sqlgraph.NewFieldSpec(spaceoption.FieldID, field.TypeString))
	if ps := sou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sou.mutation.SpaceID(); ok {
		_spec.SetField(spaceoption.FieldSpaceID, field.TypeString, value)
	}
	if sou.mutation.SpaceIDCleared() {
		_spec.ClearField(spaceoption.FieldSpaceID, field.TypeString)
	}
	if value, ok := sou.mutation.OptionID(); ok {
		_spec.SetField(spaceoption.FieldOptionID, field.TypeString, value)
	}
	if sou.mutation.OptionIDCleared() {
		_spec.ClearField(spaceoption.FieldOptionID, field.TypeString)
	}
	if value, ok := sou.mutation.CreatedBy(); ok {
		_spec.SetField(spaceoption.FieldCreatedBy, field.TypeString, value)
	}
	if sou.mutation.CreatedByCleared() {
		_spec.ClearField(spaceoption.FieldCreatedBy, field.TypeString)
	}
	if value, ok := sou.mutation.UpdatedBy(); ok {
		_spec.SetField(spaceoption.FieldUpdatedBy, field.TypeString, value)
	}
	if sou.mutation.UpdatedByCleared() {
		_spec.ClearField(spaceoption.FieldUpdatedBy, field.TypeString)
	}
	if sou.mutation.CreatedAtCleared() {
		_spec.ClearField(spaceoption.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := sou.mutation.UpdatedAt(); ok {
		_spec.SetField(spaceoption.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := sou.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(spaceoption.FieldUpdatedAt, field.TypeInt64, value)
	}
	if sou.mutation.UpdatedAtCleared() {
		_spec.ClearField(spaceoption.FieldUpdatedAt, field.TypeInt64)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{spaceoption.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sou.mutation.done = true
	return n, nil
}

// SpaceOptionUpdateOne is the builder for updating a single SpaceOption entity.
type SpaceOptionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SpaceOptionMutation
}

// SetSpaceID sets the "space_id" field.
func (souo *SpaceOptionUpdateOne) SetSpaceID(s string) *SpaceOptionUpdateOne {
	souo.mutation.SetSpaceID(s)
	return souo
}

// SetNillableSpaceID sets the "space_id" field if the given value is not nil.
func (souo *SpaceOptionUpdateOne) SetNillableSpaceID(s *string) *SpaceOptionUpdateOne {
	if s != nil {
		souo.SetSpaceID(*s)
	}
	return souo
}

// ClearSpaceID clears the value of the "space_id" field.
func (souo *SpaceOptionUpdateOne) ClearSpaceID() *SpaceOptionUpdateOne {
	souo.mutation.ClearSpaceID()
	return souo
}

// SetOptionID sets the "option_id" field.
func (souo *SpaceOptionUpdateOne) SetOptionID(s string) *SpaceOptionUpdateOne {
	souo.mutation.SetOptionID(s)
	return souo
}

// SetNillableOptionID sets the "option_id" field if the given value is not nil.
func (souo *SpaceOptionUpdateOne) SetNillableOptionID(s *string) *SpaceOptionUpdateOne {
	if s != nil {
		souo.SetOptionID(*s)
	}
	return souo
}

// ClearOptionID clears the value of the "option_id" field.
func (souo *SpaceOptionUpdateOne) ClearOptionID() *SpaceOptionUpdateOne {
	souo.mutation.ClearOptionID()
	return souo
}

// SetCreatedBy sets the "created_by" field.
func (souo *SpaceOptionUpdateOne) SetCreatedBy(s string) *SpaceOptionUpdateOne {
	souo.mutation.SetCreatedBy(s)
	return souo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (souo *SpaceOptionUpdateOne) SetNillableCreatedBy(s *string) *SpaceOptionUpdateOne {
	if s != nil {
		souo.SetCreatedBy(*s)
	}
	return souo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (souo *SpaceOptionUpdateOne) ClearCreatedBy() *SpaceOptionUpdateOne {
	souo.mutation.ClearCreatedBy()
	return souo
}

// SetUpdatedBy sets the "updated_by" field.
func (souo *SpaceOptionUpdateOne) SetUpdatedBy(s string) *SpaceOptionUpdateOne {
	souo.mutation.SetUpdatedBy(s)
	return souo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (souo *SpaceOptionUpdateOne) SetNillableUpdatedBy(s *string) *SpaceOptionUpdateOne {
	if s != nil {
		souo.SetUpdatedBy(*s)
	}
	return souo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (souo *SpaceOptionUpdateOne) ClearUpdatedBy() *SpaceOptionUpdateOne {
	souo.mutation.ClearUpdatedBy()
	return souo
}

// SetUpdatedAt sets the "updated_at" field.
func (souo *SpaceOptionUpdateOne) SetUpdatedAt(i int64) *SpaceOptionUpdateOne {
	souo.mutation.ResetUpdatedAt()
	souo.mutation.SetUpdatedAt(i)
	return souo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (souo *SpaceOptionUpdateOne) AddUpdatedAt(i int64) *SpaceOptionUpdateOne {
	souo.mutation.AddUpdatedAt(i)
	return souo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (souo *SpaceOptionUpdateOne) ClearUpdatedAt() *SpaceOptionUpdateOne {
	souo.mutation.ClearUpdatedAt()
	return souo
}

// Mutation returns the SpaceOptionMutation object of the builder.
func (souo *SpaceOptionUpdateOne) Mutation() *SpaceOptionMutation {
	return souo.mutation
}

// Where appends a list predicates to the SpaceOptionUpdate builder.
func (souo *SpaceOptionUpdateOne) Where(ps ...predicate.SpaceOption) *SpaceOptionUpdateOne {
	souo.mutation.Where(ps...)
	return souo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (souo *SpaceOptionUpdateOne) Select(field string, fields ...string) *SpaceOptionUpdateOne {
	souo.fields = append([]string{field}, fields...)
	return souo
}

// Save executes the query and returns the updated SpaceOption entity.
func (souo *SpaceOptionUpdateOne) Save(ctx context.Context) (*SpaceOption, error) {
	souo.defaults()
	return withHooks(ctx, souo.sqlSave, souo.mutation, souo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (souo *SpaceOptionUpdateOne) SaveX(ctx context.Context) *SpaceOption {
	node, err := souo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (souo *SpaceOptionUpdateOne) Exec(ctx context.Context) error {
	_, err := souo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (souo *SpaceOptionUpdateOne) ExecX(ctx context.Context) {
	if err := souo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (souo *SpaceOptionUpdateOne) defaults() {
	if _, ok := souo.mutation.UpdatedAt(); !ok && !souo.mutation.UpdatedAtCleared() {
		v := spaceoption.UpdateDefaultUpdatedAt()
		souo.mutation.SetUpdatedAt(v)
	}
}

func (souo *SpaceOptionUpdateOne) sqlSave(ctx context.Context) (_node *SpaceOption, err error) {
	_spec := sqlgraph.NewUpdateSpec(spaceoption.Table, spaceoption.Columns, sqlgraph.NewFieldSpec(spaceoption.FieldID, field.TypeString))
	id, ok := souo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SpaceOption.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := souo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, spaceoption.FieldID)
		for _, f := range fields {
			if !spaceoption.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != spaceoption.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := souo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := souo.mutation.SpaceID(); ok {
		_spec.SetField(spaceoption.FieldSpaceID, field.TypeString, value)
	}
	if souo.mutation.SpaceIDCleared() {
		_spec.ClearField(spaceoption.FieldSpaceID, field.TypeString)
	}
	if value, ok := souo.mutation.OptionID(); ok {
		_spec.SetField(spaceoption.FieldOptionID, field.TypeString, value)
	}
	if souo.mutation.OptionIDCleared() {
		_spec.ClearField(spaceoption.FieldOptionID, field.TypeString)
	}
	if value, ok := souo.mutation.CreatedBy(); ok {
		_spec.SetField(spaceoption.FieldCreatedBy, field.TypeString, value)
	}
	if souo.mutation.CreatedByCleared() {
		_spec.ClearField(spaceoption.FieldCreatedBy, field.TypeString)
	}
	if value, ok := souo.mutation.UpdatedBy(); ok {
		_spec.SetField(spaceoption.FieldUpdatedBy, field.TypeString, value)
	}
	if souo.mutation.UpdatedByCleared() {
		_spec.ClearField(spaceoption.FieldUpdatedBy, field.TypeString)
	}
	if souo.mutation.CreatedAtCleared() {
		_spec.ClearField(spaceoption.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := souo.mutation.UpdatedAt(); ok {
		_spec.SetField(spaceoption.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := souo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(spaceoption.FieldUpdatedAt, field.TypeInt64, value)
	}
	if souo.mutation.UpdatedAtCleared() {
		_spec.ClearField(spaceoption.FieldUpdatedAt, field.TypeInt64)
	}
	_node = &SpaceOption{config: souo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, souo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{spaceoption.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	souo.mutation.done = true
	return _node, nil
}
