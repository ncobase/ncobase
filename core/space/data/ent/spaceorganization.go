// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"ncobase/space/data/ent/spaceorganization"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// SpaceOrganization is the model entity for the SpaceOrganization schema.
type SpaceOrganization struct {
	config `json:"-"`
	// ID of the ent.
	// primary key
	ID string `json:"id,omitempty"`
	// space id, e.g. space id, organization id, store id
	SpaceID string `json:"space_id,omitempty"`
	// organization id
	OrgID string `json:"org_id,omitempty"`
	// id of the creator
	CreatedBy string `json:"created_by,omitempty"`
	// id of the last updater
	UpdatedBy string `json:"updated_by,omitempty"`
	// created at
	CreatedAt int64 `json:"created_at,omitempty"`
	// updated at
	UpdatedAt int64 `json:"updated_at,omitempty"`
	// Type of relationship between space and group
	RelationType string `json:"relation_type,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SpaceOrganization) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case spaceorganization.FieldCreatedAt, spaceorganization.FieldUpdatedAt:
			values[i] = new(sql.NullInt64)
		case spaceorganization.FieldID, spaceorganization.FieldSpaceID, spaceorganization.FieldOrgID, spaceorganization.FieldCreatedBy, spaceorganization.FieldUpdatedBy, spaceorganization.FieldRelationType:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SpaceOrganization fields.
func (so *SpaceOrganization) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case spaceorganization.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				so.ID = value.String
			}
		case spaceorganization.FieldSpaceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field space_id", values[i])
			} else if value.Valid {
				so.SpaceID = value.String
			}
		case spaceorganization.FieldOrgID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field org_id", values[i])
			} else if value.Valid {
				so.OrgID = value.String
			}
		case spaceorganization.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				so.CreatedBy = value.String
			}
		case spaceorganization.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				so.UpdatedBy = value.String
			}
		case spaceorganization.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				so.CreatedAt = value.Int64
			}
		case spaceorganization.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				so.UpdatedAt = value.Int64
			}
		case spaceorganization.FieldRelationType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field relation_type", values[i])
			} else if value.Valid {
				so.RelationType = value.String
			}
		default:
			so.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SpaceOrganization.
// This includes values selected through modifiers, order, etc.
func (so *SpaceOrganization) Value(name string) (ent.Value, error) {
	return so.selectValues.Get(name)
}

// Update returns a builder for updating this SpaceOrganization.
// Note that you need to call SpaceOrganization.Unwrap() before calling this method if this SpaceOrganization
// was returned from a transaction, and the transaction was committed or rolled back.
func (so *SpaceOrganization) Update() *SpaceOrganizationUpdateOne {
	return NewSpaceOrganizationClient(so.config).UpdateOne(so)
}

// Unwrap unwraps the SpaceOrganization entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (so *SpaceOrganization) Unwrap() *SpaceOrganization {
	_tx, ok := so.config.driver.(*txDriver)
	if !ok {
		panic("ent: SpaceOrganization is not a transactional entity")
	}
	so.config.driver = _tx.drv
	return so
}

// String implements the fmt.Stringer.
func (so *SpaceOrganization) String() string {
	var builder strings.Builder
	builder.WriteString("SpaceOrganization(")
	builder.WriteString(fmt.Sprintf("id=%v, ", so.ID))
	builder.WriteString("space_id=")
	builder.WriteString(so.SpaceID)
	builder.WriteString(", ")
	builder.WriteString("org_id=")
	builder.WriteString(so.OrgID)
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(so.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(so.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", so.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", so.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("relation_type=")
	builder.WriteString(so.RelationType)
	builder.WriteByte(')')
	return builder.String()
}

// SpaceOrganizations is a parsable slice of SpaceOrganization.
type SpaceOrganizations []*SpaceOrganization
