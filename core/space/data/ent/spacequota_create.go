// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/space/data/ent/spacequota"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SpaceQuotaCreate is the builder for creating a SpaceQuota entity.
type SpaceQuotaCreate struct {
	config
	mutation *SpaceQuotaMutation
	hooks    []Hook
}

// SetSpaceID sets the "space_id" field.
func (sqc *SpaceQuotaCreate) SetSpaceID(s string) *SpaceQuotaCreate {
	sqc.mutation.SetSpaceID(s)
	return sqc
}

// SetNillableSpaceID sets the "space_id" field if the given value is not nil.
func (sqc *SpaceQuotaCreate) SetNillableSpaceID(s *string) *SpaceQuotaCreate {
	if s != nil {
		sqc.SetSpaceID(*s)
	}
	return sqc
}

// SetDescription sets the "description" field.
func (sqc *SpaceQuotaCreate) SetDescription(s string) *SpaceQuotaCreate {
	sqc.mutation.SetDescription(s)
	return sqc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (sqc *SpaceQuotaCreate) SetNillableDescription(s *string) *SpaceQuotaCreate {
	if s != nil {
		sqc.SetDescription(*s)
	}
	return sqc
}

// SetExtras sets the "extras" field.
func (sqc *SpaceQuotaCreate) SetExtras(m map[string]interface{}) *SpaceQuotaCreate {
	sqc.mutation.SetExtras(m)
	return sqc
}

// SetCreatedBy sets the "created_by" field.
func (sqc *SpaceQuotaCreate) SetCreatedBy(s string) *SpaceQuotaCreate {
	sqc.mutation.SetCreatedBy(s)
	return sqc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (sqc *SpaceQuotaCreate) SetNillableCreatedBy(s *string) *SpaceQuotaCreate {
	if s != nil {
		sqc.SetCreatedBy(*s)
	}
	return sqc
}

// SetUpdatedBy sets the "updated_by" field.
func (sqc *SpaceQuotaCreate) SetUpdatedBy(s string) *SpaceQuotaCreate {
	sqc.mutation.SetUpdatedBy(s)
	return sqc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (sqc *SpaceQuotaCreate) SetNillableUpdatedBy(s *string) *SpaceQuotaCreate {
	if s != nil {
		sqc.SetUpdatedBy(*s)
	}
	return sqc
}

// SetCreatedAt sets the "created_at" field.
func (sqc *SpaceQuotaCreate) SetCreatedAt(i int64) *SpaceQuotaCreate {
	sqc.mutation.SetCreatedAt(i)
	return sqc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sqc *SpaceQuotaCreate) SetNillableCreatedAt(i *int64) *SpaceQuotaCreate {
	if i != nil {
		sqc.SetCreatedAt(*i)
	}
	return sqc
}

// SetUpdatedAt sets the "updated_at" field.
func (sqc *SpaceQuotaCreate) SetUpdatedAt(i int64) *SpaceQuotaCreate {
	sqc.mutation.SetUpdatedAt(i)
	return sqc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sqc *SpaceQuotaCreate) SetNillableUpdatedAt(i *int64) *SpaceQuotaCreate {
	if i != nil {
		sqc.SetUpdatedAt(*i)
	}
	return sqc
}

// SetQuotaType sets the "quota_type" field.
func (sqc *SpaceQuotaCreate) SetQuotaType(s string) *SpaceQuotaCreate {
	sqc.mutation.SetQuotaType(s)
	return sqc
}

// SetQuotaName sets the "quota_name" field.
func (sqc *SpaceQuotaCreate) SetQuotaName(s string) *SpaceQuotaCreate {
	sqc.mutation.SetQuotaName(s)
	return sqc
}

// SetMaxValue sets the "max_value" field.
func (sqc *SpaceQuotaCreate) SetMaxValue(i int64) *SpaceQuotaCreate {
	sqc.mutation.SetMaxValue(i)
	return sqc
}

// SetCurrentUsed sets the "current_used" field.
func (sqc *SpaceQuotaCreate) SetCurrentUsed(i int64) *SpaceQuotaCreate {
	sqc.mutation.SetCurrentUsed(i)
	return sqc
}

// SetNillableCurrentUsed sets the "current_used" field if the given value is not nil.
func (sqc *SpaceQuotaCreate) SetNillableCurrentUsed(i *int64) *SpaceQuotaCreate {
	if i != nil {
		sqc.SetCurrentUsed(*i)
	}
	return sqc
}

// SetUnit sets the "unit" field.
func (sqc *SpaceQuotaCreate) SetUnit(s string) *SpaceQuotaCreate {
	sqc.mutation.SetUnit(s)
	return sqc
}

// SetNillableUnit sets the "unit" field if the given value is not nil.
func (sqc *SpaceQuotaCreate) SetNillableUnit(s *string) *SpaceQuotaCreate {
	if s != nil {
		sqc.SetUnit(*s)
	}
	return sqc
}

// SetEnabled sets the "enabled" field.
func (sqc *SpaceQuotaCreate) SetEnabled(b bool) *SpaceQuotaCreate {
	sqc.mutation.SetEnabled(b)
	return sqc
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (sqc *SpaceQuotaCreate) SetNillableEnabled(b *bool) *SpaceQuotaCreate {
	if b != nil {
		sqc.SetEnabled(*b)
	}
	return sqc
}

// SetID sets the "id" field.
func (sqc *SpaceQuotaCreate) SetID(s string) *SpaceQuotaCreate {
	sqc.mutation.SetID(s)
	return sqc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (sqc *SpaceQuotaCreate) SetNillableID(s *string) *SpaceQuotaCreate {
	if s != nil {
		sqc.SetID(*s)
	}
	return sqc
}

// Mutation returns the SpaceQuotaMutation object of the builder.
func (sqc *SpaceQuotaCreate) Mutation() *SpaceQuotaMutation {
	return sqc.mutation
}

// Save creates the SpaceQuota in the database.
func (sqc *SpaceQuotaCreate) Save(ctx context.Context) (*SpaceQuota, error) {
	sqc.defaults()
	return withHooks(ctx, sqc.sqlSave, sqc.mutation, sqc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sqc *SpaceQuotaCreate) SaveX(ctx context.Context) *SpaceQuota {
	v, err := sqc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sqc *SpaceQuotaCreate) Exec(ctx context.Context) error {
	_, err := sqc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sqc *SpaceQuotaCreate) ExecX(ctx context.Context) {
	if err := sqc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sqc *SpaceQuotaCreate) defaults() {
	if _, ok := sqc.mutation.Extras(); !ok {
		v := spacequota.DefaultExtras
		sqc.mutation.SetExtras(v)
	}
	if _, ok := sqc.mutation.CreatedAt(); !ok {
		v := spacequota.DefaultCreatedAt()
		sqc.mutation.SetCreatedAt(v)
	}
	if _, ok := sqc.mutation.UpdatedAt(); !ok {
		v := spacequota.DefaultUpdatedAt()
		sqc.mutation.SetUpdatedAt(v)
	}
	if _, ok := sqc.mutation.CurrentUsed(); !ok {
		v := spacequota.DefaultCurrentUsed
		sqc.mutation.SetCurrentUsed(v)
	}
	if _, ok := sqc.mutation.Unit(); !ok {
		v := spacequota.DefaultUnit
		sqc.mutation.SetUnit(v)
	}
	if _, ok := sqc.mutation.Enabled(); !ok {
		v := spacequota.DefaultEnabled
		sqc.mutation.SetEnabled(v)
	}
	if _, ok := sqc.mutation.ID(); !ok {
		v := spacequota.DefaultID()
		sqc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sqc *SpaceQuotaCreate) check() error {
	if _, ok := sqc.mutation.QuotaType(); !ok {
		return &ValidationError{Name: "quota_type", err: errors.New(`ent: missing required field "SpaceQuota.quota_type"`)}
	}
	if v, ok := sqc.mutation.QuotaType(); ok {
		if err := spacequota.QuotaTypeValidator(v); err != nil {
			return &ValidationError{Name: "quota_type", err: fmt.Errorf(`ent: validator failed for field "SpaceQuota.quota_type": %w`, err)}
		}
	}
	if _, ok := sqc.mutation.QuotaName(); !ok {
		return &ValidationError{Name: "quota_name", err: errors.New(`ent: missing required field "SpaceQuota.quota_name"`)}
	}
	if v, ok := sqc.mutation.QuotaName(); ok {
		if err := spacequota.QuotaNameValidator(v); err != nil {
			return &ValidationError{Name: "quota_name", err: fmt.Errorf(`ent: validator failed for field "SpaceQuota.quota_name": %w`, err)}
		}
	}
	if _, ok := sqc.mutation.MaxValue(); !ok {
		return &ValidationError{Name: "max_value", err: errors.New(`ent: missing required field "SpaceQuota.max_value"`)}
	}
	if v, ok := sqc.mutation.MaxValue(); ok {
		if err := spacequota.MaxValueValidator(v); err != nil {
			return &ValidationError{Name: "max_value", err: fmt.Errorf(`ent: validator failed for field "SpaceQuota.max_value": %w`, err)}
		}
	}
	if _, ok := sqc.mutation.CurrentUsed(); !ok {
		return &ValidationError{Name: "current_used", err: errors.New(`ent: missing required field "SpaceQuota.current_used"`)}
	}
	if v, ok := sqc.mutation.CurrentUsed(); ok {
		if err := spacequota.CurrentUsedValidator(v); err != nil {
			return &ValidationError{Name: "current_used", err: fmt.Errorf(`ent: validator failed for field "SpaceQuota.current_used": %w`, err)}
		}
	}
	if _, ok := sqc.mutation.Unit(); !ok {
		return &ValidationError{Name: "unit", err: errors.New(`ent: missing required field "SpaceQuota.unit"`)}
	}
	if _, ok := sqc.mutation.Enabled(); !ok {
		return &ValidationError{Name: "enabled", err: errors.New(`ent: missing required field "SpaceQuota.enabled"`)}
	}
	if v, ok := sqc.mutation.ID(); ok {
		if err := spacequota.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "SpaceQuota.id": %w`, err)}
		}
	}
	return nil
}

func (sqc *SpaceQuotaCreate) sqlSave(ctx context.Context) (*SpaceQuota, error) {
	if err := sqc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sqc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sqc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected SpaceQuota.ID type: %T", _spec.ID.Value)
		}
	}
	sqc.mutation.id = &_node.ID
	sqc.mutation.done = true
	return _node, nil
}

func (sqc *SpaceQuotaCreate) createSpec() (*SpaceQuota, *sqlgraph.CreateSpec) {
	var (
		_node = &SpaceQuota{config: sqc.config}
		_spec = sqlgraph.NewCreateSpec(spacequota.Table, sqlgraph.NewFieldSpec(spacequota.FieldID, field.TypeString))
	)
	if id, ok := sqc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sqc.mutation.SpaceID(); ok {
		_spec.SetField(spacequota.FieldSpaceID, field.TypeString, value)
		_node.SpaceID = value
	}
	if value, ok := sqc.mutation.Description(); ok {
		_spec.SetField(spacequota.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := sqc.mutation.Extras(); ok {
		_spec.SetField(spacequota.FieldExtras, field.TypeJSON, value)
		_node.Extras = value
	}
	if value, ok := sqc.mutation.CreatedBy(); ok {
		_spec.SetField(spacequota.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := sqc.mutation.UpdatedBy(); ok {
		_spec.SetField(spacequota.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := sqc.mutation.CreatedAt(); ok {
		_spec.SetField(spacequota.FieldCreatedAt, field.TypeInt64, value)
		_node.CreatedAt = value
	}
	if value, ok := sqc.mutation.UpdatedAt(); ok {
		_spec.SetField(spacequota.FieldUpdatedAt, field.TypeInt64, value)
		_node.UpdatedAt = value
	}
	if value, ok := sqc.mutation.QuotaType(); ok {
		_spec.SetField(spacequota.FieldQuotaType, field.TypeString, value)
		_node.QuotaType = value
	}
	if value, ok := sqc.mutation.QuotaName(); ok {
		_spec.SetField(spacequota.FieldQuotaName, field.TypeString, value)
		_node.QuotaName = value
	}
	if value, ok := sqc.mutation.MaxValue(); ok {
		_spec.SetField(spacequota.FieldMaxValue, field.TypeInt64, value)
		_node.MaxValue = value
	}
	if value, ok := sqc.mutation.CurrentUsed(); ok {
		_spec.SetField(spacequota.FieldCurrentUsed, field.TypeInt64, value)
		_node.CurrentUsed = value
	}
	if value, ok := sqc.mutation.Unit(); ok {
		_spec.SetField(spacequota.FieldUnit, field.TypeString, value)
		_node.Unit = value
	}
	if value, ok := sqc.mutation.Enabled(); ok {
		_spec.SetField(spacequota.FieldEnabled, field.TypeBool, value)
		_node.Enabled = value
	}
	return _node, _spec
}

// SpaceQuotaCreateBulk is the builder for creating many SpaceQuota entities in bulk.
type SpaceQuotaCreateBulk struct {
	config
	err      error
	builders []*SpaceQuotaCreate
}

// Save creates the SpaceQuota entities in the database.
func (sqcb *SpaceQuotaCreateBulk) Save(ctx context.Context) ([]*SpaceQuota, error) {
	if sqcb.err != nil {
		return nil, sqcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sqcb.builders))
	nodes := make([]*SpaceQuota, len(sqcb.builders))
	mutators := make([]Mutator, len(sqcb.builders))
	for i := range sqcb.builders {
		func(i int, root context.Context) {
			builder := sqcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SpaceQuotaMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sqcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sqcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sqcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sqcb *SpaceQuotaCreateBulk) SaveX(ctx context.Context) []*SpaceQuota {
	v, err := sqcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sqcb *SpaceQuotaCreateBulk) Exec(ctx context.Context) error {
	_, err := sqcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sqcb *SpaceQuotaCreateBulk) ExecX(ctx context.Context) {
	if err := sqcb.Exec(ctx); err != nil {
		panic(err)
	}
}
