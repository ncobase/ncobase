// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/space/data/ent/predicate"
	"ncobase/space/data/ent/spacequota"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SpaceQuotaUpdate is the builder for updating SpaceQuota entities.
type SpaceQuotaUpdate struct {
	config
	hooks    []Hook
	mutation *SpaceQuotaMutation
}

// Where appends a list predicates to the SpaceQuotaUpdate builder.
func (squ *SpaceQuotaUpdate) Where(ps ...predicate.SpaceQuota) *SpaceQuotaUpdate {
	squ.mutation.Where(ps...)
	return squ
}

// SetSpaceID sets the "space_id" field.
func (squ *SpaceQuotaUpdate) SetSpaceID(s string) *SpaceQuotaUpdate {
	squ.mutation.SetSpaceID(s)
	return squ
}

// SetNillableSpaceID sets the "space_id" field if the given value is not nil.
func (squ *SpaceQuotaUpdate) SetNillableSpaceID(s *string) *SpaceQuotaUpdate {
	if s != nil {
		squ.SetSpaceID(*s)
	}
	return squ
}

// ClearSpaceID clears the value of the "space_id" field.
func (squ *SpaceQuotaUpdate) ClearSpaceID() *SpaceQuotaUpdate {
	squ.mutation.ClearSpaceID()
	return squ
}

// SetDescription sets the "description" field.
func (squ *SpaceQuotaUpdate) SetDescription(s string) *SpaceQuotaUpdate {
	squ.mutation.SetDescription(s)
	return squ
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (squ *SpaceQuotaUpdate) SetNillableDescription(s *string) *SpaceQuotaUpdate {
	if s != nil {
		squ.SetDescription(*s)
	}
	return squ
}

// ClearDescription clears the value of the "description" field.
func (squ *SpaceQuotaUpdate) ClearDescription() *SpaceQuotaUpdate {
	squ.mutation.ClearDescription()
	return squ
}

// SetExtras sets the "extras" field.
func (squ *SpaceQuotaUpdate) SetExtras(m map[string]interface{}) *SpaceQuotaUpdate {
	squ.mutation.SetExtras(m)
	return squ
}

// ClearExtras clears the value of the "extras" field.
func (squ *SpaceQuotaUpdate) ClearExtras() *SpaceQuotaUpdate {
	squ.mutation.ClearExtras()
	return squ
}

// SetCreatedBy sets the "created_by" field.
func (squ *SpaceQuotaUpdate) SetCreatedBy(s string) *SpaceQuotaUpdate {
	squ.mutation.SetCreatedBy(s)
	return squ
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (squ *SpaceQuotaUpdate) SetNillableCreatedBy(s *string) *SpaceQuotaUpdate {
	if s != nil {
		squ.SetCreatedBy(*s)
	}
	return squ
}

// ClearCreatedBy clears the value of the "created_by" field.
func (squ *SpaceQuotaUpdate) ClearCreatedBy() *SpaceQuotaUpdate {
	squ.mutation.ClearCreatedBy()
	return squ
}

// SetUpdatedBy sets the "updated_by" field.
func (squ *SpaceQuotaUpdate) SetUpdatedBy(s string) *SpaceQuotaUpdate {
	squ.mutation.SetUpdatedBy(s)
	return squ
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (squ *SpaceQuotaUpdate) SetNillableUpdatedBy(s *string) *SpaceQuotaUpdate {
	if s != nil {
		squ.SetUpdatedBy(*s)
	}
	return squ
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (squ *SpaceQuotaUpdate) ClearUpdatedBy() *SpaceQuotaUpdate {
	squ.mutation.ClearUpdatedBy()
	return squ
}

// SetUpdatedAt sets the "updated_at" field.
func (squ *SpaceQuotaUpdate) SetUpdatedAt(i int64) *SpaceQuotaUpdate {
	squ.mutation.ResetUpdatedAt()
	squ.mutation.SetUpdatedAt(i)
	return squ
}

// AddUpdatedAt adds i to the "updated_at" field.
func (squ *SpaceQuotaUpdate) AddUpdatedAt(i int64) *SpaceQuotaUpdate {
	squ.mutation.AddUpdatedAt(i)
	return squ
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (squ *SpaceQuotaUpdate) ClearUpdatedAt() *SpaceQuotaUpdate {
	squ.mutation.ClearUpdatedAt()
	return squ
}

// SetQuotaType sets the "quota_type" field.
func (squ *SpaceQuotaUpdate) SetQuotaType(s string) *SpaceQuotaUpdate {
	squ.mutation.SetQuotaType(s)
	return squ
}

// SetNillableQuotaType sets the "quota_type" field if the given value is not nil.
func (squ *SpaceQuotaUpdate) SetNillableQuotaType(s *string) *SpaceQuotaUpdate {
	if s != nil {
		squ.SetQuotaType(*s)
	}
	return squ
}

// SetQuotaName sets the "quota_name" field.
func (squ *SpaceQuotaUpdate) SetQuotaName(s string) *SpaceQuotaUpdate {
	squ.mutation.SetQuotaName(s)
	return squ
}

// SetNillableQuotaName sets the "quota_name" field if the given value is not nil.
func (squ *SpaceQuotaUpdate) SetNillableQuotaName(s *string) *SpaceQuotaUpdate {
	if s != nil {
		squ.SetQuotaName(*s)
	}
	return squ
}

// SetMaxValue sets the "max_value" field.
func (squ *SpaceQuotaUpdate) SetMaxValue(i int64) *SpaceQuotaUpdate {
	squ.mutation.ResetMaxValue()
	squ.mutation.SetMaxValue(i)
	return squ
}

// SetNillableMaxValue sets the "max_value" field if the given value is not nil.
func (squ *SpaceQuotaUpdate) SetNillableMaxValue(i *int64) *SpaceQuotaUpdate {
	if i != nil {
		squ.SetMaxValue(*i)
	}
	return squ
}

// AddMaxValue adds i to the "max_value" field.
func (squ *SpaceQuotaUpdate) AddMaxValue(i int64) *SpaceQuotaUpdate {
	squ.mutation.AddMaxValue(i)
	return squ
}

// SetCurrentUsed sets the "current_used" field.
func (squ *SpaceQuotaUpdate) SetCurrentUsed(i int64) *SpaceQuotaUpdate {
	squ.mutation.ResetCurrentUsed()
	squ.mutation.SetCurrentUsed(i)
	return squ
}

// SetNillableCurrentUsed sets the "current_used" field if the given value is not nil.
func (squ *SpaceQuotaUpdate) SetNillableCurrentUsed(i *int64) *SpaceQuotaUpdate {
	if i != nil {
		squ.SetCurrentUsed(*i)
	}
	return squ
}

// AddCurrentUsed adds i to the "current_used" field.
func (squ *SpaceQuotaUpdate) AddCurrentUsed(i int64) *SpaceQuotaUpdate {
	squ.mutation.AddCurrentUsed(i)
	return squ
}

// SetUnit sets the "unit" field.
func (squ *SpaceQuotaUpdate) SetUnit(s string) *SpaceQuotaUpdate {
	squ.mutation.SetUnit(s)
	return squ
}

// SetNillableUnit sets the "unit" field if the given value is not nil.
func (squ *SpaceQuotaUpdate) SetNillableUnit(s *string) *SpaceQuotaUpdate {
	if s != nil {
		squ.SetUnit(*s)
	}
	return squ
}

// SetEnabled sets the "enabled" field.
func (squ *SpaceQuotaUpdate) SetEnabled(b bool) *SpaceQuotaUpdate {
	squ.mutation.SetEnabled(b)
	return squ
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (squ *SpaceQuotaUpdate) SetNillableEnabled(b *bool) *SpaceQuotaUpdate {
	if b != nil {
		squ.SetEnabled(*b)
	}
	return squ
}

// Mutation returns the SpaceQuotaMutation object of the builder.
func (squ *SpaceQuotaUpdate) Mutation() *SpaceQuotaMutation {
	return squ.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (squ *SpaceQuotaUpdate) Save(ctx context.Context) (int, error) {
	squ.defaults()
	return withHooks(ctx, squ.sqlSave, squ.mutation, squ.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (squ *SpaceQuotaUpdate) SaveX(ctx context.Context) int {
	affected, err := squ.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (squ *SpaceQuotaUpdate) Exec(ctx context.Context) error {
	_, err := squ.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (squ *SpaceQuotaUpdate) ExecX(ctx context.Context) {
	if err := squ.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (squ *SpaceQuotaUpdate) defaults() {
	if _, ok := squ.mutation.UpdatedAt(); !ok && !squ.mutation.UpdatedAtCleared() {
		v := spacequota.UpdateDefaultUpdatedAt()
		squ.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (squ *SpaceQuotaUpdate) check() error {
	if v, ok := squ.mutation.QuotaType(); ok {
		if err := spacequota.QuotaTypeValidator(v); err != nil {
			return &ValidationError{Name: "quota_type", err: fmt.Errorf(`ent: validator failed for field "SpaceQuota.quota_type": %w`, err)}
		}
	}
	if v, ok := squ.mutation.QuotaName(); ok {
		if err := spacequota.QuotaNameValidator(v); err != nil {
			return &ValidationError{Name: "quota_name", err: fmt.Errorf(`ent: validator failed for field "SpaceQuota.quota_name": %w`, err)}
		}
	}
	if v, ok := squ.mutation.MaxValue(); ok {
		if err := spacequota.MaxValueValidator(v); err != nil {
			return &ValidationError{Name: "max_value", err: fmt.Errorf(`ent: validator failed for field "SpaceQuota.max_value": %w`, err)}
		}
	}
	if v, ok := squ.mutation.CurrentUsed(); ok {
		if err := spacequota.CurrentUsedValidator(v); err != nil {
			return &ValidationError{Name: "current_used", err: fmt.Errorf(`ent: validator failed for field "SpaceQuota.current_used": %w`, err)}
		}
	}
	return nil
}

func (squ *SpaceQuotaUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := squ.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(spacequota.Table, spacequota.Columns, sqlgraph.NewFieldSpec(spacequota.FieldID, field.TypeString))
	if ps := squ.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := squ.mutation.SpaceID(); ok {
		_spec.SetField(spacequota.FieldSpaceID, field.TypeString, value)
	}
	if squ.mutation.SpaceIDCleared() {
		_spec.ClearField(spacequota.FieldSpaceID, field.TypeString)
	}
	if value, ok := squ.mutation.Description(); ok {
		_spec.SetField(spacequota.FieldDescription, field.TypeString, value)
	}
	if squ.mutation.DescriptionCleared() {
		_spec.ClearField(spacequota.FieldDescription, field.TypeString)
	}
	if value, ok := squ.mutation.Extras(); ok {
		_spec.SetField(spacequota.FieldExtras, field.TypeJSON, value)
	}
	if squ.mutation.ExtrasCleared() {
		_spec.ClearField(spacequota.FieldExtras, field.TypeJSON)
	}
	if value, ok := squ.mutation.CreatedBy(); ok {
		_spec.SetField(spacequota.FieldCreatedBy, field.TypeString, value)
	}
	if squ.mutation.CreatedByCleared() {
		_spec.ClearField(spacequota.FieldCreatedBy, field.TypeString)
	}
	if value, ok := squ.mutation.UpdatedBy(); ok {
		_spec.SetField(spacequota.FieldUpdatedBy, field.TypeString, value)
	}
	if squ.mutation.UpdatedByCleared() {
		_spec.ClearField(spacequota.FieldUpdatedBy, field.TypeString)
	}
	if squ.mutation.CreatedAtCleared() {
		_spec.ClearField(spacequota.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := squ.mutation.UpdatedAt(); ok {
		_spec.SetField(spacequota.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := squ.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(spacequota.FieldUpdatedAt, field.TypeInt64, value)
	}
	if squ.mutation.UpdatedAtCleared() {
		_spec.ClearField(spacequota.FieldUpdatedAt, field.TypeInt64)
	}
	if value, ok := squ.mutation.QuotaType(); ok {
		_spec.SetField(spacequota.FieldQuotaType, field.TypeString, value)
	}
	if value, ok := squ.mutation.QuotaName(); ok {
		_spec.SetField(spacequota.FieldQuotaName, field.TypeString, value)
	}
	if value, ok := squ.mutation.MaxValue(); ok {
		_spec.SetField(spacequota.FieldMaxValue, field.TypeInt64, value)
	}
	if value, ok := squ.mutation.AddedMaxValue(); ok {
		_spec.AddField(spacequota.FieldMaxValue, field.TypeInt64, value)
	}
	if value, ok := squ.mutation.CurrentUsed(); ok {
		_spec.SetField(spacequota.FieldCurrentUsed, field.TypeInt64, value)
	}
	if value, ok := squ.mutation.AddedCurrentUsed(); ok {
		_spec.AddField(spacequota.FieldCurrentUsed, field.TypeInt64, value)
	}
	if value, ok := squ.mutation.Unit(); ok {
		_spec.SetField(spacequota.FieldUnit, field.TypeString, value)
	}
	if value, ok := squ.mutation.Enabled(); ok {
		_spec.SetField(spacequota.FieldEnabled, field.TypeBool, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, squ.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{spacequota.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	squ.mutation.done = true
	return n, nil
}

// SpaceQuotaUpdateOne is the builder for updating a single SpaceQuota entity.
type SpaceQuotaUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SpaceQuotaMutation
}

// SetSpaceID sets the "space_id" field.
func (squo *SpaceQuotaUpdateOne) SetSpaceID(s string) *SpaceQuotaUpdateOne {
	squo.mutation.SetSpaceID(s)
	return squo
}

// SetNillableSpaceID sets the "space_id" field if the given value is not nil.
func (squo *SpaceQuotaUpdateOne) SetNillableSpaceID(s *string) *SpaceQuotaUpdateOne {
	if s != nil {
		squo.SetSpaceID(*s)
	}
	return squo
}

// ClearSpaceID clears the value of the "space_id" field.
func (squo *SpaceQuotaUpdateOne) ClearSpaceID() *SpaceQuotaUpdateOne {
	squo.mutation.ClearSpaceID()
	return squo
}

// SetDescription sets the "description" field.
func (squo *SpaceQuotaUpdateOne) SetDescription(s string) *SpaceQuotaUpdateOne {
	squo.mutation.SetDescription(s)
	return squo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (squo *SpaceQuotaUpdateOne) SetNillableDescription(s *string) *SpaceQuotaUpdateOne {
	if s != nil {
		squo.SetDescription(*s)
	}
	return squo
}

// ClearDescription clears the value of the "description" field.
func (squo *SpaceQuotaUpdateOne) ClearDescription() *SpaceQuotaUpdateOne {
	squo.mutation.ClearDescription()
	return squo
}

// SetExtras sets the "extras" field.
func (squo *SpaceQuotaUpdateOne) SetExtras(m map[string]interface{}) *SpaceQuotaUpdateOne {
	squo.mutation.SetExtras(m)
	return squo
}

// ClearExtras clears the value of the "extras" field.
func (squo *SpaceQuotaUpdateOne) ClearExtras() *SpaceQuotaUpdateOne {
	squo.mutation.ClearExtras()
	return squo
}

// SetCreatedBy sets the "created_by" field.
func (squo *SpaceQuotaUpdateOne) SetCreatedBy(s string) *SpaceQuotaUpdateOne {
	squo.mutation.SetCreatedBy(s)
	return squo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (squo *SpaceQuotaUpdateOne) SetNillableCreatedBy(s *string) *SpaceQuotaUpdateOne {
	if s != nil {
		squo.SetCreatedBy(*s)
	}
	return squo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (squo *SpaceQuotaUpdateOne) ClearCreatedBy() *SpaceQuotaUpdateOne {
	squo.mutation.ClearCreatedBy()
	return squo
}

// SetUpdatedBy sets the "updated_by" field.
func (squo *SpaceQuotaUpdateOne) SetUpdatedBy(s string) *SpaceQuotaUpdateOne {
	squo.mutation.SetUpdatedBy(s)
	return squo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (squo *SpaceQuotaUpdateOne) SetNillableUpdatedBy(s *string) *SpaceQuotaUpdateOne {
	if s != nil {
		squo.SetUpdatedBy(*s)
	}
	return squo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (squo *SpaceQuotaUpdateOne) ClearUpdatedBy() *SpaceQuotaUpdateOne {
	squo.mutation.ClearUpdatedBy()
	return squo
}

// SetUpdatedAt sets the "updated_at" field.
func (squo *SpaceQuotaUpdateOne) SetUpdatedAt(i int64) *SpaceQuotaUpdateOne {
	squo.mutation.ResetUpdatedAt()
	squo.mutation.SetUpdatedAt(i)
	return squo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (squo *SpaceQuotaUpdateOne) AddUpdatedAt(i int64) *SpaceQuotaUpdateOne {
	squo.mutation.AddUpdatedAt(i)
	return squo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (squo *SpaceQuotaUpdateOne) ClearUpdatedAt() *SpaceQuotaUpdateOne {
	squo.mutation.ClearUpdatedAt()
	return squo
}

// SetQuotaType sets the "quota_type" field.
func (squo *SpaceQuotaUpdateOne) SetQuotaType(s string) *SpaceQuotaUpdateOne {
	squo.mutation.SetQuotaType(s)
	return squo
}

// SetNillableQuotaType sets the "quota_type" field if the given value is not nil.
func (squo *SpaceQuotaUpdateOne) SetNillableQuotaType(s *string) *SpaceQuotaUpdateOne {
	if s != nil {
		squo.SetQuotaType(*s)
	}
	return squo
}

// SetQuotaName sets the "quota_name" field.
func (squo *SpaceQuotaUpdateOne) SetQuotaName(s string) *SpaceQuotaUpdateOne {
	squo.mutation.SetQuotaName(s)
	return squo
}

// SetNillableQuotaName sets the "quota_name" field if the given value is not nil.
func (squo *SpaceQuotaUpdateOne) SetNillableQuotaName(s *string) *SpaceQuotaUpdateOne {
	if s != nil {
		squo.SetQuotaName(*s)
	}
	return squo
}

// SetMaxValue sets the "max_value" field.
func (squo *SpaceQuotaUpdateOne) SetMaxValue(i int64) *SpaceQuotaUpdateOne {
	squo.mutation.ResetMaxValue()
	squo.mutation.SetMaxValue(i)
	return squo
}

// SetNillableMaxValue sets the "max_value" field if the given value is not nil.
func (squo *SpaceQuotaUpdateOne) SetNillableMaxValue(i *int64) *SpaceQuotaUpdateOne {
	if i != nil {
		squo.SetMaxValue(*i)
	}
	return squo
}

// AddMaxValue adds i to the "max_value" field.
func (squo *SpaceQuotaUpdateOne) AddMaxValue(i int64) *SpaceQuotaUpdateOne {
	squo.mutation.AddMaxValue(i)
	return squo
}

// SetCurrentUsed sets the "current_used" field.
func (squo *SpaceQuotaUpdateOne) SetCurrentUsed(i int64) *SpaceQuotaUpdateOne {
	squo.mutation.ResetCurrentUsed()
	squo.mutation.SetCurrentUsed(i)
	return squo
}

// SetNillableCurrentUsed sets the "current_used" field if the given value is not nil.
func (squo *SpaceQuotaUpdateOne) SetNillableCurrentUsed(i *int64) *SpaceQuotaUpdateOne {
	if i != nil {
		squo.SetCurrentUsed(*i)
	}
	return squo
}

// AddCurrentUsed adds i to the "current_used" field.
func (squo *SpaceQuotaUpdateOne) AddCurrentUsed(i int64) *SpaceQuotaUpdateOne {
	squo.mutation.AddCurrentUsed(i)
	return squo
}

// SetUnit sets the "unit" field.
func (squo *SpaceQuotaUpdateOne) SetUnit(s string) *SpaceQuotaUpdateOne {
	squo.mutation.SetUnit(s)
	return squo
}

// SetNillableUnit sets the "unit" field if the given value is not nil.
func (squo *SpaceQuotaUpdateOne) SetNillableUnit(s *string) *SpaceQuotaUpdateOne {
	if s != nil {
		squo.SetUnit(*s)
	}
	return squo
}

// SetEnabled sets the "enabled" field.
func (squo *SpaceQuotaUpdateOne) SetEnabled(b bool) *SpaceQuotaUpdateOne {
	squo.mutation.SetEnabled(b)
	return squo
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (squo *SpaceQuotaUpdateOne) SetNillableEnabled(b *bool) *SpaceQuotaUpdateOne {
	if b != nil {
		squo.SetEnabled(*b)
	}
	return squo
}

// Mutation returns the SpaceQuotaMutation object of the builder.
func (squo *SpaceQuotaUpdateOne) Mutation() *SpaceQuotaMutation {
	return squo.mutation
}

// Where appends a list predicates to the SpaceQuotaUpdate builder.
func (squo *SpaceQuotaUpdateOne) Where(ps ...predicate.SpaceQuota) *SpaceQuotaUpdateOne {
	squo.mutation.Where(ps...)
	return squo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (squo *SpaceQuotaUpdateOne) Select(field string, fields ...string) *SpaceQuotaUpdateOne {
	squo.fields = append([]string{field}, fields...)
	return squo
}

// Save executes the query and returns the updated SpaceQuota entity.
func (squo *SpaceQuotaUpdateOne) Save(ctx context.Context) (*SpaceQuota, error) {
	squo.defaults()
	return withHooks(ctx, squo.sqlSave, squo.mutation, squo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (squo *SpaceQuotaUpdateOne) SaveX(ctx context.Context) *SpaceQuota {
	node, err := squo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (squo *SpaceQuotaUpdateOne) Exec(ctx context.Context) error {
	_, err := squo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (squo *SpaceQuotaUpdateOne) ExecX(ctx context.Context) {
	if err := squo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (squo *SpaceQuotaUpdateOne) defaults() {
	if _, ok := squo.mutation.UpdatedAt(); !ok && !squo.mutation.UpdatedAtCleared() {
		v := spacequota.UpdateDefaultUpdatedAt()
		squo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (squo *SpaceQuotaUpdateOne) check() error {
	if v, ok := squo.mutation.QuotaType(); ok {
		if err := spacequota.QuotaTypeValidator(v); err != nil {
			return &ValidationError{Name: "quota_type", err: fmt.Errorf(`ent: validator failed for field "SpaceQuota.quota_type": %w`, err)}
		}
	}
	if v, ok := squo.mutation.QuotaName(); ok {
		if err := spacequota.QuotaNameValidator(v); err != nil {
			return &ValidationError{Name: "quota_name", err: fmt.Errorf(`ent: validator failed for field "SpaceQuota.quota_name": %w`, err)}
		}
	}
	if v, ok := squo.mutation.MaxValue(); ok {
		if err := spacequota.MaxValueValidator(v); err != nil {
			return &ValidationError{Name: "max_value", err: fmt.Errorf(`ent: validator failed for field "SpaceQuota.max_value": %w`, err)}
		}
	}
	if v, ok := squo.mutation.CurrentUsed(); ok {
		if err := spacequota.CurrentUsedValidator(v); err != nil {
			return &ValidationError{Name: "current_used", err: fmt.Errorf(`ent: validator failed for field "SpaceQuota.current_used": %w`, err)}
		}
	}
	return nil
}

func (squo *SpaceQuotaUpdateOne) sqlSave(ctx context.Context) (_node *SpaceQuota, err error) {
	if err := squo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(spacequota.Table, spacequota.Columns, sqlgraph.NewFieldSpec(spacequota.FieldID, field.TypeString))
	id, ok := squo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SpaceQuota.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := squo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, spacequota.FieldID)
		for _, f := range fields {
			if !spacequota.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != spacequota.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := squo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := squo.mutation.SpaceID(); ok {
		_spec.SetField(spacequota.FieldSpaceID, field.TypeString, value)
	}
	if squo.mutation.SpaceIDCleared() {
		_spec.ClearField(spacequota.FieldSpaceID, field.TypeString)
	}
	if value, ok := squo.mutation.Description(); ok {
		_spec.SetField(spacequota.FieldDescription, field.TypeString, value)
	}
	if squo.mutation.DescriptionCleared() {
		_spec.ClearField(spacequota.FieldDescription, field.TypeString)
	}
	if value, ok := squo.mutation.Extras(); ok {
		_spec.SetField(spacequota.FieldExtras, field.TypeJSON, value)
	}
	if squo.mutation.ExtrasCleared() {
		_spec.ClearField(spacequota.FieldExtras, field.TypeJSON)
	}
	if value, ok := squo.mutation.CreatedBy(); ok {
		_spec.SetField(spacequota.FieldCreatedBy, field.TypeString, value)
	}
	if squo.mutation.CreatedByCleared() {
		_spec.ClearField(spacequota.FieldCreatedBy, field.TypeString)
	}
	if value, ok := squo.mutation.UpdatedBy(); ok {
		_spec.SetField(spacequota.FieldUpdatedBy, field.TypeString, value)
	}
	if squo.mutation.UpdatedByCleared() {
		_spec.ClearField(spacequota.FieldUpdatedBy, field.TypeString)
	}
	if squo.mutation.CreatedAtCleared() {
		_spec.ClearField(spacequota.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := squo.mutation.UpdatedAt(); ok {
		_spec.SetField(spacequota.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := squo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(spacequota.FieldUpdatedAt, field.TypeInt64, value)
	}
	if squo.mutation.UpdatedAtCleared() {
		_spec.ClearField(spacequota.FieldUpdatedAt, field.TypeInt64)
	}
	if value, ok := squo.mutation.QuotaType(); ok {
		_spec.SetField(spacequota.FieldQuotaType, field.TypeString, value)
	}
	if value, ok := squo.mutation.QuotaName(); ok {
		_spec.SetField(spacequota.FieldQuotaName, field.TypeString, value)
	}
	if value, ok := squo.mutation.MaxValue(); ok {
		_spec.SetField(spacequota.FieldMaxValue, field.TypeInt64, value)
	}
	if value, ok := squo.mutation.AddedMaxValue(); ok {
		_spec.AddField(spacequota.FieldMaxValue, field.TypeInt64, value)
	}
	if value, ok := squo.mutation.CurrentUsed(); ok {
		_spec.SetField(spacequota.FieldCurrentUsed, field.TypeInt64, value)
	}
	if value, ok := squo.mutation.AddedCurrentUsed(); ok {
		_spec.AddField(spacequota.FieldCurrentUsed, field.TypeInt64, value)
	}
	if value, ok := squo.mutation.Unit(); ok {
		_spec.SetField(spacequota.FieldUnit, field.TypeString, value)
	}
	if value, ok := squo.mutation.Enabled(); ok {
		_spec.SetField(spacequota.FieldEnabled, field.TypeBool, value)
	}
	_node = &SpaceQuota{config: squo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, squo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{spacequota.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	squo.mutation.done = true
	return _node, nil
}
