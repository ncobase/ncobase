// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"ncobase/space/data/ent/spacesetting"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// SpaceSetting is the model entity for the SpaceSetting schema.
type SpaceSetting struct {
	config `json:"-"`
	// ID of the ent.
	// primary key
	ID string `json:"id,omitempty"`
	// space id, e.g. space id, organization id, store id
	SpaceID string `json:"space_id,omitempty"`
	// description
	Description string `json:"description,omitempty"`
	// Extend properties
	Extras map[string]interface{} `json:"extras,omitempty"`
	// id of the creator
	CreatedBy string `json:"created_by,omitempty"`
	// id of the last updater
	UpdatedBy string `json:"updated_by,omitempty"`
	// created at
	CreatedAt int64 `json:"created_at,omitempty"`
	// updated at
	UpdatedAt int64 `json:"updated_at,omitempty"`
	// Unique key for the setting
	SettingKey string `json:"setting_key,omitempty"`
	// Human readable name of the setting
	SettingName string `json:"setting_name,omitempty"`
	// Current value of the setting
	SettingValue string `json:"setting_value,omitempty"`
	// Default value of the setting
	DefaultValue string `json:"default_value,omitempty"`
	// Data type of the setting value
	SettingType string `json:"setting_type,omitempty"`
	// Scope of the setting (system, space, user, feature)
	Scope string `json:"scope,omitempty"`
	// Category grouping for settings
	Category string `json:"category,omitempty"`
	// Whether setting is publicly readable
	IsPublic bool `json:"is_public,omitempty"`
	// Whether setting is required
	IsRequired bool `json:"is_required,omitempty"`
	// Whether setting is read-only
	IsReadonly bool `json:"is_readonly,omitempty"`
	// Validation rules for the setting value
	Validation   map[string]interface{} `json:"validation,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SpaceSetting) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case spacesetting.FieldExtras, spacesetting.FieldValidation:
			values[i] = new([]byte)
		case spacesetting.FieldIsPublic, spacesetting.FieldIsRequired, spacesetting.FieldIsReadonly:
			values[i] = new(sql.NullBool)
		case spacesetting.FieldCreatedAt, spacesetting.FieldUpdatedAt:
			values[i] = new(sql.NullInt64)
		case spacesetting.FieldID, spacesetting.FieldSpaceID, spacesetting.FieldDescription, spacesetting.FieldCreatedBy, spacesetting.FieldUpdatedBy, spacesetting.FieldSettingKey, spacesetting.FieldSettingName, spacesetting.FieldSettingValue, spacesetting.FieldDefaultValue, spacesetting.FieldSettingType, spacesetting.FieldScope, spacesetting.FieldCategory:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SpaceSetting fields.
func (ss *SpaceSetting) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case spacesetting.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				ss.ID = value.String
			}
		case spacesetting.FieldSpaceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field space_id", values[i])
			} else if value.Valid {
				ss.SpaceID = value.String
			}
		case spacesetting.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				ss.Description = value.String
			}
		case spacesetting.FieldExtras:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field extras", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ss.Extras); err != nil {
					return fmt.Errorf("unmarshal field extras: %w", err)
				}
			}
		case spacesetting.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				ss.CreatedBy = value.String
			}
		case spacesetting.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				ss.UpdatedBy = value.String
			}
		case spacesetting.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ss.CreatedAt = value.Int64
			}
		case spacesetting.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ss.UpdatedAt = value.Int64
			}
		case spacesetting.FieldSettingKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field setting_key", values[i])
			} else if value.Valid {
				ss.SettingKey = value.String
			}
		case spacesetting.FieldSettingName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field setting_name", values[i])
			} else if value.Valid {
				ss.SettingName = value.String
			}
		case spacesetting.FieldSettingValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field setting_value", values[i])
			} else if value.Valid {
				ss.SettingValue = value.String
			}
		case spacesetting.FieldDefaultValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field default_value", values[i])
			} else if value.Valid {
				ss.DefaultValue = value.String
			}
		case spacesetting.FieldSettingType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field setting_type", values[i])
			} else if value.Valid {
				ss.SettingType = value.String
			}
		case spacesetting.FieldScope:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field scope", values[i])
			} else if value.Valid {
				ss.Scope = value.String
			}
		case spacesetting.FieldCategory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field category", values[i])
			} else if value.Valid {
				ss.Category = value.String
			}
		case spacesetting.FieldIsPublic:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_public", values[i])
			} else if value.Valid {
				ss.IsPublic = value.Bool
			}
		case spacesetting.FieldIsRequired:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_required", values[i])
			} else if value.Valid {
				ss.IsRequired = value.Bool
			}
		case spacesetting.FieldIsReadonly:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_readonly", values[i])
			} else if value.Valid {
				ss.IsReadonly = value.Bool
			}
		case spacesetting.FieldValidation:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field validation", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ss.Validation); err != nil {
					return fmt.Errorf("unmarshal field validation: %w", err)
				}
			}
		default:
			ss.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SpaceSetting.
// This includes values selected through modifiers, order, etc.
func (ss *SpaceSetting) Value(name string) (ent.Value, error) {
	return ss.selectValues.Get(name)
}

// Update returns a builder for updating this SpaceSetting.
// Note that you need to call SpaceSetting.Unwrap() before calling this method if this SpaceSetting
// was returned from a transaction, and the transaction was committed or rolled back.
func (ss *SpaceSetting) Update() *SpaceSettingUpdateOne {
	return NewSpaceSettingClient(ss.config).UpdateOne(ss)
}

// Unwrap unwraps the SpaceSetting entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ss *SpaceSetting) Unwrap() *SpaceSetting {
	_tx, ok := ss.config.driver.(*txDriver)
	if !ok {
		panic("ent: SpaceSetting is not a transactional entity")
	}
	ss.config.driver = _tx.drv
	return ss
}

// String implements the fmt.Stringer.
func (ss *SpaceSetting) String() string {
	var builder strings.Builder
	builder.WriteString("SpaceSetting(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ss.ID))
	builder.WriteString("space_id=")
	builder.WriteString(ss.SpaceID)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(ss.Description)
	builder.WriteString(", ")
	builder.WriteString("extras=")
	builder.WriteString(fmt.Sprintf("%v", ss.Extras))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(ss.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(ss.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", ss.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", ss.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("setting_key=")
	builder.WriteString(ss.SettingKey)
	builder.WriteString(", ")
	builder.WriteString("setting_name=")
	builder.WriteString(ss.SettingName)
	builder.WriteString(", ")
	builder.WriteString("setting_value=")
	builder.WriteString(ss.SettingValue)
	builder.WriteString(", ")
	builder.WriteString("default_value=")
	builder.WriteString(ss.DefaultValue)
	builder.WriteString(", ")
	builder.WriteString("setting_type=")
	builder.WriteString(ss.SettingType)
	builder.WriteString(", ")
	builder.WriteString("scope=")
	builder.WriteString(ss.Scope)
	builder.WriteString(", ")
	builder.WriteString("category=")
	builder.WriteString(ss.Category)
	builder.WriteString(", ")
	builder.WriteString("is_public=")
	builder.WriteString(fmt.Sprintf("%v", ss.IsPublic))
	builder.WriteString(", ")
	builder.WriteString("is_required=")
	builder.WriteString(fmt.Sprintf("%v", ss.IsRequired))
	builder.WriteString(", ")
	builder.WriteString("is_readonly=")
	builder.WriteString(fmt.Sprintf("%v", ss.IsReadonly))
	builder.WriteString(", ")
	builder.WriteString("validation=")
	builder.WriteString(fmt.Sprintf("%v", ss.Validation))
	builder.WriteByte(')')
	return builder.String()
}

// SpaceSettings is a parsable slice of SpaceSetting.
type SpaceSettings []*SpaceSetting
