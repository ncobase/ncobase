// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/space/data/ent/spacesetting"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SpaceSettingCreate is the builder for creating a SpaceSetting entity.
type SpaceSettingCreate struct {
	config
	mutation *SpaceSettingMutation
	hooks    []Hook
}

// SetSpaceID sets the "space_id" field.
func (ssc *SpaceSettingCreate) SetSpaceID(s string) *SpaceSettingCreate {
	ssc.mutation.SetSpaceID(s)
	return ssc
}

// SetNillableSpaceID sets the "space_id" field if the given value is not nil.
func (ssc *SpaceSettingCreate) SetNillableSpaceID(s *string) *SpaceSettingCreate {
	if s != nil {
		ssc.SetSpaceID(*s)
	}
	return ssc
}

// SetDescription sets the "description" field.
func (ssc *SpaceSettingCreate) SetDescription(s string) *SpaceSettingCreate {
	ssc.mutation.SetDescription(s)
	return ssc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ssc *SpaceSettingCreate) SetNillableDescription(s *string) *SpaceSettingCreate {
	if s != nil {
		ssc.SetDescription(*s)
	}
	return ssc
}

// SetExtras sets the "extras" field.
func (ssc *SpaceSettingCreate) SetExtras(m map[string]interface{}) *SpaceSettingCreate {
	ssc.mutation.SetExtras(m)
	return ssc
}

// SetCreatedBy sets the "created_by" field.
func (ssc *SpaceSettingCreate) SetCreatedBy(s string) *SpaceSettingCreate {
	ssc.mutation.SetCreatedBy(s)
	return ssc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (ssc *SpaceSettingCreate) SetNillableCreatedBy(s *string) *SpaceSettingCreate {
	if s != nil {
		ssc.SetCreatedBy(*s)
	}
	return ssc
}

// SetUpdatedBy sets the "updated_by" field.
func (ssc *SpaceSettingCreate) SetUpdatedBy(s string) *SpaceSettingCreate {
	ssc.mutation.SetUpdatedBy(s)
	return ssc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ssc *SpaceSettingCreate) SetNillableUpdatedBy(s *string) *SpaceSettingCreate {
	if s != nil {
		ssc.SetUpdatedBy(*s)
	}
	return ssc
}

// SetCreatedAt sets the "created_at" field.
func (ssc *SpaceSettingCreate) SetCreatedAt(i int64) *SpaceSettingCreate {
	ssc.mutation.SetCreatedAt(i)
	return ssc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ssc *SpaceSettingCreate) SetNillableCreatedAt(i *int64) *SpaceSettingCreate {
	if i != nil {
		ssc.SetCreatedAt(*i)
	}
	return ssc
}

// SetUpdatedAt sets the "updated_at" field.
func (ssc *SpaceSettingCreate) SetUpdatedAt(i int64) *SpaceSettingCreate {
	ssc.mutation.SetUpdatedAt(i)
	return ssc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ssc *SpaceSettingCreate) SetNillableUpdatedAt(i *int64) *SpaceSettingCreate {
	if i != nil {
		ssc.SetUpdatedAt(*i)
	}
	return ssc
}

// SetSettingKey sets the "setting_key" field.
func (ssc *SpaceSettingCreate) SetSettingKey(s string) *SpaceSettingCreate {
	ssc.mutation.SetSettingKey(s)
	return ssc
}

// SetSettingName sets the "setting_name" field.
func (ssc *SpaceSettingCreate) SetSettingName(s string) *SpaceSettingCreate {
	ssc.mutation.SetSettingName(s)
	return ssc
}

// SetSettingValue sets the "setting_value" field.
func (ssc *SpaceSettingCreate) SetSettingValue(s string) *SpaceSettingCreate {
	ssc.mutation.SetSettingValue(s)
	return ssc
}

// SetNillableSettingValue sets the "setting_value" field if the given value is not nil.
func (ssc *SpaceSettingCreate) SetNillableSettingValue(s *string) *SpaceSettingCreate {
	if s != nil {
		ssc.SetSettingValue(*s)
	}
	return ssc
}

// SetDefaultValue sets the "default_value" field.
func (ssc *SpaceSettingCreate) SetDefaultValue(s string) *SpaceSettingCreate {
	ssc.mutation.SetDefaultValue(s)
	return ssc
}

// SetNillableDefaultValue sets the "default_value" field if the given value is not nil.
func (ssc *SpaceSettingCreate) SetNillableDefaultValue(s *string) *SpaceSettingCreate {
	if s != nil {
		ssc.SetDefaultValue(*s)
	}
	return ssc
}

// SetSettingType sets the "setting_type" field.
func (ssc *SpaceSettingCreate) SetSettingType(s string) *SpaceSettingCreate {
	ssc.mutation.SetSettingType(s)
	return ssc
}

// SetNillableSettingType sets the "setting_type" field if the given value is not nil.
func (ssc *SpaceSettingCreate) SetNillableSettingType(s *string) *SpaceSettingCreate {
	if s != nil {
		ssc.SetSettingType(*s)
	}
	return ssc
}

// SetScope sets the "scope" field.
func (ssc *SpaceSettingCreate) SetScope(s string) *SpaceSettingCreate {
	ssc.mutation.SetScope(s)
	return ssc
}

// SetNillableScope sets the "scope" field if the given value is not nil.
func (ssc *SpaceSettingCreate) SetNillableScope(s *string) *SpaceSettingCreate {
	if s != nil {
		ssc.SetScope(*s)
	}
	return ssc
}

// SetCategory sets the "category" field.
func (ssc *SpaceSettingCreate) SetCategory(s string) *SpaceSettingCreate {
	ssc.mutation.SetCategory(s)
	return ssc
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (ssc *SpaceSettingCreate) SetNillableCategory(s *string) *SpaceSettingCreate {
	if s != nil {
		ssc.SetCategory(*s)
	}
	return ssc
}

// SetIsPublic sets the "is_public" field.
func (ssc *SpaceSettingCreate) SetIsPublic(b bool) *SpaceSettingCreate {
	ssc.mutation.SetIsPublic(b)
	return ssc
}

// SetNillableIsPublic sets the "is_public" field if the given value is not nil.
func (ssc *SpaceSettingCreate) SetNillableIsPublic(b *bool) *SpaceSettingCreate {
	if b != nil {
		ssc.SetIsPublic(*b)
	}
	return ssc
}

// SetIsRequired sets the "is_required" field.
func (ssc *SpaceSettingCreate) SetIsRequired(b bool) *SpaceSettingCreate {
	ssc.mutation.SetIsRequired(b)
	return ssc
}

// SetNillableIsRequired sets the "is_required" field if the given value is not nil.
func (ssc *SpaceSettingCreate) SetNillableIsRequired(b *bool) *SpaceSettingCreate {
	if b != nil {
		ssc.SetIsRequired(*b)
	}
	return ssc
}

// SetIsReadonly sets the "is_readonly" field.
func (ssc *SpaceSettingCreate) SetIsReadonly(b bool) *SpaceSettingCreate {
	ssc.mutation.SetIsReadonly(b)
	return ssc
}

// SetNillableIsReadonly sets the "is_readonly" field if the given value is not nil.
func (ssc *SpaceSettingCreate) SetNillableIsReadonly(b *bool) *SpaceSettingCreate {
	if b != nil {
		ssc.SetIsReadonly(*b)
	}
	return ssc
}

// SetValidation sets the "validation" field.
func (ssc *SpaceSettingCreate) SetValidation(m map[string]interface{}) *SpaceSettingCreate {
	ssc.mutation.SetValidation(m)
	return ssc
}

// SetID sets the "id" field.
func (ssc *SpaceSettingCreate) SetID(s string) *SpaceSettingCreate {
	ssc.mutation.SetID(s)
	return ssc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ssc *SpaceSettingCreate) SetNillableID(s *string) *SpaceSettingCreate {
	if s != nil {
		ssc.SetID(*s)
	}
	return ssc
}

// Mutation returns the SpaceSettingMutation object of the builder.
func (ssc *SpaceSettingCreate) Mutation() *SpaceSettingMutation {
	return ssc.mutation
}

// Save creates the SpaceSetting in the database.
func (ssc *SpaceSettingCreate) Save(ctx context.Context) (*SpaceSetting, error) {
	ssc.defaults()
	return withHooks(ctx, ssc.sqlSave, ssc.mutation, ssc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ssc *SpaceSettingCreate) SaveX(ctx context.Context) *SpaceSetting {
	v, err := ssc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ssc *SpaceSettingCreate) Exec(ctx context.Context) error {
	_, err := ssc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ssc *SpaceSettingCreate) ExecX(ctx context.Context) {
	if err := ssc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ssc *SpaceSettingCreate) defaults() {
	if _, ok := ssc.mutation.Extras(); !ok {
		v := spacesetting.DefaultExtras
		ssc.mutation.SetExtras(v)
	}
	if _, ok := ssc.mutation.CreatedAt(); !ok {
		v := spacesetting.DefaultCreatedAt()
		ssc.mutation.SetCreatedAt(v)
	}
	if _, ok := ssc.mutation.UpdatedAt(); !ok {
		v := spacesetting.DefaultUpdatedAt()
		ssc.mutation.SetUpdatedAt(v)
	}
	if _, ok := ssc.mutation.SettingType(); !ok {
		v := spacesetting.DefaultSettingType
		ssc.mutation.SetSettingType(v)
	}
	if _, ok := ssc.mutation.Scope(); !ok {
		v := spacesetting.DefaultScope
		ssc.mutation.SetScope(v)
	}
	if _, ok := ssc.mutation.Category(); !ok {
		v := spacesetting.DefaultCategory
		ssc.mutation.SetCategory(v)
	}
	if _, ok := ssc.mutation.IsPublic(); !ok {
		v := spacesetting.DefaultIsPublic
		ssc.mutation.SetIsPublic(v)
	}
	if _, ok := ssc.mutation.IsRequired(); !ok {
		v := spacesetting.DefaultIsRequired
		ssc.mutation.SetIsRequired(v)
	}
	if _, ok := ssc.mutation.IsReadonly(); !ok {
		v := spacesetting.DefaultIsReadonly
		ssc.mutation.SetIsReadonly(v)
	}
	if _, ok := ssc.mutation.ID(); !ok {
		v := spacesetting.DefaultID()
		ssc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ssc *SpaceSettingCreate) check() error {
	if _, ok := ssc.mutation.SettingKey(); !ok {
		return &ValidationError{Name: "setting_key", err: errors.New(`ent: missing required field "SpaceSetting.setting_key"`)}
	}
	if v, ok := ssc.mutation.SettingKey(); ok {
		if err := spacesetting.SettingKeyValidator(v); err != nil {
			return &ValidationError{Name: "setting_key", err: fmt.Errorf(`ent: validator failed for field "SpaceSetting.setting_key": %w`, err)}
		}
	}
	if _, ok := ssc.mutation.SettingName(); !ok {
		return &ValidationError{Name: "setting_name", err: errors.New(`ent: missing required field "SpaceSetting.setting_name"`)}
	}
	if v, ok := ssc.mutation.SettingName(); ok {
		if err := spacesetting.SettingNameValidator(v); err != nil {
			return &ValidationError{Name: "setting_name", err: fmt.Errorf(`ent: validator failed for field "SpaceSetting.setting_name": %w`, err)}
		}
	}
	if _, ok := ssc.mutation.SettingType(); !ok {
		return &ValidationError{Name: "setting_type", err: errors.New(`ent: missing required field "SpaceSetting.setting_type"`)}
	}
	if _, ok := ssc.mutation.Scope(); !ok {
		return &ValidationError{Name: "scope", err: errors.New(`ent: missing required field "SpaceSetting.scope"`)}
	}
	if _, ok := ssc.mutation.Category(); !ok {
		return &ValidationError{Name: "category", err: errors.New(`ent: missing required field "SpaceSetting.category"`)}
	}
	if _, ok := ssc.mutation.IsPublic(); !ok {
		return &ValidationError{Name: "is_public", err: errors.New(`ent: missing required field "SpaceSetting.is_public"`)}
	}
	if _, ok := ssc.mutation.IsRequired(); !ok {
		return &ValidationError{Name: "is_required", err: errors.New(`ent: missing required field "SpaceSetting.is_required"`)}
	}
	if _, ok := ssc.mutation.IsReadonly(); !ok {
		return &ValidationError{Name: "is_readonly", err: errors.New(`ent: missing required field "SpaceSetting.is_readonly"`)}
	}
	if v, ok := ssc.mutation.ID(); ok {
		if err := spacesetting.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "SpaceSetting.id": %w`, err)}
		}
	}
	return nil
}

func (ssc *SpaceSettingCreate) sqlSave(ctx context.Context) (*SpaceSetting, error) {
	if err := ssc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ssc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ssc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected SpaceSetting.ID type: %T", _spec.ID.Value)
		}
	}
	ssc.mutation.id = &_node.ID
	ssc.mutation.done = true
	return _node, nil
}

func (ssc *SpaceSettingCreate) createSpec() (*SpaceSetting, *sqlgraph.CreateSpec) {
	var (
		_node = &SpaceSetting{config: ssc.config}
		_spec = sqlgraph.NewCreateSpec(spacesetting.Table, sqlgraph.NewFieldSpec(spacesetting.FieldID, field.TypeString))
	)
	if id, ok := ssc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ssc.mutation.SpaceID(); ok {
		_spec.SetField(spacesetting.FieldSpaceID, field.TypeString, value)
		_node.SpaceID = value
	}
	if value, ok := ssc.mutation.Description(); ok {
		_spec.SetField(spacesetting.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := ssc.mutation.Extras(); ok {
		_spec.SetField(spacesetting.FieldExtras, field.TypeJSON, value)
		_node.Extras = value
	}
	if value, ok := ssc.mutation.CreatedBy(); ok {
		_spec.SetField(spacesetting.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := ssc.mutation.UpdatedBy(); ok {
		_spec.SetField(spacesetting.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := ssc.mutation.CreatedAt(); ok {
		_spec.SetField(spacesetting.FieldCreatedAt, field.TypeInt64, value)
		_node.CreatedAt = value
	}
	if value, ok := ssc.mutation.UpdatedAt(); ok {
		_spec.SetField(spacesetting.FieldUpdatedAt, field.TypeInt64, value)
		_node.UpdatedAt = value
	}
	if value, ok := ssc.mutation.SettingKey(); ok {
		_spec.SetField(spacesetting.FieldSettingKey, field.TypeString, value)
		_node.SettingKey = value
	}
	if value, ok := ssc.mutation.SettingName(); ok {
		_spec.SetField(spacesetting.FieldSettingName, field.TypeString, value)
		_node.SettingName = value
	}
	if value, ok := ssc.mutation.SettingValue(); ok {
		_spec.SetField(spacesetting.FieldSettingValue, field.TypeString, value)
		_node.SettingValue = value
	}
	if value, ok := ssc.mutation.DefaultValue(); ok {
		_spec.SetField(spacesetting.FieldDefaultValue, field.TypeString, value)
		_node.DefaultValue = value
	}
	if value, ok := ssc.mutation.SettingType(); ok {
		_spec.SetField(spacesetting.FieldSettingType, field.TypeString, value)
		_node.SettingType = value
	}
	if value, ok := ssc.mutation.Scope(); ok {
		_spec.SetField(spacesetting.FieldScope, field.TypeString, value)
		_node.Scope = value
	}
	if value, ok := ssc.mutation.Category(); ok {
		_spec.SetField(spacesetting.FieldCategory, field.TypeString, value)
		_node.Category = value
	}
	if value, ok := ssc.mutation.IsPublic(); ok {
		_spec.SetField(spacesetting.FieldIsPublic, field.TypeBool, value)
		_node.IsPublic = value
	}
	if value, ok := ssc.mutation.IsRequired(); ok {
		_spec.SetField(spacesetting.FieldIsRequired, field.TypeBool, value)
		_node.IsRequired = value
	}
	if value, ok := ssc.mutation.IsReadonly(); ok {
		_spec.SetField(spacesetting.FieldIsReadonly, field.TypeBool, value)
		_node.IsReadonly = value
	}
	if value, ok := ssc.mutation.Validation(); ok {
		_spec.SetField(spacesetting.FieldValidation, field.TypeJSON, value)
		_node.Validation = value
	}
	return _node, _spec
}

// SpaceSettingCreateBulk is the builder for creating many SpaceSetting entities in bulk.
type SpaceSettingCreateBulk struct {
	config
	err      error
	builders []*SpaceSettingCreate
}

// Save creates the SpaceSetting entities in the database.
func (sscb *SpaceSettingCreateBulk) Save(ctx context.Context) ([]*SpaceSetting, error) {
	if sscb.err != nil {
		return nil, sscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sscb.builders))
	nodes := make([]*SpaceSetting, len(sscb.builders))
	mutators := make([]Mutator, len(sscb.builders))
	for i := range sscb.builders {
		func(i int, root context.Context) {
			builder := sscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SpaceSettingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sscb *SpaceSettingCreateBulk) SaveX(ctx context.Context) []*SpaceSetting {
	v, err := sscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sscb *SpaceSettingCreateBulk) Exec(ctx context.Context) error {
	_, err := sscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sscb *SpaceSettingCreateBulk) ExecX(ctx context.Context) {
	if err := sscb.Exec(ctx); err != nil {
		panic(err)
	}
}
