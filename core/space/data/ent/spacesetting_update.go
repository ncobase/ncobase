// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/space/data/ent/predicate"
	"ncobase/space/data/ent/spacesetting"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SpaceSettingUpdate is the builder for updating SpaceSetting entities.
type SpaceSettingUpdate struct {
	config
	hooks    []Hook
	mutation *SpaceSettingMutation
}

// Where appends a list predicates to the SpaceSettingUpdate builder.
func (ssu *SpaceSettingUpdate) Where(ps ...predicate.SpaceSetting) *SpaceSettingUpdate {
	ssu.mutation.Where(ps...)
	return ssu
}

// SetSpaceID sets the "space_id" field.
func (ssu *SpaceSettingUpdate) SetSpaceID(s string) *SpaceSettingUpdate {
	ssu.mutation.SetSpaceID(s)
	return ssu
}

// SetNillableSpaceID sets the "space_id" field if the given value is not nil.
func (ssu *SpaceSettingUpdate) SetNillableSpaceID(s *string) *SpaceSettingUpdate {
	if s != nil {
		ssu.SetSpaceID(*s)
	}
	return ssu
}

// ClearSpaceID clears the value of the "space_id" field.
func (ssu *SpaceSettingUpdate) ClearSpaceID() *SpaceSettingUpdate {
	ssu.mutation.ClearSpaceID()
	return ssu
}

// SetDescription sets the "description" field.
func (ssu *SpaceSettingUpdate) SetDescription(s string) *SpaceSettingUpdate {
	ssu.mutation.SetDescription(s)
	return ssu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ssu *SpaceSettingUpdate) SetNillableDescription(s *string) *SpaceSettingUpdate {
	if s != nil {
		ssu.SetDescription(*s)
	}
	return ssu
}

// ClearDescription clears the value of the "description" field.
func (ssu *SpaceSettingUpdate) ClearDescription() *SpaceSettingUpdate {
	ssu.mutation.ClearDescription()
	return ssu
}

// SetExtras sets the "extras" field.
func (ssu *SpaceSettingUpdate) SetExtras(m map[string]interface{}) *SpaceSettingUpdate {
	ssu.mutation.SetExtras(m)
	return ssu
}

// ClearExtras clears the value of the "extras" field.
func (ssu *SpaceSettingUpdate) ClearExtras() *SpaceSettingUpdate {
	ssu.mutation.ClearExtras()
	return ssu
}

// SetCreatedBy sets the "created_by" field.
func (ssu *SpaceSettingUpdate) SetCreatedBy(s string) *SpaceSettingUpdate {
	ssu.mutation.SetCreatedBy(s)
	return ssu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (ssu *SpaceSettingUpdate) SetNillableCreatedBy(s *string) *SpaceSettingUpdate {
	if s != nil {
		ssu.SetCreatedBy(*s)
	}
	return ssu
}

// ClearCreatedBy clears the value of the "created_by" field.
func (ssu *SpaceSettingUpdate) ClearCreatedBy() *SpaceSettingUpdate {
	ssu.mutation.ClearCreatedBy()
	return ssu
}

// SetUpdatedBy sets the "updated_by" field.
func (ssu *SpaceSettingUpdate) SetUpdatedBy(s string) *SpaceSettingUpdate {
	ssu.mutation.SetUpdatedBy(s)
	return ssu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ssu *SpaceSettingUpdate) SetNillableUpdatedBy(s *string) *SpaceSettingUpdate {
	if s != nil {
		ssu.SetUpdatedBy(*s)
	}
	return ssu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (ssu *SpaceSettingUpdate) ClearUpdatedBy() *SpaceSettingUpdate {
	ssu.mutation.ClearUpdatedBy()
	return ssu
}

// SetUpdatedAt sets the "updated_at" field.
func (ssu *SpaceSettingUpdate) SetUpdatedAt(i int64) *SpaceSettingUpdate {
	ssu.mutation.ResetUpdatedAt()
	ssu.mutation.SetUpdatedAt(i)
	return ssu
}

// AddUpdatedAt adds i to the "updated_at" field.
func (ssu *SpaceSettingUpdate) AddUpdatedAt(i int64) *SpaceSettingUpdate {
	ssu.mutation.AddUpdatedAt(i)
	return ssu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (ssu *SpaceSettingUpdate) ClearUpdatedAt() *SpaceSettingUpdate {
	ssu.mutation.ClearUpdatedAt()
	return ssu
}

// SetSettingKey sets the "setting_key" field.
func (ssu *SpaceSettingUpdate) SetSettingKey(s string) *SpaceSettingUpdate {
	ssu.mutation.SetSettingKey(s)
	return ssu
}

// SetNillableSettingKey sets the "setting_key" field if the given value is not nil.
func (ssu *SpaceSettingUpdate) SetNillableSettingKey(s *string) *SpaceSettingUpdate {
	if s != nil {
		ssu.SetSettingKey(*s)
	}
	return ssu
}

// SetSettingName sets the "setting_name" field.
func (ssu *SpaceSettingUpdate) SetSettingName(s string) *SpaceSettingUpdate {
	ssu.mutation.SetSettingName(s)
	return ssu
}

// SetNillableSettingName sets the "setting_name" field if the given value is not nil.
func (ssu *SpaceSettingUpdate) SetNillableSettingName(s *string) *SpaceSettingUpdate {
	if s != nil {
		ssu.SetSettingName(*s)
	}
	return ssu
}

// SetSettingValue sets the "setting_value" field.
func (ssu *SpaceSettingUpdate) SetSettingValue(s string) *SpaceSettingUpdate {
	ssu.mutation.SetSettingValue(s)
	return ssu
}

// SetNillableSettingValue sets the "setting_value" field if the given value is not nil.
func (ssu *SpaceSettingUpdate) SetNillableSettingValue(s *string) *SpaceSettingUpdate {
	if s != nil {
		ssu.SetSettingValue(*s)
	}
	return ssu
}

// ClearSettingValue clears the value of the "setting_value" field.
func (ssu *SpaceSettingUpdate) ClearSettingValue() *SpaceSettingUpdate {
	ssu.mutation.ClearSettingValue()
	return ssu
}

// SetDefaultValue sets the "default_value" field.
func (ssu *SpaceSettingUpdate) SetDefaultValue(s string) *SpaceSettingUpdate {
	ssu.mutation.SetDefaultValue(s)
	return ssu
}

// SetNillableDefaultValue sets the "default_value" field if the given value is not nil.
func (ssu *SpaceSettingUpdate) SetNillableDefaultValue(s *string) *SpaceSettingUpdate {
	if s != nil {
		ssu.SetDefaultValue(*s)
	}
	return ssu
}

// ClearDefaultValue clears the value of the "default_value" field.
func (ssu *SpaceSettingUpdate) ClearDefaultValue() *SpaceSettingUpdate {
	ssu.mutation.ClearDefaultValue()
	return ssu
}

// SetSettingType sets the "setting_type" field.
func (ssu *SpaceSettingUpdate) SetSettingType(s string) *SpaceSettingUpdate {
	ssu.mutation.SetSettingType(s)
	return ssu
}

// SetNillableSettingType sets the "setting_type" field if the given value is not nil.
func (ssu *SpaceSettingUpdate) SetNillableSettingType(s *string) *SpaceSettingUpdate {
	if s != nil {
		ssu.SetSettingType(*s)
	}
	return ssu
}

// SetScope sets the "scope" field.
func (ssu *SpaceSettingUpdate) SetScope(s string) *SpaceSettingUpdate {
	ssu.mutation.SetScope(s)
	return ssu
}

// SetNillableScope sets the "scope" field if the given value is not nil.
func (ssu *SpaceSettingUpdate) SetNillableScope(s *string) *SpaceSettingUpdate {
	if s != nil {
		ssu.SetScope(*s)
	}
	return ssu
}

// SetCategory sets the "category" field.
func (ssu *SpaceSettingUpdate) SetCategory(s string) *SpaceSettingUpdate {
	ssu.mutation.SetCategory(s)
	return ssu
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (ssu *SpaceSettingUpdate) SetNillableCategory(s *string) *SpaceSettingUpdate {
	if s != nil {
		ssu.SetCategory(*s)
	}
	return ssu
}

// SetIsPublic sets the "is_public" field.
func (ssu *SpaceSettingUpdate) SetIsPublic(b bool) *SpaceSettingUpdate {
	ssu.mutation.SetIsPublic(b)
	return ssu
}

// SetNillableIsPublic sets the "is_public" field if the given value is not nil.
func (ssu *SpaceSettingUpdate) SetNillableIsPublic(b *bool) *SpaceSettingUpdate {
	if b != nil {
		ssu.SetIsPublic(*b)
	}
	return ssu
}

// SetIsRequired sets the "is_required" field.
func (ssu *SpaceSettingUpdate) SetIsRequired(b bool) *SpaceSettingUpdate {
	ssu.mutation.SetIsRequired(b)
	return ssu
}

// SetNillableIsRequired sets the "is_required" field if the given value is not nil.
func (ssu *SpaceSettingUpdate) SetNillableIsRequired(b *bool) *SpaceSettingUpdate {
	if b != nil {
		ssu.SetIsRequired(*b)
	}
	return ssu
}

// SetIsReadonly sets the "is_readonly" field.
func (ssu *SpaceSettingUpdate) SetIsReadonly(b bool) *SpaceSettingUpdate {
	ssu.mutation.SetIsReadonly(b)
	return ssu
}

// SetNillableIsReadonly sets the "is_readonly" field if the given value is not nil.
func (ssu *SpaceSettingUpdate) SetNillableIsReadonly(b *bool) *SpaceSettingUpdate {
	if b != nil {
		ssu.SetIsReadonly(*b)
	}
	return ssu
}

// SetValidation sets the "validation" field.
func (ssu *SpaceSettingUpdate) SetValidation(m map[string]interface{}) *SpaceSettingUpdate {
	ssu.mutation.SetValidation(m)
	return ssu
}

// ClearValidation clears the value of the "validation" field.
func (ssu *SpaceSettingUpdate) ClearValidation() *SpaceSettingUpdate {
	ssu.mutation.ClearValidation()
	return ssu
}

// Mutation returns the SpaceSettingMutation object of the builder.
func (ssu *SpaceSettingUpdate) Mutation() *SpaceSettingMutation {
	return ssu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ssu *SpaceSettingUpdate) Save(ctx context.Context) (int, error) {
	ssu.defaults()
	return withHooks(ctx, ssu.sqlSave, ssu.mutation, ssu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ssu *SpaceSettingUpdate) SaveX(ctx context.Context) int {
	affected, err := ssu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ssu *SpaceSettingUpdate) Exec(ctx context.Context) error {
	_, err := ssu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ssu *SpaceSettingUpdate) ExecX(ctx context.Context) {
	if err := ssu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ssu *SpaceSettingUpdate) defaults() {
	if _, ok := ssu.mutation.UpdatedAt(); !ok && !ssu.mutation.UpdatedAtCleared() {
		v := spacesetting.UpdateDefaultUpdatedAt()
		ssu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ssu *SpaceSettingUpdate) check() error {
	if v, ok := ssu.mutation.SettingKey(); ok {
		if err := spacesetting.SettingKeyValidator(v); err != nil {
			return &ValidationError{Name: "setting_key", err: fmt.Errorf(`ent: validator failed for field "SpaceSetting.setting_key": %w`, err)}
		}
	}
	if v, ok := ssu.mutation.SettingName(); ok {
		if err := spacesetting.SettingNameValidator(v); err != nil {
			return &ValidationError{Name: "setting_name", err: fmt.Errorf(`ent: validator failed for field "SpaceSetting.setting_name": %w`, err)}
		}
	}
	return nil
}

func (ssu *SpaceSettingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ssu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(spacesetting.Table, spacesetting.Columns, sqlgraph.NewFieldSpec(spacesetting.FieldID, field.TypeString))
	if ps := ssu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ssu.mutation.SpaceID(); ok {
		_spec.SetField(spacesetting.FieldSpaceID, field.TypeString, value)
	}
	if ssu.mutation.SpaceIDCleared() {
		_spec.ClearField(spacesetting.FieldSpaceID, field.TypeString)
	}
	if value, ok := ssu.mutation.Description(); ok {
		_spec.SetField(spacesetting.FieldDescription, field.TypeString, value)
	}
	if ssu.mutation.DescriptionCleared() {
		_spec.ClearField(spacesetting.FieldDescription, field.TypeString)
	}
	if value, ok := ssu.mutation.Extras(); ok {
		_spec.SetField(spacesetting.FieldExtras, field.TypeJSON, value)
	}
	if ssu.mutation.ExtrasCleared() {
		_spec.ClearField(spacesetting.FieldExtras, field.TypeJSON)
	}
	if value, ok := ssu.mutation.CreatedBy(); ok {
		_spec.SetField(spacesetting.FieldCreatedBy, field.TypeString, value)
	}
	if ssu.mutation.CreatedByCleared() {
		_spec.ClearField(spacesetting.FieldCreatedBy, field.TypeString)
	}
	if value, ok := ssu.mutation.UpdatedBy(); ok {
		_spec.SetField(spacesetting.FieldUpdatedBy, field.TypeString, value)
	}
	if ssu.mutation.UpdatedByCleared() {
		_spec.ClearField(spacesetting.FieldUpdatedBy, field.TypeString)
	}
	if ssu.mutation.CreatedAtCleared() {
		_spec.ClearField(spacesetting.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := ssu.mutation.UpdatedAt(); ok {
		_spec.SetField(spacesetting.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := ssu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(spacesetting.FieldUpdatedAt, field.TypeInt64, value)
	}
	if ssu.mutation.UpdatedAtCleared() {
		_spec.ClearField(spacesetting.FieldUpdatedAt, field.TypeInt64)
	}
	if value, ok := ssu.mutation.SettingKey(); ok {
		_spec.SetField(spacesetting.FieldSettingKey, field.TypeString, value)
	}
	if value, ok := ssu.mutation.SettingName(); ok {
		_spec.SetField(spacesetting.FieldSettingName, field.TypeString, value)
	}
	if value, ok := ssu.mutation.SettingValue(); ok {
		_spec.SetField(spacesetting.FieldSettingValue, field.TypeString, value)
	}
	if ssu.mutation.SettingValueCleared() {
		_spec.ClearField(spacesetting.FieldSettingValue, field.TypeString)
	}
	if value, ok := ssu.mutation.DefaultValue(); ok {
		_spec.SetField(spacesetting.FieldDefaultValue, field.TypeString, value)
	}
	if ssu.mutation.DefaultValueCleared() {
		_spec.ClearField(spacesetting.FieldDefaultValue, field.TypeString)
	}
	if value, ok := ssu.mutation.SettingType(); ok {
		_spec.SetField(spacesetting.FieldSettingType, field.TypeString, value)
	}
	if value, ok := ssu.mutation.Scope(); ok {
		_spec.SetField(spacesetting.FieldScope, field.TypeString, value)
	}
	if value, ok := ssu.mutation.Category(); ok {
		_spec.SetField(spacesetting.FieldCategory, field.TypeString, value)
	}
	if value, ok := ssu.mutation.IsPublic(); ok {
		_spec.SetField(spacesetting.FieldIsPublic, field.TypeBool, value)
	}
	if value, ok := ssu.mutation.IsRequired(); ok {
		_spec.SetField(spacesetting.FieldIsRequired, field.TypeBool, value)
	}
	if value, ok := ssu.mutation.IsReadonly(); ok {
		_spec.SetField(spacesetting.FieldIsReadonly, field.TypeBool, value)
	}
	if value, ok := ssu.mutation.Validation(); ok {
		_spec.SetField(spacesetting.FieldValidation, field.TypeJSON, value)
	}
	if ssu.mutation.ValidationCleared() {
		_spec.ClearField(spacesetting.FieldValidation, field.TypeJSON)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ssu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{spacesetting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ssu.mutation.done = true
	return n, nil
}

// SpaceSettingUpdateOne is the builder for updating a single SpaceSetting entity.
type SpaceSettingUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SpaceSettingMutation
}

// SetSpaceID sets the "space_id" field.
func (ssuo *SpaceSettingUpdateOne) SetSpaceID(s string) *SpaceSettingUpdateOne {
	ssuo.mutation.SetSpaceID(s)
	return ssuo
}

// SetNillableSpaceID sets the "space_id" field if the given value is not nil.
func (ssuo *SpaceSettingUpdateOne) SetNillableSpaceID(s *string) *SpaceSettingUpdateOne {
	if s != nil {
		ssuo.SetSpaceID(*s)
	}
	return ssuo
}

// ClearSpaceID clears the value of the "space_id" field.
func (ssuo *SpaceSettingUpdateOne) ClearSpaceID() *SpaceSettingUpdateOne {
	ssuo.mutation.ClearSpaceID()
	return ssuo
}

// SetDescription sets the "description" field.
func (ssuo *SpaceSettingUpdateOne) SetDescription(s string) *SpaceSettingUpdateOne {
	ssuo.mutation.SetDescription(s)
	return ssuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ssuo *SpaceSettingUpdateOne) SetNillableDescription(s *string) *SpaceSettingUpdateOne {
	if s != nil {
		ssuo.SetDescription(*s)
	}
	return ssuo
}

// ClearDescription clears the value of the "description" field.
func (ssuo *SpaceSettingUpdateOne) ClearDescription() *SpaceSettingUpdateOne {
	ssuo.mutation.ClearDescription()
	return ssuo
}

// SetExtras sets the "extras" field.
func (ssuo *SpaceSettingUpdateOne) SetExtras(m map[string]interface{}) *SpaceSettingUpdateOne {
	ssuo.mutation.SetExtras(m)
	return ssuo
}

// ClearExtras clears the value of the "extras" field.
func (ssuo *SpaceSettingUpdateOne) ClearExtras() *SpaceSettingUpdateOne {
	ssuo.mutation.ClearExtras()
	return ssuo
}

// SetCreatedBy sets the "created_by" field.
func (ssuo *SpaceSettingUpdateOne) SetCreatedBy(s string) *SpaceSettingUpdateOne {
	ssuo.mutation.SetCreatedBy(s)
	return ssuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (ssuo *SpaceSettingUpdateOne) SetNillableCreatedBy(s *string) *SpaceSettingUpdateOne {
	if s != nil {
		ssuo.SetCreatedBy(*s)
	}
	return ssuo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (ssuo *SpaceSettingUpdateOne) ClearCreatedBy() *SpaceSettingUpdateOne {
	ssuo.mutation.ClearCreatedBy()
	return ssuo
}

// SetUpdatedBy sets the "updated_by" field.
func (ssuo *SpaceSettingUpdateOne) SetUpdatedBy(s string) *SpaceSettingUpdateOne {
	ssuo.mutation.SetUpdatedBy(s)
	return ssuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ssuo *SpaceSettingUpdateOne) SetNillableUpdatedBy(s *string) *SpaceSettingUpdateOne {
	if s != nil {
		ssuo.SetUpdatedBy(*s)
	}
	return ssuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (ssuo *SpaceSettingUpdateOne) ClearUpdatedBy() *SpaceSettingUpdateOne {
	ssuo.mutation.ClearUpdatedBy()
	return ssuo
}

// SetUpdatedAt sets the "updated_at" field.
func (ssuo *SpaceSettingUpdateOne) SetUpdatedAt(i int64) *SpaceSettingUpdateOne {
	ssuo.mutation.ResetUpdatedAt()
	ssuo.mutation.SetUpdatedAt(i)
	return ssuo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (ssuo *SpaceSettingUpdateOne) AddUpdatedAt(i int64) *SpaceSettingUpdateOne {
	ssuo.mutation.AddUpdatedAt(i)
	return ssuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (ssuo *SpaceSettingUpdateOne) ClearUpdatedAt() *SpaceSettingUpdateOne {
	ssuo.mutation.ClearUpdatedAt()
	return ssuo
}

// SetSettingKey sets the "setting_key" field.
func (ssuo *SpaceSettingUpdateOne) SetSettingKey(s string) *SpaceSettingUpdateOne {
	ssuo.mutation.SetSettingKey(s)
	return ssuo
}

// SetNillableSettingKey sets the "setting_key" field if the given value is not nil.
func (ssuo *SpaceSettingUpdateOne) SetNillableSettingKey(s *string) *SpaceSettingUpdateOne {
	if s != nil {
		ssuo.SetSettingKey(*s)
	}
	return ssuo
}

// SetSettingName sets the "setting_name" field.
func (ssuo *SpaceSettingUpdateOne) SetSettingName(s string) *SpaceSettingUpdateOne {
	ssuo.mutation.SetSettingName(s)
	return ssuo
}

// SetNillableSettingName sets the "setting_name" field if the given value is not nil.
func (ssuo *SpaceSettingUpdateOne) SetNillableSettingName(s *string) *SpaceSettingUpdateOne {
	if s != nil {
		ssuo.SetSettingName(*s)
	}
	return ssuo
}

// SetSettingValue sets the "setting_value" field.
func (ssuo *SpaceSettingUpdateOne) SetSettingValue(s string) *SpaceSettingUpdateOne {
	ssuo.mutation.SetSettingValue(s)
	return ssuo
}

// SetNillableSettingValue sets the "setting_value" field if the given value is not nil.
func (ssuo *SpaceSettingUpdateOne) SetNillableSettingValue(s *string) *SpaceSettingUpdateOne {
	if s != nil {
		ssuo.SetSettingValue(*s)
	}
	return ssuo
}

// ClearSettingValue clears the value of the "setting_value" field.
func (ssuo *SpaceSettingUpdateOne) ClearSettingValue() *SpaceSettingUpdateOne {
	ssuo.mutation.ClearSettingValue()
	return ssuo
}

// SetDefaultValue sets the "default_value" field.
func (ssuo *SpaceSettingUpdateOne) SetDefaultValue(s string) *SpaceSettingUpdateOne {
	ssuo.mutation.SetDefaultValue(s)
	return ssuo
}

// SetNillableDefaultValue sets the "default_value" field if the given value is not nil.
func (ssuo *SpaceSettingUpdateOne) SetNillableDefaultValue(s *string) *SpaceSettingUpdateOne {
	if s != nil {
		ssuo.SetDefaultValue(*s)
	}
	return ssuo
}

// ClearDefaultValue clears the value of the "default_value" field.
func (ssuo *SpaceSettingUpdateOne) ClearDefaultValue() *SpaceSettingUpdateOne {
	ssuo.mutation.ClearDefaultValue()
	return ssuo
}

// SetSettingType sets the "setting_type" field.
func (ssuo *SpaceSettingUpdateOne) SetSettingType(s string) *SpaceSettingUpdateOne {
	ssuo.mutation.SetSettingType(s)
	return ssuo
}

// SetNillableSettingType sets the "setting_type" field if the given value is not nil.
func (ssuo *SpaceSettingUpdateOne) SetNillableSettingType(s *string) *SpaceSettingUpdateOne {
	if s != nil {
		ssuo.SetSettingType(*s)
	}
	return ssuo
}

// SetScope sets the "scope" field.
func (ssuo *SpaceSettingUpdateOne) SetScope(s string) *SpaceSettingUpdateOne {
	ssuo.mutation.SetScope(s)
	return ssuo
}

// SetNillableScope sets the "scope" field if the given value is not nil.
func (ssuo *SpaceSettingUpdateOne) SetNillableScope(s *string) *SpaceSettingUpdateOne {
	if s != nil {
		ssuo.SetScope(*s)
	}
	return ssuo
}

// SetCategory sets the "category" field.
func (ssuo *SpaceSettingUpdateOne) SetCategory(s string) *SpaceSettingUpdateOne {
	ssuo.mutation.SetCategory(s)
	return ssuo
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (ssuo *SpaceSettingUpdateOne) SetNillableCategory(s *string) *SpaceSettingUpdateOne {
	if s != nil {
		ssuo.SetCategory(*s)
	}
	return ssuo
}

// SetIsPublic sets the "is_public" field.
func (ssuo *SpaceSettingUpdateOne) SetIsPublic(b bool) *SpaceSettingUpdateOne {
	ssuo.mutation.SetIsPublic(b)
	return ssuo
}

// SetNillableIsPublic sets the "is_public" field if the given value is not nil.
func (ssuo *SpaceSettingUpdateOne) SetNillableIsPublic(b *bool) *SpaceSettingUpdateOne {
	if b != nil {
		ssuo.SetIsPublic(*b)
	}
	return ssuo
}

// SetIsRequired sets the "is_required" field.
func (ssuo *SpaceSettingUpdateOne) SetIsRequired(b bool) *SpaceSettingUpdateOne {
	ssuo.mutation.SetIsRequired(b)
	return ssuo
}

// SetNillableIsRequired sets the "is_required" field if the given value is not nil.
func (ssuo *SpaceSettingUpdateOne) SetNillableIsRequired(b *bool) *SpaceSettingUpdateOne {
	if b != nil {
		ssuo.SetIsRequired(*b)
	}
	return ssuo
}

// SetIsReadonly sets the "is_readonly" field.
func (ssuo *SpaceSettingUpdateOne) SetIsReadonly(b bool) *SpaceSettingUpdateOne {
	ssuo.mutation.SetIsReadonly(b)
	return ssuo
}

// SetNillableIsReadonly sets the "is_readonly" field if the given value is not nil.
func (ssuo *SpaceSettingUpdateOne) SetNillableIsReadonly(b *bool) *SpaceSettingUpdateOne {
	if b != nil {
		ssuo.SetIsReadonly(*b)
	}
	return ssuo
}

// SetValidation sets the "validation" field.
func (ssuo *SpaceSettingUpdateOne) SetValidation(m map[string]interface{}) *SpaceSettingUpdateOne {
	ssuo.mutation.SetValidation(m)
	return ssuo
}

// ClearValidation clears the value of the "validation" field.
func (ssuo *SpaceSettingUpdateOne) ClearValidation() *SpaceSettingUpdateOne {
	ssuo.mutation.ClearValidation()
	return ssuo
}

// Mutation returns the SpaceSettingMutation object of the builder.
func (ssuo *SpaceSettingUpdateOne) Mutation() *SpaceSettingMutation {
	return ssuo.mutation
}

// Where appends a list predicates to the SpaceSettingUpdate builder.
func (ssuo *SpaceSettingUpdateOne) Where(ps ...predicate.SpaceSetting) *SpaceSettingUpdateOne {
	ssuo.mutation.Where(ps...)
	return ssuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ssuo *SpaceSettingUpdateOne) Select(field string, fields ...string) *SpaceSettingUpdateOne {
	ssuo.fields = append([]string{field}, fields...)
	return ssuo
}

// Save executes the query and returns the updated SpaceSetting entity.
func (ssuo *SpaceSettingUpdateOne) Save(ctx context.Context) (*SpaceSetting, error) {
	ssuo.defaults()
	return withHooks(ctx, ssuo.sqlSave, ssuo.mutation, ssuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ssuo *SpaceSettingUpdateOne) SaveX(ctx context.Context) *SpaceSetting {
	node, err := ssuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ssuo *SpaceSettingUpdateOne) Exec(ctx context.Context) error {
	_, err := ssuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ssuo *SpaceSettingUpdateOne) ExecX(ctx context.Context) {
	if err := ssuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ssuo *SpaceSettingUpdateOne) defaults() {
	if _, ok := ssuo.mutation.UpdatedAt(); !ok && !ssuo.mutation.UpdatedAtCleared() {
		v := spacesetting.UpdateDefaultUpdatedAt()
		ssuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ssuo *SpaceSettingUpdateOne) check() error {
	if v, ok := ssuo.mutation.SettingKey(); ok {
		if err := spacesetting.SettingKeyValidator(v); err != nil {
			return &ValidationError{Name: "setting_key", err: fmt.Errorf(`ent: validator failed for field "SpaceSetting.setting_key": %w`, err)}
		}
	}
	if v, ok := ssuo.mutation.SettingName(); ok {
		if err := spacesetting.SettingNameValidator(v); err != nil {
			return &ValidationError{Name: "setting_name", err: fmt.Errorf(`ent: validator failed for field "SpaceSetting.setting_name": %w`, err)}
		}
	}
	return nil
}

func (ssuo *SpaceSettingUpdateOne) sqlSave(ctx context.Context) (_node *SpaceSetting, err error) {
	if err := ssuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(spacesetting.Table, spacesetting.Columns, sqlgraph.NewFieldSpec(spacesetting.FieldID, field.TypeString))
	id, ok := ssuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SpaceSetting.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ssuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, spacesetting.FieldID)
		for _, f := range fields {
			if !spacesetting.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != spacesetting.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ssuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ssuo.mutation.SpaceID(); ok {
		_spec.SetField(spacesetting.FieldSpaceID, field.TypeString, value)
	}
	if ssuo.mutation.SpaceIDCleared() {
		_spec.ClearField(spacesetting.FieldSpaceID, field.TypeString)
	}
	if value, ok := ssuo.mutation.Description(); ok {
		_spec.SetField(spacesetting.FieldDescription, field.TypeString, value)
	}
	if ssuo.mutation.DescriptionCleared() {
		_spec.ClearField(spacesetting.FieldDescription, field.TypeString)
	}
	if value, ok := ssuo.mutation.Extras(); ok {
		_spec.SetField(spacesetting.FieldExtras, field.TypeJSON, value)
	}
	if ssuo.mutation.ExtrasCleared() {
		_spec.ClearField(spacesetting.FieldExtras, field.TypeJSON)
	}
	if value, ok := ssuo.mutation.CreatedBy(); ok {
		_spec.SetField(spacesetting.FieldCreatedBy, field.TypeString, value)
	}
	if ssuo.mutation.CreatedByCleared() {
		_spec.ClearField(spacesetting.FieldCreatedBy, field.TypeString)
	}
	if value, ok := ssuo.mutation.UpdatedBy(); ok {
		_spec.SetField(spacesetting.FieldUpdatedBy, field.TypeString, value)
	}
	if ssuo.mutation.UpdatedByCleared() {
		_spec.ClearField(spacesetting.FieldUpdatedBy, field.TypeString)
	}
	if ssuo.mutation.CreatedAtCleared() {
		_spec.ClearField(spacesetting.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := ssuo.mutation.UpdatedAt(); ok {
		_spec.SetField(spacesetting.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := ssuo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(spacesetting.FieldUpdatedAt, field.TypeInt64, value)
	}
	if ssuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(spacesetting.FieldUpdatedAt, field.TypeInt64)
	}
	if value, ok := ssuo.mutation.SettingKey(); ok {
		_spec.SetField(spacesetting.FieldSettingKey, field.TypeString, value)
	}
	if value, ok := ssuo.mutation.SettingName(); ok {
		_spec.SetField(spacesetting.FieldSettingName, field.TypeString, value)
	}
	if value, ok := ssuo.mutation.SettingValue(); ok {
		_spec.SetField(spacesetting.FieldSettingValue, field.TypeString, value)
	}
	if ssuo.mutation.SettingValueCleared() {
		_spec.ClearField(spacesetting.FieldSettingValue, field.TypeString)
	}
	if value, ok := ssuo.mutation.DefaultValue(); ok {
		_spec.SetField(spacesetting.FieldDefaultValue, field.TypeString, value)
	}
	if ssuo.mutation.DefaultValueCleared() {
		_spec.ClearField(spacesetting.FieldDefaultValue, field.TypeString)
	}
	if value, ok := ssuo.mutation.SettingType(); ok {
		_spec.SetField(spacesetting.FieldSettingType, field.TypeString, value)
	}
	if value, ok := ssuo.mutation.Scope(); ok {
		_spec.SetField(spacesetting.FieldScope, field.TypeString, value)
	}
	if value, ok := ssuo.mutation.Category(); ok {
		_spec.SetField(spacesetting.FieldCategory, field.TypeString, value)
	}
	if value, ok := ssuo.mutation.IsPublic(); ok {
		_spec.SetField(spacesetting.FieldIsPublic, field.TypeBool, value)
	}
	if value, ok := ssuo.mutation.IsRequired(); ok {
		_spec.SetField(spacesetting.FieldIsRequired, field.TypeBool, value)
	}
	if value, ok := ssuo.mutation.IsReadonly(); ok {
		_spec.SetField(spacesetting.FieldIsReadonly, field.TypeBool, value)
	}
	if value, ok := ssuo.mutation.Validation(); ok {
		_spec.SetField(spacesetting.FieldValidation, field.TypeJSON, value)
	}
	if ssuo.mutation.ValidationCleared() {
		_spec.ClearField(spacesetting.FieldValidation, field.TypeJSON)
	}
	_node = &SpaceSetting{config: ssuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ssuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{spacesetting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ssuo.mutation.done = true
	return _node, nil
}
