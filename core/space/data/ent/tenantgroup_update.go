// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/space/data/ent/predicate"
	"ncobase/space/data/ent/tenantgroup"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TenantGroupUpdate is the builder for updating TenantGroup entities.
type TenantGroupUpdate struct {
	config
	hooks    []Hook
	mutation *TenantGroupMutation
}

// Where appends a list predicates to the TenantGroupUpdate builder.
func (tgu *TenantGroupUpdate) Where(ps ...predicate.TenantGroup) *TenantGroupUpdate {
	tgu.mutation.Where(ps...)
	return tgu
}

// SetTenantID sets the "tenant_id" field.
func (tgu *TenantGroupUpdate) SetTenantID(s string) *TenantGroupUpdate {
	tgu.mutation.SetTenantID(s)
	return tgu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (tgu *TenantGroupUpdate) SetNillableTenantID(s *string) *TenantGroupUpdate {
	if s != nil {
		tgu.SetTenantID(*s)
	}
	return tgu
}

// ClearTenantID clears the value of the "tenant_id" field.
func (tgu *TenantGroupUpdate) ClearTenantID() *TenantGroupUpdate {
	tgu.mutation.ClearTenantID()
	return tgu
}

// SetGroupID sets the "group_id" field.
func (tgu *TenantGroupUpdate) SetGroupID(s string) *TenantGroupUpdate {
	tgu.mutation.SetGroupID(s)
	return tgu
}

// SetNillableGroupID sets the "group_id" field if the given value is not nil.
func (tgu *TenantGroupUpdate) SetNillableGroupID(s *string) *TenantGroupUpdate {
	if s != nil {
		tgu.SetGroupID(*s)
	}
	return tgu
}

// ClearGroupID clears the value of the "group_id" field.
func (tgu *TenantGroupUpdate) ClearGroupID() *TenantGroupUpdate {
	tgu.mutation.ClearGroupID()
	return tgu
}

// SetCreatedBy sets the "created_by" field.
func (tgu *TenantGroupUpdate) SetCreatedBy(s string) *TenantGroupUpdate {
	tgu.mutation.SetCreatedBy(s)
	return tgu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (tgu *TenantGroupUpdate) SetNillableCreatedBy(s *string) *TenantGroupUpdate {
	if s != nil {
		tgu.SetCreatedBy(*s)
	}
	return tgu
}

// ClearCreatedBy clears the value of the "created_by" field.
func (tgu *TenantGroupUpdate) ClearCreatedBy() *TenantGroupUpdate {
	tgu.mutation.ClearCreatedBy()
	return tgu
}

// SetUpdatedBy sets the "updated_by" field.
func (tgu *TenantGroupUpdate) SetUpdatedBy(s string) *TenantGroupUpdate {
	tgu.mutation.SetUpdatedBy(s)
	return tgu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (tgu *TenantGroupUpdate) SetNillableUpdatedBy(s *string) *TenantGroupUpdate {
	if s != nil {
		tgu.SetUpdatedBy(*s)
	}
	return tgu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (tgu *TenantGroupUpdate) ClearUpdatedBy() *TenantGroupUpdate {
	tgu.mutation.ClearUpdatedBy()
	return tgu
}

// SetUpdatedAt sets the "updated_at" field.
func (tgu *TenantGroupUpdate) SetUpdatedAt(i int64) *TenantGroupUpdate {
	tgu.mutation.ResetUpdatedAt()
	tgu.mutation.SetUpdatedAt(i)
	return tgu
}

// AddUpdatedAt adds i to the "updated_at" field.
func (tgu *TenantGroupUpdate) AddUpdatedAt(i int64) *TenantGroupUpdate {
	tgu.mutation.AddUpdatedAt(i)
	return tgu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tgu *TenantGroupUpdate) ClearUpdatedAt() *TenantGroupUpdate {
	tgu.mutation.ClearUpdatedAt()
	return tgu
}

// SetRelationType sets the "relation_type" field.
func (tgu *TenantGroupUpdate) SetRelationType(s string) *TenantGroupUpdate {
	tgu.mutation.SetRelationType(s)
	return tgu
}

// SetNillableRelationType sets the "relation_type" field if the given value is not nil.
func (tgu *TenantGroupUpdate) SetNillableRelationType(s *string) *TenantGroupUpdate {
	if s != nil {
		tgu.SetRelationType(*s)
	}
	return tgu
}

// Mutation returns the TenantGroupMutation object of the builder.
func (tgu *TenantGroupUpdate) Mutation() *TenantGroupMutation {
	return tgu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tgu *TenantGroupUpdate) Save(ctx context.Context) (int, error) {
	tgu.defaults()
	return withHooks(ctx, tgu.sqlSave, tgu.mutation, tgu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tgu *TenantGroupUpdate) SaveX(ctx context.Context) int {
	affected, err := tgu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tgu *TenantGroupUpdate) Exec(ctx context.Context) error {
	_, err := tgu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tgu *TenantGroupUpdate) ExecX(ctx context.Context) {
	if err := tgu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tgu *TenantGroupUpdate) defaults() {
	if _, ok := tgu.mutation.UpdatedAt(); !ok && !tgu.mutation.UpdatedAtCleared() {
		v := tenantgroup.UpdateDefaultUpdatedAt()
		tgu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tgu *TenantGroupUpdate) check() error {
	if v, ok := tgu.mutation.TenantID(); ok {
		if err := tenantgroup.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "TenantGroup.tenant_id": %w`, err)}
		}
	}
	if v, ok := tgu.mutation.GroupID(); ok {
		if err := tenantgroup.GroupIDValidator(v); err != nil {
			return &ValidationError{Name: "group_id", err: fmt.Errorf(`ent: validator failed for field "TenantGroup.group_id": %w`, err)}
		}
	}
	if v, ok := tgu.mutation.CreatedBy(); ok {
		if err := tenantgroup.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "TenantGroup.created_by": %w`, err)}
		}
	}
	if v, ok := tgu.mutation.UpdatedBy(); ok {
		if err := tenantgroup.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "TenantGroup.updated_by": %w`, err)}
		}
	}
	if v, ok := tgu.mutation.RelationType(); ok {
		if err := tenantgroup.RelationTypeValidator(v); err != nil {
			return &ValidationError{Name: "relation_type", err: fmt.Errorf(`ent: validator failed for field "TenantGroup.relation_type": %w`, err)}
		}
	}
	return nil
}

func (tgu *TenantGroupUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tgu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(tenantgroup.Table, tenantgroup.Columns, sqlgraph.NewFieldSpec(tenantgroup.FieldID, field.TypeString))
	if ps := tgu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tgu.mutation.TenantID(); ok {
		_spec.SetField(tenantgroup.FieldTenantID, field.TypeString, value)
	}
	if tgu.mutation.TenantIDCleared() {
		_spec.ClearField(tenantgroup.FieldTenantID, field.TypeString)
	}
	if value, ok := tgu.mutation.GroupID(); ok {
		_spec.SetField(tenantgroup.FieldGroupID, field.TypeString, value)
	}
	if tgu.mutation.GroupIDCleared() {
		_spec.ClearField(tenantgroup.FieldGroupID, field.TypeString)
	}
	if value, ok := tgu.mutation.CreatedBy(); ok {
		_spec.SetField(tenantgroup.FieldCreatedBy, field.TypeString, value)
	}
	if tgu.mutation.CreatedByCleared() {
		_spec.ClearField(tenantgroup.FieldCreatedBy, field.TypeString)
	}
	if value, ok := tgu.mutation.UpdatedBy(); ok {
		_spec.SetField(tenantgroup.FieldUpdatedBy, field.TypeString, value)
	}
	if tgu.mutation.UpdatedByCleared() {
		_spec.ClearField(tenantgroup.FieldUpdatedBy, field.TypeString)
	}
	if tgu.mutation.CreatedAtCleared() {
		_spec.ClearField(tenantgroup.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := tgu.mutation.UpdatedAt(); ok {
		_spec.SetField(tenantgroup.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := tgu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(tenantgroup.FieldUpdatedAt, field.TypeInt64, value)
	}
	if tgu.mutation.UpdatedAtCleared() {
		_spec.ClearField(tenantgroup.FieldUpdatedAt, field.TypeInt64)
	}
	if value, ok := tgu.mutation.RelationType(); ok {
		_spec.SetField(tenantgroup.FieldRelationType, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tgu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tenantgroup.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tgu.mutation.done = true
	return n, nil
}

// TenantGroupUpdateOne is the builder for updating a single TenantGroup entity.
type TenantGroupUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TenantGroupMutation
}

// SetTenantID sets the "tenant_id" field.
func (tguo *TenantGroupUpdateOne) SetTenantID(s string) *TenantGroupUpdateOne {
	tguo.mutation.SetTenantID(s)
	return tguo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (tguo *TenantGroupUpdateOne) SetNillableTenantID(s *string) *TenantGroupUpdateOne {
	if s != nil {
		tguo.SetTenantID(*s)
	}
	return tguo
}

// ClearTenantID clears the value of the "tenant_id" field.
func (tguo *TenantGroupUpdateOne) ClearTenantID() *TenantGroupUpdateOne {
	tguo.mutation.ClearTenantID()
	return tguo
}

// SetGroupID sets the "group_id" field.
func (tguo *TenantGroupUpdateOne) SetGroupID(s string) *TenantGroupUpdateOne {
	tguo.mutation.SetGroupID(s)
	return tguo
}

// SetNillableGroupID sets the "group_id" field if the given value is not nil.
func (tguo *TenantGroupUpdateOne) SetNillableGroupID(s *string) *TenantGroupUpdateOne {
	if s != nil {
		tguo.SetGroupID(*s)
	}
	return tguo
}

// ClearGroupID clears the value of the "group_id" field.
func (tguo *TenantGroupUpdateOne) ClearGroupID() *TenantGroupUpdateOne {
	tguo.mutation.ClearGroupID()
	return tguo
}

// SetCreatedBy sets the "created_by" field.
func (tguo *TenantGroupUpdateOne) SetCreatedBy(s string) *TenantGroupUpdateOne {
	tguo.mutation.SetCreatedBy(s)
	return tguo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (tguo *TenantGroupUpdateOne) SetNillableCreatedBy(s *string) *TenantGroupUpdateOne {
	if s != nil {
		tguo.SetCreatedBy(*s)
	}
	return tguo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (tguo *TenantGroupUpdateOne) ClearCreatedBy() *TenantGroupUpdateOne {
	tguo.mutation.ClearCreatedBy()
	return tguo
}

// SetUpdatedBy sets the "updated_by" field.
func (tguo *TenantGroupUpdateOne) SetUpdatedBy(s string) *TenantGroupUpdateOne {
	tguo.mutation.SetUpdatedBy(s)
	return tguo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (tguo *TenantGroupUpdateOne) SetNillableUpdatedBy(s *string) *TenantGroupUpdateOne {
	if s != nil {
		tguo.SetUpdatedBy(*s)
	}
	return tguo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (tguo *TenantGroupUpdateOne) ClearUpdatedBy() *TenantGroupUpdateOne {
	tguo.mutation.ClearUpdatedBy()
	return tguo
}

// SetUpdatedAt sets the "updated_at" field.
func (tguo *TenantGroupUpdateOne) SetUpdatedAt(i int64) *TenantGroupUpdateOne {
	tguo.mutation.ResetUpdatedAt()
	tguo.mutation.SetUpdatedAt(i)
	return tguo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (tguo *TenantGroupUpdateOne) AddUpdatedAt(i int64) *TenantGroupUpdateOne {
	tguo.mutation.AddUpdatedAt(i)
	return tguo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tguo *TenantGroupUpdateOne) ClearUpdatedAt() *TenantGroupUpdateOne {
	tguo.mutation.ClearUpdatedAt()
	return tguo
}

// SetRelationType sets the "relation_type" field.
func (tguo *TenantGroupUpdateOne) SetRelationType(s string) *TenantGroupUpdateOne {
	tguo.mutation.SetRelationType(s)
	return tguo
}

// SetNillableRelationType sets the "relation_type" field if the given value is not nil.
func (tguo *TenantGroupUpdateOne) SetNillableRelationType(s *string) *TenantGroupUpdateOne {
	if s != nil {
		tguo.SetRelationType(*s)
	}
	return tguo
}

// Mutation returns the TenantGroupMutation object of the builder.
func (tguo *TenantGroupUpdateOne) Mutation() *TenantGroupMutation {
	return tguo.mutation
}

// Where appends a list predicates to the TenantGroupUpdate builder.
func (tguo *TenantGroupUpdateOne) Where(ps ...predicate.TenantGroup) *TenantGroupUpdateOne {
	tguo.mutation.Where(ps...)
	return tguo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tguo *TenantGroupUpdateOne) Select(field string, fields ...string) *TenantGroupUpdateOne {
	tguo.fields = append([]string{field}, fields...)
	return tguo
}

// Save executes the query and returns the updated TenantGroup entity.
func (tguo *TenantGroupUpdateOne) Save(ctx context.Context) (*TenantGroup, error) {
	tguo.defaults()
	return withHooks(ctx, tguo.sqlSave, tguo.mutation, tguo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tguo *TenantGroupUpdateOne) SaveX(ctx context.Context) *TenantGroup {
	node, err := tguo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tguo *TenantGroupUpdateOne) Exec(ctx context.Context) error {
	_, err := tguo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tguo *TenantGroupUpdateOne) ExecX(ctx context.Context) {
	if err := tguo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tguo *TenantGroupUpdateOne) defaults() {
	if _, ok := tguo.mutation.UpdatedAt(); !ok && !tguo.mutation.UpdatedAtCleared() {
		v := tenantgroup.UpdateDefaultUpdatedAt()
		tguo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tguo *TenantGroupUpdateOne) check() error {
	if v, ok := tguo.mutation.TenantID(); ok {
		if err := tenantgroup.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "TenantGroup.tenant_id": %w`, err)}
		}
	}
	if v, ok := tguo.mutation.GroupID(); ok {
		if err := tenantgroup.GroupIDValidator(v); err != nil {
			return &ValidationError{Name: "group_id", err: fmt.Errorf(`ent: validator failed for field "TenantGroup.group_id": %w`, err)}
		}
	}
	if v, ok := tguo.mutation.CreatedBy(); ok {
		if err := tenantgroup.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "TenantGroup.created_by": %w`, err)}
		}
	}
	if v, ok := tguo.mutation.UpdatedBy(); ok {
		if err := tenantgroup.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "TenantGroup.updated_by": %w`, err)}
		}
	}
	if v, ok := tguo.mutation.RelationType(); ok {
		if err := tenantgroup.RelationTypeValidator(v); err != nil {
			return &ValidationError{Name: "relation_type", err: fmt.Errorf(`ent: validator failed for field "TenantGroup.relation_type": %w`, err)}
		}
	}
	return nil
}

func (tguo *TenantGroupUpdateOne) sqlSave(ctx context.Context) (_node *TenantGroup, err error) {
	if err := tguo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(tenantgroup.Table, tenantgroup.Columns, sqlgraph.NewFieldSpec(tenantgroup.FieldID, field.TypeString))
	id, ok := tguo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TenantGroup.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tguo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tenantgroup.FieldID)
		for _, f := range fields {
			if !tenantgroup.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tenantgroup.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tguo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tguo.mutation.TenantID(); ok {
		_spec.SetField(tenantgroup.FieldTenantID, field.TypeString, value)
	}
	if tguo.mutation.TenantIDCleared() {
		_spec.ClearField(tenantgroup.FieldTenantID, field.TypeString)
	}
	if value, ok := tguo.mutation.GroupID(); ok {
		_spec.SetField(tenantgroup.FieldGroupID, field.TypeString, value)
	}
	if tguo.mutation.GroupIDCleared() {
		_spec.ClearField(tenantgroup.FieldGroupID, field.TypeString)
	}
	if value, ok := tguo.mutation.CreatedBy(); ok {
		_spec.SetField(tenantgroup.FieldCreatedBy, field.TypeString, value)
	}
	if tguo.mutation.CreatedByCleared() {
		_spec.ClearField(tenantgroup.FieldCreatedBy, field.TypeString)
	}
	if value, ok := tguo.mutation.UpdatedBy(); ok {
		_spec.SetField(tenantgroup.FieldUpdatedBy, field.TypeString, value)
	}
	if tguo.mutation.UpdatedByCleared() {
		_spec.ClearField(tenantgroup.FieldUpdatedBy, field.TypeString)
	}
	if tguo.mutation.CreatedAtCleared() {
		_spec.ClearField(tenantgroup.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := tguo.mutation.UpdatedAt(); ok {
		_spec.SetField(tenantgroup.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := tguo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(tenantgroup.FieldUpdatedAt, field.TypeInt64, value)
	}
	if tguo.mutation.UpdatedAtCleared() {
		_spec.ClearField(tenantgroup.FieldUpdatedAt, field.TypeInt64)
	}
	if value, ok := tguo.mutation.RelationType(); ok {
		_spec.SetField(tenantgroup.FieldRelationType, field.TypeString, value)
	}
	_node = &TenantGroup{config: tguo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tguo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tenantgroup.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tguo.mutation.done = true
	return _node, nil
}
