// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/space/data/ent/predicate"
	"ncobase/space/data/ent/userspace"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserSpaceUpdate is the builder for updating UserSpace entities.
type UserSpaceUpdate struct {
	config
	hooks    []Hook
	mutation *UserSpaceMutation
}

// Where appends a list predicates to the UserSpaceUpdate builder.
func (usu *UserSpaceUpdate) Where(ps ...predicate.UserSpace) *UserSpaceUpdate {
	usu.mutation.Where(ps...)
	return usu
}

// SetUserID sets the "user_id" field.
func (usu *UserSpaceUpdate) SetUserID(s string) *UserSpaceUpdate {
	usu.mutation.SetUserID(s)
	return usu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (usu *UserSpaceUpdate) SetNillableUserID(s *string) *UserSpaceUpdate {
	if s != nil {
		usu.SetUserID(*s)
	}
	return usu
}

// ClearUserID clears the value of the "user_id" field.
func (usu *UserSpaceUpdate) ClearUserID() *UserSpaceUpdate {
	usu.mutation.ClearUserID()
	return usu
}

// SetSpaceID sets the "space_id" field.
func (usu *UserSpaceUpdate) SetSpaceID(s string) *UserSpaceUpdate {
	usu.mutation.SetSpaceID(s)
	return usu
}

// SetNillableSpaceID sets the "space_id" field if the given value is not nil.
func (usu *UserSpaceUpdate) SetNillableSpaceID(s *string) *UserSpaceUpdate {
	if s != nil {
		usu.SetSpaceID(*s)
	}
	return usu
}

// ClearSpaceID clears the value of the "space_id" field.
func (usu *UserSpaceUpdate) ClearSpaceID() *UserSpaceUpdate {
	usu.mutation.ClearSpaceID()
	return usu
}

// SetCreatedBy sets the "created_by" field.
func (usu *UserSpaceUpdate) SetCreatedBy(s string) *UserSpaceUpdate {
	usu.mutation.SetCreatedBy(s)
	return usu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (usu *UserSpaceUpdate) SetNillableCreatedBy(s *string) *UserSpaceUpdate {
	if s != nil {
		usu.SetCreatedBy(*s)
	}
	return usu
}

// ClearCreatedBy clears the value of the "created_by" field.
func (usu *UserSpaceUpdate) ClearCreatedBy() *UserSpaceUpdate {
	usu.mutation.ClearCreatedBy()
	return usu
}

// SetUpdatedBy sets the "updated_by" field.
func (usu *UserSpaceUpdate) SetUpdatedBy(s string) *UserSpaceUpdate {
	usu.mutation.SetUpdatedBy(s)
	return usu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (usu *UserSpaceUpdate) SetNillableUpdatedBy(s *string) *UserSpaceUpdate {
	if s != nil {
		usu.SetUpdatedBy(*s)
	}
	return usu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (usu *UserSpaceUpdate) ClearUpdatedBy() *UserSpaceUpdate {
	usu.mutation.ClearUpdatedBy()
	return usu
}

// SetUpdatedAt sets the "updated_at" field.
func (usu *UserSpaceUpdate) SetUpdatedAt(i int64) *UserSpaceUpdate {
	usu.mutation.ResetUpdatedAt()
	usu.mutation.SetUpdatedAt(i)
	return usu
}

// AddUpdatedAt adds i to the "updated_at" field.
func (usu *UserSpaceUpdate) AddUpdatedAt(i int64) *UserSpaceUpdate {
	usu.mutation.AddUpdatedAt(i)
	return usu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (usu *UserSpaceUpdate) ClearUpdatedAt() *UserSpaceUpdate {
	usu.mutation.ClearUpdatedAt()
	return usu
}

// Mutation returns the UserSpaceMutation object of the builder.
func (usu *UserSpaceUpdate) Mutation() *UserSpaceMutation {
	return usu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (usu *UserSpaceUpdate) Save(ctx context.Context) (int, error) {
	usu.defaults()
	return withHooks(ctx, usu.sqlSave, usu.mutation, usu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (usu *UserSpaceUpdate) SaveX(ctx context.Context) int {
	affected, err := usu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (usu *UserSpaceUpdate) Exec(ctx context.Context) error {
	_, err := usu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (usu *UserSpaceUpdate) ExecX(ctx context.Context) {
	if err := usu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (usu *UserSpaceUpdate) defaults() {
	if _, ok := usu.mutation.UpdatedAt(); !ok && !usu.mutation.UpdatedAtCleared() {
		v := userspace.UpdateDefaultUpdatedAt()
		usu.mutation.SetUpdatedAt(v)
	}
}

func (usu *UserSpaceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(userspace.Table, userspace.Columns, sqlgraph.NewFieldSpec(userspace.FieldID, field.TypeString))
	if ps := usu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := usu.mutation.UserID(); ok {
		_spec.SetField(userspace.FieldUserID, field.TypeString, value)
	}
	if usu.mutation.UserIDCleared() {
		_spec.ClearField(userspace.FieldUserID, field.TypeString)
	}
	if value, ok := usu.mutation.SpaceID(); ok {
		_spec.SetField(userspace.FieldSpaceID, field.TypeString, value)
	}
	if usu.mutation.SpaceIDCleared() {
		_spec.ClearField(userspace.FieldSpaceID, field.TypeString)
	}
	if value, ok := usu.mutation.CreatedBy(); ok {
		_spec.SetField(userspace.FieldCreatedBy, field.TypeString, value)
	}
	if usu.mutation.CreatedByCleared() {
		_spec.ClearField(userspace.FieldCreatedBy, field.TypeString)
	}
	if value, ok := usu.mutation.UpdatedBy(); ok {
		_spec.SetField(userspace.FieldUpdatedBy, field.TypeString, value)
	}
	if usu.mutation.UpdatedByCleared() {
		_spec.ClearField(userspace.FieldUpdatedBy, field.TypeString)
	}
	if usu.mutation.CreatedAtCleared() {
		_spec.ClearField(userspace.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := usu.mutation.UpdatedAt(); ok {
		_spec.SetField(userspace.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := usu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(userspace.FieldUpdatedAt, field.TypeInt64, value)
	}
	if usu.mutation.UpdatedAtCleared() {
		_spec.ClearField(userspace.FieldUpdatedAt, field.TypeInt64)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, usu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userspace.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	usu.mutation.done = true
	return n, nil
}

// UserSpaceUpdateOne is the builder for updating a single UserSpace entity.
type UserSpaceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserSpaceMutation
}

// SetUserID sets the "user_id" field.
func (usuo *UserSpaceUpdateOne) SetUserID(s string) *UserSpaceUpdateOne {
	usuo.mutation.SetUserID(s)
	return usuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (usuo *UserSpaceUpdateOne) SetNillableUserID(s *string) *UserSpaceUpdateOne {
	if s != nil {
		usuo.SetUserID(*s)
	}
	return usuo
}

// ClearUserID clears the value of the "user_id" field.
func (usuo *UserSpaceUpdateOne) ClearUserID() *UserSpaceUpdateOne {
	usuo.mutation.ClearUserID()
	return usuo
}

// SetSpaceID sets the "space_id" field.
func (usuo *UserSpaceUpdateOne) SetSpaceID(s string) *UserSpaceUpdateOne {
	usuo.mutation.SetSpaceID(s)
	return usuo
}

// SetNillableSpaceID sets the "space_id" field if the given value is not nil.
func (usuo *UserSpaceUpdateOne) SetNillableSpaceID(s *string) *UserSpaceUpdateOne {
	if s != nil {
		usuo.SetSpaceID(*s)
	}
	return usuo
}

// ClearSpaceID clears the value of the "space_id" field.
func (usuo *UserSpaceUpdateOne) ClearSpaceID() *UserSpaceUpdateOne {
	usuo.mutation.ClearSpaceID()
	return usuo
}

// SetCreatedBy sets the "created_by" field.
func (usuo *UserSpaceUpdateOne) SetCreatedBy(s string) *UserSpaceUpdateOne {
	usuo.mutation.SetCreatedBy(s)
	return usuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (usuo *UserSpaceUpdateOne) SetNillableCreatedBy(s *string) *UserSpaceUpdateOne {
	if s != nil {
		usuo.SetCreatedBy(*s)
	}
	return usuo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (usuo *UserSpaceUpdateOne) ClearCreatedBy() *UserSpaceUpdateOne {
	usuo.mutation.ClearCreatedBy()
	return usuo
}

// SetUpdatedBy sets the "updated_by" field.
func (usuo *UserSpaceUpdateOne) SetUpdatedBy(s string) *UserSpaceUpdateOne {
	usuo.mutation.SetUpdatedBy(s)
	return usuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (usuo *UserSpaceUpdateOne) SetNillableUpdatedBy(s *string) *UserSpaceUpdateOne {
	if s != nil {
		usuo.SetUpdatedBy(*s)
	}
	return usuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (usuo *UserSpaceUpdateOne) ClearUpdatedBy() *UserSpaceUpdateOne {
	usuo.mutation.ClearUpdatedBy()
	return usuo
}

// SetUpdatedAt sets the "updated_at" field.
func (usuo *UserSpaceUpdateOne) SetUpdatedAt(i int64) *UserSpaceUpdateOne {
	usuo.mutation.ResetUpdatedAt()
	usuo.mutation.SetUpdatedAt(i)
	return usuo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (usuo *UserSpaceUpdateOne) AddUpdatedAt(i int64) *UserSpaceUpdateOne {
	usuo.mutation.AddUpdatedAt(i)
	return usuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (usuo *UserSpaceUpdateOne) ClearUpdatedAt() *UserSpaceUpdateOne {
	usuo.mutation.ClearUpdatedAt()
	return usuo
}

// Mutation returns the UserSpaceMutation object of the builder.
func (usuo *UserSpaceUpdateOne) Mutation() *UserSpaceMutation {
	return usuo.mutation
}

// Where appends a list predicates to the UserSpaceUpdate builder.
func (usuo *UserSpaceUpdateOne) Where(ps ...predicate.UserSpace) *UserSpaceUpdateOne {
	usuo.mutation.Where(ps...)
	return usuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (usuo *UserSpaceUpdateOne) Select(field string, fields ...string) *UserSpaceUpdateOne {
	usuo.fields = append([]string{field}, fields...)
	return usuo
}

// Save executes the query and returns the updated UserSpace entity.
func (usuo *UserSpaceUpdateOne) Save(ctx context.Context) (*UserSpace, error) {
	usuo.defaults()
	return withHooks(ctx, usuo.sqlSave, usuo.mutation, usuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (usuo *UserSpaceUpdateOne) SaveX(ctx context.Context) *UserSpace {
	node, err := usuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (usuo *UserSpaceUpdateOne) Exec(ctx context.Context) error {
	_, err := usuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (usuo *UserSpaceUpdateOne) ExecX(ctx context.Context) {
	if err := usuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (usuo *UserSpaceUpdateOne) defaults() {
	if _, ok := usuo.mutation.UpdatedAt(); !ok && !usuo.mutation.UpdatedAtCleared() {
		v := userspace.UpdateDefaultUpdatedAt()
		usuo.mutation.SetUpdatedAt(v)
	}
}

func (usuo *UserSpaceUpdateOne) sqlSave(ctx context.Context) (_node *UserSpace, err error) {
	_spec := sqlgraph.NewUpdateSpec(userspace.Table, userspace.Columns, sqlgraph.NewFieldSpec(userspace.FieldID, field.TypeString))
	id, ok := usuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserSpace.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := usuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userspace.FieldID)
		for _, f := range fields {
			if !userspace.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userspace.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := usuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := usuo.mutation.UserID(); ok {
		_spec.SetField(userspace.FieldUserID, field.TypeString, value)
	}
	if usuo.mutation.UserIDCleared() {
		_spec.ClearField(userspace.FieldUserID, field.TypeString)
	}
	if value, ok := usuo.mutation.SpaceID(); ok {
		_spec.SetField(userspace.FieldSpaceID, field.TypeString, value)
	}
	if usuo.mutation.SpaceIDCleared() {
		_spec.ClearField(userspace.FieldSpaceID, field.TypeString)
	}
	if value, ok := usuo.mutation.CreatedBy(); ok {
		_spec.SetField(userspace.FieldCreatedBy, field.TypeString, value)
	}
	if usuo.mutation.CreatedByCleared() {
		_spec.ClearField(userspace.FieldCreatedBy, field.TypeString)
	}
	if value, ok := usuo.mutation.UpdatedBy(); ok {
		_spec.SetField(userspace.FieldUpdatedBy, field.TypeString, value)
	}
	if usuo.mutation.UpdatedByCleared() {
		_spec.ClearField(userspace.FieldUpdatedBy, field.TypeString)
	}
	if usuo.mutation.CreatedAtCleared() {
		_spec.ClearField(userspace.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := usuo.mutation.UpdatedAt(); ok {
		_spec.SetField(userspace.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := usuo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(userspace.FieldUpdatedAt, field.TypeInt64, value)
	}
	if usuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(userspace.FieldUpdatedAt, field.TypeInt64)
	}
	_node = &UserSpace{config: usuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, usuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userspace.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	usuo.mutation.done = true
	return _node, nil
}
