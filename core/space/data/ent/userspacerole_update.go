// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/space/data/ent/predicate"
	"ncobase/space/data/ent/userspacerole"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserSpaceRoleUpdate is the builder for updating UserSpaceRole entities.
type UserSpaceRoleUpdate struct {
	config
	hooks    []Hook
	mutation *UserSpaceRoleMutation
}

// Where appends a list predicates to the UserSpaceRoleUpdate builder.
func (usru *UserSpaceRoleUpdate) Where(ps ...predicate.UserSpaceRole) *UserSpaceRoleUpdate {
	usru.mutation.Where(ps...)
	return usru
}

// SetUserID sets the "user_id" field.
func (usru *UserSpaceRoleUpdate) SetUserID(s string) *UserSpaceRoleUpdate {
	usru.mutation.SetUserID(s)
	return usru
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (usru *UserSpaceRoleUpdate) SetNillableUserID(s *string) *UserSpaceRoleUpdate {
	if s != nil {
		usru.SetUserID(*s)
	}
	return usru
}

// ClearUserID clears the value of the "user_id" field.
func (usru *UserSpaceRoleUpdate) ClearUserID() *UserSpaceRoleUpdate {
	usru.mutation.ClearUserID()
	return usru
}

// SetSpaceID sets the "space_id" field.
func (usru *UserSpaceRoleUpdate) SetSpaceID(s string) *UserSpaceRoleUpdate {
	usru.mutation.SetSpaceID(s)
	return usru
}

// SetNillableSpaceID sets the "space_id" field if the given value is not nil.
func (usru *UserSpaceRoleUpdate) SetNillableSpaceID(s *string) *UserSpaceRoleUpdate {
	if s != nil {
		usru.SetSpaceID(*s)
	}
	return usru
}

// ClearSpaceID clears the value of the "space_id" field.
func (usru *UserSpaceRoleUpdate) ClearSpaceID() *UserSpaceRoleUpdate {
	usru.mutation.ClearSpaceID()
	return usru
}

// SetRoleID sets the "role_id" field.
func (usru *UserSpaceRoleUpdate) SetRoleID(s string) *UserSpaceRoleUpdate {
	usru.mutation.SetRoleID(s)
	return usru
}

// SetNillableRoleID sets the "role_id" field if the given value is not nil.
func (usru *UserSpaceRoleUpdate) SetNillableRoleID(s *string) *UserSpaceRoleUpdate {
	if s != nil {
		usru.SetRoleID(*s)
	}
	return usru
}

// ClearRoleID clears the value of the "role_id" field.
func (usru *UserSpaceRoleUpdate) ClearRoleID() *UserSpaceRoleUpdate {
	usru.mutation.ClearRoleID()
	return usru
}

// SetCreatedBy sets the "created_by" field.
func (usru *UserSpaceRoleUpdate) SetCreatedBy(s string) *UserSpaceRoleUpdate {
	usru.mutation.SetCreatedBy(s)
	return usru
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (usru *UserSpaceRoleUpdate) SetNillableCreatedBy(s *string) *UserSpaceRoleUpdate {
	if s != nil {
		usru.SetCreatedBy(*s)
	}
	return usru
}

// ClearCreatedBy clears the value of the "created_by" field.
func (usru *UserSpaceRoleUpdate) ClearCreatedBy() *UserSpaceRoleUpdate {
	usru.mutation.ClearCreatedBy()
	return usru
}

// SetUpdatedBy sets the "updated_by" field.
func (usru *UserSpaceRoleUpdate) SetUpdatedBy(s string) *UserSpaceRoleUpdate {
	usru.mutation.SetUpdatedBy(s)
	return usru
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (usru *UserSpaceRoleUpdate) SetNillableUpdatedBy(s *string) *UserSpaceRoleUpdate {
	if s != nil {
		usru.SetUpdatedBy(*s)
	}
	return usru
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (usru *UserSpaceRoleUpdate) ClearUpdatedBy() *UserSpaceRoleUpdate {
	usru.mutation.ClearUpdatedBy()
	return usru
}

// SetUpdatedAt sets the "updated_at" field.
func (usru *UserSpaceRoleUpdate) SetUpdatedAt(i int64) *UserSpaceRoleUpdate {
	usru.mutation.ResetUpdatedAt()
	usru.mutation.SetUpdatedAt(i)
	return usru
}

// AddUpdatedAt adds i to the "updated_at" field.
func (usru *UserSpaceRoleUpdate) AddUpdatedAt(i int64) *UserSpaceRoleUpdate {
	usru.mutation.AddUpdatedAt(i)
	return usru
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (usru *UserSpaceRoleUpdate) ClearUpdatedAt() *UserSpaceRoleUpdate {
	usru.mutation.ClearUpdatedAt()
	return usru
}

// Mutation returns the UserSpaceRoleMutation object of the builder.
func (usru *UserSpaceRoleUpdate) Mutation() *UserSpaceRoleMutation {
	return usru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (usru *UserSpaceRoleUpdate) Save(ctx context.Context) (int, error) {
	usru.defaults()
	return withHooks(ctx, usru.sqlSave, usru.mutation, usru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (usru *UserSpaceRoleUpdate) SaveX(ctx context.Context) int {
	affected, err := usru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (usru *UserSpaceRoleUpdate) Exec(ctx context.Context) error {
	_, err := usru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (usru *UserSpaceRoleUpdate) ExecX(ctx context.Context) {
	if err := usru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (usru *UserSpaceRoleUpdate) defaults() {
	if _, ok := usru.mutation.UpdatedAt(); !ok && !usru.mutation.UpdatedAtCleared() {
		v := userspacerole.UpdateDefaultUpdatedAt()
		usru.mutation.SetUpdatedAt(v)
	}
}

func (usru *UserSpaceRoleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(userspacerole.Table, userspacerole.Columns, sqlgraph.NewFieldSpec(userspacerole.FieldID, field.TypeString))
	if ps := usru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := usru.mutation.UserID(); ok {
		_spec.SetField(userspacerole.FieldUserID, field.TypeString, value)
	}
	if usru.mutation.UserIDCleared() {
		_spec.ClearField(userspacerole.FieldUserID, field.TypeString)
	}
	if value, ok := usru.mutation.SpaceID(); ok {
		_spec.SetField(userspacerole.FieldSpaceID, field.TypeString, value)
	}
	if usru.mutation.SpaceIDCleared() {
		_spec.ClearField(userspacerole.FieldSpaceID, field.TypeString)
	}
	if value, ok := usru.mutation.RoleID(); ok {
		_spec.SetField(userspacerole.FieldRoleID, field.TypeString, value)
	}
	if usru.mutation.RoleIDCleared() {
		_spec.ClearField(userspacerole.FieldRoleID, field.TypeString)
	}
	if value, ok := usru.mutation.CreatedBy(); ok {
		_spec.SetField(userspacerole.FieldCreatedBy, field.TypeString, value)
	}
	if usru.mutation.CreatedByCleared() {
		_spec.ClearField(userspacerole.FieldCreatedBy, field.TypeString)
	}
	if value, ok := usru.mutation.UpdatedBy(); ok {
		_spec.SetField(userspacerole.FieldUpdatedBy, field.TypeString, value)
	}
	if usru.mutation.UpdatedByCleared() {
		_spec.ClearField(userspacerole.FieldUpdatedBy, field.TypeString)
	}
	if usru.mutation.CreatedAtCleared() {
		_spec.ClearField(userspacerole.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := usru.mutation.UpdatedAt(); ok {
		_spec.SetField(userspacerole.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := usru.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(userspacerole.FieldUpdatedAt, field.TypeInt64, value)
	}
	if usru.mutation.UpdatedAtCleared() {
		_spec.ClearField(userspacerole.FieldUpdatedAt, field.TypeInt64)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, usru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userspacerole.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	usru.mutation.done = true
	return n, nil
}

// UserSpaceRoleUpdateOne is the builder for updating a single UserSpaceRole entity.
type UserSpaceRoleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserSpaceRoleMutation
}

// SetUserID sets the "user_id" field.
func (usruo *UserSpaceRoleUpdateOne) SetUserID(s string) *UserSpaceRoleUpdateOne {
	usruo.mutation.SetUserID(s)
	return usruo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (usruo *UserSpaceRoleUpdateOne) SetNillableUserID(s *string) *UserSpaceRoleUpdateOne {
	if s != nil {
		usruo.SetUserID(*s)
	}
	return usruo
}

// ClearUserID clears the value of the "user_id" field.
func (usruo *UserSpaceRoleUpdateOne) ClearUserID() *UserSpaceRoleUpdateOne {
	usruo.mutation.ClearUserID()
	return usruo
}

// SetSpaceID sets the "space_id" field.
func (usruo *UserSpaceRoleUpdateOne) SetSpaceID(s string) *UserSpaceRoleUpdateOne {
	usruo.mutation.SetSpaceID(s)
	return usruo
}

// SetNillableSpaceID sets the "space_id" field if the given value is not nil.
func (usruo *UserSpaceRoleUpdateOne) SetNillableSpaceID(s *string) *UserSpaceRoleUpdateOne {
	if s != nil {
		usruo.SetSpaceID(*s)
	}
	return usruo
}

// ClearSpaceID clears the value of the "space_id" field.
func (usruo *UserSpaceRoleUpdateOne) ClearSpaceID() *UserSpaceRoleUpdateOne {
	usruo.mutation.ClearSpaceID()
	return usruo
}

// SetRoleID sets the "role_id" field.
func (usruo *UserSpaceRoleUpdateOne) SetRoleID(s string) *UserSpaceRoleUpdateOne {
	usruo.mutation.SetRoleID(s)
	return usruo
}

// SetNillableRoleID sets the "role_id" field if the given value is not nil.
func (usruo *UserSpaceRoleUpdateOne) SetNillableRoleID(s *string) *UserSpaceRoleUpdateOne {
	if s != nil {
		usruo.SetRoleID(*s)
	}
	return usruo
}

// ClearRoleID clears the value of the "role_id" field.
func (usruo *UserSpaceRoleUpdateOne) ClearRoleID() *UserSpaceRoleUpdateOne {
	usruo.mutation.ClearRoleID()
	return usruo
}

// SetCreatedBy sets the "created_by" field.
func (usruo *UserSpaceRoleUpdateOne) SetCreatedBy(s string) *UserSpaceRoleUpdateOne {
	usruo.mutation.SetCreatedBy(s)
	return usruo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (usruo *UserSpaceRoleUpdateOne) SetNillableCreatedBy(s *string) *UserSpaceRoleUpdateOne {
	if s != nil {
		usruo.SetCreatedBy(*s)
	}
	return usruo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (usruo *UserSpaceRoleUpdateOne) ClearCreatedBy() *UserSpaceRoleUpdateOne {
	usruo.mutation.ClearCreatedBy()
	return usruo
}

// SetUpdatedBy sets the "updated_by" field.
func (usruo *UserSpaceRoleUpdateOne) SetUpdatedBy(s string) *UserSpaceRoleUpdateOne {
	usruo.mutation.SetUpdatedBy(s)
	return usruo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (usruo *UserSpaceRoleUpdateOne) SetNillableUpdatedBy(s *string) *UserSpaceRoleUpdateOne {
	if s != nil {
		usruo.SetUpdatedBy(*s)
	}
	return usruo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (usruo *UserSpaceRoleUpdateOne) ClearUpdatedBy() *UserSpaceRoleUpdateOne {
	usruo.mutation.ClearUpdatedBy()
	return usruo
}

// SetUpdatedAt sets the "updated_at" field.
func (usruo *UserSpaceRoleUpdateOne) SetUpdatedAt(i int64) *UserSpaceRoleUpdateOne {
	usruo.mutation.ResetUpdatedAt()
	usruo.mutation.SetUpdatedAt(i)
	return usruo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (usruo *UserSpaceRoleUpdateOne) AddUpdatedAt(i int64) *UserSpaceRoleUpdateOne {
	usruo.mutation.AddUpdatedAt(i)
	return usruo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (usruo *UserSpaceRoleUpdateOne) ClearUpdatedAt() *UserSpaceRoleUpdateOne {
	usruo.mutation.ClearUpdatedAt()
	return usruo
}

// Mutation returns the UserSpaceRoleMutation object of the builder.
func (usruo *UserSpaceRoleUpdateOne) Mutation() *UserSpaceRoleMutation {
	return usruo.mutation
}

// Where appends a list predicates to the UserSpaceRoleUpdate builder.
func (usruo *UserSpaceRoleUpdateOne) Where(ps ...predicate.UserSpaceRole) *UserSpaceRoleUpdateOne {
	usruo.mutation.Where(ps...)
	return usruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (usruo *UserSpaceRoleUpdateOne) Select(field string, fields ...string) *UserSpaceRoleUpdateOne {
	usruo.fields = append([]string{field}, fields...)
	return usruo
}

// Save executes the query and returns the updated UserSpaceRole entity.
func (usruo *UserSpaceRoleUpdateOne) Save(ctx context.Context) (*UserSpaceRole, error) {
	usruo.defaults()
	return withHooks(ctx, usruo.sqlSave, usruo.mutation, usruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (usruo *UserSpaceRoleUpdateOne) SaveX(ctx context.Context) *UserSpaceRole {
	node, err := usruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (usruo *UserSpaceRoleUpdateOne) Exec(ctx context.Context) error {
	_, err := usruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (usruo *UserSpaceRoleUpdateOne) ExecX(ctx context.Context) {
	if err := usruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (usruo *UserSpaceRoleUpdateOne) defaults() {
	if _, ok := usruo.mutation.UpdatedAt(); !ok && !usruo.mutation.UpdatedAtCleared() {
		v := userspacerole.UpdateDefaultUpdatedAt()
		usruo.mutation.SetUpdatedAt(v)
	}
}

func (usruo *UserSpaceRoleUpdateOne) sqlSave(ctx context.Context) (_node *UserSpaceRole, err error) {
	_spec := sqlgraph.NewUpdateSpec(userspacerole.Table, userspacerole.Columns, sqlgraph.NewFieldSpec(userspacerole.FieldID, field.TypeString))
	id, ok := usruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserSpaceRole.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := usruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userspacerole.FieldID)
		for _, f := range fields {
			if !userspacerole.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userspacerole.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := usruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := usruo.mutation.UserID(); ok {
		_spec.SetField(userspacerole.FieldUserID, field.TypeString, value)
	}
	if usruo.mutation.UserIDCleared() {
		_spec.ClearField(userspacerole.FieldUserID, field.TypeString)
	}
	if value, ok := usruo.mutation.SpaceID(); ok {
		_spec.SetField(userspacerole.FieldSpaceID, field.TypeString, value)
	}
	if usruo.mutation.SpaceIDCleared() {
		_spec.ClearField(userspacerole.FieldSpaceID, field.TypeString)
	}
	if value, ok := usruo.mutation.RoleID(); ok {
		_spec.SetField(userspacerole.FieldRoleID, field.TypeString, value)
	}
	if usruo.mutation.RoleIDCleared() {
		_spec.ClearField(userspacerole.FieldRoleID, field.TypeString)
	}
	if value, ok := usruo.mutation.CreatedBy(); ok {
		_spec.SetField(userspacerole.FieldCreatedBy, field.TypeString, value)
	}
	if usruo.mutation.CreatedByCleared() {
		_spec.ClearField(userspacerole.FieldCreatedBy, field.TypeString)
	}
	if value, ok := usruo.mutation.UpdatedBy(); ok {
		_spec.SetField(userspacerole.FieldUpdatedBy, field.TypeString, value)
	}
	if usruo.mutation.UpdatedByCleared() {
		_spec.ClearField(userspacerole.FieldUpdatedBy, field.TypeString)
	}
	if usruo.mutation.CreatedAtCleared() {
		_spec.ClearField(userspacerole.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := usruo.mutation.UpdatedAt(); ok {
		_spec.SetField(userspacerole.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := usruo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(userspacerole.FieldUpdatedAt, field.TypeInt64, value)
	}
	if usruo.mutation.UpdatedAtCleared() {
		_spec.ClearField(userspacerole.FieldUpdatedAt, field.TypeInt64)
	}
	_node = &UserSpaceRole{config: usruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, usruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userspacerole.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	usruo.mutation.done = true
	return _node, nil
}
