// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/system/data/ent/dictionary"
	"ncobase/system/data/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DictionaryUpdate is the builder for updating Dictionary entities.
type DictionaryUpdate struct {
	config
	hooks    []Hook
	mutation *DictionaryMutation
}

// Where appends a list predicates to the DictionaryUpdate builder.
func (du *DictionaryUpdate) Where(ps ...predicate.Dictionary) *DictionaryUpdate {
	du.mutation.Where(ps...)
	return du
}

// SetName sets the "name" field.
func (du *DictionaryUpdate) SetName(s string) *DictionaryUpdate {
	du.mutation.SetName(s)
	return du
}

// SetNillableName sets the "name" field if the given value is not nil.
func (du *DictionaryUpdate) SetNillableName(s *string) *DictionaryUpdate {
	if s != nil {
		du.SetName(*s)
	}
	return du
}

// ClearName clears the value of the "name" field.
func (du *DictionaryUpdate) ClearName() *DictionaryUpdate {
	du.mutation.ClearName()
	return du
}

// SetSlug sets the "slug" field.
func (du *DictionaryUpdate) SetSlug(s string) *DictionaryUpdate {
	du.mutation.SetSlug(s)
	return du
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (du *DictionaryUpdate) SetNillableSlug(s *string) *DictionaryUpdate {
	if s != nil {
		du.SetSlug(*s)
	}
	return du
}

// ClearSlug clears the value of the "slug" field.
func (du *DictionaryUpdate) ClearSlug() *DictionaryUpdate {
	du.mutation.ClearSlug()
	return du
}

// SetType sets the "type" field.
func (du *DictionaryUpdate) SetType(s string) *DictionaryUpdate {
	du.mutation.SetType(s)
	return du
}

// SetNillableType sets the "type" field if the given value is not nil.
func (du *DictionaryUpdate) SetNillableType(s *string) *DictionaryUpdate {
	if s != nil {
		du.SetType(*s)
	}
	return du
}

// ClearType clears the value of the "type" field.
func (du *DictionaryUpdate) ClearType() *DictionaryUpdate {
	du.mutation.ClearType()
	return du
}

// SetValue sets the "value" field.
func (du *DictionaryUpdate) SetValue(s string) *DictionaryUpdate {
	du.mutation.SetValue(s)
	return du
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (du *DictionaryUpdate) SetNillableValue(s *string) *DictionaryUpdate {
	if s != nil {
		du.SetValue(*s)
	}
	return du
}

// ClearValue clears the value of the "value" field.
func (du *DictionaryUpdate) ClearValue() *DictionaryUpdate {
	du.mutation.ClearValue()
	return du
}

// SetDescription sets the "description" field.
func (du *DictionaryUpdate) SetDescription(s string) *DictionaryUpdate {
	du.mutation.SetDescription(s)
	return du
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (du *DictionaryUpdate) SetNillableDescription(s *string) *DictionaryUpdate {
	if s != nil {
		du.SetDescription(*s)
	}
	return du
}

// ClearDescription clears the value of the "description" field.
func (du *DictionaryUpdate) ClearDescription() *DictionaryUpdate {
	du.mutation.ClearDescription()
	return du
}

// SetCreatedBy sets the "created_by" field.
func (du *DictionaryUpdate) SetCreatedBy(s string) *DictionaryUpdate {
	du.mutation.SetCreatedBy(s)
	return du
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (du *DictionaryUpdate) SetNillableCreatedBy(s *string) *DictionaryUpdate {
	if s != nil {
		du.SetCreatedBy(*s)
	}
	return du
}

// ClearCreatedBy clears the value of the "created_by" field.
func (du *DictionaryUpdate) ClearCreatedBy() *DictionaryUpdate {
	du.mutation.ClearCreatedBy()
	return du
}

// SetUpdatedBy sets the "updated_by" field.
func (du *DictionaryUpdate) SetUpdatedBy(s string) *DictionaryUpdate {
	du.mutation.SetUpdatedBy(s)
	return du
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (du *DictionaryUpdate) SetNillableUpdatedBy(s *string) *DictionaryUpdate {
	if s != nil {
		du.SetUpdatedBy(*s)
	}
	return du
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (du *DictionaryUpdate) ClearUpdatedBy() *DictionaryUpdate {
	du.mutation.ClearUpdatedBy()
	return du
}

// SetUpdatedAt sets the "updated_at" field.
func (du *DictionaryUpdate) SetUpdatedAt(i int64) *DictionaryUpdate {
	du.mutation.ResetUpdatedAt()
	du.mutation.SetUpdatedAt(i)
	return du
}

// AddUpdatedAt adds i to the "updated_at" field.
func (du *DictionaryUpdate) AddUpdatedAt(i int64) *DictionaryUpdate {
	du.mutation.AddUpdatedAt(i)
	return du
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (du *DictionaryUpdate) ClearUpdatedAt() *DictionaryUpdate {
	du.mutation.ClearUpdatedAt()
	return du
}

// Mutation returns the DictionaryMutation object of the builder.
func (du *DictionaryUpdate) Mutation() *DictionaryMutation {
	return du.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DictionaryUpdate) Save(ctx context.Context) (int, error) {
	du.defaults()
	return withHooks(ctx, du.sqlSave, du.mutation, du.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (du *DictionaryUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DictionaryUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DictionaryUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (du *DictionaryUpdate) defaults() {
	if _, ok := du.mutation.UpdatedAt(); !ok && !du.mutation.UpdatedAtCleared() {
		v := dictionary.UpdateDefaultUpdatedAt()
		du.mutation.SetUpdatedAt(v)
	}
}

func (du *DictionaryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(dictionary.Table, dictionary.Columns, sqlgraph.NewFieldSpec(dictionary.FieldID, field.TypeString))
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.Name(); ok {
		_spec.SetField(dictionary.FieldName, field.TypeString, value)
	}
	if du.mutation.NameCleared() {
		_spec.ClearField(dictionary.FieldName, field.TypeString)
	}
	if value, ok := du.mutation.Slug(); ok {
		_spec.SetField(dictionary.FieldSlug, field.TypeString, value)
	}
	if du.mutation.SlugCleared() {
		_spec.ClearField(dictionary.FieldSlug, field.TypeString)
	}
	if value, ok := du.mutation.GetType(); ok {
		_spec.SetField(dictionary.FieldType, field.TypeString, value)
	}
	if du.mutation.TypeCleared() {
		_spec.ClearField(dictionary.FieldType, field.TypeString)
	}
	if value, ok := du.mutation.Value(); ok {
		_spec.SetField(dictionary.FieldValue, field.TypeString, value)
	}
	if du.mutation.ValueCleared() {
		_spec.ClearField(dictionary.FieldValue, field.TypeString)
	}
	if value, ok := du.mutation.Description(); ok {
		_spec.SetField(dictionary.FieldDescription, field.TypeString, value)
	}
	if du.mutation.DescriptionCleared() {
		_spec.ClearField(dictionary.FieldDescription, field.TypeString)
	}
	if value, ok := du.mutation.CreatedBy(); ok {
		_spec.SetField(dictionary.FieldCreatedBy, field.TypeString, value)
	}
	if du.mutation.CreatedByCleared() {
		_spec.ClearField(dictionary.FieldCreatedBy, field.TypeString)
	}
	if value, ok := du.mutation.UpdatedBy(); ok {
		_spec.SetField(dictionary.FieldUpdatedBy, field.TypeString, value)
	}
	if du.mutation.UpdatedByCleared() {
		_spec.ClearField(dictionary.FieldUpdatedBy, field.TypeString)
	}
	if du.mutation.CreatedAtCleared() {
		_spec.ClearField(dictionary.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := du.mutation.UpdatedAt(); ok {
		_spec.SetField(dictionary.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := du.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(dictionary.FieldUpdatedAt, field.TypeInt64, value)
	}
	if du.mutation.UpdatedAtCleared() {
		_spec.ClearField(dictionary.FieldUpdatedAt, field.TypeInt64)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dictionary.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	du.mutation.done = true
	return n, nil
}

// DictionaryUpdateOne is the builder for updating a single Dictionary entity.
type DictionaryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DictionaryMutation
}

// SetName sets the "name" field.
func (duo *DictionaryUpdateOne) SetName(s string) *DictionaryUpdateOne {
	duo.mutation.SetName(s)
	return duo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (duo *DictionaryUpdateOne) SetNillableName(s *string) *DictionaryUpdateOne {
	if s != nil {
		duo.SetName(*s)
	}
	return duo
}

// ClearName clears the value of the "name" field.
func (duo *DictionaryUpdateOne) ClearName() *DictionaryUpdateOne {
	duo.mutation.ClearName()
	return duo
}

// SetSlug sets the "slug" field.
func (duo *DictionaryUpdateOne) SetSlug(s string) *DictionaryUpdateOne {
	duo.mutation.SetSlug(s)
	return duo
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (duo *DictionaryUpdateOne) SetNillableSlug(s *string) *DictionaryUpdateOne {
	if s != nil {
		duo.SetSlug(*s)
	}
	return duo
}

// ClearSlug clears the value of the "slug" field.
func (duo *DictionaryUpdateOne) ClearSlug() *DictionaryUpdateOne {
	duo.mutation.ClearSlug()
	return duo
}

// SetType sets the "type" field.
func (duo *DictionaryUpdateOne) SetType(s string) *DictionaryUpdateOne {
	duo.mutation.SetType(s)
	return duo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (duo *DictionaryUpdateOne) SetNillableType(s *string) *DictionaryUpdateOne {
	if s != nil {
		duo.SetType(*s)
	}
	return duo
}

// ClearType clears the value of the "type" field.
func (duo *DictionaryUpdateOne) ClearType() *DictionaryUpdateOne {
	duo.mutation.ClearType()
	return duo
}

// SetValue sets the "value" field.
func (duo *DictionaryUpdateOne) SetValue(s string) *DictionaryUpdateOne {
	duo.mutation.SetValue(s)
	return duo
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (duo *DictionaryUpdateOne) SetNillableValue(s *string) *DictionaryUpdateOne {
	if s != nil {
		duo.SetValue(*s)
	}
	return duo
}

// ClearValue clears the value of the "value" field.
func (duo *DictionaryUpdateOne) ClearValue() *DictionaryUpdateOne {
	duo.mutation.ClearValue()
	return duo
}

// SetDescription sets the "description" field.
func (duo *DictionaryUpdateOne) SetDescription(s string) *DictionaryUpdateOne {
	duo.mutation.SetDescription(s)
	return duo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (duo *DictionaryUpdateOne) SetNillableDescription(s *string) *DictionaryUpdateOne {
	if s != nil {
		duo.SetDescription(*s)
	}
	return duo
}

// ClearDescription clears the value of the "description" field.
func (duo *DictionaryUpdateOne) ClearDescription() *DictionaryUpdateOne {
	duo.mutation.ClearDescription()
	return duo
}

// SetCreatedBy sets the "created_by" field.
func (duo *DictionaryUpdateOne) SetCreatedBy(s string) *DictionaryUpdateOne {
	duo.mutation.SetCreatedBy(s)
	return duo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (duo *DictionaryUpdateOne) SetNillableCreatedBy(s *string) *DictionaryUpdateOne {
	if s != nil {
		duo.SetCreatedBy(*s)
	}
	return duo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (duo *DictionaryUpdateOne) ClearCreatedBy() *DictionaryUpdateOne {
	duo.mutation.ClearCreatedBy()
	return duo
}

// SetUpdatedBy sets the "updated_by" field.
func (duo *DictionaryUpdateOne) SetUpdatedBy(s string) *DictionaryUpdateOne {
	duo.mutation.SetUpdatedBy(s)
	return duo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (duo *DictionaryUpdateOne) SetNillableUpdatedBy(s *string) *DictionaryUpdateOne {
	if s != nil {
		duo.SetUpdatedBy(*s)
	}
	return duo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (duo *DictionaryUpdateOne) ClearUpdatedBy() *DictionaryUpdateOne {
	duo.mutation.ClearUpdatedBy()
	return duo
}

// SetUpdatedAt sets the "updated_at" field.
func (duo *DictionaryUpdateOne) SetUpdatedAt(i int64) *DictionaryUpdateOne {
	duo.mutation.ResetUpdatedAt()
	duo.mutation.SetUpdatedAt(i)
	return duo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (duo *DictionaryUpdateOne) AddUpdatedAt(i int64) *DictionaryUpdateOne {
	duo.mutation.AddUpdatedAt(i)
	return duo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (duo *DictionaryUpdateOne) ClearUpdatedAt() *DictionaryUpdateOne {
	duo.mutation.ClearUpdatedAt()
	return duo
}

// Mutation returns the DictionaryMutation object of the builder.
func (duo *DictionaryUpdateOne) Mutation() *DictionaryMutation {
	return duo.mutation
}

// Where appends a list predicates to the DictionaryUpdate builder.
func (duo *DictionaryUpdateOne) Where(ps ...predicate.Dictionary) *DictionaryUpdateOne {
	duo.mutation.Where(ps...)
	return duo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (duo *DictionaryUpdateOne) Select(field string, fields ...string) *DictionaryUpdateOne {
	duo.fields = append([]string{field}, fields...)
	return duo
}

// Save executes the query and returns the updated Dictionary entity.
func (duo *DictionaryUpdateOne) Save(ctx context.Context) (*Dictionary, error) {
	duo.defaults()
	return withHooks(ctx, duo.sqlSave, duo.mutation, duo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DictionaryUpdateOne) SaveX(ctx context.Context) *Dictionary {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DictionaryUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DictionaryUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (duo *DictionaryUpdateOne) defaults() {
	if _, ok := duo.mutation.UpdatedAt(); !ok && !duo.mutation.UpdatedAtCleared() {
		v := dictionary.UpdateDefaultUpdatedAt()
		duo.mutation.SetUpdatedAt(v)
	}
}

func (duo *DictionaryUpdateOne) sqlSave(ctx context.Context) (_node *Dictionary, err error) {
	_spec := sqlgraph.NewUpdateSpec(dictionary.Table, dictionary.Columns, sqlgraph.NewFieldSpec(dictionary.FieldID, field.TypeString))
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Dictionary.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := duo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, dictionary.FieldID)
		for _, f := range fields {
			if !dictionary.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != dictionary.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := duo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := duo.mutation.Name(); ok {
		_spec.SetField(dictionary.FieldName, field.TypeString, value)
	}
	if duo.mutation.NameCleared() {
		_spec.ClearField(dictionary.FieldName, field.TypeString)
	}
	if value, ok := duo.mutation.Slug(); ok {
		_spec.SetField(dictionary.FieldSlug, field.TypeString, value)
	}
	if duo.mutation.SlugCleared() {
		_spec.ClearField(dictionary.FieldSlug, field.TypeString)
	}
	if value, ok := duo.mutation.GetType(); ok {
		_spec.SetField(dictionary.FieldType, field.TypeString, value)
	}
	if duo.mutation.TypeCleared() {
		_spec.ClearField(dictionary.FieldType, field.TypeString)
	}
	if value, ok := duo.mutation.Value(); ok {
		_spec.SetField(dictionary.FieldValue, field.TypeString, value)
	}
	if duo.mutation.ValueCleared() {
		_spec.ClearField(dictionary.FieldValue, field.TypeString)
	}
	if value, ok := duo.mutation.Description(); ok {
		_spec.SetField(dictionary.FieldDescription, field.TypeString, value)
	}
	if duo.mutation.DescriptionCleared() {
		_spec.ClearField(dictionary.FieldDescription, field.TypeString)
	}
	if value, ok := duo.mutation.CreatedBy(); ok {
		_spec.SetField(dictionary.FieldCreatedBy, field.TypeString, value)
	}
	if duo.mutation.CreatedByCleared() {
		_spec.ClearField(dictionary.FieldCreatedBy, field.TypeString)
	}
	if value, ok := duo.mutation.UpdatedBy(); ok {
		_spec.SetField(dictionary.FieldUpdatedBy, field.TypeString, value)
	}
	if duo.mutation.UpdatedByCleared() {
		_spec.ClearField(dictionary.FieldUpdatedBy, field.TypeString)
	}
	if duo.mutation.CreatedAtCleared() {
		_spec.ClearField(dictionary.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := duo.mutation.UpdatedAt(); ok {
		_spec.SetField(dictionary.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := duo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(dictionary.FieldUpdatedAt, field.TypeInt64, value)
	}
	if duo.mutation.UpdatedAtCleared() {
		_spec.ClearField(dictionary.FieldUpdatedAt, field.TypeInt64)
	}
	_node = &Dictionary{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dictionary.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	duo.mutation.done = true
	return _node, nil
}
