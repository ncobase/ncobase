// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/system/data/ent/menu"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MenuCreate is the builder for creating a Menu entity.
type MenuCreate struct {
	config
	mutation *MenuMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (mc *MenuCreate) SetName(s string) *MenuCreate {
	mc.mutation.SetName(s)
	return mc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (mc *MenuCreate) SetNillableName(s *string) *MenuCreate {
	if s != nil {
		mc.SetName(*s)
	}
	return mc
}

// SetLabel sets the "label" field.
func (mc *MenuCreate) SetLabel(s string) *MenuCreate {
	mc.mutation.SetLabel(s)
	return mc
}

// SetNillableLabel sets the "label" field if the given value is not nil.
func (mc *MenuCreate) SetNillableLabel(s *string) *MenuCreate {
	if s != nil {
		mc.SetLabel(*s)
	}
	return mc
}

// SetSlug sets the "slug" field.
func (mc *MenuCreate) SetSlug(s string) *MenuCreate {
	mc.mutation.SetSlug(s)
	return mc
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (mc *MenuCreate) SetNillableSlug(s *string) *MenuCreate {
	if s != nil {
		mc.SetSlug(*s)
	}
	return mc
}

// SetType sets the "type" field.
func (mc *MenuCreate) SetType(s string) *MenuCreate {
	mc.mutation.SetType(s)
	return mc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (mc *MenuCreate) SetNillableType(s *string) *MenuCreate {
	if s != nil {
		mc.SetType(*s)
	}
	return mc
}

// SetPath sets the "path" field.
func (mc *MenuCreate) SetPath(s string) *MenuCreate {
	mc.mutation.SetPath(s)
	return mc
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (mc *MenuCreate) SetNillablePath(s *string) *MenuCreate {
	if s != nil {
		mc.SetPath(*s)
	}
	return mc
}

// SetTarget sets the "target" field.
func (mc *MenuCreate) SetTarget(s string) *MenuCreate {
	mc.mutation.SetTarget(s)
	return mc
}

// SetNillableTarget sets the "target" field if the given value is not nil.
func (mc *MenuCreate) SetNillableTarget(s *string) *MenuCreate {
	if s != nil {
		mc.SetTarget(*s)
	}
	return mc
}

// SetIcon sets the "icon" field.
func (mc *MenuCreate) SetIcon(s string) *MenuCreate {
	mc.mutation.SetIcon(s)
	return mc
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (mc *MenuCreate) SetNillableIcon(s *string) *MenuCreate {
	if s != nil {
		mc.SetIcon(*s)
	}
	return mc
}

// SetPerms sets the "perms" field.
func (mc *MenuCreate) SetPerms(s string) *MenuCreate {
	mc.mutation.SetPerms(s)
	return mc
}

// SetNillablePerms sets the "perms" field if the given value is not nil.
func (mc *MenuCreate) SetNillablePerms(s *string) *MenuCreate {
	if s != nil {
		mc.SetPerms(*s)
	}
	return mc
}

// SetHidden sets the "hidden" field.
func (mc *MenuCreate) SetHidden(b bool) *MenuCreate {
	mc.mutation.SetHidden(b)
	return mc
}

// SetNillableHidden sets the "hidden" field if the given value is not nil.
func (mc *MenuCreate) SetNillableHidden(b *bool) *MenuCreate {
	if b != nil {
		mc.SetHidden(*b)
	}
	return mc
}

// SetOrder sets the "order" field.
func (mc *MenuCreate) SetOrder(i int) *MenuCreate {
	mc.mutation.SetOrder(i)
	return mc
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (mc *MenuCreate) SetNillableOrder(i *int) *MenuCreate {
	if i != nil {
		mc.SetOrder(*i)
	}
	return mc
}

// SetDisabled sets the "disabled" field.
func (mc *MenuCreate) SetDisabled(b bool) *MenuCreate {
	mc.mutation.SetDisabled(b)
	return mc
}

// SetNillableDisabled sets the "disabled" field if the given value is not nil.
func (mc *MenuCreate) SetNillableDisabled(b *bool) *MenuCreate {
	if b != nil {
		mc.SetDisabled(*b)
	}
	return mc
}

// SetExtras sets the "extras" field.
func (mc *MenuCreate) SetExtras(m map[string]interface{}) *MenuCreate {
	mc.mutation.SetExtras(m)
	return mc
}

// SetParentID sets the "parent_id" field.
func (mc *MenuCreate) SetParentID(s string) *MenuCreate {
	mc.mutation.SetParentID(s)
	return mc
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (mc *MenuCreate) SetNillableParentID(s *string) *MenuCreate {
	if s != nil {
		mc.SetParentID(*s)
	}
	return mc
}

// SetCreatedBy sets the "created_by" field.
func (mc *MenuCreate) SetCreatedBy(s string) *MenuCreate {
	mc.mutation.SetCreatedBy(s)
	return mc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (mc *MenuCreate) SetNillableCreatedBy(s *string) *MenuCreate {
	if s != nil {
		mc.SetCreatedBy(*s)
	}
	return mc
}

// SetUpdatedBy sets the "updated_by" field.
func (mc *MenuCreate) SetUpdatedBy(s string) *MenuCreate {
	mc.mutation.SetUpdatedBy(s)
	return mc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (mc *MenuCreate) SetNillableUpdatedBy(s *string) *MenuCreate {
	if s != nil {
		mc.SetUpdatedBy(*s)
	}
	return mc
}

// SetCreatedAt sets the "created_at" field.
func (mc *MenuCreate) SetCreatedAt(i int64) *MenuCreate {
	mc.mutation.SetCreatedAt(i)
	return mc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mc *MenuCreate) SetNillableCreatedAt(i *int64) *MenuCreate {
	if i != nil {
		mc.SetCreatedAt(*i)
	}
	return mc
}

// SetUpdatedAt sets the "updated_at" field.
func (mc *MenuCreate) SetUpdatedAt(i int64) *MenuCreate {
	mc.mutation.SetUpdatedAt(i)
	return mc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mc *MenuCreate) SetNillableUpdatedAt(i *int64) *MenuCreate {
	if i != nil {
		mc.SetUpdatedAt(*i)
	}
	return mc
}

// SetID sets the "id" field.
func (mc *MenuCreate) SetID(s string) *MenuCreate {
	mc.mutation.SetID(s)
	return mc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (mc *MenuCreate) SetNillableID(s *string) *MenuCreate {
	if s != nil {
		mc.SetID(*s)
	}
	return mc
}

// Mutation returns the MenuMutation object of the builder.
func (mc *MenuCreate) Mutation() *MenuMutation {
	return mc.mutation
}

// Save creates the Menu in the database.
func (mc *MenuCreate) Save(ctx context.Context) (*Menu, error) {
	mc.defaults()
	return withHooks(ctx, mc.sqlSave, mc.mutation, mc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mc *MenuCreate) SaveX(ctx context.Context) *Menu {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mc *MenuCreate) Exec(ctx context.Context) error {
	_, err := mc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mc *MenuCreate) ExecX(ctx context.Context) {
	if err := mc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mc *MenuCreate) defaults() {
	if _, ok := mc.mutation.Hidden(); !ok {
		v := menu.DefaultHidden
		mc.mutation.SetHidden(v)
	}
	if _, ok := mc.mutation.Order(); !ok {
		v := menu.DefaultOrder
		mc.mutation.SetOrder(v)
	}
	if _, ok := mc.mutation.Disabled(); !ok {
		v := menu.DefaultDisabled
		mc.mutation.SetDisabled(v)
	}
	if _, ok := mc.mutation.Extras(); !ok {
		v := menu.DefaultExtras
		mc.mutation.SetExtras(v)
	}
	if _, ok := mc.mutation.CreatedAt(); !ok {
		v := menu.DefaultCreatedAt()
		mc.mutation.SetCreatedAt(v)
	}
	if _, ok := mc.mutation.UpdatedAt(); !ok {
		v := menu.DefaultUpdatedAt()
		mc.mutation.SetUpdatedAt(v)
	}
	if _, ok := mc.mutation.ID(); !ok {
		v := menu.DefaultID()
		mc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mc *MenuCreate) check() error {
	if _, ok := mc.mutation.Order(); !ok {
		return &ValidationError{Name: "order", err: errors.New(`ent: missing required field "Menu.order"`)}
	}
	if v, ok := mc.mutation.ParentID(); ok {
		if err := menu.ParentIDValidator(v); err != nil {
			return &ValidationError{Name: "parent_id", err: fmt.Errorf(`ent: validator failed for field "Menu.parent_id": %w`, err)}
		}
	}
	if v, ok := mc.mutation.CreatedBy(); ok {
		if err := menu.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "Menu.created_by": %w`, err)}
		}
	}
	if v, ok := mc.mutation.UpdatedBy(); ok {
		if err := menu.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "Menu.updated_by": %w`, err)}
		}
	}
	if v, ok := mc.mutation.ID(); ok {
		if err := menu.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Menu.id": %w`, err)}
		}
	}
	return nil
}

func (mc *MenuCreate) sqlSave(ctx context.Context) (*Menu, error) {
	if err := mc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Menu.ID type: %T", _spec.ID.Value)
		}
	}
	mc.mutation.id = &_node.ID
	mc.mutation.done = true
	return _node, nil
}

func (mc *MenuCreate) createSpec() (*Menu, *sqlgraph.CreateSpec) {
	var (
		_node = &Menu{config: mc.config}
		_spec = sqlgraph.NewCreateSpec(menu.Table, sqlgraph.NewFieldSpec(menu.FieldID, field.TypeString))
	)
	if id, ok := mc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := mc.mutation.Name(); ok {
		_spec.SetField(menu.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := mc.mutation.Label(); ok {
		_spec.SetField(menu.FieldLabel, field.TypeString, value)
		_node.Label = value
	}
	if value, ok := mc.mutation.Slug(); ok {
		_spec.SetField(menu.FieldSlug, field.TypeString, value)
		_node.Slug = value
	}
	if value, ok := mc.mutation.GetType(); ok {
		_spec.SetField(menu.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := mc.mutation.Path(); ok {
		_spec.SetField(menu.FieldPath, field.TypeString, value)
		_node.Path = value
	}
	if value, ok := mc.mutation.Target(); ok {
		_spec.SetField(menu.FieldTarget, field.TypeString, value)
		_node.Target = value
	}
	if value, ok := mc.mutation.Icon(); ok {
		_spec.SetField(menu.FieldIcon, field.TypeString, value)
		_node.Icon = value
	}
	if value, ok := mc.mutation.Perms(); ok {
		_spec.SetField(menu.FieldPerms, field.TypeString, value)
		_node.Perms = value
	}
	if value, ok := mc.mutation.Hidden(); ok {
		_spec.SetField(menu.FieldHidden, field.TypeBool, value)
		_node.Hidden = value
	}
	if value, ok := mc.mutation.Order(); ok {
		_spec.SetField(menu.FieldOrder, field.TypeInt, value)
		_node.Order = value
	}
	if value, ok := mc.mutation.Disabled(); ok {
		_spec.SetField(menu.FieldDisabled, field.TypeBool, value)
		_node.Disabled = value
	}
	if value, ok := mc.mutation.Extras(); ok {
		_spec.SetField(menu.FieldExtras, field.TypeJSON, value)
		_node.Extras = value
	}
	if value, ok := mc.mutation.ParentID(); ok {
		_spec.SetField(menu.FieldParentID, field.TypeString, value)
		_node.ParentID = value
	}
	if value, ok := mc.mutation.CreatedBy(); ok {
		_spec.SetField(menu.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := mc.mutation.UpdatedBy(); ok {
		_spec.SetField(menu.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := mc.mutation.CreatedAt(); ok {
		_spec.SetField(menu.FieldCreatedAt, field.TypeInt64, value)
		_node.CreatedAt = value
	}
	if value, ok := mc.mutation.UpdatedAt(); ok {
		_spec.SetField(menu.FieldUpdatedAt, field.TypeInt64, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// MenuCreateBulk is the builder for creating many Menu entities in bulk.
type MenuCreateBulk struct {
	config
	err      error
	builders []*MenuCreate
}

// Save creates the Menu entities in the database.
func (mcb *MenuCreateBulk) Save(ctx context.Context) ([]*Menu, error) {
	if mcb.err != nil {
		return nil, mcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mcb.builders))
	nodes := make([]*Menu, len(mcb.builders))
	mutators := make([]Mutator, len(mcb.builders))
	for i := range mcb.builders {
		func(i int, root context.Context) {
			builder := mcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MenuMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mcb *MenuCreateBulk) SaveX(ctx context.Context) []*Menu {
	v, err := mcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mcb *MenuCreateBulk) Exec(ctx context.Context) error {
	_, err := mcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcb *MenuCreateBulk) ExecX(ctx context.Context) {
	if err := mcb.Exec(ctx); err != nil {
		panic(err)
	}
}
