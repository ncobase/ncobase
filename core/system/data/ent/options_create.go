// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"ncobase/system/data/ent/options"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OptionsCreate is the builder for creating a Options entity.
type OptionsCreate struct {
	config
	mutation *OptionsMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (oc *OptionsCreate) SetName(s string) *OptionsCreate {
	oc.mutation.SetName(s)
	return oc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (oc *OptionsCreate) SetNillableName(s *string) *OptionsCreate {
	if s != nil {
		oc.SetName(*s)
	}
	return oc
}

// SetType sets the "type" field.
func (oc *OptionsCreate) SetType(s string) *OptionsCreate {
	oc.mutation.SetType(s)
	return oc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (oc *OptionsCreate) SetNillableType(s *string) *OptionsCreate {
	if s != nil {
		oc.SetType(*s)
	}
	return oc
}

// SetValue sets the "value" field.
func (oc *OptionsCreate) SetValue(s string) *OptionsCreate {
	oc.mutation.SetValue(s)
	return oc
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (oc *OptionsCreate) SetNillableValue(s *string) *OptionsCreate {
	if s != nil {
		oc.SetValue(*s)
	}
	return oc
}

// SetAutoload sets the "autoload" field.
func (oc *OptionsCreate) SetAutoload(b bool) *OptionsCreate {
	oc.mutation.SetAutoload(b)
	return oc
}

// SetNillableAutoload sets the "autoload" field if the given value is not nil.
func (oc *OptionsCreate) SetNillableAutoload(b *bool) *OptionsCreate {
	if b != nil {
		oc.SetAutoload(*b)
	}
	return oc
}

// SetTenantID sets the "tenant_id" field.
func (oc *OptionsCreate) SetTenantID(s string) *OptionsCreate {
	oc.mutation.SetTenantID(s)
	return oc
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (oc *OptionsCreate) SetNillableTenantID(s *string) *OptionsCreate {
	if s != nil {
		oc.SetTenantID(*s)
	}
	return oc
}

// SetCreatedBy sets the "created_by" field.
func (oc *OptionsCreate) SetCreatedBy(s string) *OptionsCreate {
	oc.mutation.SetCreatedBy(s)
	return oc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (oc *OptionsCreate) SetNillableCreatedBy(s *string) *OptionsCreate {
	if s != nil {
		oc.SetCreatedBy(*s)
	}
	return oc
}

// SetUpdatedBy sets the "updated_by" field.
func (oc *OptionsCreate) SetUpdatedBy(s string) *OptionsCreate {
	oc.mutation.SetUpdatedBy(s)
	return oc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (oc *OptionsCreate) SetNillableUpdatedBy(s *string) *OptionsCreate {
	if s != nil {
		oc.SetUpdatedBy(*s)
	}
	return oc
}

// SetCreatedAt sets the "created_at" field.
func (oc *OptionsCreate) SetCreatedAt(i int64) *OptionsCreate {
	oc.mutation.SetCreatedAt(i)
	return oc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (oc *OptionsCreate) SetNillableCreatedAt(i *int64) *OptionsCreate {
	if i != nil {
		oc.SetCreatedAt(*i)
	}
	return oc
}

// SetUpdatedAt sets the "updated_at" field.
func (oc *OptionsCreate) SetUpdatedAt(i int64) *OptionsCreate {
	oc.mutation.SetUpdatedAt(i)
	return oc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (oc *OptionsCreate) SetNillableUpdatedAt(i *int64) *OptionsCreate {
	if i != nil {
		oc.SetUpdatedAt(*i)
	}
	return oc
}

// SetID sets the "id" field.
func (oc *OptionsCreate) SetID(s string) *OptionsCreate {
	oc.mutation.SetID(s)
	return oc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (oc *OptionsCreate) SetNillableID(s *string) *OptionsCreate {
	if s != nil {
		oc.SetID(*s)
	}
	return oc
}

// Mutation returns the OptionsMutation object of the builder.
func (oc *OptionsCreate) Mutation() *OptionsMutation {
	return oc.mutation
}

// Save creates the Options in the database.
func (oc *OptionsCreate) Save(ctx context.Context) (*Options, error) {
	oc.defaults()
	return withHooks(ctx, oc.sqlSave, oc.mutation, oc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (oc *OptionsCreate) SaveX(ctx context.Context) *Options {
	v, err := oc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oc *OptionsCreate) Exec(ctx context.Context) error {
	_, err := oc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oc *OptionsCreate) ExecX(ctx context.Context) {
	if err := oc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oc *OptionsCreate) defaults() {
	if _, ok := oc.mutation.Autoload(); !ok {
		v := options.DefaultAutoload
		oc.mutation.SetAutoload(v)
	}
	if _, ok := oc.mutation.CreatedAt(); !ok {
		v := options.DefaultCreatedAt()
		oc.mutation.SetCreatedAt(v)
	}
	if _, ok := oc.mutation.UpdatedAt(); !ok {
		v := options.DefaultUpdatedAt()
		oc.mutation.SetUpdatedAt(v)
	}
	if _, ok := oc.mutation.ID(); !ok {
		v := options.DefaultID()
		oc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oc *OptionsCreate) check() error {
	if v, ok := oc.mutation.Name(); ok {
		if err := options.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Options.name": %w`, err)}
		}
	}
	if v, ok := oc.mutation.TenantID(); ok {
		if err := options.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "Options.tenant_id": %w`, err)}
		}
	}
	if v, ok := oc.mutation.CreatedBy(); ok {
		if err := options.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "Options.created_by": %w`, err)}
		}
	}
	if v, ok := oc.mutation.UpdatedBy(); ok {
		if err := options.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "Options.updated_by": %w`, err)}
		}
	}
	if v, ok := oc.mutation.ID(); ok {
		if err := options.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Options.id": %w`, err)}
		}
	}
	return nil
}

func (oc *OptionsCreate) sqlSave(ctx context.Context) (*Options, error) {
	if err := oc.check(); err != nil {
		return nil, err
	}
	_node, _spec := oc.createSpec()
	if err := sqlgraph.CreateNode(ctx, oc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Options.ID type: %T", _spec.ID.Value)
		}
	}
	oc.mutation.id = &_node.ID
	oc.mutation.done = true
	return _node, nil
}

func (oc *OptionsCreate) createSpec() (*Options, *sqlgraph.CreateSpec) {
	var (
		_node = &Options{config: oc.config}
		_spec = sqlgraph.NewCreateSpec(options.Table, sqlgraph.NewFieldSpec(options.FieldID, field.TypeString))
	)
	if id, ok := oc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := oc.mutation.Name(); ok {
		_spec.SetField(options.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := oc.mutation.GetType(); ok {
		_spec.SetField(options.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := oc.mutation.Value(); ok {
		_spec.SetField(options.FieldValue, field.TypeString, value)
		_node.Value = value
	}
	if value, ok := oc.mutation.Autoload(); ok {
		_spec.SetField(options.FieldAutoload, field.TypeBool, value)
		_node.Autoload = value
	}
	if value, ok := oc.mutation.TenantID(); ok {
		_spec.SetField(options.FieldTenantID, field.TypeString, value)
		_node.TenantID = value
	}
	if value, ok := oc.mutation.CreatedBy(); ok {
		_spec.SetField(options.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := oc.mutation.UpdatedBy(); ok {
		_spec.SetField(options.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := oc.mutation.CreatedAt(); ok {
		_spec.SetField(options.FieldCreatedAt, field.TypeInt64, value)
		_node.CreatedAt = value
	}
	if value, ok := oc.mutation.UpdatedAt(); ok {
		_spec.SetField(options.FieldUpdatedAt, field.TypeInt64, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// OptionsCreateBulk is the builder for creating many Options entities in bulk.
type OptionsCreateBulk struct {
	config
	err      error
	builders []*OptionsCreate
}

// Save creates the Options entities in the database.
func (ocb *OptionsCreateBulk) Save(ctx context.Context) ([]*Options, error) {
	if ocb.err != nil {
		return nil, ocb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ocb.builders))
	nodes := make([]*Options, len(ocb.builders))
	mutators := make([]Mutator, len(ocb.builders))
	for i := range ocb.builders {
		func(i int, root context.Context) {
			builder := ocb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OptionsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ocb *OptionsCreateBulk) SaveX(ctx context.Context) []*Options {
	v, err := ocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ocb *OptionsCreateBulk) Exec(ctx context.Context) error {
	_, err := ocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ocb *OptionsCreateBulk) ExecX(ctx context.Context) {
	if err := ocb.Exec(ctx); err != nil {
		panic(err)
	}
}
