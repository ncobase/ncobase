// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/system/data/ent/options"
	"ncobase/system/data/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OptionsUpdate is the builder for updating Options entities.
type OptionsUpdate struct {
	config
	hooks    []Hook
	mutation *OptionsMutation
}

// Where appends a list predicates to the OptionsUpdate builder.
func (ou *OptionsUpdate) Where(ps ...predicate.Options) *OptionsUpdate {
	ou.mutation.Where(ps...)
	return ou
}

// SetName sets the "name" field.
func (ou *OptionsUpdate) SetName(s string) *OptionsUpdate {
	ou.mutation.SetName(s)
	return ou
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ou *OptionsUpdate) SetNillableName(s *string) *OptionsUpdate {
	if s != nil {
		ou.SetName(*s)
	}
	return ou
}

// ClearName clears the value of the "name" field.
func (ou *OptionsUpdate) ClearName() *OptionsUpdate {
	ou.mutation.ClearName()
	return ou
}

// SetType sets the "type" field.
func (ou *OptionsUpdate) SetType(s string) *OptionsUpdate {
	ou.mutation.SetType(s)
	return ou
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ou *OptionsUpdate) SetNillableType(s *string) *OptionsUpdate {
	if s != nil {
		ou.SetType(*s)
	}
	return ou
}

// ClearType clears the value of the "type" field.
func (ou *OptionsUpdate) ClearType() *OptionsUpdate {
	ou.mutation.ClearType()
	return ou
}

// SetValue sets the "value" field.
func (ou *OptionsUpdate) SetValue(s string) *OptionsUpdate {
	ou.mutation.SetValue(s)
	return ou
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (ou *OptionsUpdate) SetNillableValue(s *string) *OptionsUpdate {
	if s != nil {
		ou.SetValue(*s)
	}
	return ou
}

// ClearValue clears the value of the "value" field.
func (ou *OptionsUpdate) ClearValue() *OptionsUpdate {
	ou.mutation.ClearValue()
	return ou
}

// SetAutoload sets the "autoload" field.
func (ou *OptionsUpdate) SetAutoload(b bool) *OptionsUpdate {
	ou.mutation.SetAutoload(b)
	return ou
}

// SetNillableAutoload sets the "autoload" field if the given value is not nil.
func (ou *OptionsUpdate) SetNillableAutoload(b *bool) *OptionsUpdate {
	if b != nil {
		ou.SetAutoload(*b)
	}
	return ou
}

// ClearAutoload clears the value of the "autoload" field.
func (ou *OptionsUpdate) ClearAutoload() *OptionsUpdate {
	ou.mutation.ClearAutoload()
	return ou
}

// SetCreatedBy sets the "created_by" field.
func (ou *OptionsUpdate) SetCreatedBy(s string) *OptionsUpdate {
	ou.mutation.SetCreatedBy(s)
	return ou
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (ou *OptionsUpdate) SetNillableCreatedBy(s *string) *OptionsUpdate {
	if s != nil {
		ou.SetCreatedBy(*s)
	}
	return ou
}

// ClearCreatedBy clears the value of the "created_by" field.
func (ou *OptionsUpdate) ClearCreatedBy() *OptionsUpdate {
	ou.mutation.ClearCreatedBy()
	return ou
}

// SetUpdatedBy sets the "updated_by" field.
func (ou *OptionsUpdate) SetUpdatedBy(s string) *OptionsUpdate {
	ou.mutation.SetUpdatedBy(s)
	return ou
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ou *OptionsUpdate) SetNillableUpdatedBy(s *string) *OptionsUpdate {
	if s != nil {
		ou.SetUpdatedBy(*s)
	}
	return ou
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (ou *OptionsUpdate) ClearUpdatedBy() *OptionsUpdate {
	ou.mutation.ClearUpdatedBy()
	return ou
}

// SetUpdatedAt sets the "updated_at" field.
func (ou *OptionsUpdate) SetUpdatedAt(i int64) *OptionsUpdate {
	ou.mutation.ResetUpdatedAt()
	ou.mutation.SetUpdatedAt(i)
	return ou
}

// AddUpdatedAt adds i to the "updated_at" field.
func (ou *OptionsUpdate) AddUpdatedAt(i int64) *OptionsUpdate {
	ou.mutation.AddUpdatedAt(i)
	return ou
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (ou *OptionsUpdate) ClearUpdatedAt() *OptionsUpdate {
	ou.mutation.ClearUpdatedAt()
	return ou
}

// Mutation returns the OptionsMutation object of the builder.
func (ou *OptionsUpdate) Mutation() *OptionsMutation {
	return ou.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ou *OptionsUpdate) Save(ctx context.Context) (int, error) {
	ou.defaults()
	return withHooks(ctx, ou.sqlSave, ou.mutation, ou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ou *OptionsUpdate) SaveX(ctx context.Context) int {
	affected, err := ou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ou *OptionsUpdate) Exec(ctx context.Context) error {
	_, err := ou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ou *OptionsUpdate) ExecX(ctx context.Context) {
	if err := ou.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ou *OptionsUpdate) defaults() {
	if _, ok := ou.mutation.UpdatedAt(); !ok && !ou.mutation.UpdatedAtCleared() {
		v := options.UpdateDefaultUpdatedAt()
		ou.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ou *OptionsUpdate) check() error {
	if v, ok := ou.mutation.Name(); ok {
		if err := options.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Options.name": %w`, err)}
		}
	}
	if v, ok := ou.mutation.CreatedBy(); ok {
		if err := options.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "Options.created_by": %w`, err)}
		}
	}
	if v, ok := ou.mutation.UpdatedBy(); ok {
		if err := options.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "Options.updated_by": %w`, err)}
		}
	}
	return nil
}

func (ou *OptionsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ou.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(options.Table, options.Columns, sqlgraph.NewFieldSpec(options.FieldID, field.TypeString))
	if ps := ou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ou.mutation.Name(); ok {
		_spec.SetField(options.FieldName, field.TypeString, value)
	}
	if ou.mutation.NameCleared() {
		_spec.ClearField(options.FieldName, field.TypeString)
	}
	if value, ok := ou.mutation.GetType(); ok {
		_spec.SetField(options.FieldType, field.TypeString, value)
	}
	if ou.mutation.TypeCleared() {
		_spec.ClearField(options.FieldType, field.TypeString)
	}
	if value, ok := ou.mutation.Value(); ok {
		_spec.SetField(options.FieldValue, field.TypeString, value)
	}
	if ou.mutation.ValueCleared() {
		_spec.ClearField(options.FieldValue, field.TypeString)
	}
	if value, ok := ou.mutation.Autoload(); ok {
		_spec.SetField(options.FieldAutoload, field.TypeBool, value)
	}
	if ou.mutation.AutoloadCleared() {
		_spec.ClearField(options.FieldAutoload, field.TypeBool)
	}
	if value, ok := ou.mutation.CreatedBy(); ok {
		_spec.SetField(options.FieldCreatedBy, field.TypeString, value)
	}
	if ou.mutation.CreatedByCleared() {
		_spec.ClearField(options.FieldCreatedBy, field.TypeString)
	}
	if value, ok := ou.mutation.UpdatedBy(); ok {
		_spec.SetField(options.FieldUpdatedBy, field.TypeString, value)
	}
	if ou.mutation.UpdatedByCleared() {
		_spec.ClearField(options.FieldUpdatedBy, field.TypeString)
	}
	if ou.mutation.CreatedAtCleared() {
		_spec.ClearField(options.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := ou.mutation.UpdatedAt(); ok {
		_spec.SetField(options.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := ou.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(options.FieldUpdatedAt, field.TypeInt64, value)
	}
	if ou.mutation.UpdatedAtCleared() {
		_spec.ClearField(options.FieldUpdatedAt, field.TypeInt64)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{options.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ou.mutation.done = true
	return n, nil
}

// OptionsUpdateOne is the builder for updating a single Options entity.
type OptionsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OptionsMutation
}

// SetName sets the "name" field.
func (ouo *OptionsUpdateOne) SetName(s string) *OptionsUpdateOne {
	ouo.mutation.SetName(s)
	return ouo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ouo *OptionsUpdateOne) SetNillableName(s *string) *OptionsUpdateOne {
	if s != nil {
		ouo.SetName(*s)
	}
	return ouo
}

// ClearName clears the value of the "name" field.
func (ouo *OptionsUpdateOne) ClearName() *OptionsUpdateOne {
	ouo.mutation.ClearName()
	return ouo
}

// SetType sets the "type" field.
func (ouo *OptionsUpdateOne) SetType(s string) *OptionsUpdateOne {
	ouo.mutation.SetType(s)
	return ouo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ouo *OptionsUpdateOne) SetNillableType(s *string) *OptionsUpdateOne {
	if s != nil {
		ouo.SetType(*s)
	}
	return ouo
}

// ClearType clears the value of the "type" field.
func (ouo *OptionsUpdateOne) ClearType() *OptionsUpdateOne {
	ouo.mutation.ClearType()
	return ouo
}

// SetValue sets the "value" field.
func (ouo *OptionsUpdateOne) SetValue(s string) *OptionsUpdateOne {
	ouo.mutation.SetValue(s)
	return ouo
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (ouo *OptionsUpdateOne) SetNillableValue(s *string) *OptionsUpdateOne {
	if s != nil {
		ouo.SetValue(*s)
	}
	return ouo
}

// ClearValue clears the value of the "value" field.
func (ouo *OptionsUpdateOne) ClearValue() *OptionsUpdateOne {
	ouo.mutation.ClearValue()
	return ouo
}

// SetAutoload sets the "autoload" field.
func (ouo *OptionsUpdateOne) SetAutoload(b bool) *OptionsUpdateOne {
	ouo.mutation.SetAutoload(b)
	return ouo
}

// SetNillableAutoload sets the "autoload" field if the given value is not nil.
func (ouo *OptionsUpdateOne) SetNillableAutoload(b *bool) *OptionsUpdateOne {
	if b != nil {
		ouo.SetAutoload(*b)
	}
	return ouo
}

// ClearAutoload clears the value of the "autoload" field.
func (ouo *OptionsUpdateOne) ClearAutoload() *OptionsUpdateOne {
	ouo.mutation.ClearAutoload()
	return ouo
}

// SetCreatedBy sets the "created_by" field.
func (ouo *OptionsUpdateOne) SetCreatedBy(s string) *OptionsUpdateOne {
	ouo.mutation.SetCreatedBy(s)
	return ouo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (ouo *OptionsUpdateOne) SetNillableCreatedBy(s *string) *OptionsUpdateOne {
	if s != nil {
		ouo.SetCreatedBy(*s)
	}
	return ouo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (ouo *OptionsUpdateOne) ClearCreatedBy() *OptionsUpdateOne {
	ouo.mutation.ClearCreatedBy()
	return ouo
}

// SetUpdatedBy sets the "updated_by" field.
func (ouo *OptionsUpdateOne) SetUpdatedBy(s string) *OptionsUpdateOne {
	ouo.mutation.SetUpdatedBy(s)
	return ouo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ouo *OptionsUpdateOne) SetNillableUpdatedBy(s *string) *OptionsUpdateOne {
	if s != nil {
		ouo.SetUpdatedBy(*s)
	}
	return ouo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (ouo *OptionsUpdateOne) ClearUpdatedBy() *OptionsUpdateOne {
	ouo.mutation.ClearUpdatedBy()
	return ouo
}

// SetUpdatedAt sets the "updated_at" field.
func (ouo *OptionsUpdateOne) SetUpdatedAt(i int64) *OptionsUpdateOne {
	ouo.mutation.ResetUpdatedAt()
	ouo.mutation.SetUpdatedAt(i)
	return ouo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (ouo *OptionsUpdateOne) AddUpdatedAt(i int64) *OptionsUpdateOne {
	ouo.mutation.AddUpdatedAt(i)
	return ouo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (ouo *OptionsUpdateOne) ClearUpdatedAt() *OptionsUpdateOne {
	ouo.mutation.ClearUpdatedAt()
	return ouo
}

// Mutation returns the OptionsMutation object of the builder.
func (ouo *OptionsUpdateOne) Mutation() *OptionsMutation {
	return ouo.mutation
}

// Where appends a list predicates to the OptionsUpdate builder.
func (ouo *OptionsUpdateOne) Where(ps ...predicate.Options) *OptionsUpdateOne {
	ouo.mutation.Where(ps...)
	return ouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ouo *OptionsUpdateOne) Select(field string, fields ...string) *OptionsUpdateOne {
	ouo.fields = append([]string{field}, fields...)
	return ouo
}

// Save executes the query and returns the updated Options entity.
func (ouo *OptionsUpdateOne) Save(ctx context.Context) (*Options, error) {
	ouo.defaults()
	return withHooks(ctx, ouo.sqlSave, ouo.mutation, ouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ouo *OptionsUpdateOne) SaveX(ctx context.Context) *Options {
	node, err := ouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ouo *OptionsUpdateOne) Exec(ctx context.Context) error {
	_, err := ouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouo *OptionsUpdateOne) ExecX(ctx context.Context) {
	if err := ouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ouo *OptionsUpdateOne) defaults() {
	if _, ok := ouo.mutation.UpdatedAt(); !ok && !ouo.mutation.UpdatedAtCleared() {
		v := options.UpdateDefaultUpdatedAt()
		ouo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ouo *OptionsUpdateOne) check() error {
	if v, ok := ouo.mutation.Name(); ok {
		if err := options.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Options.name": %w`, err)}
		}
	}
	if v, ok := ouo.mutation.CreatedBy(); ok {
		if err := options.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "Options.created_by": %w`, err)}
		}
	}
	if v, ok := ouo.mutation.UpdatedBy(); ok {
		if err := options.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "Options.updated_by": %w`, err)}
		}
	}
	return nil
}

func (ouo *OptionsUpdateOne) sqlSave(ctx context.Context) (_node *Options, err error) {
	if err := ouo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(options.Table, options.Columns, sqlgraph.NewFieldSpec(options.FieldID, field.TypeString))
	id, ok := ouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Options.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, options.FieldID)
		for _, f := range fields {
			if !options.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != options.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ouo.mutation.Name(); ok {
		_spec.SetField(options.FieldName, field.TypeString, value)
	}
	if ouo.mutation.NameCleared() {
		_spec.ClearField(options.FieldName, field.TypeString)
	}
	if value, ok := ouo.mutation.GetType(); ok {
		_spec.SetField(options.FieldType, field.TypeString, value)
	}
	if ouo.mutation.TypeCleared() {
		_spec.ClearField(options.FieldType, field.TypeString)
	}
	if value, ok := ouo.mutation.Value(); ok {
		_spec.SetField(options.FieldValue, field.TypeString, value)
	}
	if ouo.mutation.ValueCleared() {
		_spec.ClearField(options.FieldValue, field.TypeString)
	}
	if value, ok := ouo.mutation.Autoload(); ok {
		_spec.SetField(options.FieldAutoload, field.TypeBool, value)
	}
	if ouo.mutation.AutoloadCleared() {
		_spec.ClearField(options.FieldAutoload, field.TypeBool)
	}
	if value, ok := ouo.mutation.CreatedBy(); ok {
		_spec.SetField(options.FieldCreatedBy, field.TypeString, value)
	}
	if ouo.mutation.CreatedByCleared() {
		_spec.ClearField(options.FieldCreatedBy, field.TypeString)
	}
	if value, ok := ouo.mutation.UpdatedBy(); ok {
		_spec.SetField(options.FieldUpdatedBy, field.TypeString, value)
	}
	if ouo.mutation.UpdatedByCleared() {
		_spec.ClearField(options.FieldUpdatedBy, field.TypeString)
	}
	if ouo.mutation.CreatedAtCleared() {
		_spec.ClearField(options.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := ouo.mutation.UpdatedAt(); ok {
		_spec.SetField(options.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := ouo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(options.FieldUpdatedAt, field.TypeInt64, value)
	}
	if ouo.mutation.UpdatedAtCleared() {
		_spec.ClearField(options.FieldUpdatedAt, field.TypeInt64)
	}
	_node = &Options{config: ouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{options.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ouo.mutation.done = true
	return _node, nil
}
