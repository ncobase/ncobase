// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"ncobase/tenant/data/ent/migrate"

	"ncobase/tenant/data/ent/tenant"
	"ncobase/tenant/data/ent/tenantbilling"
	"ncobase/tenant/data/ent/tenantquota"
	"ncobase/tenant/data/ent/tenantsetting"
	"ncobase/tenant/data/ent/usertenant"
	"ncobase/tenant/data/ent/usertenantrole"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Tenant is the client for interacting with the Tenant builders.
	Tenant *TenantClient
	// TenantBilling is the client for interacting with the TenantBilling builders.
	TenantBilling *TenantBillingClient
	// TenantQuota is the client for interacting with the TenantQuota builders.
	TenantQuota *TenantQuotaClient
	// TenantSetting is the client for interacting with the TenantSetting builders.
	TenantSetting *TenantSettingClient
	// UserTenant is the client for interacting with the UserTenant builders.
	UserTenant *UserTenantClient
	// UserTenantRole is the client for interacting with the UserTenantRole builders.
	UserTenantRole *UserTenantRoleClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Tenant = NewTenantClient(c.config)
	c.TenantBilling = NewTenantBillingClient(c.config)
	c.TenantQuota = NewTenantQuotaClient(c.config)
	c.TenantSetting = NewTenantSettingClient(c.config)
	c.UserTenant = NewUserTenantClient(c.config)
	c.UserTenantRole = NewUserTenantRoleClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:            ctx,
		config:         cfg,
		Tenant:         NewTenantClient(cfg),
		TenantBilling:  NewTenantBillingClient(cfg),
		TenantQuota:    NewTenantQuotaClient(cfg),
		TenantSetting:  NewTenantSettingClient(cfg),
		UserTenant:     NewUserTenantClient(cfg),
		UserTenantRole: NewUserTenantRoleClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:            ctx,
		config:         cfg,
		Tenant:         NewTenantClient(cfg),
		TenantBilling:  NewTenantBillingClient(cfg),
		TenantQuota:    NewTenantQuotaClient(cfg),
		TenantSetting:  NewTenantSettingClient(cfg),
		UserTenant:     NewUserTenantClient(cfg),
		UserTenantRole: NewUserTenantRoleClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Tenant.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.Tenant, c.TenantBilling, c.TenantQuota, c.TenantSetting, c.UserTenant,
		c.UserTenantRole,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.Tenant, c.TenantBilling, c.TenantQuota, c.TenantSetting, c.UserTenant,
		c.UserTenantRole,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *TenantMutation:
		return c.Tenant.mutate(ctx, m)
	case *TenantBillingMutation:
		return c.TenantBilling.mutate(ctx, m)
	case *TenantQuotaMutation:
		return c.TenantQuota.mutate(ctx, m)
	case *TenantSettingMutation:
		return c.TenantSetting.mutate(ctx, m)
	case *UserTenantMutation:
		return c.UserTenant.mutate(ctx, m)
	case *UserTenantRoleMutation:
		return c.UserTenantRole.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// TenantClient is a client for the Tenant schema.
type TenantClient struct {
	config
}

// NewTenantClient returns a client for the Tenant from the given config.
func NewTenantClient(c config) *TenantClient {
	return &TenantClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `tenant.Hooks(f(g(h())))`.
func (c *TenantClient) Use(hooks ...Hook) {
	c.hooks.Tenant = append(c.hooks.Tenant, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `tenant.Intercept(f(g(h())))`.
func (c *TenantClient) Intercept(interceptors ...Interceptor) {
	c.inters.Tenant = append(c.inters.Tenant, interceptors...)
}

// Create returns a builder for creating a Tenant entity.
func (c *TenantClient) Create() *TenantCreate {
	mutation := newTenantMutation(c.config, OpCreate)
	return &TenantCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Tenant entities.
func (c *TenantClient) CreateBulk(builders ...*TenantCreate) *TenantCreateBulk {
	return &TenantCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TenantClient) MapCreateBulk(slice any, setFunc func(*TenantCreate, int)) *TenantCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TenantCreateBulk{err: fmt.Errorf("calling to TenantClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TenantCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TenantCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Tenant.
func (c *TenantClient) Update() *TenantUpdate {
	mutation := newTenantMutation(c.config, OpUpdate)
	return &TenantUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TenantClient) UpdateOne(t *Tenant) *TenantUpdateOne {
	mutation := newTenantMutation(c.config, OpUpdateOne, withTenant(t))
	return &TenantUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TenantClient) UpdateOneID(id string) *TenantUpdateOne {
	mutation := newTenantMutation(c.config, OpUpdateOne, withTenantID(id))
	return &TenantUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Tenant.
func (c *TenantClient) Delete() *TenantDelete {
	mutation := newTenantMutation(c.config, OpDelete)
	return &TenantDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TenantClient) DeleteOne(t *Tenant) *TenantDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TenantClient) DeleteOneID(id string) *TenantDeleteOne {
	builder := c.Delete().Where(tenant.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TenantDeleteOne{builder}
}

// Query returns a query builder for Tenant.
func (c *TenantClient) Query() *TenantQuery {
	return &TenantQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTenant},
		inters: c.Interceptors(),
	}
}

// Get returns a Tenant entity by its id.
func (c *TenantClient) Get(ctx context.Context, id string) (*Tenant, error) {
	return c.Query().Where(tenant.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TenantClient) GetX(ctx context.Context, id string) *Tenant {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TenantClient) Hooks() []Hook {
	return c.hooks.Tenant
}

// Interceptors returns the client interceptors.
func (c *TenantClient) Interceptors() []Interceptor {
	return c.inters.Tenant
}

func (c *TenantClient) mutate(ctx context.Context, m *TenantMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TenantCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TenantUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TenantUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TenantDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Tenant mutation op: %q", m.Op())
	}
}

// TenantBillingClient is a client for the TenantBilling schema.
type TenantBillingClient struct {
	config
}

// NewTenantBillingClient returns a client for the TenantBilling from the given config.
func NewTenantBillingClient(c config) *TenantBillingClient {
	return &TenantBillingClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `tenantbilling.Hooks(f(g(h())))`.
func (c *TenantBillingClient) Use(hooks ...Hook) {
	c.hooks.TenantBilling = append(c.hooks.TenantBilling, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `tenantbilling.Intercept(f(g(h())))`.
func (c *TenantBillingClient) Intercept(interceptors ...Interceptor) {
	c.inters.TenantBilling = append(c.inters.TenantBilling, interceptors...)
}

// Create returns a builder for creating a TenantBilling entity.
func (c *TenantBillingClient) Create() *TenantBillingCreate {
	mutation := newTenantBillingMutation(c.config, OpCreate)
	return &TenantBillingCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TenantBilling entities.
func (c *TenantBillingClient) CreateBulk(builders ...*TenantBillingCreate) *TenantBillingCreateBulk {
	return &TenantBillingCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TenantBillingClient) MapCreateBulk(slice any, setFunc func(*TenantBillingCreate, int)) *TenantBillingCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TenantBillingCreateBulk{err: fmt.Errorf("calling to TenantBillingClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TenantBillingCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TenantBillingCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TenantBilling.
func (c *TenantBillingClient) Update() *TenantBillingUpdate {
	mutation := newTenantBillingMutation(c.config, OpUpdate)
	return &TenantBillingUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TenantBillingClient) UpdateOne(tb *TenantBilling) *TenantBillingUpdateOne {
	mutation := newTenantBillingMutation(c.config, OpUpdateOne, withTenantBilling(tb))
	return &TenantBillingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TenantBillingClient) UpdateOneID(id string) *TenantBillingUpdateOne {
	mutation := newTenantBillingMutation(c.config, OpUpdateOne, withTenantBillingID(id))
	return &TenantBillingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TenantBilling.
func (c *TenantBillingClient) Delete() *TenantBillingDelete {
	mutation := newTenantBillingMutation(c.config, OpDelete)
	return &TenantBillingDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TenantBillingClient) DeleteOne(tb *TenantBilling) *TenantBillingDeleteOne {
	return c.DeleteOneID(tb.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TenantBillingClient) DeleteOneID(id string) *TenantBillingDeleteOne {
	builder := c.Delete().Where(tenantbilling.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TenantBillingDeleteOne{builder}
}

// Query returns a query builder for TenantBilling.
func (c *TenantBillingClient) Query() *TenantBillingQuery {
	return &TenantBillingQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTenantBilling},
		inters: c.Interceptors(),
	}
}

// Get returns a TenantBilling entity by its id.
func (c *TenantBillingClient) Get(ctx context.Context, id string) (*TenantBilling, error) {
	return c.Query().Where(tenantbilling.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TenantBillingClient) GetX(ctx context.Context, id string) *TenantBilling {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TenantBillingClient) Hooks() []Hook {
	return c.hooks.TenantBilling
}

// Interceptors returns the client interceptors.
func (c *TenantBillingClient) Interceptors() []Interceptor {
	return c.inters.TenantBilling
}

func (c *TenantBillingClient) mutate(ctx context.Context, m *TenantBillingMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TenantBillingCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TenantBillingUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TenantBillingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TenantBillingDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown TenantBilling mutation op: %q", m.Op())
	}
}

// TenantQuotaClient is a client for the TenantQuota schema.
type TenantQuotaClient struct {
	config
}

// NewTenantQuotaClient returns a client for the TenantQuota from the given config.
func NewTenantQuotaClient(c config) *TenantQuotaClient {
	return &TenantQuotaClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `tenantquota.Hooks(f(g(h())))`.
func (c *TenantQuotaClient) Use(hooks ...Hook) {
	c.hooks.TenantQuota = append(c.hooks.TenantQuota, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `tenantquota.Intercept(f(g(h())))`.
func (c *TenantQuotaClient) Intercept(interceptors ...Interceptor) {
	c.inters.TenantQuota = append(c.inters.TenantQuota, interceptors...)
}

// Create returns a builder for creating a TenantQuota entity.
func (c *TenantQuotaClient) Create() *TenantQuotaCreate {
	mutation := newTenantQuotaMutation(c.config, OpCreate)
	return &TenantQuotaCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TenantQuota entities.
func (c *TenantQuotaClient) CreateBulk(builders ...*TenantQuotaCreate) *TenantQuotaCreateBulk {
	return &TenantQuotaCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TenantQuotaClient) MapCreateBulk(slice any, setFunc func(*TenantQuotaCreate, int)) *TenantQuotaCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TenantQuotaCreateBulk{err: fmt.Errorf("calling to TenantQuotaClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TenantQuotaCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TenantQuotaCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TenantQuota.
func (c *TenantQuotaClient) Update() *TenantQuotaUpdate {
	mutation := newTenantQuotaMutation(c.config, OpUpdate)
	return &TenantQuotaUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TenantQuotaClient) UpdateOne(tq *TenantQuota) *TenantQuotaUpdateOne {
	mutation := newTenantQuotaMutation(c.config, OpUpdateOne, withTenantQuota(tq))
	return &TenantQuotaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TenantQuotaClient) UpdateOneID(id string) *TenantQuotaUpdateOne {
	mutation := newTenantQuotaMutation(c.config, OpUpdateOne, withTenantQuotaID(id))
	return &TenantQuotaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TenantQuota.
func (c *TenantQuotaClient) Delete() *TenantQuotaDelete {
	mutation := newTenantQuotaMutation(c.config, OpDelete)
	return &TenantQuotaDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TenantQuotaClient) DeleteOne(tq *TenantQuota) *TenantQuotaDeleteOne {
	return c.DeleteOneID(tq.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TenantQuotaClient) DeleteOneID(id string) *TenantQuotaDeleteOne {
	builder := c.Delete().Where(tenantquota.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TenantQuotaDeleteOne{builder}
}

// Query returns a query builder for TenantQuota.
func (c *TenantQuotaClient) Query() *TenantQuotaQuery {
	return &TenantQuotaQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTenantQuota},
		inters: c.Interceptors(),
	}
}

// Get returns a TenantQuota entity by its id.
func (c *TenantQuotaClient) Get(ctx context.Context, id string) (*TenantQuota, error) {
	return c.Query().Where(tenantquota.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TenantQuotaClient) GetX(ctx context.Context, id string) *TenantQuota {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TenantQuotaClient) Hooks() []Hook {
	return c.hooks.TenantQuota
}

// Interceptors returns the client interceptors.
func (c *TenantQuotaClient) Interceptors() []Interceptor {
	return c.inters.TenantQuota
}

func (c *TenantQuotaClient) mutate(ctx context.Context, m *TenantQuotaMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TenantQuotaCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TenantQuotaUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TenantQuotaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TenantQuotaDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown TenantQuota mutation op: %q", m.Op())
	}
}

// TenantSettingClient is a client for the TenantSetting schema.
type TenantSettingClient struct {
	config
}

// NewTenantSettingClient returns a client for the TenantSetting from the given config.
func NewTenantSettingClient(c config) *TenantSettingClient {
	return &TenantSettingClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `tenantsetting.Hooks(f(g(h())))`.
func (c *TenantSettingClient) Use(hooks ...Hook) {
	c.hooks.TenantSetting = append(c.hooks.TenantSetting, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `tenantsetting.Intercept(f(g(h())))`.
func (c *TenantSettingClient) Intercept(interceptors ...Interceptor) {
	c.inters.TenantSetting = append(c.inters.TenantSetting, interceptors...)
}

// Create returns a builder for creating a TenantSetting entity.
func (c *TenantSettingClient) Create() *TenantSettingCreate {
	mutation := newTenantSettingMutation(c.config, OpCreate)
	return &TenantSettingCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TenantSetting entities.
func (c *TenantSettingClient) CreateBulk(builders ...*TenantSettingCreate) *TenantSettingCreateBulk {
	return &TenantSettingCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TenantSettingClient) MapCreateBulk(slice any, setFunc func(*TenantSettingCreate, int)) *TenantSettingCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TenantSettingCreateBulk{err: fmt.Errorf("calling to TenantSettingClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TenantSettingCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TenantSettingCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TenantSetting.
func (c *TenantSettingClient) Update() *TenantSettingUpdate {
	mutation := newTenantSettingMutation(c.config, OpUpdate)
	return &TenantSettingUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TenantSettingClient) UpdateOne(ts *TenantSetting) *TenantSettingUpdateOne {
	mutation := newTenantSettingMutation(c.config, OpUpdateOne, withTenantSetting(ts))
	return &TenantSettingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TenantSettingClient) UpdateOneID(id string) *TenantSettingUpdateOne {
	mutation := newTenantSettingMutation(c.config, OpUpdateOne, withTenantSettingID(id))
	return &TenantSettingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TenantSetting.
func (c *TenantSettingClient) Delete() *TenantSettingDelete {
	mutation := newTenantSettingMutation(c.config, OpDelete)
	return &TenantSettingDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TenantSettingClient) DeleteOne(ts *TenantSetting) *TenantSettingDeleteOne {
	return c.DeleteOneID(ts.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TenantSettingClient) DeleteOneID(id string) *TenantSettingDeleteOne {
	builder := c.Delete().Where(tenantsetting.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TenantSettingDeleteOne{builder}
}

// Query returns a query builder for TenantSetting.
func (c *TenantSettingClient) Query() *TenantSettingQuery {
	return &TenantSettingQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTenantSetting},
		inters: c.Interceptors(),
	}
}

// Get returns a TenantSetting entity by its id.
func (c *TenantSettingClient) Get(ctx context.Context, id string) (*TenantSetting, error) {
	return c.Query().Where(tenantsetting.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TenantSettingClient) GetX(ctx context.Context, id string) *TenantSetting {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TenantSettingClient) Hooks() []Hook {
	return c.hooks.TenantSetting
}

// Interceptors returns the client interceptors.
func (c *TenantSettingClient) Interceptors() []Interceptor {
	return c.inters.TenantSetting
}

func (c *TenantSettingClient) mutate(ctx context.Context, m *TenantSettingMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TenantSettingCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TenantSettingUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TenantSettingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TenantSettingDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown TenantSetting mutation op: %q", m.Op())
	}
}

// UserTenantClient is a client for the UserTenant schema.
type UserTenantClient struct {
	config
}

// NewUserTenantClient returns a client for the UserTenant from the given config.
func NewUserTenantClient(c config) *UserTenantClient {
	return &UserTenantClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `usertenant.Hooks(f(g(h())))`.
func (c *UserTenantClient) Use(hooks ...Hook) {
	c.hooks.UserTenant = append(c.hooks.UserTenant, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `usertenant.Intercept(f(g(h())))`.
func (c *UserTenantClient) Intercept(interceptors ...Interceptor) {
	c.inters.UserTenant = append(c.inters.UserTenant, interceptors...)
}

// Create returns a builder for creating a UserTenant entity.
func (c *UserTenantClient) Create() *UserTenantCreate {
	mutation := newUserTenantMutation(c.config, OpCreate)
	return &UserTenantCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserTenant entities.
func (c *UserTenantClient) CreateBulk(builders ...*UserTenantCreate) *UserTenantCreateBulk {
	return &UserTenantCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserTenantClient) MapCreateBulk(slice any, setFunc func(*UserTenantCreate, int)) *UserTenantCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserTenantCreateBulk{err: fmt.Errorf("calling to UserTenantClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserTenantCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserTenantCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserTenant.
func (c *UserTenantClient) Update() *UserTenantUpdate {
	mutation := newUserTenantMutation(c.config, OpUpdate)
	return &UserTenantUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserTenantClient) UpdateOne(ut *UserTenant) *UserTenantUpdateOne {
	mutation := newUserTenantMutation(c.config, OpUpdateOne, withUserTenant(ut))
	return &UserTenantUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserTenantClient) UpdateOneID(id string) *UserTenantUpdateOne {
	mutation := newUserTenantMutation(c.config, OpUpdateOne, withUserTenantID(id))
	return &UserTenantUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserTenant.
func (c *UserTenantClient) Delete() *UserTenantDelete {
	mutation := newUserTenantMutation(c.config, OpDelete)
	return &UserTenantDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserTenantClient) DeleteOne(ut *UserTenant) *UserTenantDeleteOne {
	return c.DeleteOneID(ut.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserTenantClient) DeleteOneID(id string) *UserTenantDeleteOne {
	builder := c.Delete().Where(usertenant.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserTenantDeleteOne{builder}
}

// Query returns a query builder for UserTenant.
func (c *UserTenantClient) Query() *UserTenantQuery {
	return &UserTenantQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUserTenant},
		inters: c.Interceptors(),
	}
}

// Get returns a UserTenant entity by its id.
func (c *UserTenantClient) Get(ctx context.Context, id string) (*UserTenant, error) {
	return c.Query().Where(usertenant.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserTenantClient) GetX(ctx context.Context, id string) *UserTenant {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserTenantClient) Hooks() []Hook {
	return c.hooks.UserTenant
}

// Interceptors returns the client interceptors.
func (c *UserTenantClient) Interceptors() []Interceptor {
	return c.inters.UserTenant
}

func (c *UserTenantClient) mutate(ctx context.Context, m *UserTenantMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserTenantCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserTenantUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserTenantUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserTenantDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UserTenant mutation op: %q", m.Op())
	}
}

// UserTenantRoleClient is a client for the UserTenantRole schema.
type UserTenantRoleClient struct {
	config
}

// NewUserTenantRoleClient returns a client for the UserTenantRole from the given config.
func NewUserTenantRoleClient(c config) *UserTenantRoleClient {
	return &UserTenantRoleClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `usertenantrole.Hooks(f(g(h())))`.
func (c *UserTenantRoleClient) Use(hooks ...Hook) {
	c.hooks.UserTenantRole = append(c.hooks.UserTenantRole, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `usertenantrole.Intercept(f(g(h())))`.
func (c *UserTenantRoleClient) Intercept(interceptors ...Interceptor) {
	c.inters.UserTenantRole = append(c.inters.UserTenantRole, interceptors...)
}

// Create returns a builder for creating a UserTenantRole entity.
func (c *UserTenantRoleClient) Create() *UserTenantRoleCreate {
	mutation := newUserTenantRoleMutation(c.config, OpCreate)
	return &UserTenantRoleCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserTenantRole entities.
func (c *UserTenantRoleClient) CreateBulk(builders ...*UserTenantRoleCreate) *UserTenantRoleCreateBulk {
	return &UserTenantRoleCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserTenantRoleClient) MapCreateBulk(slice any, setFunc func(*UserTenantRoleCreate, int)) *UserTenantRoleCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserTenantRoleCreateBulk{err: fmt.Errorf("calling to UserTenantRoleClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserTenantRoleCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserTenantRoleCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserTenantRole.
func (c *UserTenantRoleClient) Update() *UserTenantRoleUpdate {
	mutation := newUserTenantRoleMutation(c.config, OpUpdate)
	return &UserTenantRoleUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserTenantRoleClient) UpdateOne(utr *UserTenantRole) *UserTenantRoleUpdateOne {
	mutation := newUserTenantRoleMutation(c.config, OpUpdateOne, withUserTenantRole(utr))
	return &UserTenantRoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserTenantRoleClient) UpdateOneID(id string) *UserTenantRoleUpdateOne {
	mutation := newUserTenantRoleMutation(c.config, OpUpdateOne, withUserTenantRoleID(id))
	return &UserTenantRoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserTenantRole.
func (c *UserTenantRoleClient) Delete() *UserTenantRoleDelete {
	mutation := newUserTenantRoleMutation(c.config, OpDelete)
	return &UserTenantRoleDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserTenantRoleClient) DeleteOne(utr *UserTenantRole) *UserTenantRoleDeleteOne {
	return c.DeleteOneID(utr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserTenantRoleClient) DeleteOneID(id string) *UserTenantRoleDeleteOne {
	builder := c.Delete().Where(usertenantrole.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserTenantRoleDeleteOne{builder}
}

// Query returns a query builder for UserTenantRole.
func (c *UserTenantRoleClient) Query() *UserTenantRoleQuery {
	return &UserTenantRoleQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUserTenantRole},
		inters: c.Interceptors(),
	}
}

// Get returns a UserTenantRole entity by its id.
func (c *UserTenantRoleClient) Get(ctx context.Context, id string) (*UserTenantRole, error) {
	return c.Query().Where(usertenantrole.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserTenantRoleClient) GetX(ctx context.Context, id string) *UserTenantRole {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserTenantRoleClient) Hooks() []Hook {
	return c.hooks.UserTenantRole
}

// Interceptors returns the client interceptors.
func (c *UserTenantRoleClient) Interceptors() []Interceptor {
	return c.inters.UserTenantRole
}

func (c *UserTenantRoleClient) mutate(ctx context.Context, m *UserTenantRoleMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserTenantRoleCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserTenantRoleUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserTenantRoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserTenantRoleDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UserTenantRole mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Tenant, TenantBilling, TenantQuota, TenantSetting, UserTenant,
		UserTenantRole []ent.Hook
	}
	inters struct {
		Tenant, TenantBilling, TenantQuota, TenantSetting, UserTenant,
		UserTenantRole []ent.Interceptor
	}
)
