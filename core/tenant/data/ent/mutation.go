// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/core/tenant/data/ent/predicate"
	"ncobase/core/tenant/data/ent/tenant"
	"ncobase/core/tenant/data/ent/usertenant"
	"sync"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeTenant     = "Tenant"
	TypeUserTenant = "UserTenant"
)

// TenantMutation represents an operation that mutates the Tenant nodes in the graph.
type TenantMutation struct {
	config
	op            Op
	typ           string
	id            *string
	name          *string
	slug          *string
	_type         *string
	title         *string
	url           *string
	logo          *string
	logo_alt      *string
	keywords      *string
	copyright     *string
	description   *string
	_order        *int
	add_order     *int
	disabled      *bool
	extras        *map[string]interface{}
	created_by    *string
	updated_by    *string
	expired_at    *int64
	addexpired_at *int64
	created_at    *int64
	addcreated_at *int64
	updated_at    *int64
	addupdated_at *int64
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Tenant, error)
	predicates    []predicate.Tenant
}

var _ ent.Mutation = (*TenantMutation)(nil)

// tenantOption allows management of the mutation configuration using functional options.
type tenantOption func(*TenantMutation)

// newTenantMutation creates new mutation for the Tenant entity.
func newTenantMutation(c config, op Op, opts ...tenantOption) *TenantMutation {
	m := &TenantMutation{
		config:        c,
		op:            op,
		typ:           TypeTenant,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTenantID sets the ID field of the mutation.
func withTenantID(id string) tenantOption {
	return func(m *TenantMutation) {
		var (
			err   error
			once  sync.Once
			value *Tenant
		)
		m.oldValue = func(ctx context.Context) (*Tenant, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Tenant.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTenant sets the old Tenant of the mutation.
func withTenant(node *Tenant) tenantOption {
	return func(m *TenantMutation) {
		m.oldValue = func(context.Context) (*Tenant, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TenantMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TenantMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Tenant entities.
func (m *TenantMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TenantMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TenantMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Tenant.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *TenantMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *TenantMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Tenant entity.
// If the Tenant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TenantMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ClearName clears the value of the "name" field.
func (m *TenantMutation) ClearName() {
	m.name = nil
	m.clearedFields[tenant.FieldName] = struct{}{}
}

// NameCleared returns if the "name" field was cleared in this mutation.
func (m *TenantMutation) NameCleared() bool {
	_, ok := m.clearedFields[tenant.FieldName]
	return ok
}

// ResetName resets all changes to the "name" field.
func (m *TenantMutation) ResetName() {
	m.name = nil
	delete(m.clearedFields, tenant.FieldName)
}

// SetSlug sets the "slug" field.
func (m *TenantMutation) SetSlug(s string) {
	m.slug = &s
}

// Slug returns the value of the "slug" field in the mutation.
func (m *TenantMutation) Slug() (r string, exists bool) {
	v := m.slug
	if v == nil {
		return
	}
	return *v, true
}

// OldSlug returns the old "slug" field's value of the Tenant entity.
// If the Tenant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TenantMutation) OldSlug(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSlug is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSlug requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSlug: %w", err)
	}
	return oldValue.Slug, nil
}

// ClearSlug clears the value of the "slug" field.
func (m *TenantMutation) ClearSlug() {
	m.slug = nil
	m.clearedFields[tenant.FieldSlug] = struct{}{}
}

// SlugCleared returns if the "slug" field was cleared in this mutation.
func (m *TenantMutation) SlugCleared() bool {
	_, ok := m.clearedFields[tenant.FieldSlug]
	return ok
}

// ResetSlug resets all changes to the "slug" field.
func (m *TenantMutation) ResetSlug() {
	m.slug = nil
	delete(m.clearedFields, tenant.FieldSlug)
}

// SetType sets the "type" field.
func (m *TenantMutation) SetType(s string) {
	m._type = &s
}

// GetType returns the value of the "type" field in the mutation.
func (m *TenantMutation) GetType() (r string, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Tenant entity.
// If the Tenant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TenantMutation) OldType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ClearType clears the value of the "type" field.
func (m *TenantMutation) ClearType() {
	m._type = nil
	m.clearedFields[tenant.FieldType] = struct{}{}
}

// TypeCleared returns if the "type" field was cleared in this mutation.
func (m *TenantMutation) TypeCleared() bool {
	_, ok := m.clearedFields[tenant.FieldType]
	return ok
}

// ResetType resets all changes to the "type" field.
func (m *TenantMutation) ResetType() {
	m._type = nil
	delete(m.clearedFields, tenant.FieldType)
}

// SetTitle sets the "title" field.
func (m *TenantMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *TenantMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Tenant entity.
// If the Tenant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TenantMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ClearTitle clears the value of the "title" field.
func (m *TenantMutation) ClearTitle() {
	m.title = nil
	m.clearedFields[tenant.FieldTitle] = struct{}{}
}

// TitleCleared returns if the "title" field was cleared in this mutation.
func (m *TenantMutation) TitleCleared() bool {
	_, ok := m.clearedFields[tenant.FieldTitle]
	return ok
}

// ResetTitle resets all changes to the "title" field.
func (m *TenantMutation) ResetTitle() {
	m.title = nil
	delete(m.clearedFields, tenant.FieldTitle)
}

// SetURL sets the "url" field.
func (m *TenantMutation) SetURL(s string) {
	m.url = &s
}

// URL returns the value of the "url" field in the mutation.
func (m *TenantMutation) URL() (r string, exists bool) {
	v := m.url
	if v == nil {
		return
	}
	return *v, true
}

// OldURL returns the old "url" field's value of the Tenant entity.
// If the Tenant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TenantMutation) OldURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldURL: %w", err)
	}
	return oldValue.URL, nil
}

// ClearURL clears the value of the "url" field.
func (m *TenantMutation) ClearURL() {
	m.url = nil
	m.clearedFields[tenant.FieldURL] = struct{}{}
}

// URLCleared returns if the "url" field was cleared in this mutation.
func (m *TenantMutation) URLCleared() bool {
	_, ok := m.clearedFields[tenant.FieldURL]
	return ok
}

// ResetURL resets all changes to the "url" field.
func (m *TenantMutation) ResetURL() {
	m.url = nil
	delete(m.clearedFields, tenant.FieldURL)
}

// SetLogo sets the "logo" field.
func (m *TenantMutation) SetLogo(s string) {
	m.logo = &s
}

// Logo returns the value of the "logo" field in the mutation.
func (m *TenantMutation) Logo() (r string, exists bool) {
	v := m.logo
	if v == nil {
		return
	}
	return *v, true
}

// OldLogo returns the old "logo" field's value of the Tenant entity.
// If the Tenant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TenantMutation) OldLogo(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLogo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLogo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLogo: %w", err)
	}
	return oldValue.Logo, nil
}

// ClearLogo clears the value of the "logo" field.
func (m *TenantMutation) ClearLogo() {
	m.logo = nil
	m.clearedFields[tenant.FieldLogo] = struct{}{}
}

// LogoCleared returns if the "logo" field was cleared in this mutation.
func (m *TenantMutation) LogoCleared() bool {
	_, ok := m.clearedFields[tenant.FieldLogo]
	return ok
}

// ResetLogo resets all changes to the "logo" field.
func (m *TenantMutation) ResetLogo() {
	m.logo = nil
	delete(m.clearedFields, tenant.FieldLogo)
}

// SetLogoAlt sets the "logo_alt" field.
func (m *TenantMutation) SetLogoAlt(s string) {
	m.logo_alt = &s
}

// LogoAlt returns the value of the "logo_alt" field in the mutation.
func (m *TenantMutation) LogoAlt() (r string, exists bool) {
	v := m.logo_alt
	if v == nil {
		return
	}
	return *v, true
}

// OldLogoAlt returns the old "logo_alt" field's value of the Tenant entity.
// If the Tenant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TenantMutation) OldLogoAlt(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLogoAlt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLogoAlt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLogoAlt: %w", err)
	}
	return oldValue.LogoAlt, nil
}

// ClearLogoAlt clears the value of the "logo_alt" field.
func (m *TenantMutation) ClearLogoAlt() {
	m.logo_alt = nil
	m.clearedFields[tenant.FieldLogoAlt] = struct{}{}
}

// LogoAltCleared returns if the "logo_alt" field was cleared in this mutation.
func (m *TenantMutation) LogoAltCleared() bool {
	_, ok := m.clearedFields[tenant.FieldLogoAlt]
	return ok
}

// ResetLogoAlt resets all changes to the "logo_alt" field.
func (m *TenantMutation) ResetLogoAlt() {
	m.logo_alt = nil
	delete(m.clearedFields, tenant.FieldLogoAlt)
}

// SetKeywords sets the "keywords" field.
func (m *TenantMutation) SetKeywords(s string) {
	m.keywords = &s
}

// Keywords returns the value of the "keywords" field in the mutation.
func (m *TenantMutation) Keywords() (r string, exists bool) {
	v := m.keywords
	if v == nil {
		return
	}
	return *v, true
}

// OldKeywords returns the old "keywords" field's value of the Tenant entity.
// If the Tenant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TenantMutation) OldKeywords(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldKeywords is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldKeywords requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldKeywords: %w", err)
	}
	return oldValue.Keywords, nil
}

// ClearKeywords clears the value of the "keywords" field.
func (m *TenantMutation) ClearKeywords() {
	m.keywords = nil
	m.clearedFields[tenant.FieldKeywords] = struct{}{}
}

// KeywordsCleared returns if the "keywords" field was cleared in this mutation.
func (m *TenantMutation) KeywordsCleared() bool {
	_, ok := m.clearedFields[tenant.FieldKeywords]
	return ok
}

// ResetKeywords resets all changes to the "keywords" field.
func (m *TenantMutation) ResetKeywords() {
	m.keywords = nil
	delete(m.clearedFields, tenant.FieldKeywords)
}

// SetCopyright sets the "copyright" field.
func (m *TenantMutation) SetCopyright(s string) {
	m.copyright = &s
}

// Copyright returns the value of the "copyright" field in the mutation.
func (m *TenantMutation) Copyright() (r string, exists bool) {
	v := m.copyright
	if v == nil {
		return
	}
	return *v, true
}

// OldCopyright returns the old "copyright" field's value of the Tenant entity.
// If the Tenant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TenantMutation) OldCopyright(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCopyright is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCopyright requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCopyright: %w", err)
	}
	return oldValue.Copyright, nil
}

// ClearCopyright clears the value of the "copyright" field.
func (m *TenantMutation) ClearCopyright() {
	m.copyright = nil
	m.clearedFields[tenant.FieldCopyright] = struct{}{}
}

// CopyrightCleared returns if the "copyright" field was cleared in this mutation.
func (m *TenantMutation) CopyrightCleared() bool {
	_, ok := m.clearedFields[tenant.FieldCopyright]
	return ok
}

// ResetCopyright resets all changes to the "copyright" field.
func (m *TenantMutation) ResetCopyright() {
	m.copyright = nil
	delete(m.clearedFields, tenant.FieldCopyright)
}

// SetDescription sets the "description" field.
func (m *TenantMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *TenantMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Tenant entity.
// If the Tenant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TenantMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *TenantMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[tenant.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *TenantMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[tenant.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *TenantMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, tenant.FieldDescription)
}

// SetOrder sets the "order" field.
func (m *TenantMutation) SetOrder(i int) {
	m._order = &i
	m.add_order = nil
}

// Order returns the value of the "order" field in the mutation.
func (m *TenantMutation) Order() (r int, exists bool) {
	v := m._order
	if v == nil {
		return
	}
	return *v, true
}

// OldOrder returns the old "order" field's value of the Tenant entity.
// If the Tenant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TenantMutation) OldOrder(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrder is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrder requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrder: %w", err)
	}
	return oldValue.Order, nil
}

// AddOrder adds i to the "order" field.
func (m *TenantMutation) AddOrder(i int) {
	if m.add_order != nil {
		*m.add_order += i
	} else {
		m.add_order = &i
	}
}

// AddedOrder returns the value that was added to the "order" field in this mutation.
func (m *TenantMutation) AddedOrder() (r int, exists bool) {
	v := m.add_order
	if v == nil {
		return
	}
	return *v, true
}

// ResetOrder resets all changes to the "order" field.
func (m *TenantMutation) ResetOrder() {
	m._order = nil
	m.add_order = nil
}

// SetDisabled sets the "disabled" field.
func (m *TenantMutation) SetDisabled(b bool) {
	m.disabled = &b
}

// Disabled returns the value of the "disabled" field in the mutation.
func (m *TenantMutation) Disabled() (r bool, exists bool) {
	v := m.disabled
	if v == nil {
		return
	}
	return *v, true
}

// OldDisabled returns the old "disabled" field's value of the Tenant entity.
// If the Tenant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TenantMutation) OldDisabled(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDisabled is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDisabled requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDisabled: %w", err)
	}
	return oldValue.Disabled, nil
}

// ClearDisabled clears the value of the "disabled" field.
func (m *TenantMutation) ClearDisabled() {
	m.disabled = nil
	m.clearedFields[tenant.FieldDisabled] = struct{}{}
}

// DisabledCleared returns if the "disabled" field was cleared in this mutation.
func (m *TenantMutation) DisabledCleared() bool {
	_, ok := m.clearedFields[tenant.FieldDisabled]
	return ok
}

// ResetDisabled resets all changes to the "disabled" field.
func (m *TenantMutation) ResetDisabled() {
	m.disabled = nil
	delete(m.clearedFields, tenant.FieldDisabled)
}

// SetExtras sets the "extras" field.
func (m *TenantMutation) SetExtras(value map[string]interface{}) {
	m.extras = &value
}

// Extras returns the value of the "extras" field in the mutation.
func (m *TenantMutation) Extras() (r map[string]interface{}, exists bool) {
	v := m.extras
	if v == nil {
		return
	}
	return *v, true
}

// OldExtras returns the old "extras" field's value of the Tenant entity.
// If the Tenant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TenantMutation) OldExtras(ctx context.Context) (v map[string]interface{}, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExtras is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExtras requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExtras: %w", err)
	}
	return oldValue.Extras, nil
}

// ClearExtras clears the value of the "extras" field.
func (m *TenantMutation) ClearExtras() {
	m.extras = nil
	m.clearedFields[tenant.FieldExtras] = struct{}{}
}

// ExtrasCleared returns if the "extras" field was cleared in this mutation.
func (m *TenantMutation) ExtrasCleared() bool {
	_, ok := m.clearedFields[tenant.FieldExtras]
	return ok
}

// ResetExtras resets all changes to the "extras" field.
func (m *TenantMutation) ResetExtras() {
	m.extras = nil
	delete(m.clearedFields, tenant.FieldExtras)
}

// SetCreatedBy sets the "created_by" field.
func (m *TenantMutation) SetCreatedBy(s string) {
	m.created_by = &s
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *TenantMutation) CreatedBy() (r string, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the Tenant entity.
// If the Tenant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TenantMutation) OldCreatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// ClearCreatedBy clears the value of the "created_by" field.
func (m *TenantMutation) ClearCreatedBy() {
	m.created_by = nil
	m.clearedFields[tenant.FieldCreatedBy] = struct{}{}
}

// CreatedByCleared returns if the "created_by" field was cleared in this mutation.
func (m *TenantMutation) CreatedByCleared() bool {
	_, ok := m.clearedFields[tenant.FieldCreatedBy]
	return ok
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *TenantMutation) ResetCreatedBy() {
	m.created_by = nil
	delete(m.clearedFields, tenant.FieldCreatedBy)
}

// SetUpdatedBy sets the "updated_by" field.
func (m *TenantMutation) SetUpdatedBy(s string) {
	m.updated_by = &s
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *TenantMutation) UpdatedBy() (r string, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the Tenant entity.
// If the Tenant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TenantMutation) OldUpdatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (m *TenantMutation) ClearUpdatedBy() {
	m.updated_by = nil
	m.clearedFields[tenant.FieldUpdatedBy] = struct{}{}
}

// UpdatedByCleared returns if the "updated_by" field was cleared in this mutation.
func (m *TenantMutation) UpdatedByCleared() bool {
	_, ok := m.clearedFields[tenant.FieldUpdatedBy]
	return ok
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *TenantMutation) ResetUpdatedBy() {
	m.updated_by = nil
	delete(m.clearedFields, tenant.FieldUpdatedBy)
}

// SetExpiredAt sets the "expired_at" field.
func (m *TenantMutation) SetExpiredAt(i int64) {
	m.expired_at = &i
	m.addexpired_at = nil
}

// ExpiredAt returns the value of the "expired_at" field in the mutation.
func (m *TenantMutation) ExpiredAt() (r int64, exists bool) {
	v := m.expired_at
	if v == nil {
		return
	}
	return *v, true
}

// OldExpiredAt returns the old "expired_at" field's value of the Tenant entity.
// If the Tenant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TenantMutation) OldExpiredAt(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExpiredAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExpiredAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExpiredAt: %w", err)
	}
	return oldValue.ExpiredAt, nil
}

// AddExpiredAt adds i to the "expired_at" field.
func (m *TenantMutation) AddExpiredAt(i int64) {
	if m.addexpired_at != nil {
		*m.addexpired_at += i
	} else {
		m.addexpired_at = &i
	}
}

// AddedExpiredAt returns the value that was added to the "expired_at" field in this mutation.
func (m *TenantMutation) AddedExpiredAt() (r int64, exists bool) {
	v := m.addexpired_at
	if v == nil {
		return
	}
	return *v, true
}

// ClearExpiredAt clears the value of the "expired_at" field.
func (m *TenantMutation) ClearExpiredAt() {
	m.expired_at = nil
	m.addexpired_at = nil
	m.clearedFields[tenant.FieldExpiredAt] = struct{}{}
}

// ExpiredAtCleared returns if the "expired_at" field was cleared in this mutation.
func (m *TenantMutation) ExpiredAtCleared() bool {
	_, ok := m.clearedFields[tenant.FieldExpiredAt]
	return ok
}

// ResetExpiredAt resets all changes to the "expired_at" field.
func (m *TenantMutation) ResetExpiredAt() {
	m.expired_at = nil
	m.addexpired_at = nil
	delete(m.clearedFields, tenant.FieldExpiredAt)
}

// SetCreatedAt sets the "created_at" field.
func (m *TenantMutation) SetCreatedAt(i int64) {
	m.created_at = &i
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *TenantMutation) CreatedAt() (r int64, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Tenant entity.
// If the Tenant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TenantMutation) OldCreatedAt(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds i to the "created_at" field.
func (m *TenantMutation) AddCreatedAt(i int64) {
	if m.addcreated_at != nil {
		*m.addcreated_at += i
	} else {
		m.addcreated_at = &i
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *TenantMutation) AddedCreatedAt() (r int64, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ClearCreatedAt clears the value of the "created_at" field.
func (m *TenantMutation) ClearCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
	m.clearedFields[tenant.FieldCreatedAt] = struct{}{}
}

// CreatedAtCleared returns if the "created_at" field was cleared in this mutation.
func (m *TenantMutation) CreatedAtCleared() bool {
	_, ok := m.clearedFields[tenant.FieldCreatedAt]
	return ok
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *TenantMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
	delete(m.clearedFields, tenant.FieldCreatedAt)
}

// SetUpdatedAt sets the "updated_at" field.
func (m *TenantMutation) SetUpdatedAt(i int64) {
	m.updated_at = &i
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *TenantMutation) UpdatedAt() (r int64, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Tenant entity.
// If the Tenant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TenantMutation) OldUpdatedAt(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds i to the "updated_at" field.
func (m *TenantMutation) AddUpdatedAt(i int64) {
	if m.addupdated_at != nil {
		*m.addupdated_at += i
	} else {
		m.addupdated_at = &i
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *TenantMutation) AddedUpdatedAt() (r int64, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *TenantMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
	m.clearedFields[tenant.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *TenantMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[tenant.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *TenantMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
	delete(m.clearedFields, tenant.FieldUpdatedAt)
}

// Where appends a list predicates to the TenantMutation builder.
func (m *TenantMutation) Where(ps ...predicate.Tenant) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TenantMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TenantMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Tenant, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TenantMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TenantMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Tenant).
func (m *TenantMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TenantMutation) Fields() []string {
	fields := make([]string, 0, 18)
	if m.name != nil {
		fields = append(fields, tenant.FieldName)
	}
	if m.slug != nil {
		fields = append(fields, tenant.FieldSlug)
	}
	if m._type != nil {
		fields = append(fields, tenant.FieldType)
	}
	if m.title != nil {
		fields = append(fields, tenant.FieldTitle)
	}
	if m.url != nil {
		fields = append(fields, tenant.FieldURL)
	}
	if m.logo != nil {
		fields = append(fields, tenant.FieldLogo)
	}
	if m.logo_alt != nil {
		fields = append(fields, tenant.FieldLogoAlt)
	}
	if m.keywords != nil {
		fields = append(fields, tenant.FieldKeywords)
	}
	if m.copyright != nil {
		fields = append(fields, tenant.FieldCopyright)
	}
	if m.description != nil {
		fields = append(fields, tenant.FieldDescription)
	}
	if m._order != nil {
		fields = append(fields, tenant.FieldOrder)
	}
	if m.disabled != nil {
		fields = append(fields, tenant.FieldDisabled)
	}
	if m.extras != nil {
		fields = append(fields, tenant.FieldExtras)
	}
	if m.created_by != nil {
		fields = append(fields, tenant.FieldCreatedBy)
	}
	if m.updated_by != nil {
		fields = append(fields, tenant.FieldUpdatedBy)
	}
	if m.expired_at != nil {
		fields = append(fields, tenant.FieldExpiredAt)
	}
	if m.created_at != nil {
		fields = append(fields, tenant.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, tenant.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TenantMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case tenant.FieldName:
		return m.Name()
	case tenant.FieldSlug:
		return m.Slug()
	case tenant.FieldType:
		return m.GetType()
	case tenant.FieldTitle:
		return m.Title()
	case tenant.FieldURL:
		return m.URL()
	case tenant.FieldLogo:
		return m.Logo()
	case tenant.FieldLogoAlt:
		return m.LogoAlt()
	case tenant.FieldKeywords:
		return m.Keywords()
	case tenant.FieldCopyright:
		return m.Copyright()
	case tenant.FieldDescription:
		return m.Description()
	case tenant.FieldOrder:
		return m.Order()
	case tenant.FieldDisabled:
		return m.Disabled()
	case tenant.FieldExtras:
		return m.Extras()
	case tenant.FieldCreatedBy:
		return m.CreatedBy()
	case tenant.FieldUpdatedBy:
		return m.UpdatedBy()
	case tenant.FieldExpiredAt:
		return m.ExpiredAt()
	case tenant.FieldCreatedAt:
		return m.CreatedAt()
	case tenant.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TenantMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case tenant.FieldName:
		return m.OldName(ctx)
	case tenant.FieldSlug:
		return m.OldSlug(ctx)
	case tenant.FieldType:
		return m.OldType(ctx)
	case tenant.FieldTitle:
		return m.OldTitle(ctx)
	case tenant.FieldURL:
		return m.OldURL(ctx)
	case tenant.FieldLogo:
		return m.OldLogo(ctx)
	case tenant.FieldLogoAlt:
		return m.OldLogoAlt(ctx)
	case tenant.FieldKeywords:
		return m.OldKeywords(ctx)
	case tenant.FieldCopyright:
		return m.OldCopyright(ctx)
	case tenant.FieldDescription:
		return m.OldDescription(ctx)
	case tenant.FieldOrder:
		return m.OldOrder(ctx)
	case tenant.FieldDisabled:
		return m.OldDisabled(ctx)
	case tenant.FieldExtras:
		return m.OldExtras(ctx)
	case tenant.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case tenant.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	case tenant.FieldExpiredAt:
		return m.OldExpiredAt(ctx)
	case tenant.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case tenant.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Tenant field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TenantMutation) SetField(name string, value ent.Value) error {
	switch name {
	case tenant.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case tenant.FieldSlug:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSlug(v)
		return nil
	case tenant.FieldType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case tenant.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case tenant.FieldURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetURL(v)
		return nil
	case tenant.FieldLogo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLogo(v)
		return nil
	case tenant.FieldLogoAlt:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLogoAlt(v)
		return nil
	case tenant.FieldKeywords:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetKeywords(v)
		return nil
	case tenant.FieldCopyright:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCopyright(v)
		return nil
	case tenant.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case tenant.FieldOrder:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrder(v)
		return nil
	case tenant.FieldDisabled:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDisabled(v)
		return nil
	case tenant.FieldExtras:
		v, ok := value.(map[string]interface{})
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExtras(v)
		return nil
	case tenant.FieldCreatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case tenant.FieldUpdatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	case tenant.FieldExpiredAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExpiredAt(v)
		return nil
	case tenant.FieldCreatedAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case tenant.FieldUpdatedAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Tenant field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TenantMutation) AddedFields() []string {
	var fields []string
	if m.add_order != nil {
		fields = append(fields, tenant.FieldOrder)
	}
	if m.addexpired_at != nil {
		fields = append(fields, tenant.FieldExpiredAt)
	}
	if m.addcreated_at != nil {
		fields = append(fields, tenant.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, tenant.FieldUpdatedAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TenantMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case tenant.FieldOrder:
		return m.AddedOrder()
	case tenant.FieldExpiredAt:
		return m.AddedExpiredAt()
	case tenant.FieldCreatedAt:
		return m.AddedCreatedAt()
	case tenant.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TenantMutation) AddField(name string, value ent.Value) error {
	switch name {
	case tenant.FieldOrder:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOrder(v)
		return nil
	case tenant.FieldExpiredAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddExpiredAt(v)
		return nil
	case tenant.FieldCreatedAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case tenant.FieldUpdatedAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Tenant numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TenantMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(tenant.FieldName) {
		fields = append(fields, tenant.FieldName)
	}
	if m.FieldCleared(tenant.FieldSlug) {
		fields = append(fields, tenant.FieldSlug)
	}
	if m.FieldCleared(tenant.FieldType) {
		fields = append(fields, tenant.FieldType)
	}
	if m.FieldCleared(tenant.FieldTitle) {
		fields = append(fields, tenant.FieldTitle)
	}
	if m.FieldCleared(tenant.FieldURL) {
		fields = append(fields, tenant.FieldURL)
	}
	if m.FieldCleared(tenant.FieldLogo) {
		fields = append(fields, tenant.FieldLogo)
	}
	if m.FieldCleared(tenant.FieldLogoAlt) {
		fields = append(fields, tenant.FieldLogoAlt)
	}
	if m.FieldCleared(tenant.FieldKeywords) {
		fields = append(fields, tenant.FieldKeywords)
	}
	if m.FieldCleared(tenant.FieldCopyright) {
		fields = append(fields, tenant.FieldCopyright)
	}
	if m.FieldCleared(tenant.FieldDescription) {
		fields = append(fields, tenant.FieldDescription)
	}
	if m.FieldCleared(tenant.FieldDisabled) {
		fields = append(fields, tenant.FieldDisabled)
	}
	if m.FieldCleared(tenant.FieldExtras) {
		fields = append(fields, tenant.FieldExtras)
	}
	if m.FieldCleared(tenant.FieldCreatedBy) {
		fields = append(fields, tenant.FieldCreatedBy)
	}
	if m.FieldCleared(tenant.FieldUpdatedBy) {
		fields = append(fields, tenant.FieldUpdatedBy)
	}
	if m.FieldCleared(tenant.FieldExpiredAt) {
		fields = append(fields, tenant.FieldExpiredAt)
	}
	if m.FieldCleared(tenant.FieldCreatedAt) {
		fields = append(fields, tenant.FieldCreatedAt)
	}
	if m.FieldCleared(tenant.FieldUpdatedAt) {
		fields = append(fields, tenant.FieldUpdatedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TenantMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TenantMutation) ClearField(name string) error {
	switch name {
	case tenant.FieldName:
		m.ClearName()
		return nil
	case tenant.FieldSlug:
		m.ClearSlug()
		return nil
	case tenant.FieldType:
		m.ClearType()
		return nil
	case tenant.FieldTitle:
		m.ClearTitle()
		return nil
	case tenant.FieldURL:
		m.ClearURL()
		return nil
	case tenant.FieldLogo:
		m.ClearLogo()
		return nil
	case tenant.FieldLogoAlt:
		m.ClearLogoAlt()
		return nil
	case tenant.FieldKeywords:
		m.ClearKeywords()
		return nil
	case tenant.FieldCopyright:
		m.ClearCopyright()
		return nil
	case tenant.FieldDescription:
		m.ClearDescription()
		return nil
	case tenant.FieldDisabled:
		m.ClearDisabled()
		return nil
	case tenant.FieldExtras:
		m.ClearExtras()
		return nil
	case tenant.FieldCreatedBy:
		m.ClearCreatedBy()
		return nil
	case tenant.FieldUpdatedBy:
		m.ClearUpdatedBy()
		return nil
	case tenant.FieldExpiredAt:
		m.ClearExpiredAt()
		return nil
	case tenant.FieldCreatedAt:
		m.ClearCreatedAt()
		return nil
	case tenant.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Tenant nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TenantMutation) ResetField(name string) error {
	switch name {
	case tenant.FieldName:
		m.ResetName()
		return nil
	case tenant.FieldSlug:
		m.ResetSlug()
		return nil
	case tenant.FieldType:
		m.ResetType()
		return nil
	case tenant.FieldTitle:
		m.ResetTitle()
		return nil
	case tenant.FieldURL:
		m.ResetURL()
		return nil
	case tenant.FieldLogo:
		m.ResetLogo()
		return nil
	case tenant.FieldLogoAlt:
		m.ResetLogoAlt()
		return nil
	case tenant.FieldKeywords:
		m.ResetKeywords()
		return nil
	case tenant.FieldCopyright:
		m.ResetCopyright()
		return nil
	case tenant.FieldDescription:
		m.ResetDescription()
		return nil
	case tenant.FieldOrder:
		m.ResetOrder()
		return nil
	case tenant.FieldDisabled:
		m.ResetDisabled()
		return nil
	case tenant.FieldExtras:
		m.ResetExtras()
		return nil
	case tenant.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case tenant.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	case tenant.FieldExpiredAt:
		m.ResetExpiredAt()
		return nil
	case tenant.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case tenant.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Tenant field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TenantMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TenantMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TenantMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TenantMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TenantMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TenantMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TenantMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Tenant unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TenantMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Tenant edge %s", name)
}

// UserTenantMutation represents an operation that mutates the UserTenant nodes in the graph.
type UserTenantMutation struct {
	config
	op            Op
	typ           string
	id            *string
	user_id       *string
	tenant_id     *string
	created_by    *string
	updated_by    *string
	created_at    *int64
	addcreated_at *int64
	updated_at    *int64
	addupdated_at *int64
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*UserTenant, error)
	predicates    []predicate.UserTenant
}

var _ ent.Mutation = (*UserTenantMutation)(nil)

// usertenantOption allows management of the mutation configuration using functional options.
type usertenantOption func(*UserTenantMutation)

// newUserTenantMutation creates new mutation for the UserTenant entity.
func newUserTenantMutation(c config, op Op, opts ...usertenantOption) *UserTenantMutation {
	m := &UserTenantMutation{
		config:        c,
		op:            op,
		typ:           TypeUserTenant,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserTenantID sets the ID field of the mutation.
func withUserTenantID(id string) usertenantOption {
	return func(m *UserTenantMutation) {
		var (
			err   error
			once  sync.Once
			value *UserTenant
		)
		m.oldValue = func(ctx context.Context) (*UserTenant, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().UserTenant.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUserTenant sets the old UserTenant of the mutation.
func withUserTenant(node *UserTenant) usertenantOption {
	return func(m *UserTenantMutation) {
		m.oldValue = func(context.Context) (*UserTenant, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserTenantMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserTenantMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of UserTenant entities.
func (m *UserTenantMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserTenantMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserTenantMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().UserTenant.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUserID sets the "user_id" field.
func (m *UserTenantMutation) SetUserID(s string) {
	m.user_id = &s
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *UserTenantMutation) UserID() (r string, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the UserTenant entity.
// If the UserTenant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserTenantMutation) OldUserID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ClearUserID clears the value of the "user_id" field.
func (m *UserTenantMutation) ClearUserID() {
	m.user_id = nil
	m.clearedFields[usertenant.FieldUserID] = struct{}{}
}

// UserIDCleared returns if the "user_id" field was cleared in this mutation.
func (m *UserTenantMutation) UserIDCleared() bool {
	_, ok := m.clearedFields[usertenant.FieldUserID]
	return ok
}

// ResetUserID resets all changes to the "user_id" field.
func (m *UserTenantMutation) ResetUserID() {
	m.user_id = nil
	delete(m.clearedFields, usertenant.FieldUserID)
}

// SetTenantID sets the "tenant_id" field.
func (m *UserTenantMutation) SetTenantID(s string) {
	m.tenant_id = &s
}

// TenantID returns the value of the "tenant_id" field in the mutation.
func (m *UserTenantMutation) TenantID() (r string, exists bool) {
	v := m.tenant_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTenantID returns the old "tenant_id" field's value of the UserTenant entity.
// If the UserTenant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserTenantMutation) OldTenantID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTenantID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTenantID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTenantID: %w", err)
	}
	return oldValue.TenantID, nil
}

// ClearTenantID clears the value of the "tenant_id" field.
func (m *UserTenantMutation) ClearTenantID() {
	m.tenant_id = nil
	m.clearedFields[usertenant.FieldTenantID] = struct{}{}
}

// TenantIDCleared returns if the "tenant_id" field was cleared in this mutation.
func (m *UserTenantMutation) TenantIDCleared() bool {
	_, ok := m.clearedFields[usertenant.FieldTenantID]
	return ok
}

// ResetTenantID resets all changes to the "tenant_id" field.
func (m *UserTenantMutation) ResetTenantID() {
	m.tenant_id = nil
	delete(m.clearedFields, usertenant.FieldTenantID)
}

// SetCreatedBy sets the "created_by" field.
func (m *UserTenantMutation) SetCreatedBy(s string) {
	m.created_by = &s
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *UserTenantMutation) CreatedBy() (r string, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the UserTenant entity.
// If the UserTenant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserTenantMutation) OldCreatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// ClearCreatedBy clears the value of the "created_by" field.
func (m *UserTenantMutation) ClearCreatedBy() {
	m.created_by = nil
	m.clearedFields[usertenant.FieldCreatedBy] = struct{}{}
}

// CreatedByCleared returns if the "created_by" field was cleared in this mutation.
func (m *UserTenantMutation) CreatedByCleared() bool {
	_, ok := m.clearedFields[usertenant.FieldCreatedBy]
	return ok
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *UserTenantMutation) ResetCreatedBy() {
	m.created_by = nil
	delete(m.clearedFields, usertenant.FieldCreatedBy)
}

// SetUpdatedBy sets the "updated_by" field.
func (m *UserTenantMutation) SetUpdatedBy(s string) {
	m.updated_by = &s
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *UserTenantMutation) UpdatedBy() (r string, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the UserTenant entity.
// If the UserTenant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserTenantMutation) OldUpdatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (m *UserTenantMutation) ClearUpdatedBy() {
	m.updated_by = nil
	m.clearedFields[usertenant.FieldUpdatedBy] = struct{}{}
}

// UpdatedByCleared returns if the "updated_by" field was cleared in this mutation.
func (m *UserTenantMutation) UpdatedByCleared() bool {
	_, ok := m.clearedFields[usertenant.FieldUpdatedBy]
	return ok
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *UserTenantMutation) ResetUpdatedBy() {
	m.updated_by = nil
	delete(m.clearedFields, usertenant.FieldUpdatedBy)
}

// SetCreatedAt sets the "created_at" field.
func (m *UserTenantMutation) SetCreatedAt(i int64) {
	m.created_at = &i
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserTenantMutation) CreatedAt() (r int64, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the UserTenant entity.
// If the UserTenant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserTenantMutation) OldCreatedAt(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds i to the "created_at" field.
func (m *UserTenantMutation) AddCreatedAt(i int64) {
	if m.addcreated_at != nil {
		*m.addcreated_at += i
	} else {
		m.addcreated_at = &i
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *UserTenantMutation) AddedCreatedAt() (r int64, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ClearCreatedAt clears the value of the "created_at" field.
func (m *UserTenantMutation) ClearCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
	m.clearedFields[usertenant.FieldCreatedAt] = struct{}{}
}

// CreatedAtCleared returns if the "created_at" field was cleared in this mutation.
func (m *UserTenantMutation) CreatedAtCleared() bool {
	_, ok := m.clearedFields[usertenant.FieldCreatedAt]
	return ok
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserTenantMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
	delete(m.clearedFields, usertenant.FieldCreatedAt)
}

// SetUpdatedAt sets the "updated_at" field.
func (m *UserTenantMutation) SetUpdatedAt(i int64) {
	m.updated_at = &i
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *UserTenantMutation) UpdatedAt() (r int64, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the UserTenant entity.
// If the UserTenant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserTenantMutation) OldUpdatedAt(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds i to the "updated_at" field.
func (m *UserTenantMutation) AddUpdatedAt(i int64) {
	if m.addupdated_at != nil {
		*m.addupdated_at += i
	} else {
		m.addupdated_at = &i
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *UserTenantMutation) AddedUpdatedAt() (r int64, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *UserTenantMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
	m.clearedFields[usertenant.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *UserTenantMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[usertenant.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *UserTenantMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
	delete(m.clearedFields, usertenant.FieldUpdatedAt)
}

// Where appends a list predicates to the UserTenantMutation builder.
func (m *UserTenantMutation) Where(ps ...predicate.UserTenant) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserTenantMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserTenantMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.UserTenant, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserTenantMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserTenantMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (UserTenant).
func (m *UserTenantMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserTenantMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.user_id != nil {
		fields = append(fields, usertenant.FieldUserID)
	}
	if m.tenant_id != nil {
		fields = append(fields, usertenant.FieldTenantID)
	}
	if m.created_by != nil {
		fields = append(fields, usertenant.FieldCreatedBy)
	}
	if m.updated_by != nil {
		fields = append(fields, usertenant.FieldUpdatedBy)
	}
	if m.created_at != nil {
		fields = append(fields, usertenant.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, usertenant.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserTenantMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case usertenant.FieldUserID:
		return m.UserID()
	case usertenant.FieldTenantID:
		return m.TenantID()
	case usertenant.FieldCreatedBy:
		return m.CreatedBy()
	case usertenant.FieldUpdatedBy:
		return m.UpdatedBy()
	case usertenant.FieldCreatedAt:
		return m.CreatedAt()
	case usertenant.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserTenantMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case usertenant.FieldUserID:
		return m.OldUserID(ctx)
	case usertenant.FieldTenantID:
		return m.OldTenantID(ctx)
	case usertenant.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case usertenant.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	case usertenant.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case usertenant.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown UserTenant field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserTenantMutation) SetField(name string, value ent.Value) error {
	switch name {
	case usertenant.FieldUserID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case usertenant.FieldTenantID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTenantID(v)
		return nil
	case usertenant.FieldCreatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case usertenant.FieldUpdatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	case usertenant.FieldCreatedAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case usertenant.FieldUpdatedAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown UserTenant field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserTenantMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_at != nil {
		fields = append(fields, usertenant.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, usertenant.FieldUpdatedAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserTenantMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case usertenant.FieldCreatedAt:
		return m.AddedCreatedAt()
	case usertenant.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserTenantMutation) AddField(name string, value ent.Value) error {
	switch name {
	case usertenant.FieldCreatedAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case usertenant.FieldUpdatedAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown UserTenant numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserTenantMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(usertenant.FieldUserID) {
		fields = append(fields, usertenant.FieldUserID)
	}
	if m.FieldCleared(usertenant.FieldTenantID) {
		fields = append(fields, usertenant.FieldTenantID)
	}
	if m.FieldCleared(usertenant.FieldCreatedBy) {
		fields = append(fields, usertenant.FieldCreatedBy)
	}
	if m.FieldCleared(usertenant.FieldUpdatedBy) {
		fields = append(fields, usertenant.FieldUpdatedBy)
	}
	if m.FieldCleared(usertenant.FieldCreatedAt) {
		fields = append(fields, usertenant.FieldCreatedAt)
	}
	if m.FieldCleared(usertenant.FieldUpdatedAt) {
		fields = append(fields, usertenant.FieldUpdatedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserTenantMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserTenantMutation) ClearField(name string) error {
	switch name {
	case usertenant.FieldUserID:
		m.ClearUserID()
		return nil
	case usertenant.FieldTenantID:
		m.ClearTenantID()
		return nil
	case usertenant.FieldCreatedBy:
		m.ClearCreatedBy()
		return nil
	case usertenant.FieldUpdatedBy:
		m.ClearUpdatedBy()
		return nil
	case usertenant.FieldCreatedAt:
		m.ClearCreatedAt()
		return nil
	case usertenant.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown UserTenant nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserTenantMutation) ResetField(name string) error {
	switch name {
	case usertenant.FieldUserID:
		m.ResetUserID()
		return nil
	case usertenant.FieldTenantID:
		m.ResetTenantID()
		return nil
	case usertenant.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case usertenant.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	case usertenant.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case usertenant.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown UserTenant field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserTenantMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserTenantMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserTenantMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserTenantMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserTenantMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserTenantMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserTenantMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown UserTenant unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserTenantMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown UserTenant edge %s", name)
}
