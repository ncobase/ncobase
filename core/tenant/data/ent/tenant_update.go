// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/tenant/data/ent/predicate"
	"ncobase/tenant/data/ent/tenant"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TenantUpdate is the builder for updating Tenant entities.
type TenantUpdate struct {
	config
	hooks    []Hook
	mutation *TenantMutation
}

// Where appends a list predicates to the TenantUpdate builder.
func (tu *TenantUpdate) Where(ps ...predicate.Tenant) *TenantUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetName sets the "name" field.
func (tu *TenantUpdate) SetName(s string) *TenantUpdate {
	tu.mutation.SetName(s)
	return tu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tu *TenantUpdate) SetNillableName(s *string) *TenantUpdate {
	if s != nil {
		tu.SetName(*s)
	}
	return tu
}

// ClearName clears the value of the "name" field.
func (tu *TenantUpdate) ClearName() *TenantUpdate {
	tu.mutation.ClearName()
	return tu
}

// SetSlug sets the "slug" field.
func (tu *TenantUpdate) SetSlug(s string) *TenantUpdate {
	tu.mutation.SetSlug(s)
	return tu
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (tu *TenantUpdate) SetNillableSlug(s *string) *TenantUpdate {
	if s != nil {
		tu.SetSlug(*s)
	}
	return tu
}

// ClearSlug clears the value of the "slug" field.
func (tu *TenantUpdate) ClearSlug() *TenantUpdate {
	tu.mutation.ClearSlug()
	return tu
}

// SetType sets the "type" field.
func (tu *TenantUpdate) SetType(s string) *TenantUpdate {
	tu.mutation.SetType(s)
	return tu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (tu *TenantUpdate) SetNillableType(s *string) *TenantUpdate {
	if s != nil {
		tu.SetType(*s)
	}
	return tu
}

// ClearType clears the value of the "type" field.
func (tu *TenantUpdate) ClearType() *TenantUpdate {
	tu.mutation.ClearType()
	return tu
}

// SetTitle sets the "title" field.
func (tu *TenantUpdate) SetTitle(s string) *TenantUpdate {
	tu.mutation.SetTitle(s)
	return tu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (tu *TenantUpdate) SetNillableTitle(s *string) *TenantUpdate {
	if s != nil {
		tu.SetTitle(*s)
	}
	return tu
}

// ClearTitle clears the value of the "title" field.
func (tu *TenantUpdate) ClearTitle() *TenantUpdate {
	tu.mutation.ClearTitle()
	return tu
}

// SetURL sets the "url" field.
func (tu *TenantUpdate) SetURL(s string) *TenantUpdate {
	tu.mutation.SetURL(s)
	return tu
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (tu *TenantUpdate) SetNillableURL(s *string) *TenantUpdate {
	if s != nil {
		tu.SetURL(*s)
	}
	return tu
}

// ClearURL clears the value of the "url" field.
func (tu *TenantUpdate) ClearURL() *TenantUpdate {
	tu.mutation.ClearURL()
	return tu
}

// SetLogo sets the "logo" field.
func (tu *TenantUpdate) SetLogo(s string) *TenantUpdate {
	tu.mutation.SetLogo(s)
	return tu
}

// SetNillableLogo sets the "logo" field if the given value is not nil.
func (tu *TenantUpdate) SetNillableLogo(s *string) *TenantUpdate {
	if s != nil {
		tu.SetLogo(*s)
	}
	return tu
}

// ClearLogo clears the value of the "logo" field.
func (tu *TenantUpdate) ClearLogo() *TenantUpdate {
	tu.mutation.ClearLogo()
	return tu
}

// SetLogoAlt sets the "logo_alt" field.
func (tu *TenantUpdate) SetLogoAlt(s string) *TenantUpdate {
	tu.mutation.SetLogoAlt(s)
	return tu
}

// SetNillableLogoAlt sets the "logo_alt" field if the given value is not nil.
func (tu *TenantUpdate) SetNillableLogoAlt(s *string) *TenantUpdate {
	if s != nil {
		tu.SetLogoAlt(*s)
	}
	return tu
}

// ClearLogoAlt clears the value of the "logo_alt" field.
func (tu *TenantUpdate) ClearLogoAlt() *TenantUpdate {
	tu.mutation.ClearLogoAlt()
	return tu
}

// SetKeywords sets the "keywords" field.
func (tu *TenantUpdate) SetKeywords(s string) *TenantUpdate {
	tu.mutation.SetKeywords(s)
	return tu
}

// SetNillableKeywords sets the "keywords" field if the given value is not nil.
func (tu *TenantUpdate) SetNillableKeywords(s *string) *TenantUpdate {
	if s != nil {
		tu.SetKeywords(*s)
	}
	return tu
}

// ClearKeywords clears the value of the "keywords" field.
func (tu *TenantUpdate) ClearKeywords() *TenantUpdate {
	tu.mutation.ClearKeywords()
	return tu
}

// SetCopyright sets the "copyright" field.
func (tu *TenantUpdate) SetCopyright(s string) *TenantUpdate {
	tu.mutation.SetCopyright(s)
	return tu
}

// SetNillableCopyright sets the "copyright" field if the given value is not nil.
func (tu *TenantUpdate) SetNillableCopyright(s *string) *TenantUpdate {
	if s != nil {
		tu.SetCopyright(*s)
	}
	return tu
}

// ClearCopyright clears the value of the "copyright" field.
func (tu *TenantUpdate) ClearCopyright() *TenantUpdate {
	tu.mutation.ClearCopyright()
	return tu
}

// SetDescription sets the "description" field.
func (tu *TenantUpdate) SetDescription(s string) *TenantUpdate {
	tu.mutation.SetDescription(s)
	return tu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tu *TenantUpdate) SetNillableDescription(s *string) *TenantUpdate {
	if s != nil {
		tu.SetDescription(*s)
	}
	return tu
}

// ClearDescription clears the value of the "description" field.
func (tu *TenantUpdate) ClearDescription() *TenantUpdate {
	tu.mutation.ClearDescription()
	return tu
}

// SetOrder sets the "order" field.
func (tu *TenantUpdate) SetOrder(i int) *TenantUpdate {
	tu.mutation.ResetOrder()
	tu.mutation.SetOrder(i)
	return tu
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (tu *TenantUpdate) SetNillableOrder(i *int) *TenantUpdate {
	if i != nil {
		tu.SetOrder(*i)
	}
	return tu
}

// AddOrder adds i to the "order" field.
func (tu *TenantUpdate) AddOrder(i int) *TenantUpdate {
	tu.mutation.AddOrder(i)
	return tu
}

// SetDisabled sets the "disabled" field.
func (tu *TenantUpdate) SetDisabled(b bool) *TenantUpdate {
	tu.mutation.SetDisabled(b)
	return tu
}

// SetNillableDisabled sets the "disabled" field if the given value is not nil.
func (tu *TenantUpdate) SetNillableDisabled(b *bool) *TenantUpdate {
	if b != nil {
		tu.SetDisabled(*b)
	}
	return tu
}

// ClearDisabled clears the value of the "disabled" field.
func (tu *TenantUpdate) ClearDisabled() *TenantUpdate {
	tu.mutation.ClearDisabled()
	return tu
}

// SetExtras sets the "extras" field.
func (tu *TenantUpdate) SetExtras(m map[string]interface{}) *TenantUpdate {
	tu.mutation.SetExtras(m)
	return tu
}

// ClearExtras clears the value of the "extras" field.
func (tu *TenantUpdate) ClearExtras() *TenantUpdate {
	tu.mutation.ClearExtras()
	return tu
}

// SetCreatedBy sets the "created_by" field.
func (tu *TenantUpdate) SetCreatedBy(s string) *TenantUpdate {
	tu.mutation.SetCreatedBy(s)
	return tu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (tu *TenantUpdate) SetNillableCreatedBy(s *string) *TenantUpdate {
	if s != nil {
		tu.SetCreatedBy(*s)
	}
	return tu
}

// ClearCreatedBy clears the value of the "created_by" field.
func (tu *TenantUpdate) ClearCreatedBy() *TenantUpdate {
	tu.mutation.ClearCreatedBy()
	return tu
}

// SetUpdatedBy sets the "updated_by" field.
func (tu *TenantUpdate) SetUpdatedBy(s string) *TenantUpdate {
	tu.mutation.SetUpdatedBy(s)
	return tu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (tu *TenantUpdate) SetNillableUpdatedBy(s *string) *TenantUpdate {
	if s != nil {
		tu.SetUpdatedBy(*s)
	}
	return tu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (tu *TenantUpdate) ClearUpdatedBy() *TenantUpdate {
	tu.mutation.ClearUpdatedBy()
	return tu
}

// SetExpiredAt sets the "expired_at" field.
func (tu *TenantUpdate) SetExpiredAt(i int64) *TenantUpdate {
	tu.mutation.ResetExpiredAt()
	tu.mutation.SetExpiredAt(i)
	return tu
}

// SetNillableExpiredAt sets the "expired_at" field if the given value is not nil.
func (tu *TenantUpdate) SetNillableExpiredAt(i *int64) *TenantUpdate {
	if i != nil {
		tu.SetExpiredAt(*i)
	}
	return tu
}

// AddExpiredAt adds i to the "expired_at" field.
func (tu *TenantUpdate) AddExpiredAt(i int64) *TenantUpdate {
	tu.mutation.AddExpiredAt(i)
	return tu
}

// ClearExpiredAt clears the value of the "expired_at" field.
func (tu *TenantUpdate) ClearExpiredAt() *TenantUpdate {
	tu.mutation.ClearExpiredAt()
	return tu
}

// SetUpdatedAt sets the "updated_at" field.
func (tu *TenantUpdate) SetUpdatedAt(i int64) *TenantUpdate {
	tu.mutation.ResetUpdatedAt()
	tu.mutation.SetUpdatedAt(i)
	return tu
}

// AddUpdatedAt adds i to the "updated_at" field.
func (tu *TenantUpdate) AddUpdatedAt(i int64) *TenantUpdate {
	tu.mutation.AddUpdatedAt(i)
	return tu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tu *TenantUpdate) ClearUpdatedAt() *TenantUpdate {
	tu.mutation.ClearUpdatedAt()
	return tu
}

// Mutation returns the TenantMutation object of the builder.
func (tu *TenantUpdate) Mutation() *TenantMutation {
	return tu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TenantUpdate) Save(ctx context.Context) (int, error) {
	tu.defaults()
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TenantUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TenantUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TenantUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tu *TenantUpdate) defaults() {
	if _, ok := tu.mutation.UpdatedAt(); !ok && !tu.mutation.UpdatedAtCleared() {
		v := tenant.UpdateDefaultUpdatedAt()
		tu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *TenantUpdate) check() error {
	if v, ok := tu.mutation.CreatedBy(); ok {
		if err := tenant.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "Tenant.created_by": %w`, err)}
		}
	}
	if v, ok := tu.mutation.UpdatedBy(); ok {
		if err := tenant.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "Tenant.updated_by": %w`, err)}
		}
	}
	return nil
}

func (tu *TenantUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(tenant.Table, tenant.Columns, sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.Name(); ok {
		_spec.SetField(tenant.FieldName, field.TypeString, value)
	}
	if tu.mutation.NameCleared() {
		_spec.ClearField(tenant.FieldName, field.TypeString)
	}
	if value, ok := tu.mutation.Slug(); ok {
		_spec.SetField(tenant.FieldSlug, field.TypeString, value)
	}
	if tu.mutation.SlugCleared() {
		_spec.ClearField(tenant.FieldSlug, field.TypeString)
	}
	if value, ok := tu.mutation.GetType(); ok {
		_spec.SetField(tenant.FieldType, field.TypeString, value)
	}
	if tu.mutation.TypeCleared() {
		_spec.ClearField(tenant.FieldType, field.TypeString)
	}
	if value, ok := tu.mutation.Title(); ok {
		_spec.SetField(tenant.FieldTitle, field.TypeString, value)
	}
	if tu.mutation.TitleCleared() {
		_spec.ClearField(tenant.FieldTitle, field.TypeString)
	}
	if value, ok := tu.mutation.URL(); ok {
		_spec.SetField(tenant.FieldURL, field.TypeString, value)
	}
	if tu.mutation.URLCleared() {
		_spec.ClearField(tenant.FieldURL, field.TypeString)
	}
	if value, ok := tu.mutation.Logo(); ok {
		_spec.SetField(tenant.FieldLogo, field.TypeString, value)
	}
	if tu.mutation.LogoCleared() {
		_spec.ClearField(tenant.FieldLogo, field.TypeString)
	}
	if value, ok := tu.mutation.LogoAlt(); ok {
		_spec.SetField(tenant.FieldLogoAlt, field.TypeString, value)
	}
	if tu.mutation.LogoAltCleared() {
		_spec.ClearField(tenant.FieldLogoAlt, field.TypeString)
	}
	if value, ok := tu.mutation.Keywords(); ok {
		_spec.SetField(tenant.FieldKeywords, field.TypeString, value)
	}
	if tu.mutation.KeywordsCleared() {
		_spec.ClearField(tenant.FieldKeywords, field.TypeString)
	}
	if value, ok := tu.mutation.Copyright(); ok {
		_spec.SetField(tenant.FieldCopyright, field.TypeString, value)
	}
	if tu.mutation.CopyrightCleared() {
		_spec.ClearField(tenant.FieldCopyright, field.TypeString)
	}
	if value, ok := tu.mutation.Description(); ok {
		_spec.SetField(tenant.FieldDescription, field.TypeString, value)
	}
	if tu.mutation.DescriptionCleared() {
		_spec.ClearField(tenant.FieldDescription, field.TypeString)
	}
	if value, ok := tu.mutation.Order(); ok {
		_spec.SetField(tenant.FieldOrder, field.TypeInt, value)
	}
	if value, ok := tu.mutation.AddedOrder(); ok {
		_spec.AddField(tenant.FieldOrder, field.TypeInt, value)
	}
	if value, ok := tu.mutation.Disabled(); ok {
		_spec.SetField(tenant.FieldDisabled, field.TypeBool, value)
	}
	if tu.mutation.DisabledCleared() {
		_spec.ClearField(tenant.FieldDisabled, field.TypeBool)
	}
	if value, ok := tu.mutation.Extras(); ok {
		_spec.SetField(tenant.FieldExtras, field.TypeJSON, value)
	}
	if tu.mutation.ExtrasCleared() {
		_spec.ClearField(tenant.FieldExtras, field.TypeJSON)
	}
	if value, ok := tu.mutation.CreatedBy(); ok {
		_spec.SetField(tenant.FieldCreatedBy, field.TypeString, value)
	}
	if tu.mutation.CreatedByCleared() {
		_spec.ClearField(tenant.FieldCreatedBy, field.TypeString)
	}
	if value, ok := tu.mutation.UpdatedBy(); ok {
		_spec.SetField(tenant.FieldUpdatedBy, field.TypeString, value)
	}
	if tu.mutation.UpdatedByCleared() {
		_spec.ClearField(tenant.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := tu.mutation.ExpiredAt(); ok {
		_spec.SetField(tenant.FieldExpiredAt, field.TypeInt64, value)
	}
	if value, ok := tu.mutation.AddedExpiredAt(); ok {
		_spec.AddField(tenant.FieldExpiredAt, field.TypeInt64, value)
	}
	if tu.mutation.ExpiredAtCleared() {
		_spec.ClearField(tenant.FieldExpiredAt, field.TypeInt64)
	}
	if tu.mutation.CreatedAtCleared() {
		_spec.ClearField(tenant.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := tu.mutation.UpdatedAt(); ok {
		_spec.SetField(tenant.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := tu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(tenant.FieldUpdatedAt, field.TypeInt64, value)
	}
	if tu.mutation.UpdatedAtCleared() {
		_spec.ClearField(tenant.FieldUpdatedAt, field.TypeInt64)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tenant.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TenantUpdateOne is the builder for updating a single Tenant entity.
type TenantUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TenantMutation
}

// SetName sets the "name" field.
func (tuo *TenantUpdateOne) SetName(s string) *TenantUpdateOne {
	tuo.mutation.SetName(s)
	return tuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tuo *TenantUpdateOne) SetNillableName(s *string) *TenantUpdateOne {
	if s != nil {
		tuo.SetName(*s)
	}
	return tuo
}

// ClearName clears the value of the "name" field.
func (tuo *TenantUpdateOne) ClearName() *TenantUpdateOne {
	tuo.mutation.ClearName()
	return tuo
}

// SetSlug sets the "slug" field.
func (tuo *TenantUpdateOne) SetSlug(s string) *TenantUpdateOne {
	tuo.mutation.SetSlug(s)
	return tuo
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (tuo *TenantUpdateOne) SetNillableSlug(s *string) *TenantUpdateOne {
	if s != nil {
		tuo.SetSlug(*s)
	}
	return tuo
}

// ClearSlug clears the value of the "slug" field.
func (tuo *TenantUpdateOne) ClearSlug() *TenantUpdateOne {
	tuo.mutation.ClearSlug()
	return tuo
}

// SetType sets the "type" field.
func (tuo *TenantUpdateOne) SetType(s string) *TenantUpdateOne {
	tuo.mutation.SetType(s)
	return tuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (tuo *TenantUpdateOne) SetNillableType(s *string) *TenantUpdateOne {
	if s != nil {
		tuo.SetType(*s)
	}
	return tuo
}

// ClearType clears the value of the "type" field.
func (tuo *TenantUpdateOne) ClearType() *TenantUpdateOne {
	tuo.mutation.ClearType()
	return tuo
}

// SetTitle sets the "title" field.
func (tuo *TenantUpdateOne) SetTitle(s string) *TenantUpdateOne {
	tuo.mutation.SetTitle(s)
	return tuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (tuo *TenantUpdateOne) SetNillableTitle(s *string) *TenantUpdateOne {
	if s != nil {
		tuo.SetTitle(*s)
	}
	return tuo
}

// ClearTitle clears the value of the "title" field.
func (tuo *TenantUpdateOne) ClearTitle() *TenantUpdateOne {
	tuo.mutation.ClearTitle()
	return tuo
}

// SetURL sets the "url" field.
func (tuo *TenantUpdateOne) SetURL(s string) *TenantUpdateOne {
	tuo.mutation.SetURL(s)
	return tuo
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (tuo *TenantUpdateOne) SetNillableURL(s *string) *TenantUpdateOne {
	if s != nil {
		tuo.SetURL(*s)
	}
	return tuo
}

// ClearURL clears the value of the "url" field.
func (tuo *TenantUpdateOne) ClearURL() *TenantUpdateOne {
	tuo.mutation.ClearURL()
	return tuo
}

// SetLogo sets the "logo" field.
func (tuo *TenantUpdateOne) SetLogo(s string) *TenantUpdateOne {
	tuo.mutation.SetLogo(s)
	return tuo
}

// SetNillableLogo sets the "logo" field if the given value is not nil.
func (tuo *TenantUpdateOne) SetNillableLogo(s *string) *TenantUpdateOne {
	if s != nil {
		tuo.SetLogo(*s)
	}
	return tuo
}

// ClearLogo clears the value of the "logo" field.
func (tuo *TenantUpdateOne) ClearLogo() *TenantUpdateOne {
	tuo.mutation.ClearLogo()
	return tuo
}

// SetLogoAlt sets the "logo_alt" field.
func (tuo *TenantUpdateOne) SetLogoAlt(s string) *TenantUpdateOne {
	tuo.mutation.SetLogoAlt(s)
	return tuo
}

// SetNillableLogoAlt sets the "logo_alt" field if the given value is not nil.
func (tuo *TenantUpdateOne) SetNillableLogoAlt(s *string) *TenantUpdateOne {
	if s != nil {
		tuo.SetLogoAlt(*s)
	}
	return tuo
}

// ClearLogoAlt clears the value of the "logo_alt" field.
func (tuo *TenantUpdateOne) ClearLogoAlt() *TenantUpdateOne {
	tuo.mutation.ClearLogoAlt()
	return tuo
}

// SetKeywords sets the "keywords" field.
func (tuo *TenantUpdateOne) SetKeywords(s string) *TenantUpdateOne {
	tuo.mutation.SetKeywords(s)
	return tuo
}

// SetNillableKeywords sets the "keywords" field if the given value is not nil.
func (tuo *TenantUpdateOne) SetNillableKeywords(s *string) *TenantUpdateOne {
	if s != nil {
		tuo.SetKeywords(*s)
	}
	return tuo
}

// ClearKeywords clears the value of the "keywords" field.
func (tuo *TenantUpdateOne) ClearKeywords() *TenantUpdateOne {
	tuo.mutation.ClearKeywords()
	return tuo
}

// SetCopyright sets the "copyright" field.
func (tuo *TenantUpdateOne) SetCopyright(s string) *TenantUpdateOne {
	tuo.mutation.SetCopyright(s)
	return tuo
}

// SetNillableCopyright sets the "copyright" field if the given value is not nil.
func (tuo *TenantUpdateOne) SetNillableCopyright(s *string) *TenantUpdateOne {
	if s != nil {
		tuo.SetCopyright(*s)
	}
	return tuo
}

// ClearCopyright clears the value of the "copyright" field.
func (tuo *TenantUpdateOne) ClearCopyright() *TenantUpdateOne {
	tuo.mutation.ClearCopyright()
	return tuo
}

// SetDescription sets the "description" field.
func (tuo *TenantUpdateOne) SetDescription(s string) *TenantUpdateOne {
	tuo.mutation.SetDescription(s)
	return tuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tuo *TenantUpdateOne) SetNillableDescription(s *string) *TenantUpdateOne {
	if s != nil {
		tuo.SetDescription(*s)
	}
	return tuo
}

// ClearDescription clears the value of the "description" field.
func (tuo *TenantUpdateOne) ClearDescription() *TenantUpdateOne {
	tuo.mutation.ClearDescription()
	return tuo
}

// SetOrder sets the "order" field.
func (tuo *TenantUpdateOne) SetOrder(i int) *TenantUpdateOne {
	tuo.mutation.ResetOrder()
	tuo.mutation.SetOrder(i)
	return tuo
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (tuo *TenantUpdateOne) SetNillableOrder(i *int) *TenantUpdateOne {
	if i != nil {
		tuo.SetOrder(*i)
	}
	return tuo
}

// AddOrder adds i to the "order" field.
func (tuo *TenantUpdateOne) AddOrder(i int) *TenantUpdateOne {
	tuo.mutation.AddOrder(i)
	return tuo
}

// SetDisabled sets the "disabled" field.
func (tuo *TenantUpdateOne) SetDisabled(b bool) *TenantUpdateOne {
	tuo.mutation.SetDisabled(b)
	return tuo
}

// SetNillableDisabled sets the "disabled" field if the given value is not nil.
func (tuo *TenantUpdateOne) SetNillableDisabled(b *bool) *TenantUpdateOne {
	if b != nil {
		tuo.SetDisabled(*b)
	}
	return tuo
}

// ClearDisabled clears the value of the "disabled" field.
func (tuo *TenantUpdateOne) ClearDisabled() *TenantUpdateOne {
	tuo.mutation.ClearDisabled()
	return tuo
}

// SetExtras sets the "extras" field.
func (tuo *TenantUpdateOne) SetExtras(m map[string]interface{}) *TenantUpdateOne {
	tuo.mutation.SetExtras(m)
	return tuo
}

// ClearExtras clears the value of the "extras" field.
func (tuo *TenantUpdateOne) ClearExtras() *TenantUpdateOne {
	tuo.mutation.ClearExtras()
	return tuo
}

// SetCreatedBy sets the "created_by" field.
func (tuo *TenantUpdateOne) SetCreatedBy(s string) *TenantUpdateOne {
	tuo.mutation.SetCreatedBy(s)
	return tuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (tuo *TenantUpdateOne) SetNillableCreatedBy(s *string) *TenantUpdateOne {
	if s != nil {
		tuo.SetCreatedBy(*s)
	}
	return tuo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (tuo *TenantUpdateOne) ClearCreatedBy() *TenantUpdateOne {
	tuo.mutation.ClearCreatedBy()
	return tuo
}

// SetUpdatedBy sets the "updated_by" field.
func (tuo *TenantUpdateOne) SetUpdatedBy(s string) *TenantUpdateOne {
	tuo.mutation.SetUpdatedBy(s)
	return tuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (tuo *TenantUpdateOne) SetNillableUpdatedBy(s *string) *TenantUpdateOne {
	if s != nil {
		tuo.SetUpdatedBy(*s)
	}
	return tuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (tuo *TenantUpdateOne) ClearUpdatedBy() *TenantUpdateOne {
	tuo.mutation.ClearUpdatedBy()
	return tuo
}

// SetExpiredAt sets the "expired_at" field.
func (tuo *TenantUpdateOne) SetExpiredAt(i int64) *TenantUpdateOne {
	tuo.mutation.ResetExpiredAt()
	tuo.mutation.SetExpiredAt(i)
	return tuo
}

// SetNillableExpiredAt sets the "expired_at" field if the given value is not nil.
func (tuo *TenantUpdateOne) SetNillableExpiredAt(i *int64) *TenantUpdateOne {
	if i != nil {
		tuo.SetExpiredAt(*i)
	}
	return tuo
}

// AddExpiredAt adds i to the "expired_at" field.
func (tuo *TenantUpdateOne) AddExpiredAt(i int64) *TenantUpdateOne {
	tuo.mutation.AddExpiredAt(i)
	return tuo
}

// ClearExpiredAt clears the value of the "expired_at" field.
func (tuo *TenantUpdateOne) ClearExpiredAt() *TenantUpdateOne {
	tuo.mutation.ClearExpiredAt()
	return tuo
}

// SetUpdatedAt sets the "updated_at" field.
func (tuo *TenantUpdateOne) SetUpdatedAt(i int64) *TenantUpdateOne {
	tuo.mutation.ResetUpdatedAt()
	tuo.mutation.SetUpdatedAt(i)
	return tuo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (tuo *TenantUpdateOne) AddUpdatedAt(i int64) *TenantUpdateOne {
	tuo.mutation.AddUpdatedAt(i)
	return tuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tuo *TenantUpdateOne) ClearUpdatedAt() *TenantUpdateOne {
	tuo.mutation.ClearUpdatedAt()
	return tuo
}

// Mutation returns the TenantMutation object of the builder.
func (tuo *TenantUpdateOne) Mutation() *TenantMutation {
	return tuo.mutation
}

// Where appends a list predicates to the TenantUpdate builder.
func (tuo *TenantUpdateOne) Where(ps ...predicate.Tenant) *TenantUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TenantUpdateOne) Select(field string, fields ...string) *TenantUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Tenant entity.
func (tuo *TenantUpdateOne) Save(ctx context.Context) (*Tenant, error) {
	tuo.defaults()
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TenantUpdateOne) SaveX(ctx context.Context) *Tenant {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TenantUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TenantUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tuo *TenantUpdateOne) defaults() {
	if _, ok := tuo.mutation.UpdatedAt(); !ok && !tuo.mutation.UpdatedAtCleared() {
		v := tenant.UpdateDefaultUpdatedAt()
		tuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TenantUpdateOne) check() error {
	if v, ok := tuo.mutation.CreatedBy(); ok {
		if err := tenant.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "Tenant.created_by": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.UpdatedBy(); ok {
		if err := tenant.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "Tenant.updated_by": %w`, err)}
		}
	}
	return nil
}

func (tuo *TenantUpdateOne) sqlSave(ctx context.Context) (_node *Tenant, err error) {
	if err := tuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(tenant.Table, tenant.Columns, sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Tenant.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tenant.FieldID)
		for _, f := range fields {
			if !tenant.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tenant.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.Name(); ok {
		_spec.SetField(tenant.FieldName, field.TypeString, value)
	}
	if tuo.mutation.NameCleared() {
		_spec.ClearField(tenant.FieldName, field.TypeString)
	}
	if value, ok := tuo.mutation.Slug(); ok {
		_spec.SetField(tenant.FieldSlug, field.TypeString, value)
	}
	if tuo.mutation.SlugCleared() {
		_spec.ClearField(tenant.FieldSlug, field.TypeString)
	}
	if value, ok := tuo.mutation.GetType(); ok {
		_spec.SetField(tenant.FieldType, field.TypeString, value)
	}
	if tuo.mutation.TypeCleared() {
		_spec.ClearField(tenant.FieldType, field.TypeString)
	}
	if value, ok := tuo.mutation.Title(); ok {
		_spec.SetField(tenant.FieldTitle, field.TypeString, value)
	}
	if tuo.mutation.TitleCleared() {
		_spec.ClearField(tenant.FieldTitle, field.TypeString)
	}
	if value, ok := tuo.mutation.URL(); ok {
		_spec.SetField(tenant.FieldURL, field.TypeString, value)
	}
	if tuo.mutation.URLCleared() {
		_spec.ClearField(tenant.FieldURL, field.TypeString)
	}
	if value, ok := tuo.mutation.Logo(); ok {
		_spec.SetField(tenant.FieldLogo, field.TypeString, value)
	}
	if tuo.mutation.LogoCleared() {
		_spec.ClearField(tenant.FieldLogo, field.TypeString)
	}
	if value, ok := tuo.mutation.LogoAlt(); ok {
		_spec.SetField(tenant.FieldLogoAlt, field.TypeString, value)
	}
	if tuo.mutation.LogoAltCleared() {
		_spec.ClearField(tenant.FieldLogoAlt, field.TypeString)
	}
	if value, ok := tuo.mutation.Keywords(); ok {
		_spec.SetField(tenant.FieldKeywords, field.TypeString, value)
	}
	if tuo.mutation.KeywordsCleared() {
		_spec.ClearField(tenant.FieldKeywords, field.TypeString)
	}
	if value, ok := tuo.mutation.Copyright(); ok {
		_spec.SetField(tenant.FieldCopyright, field.TypeString, value)
	}
	if tuo.mutation.CopyrightCleared() {
		_spec.ClearField(tenant.FieldCopyright, field.TypeString)
	}
	if value, ok := tuo.mutation.Description(); ok {
		_spec.SetField(tenant.FieldDescription, field.TypeString, value)
	}
	if tuo.mutation.DescriptionCleared() {
		_spec.ClearField(tenant.FieldDescription, field.TypeString)
	}
	if value, ok := tuo.mutation.Order(); ok {
		_spec.SetField(tenant.FieldOrder, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.AddedOrder(); ok {
		_spec.AddField(tenant.FieldOrder, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.Disabled(); ok {
		_spec.SetField(tenant.FieldDisabled, field.TypeBool, value)
	}
	if tuo.mutation.DisabledCleared() {
		_spec.ClearField(tenant.FieldDisabled, field.TypeBool)
	}
	if value, ok := tuo.mutation.Extras(); ok {
		_spec.SetField(tenant.FieldExtras, field.TypeJSON, value)
	}
	if tuo.mutation.ExtrasCleared() {
		_spec.ClearField(tenant.FieldExtras, field.TypeJSON)
	}
	if value, ok := tuo.mutation.CreatedBy(); ok {
		_spec.SetField(tenant.FieldCreatedBy, field.TypeString, value)
	}
	if tuo.mutation.CreatedByCleared() {
		_spec.ClearField(tenant.FieldCreatedBy, field.TypeString)
	}
	if value, ok := tuo.mutation.UpdatedBy(); ok {
		_spec.SetField(tenant.FieldUpdatedBy, field.TypeString, value)
	}
	if tuo.mutation.UpdatedByCleared() {
		_spec.ClearField(tenant.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := tuo.mutation.ExpiredAt(); ok {
		_spec.SetField(tenant.FieldExpiredAt, field.TypeInt64, value)
	}
	if value, ok := tuo.mutation.AddedExpiredAt(); ok {
		_spec.AddField(tenant.FieldExpiredAt, field.TypeInt64, value)
	}
	if tuo.mutation.ExpiredAtCleared() {
		_spec.ClearField(tenant.FieldExpiredAt, field.TypeInt64)
	}
	if tuo.mutation.CreatedAtCleared() {
		_spec.ClearField(tenant.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := tuo.mutation.UpdatedAt(); ok {
		_spec.SetField(tenant.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := tuo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(tenant.FieldUpdatedAt, field.TypeInt64, value)
	}
	if tuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(tenant.FieldUpdatedAt, field.TypeInt64)
	}
	_node = &Tenant{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tenant.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
