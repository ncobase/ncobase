// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"ncobase/tenant/data/ent/tenantbilling"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// TenantBilling is the model entity for the TenantBilling schema.
type TenantBilling struct {
	config `json:"-"`
	// ID of the ent.
	// primary key
	ID string `json:"id,omitempty"`
	// tenant id
	TenantID string `json:"tenant_id,omitempty"`
	// description
	Description string `json:"description,omitempty"`
	// Extend properties
	Extras map[string]interface{} `json:"extras,omitempty"`
	// id of the creator
	CreatedBy string `json:"created_by,omitempty"`
	// id of the last updater
	UpdatedBy string `json:"updated_by,omitempty"`
	// created at
	CreatedAt int64 `json:"created_at,omitempty"`
	// updated at
	UpdatedAt int64 `json:"updated_at,omitempty"`
	// Billing period type (monthly, yearly, one_time, usage_based)
	BillingPeriod string `json:"billing_period,omitempty"`
	// Start timestamp of billing period
	PeriodStart int64 `json:"period_start,omitempty"`
	// End timestamp of billing period
	PeriodEnd int64 `json:"period_end,omitempty"`
	// Billing amount
	Amount float64 `json:"amount,omitempty"`
	// Currency code (USD, EUR, etc.)
	Currency string `json:"currency,omitempty"`
	// Billing status (pending, paid, overdue, cancelled, refunded)
	Status string `json:"status,omitempty"`
	// Invoice or reference number
	InvoiceNumber string `json:"invoice_number,omitempty"`
	// Payment method used
	PaymentMethod string `json:"payment_method,omitempty"`
	// Payment timestamp
	PaidAt int64 `json:"paid_at,omitempty"`
	// Payment due date timestamp
	DueDate int64 `json:"due_date,omitempty"`
	// Detailed usage information for billing period
	UsageDetails map[string]interface{} `json:"usage_details,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TenantBilling) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case tenantbilling.FieldExtras, tenantbilling.FieldUsageDetails:
			values[i] = new([]byte)
		case tenantbilling.FieldAmount:
			values[i] = new(sql.NullFloat64)
		case tenantbilling.FieldCreatedAt, tenantbilling.FieldUpdatedAt, tenantbilling.FieldPeriodStart, tenantbilling.FieldPeriodEnd, tenantbilling.FieldPaidAt, tenantbilling.FieldDueDate:
			values[i] = new(sql.NullInt64)
		case tenantbilling.FieldID, tenantbilling.FieldTenantID, tenantbilling.FieldDescription, tenantbilling.FieldCreatedBy, tenantbilling.FieldUpdatedBy, tenantbilling.FieldBillingPeriod, tenantbilling.FieldCurrency, tenantbilling.FieldStatus, tenantbilling.FieldInvoiceNumber, tenantbilling.FieldPaymentMethod:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TenantBilling fields.
func (tb *TenantBilling) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tenantbilling.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				tb.ID = value.String
			}
		case tenantbilling.FieldTenantID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				tb.TenantID = value.String
			}
		case tenantbilling.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				tb.Description = value.String
			}
		case tenantbilling.FieldExtras:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field extras", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &tb.Extras); err != nil {
					return fmt.Errorf("unmarshal field extras: %w", err)
				}
			}
		case tenantbilling.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				tb.CreatedBy = value.String
			}
		case tenantbilling.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				tb.UpdatedBy = value.String
			}
		case tenantbilling.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				tb.CreatedAt = value.Int64
			}
		case tenantbilling.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				tb.UpdatedAt = value.Int64
			}
		case tenantbilling.FieldBillingPeriod:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field billing_period", values[i])
			} else if value.Valid {
				tb.BillingPeriod = value.String
			}
		case tenantbilling.FieldPeriodStart:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field period_start", values[i])
			} else if value.Valid {
				tb.PeriodStart = value.Int64
			}
		case tenantbilling.FieldPeriodEnd:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field period_end", values[i])
			} else if value.Valid {
				tb.PeriodEnd = value.Int64
			}
		case tenantbilling.FieldAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value.Valid {
				tb.Amount = value.Float64
			}
		case tenantbilling.FieldCurrency:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field currency", values[i])
			} else if value.Valid {
				tb.Currency = value.String
			}
		case tenantbilling.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				tb.Status = value.String
			}
		case tenantbilling.FieldInvoiceNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field invoice_number", values[i])
			} else if value.Valid {
				tb.InvoiceNumber = value.String
			}
		case tenantbilling.FieldPaymentMethod:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field payment_method", values[i])
			} else if value.Valid {
				tb.PaymentMethod = value.String
			}
		case tenantbilling.FieldPaidAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field paid_at", values[i])
			} else if value.Valid {
				tb.PaidAt = value.Int64
			}
		case tenantbilling.FieldDueDate:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field due_date", values[i])
			} else if value.Valid {
				tb.DueDate = value.Int64
			}
		case tenantbilling.FieldUsageDetails:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field usage_details", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &tb.UsageDetails); err != nil {
					return fmt.Errorf("unmarshal field usage_details: %w", err)
				}
			}
		default:
			tb.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TenantBilling.
// This includes values selected through modifiers, order, etc.
func (tb *TenantBilling) Value(name string) (ent.Value, error) {
	return tb.selectValues.Get(name)
}

// Update returns a builder for updating this TenantBilling.
// Note that you need to call TenantBilling.Unwrap() before calling this method if this TenantBilling
// was returned from a transaction, and the transaction was committed or rolled back.
func (tb *TenantBilling) Update() *TenantBillingUpdateOne {
	return NewTenantBillingClient(tb.config).UpdateOne(tb)
}

// Unwrap unwraps the TenantBilling entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tb *TenantBilling) Unwrap() *TenantBilling {
	_tx, ok := tb.config.driver.(*txDriver)
	if !ok {
		panic("ent: TenantBilling is not a transactional entity")
	}
	tb.config.driver = _tx.drv
	return tb
}

// String implements the fmt.Stringer.
func (tb *TenantBilling) String() string {
	var builder strings.Builder
	builder.WriteString("TenantBilling(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tb.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(tb.TenantID)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(tb.Description)
	builder.WriteString(", ")
	builder.WriteString("extras=")
	builder.WriteString(fmt.Sprintf("%v", tb.Extras))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(tb.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(tb.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", tb.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", tb.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("billing_period=")
	builder.WriteString(tb.BillingPeriod)
	builder.WriteString(", ")
	builder.WriteString("period_start=")
	builder.WriteString(fmt.Sprintf("%v", tb.PeriodStart))
	builder.WriteString(", ")
	builder.WriteString("period_end=")
	builder.WriteString(fmt.Sprintf("%v", tb.PeriodEnd))
	builder.WriteString(", ")
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", tb.Amount))
	builder.WriteString(", ")
	builder.WriteString("currency=")
	builder.WriteString(tb.Currency)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(tb.Status)
	builder.WriteString(", ")
	builder.WriteString("invoice_number=")
	builder.WriteString(tb.InvoiceNumber)
	builder.WriteString(", ")
	builder.WriteString("payment_method=")
	builder.WriteString(tb.PaymentMethod)
	builder.WriteString(", ")
	builder.WriteString("paid_at=")
	builder.WriteString(fmt.Sprintf("%v", tb.PaidAt))
	builder.WriteString(", ")
	builder.WriteString("due_date=")
	builder.WriteString(fmt.Sprintf("%v", tb.DueDate))
	builder.WriteString(", ")
	builder.WriteString("usage_details=")
	builder.WriteString(fmt.Sprintf("%v", tb.UsageDetails))
	builder.WriteByte(')')
	return builder.String()
}

// TenantBillings is a parsable slice of TenantBilling.
type TenantBillings []*TenantBilling
