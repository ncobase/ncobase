// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/tenant/data/ent/predicate"
	"ncobase/tenant/data/ent/tenantbilling"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TenantBillingUpdate is the builder for updating TenantBilling entities.
type TenantBillingUpdate struct {
	config
	hooks    []Hook
	mutation *TenantBillingMutation
}

// Where appends a list predicates to the TenantBillingUpdate builder.
func (tbu *TenantBillingUpdate) Where(ps ...predicate.TenantBilling) *TenantBillingUpdate {
	tbu.mutation.Where(ps...)
	return tbu
}

// SetTenantID sets the "tenant_id" field.
func (tbu *TenantBillingUpdate) SetTenantID(s string) *TenantBillingUpdate {
	tbu.mutation.SetTenantID(s)
	return tbu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (tbu *TenantBillingUpdate) SetNillableTenantID(s *string) *TenantBillingUpdate {
	if s != nil {
		tbu.SetTenantID(*s)
	}
	return tbu
}

// ClearTenantID clears the value of the "tenant_id" field.
func (tbu *TenantBillingUpdate) ClearTenantID() *TenantBillingUpdate {
	tbu.mutation.ClearTenantID()
	return tbu
}

// SetDescription sets the "description" field.
func (tbu *TenantBillingUpdate) SetDescription(s string) *TenantBillingUpdate {
	tbu.mutation.SetDescription(s)
	return tbu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tbu *TenantBillingUpdate) SetNillableDescription(s *string) *TenantBillingUpdate {
	if s != nil {
		tbu.SetDescription(*s)
	}
	return tbu
}

// ClearDescription clears the value of the "description" field.
func (tbu *TenantBillingUpdate) ClearDescription() *TenantBillingUpdate {
	tbu.mutation.ClearDescription()
	return tbu
}

// SetExtras sets the "extras" field.
func (tbu *TenantBillingUpdate) SetExtras(m map[string]interface{}) *TenantBillingUpdate {
	tbu.mutation.SetExtras(m)
	return tbu
}

// ClearExtras clears the value of the "extras" field.
func (tbu *TenantBillingUpdate) ClearExtras() *TenantBillingUpdate {
	tbu.mutation.ClearExtras()
	return tbu
}

// SetCreatedBy sets the "created_by" field.
func (tbu *TenantBillingUpdate) SetCreatedBy(s string) *TenantBillingUpdate {
	tbu.mutation.SetCreatedBy(s)
	return tbu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (tbu *TenantBillingUpdate) SetNillableCreatedBy(s *string) *TenantBillingUpdate {
	if s != nil {
		tbu.SetCreatedBy(*s)
	}
	return tbu
}

// ClearCreatedBy clears the value of the "created_by" field.
func (tbu *TenantBillingUpdate) ClearCreatedBy() *TenantBillingUpdate {
	tbu.mutation.ClearCreatedBy()
	return tbu
}

// SetUpdatedBy sets the "updated_by" field.
func (tbu *TenantBillingUpdate) SetUpdatedBy(s string) *TenantBillingUpdate {
	tbu.mutation.SetUpdatedBy(s)
	return tbu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (tbu *TenantBillingUpdate) SetNillableUpdatedBy(s *string) *TenantBillingUpdate {
	if s != nil {
		tbu.SetUpdatedBy(*s)
	}
	return tbu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (tbu *TenantBillingUpdate) ClearUpdatedBy() *TenantBillingUpdate {
	tbu.mutation.ClearUpdatedBy()
	return tbu
}

// SetUpdatedAt sets the "updated_at" field.
func (tbu *TenantBillingUpdate) SetUpdatedAt(i int64) *TenantBillingUpdate {
	tbu.mutation.ResetUpdatedAt()
	tbu.mutation.SetUpdatedAt(i)
	return tbu
}

// AddUpdatedAt adds i to the "updated_at" field.
func (tbu *TenantBillingUpdate) AddUpdatedAt(i int64) *TenantBillingUpdate {
	tbu.mutation.AddUpdatedAt(i)
	return tbu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tbu *TenantBillingUpdate) ClearUpdatedAt() *TenantBillingUpdate {
	tbu.mutation.ClearUpdatedAt()
	return tbu
}

// SetBillingPeriod sets the "billing_period" field.
func (tbu *TenantBillingUpdate) SetBillingPeriod(s string) *TenantBillingUpdate {
	tbu.mutation.SetBillingPeriod(s)
	return tbu
}

// SetNillableBillingPeriod sets the "billing_period" field if the given value is not nil.
func (tbu *TenantBillingUpdate) SetNillableBillingPeriod(s *string) *TenantBillingUpdate {
	if s != nil {
		tbu.SetBillingPeriod(*s)
	}
	return tbu
}

// SetPeriodStart sets the "period_start" field.
func (tbu *TenantBillingUpdate) SetPeriodStart(i int64) *TenantBillingUpdate {
	tbu.mutation.ResetPeriodStart()
	tbu.mutation.SetPeriodStart(i)
	return tbu
}

// SetNillablePeriodStart sets the "period_start" field if the given value is not nil.
func (tbu *TenantBillingUpdate) SetNillablePeriodStart(i *int64) *TenantBillingUpdate {
	if i != nil {
		tbu.SetPeriodStart(*i)
	}
	return tbu
}

// AddPeriodStart adds i to the "period_start" field.
func (tbu *TenantBillingUpdate) AddPeriodStart(i int64) *TenantBillingUpdate {
	tbu.mutation.AddPeriodStart(i)
	return tbu
}

// ClearPeriodStart clears the value of the "period_start" field.
func (tbu *TenantBillingUpdate) ClearPeriodStart() *TenantBillingUpdate {
	tbu.mutation.ClearPeriodStart()
	return tbu
}

// SetPeriodEnd sets the "period_end" field.
func (tbu *TenantBillingUpdate) SetPeriodEnd(i int64) *TenantBillingUpdate {
	tbu.mutation.ResetPeriodEnd()
	tbu.mutation.SetPeriodEnd(i)
	return tbu
}

// SetNillablePeriodEnd sets the "period_end" field if the given value is not nil.
func (tbu *TenantBillingUpdate) SetNillablePeriodEnd(i *int64) *TenantBillingUpdate {
	if i != nil {
		tbu.SetPeriodEnd(*i)
	}
	return tbu
}

// AddPeriodEnd adds i to the "period_end" field.
func (tbu *TenantBillingUpdate) AddPeriodEnd(i int64) *TenantBillingUpdate {
	tbu.mutation.AddPeriodEnd(i)
	return tbu
}

// ClearPeriodEnd clears the value of the "period_end" field.
func (tbu *TenantBillingUpdate) ClearPeriodEnd() *TenantBillingUpdate {
	tbu.mutation.ClearPeriodEnd()
	return tbu
}

// SetAmount sets the "amount" field.
func (tbu *TenantBillingUpdate) SetAmount(f float64) *TenantBillingUpdate {
	tbu.mutation.ResetAmount()
	tbu.mutation.SetAmount(f)
	return tbu
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (tbu *TenantBillingUpdate) SetNillableAmount(f *float64) *TenantBillingUpdate {
	if f != nil {
		tbu.SetAmount(*f)
	}
	return tbu
}

// AddAmount adds f to the "amount" field.
func (tbu *TenantBillingUpdate) AddAmount(f float64) *TenantBillingUpdate {
	tbu.mutation.AddAmount(f)
	return tbu
}

// SetCurrency sets the "currency" field.
func (tbu *TenantBillingUpdate) SetCurrency(s string) *TenantBillingUpdate {
	tbu.mutation.SetCurrency(s)
	return tbu
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (tbu *TenantBillingUpdate) SetNillableCurrency(s *string) *TenantBillingUpdate {
	if s != nil {
		tbu.SetCurrency(*s)
	}
	return tbu
}

// SetStatus sets the "status" field.
func (tbu *TenantBillingUpdate) SetStatus(s string) *TenantBillingUpdate {
	tbu.mutation.SetStatus(s)
	return tbu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tbu *TenantBillingUpdate) SetNillableStatus(s *string) *TenantBillingUpdate {
	if s != nil {
		tbu.SetStatus(*s)
	}
	return tbu
}

// SetInvoiceNumber sets the "invoice_number" field.
func (tbu *TenantBillingUpdate) SetInvoiceNumber(s string) *TenantBillingUpdate {
	tbu.mutation.SetInvoiceNumber(s)
	return tbu
}

// SetNillableInvoiceNumber sets the "invoice_number" field if the given value is not nil.
func (tbu *TenantBillingUpdate) SetNillableInvoiceNumber(s *string) *TenantBillingUpdate {
	if s != nil {
		tbu.SetInvoiceNumber(*s)
	}
	return tbu
}

// ClearInvoiceNumber clears the value of the "invoice_number" field.
func (tbu *TenantBillingUpdate) ClearInvoiceNumber() *TenantBillingUpdate {
	tbu.mutation.ClearInvoiceNumber()
	return tbu
}

// SetPaymentMethod sets the "payment_method" field.
func (tbu *TenantBillingUpdate) SetPaymentMethod(s string) *TenantBillingUpdate {
	tbu.mutation.SetPaymentMethod(s)
	return tbu
}

// SetNillablePaymentMethod sets the "payment_method" field if the given value is not nil.
func (tbu *TenantBillingUpdate) SetNillablePaymentMethod(s *string) *TenantBillingUpdate {
	if s != nil {
		tbu.SetPaymentMethod(*s)
	}
	return tbu
}

// ClearPaymentMethod clears the value of the "payment_method" field.
func (tbu *TenantBillingUpdate) ClearPaymentMethod() *TenantBillingUpdate {
	tbu.mutation.ClearPaymentMethod()
	return tbu
}

// SetPaidAt sets the "paid_at" field.
func (tbu *TenantBillingUpdate) SetPaidAt(i int64) *TenantBillingUpdate {
	tbu.mutation.ResetPaidAt()
	tbu.mutation.SetPaidAt(i)
	return tbu
}

// SetNillablePaidAt sets the "paid_at" field if the given value is not nil.
func (tbu *TenantBillingUpdate) SetNillablePaidAt(i *int64) *TenantBillingUpdate {
	if i != nil {
		tbu.SetPaidAt(*i)
	}
	return tbu
}

// AddPaidAt adds i to the "paid_at" field.
func (tbu *TenantBillingUpdate) AddPaidAt(i int64) *TenantBillingUpdate {
	tbu.mutation.AddPaidAt(i)
	return tbu
}

// ClearPaidAt clears the value of the "paid_at" field.
func (tbu *TenantBillingUpdate) ClearPaidAt() *TenantBillingUpdate {
	tbu.mutation.ClearPaidAt()
	return tbu
}

// SetDueDate sets the "due_date" field.
func (tbu *TenantBillingUpdate) SetDueDate(i int64) *TenantBillingUpdate {
	tbu.mutation.ResetDueDate()
	tbu.mutation.SetDueDate(i)
	return tbu
}

// SetNillableDueDate sets the "due_date" field if the given value is not nil.
func (tbu *TenantBillingUpdate) SetNillableDueDate(i *int64) *TenantBillingUpdate {
	if i != nil {
		tbu.SetDueDate(*i)
	}
	return tbu
}

// AddDueDate adds i to the "due_date" field.
func (tbu *TenantBillingUpdate) AddDueDate(i int64) *TenantBillingUpdate {
	tbu.mutation.AddDueDate(i)
	return tbu
}

// ClearDueDate clears the value of the "due_date" field.
func (tbu *TenantBillingUpdate) ClearDueDate() *TenantBillingUpdate {
	tbu.mutation.ClearDueDate()
	return tbu
}

// SetUsageDetails sets the "usage_details" field.
func (tbu *TenantBillingUpdate) SetUsageDetails(m map[string]interface{}) *TenantBillingUpdate {
	tbu.mutation.SetUsageDetails(m)
	return tbu
}

// ClearUsageDetails clears the value of the "usage_details" field.
func (tbu *TenantBillingUpdate) ClearUsageDetails() *TenantBillingUpdate {
	tbu.mutation.ClearUsageDetails()
	return tbu
}

// Mutation returns the TenantBillingMutation object of the builder.
func (tbu *TenantBillingUpdate) Mutation() *TenantBillingMutation {
	return tbu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tbu *TenantBillingUpdate) Save(ctx context.Context) (int, error) {
	tbu.defaults()
	return withHooks(ctx, tbu.sqlSave, tbu.mutation, tbu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tbu *TenantBillingUpdate) SaveX(ctx context.Context) int {
	affected, err := tbu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tbu *TenantBillingUpdate) Exec(ctx context.Context) error {
	_, err := tbu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tbu *TenantBillingUpdate) ExecX(ctx context.Context) {
	if err := tbu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tbu *TenantBillingUpdate) defaults() {
	if _, ok := tbu.mutation.UpdatedAt(); !ok && !tbu.mutation.UpdatedAtCleared() {
		v := tenantbilling.UpdateDefaultUpdatedAt()
		tbu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tbu *TenantBillingUpdate) check() error {
	if v, ok := tbu.mutation.TenantID(); ok {
		if err := tenantbilling.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "TenantBilling.tenant_id": %w`, err)}
		}
	}
	if v, ok := tbu.mutation.CreatedBy(); ok {
		if err := tenantbilling.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "TenantBilling.created_by": %w`, err)}
		}
	}
	if v, ok := tbu.mutation.UpdatedBy(); ok {
		if err := tenantbilling.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "TenantBilling.updated_by": %w`, err)}
		}
	}
	if v, ok := tbu.mutation.Amount(); ok {
		if err := tenantbilling.AmountValidator(v); err != nil {
			return &ValidationError{Name: "amount", err: fmt.Errorf(`ent: validator failed for field "TenantBilling.amount": %w`, err)}
		}
	}
	return nil
}

func (tbu *TenantBillingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tbu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(tenantbilling.Table, tenantbilling.Columns, sqlgraph.NewFieldSpec(tenantbilling.FieldID, field.TypeString))
	if ps := tbu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tbu.mutation.TenantID(); ok {
		_spec.SetField(tenantbilling.FieldTenantID, field.TypeString, value)
	}
	if tbu.mutation.TenantIDCleared() {
		_spec.ClearField(tenantbilling.FieldTenantID, field.TypeString)
	}
	if value, ok := tbu.mutation.Description(); ok {
		_spec.SetField(tenantbilling.FieldDescription, field.TypeString, value)
	}
	if tbu.mutation.DescriptionCleared() {
		_spec.ClearField(tenantbilling.FieldDescription, field.TypeString)
	}
	if value, ok := tbu.mutation.Extras(); ok {
		_spec.SetField(tenantbilling.FieldExtras, field.TypeJSON, value)
	}
	if tbu.mutation.ExtrasCleared() {
		_spec.ClearField(tenantbilling.FieldExtras, field.TypeJSON)
	}
	if value, ok := tbu.mutation.CreatedBy(); ok {
		_spec.SetField(tenantbilling.FieldCreatedBy, field.TypeString, value)
	}
	if tbu.mutation.CreatedByCleared() {
		_spec.ClearField(tenantbilling.FieldCreatedBy, field.TypeString)
	}
	if value, ok := tbu.mutation.UpdatedBy(); ok {
		_spec.SetField(tenantbilling.FieldUpdatedBy, field.TypeString, value)
	}
	if tbu.mutation.UpdatedByCleared() {
		_spec.ClearField(tenantbilling.FieldUpdatedBy, field.TypeString)
	}
	if tbu.mutation.CreatedAtCleared() {
		_spec.ClearField(tenantbilling.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := tbu.mutation.UpdatedAt(); ok {
		_spec.SetField(tenantbilling.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := tbu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(tenantbilling.FieldUpdatedAt, field.TypeInt64, value)
	}
	if tbu.mutation.UpdatedAtCleared() {
		_spec.ClearField(tenantbilling.FieldUpdatedAt, field.TypeInt64)
	}
	if value, ok := tbu.mutation.BillingPeriod(); ok {
		_spec.SetField(tenantbilling.FieldBillingPeriod, field.TypeString, value)
	}
	if value, ok := tbu.mutation.PeriodStart(); ok {
		_spec.SetField(tenantbilling.FieldPeriodStart, field.TypeInt64, value)
	}
	if value, ok := tbu.mutation.AddedPeriodStart(); ok {
		_spec.AddField(tenantbilling.FieldPeriodStart, field.TypeInt64, value)
	}
	if tbu.mutation.PeriodStartCleared() {
		_spec.ClearField(tenantbilling.FieldPeriodStart, field.TypeInt64)
	}
	if value, ok := tbu.mutation.PeriodEnd(); ok {
		_spec.SetField(tenantbilling.FieldPeriodEnd, field.TypeInt64, value)
	}
	if value, ok := tbu.mutation.AddedPeriodEnd(); ok {
		_spec.AddField(tenantbilling.FieldPeriodEnd, field.TypeInt64, value)
	}
	if tbu.mutation.PeriodEndCleared() {
		_spec.ClearField(tenantbilling.FieldPeriodEnd, field.TypeInt64)
	}
	if value, ok := tbu.mutation.Amount(); ok {
		_spec.SetField(tenantbilling.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := tbu.mutation.AddedAmount(); ok {
		_spec.AddField(tenantbilling.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := tbu.mutation.Currency(); ok {
		_spec.SetField(tenantbilling.FieldCurrency, field.TypeString, value)
	}
	if value, ok := tbu.mutation.Status(); ok {
		_spec.SetField(tenantbilling.FieldStatus, field.TypeString, value)
	}
	if value, ok := tbu.mutation.InvoiceNumber(); ok {
		_spec.SetField(tenantbilling.FieldInvoiceNumber, field.TypeString, value)
	}
	if tbu.mutation.InvoiceNumberCleared() {
		_spec.ClearField(tenantbilling.FieldInvoiceNumber, field.TypeString)
	}
	if value, ok := tbu.mutation.PaymentMethod(); ok {
		_spec.SetField(tenantbilling.FieldPaymentMethod, field.TypeString, value)
	}
	if tbu.mutation.PaymentMethodCleared() {
		_spec.ClearField(tenantbilling.FieldPaymentMethod, field.TypeString)
	}
	if value, ok := tbu.mutation.PaidAt(); ok {
		_spec.SetField(tenantbilling.FieldPaidAt, field.TypeInt64, value)
	}
	if value, ok := tbu.mutation.AddedPaidAt(); ok {
		_spec.AddField(tenantbilling.FieldPaidAt, field.TypeInt64, value)
	}
	if tbu.mutation.PaidAtCleared() {
		_spec.ClearField(tenantbilling.FieldPaidAt, field.TypeInt64)
	}
	if value, ok := tbu.mutation.DueDate(); ok {
		_spec.SetField(tenantbilling.FieldDueDate, field.TypeInt64, value)
	}
	if value, ok := tbu.mutation.AddedDueDate(); ok {
		_spec.AddField(tenantbilling.FieldDueDate, field.TypeInt64, value)
	}
	if tbu.mutation.DueDateCleared() {
		_spec.ClearField(tenantbilling.FieldDueDate, field.TypeInt64)
	}
	if value, ok := tbu.mutation.UsageDetails(); ok {
		_spec.SetField(tenantbilling.FieldUsageDetails, field.TypeJSON, value)
	}
	if tbu.mutation.UsageDetailsCleared() {
		_spec.ClearField(tenantbilling.FieldUsageDetails, field.TypeJSON)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tbu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tenantbilling.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tbu.mutation.done = true
	return n, nil
}

// TenantBillingUpdateOne is the builder for updating a single TenantBilling entity.
type TenantBillingUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TenantBillingMutation
}

// SetTenantID sets the "tenant_id" field.
func (tbuo *TenantBillingUpdateOne) SetTenantID(s string) *TenantBillingUpdateOne {
	tbuo.mutation.SetTenantID(s)
	return tbuo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (tbuo *TenantBillingUpdateOne) SetNillableTenantID(s *string) *TenantBillingUpdateOne {
	if s != nil {
		tbuo.SetTenantID(*s)
	}
	return tbuo
}

// ClearTenantID clears the value of the "tenant_id" field.
func (tbuo *TenantBillingUpdateOne) ClearTenantID() *TenantBillingUpdateOne {
	tbuo.mutation.ClearTenantID()
	return tbuo
}

// SetDescription sets the "description" field.
func (tbuo *TenantBillingUpdateOne) SetDescription(s string) *TenantBillingUpdateOne {
	tbuo.mutation.SetDescription(s)
	return tbuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tbuo *TenantBillingUpdateOne) SetNillableDescription(s *string) *TenantBillingUpdateOne {
	if s != nil {
		tbuo.SetDescription(*s)
	}
	return tbuo
}

// ClearDescription clears the value of the "description" field.
func (tbuo *TenantBillingUpdateOne) ClearDescription() *TenantBillingUpdateOne {
	tbuo.mutation.ClearDescription()
	return tbuo
}

// SetExtras sets the "extras" field.
func (tbuo *TenantBillingUpdateOne) SetExtras(m map[string]interface{}) *TenantBillingUpdateOne {
	tbuo.mutation.SetExtras(m)
	return tbuo
}

// ClearExtras clears the value of the "extras" field.
func (tbuo *TenantBillingUpdateOne) ClearExtras() *TenantBillingUpdateOne {
	tbuo.mutation.ClearExtras()
	return tbuo
}

// SetCreatedBy sets the "created_by" field.
func (tbuo *TenantBillingUpdateOne) SetCreatedBy(s string) *TenantBillingUpdateOne {
	tbuo.mutation.SetCreatedBy(s)
	return tbuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (tbuo *TenantBillingUpdateOne) SetNillableCreatedBy(s *string) *TenantBillingUpdateOne {
	if s != nil {
		tbuo.SetCreatedBy(*s)
	}
	return tbuo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (tbuo *TenantBillingUpdateOne) ClearCreatedBy() *TenantBillingUpdateOne {
	tbuo.mutation.ClearCreatedBy()
	return tbuo
}

// SetUpdatedBy sets the "updated_by" field.
func (tbuo *TenantBillingUpdateOne) SetUpdatedBy(s string) *TenantBillingUpdateOne {
	tbuo.mutation.SetUpdatedBy(s)
	return tbuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (tbuo *TenantBillingUpdateOne) SetNillableUpdatedBy(s *string) *TenantBillingUpdateOne {
	if s != nil {
		tbuo.SetUpdatedBy(*s)
	}
	return tbuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (tbuo *TenantBillingUpdateOne) ClearUpdatedBy() *TenantBillingUpdateOne {
	tbuo.mutation.ClearUpdatedBy()
	return tbuo
}

// SetUpdatedAt sets the "updated_at" field.
func (tbuo *TenantBillingUpdateOne) SetUpdatedAt(i int64) *TenantBillingUpdateOne {
	tbuo.mutation.ResetUpdatedAt()
	tbuo.mutation.SetUpdatedAt(i)
	return tbuo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (tbuo *TenantBillingUpdateOne) AddUpdatedAt(i int64) *TenantBillingUpdateOne {
	tbuo.mutation.AddUpdatedAt(i)
	return tbuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tbuo *TenantBillingUpdateOne) ClearUpdatedAt() *TenantBillingUpdateOne {
	tbuo.mutation.ClearUpdatedAt()
	return tbuo
}

// SetBillingPeriod sets the "billing_period" field.
func (tbuo *TenantBillingUpdateOne) SetBillingPeriod(s string) *TenantBillingUpdateOne {
	tbuo.mutation.SetBillingPeriod(s)
	return tbuo
}

// SetNillableBillingPeriod sets the "billing_period" field if the given value is not nil.
func (tbuo *TenantBillingUpdateOne) SetNillableBillingPeriod(s *string) *TenantBillingUpdateOne {
	if s != nil {
		tbuo.SetBillingPeriod(*s)
	}
	return tbuo
}

// SetPeriodStart sets the "period_start" field.
func (tbuo *TenantBillingUpdateOne) SetPeriodStart(i int64) *TenantBillingUpdateOne {
	tbuo.mutation.ResetPeriodStart()
	tbuo.mutation.SetPeriodStart(i)
	return tbuo
}

// SetNillablePeriodStart sets the "period_start" field if the given value is not nil.
func (tbuo *TenantBillingUpdateOne) SetNillablePeriodStart(i *int64) *TenantBillingUpdateOne {
	if i != nil {
		tbuo.SetPeriodStart(*i)
	}
	return tbuo
}

// AddPeriodStart adds i to the "period_start" field.
func (tbuo *TenantBillingUpdateOne) AddPeriodStart(i int64) *TenantBillingUpdateOne {
	tbuo.mutation.AddPeriodStart(i)
	return tbuo
}

// ClearPeriodStart clears the value of the "period_start" field.
func (tbuo *TenantBillingUpdateOne) ClearPeriodStart() *TenantBillingUpdateOne {
	tbuo.mutation.ClearPeriodStart()
	return tbuo
}

// SetPeriodEnd sets the "period_end" field.
func (tbuo *TenantBillingUpdateOne) SetPeriodEnd(i int64) *TenantBillingUpdateOne {
	tbuo.mutation.ResetPeriodEnd()
	tbuo.mutation.SetPeriodEnd(i)
	return tbuo
}

// SetNillablePeriodEnd sets the "period_end" field if the given value is not nil.
func (tbuo *TenantBillingUpdateOne) SetNillablePeriodEnd(i *int64) *TenantBillingUpdateOne {
	if i != nil {
		tbuo.SetPeriodEnd(*i)
	}
	return tbuo
}

// AddPeriodEnd adds i to the "period_end" field.
func (tbuo *TenantBillingUpdateOne) AddPeriodEnd(i int64) *TenantBillingUpdateOne {
	tbuo.mutation.AddPeriodEnd(i)
	return tbuo
}

// ClearPeriodEnd clears the value of the "period_end" field.
func (tbuo *TenantBillingUpdateOne) ClearPeriodEnd() *TenantBillingUpdateOne {
	tbuo.mutation.ClearPeriodEnd()
	return tbuo
}

// SetAmount sets the "amount" field.
func (tbuo *TenantBillingUpdateOne) SetAmount(f float64) *TenantBillingUpdateOne {
	tbuo.mutation.ResetAmount()
	tbuo.mutation.SetAmount(f)
	return tbuo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (tbuo *TenantBillingUpdateOne) SetNillableAmount(f *float64) *TenantBillingUpdateOne {
	if f != nil {
		tbuo.SetAmount(*f)
	}
	return tbuo
}

// AddAmount adds f to the "amount" field.
func (tbuo *TenantBillingUpdateOne) AddAmount(f float64) *TenantBillingUpdateOne {
	tbuo.mutation.AddAmount(f)
	return tbuo
}

// SetCurrency sets the "currency" field.
func (tbuo *TenantBillingUpdateOne) SetCurrency(s string) *TenantBillingUpdateOne {
	tbuo.mutation.SetCurrency(s)
	return tbuo
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (tbuo *TenantBillingUpdateOne) SetNillableCurrency(s *string) *TenantBillingUpdateOne {
	if s != nil {
		tbuo.SetCurrency(*s)
	}
	return tbuo
}

// SetStatus sets the "status" field.
func (tbuo *TenantBillingUpdateOne) SetStatus(s string) *TenantBillingUpdateOne {
	tbuo.mutation.SetStatus(s)
	return tbuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tbuo *TenantBillingUpdateOne) SetNillableStatus(s *string) *TenantBillingUpdateOne {
	if s != nil {
		tbuo.SetStatus(*s)
	}
	return tbuo
}

// SetInvoiceNumber sets the "invoice_number" field.
func (tbuo *TenantBillingUpdateOne) SetInvoiceNumber(s string) *TenantBillingUpdateOne {
	tbuo.mutation.SetInvoiceNumber(s)
	return tbuo
}

// SetNillableInvoiceNumber sets the "invoice_number" field if the given value is not nil.
func (tbuo *TenantBillingUpdateOne) SetNillableInvoiceNumber(s *string) *TenantBillingUpdateOne {
	if s != nil {
		tbuo.SetInvoiceNumber(*s)
	}
	return tbuo
}

// ClearInvoiceNumber clears the value of the "invoice_number" field.
func (tbuo *TenantBillingUpdateOne) ClearInvoiceNumber() *TenantBillingUpdateOne {
	tbuo.mutation.ClearInvoiceNumber()
	return tbuo
}

// SetPaymentMethod sets the "payment_method" field.
func (tbuo *TenantBillingUpdateOne) SetPaymentMethod(s string) *TenantBillingUpdateOne {
	tbuo.mutation.SetPaymentMethod(s)
	return tbuo
}

// SetNillablePaymentMethod sets the "payment_method" field if the given value is not nil.
func (tbuo *TenantBillingUpdateOne) SetNillablePaymentMethod(s *string) *TenantBillingUpdateOne {
	if s != nil {
		tbuo.SetPaymentMethod(*s)
	}
	return tbuo
}

// ClearPaymentMethod clears the value of the "payment_method" field.
func (tbuo *TenantBillingUpdateOne) ClearPaymentMethod() *TenantBillingUpdateOne {
	tbuo.mutation.ClearPaymentMethod()
	return tbuo
}

// SetPaidAt sets the "paid_at" field.
func (tbuo *TenantBillingUpdateOne) SetPaidAt(i int64) *TenantBillingUpdateOne {
	tbuo.mutation.ResetPaidAt()
	tbuo.mutation.SetPaidAt(i)
	return tbuo
}

// SetNillablePaidAt sets the "paid_at" field if the given value is not nil.
func (tbuo *TenantBillingUpdateOne) SetNillablePaidAt(i *int64) *TenantBillingUpdateOne {
	if i != nil {
		tbuo.SetPaidAt(*i)
	}
	return tbuo
}

// AddPaidAt adds i to the "paid_at" field.
func (tbuo *TenantBillingUpdateOne) AddPaidAt(i int64) *TenantBillingUpdateOne {
	tbuo.mutation.AddPaidAt(i)
	return tbuo
}

// ClearPaidAt clears the value of the "paid_at" field.
func (tbuo *TenantBillingUpdateOne) ClearPaidAt() *TenantBillingUpdateOne {
	tbuo.mutation.ClearPaidAt()
	return tbuo
}

// SetDueDate sets the "due_date" field.
func (tbuo *TenantBillingUpdateOne) SetDueDate(i int64) *TenantBillingUpdateOne {
	tbuo.mutation.ResetDueDate()
	tbuo.mutation.SetDueDate(i)
	return tbuo
}

// SetNillableDueDate sets the "due_date" field if the given value is not nil.
func (tbuo *TenantBillingUpdateOne) SetNillableDueDate(i *int64) *TenantBillingUpdateOne {
	if i != nil {
		tbuo.SetDueDate(*i)
	}
	return tbuo
}

// AddDueDate adds i to the "due_date" field.
func (tbuo *TenantBillingUpdateOne) AddDueDate(i int64) *TenantBillingUpdateOne {
	tbuo.mutation.AddDueDate(i)
	return tbuo
}

// ClearDueDate clears the value of the "due_date" field.
func (tbuo *TenantBillingUpdateOne) ClearDueDate() *TenantBillingUpdateOne {
	tbuo.mutation.ClearDueDate()
	return tbuo
}

// SetUsageDetails sets the "usage_details" field.
func (tbuo *TenantBillingUpdateOne) SetUsageDetails(m map[string]interface{}) *TenantBillingUpdateOne {
	tbuo.mutation.SetUsageDetails(m)
	return tbuo
}

// ClearUsageDetails clears the value of the "usage_details" field.
func (tbuo *TenantBillingUpdateOne) ClearUsageDetails() *TenantBillingUpdateOne {
	tbuo.mutation.ClearUsageDetails()
	return tbuo
}

// Mutation returns the TenantBillingMutation object of the builder.
func (tbuo *TenantBillingUpdateOne) Mutation() *TenantBillingMutation {
	return tbuo.mutation
}

// Where appends a list predicates to the TenantBillingUpdate builder.
func (tbuo *TenantBillingUpdateOne) Where(ps ...predicate.TenantBilling) *TenantBillingUpdateOne {
	tbuo.mutation.Where(ps...)
	return tbuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tbuo *TenantBillingUpdateOne) Select(field string, fields ...string) *TenantBillingUpdateOne {
	tbuo.fields = append([]string{field}, fields...)
	return tbuo
}

// Save executes the query and returns the updated TenantBilling entity.
func (tbuo *TenantBillingUpdateOne) Save(ctx context.Context) (*TenantBilling, error) {
	tbuo.defaults()
	return withHooks(ctx, tbuo.sqlSave, tbuo.mutation, tbuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tbuo *TenantBillingUpdateOne) SaveX(ctx context.Context) *TenantBilling {
	node, err := tbuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tbuo *TenantBillingUpdateOne) Exec(ctx context.Context) error {
	_, err := tbuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tbuo *TenantBillingUpdateOne) ExecX(ctx context.Context) {
	if err := tbuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tbuo *TenantBillingUpdateOne) defaults() {
	if _, ok := tbuo.mutation.UpdatedAt(); !ok && !tbuo.mutation.UpdatedAtCleared() {
		v := tenantbilling.UpdateDefaultUpdatedAt()
		tbuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tbuo *TenantBillingUpdateOne) check() error {
	if v, ok := tbuo.mutation.TenantID(); ok {
		if err := tenantbilling.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "TenantBilling.tenant_id": %w`, err)}
		}
	}
	if v, ok := tbuo.mutation.CreatedBy(); ok {
		if err := tenantbilling.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "TenantBilling.created_by": %w`, err)}
		}
	}
	if v, ok := tbuo.mutation.UpdatedBy(); ok {
		if err := tenantbilling.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "TenantBilling.updated_by": %w`, err)}
		}
	}
	if v, ok := tbuo.mutation.Amount(); ok {
		if err := tenantbilling.AmountValidator(v); err != nil {
			return &ValidationError{Name: "amount", err: fmt.Errorf(`ent: validator failed for field "TenantBilling.amount": %w`, err)}
		}
	}
	return nil
}

func (tbuo *TenantBillingUpdateOne) sqlSave(ctx context.Context) (_node *TenantBilling, err error) {
	if err := tbuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(tenantbilling.Table, tenantbilling.Columns, sqlgraph.NewFieldSpec(tenantbilling.FieldID, field.TypeString))
	id, ok := tbuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TenantBilling.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tbuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tenantbilling.FieldID)
		for _, f := range fields {
			if !tenantbilling.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tenantbilling.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tbuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tbuo.mutation.TenantID(); ok {
		_spec.SetField(tenantbilling.FieldTenantID, field.TypeString, value)
	}
	if tbuo.mutation.TenantIDCleared() {
		_spec.ClearField(tenantbilling.FieldTenantID, field.TypeString)
	}
	if value, ok := tbuo.mutation.Description(); ok {
		_spec.SetField(tenantbilling.FieldDescription, field.TypeString, value)
	}
	if tbuo.mutation.DescriptionCleared() {
		_spec.ClearField(tenantbilling.FieldDescription, field.TypeString)
	}
	if value, ok := tbuo.mutation.Extras(); ok {
		_spec.SetField(tenantbilling.FieldExtras, field.TypeJSON, value)
	}
	if tbuo.mutation.ExtrasCleared() {
		_spec.ClearField(tenantbilling.FieldExtras, field.TypeJSON)
	}
	if value, ok := tbuo.mutation.CreatedBy(); ok {
		_spec.SetField(tenantbilling.FieldCreatedBy, field.TypeString, value)
	}
	if tbuo.mutation.CreatedByCleared() {
		_spec.ClearField(tenantbilling.FieldCreatedBy, field.TypeString)
	}
	if value, ok := tbuo.mutation.UpdatedBy(); ok {
		_spec.SetField(tenantbilling.FieldUpdatedBy, field.TypeString, value)
	}
	if tbuo.mutation.UpdatedByCleared() {
		_spec.ClearField(tenantbilling.FieldUpdatedBy, field.TypeString)
	}
	if tbuo.mutation.CreatedAtCleared() {
		_spec.ClearField(tenantbilling.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := tbuo.mutation.UpdatedAt(); ok {
		_spec.SetField(tenantbilling.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := tbuo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(tenantbilling.FieldUpdatedAt, field.TypeInt64, value)
	}
	if tbuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(tenantbilling.FieldUpdatedAt, field.TypeInt64)
	}
	if value, ok := tbuo.mutation.BillingPeriod(); ok {
		_spec.SetField(tenantbilling.FieldBillingPeriod, field.TypeString, value)
	}
	if value, ok := tbuo.mutation.PeriodStart(); ok {
		_spec.SetField(tenantbilling.FieldPeriodStart, field.TypeInt64, value)
	}
	if value, ok := tbuo.mutation.AddedPeriodStart(); ok {
		_spec.AddField(tenantbilling.FieldPeriodStart, field.TypeInt64, value)
	}
	if tbuo.mutation.PeriodStartCleared() {
		_spec.ClearField(tenantbilling.FieldPeriodStart, field.TypeInt64)
	}
	if value, ok := tbuo.mutation.PeriodEnd(); ok {
		_spec.SetField(tenantbilling.FieldPeriodEnd, field.TypeInt64, value)
	}
	if value, ok := tbuo.mutation.AddedPeriodEnd(); ok {
		_spec.AddField(tenantbilling.FieldPeriodEnd, field.TypeInt64, value)
	}
	if tbuo.mutation.PeriodEndCleared() {
		_spec.ClearField(tenantbilling.FieldPeriodEnd, field.TypeInt64)
	}
	if value, ok := tbuo.mutation.Amount(); ok {
		_spec.SetField(tenantbilling.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := tbuo.mutation.AddedAmount(); ok {
		_spec.AddField(tenantbilling.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := tbuo.mutation.Currency(); ok {
		_spec.SetField(tenantbilling.FieldCurrency, field.TypeString, value)
	}
	if value, ok := tbuo.mutation.Status(); ok {
		_spec.SetField(tenantbilling.FieldStatus, field.TypeString, value)
	}
	if value, ok := tbuo.mutation.InvoiceNumber(); ok {
		_spec.SetField(tenantbilling.FieldInvoiceNumber, field.TypeString, value)
	}
	if tbuo.mutation.InvoiceNumberCleared() {
		_spec.ClearField(tenantbilling.FieldInvoiceNumber, field.TypeString)
	}
	if value, ok := tbuo.mutation.PaymentMethod(); ok {
		_spec.SetField(tenantbilling.FieldPaymentMethod, field.TypeString, value)
	}
	if tbuo.mutation.PaymentMethodCleared() {
		_spec.ClearField(tenantbilling.FieldPaymentMethod, field.TypeString)
	}
	if value, ok := tbuo.mutation.PaidAt(); ok {
		_spec.SetField(tenantbilling.FieldPaidAt, field.TypeInt64, value)
	}
	if value, ok := tbuo.mutation.AddedPaidAt(); ok {
		_spec.AddField(tenantbilling.FieldPaidAt, field.TypeInt64, value)
	}
	if tbuo.mutation.PaidAtCleared() {
		_spec.ClearField(tenantbilling.FieldPaidAt, field.TypeInt64)
	}
	if value, ok := tbuo.mutation.DueDate(); ok {
		_spec.SetField(tenantbilling.FieldDueDate, field.TypeInt64, value)
	}
	if value, ok := tbuo.mutation.AddedDueDate(); ok {
		_spec.AddField(tenantbilling.FieldDueDate, field.TypeInt64, value)
	}
	if tbuo.mutation.DueDateCleared() {
		_spec.ClearField(tenantbilling.FieldDueDate, field.TypeInt64)
	}
	if value, ok := tbuo.mutation.UsageDetails(); ok {
		_spec.SetField(tenantbilling.FieldUsageDetails, field.TypeJSON, value)
	}
	if tbuo.mutation.UsageDetailsCleared() {
		_spec.ClearField(tenantbilling.FieldUsageDetails, field.TypeJSON)
	}
	_node = &TenantBilling{config: tbuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tbuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tenantbilling.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tbuo.mutation.done = true
	return _node, nil
}
