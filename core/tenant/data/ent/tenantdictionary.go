// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"ncobase/tenant/data/ent/tenantdictionary"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// TenantDictionary is the model entity for the TenantDictionary schema.
type TenantDictionary struct {
	config `json:"-"`
	// ID of the ent.
	// primary key
	ID string `json:"id,omitempty"`
	// tenant id
	TenantID string `json:"tenant_id,omitempty"`
	// dictionary id
	DictionaryID string `json:"dictionary_id,omitempty"`
	// id of the creator
	CreatedBy string `json:"created_by,omitempty"`
	// id of the last updater
	UpdatedBy string `json:"updated_by,omitempty"`
	// created at
	CreatedAt int64 `json:"created_at,omitempty"`
	// updated at
	UpdatedAt    int64 `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TenantDictionary) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case tenantdictionary.FieldCreatedAt, tenantdictionary.FieldUpdatedAt:
			values[i] = new(sql.NullInt64)
		case tenantdictionary.FieldID, tenantdictionary.FieldTenantID, tenantdictionary.FieldDictionaryID, tenantdictionary.FieldCreatedBy, tenantdictionary.FieldUpdatedBy:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TenantDictionary fields.
func (td *TenantDictionary) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tenantdictionary.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				td.ID = value.String
			}
		case tenantdictionary.FieldTenantID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				td.TenantID = value.String
			}
		case tenantdictionary.FieldDictionaryID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field dictionary_id", values[i])
			} else if value.Valid {
				td.DictionaryID = value.String
			}
		case tenantdictionary.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				td.CreatedBy = value.String
			}
		case tenantdictionary.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				td.UpdatedBy = value.String
			}
		case tenantdictionary.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				td.CreatedAt = value.Int64
			}
		case tenantdictionary.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				td.UpdatedAt = value.Int64
			}
		default:
			td.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TenantDictionary.
// This includes values selected through modifiers, order, etc.
func (td *TenantDictionary) Value(name string) (ent.Value, error) {
	return td.selectValues.Get(name)
}

// Update returns a builder for updating this TenantDictionary.
// Note that you need to call TenantDictionary.Unwrap() before calling this method if this TenantDictionary
// was returned from a transaction, and the transaction was committed or rolled back.
func (td *TenantDictionary) Update() *TenantDictionaryUpdateOne {
	return NewTenantDictionaryClient(td.config).UpdateOne(td)
}

// Unwrap unwraps the TenantDictionary entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (td *TenantDictionary) Unwrap() *TenantDictionary {
	_tx, ok := td.config.driver.(*txDriver)
	if !ok {
		panic("ent: TenantDictionary is not a transactional entity")
	}
	td.config.driver = _tx.drv
	return td
}

// String implements the fmt.Stringer.
func (td *TenantDictionary) String() string {
	var builder strings.Builder
	builder.WriteString("TenantDictionary(")
	builder.WriteString(fmt.Sprintf("id=%v, ", td.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(td.TenantID)
	builder.WriteString(", ")
	builder.WriteString("dictionary_id=")
	builder.WriteString(td.DictionaryID)
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(td.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(td.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", td.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", td.UpdatedAt))
	builder.WriteByte(')')
	return builder.String()
}

// TenantDictionaries is a parsable slice of TenantDictionary.
type TenantDictionaries []*TenantDictionary
