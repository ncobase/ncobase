// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"ncobase/tenant/data/ent/tenantdictionary"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TenantDictionaryCreate is the builder for creating a TenantDictionary entity.
type TenantDictionaryCreate struct {
	config
	mutation *TenantDictionaryMutation
	hooks    []Hook
}

// SetTenantID sets the "tenant_id" field.
func (tdc *TenantDictionaryCreate) SetTenantID(s string) *TenantDictionaryCreate {
	tdc.mutation.SetTenantID(s)
	return tdc
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (tdc *TenantDictionaryCreate) SetNillableTenantID(s *string) *TenantDictionaryCreate {
	if s != nil {
		tdc.SetTenantID(*s)
	}
	return tdc
}

// SetDictionaryID sets the "dictionary_id" field.
func (tdc *TenantDictionaryCreate) SetDictionaryID(s string) *TenantDictionaryCreate {
	tdc.mutation.SetDictionaryID(s)
	return tdc
}

// SetNillableDictionaryID sets the "dictionary_id" field if the given value is not nil.
func (tdc *TenantDictionaryCreate) SetNillableDictionaryID(s *string) *TenantDictionaryCreate {
	if s != nil {
		tdc.SetDictionaryID(*s)
	}
	return tdc
}

// SetCreatedBy sets the "created_by" field.
func (tdc *TenantDictionaryCreate) SetCreatedBy(s string) *TenantDictionaryCreate {
	tdc.mutation.SetCreatedBy(s)
	return tdc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (tdc *TenantDictionaryCreate) SetNillableCreatedBy(s *string) *TenantDictionaryCreate {
	if s != nil {
		tdc.SetCreatedBy(*s)
	}
	return tdc
}

// SetUpdatedBy sets the "updated_by" field.
func (tdc *TenantDictionaryCreate) SetUpdatedBy(s string) *TenantDictionaryCreate {
	tdc.mutation.SetUpdatedBy(s)
	return tdc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (tdc *TenantDictionaryCreate) SetNillableUpdatedBy(s *string) *TenantDictionaryCreate {
	if s != nil {
		tdc.SetUpdatedBy(*s)
	}
	return tdc
}

// SetCreatedAt sets the "created_at" field.
func (tdc *TenantDictionaryCreate) SetCreatedAt(i int64) *TenantDictionaryCreate {
	tdc.mutation.SetCreatedAt(i)
	return tdc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tdc *TenantDictionaryCreate) SetNillableCreatedAt(i *int64) *TenantDictionaryCreate {
	if i != nil {
		tdc.SetCreatedAt(*i)
	}
	return tdc
}

// SetUpdatedAt sets the "updated_at" field.
func (tdc *TenantDictionaryCreate) SetUpdatedAt(i int64) *TenantDictionaryCreate {
	tdc.mutation.SetUpdatedAt(i)
	return tdc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tdc *TenantDictionaryCreate) SetNillableUpdatedAt(i *int64) *TenantDictionaryCreate {
	if i != nil {
		tdc.SetUpdatedAt(*i)
	}
	return tdc
}

// SetID sets the "id" field.
func (tdc *TenantDictionaryCreate) SetID(s string) *TenantDictionaryCreate {
	tdc.mutation.SetID(s)
	return tdc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (tdc *TenantDictionaryCreate) SetNillableID(s *string) *TenantDictionaryCreate {
	if s != nil {
		tdc.SetID(*s)
	}
	return tdc
}

// Mutation returns the TenantDictionaryMutation object of the builder.
func (tdc *TenantDictionaryCreate) Mutation() *TenantDictionaryMutation {
	return tdc.mutation
}

// Save creates the TenantDictionary in the database.
func (tdc *TenantDictionaryCreate) Save(ctx context.Context) (*TenantDictionary, error) {
	tdc.defaults()
	return withHooks(ctx, tdc.sqlSave, tdc.mutation, tdc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tdc *TenantDictionaryCreate) SaveX(ctx context.Context) *TenantDictionary {
	v, err := tdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tdc *TenantDictionaryCreate) Exec(ctx context.Context) error {
	_, err := tdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tdc *TenantDictionaryCreate) ExecX(ctx context.Context) {
	if err := tdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tdc *TenantDictionaryCreate) defaults() {
	if _, ok := tdc.mutation.CreatedAt(); !ok {
		v := tenantdictionary.DefaultCreatedAt()
		tdc.mutation.SetCreatedAt(v)
	}
	if _, ok := tdc.mutation.UpdatedAt(); !ok {
		v := tenantdictionary.DefaultUpdatedAt()
		tdc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tdc.mutation.ID(); !ok {
		v := tenantdictionary.DefaultID()
		tdc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tdc *TenantDictionaryCreate) check() error {
	if v, ok := tdc.mutation.ID(); ok {
		if err := tenantdictionary.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "TenantDictionary.id": %w`, err)}
		}
	}
	return nil
}

func (tdc *TenantDictionaryCreate) sqlSave(ctx context.Context) (*TenantDictionary, error) {
	if err := tdc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected TenantDictionary.ID type: %T", _spec.ID.Value)
		}
	}
	tdc.mutation.id = &_node.ID
	tdc.mutation.done = true
	return _node, nil
}

func (tdc *TenantDictionaryCreate) createSpec() (*TenantDictionary, *sqlgraph.CreateSpec) {
	var (
		_node = &TenantDictionary{config: tdc.config}
		_spec = sqlgraph.NewCreateSpec(tenantdictionary.Table, sqlgraph.NewFieldSpec(tenantdictionary.FieldID, field.TypeString))
	)
	if id, ok := tdc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tdc.mutation.TenantID(); ok {
		_spec.SetField(tenantdictionary.FieldTenantID, field.TypeString, value)
		_node.TenantID = value
	}
	if value, ok := tdc.mutation.DictionaryID(); ok {
		_spec.SetField(tenantdictionary.FieldDictionaryID, field.TypeString, value)
		_node.DictionaryID = value
	}
	if value, ok := tdc.mutation.CreatedBy(); ok {
		_spec.SetField(tenantdictionary.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := tdc.mutation.UpdatedBy(); ok {
		_spec.SetField(tenantdictionary.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := tdc.mutation.CreatedAt(); ok {
		_spec.SetField(tenantdictionary.FieldCreatedAt, field.TypeInt64, value)
		_node.CreatedAt = value
	}
	if value, ok := tdc.mutation.UpdatedAt(); ok {
		_spec.SetField(tenantdictionary.FieldUpdatedAt, field.TypeInt64, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// TenantDictionaryCreateBulk is the builder for creating many TenantDictionary entities in bulk.
type TenantDictionaryCreateBulk struct {
	config
	err      error
	builders []*TenantDictionaryCreate
}

// Save creates the TenantDictionary entities in the database.
func (tdcb *TenantDictionaryCreateBulk) Save(ctx context.Context) ([]*TenantDictionary, error) {
	if tdcb.err != nil {
		return nil, tdcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tdcb.builders))
	nodes := make([]*TenantDictionary, len(tdcb.builders))
	mutators := make([]Mutator, len(tdcb.builders))
	for i := range tdcb.builders {
		func(i int, root context.Context) {
			builder := tdcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TenantDictionaryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tdcb *TenantDictionaryCreateBulk) SaveX(ctx context.Context) []*TenantDictionary {
	v, err := tdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tdcb *TenantDictionaryCreateBulk) Exec(ctx context.Context) error {
	_, err := tdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tdcb *TenantDictionaryCreateBulk) ExecX(ctx context.Context) {
	if err := tdcb.Exec(ctx); err != nil {
		panic(err)
	}
}
