// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/tenant/data/ent/predicate"
	"ncobase/tenant/data/ent/tenantdictionary"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TenantDictionaryUpdate is the builder for updating TenantDictionary entities.
type TenantDictionaryUpdate struct {
	config
	hooks    []Hook
	mutation *TenantDictionaryMutation
}

// Where appends a list predicates to the TenantDictionaryUpdate builder.
func (tdu *TenantDictionaryUpdate) Where(ps ...predicate.TenantDictionary) *TenantDictionaryUpdate {
	tdu.mutation.Where(ps...)
	return tdu
}

// SetTenantID sets the "tenant_id" field.
func (tdu *TenantDictionaryUpdate) SetTenantID(s string) *TenantDictionaryUpdate {
	tdu.mutation.SetTenantID(s)
	return tdu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (tdu *TenantDictionaryUpdate) SetNillableTenantID(s *string) *TenantDictionaryUpdate {
	if s != nil {
		tdu.SetTenantID(*s)
	}
	return tdu
}

// ClearTenantID clears the value of the "tenant_id" field.
func (tdu *TenantDictionaryUpdate) ClearTenantID() *TenantDictionaryUpdate {
	tdu.mutation.ClearTenantID()
	return tdu
}

// SetDictionaryID sets the "dictionary_id" field.
func (tdu *TenantDictionaryUpdate) SetDictionaryID(s string) *TenantDictionaryUpdate {
	tdu.mutation.SetDictionaryID(s)
	return tdu
}

// SetNillableDictionaryID sets the "dictionary_id" field if the given value is not nil.
func (tdu *TenantDictionaryUpdate) SetNillableDictionaryID(s *string) *TenantDictionaryUpdate {
	if s != nil {
		tdu.SetDictionaryID(*s)
	}
	return tdu
}

// ClearDictionaryID clears the value of the "dictionary_id" field.
func (tdu *TenantDictionaryUpdate) ClearDictionaryID() *TenantDictionaryUpdate {
	tdu.mutation.ClearDictionaryID()
	return tdu
}

// SetCreatedBy sets the "created_by" field.
func (tdu *TenantDictionaryUpdate) SetCreatedBy(s string) *TenantDictionaryUpdate {
	tdu.mutation.SetCreatedBy(s)
	return tdu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (tdu *TenantDictionaryUpdate) SetNillableCreatedBy(s *string) *TenantDictionaryUpdate {
	if s != nil {
		tdu.SetCreatedBy(*s)
	}
	return tdu
}

// ClearCreatedBy clears the value of the "created_by" field.
func (tdu *TenantDictionaryUpdate) ClearCreatedBy() *TenantDictionaryUpdate {
	tdu.mutation.ClearCreatedBy()
	return tdu
}

// SetUpdatedBy sets the "updated_by" field.
func (tdu *TenantDictionaryUpdate) SetUpdatedBy(s string) *TenantDictionaryUpdate {
	tdu.mutation.SetUpdatedBy(s)
	return tdu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (tdu *TenantDictionaryUpdate) SetNillableUpdatedBy(s *string) *TenantDictionaryUpdate {
	if s != nil {
		tdu.SetUpdatedBy(*s)
	}
	return tdu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (tdu *TenantDictionaryUpdate) ClearUpdatedBy() *TenantDictionaryUpdate {
	tdu.mutation.ClearUpdatedBy()
	return tdu
}

// SetUpdatedAt sets the "updated_at" field.
func (tdu *TenantDictionaryUpdate) SetUpdatedAt(i int64) *TenantDictionaryUpdate {
	tdu.mutation.ResetUpdatedAt()
	tdu.mutation.SetUpdatedAt(i)
	return tdu
}

// AddUpdatedAt adds i to the "updated_at" field.
func (tdu *TenantDictionaryUpdate) AddUpdatedAt(i int64) *TenantDictionaryUpdate {
	tdu.mutation.AddUpdatedAt(i)
	return tdu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tdu *TenantDictionaryUpdate) ClearUpdatedAt() *TenantDictionaryUpdate {
	tdu.mutation.ClearUpdatedAt()
	return tdu
}

// Mutation returns the TenantDictionaryMutation object of the builder.
func (tdu *TenantDictionaryUpdate) Mutation() *TenantDictionaryMutation {
	return tdu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tdu *TenantDictionaryUpdate) Save(ctx context.Context) (int, error) {
	tdu.defaults()
	return withHooks(ctx, tdu.sqlSave, tdu.mutation, tdu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tdu *TenantDictionaryUpdate) SaveX(ctx context.Context) int {
	affected, err := tdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tdu *TenantDictionaryUpdate) Exec(ctx context.Context) error {
	_, err := tdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tdu *TenantDictionaryUpdate) ExecX(ctx context.Context) {
	if err := tdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tdu *TenantDictionaryUpdate) defaults() {
	if _, ok := tdu.mutation.UpdatedAt(); !ok && !tdu.mutation.UpdatedAtCleared() {
		v := tenantdictionary.UpdateDefaultUpdatedAt()
		tdu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tdu *TenantDictionaryUpdate) check() error {
	if v, ok := tdu.mutation.TenantID(); ok {
		if err := tenantdictionary.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "TenantDictionary.tenant_id": %w`, err)}
		}
	}
	if v, ok := tdu.mutation.DictionaryID(); ok {
		if err := tenantdictionary.DictionaryIDValidator(v); err != nil {
			return &ValidationError{Name: "dictionary_id", err: fmt.Errorf(`ent: validator failed for field "TenantDictionary.dictionary_id": %w`, err)}
		}
	}
	if v, ok := tdu.mutation.CreatedBy(); ok {
		if err := tenantdictionary.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "TenantDictionary.created_by": %w`, err)}
		}
	}
	if v, ok := tdu.mutation.UpdatedBy(); ok {
		if err := tenantdictionary.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "TenantDictionary.updated_by": %w`, err)}
		}
	}
	return nil
}

func (tdu *TenantDictionaryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tdu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(tenantdictionary.Table, tenantdictionary.Columns, sqlgraph.NewFieldSpec(tenantdictionary.FieldID, field.TypeString))
	if ps := tdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tdu.mutation.TenantID(); ok {
		_spec.SetField(tenantdictionary.FieldTenantID, field.TypeString, value)
	}
	if tdu.mutation.TenantIDCleared() {
		_spec.ClearField(tenantdictionary.FieldTenantID, field.TypeString)
	}
	if value, ok := tdu.mutation.DictionaryID(); ok {
		_spec.SetField(tenantdictionary.FieldDictionaryID, field.TypeString, value)
	}
	if tdu.mutation.DictionaryIDCleared() {
		_spec.ClearField(tenantdictionary.FieldDictionaryID, field.TypeString)
	}
	if value, ok := tdu.mutation.CreatedBy(); ok {
		_spec.SetField(tenantdictionary.FieldCreatedBy, field.TypeString, value)
	}
	if tdu.mutation.CreatedByCleared() {
		_spec.ClearField(tenantdictionary.FieldCreatedBy, field.TypeString)
	}
	if value, ok := tdu.mutation.UpdatedBy(); ok {
		_spec.SetField(tenantdictionary.FieldUpdatedBy, field.TypeString, value)
	}
	if tdu.mutation.UpdatedByCleared() {
		_spec.ClearField(tenantdictionary.FieldUpdatedBy, field.TypeString)
	}
	if tdu.mutation.CreatedAtCleared() {
		_spec.ClearField(tenantdictionary.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := tdu.mutation.UpdatedAt(); ok {
		_spec.SetField(tenantdictionary.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := tdu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(tenantdictionary.FieldUpdatedAt, field.TypeInt64, value)
	}
	if tdu.mutation.UpdatedAtCleared() {
		_spec.ClearField(tenantdictionary.FieldUpdatedAt, field.TypeInt64)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tenantdictionary.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tdu.mutation.done = true
	return n, nil
}

// TenantDictionaryUpdateOne is the builder for updating a single TenantDictionary entity.
type TenantDictionaryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TenantDictionaryMutation
}

// SetTenantID sets the "tenant_id" field.
func (tduo *TenantDictionaryUpdateOne) SetTenantID(s string) *TenantDictionaryUpdateOne {
	tduo.mutation.SetTenantID(s)
	return tduo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (tduo *TenantDictionaryUpdateOne) SetNillableTenantID(s *string) *TenantDictionaryUpdateOne {
	if s != nil {
		tduo.SetTenantID(*s)
	}
	return tduo
}

// ClearTenantID clears the value of the "tenant_id" field.
func (tduo *TenantDictionaryUpdateOne) ClearTenantID() *TenantDictionaryUpdateOne {
	tduo.mutation.ClearTenantID()
	return tduo
}

// SetDictionaryID sets the "dictionary_id" field.
func (tduo *TenantDictionaryUpdateOne) SetDictionaryID(s string) *TenantDictionaryUpdateOne {
	tduo.mutation.SetDictionaryID(s)
	return tduo
}

// SetNillableDictionaryID sets the "dictionary_id" field if the given value is not nil.
func (tduo *TenantDictionaryUpdateOne) SetNillableDictionaryID(s *string) *TenantDictionaryUpdateOne {
	if s != nil {
		tduo.SetDictionaryID(*s)
	}
	return tduo
}

// ClearDictionaryID clears the value of the "dictionary_id" field.
func (tduo *TenantDictionaryUpdateOne) ClearDictionaryID() *TenantDictionaryUpdateOne {
	tduo.mutation.ClearDictionaryID()
	return tduo
}

// SetCreatedBy sets the "created_by" field.
func (tduo *TenantDictionaryUpdateOne) SetCreatedBy(s string) *TenantDictionaryUpdateOne {
	tduo.mutation.SetCreatedBy(s)
	return tduo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (tduo *TenantDictionaryUpdateOne) SetNillableCreatedBy(s *string) *TenantDictionaryUpdateOne {
	if s != nil {
		tduo.SetCreatedBy(*s)
	}
	return tduo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (tduo *TenantDictionaryUpdateOne) ClearCreatedBy() *TenantDictionaryUpdateOne {
	tduo.mutation.ClearCreatedBy()
	return tduo
}

// SetUpdatedBy sets the "updated_by" field.
func (tduo *TenantDictionaryUpdateOne) SetUpdatedBy(s string) *TenantDictionaryUpdateOne {
	tduo.mutation.SetUpdatedBy(s)
	return tduo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (tduo *TenantDictionaryUpdateOne) SetNillableUpdatedBy(s *string) *TenantDictionaryUpdateOne {
	if s != nil {
		tduo.SetUpdatedBy(*s)
	}
	return tduo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (tduo *TenantDictionaryUpdateOne) ClearUpdatedBy() *TenantDictionaryUpdateOne {
	tduo.mutation.ClearUpdatedBy()
	return tduo
}

// SetUpdatedAt sets the "updated_at" field.
func (tduo *TenantDictionaryUpdateOne) SetUpdatedAt(i int64) *TenantDictionaryUpdateOne {
	tduo.mutation.ResetUpdatedAt()
	tduo.mutation.SetUpdatedAt(i)
	return tduo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (tduo *TenantDictionaryUpdateOne) AddUpdatedAt(i int64) *TenantDictionaryUpdateOne {
	tduo.mutation.AddUpdatedAt(i)
	return tduo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tduo *TenantDictionaryUpdateOne) ClearUpdatedAt() *TenantDictionaryUpdateOne {
	tduo.mutation.ClearUpdatedAt()
	return tduo
}

// Mutation returns the TenantDictionaryMutation object of the builder.
func (tduo *TenantDictionaryUpdateOne) Mutation() *TenantDictionaryMutation {
	return tduo.mutation
}

// Where appends a list predicates to the TenantDictionaryUpdate builder.
func (tduo *TenantDictionaryUpdateOne) Where(ps ...predicate.TenantDictionary) *TenantDictionaryUpdateOne {
	tduo.mutation.Where(ps...)
	return tduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tduo *TenantDictionaryUpdateOne) Select(field string, fields ...string) *TenantDictionaryUpdateOne {
	tduo.fields = append([]string{field}, fields...)
	return tduo
}

// Save executes the query and returns the updated TenantDictionary entity.
func (tduo *TenantDictionaryUpdateOne) Save(ctx context.Context) (*TenantDictionary, error) {
	tduo.defaults()
	return withHooks(ctx, tduo.sqlSave, tduo.mutation, tduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tduo *TenantDictionaryUpdateOne) SaveX(ctx context.Context) *TenantDictionary {
	node, err := tduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tduo *TenantDictionaryUpdateOne) Exec(ctx context.Context) error {
	_, err := tduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tduo *TenantDictionaryUpdateOne) ExecX(ctx context.Context) {
	if err := tduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tduo *TenantDictionaryUpdateOne) defaults() {
	if _, ok := tduo.mutation.UpdatedAt(); !ok && !tduo.mutation.UpdatedAtCleared() {
		v := tenantdictionary.UpdateDefaultUpdatedAt()
		tduo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tduo *TenantDictionaryUpdateOne) check() error {
	if v, ok := tduo.mutation.TenantID(); ok {
		if err := tenantdictionary.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "TenantDictionary.tenant_id": %w`, err)}
		}
	}
	if v, ok := tduo.mutation.DictionaryID(); ok {
		if err := tenantdictionary.DictionaryIDValidator(v); err != nil {
			return &ValidationError{Name: "dictionary_id", err: fmt.Errorf(`ent: validator failed for field "TenantDictionary.dictionary_id": %w`, err)}
		}
	}
	if v, ok := tduo.mutation.CreatedBy(); ok {
		if err := tenantdictionary.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "TenantDictionary.created_by": %w`, err)}
		}
	}
	if v, ok := tduo.mutation.UpdatedBy(); ok {
		if err := tenantdictionary.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "TenantDictionary.updated_by": %w`, err)}
		}
	}
	return nil
}

func (tduo *TenantDictionaryUpdateOne) sqlSave(ctx context.Context) (_node *TenantDictionary, err error) {
	if err := tduo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(tenantdictionary.Table, tenantdictionary.Columns, sqlgraph.NewFieldSpec(tenantdictionary.FieldID, field.TypeString))
	id, ok := tduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TenantDictionary.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tenantdictionary.FieldID)
		for _, f := range fields {
			if !tenantdictionary.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tenantdictionary.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tduo.mutation.TenantID(); ok {
		_spec.SetField(tenantdictionary.FieldTenantID, field.TypeString, value)
	}
	if tduo.mutation.TenantIDCleared() {
		_spec.ClearField(tenantdictionary.FieldTenantID, field.TypeString)
	}
	if value, ok := tduo.mutation.DictionaryID(); ok {
		_spec.SetField(tenantdictionary.FieldDictionaryID, field.TypeString, value)
	}
	if tduo.mutation.DictionaryIDCleared() {
		_spec.ClearField(tenantdictionary.FieldDictionaryID, field.TypeString)
	}
	if value, ok := tduo.mutation.CreatedBy(); ok {
		_spec.SetField(tenantdictionary.FieldCreatedBy, field.TypeString, value)
	}
	if tduo.mutation.CreatedByCleared() {
		_spec.ClearField(tenantdictionary.FieldCreatedBy, field.TypeString)
	}
	if value, ok := tduo.mutation.UpdatedBy(); ok {
		_spec.SetField(tenantdictionary.FieldUpdatedBy, field.TypeString, value)
	}
	if tduo.mutation.UpdatedByCleared() {
		_spec.ClearField(tenantdictionary.FieldUpdatedBy, field.TypeString)
	}
	if tduo.mutation.CreatedAtCleared() {
		_spec.ClearField(tenantdictionary.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := tduo.mutation.UpdatedAt(); ok {
		_spec.SetField(tenantdictionary.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := tduo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(tenantdictionary.FieldUpdatedAt, field.TypeInt64, value)
	}
	if tduo.mutation.UpdatedAtCleared() {
		_spec.ClearField(tenantdictionary.FieldUpdatedAt, field.TypeInt64)
	}
	_node = &TenantDictionary{config: tduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tenantdictionary.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tduo.mutation.done = true
	return _node, nil
}
