// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/tenant/data/ent/tenantgroup"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TenantGroupCreate is the builder for creating a TenantGroup entity.
type TenantGroupCreate struct {
	config
	mutation *TenantGroupMutation
	hooks    []Hook
}

// SetTenantID sets the "tenant_id" field.
func (tgc *TenantGroupCreate) SetTenantID(s string) *TenantGroupCreate {
	tgc.mutation.SetTenantID(s)
	return tgc
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (tgc *TenantGroupCreate) SetNillableTenantID(s *string) *TenantGroupCreate {
	if s != nil {
		tgc.SetTenantID(*s)
	}
	return tgc
}

// SetGroupID sets the "group_id" field.
func (tgc *TenantGroupCreate) SetGroupID(s string) *TenantGroupCreate {
	tgc.mutation.SetGroupID(s)
	return tgc
}

// SetNillableGroupID sets the "group_id" field if the given value is not nil.
func (tgc *TenantGroupCreate) SetNillableGroupID(s *string) *TenantGroupCreate {
	if s != nil {
		tgc.SetGroupID(*s)
	}
	return tgc
}

// SetCreatedBy sets the "created_by" field.
func (tgc *TenantGroupCreate) SetCreatedBy(s string) *TenantGroupCreate {
	tgc.mutation.SetCreatedBy(s)
	return tgc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (tgc *TenantGroupCreate) SetNillableCreatedBy(s *string) *TenantGroupCreate {
	if s != nil {
		tgc.SetCreatedBy(*s)
	}
	return tgc
}

// SetUpdatedBy sets the "updated_by" field.
func (tgc *TenantGroupCreate) SetUpdatedBy(s string) *TenantGroupCreate {
	tgc.mutation.SetUpdatedBy(s)
	return tgc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (tgc *TenantGroupCreate) SetNillableUpdatedBy(s *string) *TenantGroupCreate {
	if s != nil {
		tgc.SetUpdatedBy(*s)
	}
	return tgc
}

// SetCreatedAt sets the "created_at" field.
func (tgc *TenantGroupCreate) SetCreatedAt(i int64) *TenantGroupCreate {
	tgc.mutation.SetCreatedAt(i)
	return tgc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tgc *TenantGroupCreate) SetNillableCreatedAt(i *int64) *TenantGroupCreate {
	if i != nil {
		tgc.SetCreatedAt(*i)
	}
	return tgc
}

// SetUpdatedAt sets the "updated_at" field.
func (tgc *TenantGroupCreate) SetUpdatedAt(i int64) *TenantGroupCreate {
	tgc.mutation.SetUpdatedAt(i)
	return tgc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tgc *TenantGroupCreate) SetNillableUpdatedAt(i *int64) *TenantGroupCreate {
	if i != nil {
		tgc.SetUpdatedAt(*i)
	}
	return tgc
}

// SetRelationType sets the "relation_type" field.
func (tgc *TenantGroupCreate) SetRelationType(s string) *TenantGroupCreate {
	tgc.mutation.SetRelationType(s)
	return tgc
}

// SetNillableRelationType sets the "relation_type" field if the given value is not nil.
func (tgc *TenantGroupCreate) SetNillableRelationType(s *string) *TenantGroupCreate {
	if s != nil {
		tgc.SetRelationType(*s)
	}
	return tgc
}

// SetID sets the "id" field.
func (tgc *TenantGroupCreate) SetID(s string) *TenantGroupCreate {
	tgc.mutation.SetID(s)
	return tgc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (tgc *TenantGroupCreate) SetNillableID(s *string) *TenantGroupCreate {
	if s != nil {
		tgc.SetID(*s)
	}
	return tgc
}

// Mutation returns the TenantGroupMutation object of the builder.
func (tgc *TenantGroupCreate) Mutation() *TenantGroupMutation {
	return tgc.mutation
}

// Save creates the TenantGroup in the database.
func (tgc *TenantGroupCreate) Save(ctx context.Context) (*TenantGroup, error) {
	tgc.defaults()
	return withHooks(ctx, tgc.sqlSave, tgc.mutation, tgc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tgc *TenantGroupCreate) SaveX(ctx context.Context) *TenantGroup {
	v, err := tgc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tgc *TenantGroupCreate) Exec(ctx context.Context) error {
	_, err := tgc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tgc *TenantGroupCreate) ExecX(ctx context.Context) {
	if err := tgc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tgc *TenantGroupCreate) defaults() {
	if _, ok := tgc.mutation.CreatedAt(); !ok {
		v := tenantgroup.DefaultCreatedAt()
		tgc.mutation.SetCreatedAt(v)
	}
	if _, ok := tgc.mutation.UpdatedAt(); !ok {
		v := tenantgroup.DefaultUpdatedAt()
		tgc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tgc.mutation.RelationType(); !ok {
		v := tenantgroup.DefaultRelationType
		tgc.mutation.SetRelationType(v)
	}
	if _, ok := tgc.mutation.ID(); !ok {
		v := tenantgroup.DefaultID()
		tgc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tgc *TenantGroupCreate) check() error {
	if _, ok := tgc.mutation.RelationType(); !ok {
		return &ValidationError{Name: "relation_type", err: errors.New(`ent: missing required field "TenantGroup.relation_type"`)}
	}
	if v, ok := tgc.mutation.RelationType(); ok {
		if err := tenantgroup.RelationTypeValidator(v); err != nil {
			return &ValidationError{Name: "relation_type", err: fmt.Errorf(`ent: validator failed for field "TenantGroup.relation_type": %w`, err)}
		}
	}
	if v, ok := tgc.mutation.ID(); ok {
		if err := tenantgroup.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "TenantGroup.id": %w`, err)}
		}
	}
	return nil
}

func (tgc *TenantGroupCreate) sqlSave(ctx context.Context) (*TenantGroup, error) {
	if err := tgc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tgc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tgc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected TenantGroup.ID type: %T", _spec.ID.Value)
		}
	}
	tgc.mutation.id = &_node.ID
	tgc.mutation.done = true
	return _node, nil
}

func (tgc *TenantGroupCreate) createSpec() (*TenantGroup, *sqlgraph.CreateSpec) {
	var (
		_node = &TenantGroup{config: tgc.config}
		_spec = sqlgraph.NewCreateSpec(tenantgroup.Table, sqlgraph.NewFieldSpec(tenantgroup.FieldID, field.TypeString))
	)
	if id, ok := tgc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tgc.mutation.TenantID(); ok {
		_spec.SetField(tenantgroup.FieldTenantID, field.TypeString, value)
		_node.TenantID = value
	}
	if value, ok := tgc.mutation.GroupID(); ok {
		_spec.SetField(tenantgroup.FieldGroupID, field.TypeString, value)
		_node.GroupID = value
	}
	if value, ok := tgc.mutation.CreatedBy(); ok {
		_spec.SetField(tenantgroup.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := tgc.mutation.UpdatedBy(); ok {
		_spec.SetField(tenantgroup.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := tgc.mutation.CreatedAt(); ok {
		_spec.SetField(tenantgroup.FieldCreatedAt, field.TypeInt64, value)
		_node.CreatedAt = value
	}
	if value, ok := tgc.mutation.UpdatedAt(); ok {
		_spec.SetField(tenantgroup.FieldUpdatedAt, field.TypeInt64, value)
		_node.UpdatedAt = value
	}
	if value, ok := tgc.mutation.RelationType(); ok {
		_spec.SetField(tenantgroup.FieldRelationType, field.TypeString, value)
		_node.RelationType = value
	}
	return _node, _spec
}

// TenantGroupCreateBulk is the builder for creating many TenantGroup entities in bulk.
type TenantGroupCreateBulk struct {
	config
	err      error
	builders []*TenantGroupCreate
}

// Save creates the TenantGroup entities in the database.
func (tgcb *TenantGroupCreateBulk) Save(ctx context.Context) ([]*TenantGroup, error) {
	if tgcb.err != nil {
		return nil, tgcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tgcb.builders))
	nodes := make([]*TenantGroup, len(tgcb.builders))
	mutators := make([]Mutator, len(tgcb.builders))
	for i := range tgcb.builders {
		func(i int, root context.Context) {
			builder := tgcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TenantGroupMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tgcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tgcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tgcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tgcb *TenantGroupCreateBulk) SaveX(ctx context.Context) []*TenantGroup {
	v, err := tgcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tgcb *TenantGroupCreateBulk) Exec(ctx context.Context) error {
	_, err := tgcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tgcb *TenantGroupCreateBulk) ExecX(ctx context.Context) {
	if err := tgcb.Exec(ctx); err != nil {
		panic(err)
	}
}
