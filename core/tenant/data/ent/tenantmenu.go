// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"ncobase/tenant/data/ent/tenantmenu"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// TenantMenu is the model entity for the TenantMenu schema.
type TenantMenu struct {
	config `json:"-"`
	// ID of the ent.
	// primary key
	ID string `json:"id,omitempty"`
	// tenant id
	TenantID string `json:"tenant_id,omitempty"`
	// menu id
	MenuID string `json:"menu_id,omitempty"`
	// id of the creator
	CreatedBy string `json:"created_by,omitempty"`
	// id of the last updater
	UpdatedBy string `json:"updated_by,omitempty"`
	// created at
	CreatedAt int64 `json:"created_at,omitempty"`
	// updated at
	UpdatedAt    int64 `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TenantMenu) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case tenantmenu.FieldCreatedAt, tenantmenu.FieldUpdatedAt:
			values[i] = new(sql.NullInt64)
		case tenantmenu.FieldID, tenantmenu.FieldTenantID, tenantmenu.FieldMenuID, tenantmenu.FieldCreatedBy, tenantmenu.FieldUpdatedBy:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TenantMenu fields.
func (tm *TenantMenu) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tenantmenu.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				tm.ID = value.String
			}
		case tenantmenu.FieldTenantID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				tm.TenantID = value.String
			}
		case tenantmenu.FieldMenuID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field menu_id", values[i])
			} else if value.Valid {
				tm.MenuID = value.String
			}
		case tenantmenu.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				tm.CreatedBy = value.String
			}
		case tenantmenu.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				tm.UpdatedBy = value.String
			}
		case tenantmenu.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				tm.CreatedAt = value.Int64
			}
		case tenantmenu.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				tm.UpdatedAt = value.Int64
			}
		default:
			tm.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TenantMenu.
// This includes values selected through modifiers, order, etc.
func (tm *TenantMenu) Value(name string) (ent.Value, error) {
	return tm.selectValues.Get(name)
}

// Update returns a builder for updating this TenantMenu.
// Note that you need to call TenantMenu.Unwrap() before calling this method if this TenantMenu
// was returned from a transaction, and the transaction was committed or rolled back.
func (tm *TenantMenu) Update() *TenantMenuUpdateOne {
	return NewTenantMenuClient(tm.config).UpdateOne(tm)
}

// Unwrap unwraps the TenantMenu entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tm *TenantMenu) Unwrap() *TenantMenu {
	_tx, ok := tm.config.driver.(*txDriver)
	if !ok {
		panic("ent: TenantMenu is not a transactional entity")
	}
	tm.config.driver = _tx.drv
	return tm
}

// String implements the fmt.Stringer.
func (tm *TenantMenu) String() string {
	var builder strings.Builder
	builder.WriteString("TenantMenu(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tm.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(tm.TenantID)
	builder.WriteString(", ")
	builder.WriteString("menu_id=")
	builder.WriteString(tm.MenuID)
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(tm.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(tm.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", tm.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", tm.UpdatedAt))
	builder.WriteByte(')')
	return builder.String()
}

// TenantMenus is a parsable slice of TenantMenu.
type TenantMenus []*TenantMenu
