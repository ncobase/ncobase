// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"ncobase/tenant/data/ent/tenantmenu"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TenantMenuCreate is the builder for creating a TenantMenu entity.
type TenantMenuCreate struct {
	config
	mutation *TenantMenuMutation
	hooks    []Hook
}

// SetTenantID sets the "tenant_id" field.
func (tmc *TenantMenuCreate) SetTenantID(s string) *TenantMenuCreate {
	tmc.mutation.SetTenantID(s)
	return tmc
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (tmc *TenantMenuCreate) SetNillableTenantID(s *string) *TenantMenuCreate {
	if s != nil {
		tmc.SetTenantID(*s)
	}
	return tmc
}

// SetMenuID sets the "menu_id" field.
func (tmc *TenantMenuCreate) SetMenuID(s string) *TenantMenuCreate {
	tmc.mutation.SetMenuID(s)
	return tmc
}

// SetNillableMenuID sets the "menu_id" field if the given value is not nil.
func (tmc *TenantMenuCreate) SetNillableMenuID(s *string) *TenantMenuCreate {
	if s != nil {
		tmc.SetMenuID(*s)
	}
	return tmc
}

// SetCreatedBy sets the "created_by" field.
func (tmc *TenantMenuCreate) SetCreatedBy(s string) *TenantMenuCreate {
	tmc.mutation.SetCreatedBy(s)
	return tmc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (tmc *TenantMenuCreate) SetNillableCreatedBy(s *string) *TenantMenuCreate {
	if s != nil {
		tmc.SetCreatedBy(*s)
	}
	return tmc
}

// SetUpdatedBy sets the "updated_by" field.
func (tmc *TenantMenuCreate) SetUpdatedBy(s string) *TenantMenuCreate {
	tmc.mutation.SetUpdatedBy(s)
	return tmc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (tmc *TenantMenuCreate) SetNillableUpdatedBy(s *string) *TenantMenuCreate {
	if s != nil {
		tmc.SetUpdatedBy(*s)
	}
	return tmc
}

// SetCreatedAt sets the "created_at" field.
func (tmc *TenantMenuCreate) SetCreatedAt(i int64) *TenantMenuCreate {
	tmc.mutation.SetCreatedAt(i)
	return tmc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tmc *TenantMenuCreate) SetNillableCreatedAt(i *int64) *TenantMenuCreate {
	if i != nil {
		tmc.SetCreatedAt(*i)
	}
	return tmc
}

// SetUpdatedAt sets the "updated_at" field.
func (tmc *TenantMenuCreate) SetUpdatedAt(i int64) *TenantMenuCreate {
	tmc.mutation.SetUpdatedAt(i)
	return tmc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tmc *TenantMenuCreate) SetNillableUpdatedAt(i *int64) *TenantMenuCreate {
	if i != nil {
		tmc.SetUpdatedAt(*i)
	}
	return tmc
}

// SetID sets the "id" field.
func (tmc *TenantMenuCreate) SetID(s string) *TenantMenuCreate {
	tmc.mutation.SetID(s)
	return tmc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (tmc *TenantMenuCreate) SetNillableID(s *string) *TenantMenuCreate {
	if s != nil {
		tmc.SetID(*s)
	}
	return tmc
}

// Mutation returns the TenantMenuMutation object of the builder.
func (tmc *TenantMenuCreate) Mutation() *TenantMenuMutation {
	return tmc.mutation
}

// Save creates the TenantMenu in the database.
func (tmc *TenantMenuCreate) Save(ctx context.Context) (*TenantMenu, error) {
	tmc.defaults()
	return withHooks(ctx, tmc.sqlSave, tmc.mutation, tmc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tmc *TenantMenuCreate) SaveX(ctx context.Context) *TenantMenu {
	v, err := tmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tmc *TenantMenuCreate) Exec(ctx context.Context) error {
	_, err := tmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tmc *TenantMenuCreate) ExecX(ctx context.Context) {
	if err := tmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tmc *TenantMenuCreate) defaults() {
	if _, ok := tmc.mutation.CreatedAt(); !ok {
		v := tenantmenu.DefaultCreatedAt()
		tmc.mutation.SetCreatedAt(v)
	}
	if _, ok := tmc.mutation.UpdatedAt(); !ok {
		v := tenantmenu.DefaultUpdatedAt()
		tmc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tmc.mutation.ID(); !ok {
		v := tenantmenu.DefaultID()
		tmc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tmc *TenantMenuCreate) check() error {
	if v, ok := tmc.mutation.ID(); ok {
		if err := tenantmenu.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "TenantMenu.id": %w`, err)}
		}
	}
	return nil
}

func (tmc *TenantMenuCreate) sqlSave(ctx context.Context) (*TenantMenu, error) {
	if err := tmc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected TenantMenu.ID type: %T", _spec.ID.Value)
		}
	}
	tmc.mutation.id = &_node.ID
	tmc.mutation.done = true
	return _node, nil
}

func (tmc *TenantMenuCreate) createSpec() (*TenantMenu, *sqlgraph.CreateSpec) {
	var (
		_node = &TenantMenu{config: tmc.config}
		_spec = sqlgraph.NewCreateSpec(tenantmenu.Table, sqlgraph.NewFieldSpec(tenantmenu.FieldID, field.TypeString))
	)
	if id, ok := tmc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tmc.mutation.TenantID(); ok {
		_spec.SetField(tenantmenu.FieldTenantID, field.TypeString, value)
		_node.TenantID = value
	}
	if value, ok := tmc.mutation.MenuID(); ok {
		_spec.SetField(tenantmenu.FieldMenuID, field.TypeString, value)
		_node.MenuID = value
	}
	if value, ok := tmc.mutation.CreatedBy(); ok {
		_spec.SetField(tenantmenu.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := tmc.mutation.UpdatedBy(); ok {
		_spec.SetField(tenantmenu.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := tmc.mutation.CreatedAt(); ok {
		_spec.SetField(tenantmenu.FieldCreatedAt, field.TypeInt64, value)
		_node.CreatedAt = value
	}
	if value, ok := tmc.mutation.UpdatedAt(); ok {
		_spec.SetField(tenantmenu.FieldUpdatedAt, field.TypeInt64, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// TenantMenuCreateBulk is the builder for creating many TenantMenu entities in bulk.
type TenantMenuCreateBulk struct {
	config
	err      error
	builders []*TenantMenuCreate
}

// Save creates the TenantMenu entities in the database.
func (tmcb *TenantMenuCreateBulk) Save(ctx context.Context) ([]*TenantMenu, error) {
	if tmcb.err != nil {
		return nil, tmcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tmcb.builders))
	nodes := make([]*TenantMenu, len(tmcb.builders))
	mutators := make([]Mutator, len(tmcb.builders))
	for i := range tmcb.builders {
		func(i int, root context.Context) {
			builder := tmcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TenantMenuMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tmcb *TenantMenuCreateBulk) SaveX(ctx context.Context) []*TenantMenu {
	v, err := tmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tmcb *TenantMenuCreateBulk) Exec(ctx context.Context) error {
	_, err := tmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tmcb *TenantMenuCreateBulk) ExecX(ctx context.Context) {
	if err := tmcb.Exec(ctx); err != nil {
		panic(err)
	}
}
