// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/tenant/data/ent/predicate"
	"ncobase/tenant/data/ent/tenantmenu"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TenantMenuUpdate is the builder for updating TenantMenu entities.
type TenantMenuUpdate struct {
	config
	hooks    []Hook
	mutation *TenantMenuMutation
}

// Where appends a list predicates to the TenantMenuUpdate builder.
func (tmu *TenantMenuUpdate) Where(ps ...predicate.TenantMenu) *TenantMenuUpdate {
	tmu.mutation.Where(ps...)
	return tmu
}

// SetTenantID sets the "tenant_id" field.
func (tmu *TenantMenuUpdate) SetTenantID(s string) *TenantMenuUpdate {
	tmu.mutation.SetTenantID(s)
	return tmu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (tmu *TenantMenuUpdate) SetNillableTenantID(s *string) *TenantMenuUpdate {
	if s != nil {
		tmu.SetTenantID(*s)
	}
	return tmu
}

// ClearTenantID clears the value of the "tenant_id" field.
func (tmu *TenantMenuUpdate) ClearTenantID() *TenantMenuUpdate {
	tmu.mutation.ClearTenantID()
	return tmu
}

// SetMenuID sets the "menu_id" field.
func (tmu *TenantMenuUpdate) SetMenuID(s string) *TenantMenuUpdate {
	tmu.mutation.SetMenuID(s)
	return tmu
}

// SetNillableMenuID sets the "menu_id" field if the given value is not nil.
func (tmu *TenantMenuUpdate) SetNillableMenuID(s *string) *TenantMenuUpdate {
	if s != nil {
		tmu.SetMenuID(*s)
	}
	return tmu
}

// ClearMenuID clears the value of the "menu_id" field.
func (tmu *TenantMenuUpdate) ClearMenuID() *TenantMenuUpdate {
	tmu.mutation.ClearMenuID()
	return tmu
}

// SetCreatedBy sets the "created_by" field.
func (tmu *TenantMenuUpdate) SetCreatedBy(s string) *TenantMenuUpdate {
	tmu.mutation.SetCreatedBy(s)
	return tmu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (tmu *TenantMenuUpdate) SetNillableCreatedBy(s *string) *TenantMenuUpdate {
	if s != nil {
		tmu.SetCreatedBy(*s)
	}
	return tmu
}

// ClearCreatedBy clears the value of the "created_by" field.
func (tmu *TenantMenuUpdate) ClearCreatedBy() *TenantMenuUpdate {
	tmu.mutation.ClearCreatedBy()
	return tmu
}

// SetUpdatedBy sets the "updated_by" field.
func (tmu *TenantMenuUpdate) SetUpdatedBy(s string) *TenantMenuUpdate {
	tmu.mutation.SetUpdatedBy(s)
	return tmu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (tmu *TenantMenuUpdate) SetNillableUpdatedBy(s *string) *TenantMenuUpdate {
	if s != nil {
		tmu.SetUpdatedBy(*s)
	}
	return tmu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (tmu *TenantMenuUpdate) ClearUpdatedBy() *TenantMenuUpdate {
	tmu.mutation.ClearUpdatedBy()
	return tmu
}

// SetUpdatedAt sets the "updated_at" field.
func (tmu *TenantMenuUpdate) SetUpdatedAt(i int64) *TenantMenuUpdate {
	tmu.mutation.ResetUpdatedAt()
	tmu.mutation.SetUpdatedAt(i)
	return tmu
}

// AddUpdatedAt adds i to the "updated_at" field.
func (tmu *TenantMenuUpdate) AddUpdatedAt(i int64) *TenantMenuUpdate {
	tmu.mutation.AddUpdatedAt(i)
	return tmu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tmu *TenantMenuUpdate) ClearUpdatedAt() *TenantMenuUpdate {
	tmu.mutation.ClearUpdatedAt()
	return tmu
}

// Mutation returns the TenantMenuMutation object of the builder.
func (tmu *TenantMenuUpdate) Mutation() *TenantMenuMutation {
	return tmu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tmu *TenantMenuUpdate) Save(ctx context.Context) (int, error) {
	tmu.defaults()
	return withHooks(ctx, tmu.sqlSave, tmu.mutation, tmu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tmu *TenantMenuUpdate) SaveX(ctx context.Context) int {
	affected, err := tmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tmu *TenantMenuUpdate) Exec(ctx context.Context) error {
	_, err := tmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tmu *TenantMenuUpdate) ExecX(ctx context.Context) {
	if err := tmu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tmu *TenantMenuUpdate) defaults() {
	if _, ok := tmu.mutation.UpdatedAt(); !ok && !tmu.mutation.UpdatedAtCleared() {
		v := tenantmenu.UpdateDefaultUpdatedAt()
		tmu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tmu *TenantMenuUpdate) check() error {
	if v, ok := tmu.mutation.TenantID(); ok {
		if err := tenantmenu.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "TenantMenu.tenant_id": %w`, err)}
		}
	}
	if v, ok := tmu.mutation.MenuID(); ok {
		if err := tenantmenu.MenuIDValidator(v); err != nil {
			return &ValidationError{Name: "menu_id", err: fmt.Errorf(`ent: validator failed for field "TenantMenu.menu_id": %w`, err)}
		}
	}
	if v, ok := tmu.mutation.CreatedBy(); ok {
		if err := tenantmenu.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "TenantMenu.created_by": %w`, err)}
		}
	}
	if v, ok := tmu.mutation.UpdatedBy(); ok {
		if err := tenantmenu.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "TenantMenu.updated_by": %w`, err)}
		}
	}
	return nil
}

func (tmu *TenantMenuUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tmu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(tenantmenu.Table, tenantmenu.Columns, sqlgraph.NewFieldSpec(tenantmenu.FieldID, field.TypeString))
	if ps := tmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tmu.mutation.TenantID(); ok {
		_spec.SetField(tenantmenu.FieldTenantID, field.TypeString, value)
	}
	if tmu.mutation.TenantIDCleared() {
		_spec.ClearField(tenantmenu.FieldTenantID, field.TypeString)
	}
	if value, ok := tmu.mutation.MenuID(); ok {
		_spec.SetField(tenantmenu.FieldMenuID, field.TypeString, value)
	}
	if tmu.mutation.MenuIDCleared() {
		_spec.ClearField(tenantmenu.FieldMenuID, field.TypeString)
	}
	if value, ok := tmu.mutation.CreatedBy(); ok {
		_spec.SetField(tenantmenu.FieldCreatedBy, field.TypeString, value)
	}
	if tmu.mutation.CreatedByCleared() {
		_spec.ClearField(tenantmenu.FieldCreatedBy, field.TypeString)
	}
	if value, ok := tmu.mutation.UpdatedBy(); ok {
		_spec.SetField(tenantmenu.FieldUpdatedBy, field.TypeString, value)
	}
	if tmu.mutation.UpdatedByCleared() {
		_spec.ClearField(tenantmenu.FieldUpdatedBy, field.TypeString)
	}
	if tmu.mutation.CreatedAtCleared() {
		_spec.ClearField(tenantmenu.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := tmu.mutation.UpdatedAt(); ok {
		_spec.SetField(tenantmenu.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := tmu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(tenantmenu.FieldUpdatedAt, field.TypeInt64, value)
	}
	if tmu.mutation.UpdatedAtCleared() {
		_spec.ClearField(tenantmenu.FieldUpdatedAt, field.TypeInt64)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tenantmenu.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tmu.mutation.done = true
	return n, nil
}

// TenantMenuUpdateOne is the builder for updating a single TenantMenu entity.
type TenantMenuUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TenantMenuMutation
}

// SetTenantID sets the "tenant_id" field.
func (tmuo *TenantMenuUpdateOne) SetTenantID(s string) *TenantMenuUpdateOne {
	tmuo.mutation.SetTenantID(s)
	return tmuo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (tmuo *TenantMenuUpdateOne) SetNillableTenantID(s *string) *TenantMenuUpdateOne {
	if s != nil {
		tmuo.SetTenantID(*s)
	}
	return tmuo
}

// ClearTenantID clears the value of the "tenant_id" field.
func (tmuo *TenantMenuUpdateOne) ClearTenantID() *TenantMenuUpdateOne {
	tmuo.mutation.ClearTenantID()
	return tmuo
}

// SetMenuID sets the "menu_id" field.
func (tmuo *TenantMenuUpdateOne) SetMenuID(s string) *TenantMenuUpdateOne {
	tmuo.mutation.SetMenuID(s)
	return tmuo
}

// SetNillableMenuID sets the "menu_id" field if the given value is not nil.
func (tmuo *TenantMenuUpdateOne) SetNillableMenuID(s *string) *TenantMenuUpdateOne {
	if s != nil {
		tmuo.SetMenuID(*s)
	}
	return tmuo
}

// ClearMenuID clears the value of the "menu_id" field.
func (tmuo *TenantMenuUpdateOne) ClearMenuID() *TenantMenuUpdateOne {
	tmuo.mutation.ClearMenuID()
	return tmuo
}

// SetCreatedBy sets the "created_by" field.
func (tmuo *TenantMenuUpdateOne) SetCreatedBy(s string) *TenantMenuUpdateOne {
	tmuo.mutation.SetCreatedBy(s)
	return tmuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (tmuo *TenantMenuUpdateOne) SetNillableCreatedBy(s *string) *TenantMenuUpdateOne {
	if s != nil {
		tmuo.SetCreatedBy(*s)
	}
	return tmuo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (tmuo *TenantMenuUpdateOne) ClearCreatedBy() *TenantMenuUpdateOne {
	tmuo.mutation.ClearCreatedBy()
	return tmuo
}

// SetUpdatedBy sets the "updated_by" field.
func (tmuo *TenantMenuUpdateOne) SetUpdatedBy(s string) *TenantMenuUpdateOne {
	tmuo.mutation.SetUpdatedBy(s)
	return tmuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (tmuo *TenantMenuUpdateOne) SetNillableUpdatedBy(s *string) *TenantMenuUpdateOne {
	if s != nil {
		tmuo.SetUpdatedBy(*s)
	}
	return tmuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (tmuo *TenantMenuUpdateOne) ClearUpdatedBy() *TenantMenuUpdateOne {
	tmuo.mutation.ClearUpdatedBy()
	return tmuo
}

// SetUpdatedAt sets the "updated_at" field.
func (tmuo *TenantMenuUpdateOne) SetUpdatedAt(i int64) *TenantMenuUpdateOne {
	tmuo.mutation.ResetUpdatedAt()
	tmuo.mutation.SetUpdatedAt(i)
	return tmuo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (tmuo *TenantMenuUpdateOne) AddUpdatedAt(i int64) *TenantMenuUpdateOne {
	tmuo.mutation.AddUpdatedAt(i)
	return tmuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tmuo *TenantMenuUpdateOne) ClearUpdatedAt() *TenantMenuUpdateOne {
	tmuo.mutation.ClearUpdatedAt()
	return tmuo
}

// Mutation returns the TenantMenuMutation object of the builder.
func (tmuo *TenantMenuUpdateOne) Mutation() *TenantMenuMutation {
	return tmuo.mutation
}

// Where appends a list predicates to the TenantMenuUpdate builder.
func (tmuo *TenantMenuUpdateOne) Where(ps ...predicate.TenantMenu) *TenantMenuUpdateOne {
	tmuo.mutation.Where(ps...)
	return tmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tmuo *TenantMenuUpdateOne) Select(field string, fields ...string) *TenantMenuUpdateOne {
	tmuo.fields = append([]string{field}, fields...)
	return tmuo
}

// Save executes the query and returns the updated TenantMenu entity.
func (tmuo *TenantMenuUpdateOne) Save(ctx context.Context) (*TenantMenu, error) {
	tmuo.defaults()
	return withHooks(ctx, tmuo.sqlSave, tmuo.mutation, tmuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tmuo *TenantMenuUpdateOne) SaveX(ctx context.Context) *TenantMenu {
	node, err := tmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tmuo *TenantMenuUpdateOne) Exec(ctx context.Context) error {
	_, err := tmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tmuo *TenantMenuUpdateOne) ExecX(ctx context.Context) {
	if err := tmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tmuo *TenantMenuUpdateOne) defaults() {
	if _, ok := tmuo.mutation.UpdatedAt(); !ok && !tmuo.mutation.UpdatedAtCleared() {
		v := tenantmenu.UpdateDefaultUpdatedAt()
		tmuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tmuo *TenantMenuUpdateOne) check() error {
	if v, ok := tmuo.mutation.TenantID(); ok {
		if err := tenantmenu.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "TenantMenu.tenant_id": %w`, err)}
		}
	}
	if v, ok := tmuo.mutation.MenuID(); ok {
		if err := tenantmenu.MenuIDValidator(v); err != nil {
			return &ValidationError{Name: "menu_id", err: fmt.Errorf(`ent: validator failed for field "TenantMenu.menu_id": %w`, err)}
		}
	}
	if v, ok := tmuo.mutation.CreatedBy(); ok {
		if err := tenantmenu.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "TenantMenu.created_by": %w`, err)}
		}
	}
	if v, ok := tmuo.mutation.UpdatedBy(); ok {
		if err := tenantmenu.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "TenantMenu.updated_by": %w`, err)}
		}
	}
	return nil
}

func (tmuo *TenantMenuUpdateOne) sqlSave(ctx context.Context) (_node *TenantMenu, err error) {
	if err := tmuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(tenantmenu.Table, tenantmenu.Columns, sqlgraph.NewFieldSpec(tenantmenu.FieldID, field.TypeString))
	id, ok := tmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TenantMenu.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tenantmenu.FieldID)
		for _, f := range fields {
			if !tenantmenu.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tenantmenu.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tmuo.mutation.TenantID(); ok {
		_spec.SetField(tenantmenu.FieldTenantID, field.TypeString, value)
	}
	if tmuo.mutation.TenantIDCleared() {
		_spec.ClearField(tenantmenu.FieldTenantID, field.TypeString)
	}
	if value, ok := tmuo.mutation.MenuID(); ok {
		_spec.SetField(tenantmenu.FieldMenuID, field.TypeString, value)
	}
	if tmuo.mutation.MenuIDCleared() {
		_spec.ClearField(tenantmenu.FieldMenuID, field.TypeString)
	}
	if value, ok := tmuo.mutation.CreatedBy(); ok {
		_spec.SetField(tenantmenu.FieldCreatedBy, field.TypeString, value)
	}
	if tmuo.mutation.CreatedByCleared() {
		_spec.ClearField(tenantmenu.FieldCreatedBy, field.TypeString)
	}
	if value, ok := tmuo.mutation.UpdatedBy(); ok {
		_spec.SetField(tenantmenu.FieldUpdatedBy, field.TypeString, value)
	}
	if tmuo.mutation.UpdatedByCleared() {
		_spec.ClearField(tenantmenu.FieldUpdatedBy, field.TypeString)
	}
	if tmuo.mutation.CreatedAtCleared() {
		_spec.ClearField(tenantmenu.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := tmuo.mutation.UpdatedAt(); ok {
		_spec.SetField(tenantmenu.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := tmuo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(tenantmenu.FieldUpdatedAt, field.TypeInt64, value)
	}
	if tmuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(tenantmenu.FieldUpdatedAt, field.TypeInt64)
	}
	_node = &TenantMenu{config: tmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tenantmenu.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tmuo.mutation.done = true
	return _node, nil
}
