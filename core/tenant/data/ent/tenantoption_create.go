// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"ncobase/tenant/data/ent/tenantoption"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TenantOptionCreate is the builder for creating a TenantOption entity.
type TenantOptionCreate struct {
	config
	mutation *TenantOptionMutation
	hooks    []Hook
}

// SetTenantID sets the "tenant_id" field.
func (toc *TenantOptionCreate) SetTenantID(s string) *TenantOptionCreate {
	toc.mutation.SetTenantID(s)
	return toc
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (toc *TenantOptionCreate) SetNillableTenantID(s *string) *TenantOptionCreate {
	if s != nil {
		toc.SetTenantID(*s)
	}
	return toc
}

// SetOptionID sets the "option_id" field.
func (toc *TenantOptionCreate) SetOptionID(s string) *TenantOptionCreate {
	toc.mutation.SetOptionID(s)
	return toc
}

// SetNillableOptionID sets the "option_id" field if the given value is not nil.
func (toc *TenantOptionCreate) SetNillableOptionID(s *string) *TenantOptionCreate {
	if s != nil {
		toc.SetOptionID(*s)
	}
	return toc
}

// SetCreatedBy sets the "created_by" field.
func (toc *TenantOptionCreate) SetCreatedBy(s string) *TenantOptionCreate {
	toc.mutation.SetCreatedBy(s)
	return toc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (toc *TenantOptionCreate) SetNillableCreatedBy(s *string) *TenantOptionCreate {
	if s != nil {
		toc.SetCreatedBy(*s)
	}
	return toc
}

// SetUpdatedBy sets the "updated_by" field.
func (toc *TenantOptionCreate) SetUpdatedBy(s string) *TenantOptionCreate {
	toc.mutation.SetUpdatedBy(s)
	return toc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (toc *TenantOptionCreate) SetNillableUpdatedBy(s *string) *TenantOptionCreate {
	if s != nil {
		toc.SetUpdatedBy(*s)
	}
	return toc
}

// SetCreatedAt sets the "created_at" field.
func (toc *TenantOptionCreate) SetCreatedAt(i int64) *TenantOptionCreate {
	toc.mutation.SetCreatedAt(i)
	return toc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (toc *TenantOptionCreate) SetNillableCreatedAt(i *int64) *TenantOptionCreate {
	if i != nil {
		toc.SetCreatedAt(*i)
	}
	return toc
}

// SetUpdatedAt sets the "updated_at" field.
func (toc *TenantOptionCreate) SetUpdatedAt(i int64) *TenantOptionCreate {
	toc.mutation.SetUpdatedAt(i)
	return toc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (toc *TenantOptionCreate) SetNillableUpdatedAt(i *int64) *TenantOptionCreate {
	if i != nil {
		toc.SetUpdatedAt(*i)
	}
	return toc
}

// SetID sets the "id" field.
func (toc *TenantOptionCreate) SetID(s string) *TenantOptionCreate {
	toc.mutation.SetID(s)
	return toc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (toc *TenantOptionCreate) SetNillableID(s *string) *TenantOptionCreate {
	if s != nil {
		toc.SetID(*s)
	}
	return toc
}

// Mutation returns the TenantOptionMutation object of the builder.
func (toc *TenantOptionCreate) Mutation() *TenantOptionMutation {
	return toc.mutation
}

// Save creates the TenantOption in the database.
func (toc *TenantOptionCreate) Save(ctx context.Context) (*TenantOption, error) {
	toc.defaults()
	return withHooks(ctx, toc.sqlSave, toc.mutation, toc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (toc *TenantOptionCreate) SaveX(ctx context.Context) *TenantOption {
	v, err := toc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (toc *TenantOptionCreate) Exec(ctx context.Context) error {
	_, err := toc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (toc *TenantOptionCreate) ExecX(ctx context.Context) {
	if err := toc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (toc *TenantOptionCreate) defaults() {
	if _, ok := toc.mutation.CreatedAt(); !ok {
		v := tenantoption.DefaultCreatedAt()
		toc.mutation.SetCreatedAt(v)
	}
	if _, ok := toc.mutation.UpdatedAt(); !ok {
		v := tenantoption.DefaultUpdatedAt()
		toc.mutation.SetUpdatedAt(v)
	}
	if _, ok := toc.mutation.ID(); !ok {
		v := tenantoption.DefaultID()
		toc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (toc *TenantOptionCreate) check() error {
	if v, ok := toc.mutation.ID(); ok {
		if err := tenantoption.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "TenantOption.id": %w`, err)}
		}
	}
	return nil
}

func (toc *TenantOptionCreate) sqlSave(ctx context.Context) (*TenantOption, error) {
	if err := toc.check(); err != nil {
		return nil, err
	}
	_node, _spec := toc.createSpec()
	if err := sqlgraph.CreateNode(ctx, toc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected TenantOption.ID type: %T", _spec.ID.Value)
		}
	}
	toc.mutation.id = &_node.ID
	toc.mutation.done = true
	return _node, nil
}

func (toc *TenantOptionCreate) createSpec() (*TenantOption, *sqlgraph.CreateSpec) {
	var (
		_node = &TenantOption{config: toc.config}
		_spec = sqlgraph.NewCreateSpec(tenantoption.Table, sqlgraph.NewFieldSpec(tenantoption.FieldID, field.TypeString))
	)
	if id, ok := toc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := toc.mutation.TenantID(); ok {
		_spec.SetField(tenantoption.FieldTenantID, field.TypeString, value)
		_node.TenantID = value
	}
	if value, ok := toc.mutation.OptionID(); ok {
		_spec.SetField(tenantoption.FieldOptionID, field.TypeString, value)
		_node.OptionID = value
	}
	if value, ok := toc.mutation.CreatedBy(); ok {
		_spec.SetField(tenantoption.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := toc.mutation.UpdatedBy(); ok {
		_spec.SetField(tenantoption.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := toc.mutation.CreatedAt(); ok {
		_spec.SetField(tenantoption.FieldCreatedAt, field.TypeInt64, value)
		_node.CreatedAt = value
	}
	if value, ok := toc.mutation.UpdatedAt(); ok {
		_spec.SetField(tenantoption.FieldUpdatedAt, field.TypeInt64, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// TenantOptionCreateBulk is the builder for creating many TenantOption entities in bulk.
type TenantOptionCreateBulk struct {
	config
	err      error
	builders []*TenantOptionCreate
}

// Save creates the TenantOption entities in the database.
func (tocb *TenantOptionCreateBulk) Save(ctx context.Context) ([]*TenantOption, error) {
	if tocb.err != nil {
		return nil, tocb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tocb.builders))
	nodes := make([]*TenantOption, len(tocb.builders))
	mutators := make([]Mutator, len(tocb.builders))
	for i := range tocb.builders {
		func(i int, root context.Context) {
			builder := tocb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TenantOptionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tocb *TenantOptionCreateBulk) SaveX(ctx context.Context) []*TenantOption {
	v, err := tocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tocb *TenantOptionCreateBulk) Exec(ctx context.Context) error {
	_, err := tocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tocb *TenantOptionCreateBulk) ExecX(ctx context.Context) {
	if err := tocb.Exec(ctx); err != nil {
		panic(err)
	}
}
