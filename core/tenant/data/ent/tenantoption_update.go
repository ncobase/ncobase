// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/tenant/data/ent/predicate"
	"ncobase/tenant/data/ent/tenantoption"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TenantOptionUpdate is the builder for updating TenantOption entities.
type TenantOptionUpdate struct {
	config
	hooks    []Hook
	mutation *TenantOptionMutation
}

// Where appends a list predicates to the TenantOptionUpdate builder.
func (tou *TenantOptionUpdate) Where(ps ...predicate.TenantOption) *TenantOptionUpdate {
	tou.mutation.Where(ps...)
	return tou
}

// SetTenantID sets the "tenant_id" field.
func (tou *TenantOptionUpdate) SetTenantID(s string) *TenantOptionUpdate {
	tou.mutation.SetTenantID(s)
	return tou
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (tou *TenantOptionUpdate) SetNillableTenantID(s *string) *TenantOptionUpdate {
	if s != nil {
		tou.SetTenantID(*s)
	}
	return tou
}

// ClearTenantID clears the value of the "tenant_id" field.
func (tou *TenantOptionUpdate) ClearTenantID() *TenantOptionUpdate {
	tou.mutation.ClearTenantID()
	return tou
}

// SetOptionID sets the "option_id" field.
func (tou *TenantOptionUpdate) SetOptionID(s string) *TenantOptionUpdate {
	tou.mutation.SetOptionID(s)
	return tou
}

// SetNillableOptionID sets the "option_id" field if the given value is not nil.
func (tou *TenantOptionUpdate) SetNillableOptionID(s *string) *TenantOptionUpdate {
	if s != nil {
		tou.SetOptionID(*s)
	}
	return tou
}

// ClearOptionID clears the value of the "option_id" field.
func (tou *TenantOptionUpdate) ClearOptionID() *TenantOptionUpdate {
	tou.mutation.ClearOptionID()
	return tou
}

// SetCreatedBy sets the "created_by" field.
func (tou *TenantOptionUpdate) SetCreatedBy(s string) *TenantOptionUpdate {
	tou.mutation.SetCreatedBy(s)
	return tou
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (tou *TenantOptionUpdate) SetNillableCreatedBy(s *string) *TenantOptionUpdate {
	if s != nil {
		tou.SetCreatedBy(*s)
	}
	return tou
}

// ClearCreatedBy clears the value of the "created_by" field.
func (tou *TenantOptionUpdate) ClearCreatedBy() *TenantOptionUpdate {
	tou.mutation.ClearCreatedBy()
	return tou
}

// SetUpdatedBy sets the "updated_by" field.
func (tou *TenantOptionUpdate) SetUpdatedBy(s string) *TenantOptionUpdate {
	tou.mutation.SetUpdatedBy(s)
	return tou
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (tou *TenantOptionUpdate) SetNillableUpdatedBy(s *string) *TenantOptionUpdate {
	if s != nil {
		tou.SetUpdatedBy(*s)
	}
	return tou
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (tou *TenantOptionUpdate) ClearUpdatedBy() *TenantOptionUpdate {
	tou.mutation.ClearUpdatedBy()
	return tou
}

// SetUpdatedAt sets the "updated_at" field.
func (tou *TenantOptionUpdate) SetUpdatedAt(i int64) *TenantOptionUpdate {
	tou.mutation.ResetUpdatedAt()
	tou.mutation.SetUpdatedAt(i)
	return tou
}

// AddUpdatedAt adds i to the "updated_at" field.
func (tou *TenantOptionUpdate) AddUpdatedAt(i int64) *TenantOptionUpdate {
	tou.mutation.AddUpdatedAt(i)
	return tou
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tou *TenantOptionUpdate) ClearUpdatedAt() *TenantOptionUpdate {
	tou.mutation.ClearUpdatedAt()
	return tou
}

// Mutation returns the TenantOptionMutation object of the builder.
func (tou *TenantOptionUpdate) Mutation() *TenantOptionMutation {
	return tou.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tou *TenantOptionUpdate) Save(ctx context.Context) (int, error) {
	tou.defaults()
	return withHooks(ctx, tou.sqlSave, tou.mutation, tou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tou *TenantOptionUpdate) SaveX(ctx context.Context) int {
	affected, err := tou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tou *TenantOptionUpdate) Exec(ctx context.Context) error {
	_, err := tou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tou *TenantOptionUpdate) ExecX(ctx context.Context) {
	if err := tou.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tou *TenantOptionUpdate) defaults() {
	if _, ok := tou.mutation.UpdatedAt(); !ok && !tou.mutation.UpdatedAtCleared() {
		v := tenantoption.UpdateDefaultUpdatedAt()
		tou.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tou *TenantOptionUpdate) check() error {
	if v, ok := tou.mutation.TenantID(); ok {
		if err := tenantoption.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "TenantOption.tenant_id": %w`, err)}
		}
	}
	if v, ok := tou.mutation.OptionID(); ok {
		if err := tenantoption.OptionIDValidator(v); err != nil {
			return &ValidationError{Name: "option_id", err: fmt.Errorf(`ent: validator failed for field "TenantOption.option_id": %w`, err)}
		}
	}
	if v, ok := tou.mutation.CreatedBy(); ok {
		if err := tenantoption.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "TenantOption.created_by": %w`, err)}
		}
	}
	if v, ok := tou.mutation.UpdatedBy(); ok {
		if err := tenantoption.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "TenantOption.updated_by": %w`, err)}
		}
	}
	return nil
}

func (tou *TenantOptionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tou.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(tenantoption.Table, tenantoption.Columns, sqlgraph.NewFieldSpec(tenantoption.FieldID, field.TypeString))
	if ps := tou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tou.mutation.TenantID(); ok {
		_spec.SetField(tenantoption.FieldTenantID, field.TypeString, value)
	}
	if tou.mutation.TenantIDCleared() {
		_spec.ClearField(tenantoption.FieldTenantID, field.TypeString)
	}
	if value, ok := tou.mutation.OptionID(); ok {
		_spec.SetField(tenantoption.FieldOptionID, field.TypeString, value)
	}
	if tou.mutation.OptionIDCleared() {
		_spec.ClearField(tenantoption.FieldOptionID, field.TypeString)
	}
	if value, ok := tou.mutation.CreatedBy(); ok {
		_spec.SetField(tenantoption.FieldCreatedBy, field.TypeString, value)
	}
	if tou.mutation.CreatedByCleared() {
		_spec.ClearField(tenantoption.FieldCreatedBy, field.TypeString)
	}
	if value, ok := tou.mutation.UpdatedBy(); ok {
		_spec.SetField(tenantoption.FieldUpdatedBy, field.TypeString, value)
	}
	if tou.mutation.UpdatedByCleared() {
		_spec.ClearField(tenantoption.FieldUpdatedBy, field.TypeString)
	}
	if tou.mutation.CreatedAtCleared() {
		_spec.ClearField(tenantoption.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := tou.mutation.UpdatedAt(); ok {
		_spec.SetField(tenantoption.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := tou.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(tenantoption.FieldUpdatedAt, field.TypeInt64, value)
	}
	if tou.mutation.UpdatedAtCleared() {
		_spec.ClearField(tenantoption.FieldUpdatedAt, field.TypeInt64)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tenantoption.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tou.mutation.done = true
	return n, nil
}

// TenantOptionUpdateOne is the builder for updating a single TenantOption entity.
type TenantOptionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TenantOptionMutation
}

// SetTenantID sets the "tenant_id" field.
func (touo *TenantOptionUpdateOne) SetTenantID(s string) *TenantOptionUpdateOne {
	touo.mutation.SetTenantID(s)
	return touo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (touo *TenantOptionUpdateOne) SetNillableTenantID(s *string) *TenantOptionUpdateOne {
	if s != nil {
		touo.SetTenantID(*s)
	}
	return touo
}

// ClearTenantID clears the value of the "tenant_id" field.
func (touo *TenantOptionUpdateOne) ClearTenantID() *TenantOptionUpdateOne {
	touo.mutation.ClearTenantID()
	return touo
}

// SetOptionID sets the "option_id" field.
func (touo *TenantOptionUpdateOne) SetOptionID(s string) *TenantOptionUpdateOne {
	touo.mutation.SetOptionID(s)
	return touo
}

// SetNillableOptionID sets the "option_id" field if the given value is not nil.
func (touo *TenantOptionUpdateOne) SetNillableOptionID(s *string) *TenantOptionUpdateOne {
	if s != nil {
		touo.SetOptionID(*s)
	}
	return touo
}

// ClearOptionID clears the value of the "option_id" field.
func (touo *TenantOptionUpdateOne) ClearOptionID() *TenantOptionUpdateOne {
	touo.mutation.ClearOptionID()
	return touo
}

// SetCreatedBy sets the "created_by" field.
func (touo *TenantOptionUpdateOne) SetCreatedBy(s string) *TenantOptionUpdateOne {
	touo.mutation.SetCreatedBy(s)
	return touo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (touo *TenantOptionUpdateOne) SetNillableCreatedBy(s *string) *TenantOptionUpdateOne {
	if s != nil {
		touo.SetCreatedBy(*s)
	}
	return touo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (touo *TenantOptionUpdateOne) ClearCreatedBy() *TenantOptionUpdateOne {
	touo.mutation.ClearCreatedBy()
	return touo
}

// SetUpdatedBy sets the "updated_by" field.
func (touo *TenantOptionUpdateOne) SetUpdatedBy(s string) *TenantOptionUpdateOne {
	touo.mutation.SetUpdatedBy(s)
	return touo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (touo *TenantOptionUpdateOne) SetNillableUpdatedBy(s *string) *TenantOptionUpdateOne {
	if s != nil {
		touo.SetUpdatedBy(*s)
	}
	return touo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (touo *TenantOptionUpdateOne) ClearUpdatedBy() *TenantOptionUpdateOne {
	touo.mutation.ClearUpdatedBy()
	return touo
}

// SetUpdatedAt sets the "updated_at" field.
func (touo *TenantOptionUpdateOne) SetUpdatedAt(i int64) *TenantOptionUpdateOne {
	touo.mutation.ResetUpdatedAt()
	touo.mutation.SetUpdatedAt(i)
	return touo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (touo *TenantOptionUpdateOne) AddUpdatedAt(i int64) *TenantOptionUpdateOne {
	touo.mutation.AddUpdatedAt(i)
	return touo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (touo *TenantOptionUpdateOne) ClearUpdatedAt() *TenantOptionUpdateOne {
	touo.mutation.ClearUpdatedAt()
	return touo
}

// Mutation returns the TenantOptionMutation object of the builder.
func (touo *TenantOptionUpdateOne) Mutation() *TenantOptionMutation {
	return touo.mutation
}

// Where appends a list predicates to the TenantOptionUpdate builder.
func (touo *TenantOptionUpdateOne) Where(ps ...predicate.TenantOption) *TenantOptionUpdateOne {
	touo.mutation.Where(ps...)
	return touo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (touo *TenantOptionUpdateOne) Select(field string, fields ...string) *TenantOptionUpdateOne {
	touo.fields = append([]string{field}, fields...)
	return touo
}

// Save executes the query and returns the updated TenantOption entity.
func (touo *TenantOptionUpdateOne) Save(ctx context.Context) (*TenantOption, error) {
	touo.defaults()
	return withHooks(ctx, touo.sqlSave, touo.mutation, touo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (touo *TenantOptionUpdateOne) SaveX(ctx context.Context) *TenantOption {
	node, err := touo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (touo *TenantOptionUpdateOne) Exec(ctx context.Context) error {
	_, err := touo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (touo *TenantOptionUpdateOne) ExecX(ctx context.Context) {
	if err := touo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (touo *TenantOptionUpdateOne) defaults() {
	if _, ok := touo.mutation.UpdatedAt(); !ok && !touo.mutation.UpdatedAtCleared() {
		v := tenantoption.UpdateDefaultUpdatedAt()
		touo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (touo *TenantOptionUpdateOne) check() error {
	if v, ok := touo.mutation.TenantID(); ok {
		if err := tenantoption.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "TenantOption.tenant_id": %w`, err)}
		}
	}
	if v, ok := touo.mutation.OptionID(); ok {
		if err := tenantoption.OptionIDValidator(v); err != nil {
			return &ValidationError{Name: "option_id", err: fmt.Errorf(`ent: validator failed for field "TenantOption.option_id": %w`, err)}
		}
	}
	if v, ok := touo.mutation.CreatedBy(); ok {
		if err := tenantoption.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "TenantOption.created_by": %w`, err)}
		}
	}
	if v, ok := touo.mutation.UpdatedBy(); ok {
		if err := tenantoption.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "TenantOption.updated_by": %w`, err)}
		}
	}
	return nil
}

func (touo *TenantOptionUpdateOne) sqlSave(ctx context.Context) (_node *TenantOption, err error) {
	if err := touo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(tenantoption.Table, tenantoption.Columns, sqlgraph.NewFieldSpec(tenantoption.FieldID, field.TypeString))
	id, ok := touo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TenantOption.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := touo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tenantoption.FieldID)
		for _, f := range fields {
			if !tenantoption.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tenantoption.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := touo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := touo.mutation.TenantID(); ok {
		_spec.SetField(tenantoption.FieldTenantID, field.TypeString, value)
	}
	if touo.mutation.TenantIDCleared() {
		_spec.ClearField(tenantoption.FieldTenantID, field.TypeString)
	}
	if value, ok := touo.mutation.OptionID(); ok {
		_spec.SetField(tenantoption.FieldOptionID, field.TypeString, value)
	}
	if touo.mutation.OptionIDCleared() {
		_spec.ClearField(tenantoption.FieldOptionID, field.TypeString)
	}
	if value, ok := touo.mutation.CreatedBy(); ok {
		_spec.SetField(tenantoption.FieldCreatedBy, field.TypeString, value)
	}
	if touo.mutation.CreatedByCleared() {
		_spec.ClearField(tenantoption.FieldCreatedBy, field.TypeString)
	}
	if value, ok := touo.mutation.UpdatedBy(); ok {
		_spec.SetField(tenantoption.FieldUpdatedBy, field.TypeString, value)
	}
	if touo.mutation.UpdatedByCleared() {
		_spec.ClearField(tenantoption.FieldUpdatedBy, field.TypeString)
	}
	if touo.mutation.CreatedAtCleared() {
		_spec.ClearField(tenantoption.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := touo.mutation.UpdatedAt(); ok {
		_spec.SetField(tenantoption.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := touo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(tenantoption.FieldUpdatedAt, field.TypeInt64, value)
	}
	if touo.mutation.UpdatedAtCleared() {
		_spec.ClearField(tenantoption.FieldUpdatedAt, field.TypeInt64)
	}
	_node = &TenantOption{config: touo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, touo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tenantoption.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	touo.mutation.done = true
	return _node, nil
}
