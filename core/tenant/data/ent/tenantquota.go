// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"ncobase/tenant/data/ent/tenantquota"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// TenantQuota is the model entity for the TenantQuota schema.
type TenantQuota struct {
	config `json:"-"`
	// ID of the ent.
	// primary key
	ID string `json:"id,omitempty"`
	// tenant id
	TenantID string `json:"tenant_id,omitempty"`
	// description
	Description string `json:"description,omitempty"`
	// Extend properties
	Extras map[string]interface{} `json:"extras,omitempty"`
	// id of the creator
	CreatedBy string `json:"created_by,omitempty"`
	// id of the last updater
	UpdatedBy string `json:"updated_by,omitempty"`
	// created at
	CreatedAt int64 `json:"created_at,omitempty"`
	// updated at
	UpdatedAt int64 `json:"updated_at,omitempty"`
	// Type of quota (users, storage, api_calls, etc.)
	QuotaType string `json:"quota_type,omitempty"`
	// Human readable name of the quota
	QuotaName string `json:"quota_name,omitempty"`
	// Maximum allowed value for this quota
	MaxValue int64 `json:"max_value,omitempty"`
	// Current usage of this quota
	CurrentUsed int64 `json:"current_used,omitempty"`
	// Unit of measurement (count, bytes, mb, gb, tb)
	Unit string `json:"unit,omitempty"`
	// Whether this quota is actively enforced
	Enabled      bool `json:"enabled,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TenantQuota) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case tenantquota.FieldExtras:
			values[i] = new([]byte)
		case tenantquota.FieldEnabled:
			values[i] = new(sql.NullBool)
		case tenantquota.FieldCreatedAt, tenantquota.FieldUpdatedAt, tenantquota.FieldMaxValue, tenantquota.FieldCurrentUsed:
			values[i] = new(sql.NullInt64)
		case tenantquota.FieldID, tenantquota.FieldTenantID, tenantquota.FieldDescription, tenantquota.FieldCreatedBy, tenantquota.FieldUpdatedBy, tenantquota.FieldQuotaType, tenantquota.FieldQuotaName, tenantquota.FieldUnit:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TenantQuota fields.
func (tq *TenantQuota) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tenantquota.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				tq.ID = value.String
			}
		case tenantquota.FieldTenantID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				tq.TenantID = value.String
			}
		case tenantquota.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				tq.Description = value.String
			}
		case tenantquota.FieldExtras:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field extras", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &tq.Extras); err != nil {
					return fmt.Errorf("unmarshal field extras: %w", err)
				}
			}
		case tenantquota.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				tq.CreatedBy = value.String
			}
		case tenantquota.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				tq.UpdatedBy = value.String
			}
		case tenantquota.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				tq.CreatedAt = value.Int64
			}
		case tenantquota.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				tq.UpdatedAt = value.Int64
			}
		case tenantquota.FieldQuotaType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field quota_type", values[i])
			} else if value.Valid {
				tq.QuotaType = value.String
			}
		case tenantquota.FieldQuotaName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field quota_name", values[i])
			} else if value.Valid {
				tq.QuotaName = value.String
			}
		case tenantquota.FieldMaxValue:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field max_value", values[i])
			} else if value.Valid {
				tq.MaxValue = value.Int64
			}
		case tenantquota.FieldCurrentUsed:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field current_used", values[i])
			} else if value.Valid {
				tq.CurrentUsed = value.Int64
			}
		case tenantquota.FieldUnit:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field unit", values[i])
			} else if value.Valid {
				tq.Unit = value.String
			}
		case tenantquota.FieldEnabled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field enabled", values[i])
			} else if value.Valid {
				tq.Enabled = value.Bool
			}
		default:
			tq.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TenantQuota.
// This includes values selected through modifiers, order, etc.
func (tq *TenantQuota) Value(name string) (ent.Value, error) {
	return tq.selectValues.Get(name)
}

// Update returns a builder for updating this TenantQuota.
// Note that you need to call TenantQuota.Unwrap() before calling this method if this TenantQuota
// was returned from a transaction, and the transaction was committed or rolled back.
func (tq *TenantQuota) Update() *TenantQuotaUpdateOne {
	return NewTenantQuotaClient(tq.config).UpdateOne(tq)
}

// Unwrap unwraps the TenantQuota entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tq *TenantQuota) Unwrap() *TenantQuota {
	_tx, ok := tq.config.driver.(*txDriver)
	if !ok {
		panic("ent: TenantQuota is not a transactional entity")
	}
	tq.config.driver = _tx.drv
	return tq
}

// String implements the fmt.Stringer.
func (tq *TenantQuota) String() string {
	var builder strings.Builder
	builder.WriteString("TenantQuota(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tq.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(tq.TenantID)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(tq.Description)
	builder.WriteString(", ")
	builder.WriteString("extras=")
	builder.WriteString(fmt.Sprintf("%v", tq.Extras))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(tq.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(tq.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", tq.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", tq.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("quota_type=")
	builder.WriteString(tq.QuotaType)
	builder.WriteString(", ")
	builder.WriteString("quota_name=")
	builder.WriteString(tq.QuotaName)
	builder.WriteString(", ")
	builder.WriteString("max_value=")
	builder.WriteString(fmt.Sprintf("%v", tq.MaxValue))
	builder.WriteString(", ")
	builder.WriteString("current_used=")
	builder.WriteString(fmt.Sprintf("%v", tq.CurrentUsed))
	builder.WriteString(", ")
	builder.WriteString("unit=")
	builder.WriteString(tq.Unit)
	builder.WriteString(", ")
	builder.WriteString("enabled=")
	builder.WriteString(fmt.Sprintf("%v", tq.Enabled))
	builder.WriteByte(')')
	return builder.String()
}

// TenantQuotaSlice is a parsable slice of TenantQuota.
type TenantQuotaSlice []*TenantQuota
