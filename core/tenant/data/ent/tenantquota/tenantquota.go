// Code generated by ent, DO NOT EDIT.

package tenantquota

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the tenantquota type in the database.
	Label = "tenant_quota"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldExtras holds the string denoting the extras field in the database.
	FieldExtras = "extras"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldQuotaType holds the string denoting the quota_type field in the database.
	FieldQuotaType = "quota_type"
	// FieldQuotaName holds the string denoting the quota_name field in the database.
	FieldQuotaName = "quota_name"
	// FieldMaxValue holds the string denoting the max_value field in the database.
	FieldMaxValue = "max_value"
	// FieldCurrentUsed holds the string denoting the current_used field in the database.
	FieldCurrentUsed = "current_used"
	// FieldUnit holds the string denoting the unit field in the database.
	FieldUnit = "unit"
	// FieldEnabled holds the string denoting the enabled field in the database.
	FieldEnabled = "enabled"
	// Table holds the table name of the tenantquota in the database.
	Table = "ncse_sys_tenant_quota"
)

// Columns holds all SQL columns for tenantquota fields.
var Columns = []string{
	FieldID,
	FieldTenantID,
	FieldDescription,
	FieldExtras,
	FieldCreatedBy,
	FieldUpdatedBy,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldQuotaType,
	FieldQuotaName,
	FieldMaxValue,
	FieldCurrentUsed,
	FieldUnit,
	FieldEnabled,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// TenantIDValidator is a validator for the "tenant_id" field. It is called by the builders before save.
	TenantIDValidator func(string) error
	// DefaultExtras holds the default value on creation for the "extras" field.
	DefaultExtras map[string]interface{}
	// CreatedByValidator is a validator for the "created_by" field. It is called by the builders before save.
	CreatedByValidator func(string) error
	// UpdatedByValidator is a validator for the "updated_by" field. It is called by the builders before save.
	UpdatedByValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() int64
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() int64
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() int64
	// QuotaTypeValidator is a validator for the "quota_type" field. It is called by the builders before save.
	QuotaTypeValidator func(string) error
	// QuotaNameValidator is a validator for the "quota_name" field. It is called by the builders before save.
	QuotaNameValidator func(string) error
	// MaxValueValidator is a validator for the "max_value" field. It is called by the builders before save.
	MaxValueValidator func(int64) error
	// DefaultCurrentUsed holds the default value on creation for the "current_used" field.
	DefaultCurrentUsed int64
	// CurrentUsedValidator is a validator for the "current_used" field. It is called by the builders before save.
	CurrentUsedValidator func(int64) error
	// DefaultUnit holds the default value on creation for the "unit" field.
	DefaultUnit string
	// DefaultEnabled holds the default value on creation for the "enabled" field.
	DefaultEnabled bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)

// OrderOption defines the ordering options for the TenantQuota queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the updated_by field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByQuotaType orders the results by the quota_type field.
func ByQuotaType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldQuotaType, opts...).ToFunc()
}

// ByQuotaName orders the results by the quota_name field.
func ByQuotaName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldQuotaName, opts...).ToFunc()
}

// ByMaxValue orders the results by the max_value field.
func ByMaxValue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMaxValue, opts...).ToFunc()
}

// ByCurrentUsed orders the results by the current_used field.
func ByCurrentUsed(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCurrentUsed, opts...).ToFunc()
}

// ByUnit orders the results by the unit field.
func ByUnit(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUnit, opts...).ToFunc()
}

// ByEnabled orders the results by the enabled field.
func ByEnabled(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEnabled, opts...).ToFunc()
}
