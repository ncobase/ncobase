// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/tenant/data/ent/tenantquota"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TenantQuotaCreate is the builder for creating a TenantQuota entity.
type TenantQuotaCreate struct {
	config
	mutation *TenantQuotaMutation
	hooks    []Hook
}

// SetTenantID sets the "tenant_id" field.
func (tqc *TenantQuotaCreate) SetTenantID(s string) *TenantQuotaCreate {
	tqc.mutation.SetTenantID(s)
	return tqc
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (tqc *TenantQuotaCreate) SetNillableTenantID(s *string) *TenantQuotaCreate {
	if s != nil {
		tqc.SetTenantID(*s)
	}
	return tqc
}

// SetDescription sets the "description" field.
func (tqc *TenantQuotaCreate) SetDescription(s string) *TenantQuotaCreate {
	tqc.mutation.SetDescription(s)
	return tqc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tqc *TenantQuotaCreate) SetNillableDescription(s *string) *TenantQuotaCreate {
	if s != nil {
		tqc.SetDescription(*s)
	}
	return tqc
}

// SetExtras sets the "extras" field.
func (tqc *TenantQuotaCreate) SetExtras(m map[string]interface{}) *TenantQuotaCreate {
	tqc.mutation.SetExtras(m)
	return tqc
}

// SetCreatedBy sets the "created_by" field.
func (tqc *TenantQuotaCreate) SetCreatedBy(s string) *TenantQuotaCreate {
	tqc.mutation.SetCreatedBy(s)
	return tqc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (tqc *TenantQuotaCreate) SetNillableCreatedBy(s *string) *TenantQuotaCreate {
	if s != nil {
		tqc.SetCreatedBy(*s)
	}
	return tqc
}

// SetUpdatedBy sets the "updated_by" field.
func (tqc *TenantQuotaCreate) SetUpdatedBy(s string) *TenantQuotaCreate {
	tqc.mutation.SetUpdatedBy(s)
	return tqc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (tqc *TenantQuotaCreate) SetNillableUpdatedBy(s *string) *TenantQuotaCreate {
	if s != nil {
		tqc.SetUpdatedBy(*s)
	}
	return tqc
}

// SetCreatedAt sets the "created_at" field.
func (tqc *TenantQuotaCreate) SetCreatedAt(i int64) *TenantQuotaCreate {
	tqc.mutation.SetCreatedAt(i)
	return tqc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tqc *TenantQuotaCreate) SetNillableCreatedAt(i *int64) *TenantQuotaCreate {
	if i != nil {
		tqc.SetCreatedAt(*i)
	}
	return tqc
}

// SetUpdatedAt sets the "updated_at" field.
func (tqc *TenantQuotaCreate) SetUpdatedAt(i int64) *TenantQuotaCreate {
	tqc.mutation.SetUpdatedAt(i)
	return tqc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tqc *TenantQuotaCreate) SetNillableUpdatedAt(i *int64) *TenantQuotaCreate {
	if i != nil {
		tqc.SetUpdatedAt(*i)
	}
	return tqc
}

// SetQuotaType sets the "quota_type" field.
func (tqc *TenantQuotaCreate) SetQuotaType(s string) *TenantQuotaCreate {
	tqc.mutation.SetQuotaType(s)
	return tqc
}

// SetQuotaName sets the "quota_name" field.
func (tqc *TenantQuotaCreate) SetQuotaName(s string) *TenantQuotaCreate {
	tqc.mutation.SetQuotaName(s)
	return tqc
}

// SetMaxValue sets the "max_value" field.
func (tqc *TenantQuotaCreate) SetMaxValue(i int64) *TenantQuotaCreate {
	tqc.mutation.SetMaxValue(i)
	return tqc
}

// SetCurrentUsed sets the "current_used" field.
func (tqc *TenantQuotaCreate) SetCurrentUsed(i int64) *TenantQuotaCreate {
	tqc.mutation.SetCurrentUsed(i)
	return tqc
}

// SetNillableCurrentUsed sets the "current_used" field if the given value is not nil.
func (tqc *TenantQuotaCreate) SetNillableCurrentUsed(i *int64) *TenantQuotaCreate {
	if i != nil {
		tqc.SetCurrentUsed(*i)
	}
	return tqc
}

// SetUnit sets the "unit" field.
func (tqc *TenantQuotaCreate) SetUnit(s string) *TenantQuotaCreate {
	tqc.mutation.SetUnit(s)
	return tqc
}

// SetNillableUnit sets the "unit" field if the given value is not nil.
func (tqc *TenantQuotaCreate) SetNillableUnit(s *string) *TenantQuotaCreate {
	if s != nil {
		tqc.SetUnit(*s)
	}
	return tqc
}

// SetEnabled sets the "enabled" field.
func (tqc *TenantQuotaCreate) SetEnabled(b bool) *TenantQuotaCreate {
	tqc.mutation.SetEnabled(b)
	return tqc
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (tqc *TenantQuotaCreate) SetNillableEnabled(b *bool) *TenantQuotaCreate {
	if b != nil {
		tqc.SetEnabled(*b)
	}
	return tqc
}

// SetID sets the "id" field.
func (tqc *TenantQuotaCreate) SetID(s string) *TenantQuotaCreate {
	tqc.mutation.SetID(s)
	return tqc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (tqc *TenantQuotaCreate) SetNillableID(s *string) *TenantQuotaCreate {
	if s != nil {
		tqc.SetID(*s)
	}
	return tqc
}

// Mutation returns the TenantQuotaMutation object of the builder.
func (tqc *TenantQuotaCreate) Mutation() *TenantQuotaMutation {
	return tqc.mutation
}

// Save creates the TenantQuota in the database.
func (tqc *TenantQuotaCreate) Save(ctx context.Context) (*TenantQuota, error) {
	tqc.defaults()
	return withHooks(ctx, tqc.sqlSave, tqc.mutation, tqc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tqc *TenantQuotaCreate) SaveX(ctx context.Context) *TenantQuota {
	v, err := tqc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tqc *TenantQuotaCreate) Exec(ctx context.Context) error {
	_, err := tqc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tqc *TenantQuotaCreate) ExecX(ctx context.Context) {
	if err := tqc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tqc *TenantQuotaCreate) defaults() {
	if _, ok := tqc.mutation.Extras(); !ok {
		v := tenantquota.DefaultExtras
		tqc.mutation.SetExtras(v)
	}
	if _, ok := tqc.mutation.CreatedAt(); !ok {
		v := tenantquota.DefaultCreatedAt()
		tqc.mutation.SetCreatedAt(v)
	}
	if _, ok := tqc.mutation.UpdatedAt(); !ok {
		v := tenantquota.DefaultUpdatedAt()
		tqc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tqc.mutation.CurrentUsed(); !ok {
		v := tenantquota.DefaultCurrentUsed
		tqc.mutation.SetCurrentUsed(v)
	}
	if _, ok := tqc.mutation.Unit(); !ok {
		v := tenantquota.DefaultUnit
		tqc.mutation.SetUnit(v)
	}
	if _, ok := tqc.mutation.Enabled(); !ok {
		v := tenantquota.DefaultEnabled
		tqc.mutation.SetEnabled(v)
	}
	if _, ok := tqc.mutation.ID(); !ok {
		v := tenantquota.DefaultID()
		tqc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tqc *TenantQuotaCreate) check() error {
	if _, ok := tqc.mutation.QuotaType(); !ok {
		return &ValidationError{Name: "quota_type", err: errors.New(`ent: missing required field "TenantQuota.quota_type"`)}
	}
	if v, ok := tqc.mutation.QuotaType(); ok {
		if err := tenantquota.QuotaTypeValidator(v); err != nil {
			return &ValidationError{Name: "quota_type", err: fmt.Errorf(`ent: validator failed for field "TenantQuota.quota_type": %w`, err)}
		}
	}
	if _, ok := tqc.mutation.QuotaName(); !ok {
		return &ValidationError{Name: "quota_name", err: errors.New(`ent: missing required field "TenantQuota.quota_name"`)}
	}
	if v, ok := tqc.mutation.QuotaName(); ok {
		if err := tenantquota.QuotaNameValidator(v); err != nil {
			return &ValidationError{Name: "quota_name", err: fmt.Errorf(`ent: validator failed for field "TenantQuota.quota_name": %w`, err)}
		}
	}
	if _, ok := tqc.mutation.MaxValue(); !ok {
		return &ValidationError{Name: "max_value", err: errors.New(`ent: missing required field "TenantQuota.max_value"`)}
	}
	if v, ok := tqc.mutation.MaxValue(); ok {
		if err := tenantquota.MaxValueValidator(v); err != nil {
			return &ValidationError{Name: "max_value", err: fmt.Errorf(`ent: validator failed for field "TenantQuota.max_value": %w`, err)}
		}
	}
	if _, ok := tqc.mutation.CurrentUsed(); !ok {
		return &ValidationError{Name: "current_used", err: errors.New(`ent: missing required field "TenantQuota.current_used"`)}
	}
	if v, ok := tqc.mutation.CurrentUsed(); ok {
		if err := tenantquota.CurrentUsedValidator(v); err != nil {
			return &ValidationError{Name: "current_used", err: fmt.Errorf(`ent: validator failed for field "TenantQuota.current_used": %w`, err)}
		}
	}
	if _, ok := tqc.mutation.Unit(); !ok {
		return &ValidationError{Name: "unit", err: errors.New(`ent: missing required field "TenantQuota.unit"`)}
	}
	if _, ok := tqc.mutation.Enabled(); !ok {
		return &ValidationError{Name: "enabled", err: errors.New(`ent: missing required field "TenantQuota.enabled"`)}
	}
	if v, ok := tqc.mutation.ID(); ok {
		if err := tenantquota.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "TenantQuota.id": %w`, err)}
		}
	}
	return nil
}

func (tqc *TenantQuotaCreate) sqlSave(ctx context.Context) (*TenantQuota, error) {
	if err := tqc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tqc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tqc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected TenantQuota.ID type: %T", _spec.ID.Value)
		}
	}
	tqc.mutation.id = &_node.ID
	tqc.mutation.done = true
	return _node, nil
}

func (tqc *TenantQuotaCreate) createSpec() (*TenantQuota, *sqlgraph.CreateSpec) {
	var (
		_node = &TenantQuota{config: tqc.config}
		_spec = sqlgraph.NewCreateSpec(tenantquota.Table, sqlgraph.NewFieldSpec(tenantquota.FieldID, field.TypeString))
	)
	if id, ok := tqc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tqc.mutation.TenantID(); ok {
		_spec.SetField(tenantquota.FieldTenantID, field.TypeString, value)
		_node.TenantID = value
	}
	if value, ok := tqc.mutation.Description(); ok {
		_spec.SetField(tenantquota.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := tqc.mutation.Extras(); ok {
		_spec.SetField(tenantquota.FieldExtras, field.TypeJSON, value)
		_node.Extras = value
	}
	if value, ok := tqc.mutation.CreatedBy(); ok {
		_spec.SetField(tenantquota.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := tqc.mutation.UpdatedBy(); ok {
		_spec.SetField(tenantquota.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := tqc.mutation.CreatedAt(); ok {
		_spec.SetField(tenantquota.FieldCreatedAt, field.TypeInt64, value)
		_node.CreatedAt = value
	}
	if value, ok := tqc.mutation.UpdatedAt(); ok {
		_spec.SetField(tenantquota.FieldUpdatedAt, field.TypeInt64, value)
		_node.UpdatedAt = value
	}
	if value, ok := tqc.mutation.QuotaType(); ok {
		_spec.SetField(tenantquota.FieldQuotaType, field.TypeString, value)
		_node.QuotaType = value
	}
	if value, ok := tqc.mutation.QuotaName(); ok {
		_spec.SetField(tenantquota.FieldQuotaName, field.TypeString, value)
		_node.QuotaName = value
	}
	if value, ok := tqc.mutation.MaxValue(); ok {
		_spec.SetField(tenantquota.FieldMaxValue, field.TypeInt64, value)
		_node.MaxValue = value
	}
	if value, ok := tqc.mutation.CurrentUsed(); ok {
		_spec.SetField(tenantquota.FieldCurrentUsed, field.TypeInt64, value)
		_node.CurrentUsed = value
	}
	if value, ok := tqc.mutation.Unit(); ok {
		_spec.SetField(tenantquota.FieldUnit, field.TypeString, value)
		_node.Unit = value
	}
	if value, ok := tqc.mutation.Enabled(); ok {
		_spec.SetField(tenantquota.FieldEnabled, field.TypeBool, value)
		_node.Enabled = value
	}
	return _node, _spec
}

// TenantQuotaCreateBulk is the builder for creating many TenantQuota entities in bulk.
type TenantQuotaCreateBulk struct {
	config
	err      error
	builders []*TenantQuotaCreate
}

// Save creates the TenantQuota entities in the database.
func (tqcb *TenantQuotaCreateBulk) Save(ctx context.Context) ([]*TenantQuota, error) {
	if tqcb.err != nil {
		return nil, tqcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tqcb.builders))
	nodes := make([]*TenantQuota, len(tqcb.builders))
	mutators := make([]Mutator, len(tqcb.builders))
	for i := range tqcb.builders {
		func(i int, root context.Context) {
			builder := tqcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TenantQuotaMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tqcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tqcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tqcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tqcb *TenantQuotaCreateBulk) SaveX(ctx context.Context) []*TenantQuota {
	v, err := tqcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tqcb *TenantQuotaCreateBulk) Exec(ctx context.Context) error {
	_, err := tqcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tqcb *TenantQuotaCreateBulk) ExecX(ctx context.Context) {
	if err := tqcb.Exec(ctx); err != nil {
		panic(err)
	}
}
