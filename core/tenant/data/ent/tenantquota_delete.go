// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"ncobase/tenant/data/ent/predicate"
	"ncobase/tenant/data/ent/tenantquota"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TenantQuotaDelete is the builder for deleting a TenantQuota entity.
type TenantQuotaDelete struct {
	config
	hooks    []Hook
	mutation *TenantQuotaMutation
}

// Where appends a list predicates to the TenantQuotaDelete builder.
func (tqd *TenantQuotaDelete) Where(ps ...predicate.TenantQuota) *TenantQuotaDelete {
	tqd.mutation.Where(ps...)
	return tqd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (tqd *TenantQuotaDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, tqd.sqlExec, tqd.mutation, tqd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (tqd *TenantQuotaDelete) ExecX(ctx context.Context) int {
	n, err := tqd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (tqd *TenantQuotaDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(tenantquota.Table, sqlgraph.NewFieldSpec(tenantquota.FieldID, field.TypeString))
	if ps := tqd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, tqd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	tqd.mutation.done = true
	return affected, err
}

// TenantQuotaDeleteOne is the builder for deleting a single TenantQuota entity.
type TenantQuotaDeleteOne struct {
	tqd *TenantQuotaDelete
}

// Where appends a list predicates to the TenantQuotaDelete builder.
func (tqdo *TenantQuotaDeleteOne) Where(ps ...predicate.TenantQuota) *TenantQuotaDeleteOne {
	tqdo.tqd.mutation.Where(ps...)
	return tqdo
}

// Exec executes the deletion query.
func (tqdo *TenantQuotaDeleteOne) Exec(ctx context.Context) error {
	n, err := tqdo.tqd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{tenantquota.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (tqdo *TenantQuotaDeleteOne) ExecX(ctx context.Context) {
	if err := tqdo.Exec(ctx); err != nil {
		panic(err)
	}
}
