// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/tenant/data/ent/predicate"
	"ncobase/tenant/data/ent/tenantquota"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TenantQuotaUpdate is the builder for updating TenantQuota entities.
type TenantQuotaUpdate struct {
	config
	hooks    []Hook
	mutation *TenantQuotaMutation
}

// Where appends a list predicates to the TenantQuotaUpdate builder.
func (tqu *TenantQuotaUpdate) Where(ps ...predicate.TenantQuota) *TenantQuotaUpdate {
	tqu.mutation.Where(ps...)
	return tqu
}

// SetTenantID sets the "tenant_id" field.
func (tqu *TenantQuotaUpdate) SetTenantID(s string) *TenantQuotaUpdate {
	tqu.mutation.SetTenantID(s)
	return tqu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (tqu *TenantQuotaUpdate) SetNillableTenantID(s *string) *TenantQuotaUpdate {
	if s != nil {
		tqu.SetTenantID(*s)
	}
	return tqu
}

// ClearTenantID clears the value of the "tenant_id" field.
func (tqu *TenantQuotaUpdate) ClearTenantID() *TenantQuotaUpdate {
	tqu.mutation.ClearTenantID()
	return tqu
}

// SetDescription sets the "description" field.
func (tqu *TenantQuotaUpdate) SetDescription(s string) *TenantQuotaUpdate {
	tqu.mutation.SetDescription(s)
	return tqu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tqu *TenantQuotaUpdate) SetNillableDescription(s *string) *TenantQuotaUpdate {
	if s != nil {
		tqu.SetDescription(*s)
	}
	return tqu
}

// ClearDescription clears the value of the "description" field.
func (tqu *TenantQuotaUpdate) ClearDescription() *TenantQuotaUpdate {
	tqu.mutation.ClearDescription()
	return tqu
}

// SetExtras sets the "extras" field.
func (tqu *TenantQuotaUpdate) SetExtras(m map[string]interface{}) *TenantQuotaUpdate {
	tqu.mutation.SetExtras(m)
	return tqu
}

// ClearExtras clears the value of the "extras" field.
func (tqu *TenantQuotaUpdate) ClearExtras() *TenantQuotaUpdate {
	tqu.mutation.ClearExtras()
	return tqu
}

// SetCreatedBy sets the "created_by" field.
func (tqu *TenantQuotaUpdate) SetCreatedBy(s string) *TenantQuotaUpdate {
	tqu.mutation.SetCreatedBy(s)
	return tqu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (tqu *TenantQuotaUpdate) SetNillableCreatedBy(s *string) *TenantQuotaUpdate {
	if s != nil {
		tqu.SetCreatedBy(*s)
	}
	return tqu
}

// ClearCreatedBy clears the value of the "created_by" field.
func (tqu *TenantQuotaUpdate) ClearCreatedBy() *TenantQuotaUpdate {
	tqu.mutation.ClearCreatedBy()
	return tqu
}

// SetUpdatedBy sets the "updated_by" field.
func (tqu *TenantQuotaUpdate) SetUpdatedBy(s string) *TenantQuotaUpdate {
	tqu.mutation.SetUpdatedBy(s)
	return tqu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (tqu *TenantQuotaUpdate) SetNillableUpdatedBy(s *string) *TenantQuotaUpdate {
	if s != nil {
		tqu.SetUpdatedBy(*s)
	}
	return tqu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (tqu *TenantQuotaUpdate) ClearUpdatedBy() *TenantQuotaUpdate {
	tqu.mutation.ClearUpdatedBy()
	return tqu
}

// SetUpdatedAt sets the "updated_at" field.
func (tqu *TenantQuotaUpdate) SetUpdatedAt(i int64) *TenantQuotaUpdate {
	tqu.mutation.ResetUpdatedAt()
	tqu.mutation.SetUpdatedAt(i)
	return tqu
}

// AddUpdatedAt adds i to the "updated_at" field.
func (tqu *TenantQuotaUpdate) AddUpdatedAt(i int64) *TenantQuotaUpdate {
	tqu.mutation.AddUpdatedAt(i)
	return tqu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tqu *TenantQuotaUpdate) ClearUpdatedAt() *TenantQuotaUpdate {
	tqu.mutation.ClearUpdatedAt()
	return tqu
}

// SetQuotaType sets the "quota_type" field.
func (tqu *TenantQuotaUpdate) SetQuotaType(s string) *TenantQuotaUpdate {
	tqu.mutation.SetQuotaType(s)
	return tqu
}

// SetNillableQuotaType sets the "quota_type" field if the given value is not nil.
func (tqu *TenantQuotaUpdate) SetNillableQuotaType(s *string) *TenantQuotaUpdate {
	if s != nil {
		tqu.SetQuotaType(*s)
	}
	return tqu
}

// SetQuotaName sets the "quota_name" field.
func (tqu *TenantQuotaUpdate) SetQuotaName(s string) *TenantQuotaUpdate {
	tqu.mutation.SetQuotaName(s)
	return tqu
}

// SetNillableQuotaName sets the "quota_name" field if the given value is not nil.
func (tqu *TenantQuotaUpdate) SetNillableQuotaName(s *string) *TenantQuotaUpdate {
	if s != nil {
		tqu.SetQuotaName(*s)
	}
	return tqu
}

// SetMaxValue sets the "max_value" field.
func (tqu *TenantQuotaUpdate) SetMaxValue(i int64) *TenantQuotaUpdate {
	tqu.mutation.ResetMaxValue()
	tqu.mutation.SetMaxValue(i)
	return tqu
}

// SetNillableMaxValue sets the "max_value" field if the given value is not nil.
func (tqu *TenantQuotaUpdate) SetNillableMaxValue(i *int64) *TenantQuotaUpdate {
	if i != nil {
		tqu.SetMaxValue(*i)
	}
	return tqu
}

// AddMaxValue adds i to the "max_value" field.
func (tqu *TenantQuotaUpdate) AddMaxValue(i int64) *TenantQuotaUpdate {
	tqu.mutation.AddMaxValue(i)
	return tqu
}

// SetCurrentUsed sets the "current_used" field.
func (tqu *TenantQuotaUpdate) SetCurrentUsed(i int64) *TenantQuotaUpdate {
	tqu.mutation.ResetCurrentUsed()
	tqu.mutation.SetCurrentUsed(i)
	return tqu
}

// SetNillableCurrentUsed sets the "current_used" field if the given value is not nil.
func (tqu *TenantQuotaUpdate) SetNillableCurrentUsed(i *int64) *TenantQuotaUpdate {
	if i != nil {
		tqu.SetCurrentUsed(*i)
	}
	return tqu
}

// AddCurrentUsed adds i to the "current_used" field.
func (tqu *TenantQuotaUpdate) AddCurrentUsed(i int64) *TenantQuotaUpdate {
	tqu.mutation.AddCurrentUsed(i)
	return tqu
}

// SetUnit sets the "unit" field.
func (tqu *TenantQuotaUpdate) SetUnit(s string) *TenantQuotaUpdate {
	tqu.mutation.SetUnit(s)
	return tqu
}

// SetNillableUnit sets the "unit" field if the given value is not nil.
func (tqu *TenantQuotaUpdate) SetNillableUnit(s *string) *TenantQuotaUpdate {
	if s != nil {
		tqu.SetUnit(*s)
	}
	return tqu
}

// SetEnabled sets the "enabled" field.
func (tqu *TenantQuotaUpdate) SetEnabled(b bool) *TenantQuotaUpdate {
	tqu.mutation.SetEnabled(b)
	return tqu
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (tqu *TenantQuotaUpdate) SetNillableEnabled(b *bool) *TenantQuotaUpdate {
	if b != nil {
		tqu.SetEnabled(*b)
	}
	return tqu
}

// Mutation returns the TenantQuotaMutation object of the builder.
func (tqu *TenantQuotaUpdate) Mutation() *TenantQuotaMutation {
	return tqu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tqu *TenantQuotaUpdate) Save(ctx context.Context) (int, error) {
	tqu.defaults()
	return withHooks(ctx, tqu.sqlSave, tqu.mutation, tqu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tqu *TenantQuotaUpdate) SaveX(ctx context.Context) int {
	affected, err := tqu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tqu *TenantQuotaUpdate) Exec(ctx context.Context) error {
	_, err := tqu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tqu *TenantQuotaUpdate) ExecX(ctx context.Context) {
	if err := tqu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tqu *TenantQuotaUpdate) defaults() {
	if _, ok := tqu.mutation.UpdatedAt(); !ok && !tqu.mutation.UpdatedAtCleared() {
		v := tenantquota.UpdateDefaultUpdatedAt()
		tqu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tqu *TenantQuotaUpdate) check() error {
	if v, ok := tqu.mutation.QuotaType(); ok {
		if err := tenantquota.QuotaTypeValidator(v); err != nil {
			return &ValidationError{Name: "quota_type", err: fmt.Errorf(`ent: validator failed for field "TenantQuota.quota_type": %w`, err)}
		}
	}
	if v, ok := tqu.mutation.QuotaName(); ok {
		if err := tenantquota.QuotaNameValidator(v); err != nil {
			return &ValidationError{Name: "quota_name", err: fmt.Errorf(`ent: validator failed for field "TenantQuota.quota_name": %w`, err)}
		}
	}
	if v, ok := tqu.mutation.MaxValue(); ok {
		if err := tenantquota.MaxValueValidator(v); err != nil {
			return &ValidationError{Name: "max_value", err: fmt.Errorf(`ent: validator failed for field "TenantQuota.max_value": %w`, err)}
		}
	}
	if v, ok := tqu.mutation.CurrentUsed(); ok {
		if err := tenantquota.CurrentUsedValidator(v); err != nil {
			return &ValidationError{Name: "current_used", err: fmt.Errorf(`ent: validator failed for field "TenantQuota.current_used": %w`, err)}
		}
	}
	return nil
}

func (tqu *TenantQuotaUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tqu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(tenantquota.Table, tenantquota.Columns, sqlgraph.NewFieldSpec(tenantquota.FieldID, field.TypeString))
	if ps := tqu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tqu.mutation.TenantID(); ok {
		_spec.SetField(tenantquota.FieldTenantID, field.TypeString, value)
	}
	if tqu.mutation.TenantIDCleared() {
		_spec.ClearField(tenantquota.FieldTenantID, field.TypeString)
	}
	if value, ok := tqu.mutation.Description(); ok {
		_spec.SetField(tenantquota.FieldDescription, field.TypeString, value)
	}
	if tqu.mutation.DescriptionCleared() {
		_spec.ClearField(tenantquota.FieldDescription, field.TypeString)
	}
	if value, ok := tqu.mutation.Extras(); ok {
		_spec.SetField(tenantquota.FieldExtras, field.TypeJSON, value)
	}
	if tqu.mutation.ExtrasCleared() {
		_spec.ClearField(tenantquota.FieldExtras, field.TypeJSON)
	}
	if value, ok := tqu.mutation.CreatedBy(); ok {
		_spec.SetField(tenantquota.FieldCreatedBy, field.TypeString, value)
	}
	if tqu.mutation.CreatedByCleared() {
		_spec.ClearField(tenantquota.FieldCreatedBy, field.TypeString)
	}
	if value, ok := tqu.mutation.UpdatedBy(); ok {
		_spec.SetField(tenantquota.FieldUpdatedBy, field.TypeString, value)
	}
	if tqu.mutation.UpdatedByCleared() {
		_spec.ClearField(tenantquota.FieldUpdatedBy, field.TypeString)
	}
	if tqu.mutation.CreatedAtCleared() {
		_spec.ClearField(tenantquota.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := tqu.mutation.UpdatedAt(); ok {
		_spec.SetField(tenantquota.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := tqu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(tenantquota.FieldUpdatedAt, field.TypeInt64, value)
	}
	if tqu.mutation.UpdatedAtCleared() {
		_spec.ClearField(tenantquota.FieldUpdatedAt, field.TypeInt64)
	}
	if value, ok := tqu.mutation.QuotaType(); ok {
		_spec.SetField(tenantquota.FieldQuotaType, field.TypeString, value)
	}
	if value, ok := tqu.mutation.QuotaName(); ok {
		_spec.SetField(tenantquota.FieldQuotaName, field.TypeString, value)
	}
	if value, ok := tqu.mutation.MaxValue(); ok {
		_spec.SetField(tenantquota.FieldMaxValue, field.TypeInt64, value)
	}
	if value, ok := tqu.mutation.AddedMaxValue(); ok {
		_spec.AddField(tenantquota.FieldMaxValue, field.TypeInt64, value)
	}
	if value, ok := tqu.mutation.CurrentUsed(); ok {
		_spec.SetField(tenantquota.FieldCurrentUsed, field.TypeInt64, value)
	}
	if value, ok := tqu.mutation.AddedCurrentUsed(); ok {
		_spec.AddField(tenantquota.FieldCurrentUsed, field.TypeInt64, value)
	}
	if value, ok := tqu.mutation.Unit(); ok {
		_spec.SetField(tenantquota.FieldUnit, field.TypeString, value)
	}
	if value, ok := tqu.mutation.Enabled(); ok {
		_spec.SetField(tenantquota.FieldEnabled, field.TypeBool, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tqu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tenantquota.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tqu.mutation.done = true
	return n, nil
}

// TenantQuotaUpdateOne is the builder for updating a single TenantQuota entity.
type TenantQuotaUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TenantQuotaMutation
}

// SetTenantID sets the "tenant_id" field.
func (tquo *TenantQuotaUpdateOne) SetTenantID(s string) *TenantQuotaUpdateOne {
	tquo.mutation.SetTenantID(s)
	return tquo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (tquo *TenantQuotaUpdateOne) SetNillableTenantID(s *string) *TenantQuotaUpdateOne {
	if s != nil {
		tquo.SetTenantID(*s)
	}
	return tquo
}

// ClearTenantID clears the value of the "tenant_id" field.
func (tquo *TenantQuotaUpdateOne) ClearTenantID() *TenantQuotaUpdateOne {
	tquo.mutation.ClearTenantID()
	return tquo
}

// SetDescription sets the "description" field.
func (tquo *TenantQuotaUpdateOne) SetDescription(s string) *TenantQuotaUpdateOne {
	tquo.mutation.SetDescription(s)
	return tquo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tquo *TenantQuotaUpdateOne) SetNillableDescription(s *string) *TenantQuotaUpdateOne {
	if s != nil {
		tquo.SetDescription(*s)
	}
	return tquo
}

// ClearDescription clears the value of the "description" field.
func (tquo *TenantQuotaUpdateOne) ClearDescription() *TenantQuotaUpdateOne {
	tquo.mutation.ClearDescription()
	return tquo
}

// SetExtras sets the "extras" field.
func (tquo *TenantQuotaUpdateOne) SetExtras(m map[string]interface{}) *TenantQuotaUpdateOne {
	tquo.mutation.SetExtras(m)
	return tquo
}

// ClearExtras clears the value of the "extras" field.
func (tquo *TenantQuotaUpdateOne) ClearExtras() *TenantQuotaUpdateOne {
	tquo.mutation.ClearExtras()
	return tquo
}

// SetCreatedBy sets the "created_by" field.
func (tquo *TenantQuotaUpdateOne) SetCreatedBy(s string) *TenantQuotaUpdateOne {
	tquo.mutation.SetCreatedBy(s)
	return tquo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (tquo *TenantQuotaUpdateOne) SetNillableCreatedBy(s *string) *TenantQuotaUpdateOne {
	if s != nil {
		tquo.SetCreatedBy(*s)
	}
	return tquo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (tquo *TenantQuotaUpdateOne) ClearCreatedBy() *TenantQuotaUpdateOne {
	tquo.mutation.ClearCreatedBy()
	return tquo
}

// SetUpdatedBy sets the "updated_by" field.
func (tquo *TenantQuotaUpdateOne) SetUpdatedBy(s string) *TenantQuotaUpdateOne {
	tquo.mutation.SetUpdatedBy(s)
	return tquo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (tquo *TenantQuotaUpdateOne) SetNillableUpdatedBy(s *string) *TenantQuotaUpdateOne {
	if s != nil {
		tquo.SetUpdatedBy(*s)
	}
	return tquo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (tquo *TenantQuotaUpdateOne) ClearUpdatedBy() *TenantQuotaUpdateOne {
	tquo.mutation.ClearUpdatedBy()
	return tquo
}

// SetUpdatedAt sets the "updated_at" field.
func (tquo *TenantQuotaUpdateOne) SetUpdatedAt(i int64) *TenantQuotaUpdateOne {
	tquo.mutation.ResetUpdatedAt()
	tquo.mutation.SetUpdatedAt(i)
	return tquo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (tquo *TenantQuotaUpdateOne) AddUpdatedAt(i int64) *TenantQuotaUpdateOne {
	tquo.mutation.AddUpdatedAt(i)
	return tquo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tquo *TenantQuotaUpdateOne) ClearUpdatedAt() *TenantQuotaUpdateOne {
	tquo.mutation.ClearUpdatedAt()
	return tquo
}

// SetQuotaType sets the "quota_type" field.
func (tquo *TenantQuotaUpdateOne) SetQuotaType(s string) *TenantQuotaUpdateOne {
	tquo.mutation.SetQuotaType(s)
	return tquo
}

// SetNillableQuotaType sets the "quota_type" field if the given value is not nil.
func (tquo *TenantQuotaUpdateOne) SetNillableQuotaType(s *string) *TenantQuotaUpdateOne {
	if s != nil {
		tquo.SetQuotaType(*s)
	}
	return tquo
}

// SetQuotaName sets the "quota_name" field.
func (tquo *TenantQuotaUpdateOne) SetQuotaName(s string) *TenantQuotaUpdateOne {
	tquo.mutation.SetQuotaName(s)
	return tquo
}

// SetNillableQuotaName sets the "quota_name" field if the given value is not nil.
func (tquo *TenantQuotaUpdateOne) SetNillableQuotaName(s *string) *TenantQuotaUpdateOne {
	if s != nil {
		tquo.SetQuotaName(*s)
	}
	return tquo
}

// SetMaxValue sets the "max_value" field.
func (tquo *TenantQuotaUpdateOne) SetMaxValue(i int64) *TenantQuotaUpdateOne {
	tquo.mutation.ResetMaxValue()
	tquo.mutation.SetMaxValue(i)
	return tquo
}

// SetNillableMaxValue sets the "max_value" field if the given value is not nil.
func (tquo *TenantQuotaUpdateOne) SetNillableMaxValue(i *int64) *TenantQuotaUpdateOne {
	if i != nil {
		tquo.SetMaxValue(*i)
	}
	return tquo
}

// AddMaxValue adds i to the "max_value" field.
func (tquo *TenantQuotaUpdateOne) AddMaxValue(i int64) *TenantQuotaUpdateOne {
	tquo.mutation.AddMaxValue(i)
	return tquo
}

// SetCurrentUsed sets the "current_used" field.
func (tquo *TenantQuotaUpdateOne) SetCurrentUsed(i int64) *TenantQuotaUpdateOne {
	tquo.mutation.ResetCurrentUsed()
	tquo.mutation.SetCurrentUsed(i)
	return tquo
}

// SetNillableCurrentUsed sets the "current_used" field if the given value is not nil.
func (tquo *TenantQuotaUpdateOne) SetNillableCurrentUsed(i *int64) *TenantQuotaUpdateOne {
	if i != nil {
		tquo.SetCurrentUsed(*i)
	}
	return tquo
}

// AddCurrentUsed adds i to the "current_used" field.
func (tquo *TenantQuotaUpdateOne) AddCurrentUsed(i int64) *TenantQuotaUpdateOne {
	tquo.mutation.AddCurrentUsed(i)
	return tquo
}

// SetUnit sets the "unit" field.
func (tquo *TenantQuotaUpdateOne) SetUnit(s string) *TenantQuotaUpdateOne {
	tquo.mutation.SetUnit(s)
	return tquo
}

// SetNillableUnit sets the "unit" field if the given value is not nil.
func (tquo *TenantQuotaUpdateOne) SetNillableUnit(s *string) *TenantQuotaUpdateOne {
	if s != nil {
		tquo.SetUnit(*s)
	}
	return tquo
}

// SetEnabled sets the "enabled" field.
func (tquo *TenantQuotaUpdateOne) SetEnabled(b bool) *TenantQuotaUpdateOne {
	tquo.mutation.SetEnabled(b)
	return tquo
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (tquo *TenantQuotaUpdateOne) SetNillableEnabled(b *bool) *TenantQuotaUpdateOne {
	if b != nil {
		tquo.SetEnabled(*b)
	}
	return tquo
}

// Mutation returns the TenantQuotaMutation object of the builder.
func (tquo *TenantQuotaUpdateOne) Mutation() *TenantQuotaMutation {
	return tquo.mutation
}

// Where appends a list predicates to the TenantQuotaUpdate builder.
func (tquo *TenantQuotaUpdateOne) Where(ps ...predicate.TenantQuota) *TenantQuotaUpdateOne {
	tquo.mutation.Where(ps...)
	return tquo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tquo *TenantQuotaUpdateOne) Select(field string, fields ...string) *TenantQuotaUpdateOne {
	tquo.fields = append([]string{field}, fields...)
	return tquo
}

// Save executes the query and returns the updated TenantQuota entity.
func (tquo *TenantQuotaUpdateOne) Save(ctx context.Context) (*TenantQuota, error) {
	tquo.defaults()
	return withHooks(ctx, tquo.sqlSave, tquo.mutation, tquo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tquo *TenantQuotaUpdateOne) SaveX(ctx context.Context) *TenantQuota {
	node, err := tquo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tquo *TenantQuotaUpdateOne) Exec(ctx context.Context) error {
	_, err := tquo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tquo *TenantQuotaUpdateOne) ExecX(ctx context.Context) {
	if err := tquo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tquo *TenantQuotaUpdateOne) defaults() {
	if _, ok := tquo.mutation.UpdatedAt(); !ok && !tquo.mutation.UpdatedAtCleared() {
		v := tenantquota.UpdateDefaultUpdatedAt()
		tquo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tquo *TenantQuotaUpdateOne) check() error {
	if v, ok := tquo.mutation.QuotaType(); ok {
		if err := tenantquota.QuotaTypeValidator(v); err != nil {
			return &ValidationError{Name: "quota_type", err: fmt.Errorf(`ent: validator failed for field "TenantQuota.quota_type": %w`, err)}
		}
	}
	if v, ok := tquo.mutation.QuotaName(); ok {
		if err := tenantquota.QuotaNameValidator(v); err != nil {
			return &ValidationError{Name: "quota_name", err: fmt.Errorf(`ent: validator failed for field "TenantQuota.quota_name": %w`, err)}
		}
	}
	if v, ok := tquo.mutation.MaxValue(); ok {
		if err := tenantquota.MaxValueValidator(v); err != nil {
			return &ValidationError{Name: "max_value", err: fmt.Errorf(`ent: validator failed for field "TenantQuota.max_value": %w`, err)}
		}
	}
	if v, ok := tquo.mutation.CurrentUsed(); ok {
		if err := tenantquota.CurrentUsedValidator(v); err != nil {
			return &ValidationError{Name: "current_used", err: fmt.Errorf(`ent: validator failed for field "TenantQuota.current_used": %w`, err)}
		}
	}
	return nil
}

func (tquo *TenantQuotaUpdateOne) sqlSave(ctx context.Context) (_node *TenantQuota, err error) {
	if err := tquo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(tenantquota.Table, tenantquota.Columns, sqlgraph.NewFieldSpec(tenantquota.FieldID, field.TypeString))
	id, ok := tquo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TenantQuota.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tquo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tenantquota.FieldID)
		for _, f := range fields {
			if !tenantquota.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tenantquota.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tquo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tquo.mutation.TenantID(); ok {
		_spec.SetField(tenantquota.FieldTenantID, field.TypeString, value)
	}
	if tquo.mutation.TenantIDCleared() {
		_spec.ClearField(tenantquota.FieldTenantID, field.TypeString)
	}
	if value, ok := tquo.mutation.Description(); ok {
		_spec.SetField(tenantquota.FieldDescription, field.TypeString, value)
	}
	if tquo.mutation.DescriptionCleared() {
		_spec.ClearField(tenantquota.FieldDescription, field.TypeString)
	}
	if value, ok := tquo.mutation.Extras(); ok {
		_spec.SetField(tenantquota.FieldExtras, field.TypeJSON, value)
	}
	if tquo.mutation.ExtrasCleared() {
		_spec.ClearField(tenantquota.FieldExtras, field.TypeJSON)
	}
	if value, ok := tquo.mutation.CreatedBy(); ok {
		_spec.SetField(tenantquota.FieldCreatedBy, field.TypeString, value)
	}
	if tquo.mutation.CreatedByCleared() {
		_spec.ClearField(tenantquota.FieldCreatedBy, field.TypeString)
	}
	if value, ok := tquo.mutation.UpdatedBy(); ok {
		_spec.SetField(tenantquota.FieldUpdatedBy, field.TypeString, value)
	}
	if tquo.mutation.UpdatedByCleared() {
		_spec.ClearField(tenantquota.FieldUpdatedBy, field.TypeString)
	}
	if tquo.mutation.CreatedAtCleared() {
		_spec.ClearField(tenantquota.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := tquo.mutation.UpdatedAt(); ok {
		_spec.SetField(tenantquota.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := tquo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(tenantquota.FieldUpdatedAt, field.TypeInt64, value)
	}
	if tquo.mutation.UpdatedAtCleared() {
		_spec.ClearField(tenantquota.FieldUpdatedAt, field.TypeInt64)
	}
	if value, ok := tquo.mutation.QuotaType(); ok {
		_spec.SetField(tenantquota.FieldQuotaType, field.TypeString, value)
	}
	if value, ok := tquo.mutation.QuotaName(); ok {
		_spec.SetField(tenantquota.FieldQuotaName, field.TypeString, value)
	}
	if value, ok := tquo.mutation.MaxValue(); ok {
		_spec.SetField(tenantquota.FieldMaxValue, field.TypeInt64, value)
	}
	if value, ok := tquo.mutation.AddedMaxValue(); ok {
		_spec.AddField(tenantquota.FieldMaxValue, field.TypeInt64, value)
	}
	if value, ok := tquo.mutation.CurrentUsed(); ok {
		_spec.SetField(tenantquota.FieldCurrentUsed, field.TypeInt64, value)
	}
	if value, ok := tquo.mutation.AddedCurrentUsed(); ok {
		_spec.AddField(tenantquota.FieldCurrentUsed, field.TypeInt64, value)
	}
	if value, ok := tquo.mutation.Unit(); ok {
		_spec.SetField(tenantquota.FieldUnit, field.TypeString, value)
	}
	if value, ok := tquo.mutation.Enabled(); ok {
		_spec.SetField(tenantquota.FieldEnabled, field.TypeBool, value)
	}
	_node = &TenantQuota{config: tquo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tquo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tenantquota.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tquo.mutation.done = true
	return _node, nil
}
