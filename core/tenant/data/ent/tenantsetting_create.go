// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/tenant/data/ent/tenantsetting"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TenantSettingCreate is the builder for creating a TenantSetting entity.
type TenantSettingCreate struct {
	config
	mutation *TenantSettingMutation
	hooks    []Hook
}

// SetTenantID sets the "tenant_id" field.
func (tsc *TenantSettingCreate) SetTenantID(s string) *TenantSettingCreate {
	tsc.mutation.SetTenantID(s)
	return tsc
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (tsc *TenantSettingCreate) SetNillableTenantID(s *string) *TenantSettingCreate {
	if s != nil {
		tsc.SetTenantID(*s)
	}
	return tsc
}

// SetDescription sets the "description" field.
func (tsc *TenantSettingCreate) SetDescription(s string) *TenantSettingCreate {
	tsc.mutation.SetDescription(s)
	return tsc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tsc *TenantSettingCreate) SetNillableDescription(s *string) *TenantSettingCreate {
	if s != nil {
		tsc.SetDescription(*s)
	}
	return tsc
}

// SetExtras sets the "extras" field.
func (tsc *TenantSettingCreate) SetExtras(m map[string]interface{}) *TenantSettingCreate {
	tsc.mutation.SetExtras(m)
	return tsc
}

// SetCreatedBy sets the "created_by" field.
func (tsc *TenantSettingCreate) SetCreatedBy(s string) *TenantSettingCreate {
	tsc.mutation.SetCreatedBy(s)
	return tsc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (tsc *TenantSettingCreate) SetNillableCreatedBy(s *string) *TenantSettingCreate {
	if s != nil {
		tsc.SetCreatedBy(*s)
	}
	return tsc
}

// SetUpdatedBy sets the "updated_by" field.
func (tsc *TenantSettingCreate) SetUpdatedBy(s string) *TenantSettingCreate {
	tsc.mutation.SetUpdatedBy(s)
	return tsc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (tsc *TenantSettingCreate) SetNillableUpdatedBy(s *string) *TenantSettingCreate {
	if s != nil {
		tsc.SetUpdatedBy(*s)
	}
	return tsc
}

// SetCreatedAt sets the "created_at" field.
func (tsc *TenantSettingCreate) SetCreatedAt(i int64) *TenantSettingCreate {
	tsc.mutation.SetCreatedAt(i)
	return tsc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tsc *TenantSettingCreate) SetNillableCreatedAt(i *int64) *TenantSettingCreate {
	if i != nil {
		tsc.SetCreatedAt(*i)
	}
	return tsc
}

// SetUpdatedAt sets the "updated_at" field.
func (tsc *TenantSettingCreate) SetUpdatedAt(i int64) *TenantSettingCreate {
	tsc.mutation.SetUpdatedAt(i)
	return tsc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tsc *TenantSettingCreate) SetNillableUpdatedAt(i *int64) *TenantSettingCreate {
	if i != nil {
		tsc.SetUpdatedAt(*i)
	}
	return tsc
}

// SetSettingKey sets the "setting_key" field.
func (tsc *TenantSettingCreate) SetSettingKey(s string) *TenantSettingCreate {
	tsc.mutation.SetSettingKey(s)
	return tsc
}

// SetSettingName sets the "setting_name" field.
func (tsc *TenantSettingCreate) SetSettingName(s string) *TenantSettingCreate {
	tsc.mutation.SetSettingName(s)
	return tsc
}

// SetSettingValue sets the "setting_value" field.
func (tsc *TenantSettingCreate) SetSettingValue(s string) *TenantSettingCreate {
	tsc.mutation.SetSettingValue(s)
	return tsc
}

// SetNillableSettingValue sets the "setting_value" field if the given value is not nil.
func (tsc *TenantSettingCreate) SetNillableSettingValue(s *string) *TenantSettingCreate {
	if s != nil {
		tsc.SetSettingValue(*s)
	}
	return tsc
}

// SetDefaultValue sets the "default_value" field.
func (tsc *TenantSettingCreate) SetDefaultValue(s string) *TenantSettingCreate {
	tsc.mutation.SetDefaultValue(s)
	return tsc
}

// SetNillableDefaultValue sets the "default_value" field if the given value is not nil.
func (tsc *TenantSettingCreate) SetNillableDefaultValue(s *string) *TenantSettingCreate {
	if s != nil {
		tsc.SetDefaultValue(*s)
	}
	return tsc
}

// SetSettingType sets the "setting_type" field.
func (tsc *TenantSettingCreate) SetSettingType(s string) *TenantSettingCreate {
	tsc.mutation.SetSettingType(s)
	return tsc
}

// SetNillableSettingType sets the "setting_type" field if the given value is not nil.
func (tsc *TenantSettingCreate) SetNillableSettingType(s *string) *TenantSettingCreate {
	if s != nil {
		tsc.SetSettingType(*s)
	}
	return tsc
}

// SetScope sets the "scope" field.
func (tsc *TenantSettingCreate) SetScope(s string) *TenantSettingCreate {
	tsc.mutation.SetScope(s)
	return tsc
}

// SetNillableScope sets the "scope" field if the given value is not nil.
func (tsc *TenantSettingCreate) SetNillableScope(s *string) *TenantSettingCreate {
	if s != nil {
		tsc.SetScope(*s)
	}
	return tsc
}

// SetCategory sets the "category" field.
func (tsc *TenantSettingCreate) SetCategory(s string) *TenantSettingCreate {
	tsc.mutation.SetCategory(s)
	return tsc
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (tsc *TenantSettingCreate) SetNillableCategory(s *string) *TenantSettingCreate {
	if s != nil {
		tsc.SetCategory(*s)
	}
	return tsc
}

// SetIsPublic sets the "is_public" field.
func (tsc *TenantSettingCreate) SetIsPublic(b bool) *TenantSettingCreate {
	tsc.mutation.SetIsPublic(b)
	return tsc
}

// SetNillableIsPublic sets the "is_public" field if the given value is not nil.
func (tsc *TenantSettingCreate) SetNillableIsPublic(b *bool) *TenantSettingCreate {
	if b != nil {
		tsc.SetIsPublic(*b)
	}
	return tsc
}

// SetIsRequired sets the "is_required" field.
func (tsc *TenantSettingCreate) SetIsRequired(b bool) *TenantSettingCreate {
	tsc.mutation.SetIsRequired(b)
	return tsc
}

// SetNillableIsRequired sets the "is_required" field if the given value is not nil.
func (tsc *TenantSettingCreate) SetNillableIsRequired(b *bool) *TenantSettingCreate {
	if b != nil {
		tsc.SetIsRequired(*b)
	}
	return tsc
}

// SetIsReadonly sets the "is_readonly" field.
func (tsc *TenantSettingCreate) SetIsReadonly(b bool) *TenantSettingCreate {
	tsc.mutation.SetIsReadonly(b)
	return tsc
}

// SetNillableIsReadonly sets the "is_readonly" field if the given value is not nil.
func (tsc *TenantSettingCreate) SetNillableIsReadonly(b *bool) *TenantSettingCreate {
	if b != nil {
		tsc.SetIsReadonly(*b)
	}
	return tsc
}

// SetValidation sets the "validation" field.
func (tsc *TenantSettingCreate) SetValidation(m map[string]interface{}) *TenantSettingCreate {
	tsc.mutation.SetValidation(m)
	return tsc
}

// SetID sets the "id" field.
func (tsc *TenantSettingCreate) SetID(s string) *TenantSettingCreate {
	tsc.mutation.SetID(s)
	return tsc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (tsc *TenantSettingCreate) SetNillableID(s *string) *TenantSettingCreate {
	if s != nil {
		tsc.SetID(*s)
	}
	return tsc
}

// Mutation returns the TenantSettingMutation object of the builder.
func (tsc *TenantSettingCreate) Mutation() *TenantSettingMutation {
	return tsc.mutation
}

// Save creates the TenantSetting in the database.
func (tsc *TenantSettingCreate) Save(ctx context.Context) (*TenantSetting, error) {
	tsc.defaults()
	return withHooks(ctx, tsc.sqlSave, tsc.mutation, tsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tsc *TenantSettingCreate) SaveX(ctx context.Context) *TenantSetting {
	v, err := tsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tsc *TenantSettingCreate) Exec(ctx context.Context) error {
	_, err := tsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tsc *TenantSettingCreate) ExecX(ctx context.Context) {
	if err := tsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tsc *TenantSettingCreate) defaults() {
	if _, ok := tsc.mutation.Extras(); !ok {
		v := tenantsetting.DefaultExtras
		tsc.mutation.SetExtras(v)
	}
	if _, ok := tsc.mutation.CreatedAt(); !ok {
		v := tenantsetting.DefaultCreatedAt()
		tsc.mutation.SetCreatedAt(v)
	}
	if _, ok := tsc.mutation.UpdatedAt(); !ok {
		v := tenantsetting.DefaultUpdatedAt()
		tsc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tsc.mutation.SettingType(); !ok {
		v := tenantsetting.DefaultSettingType
		tsc.mutation.SetSettingType(v)
	}
	if _, ok := tsc.mutation.Scope(); !ok {
		v := tenantsetting.DefaultScope
		tsc.mutation.SetScope(v)
	}
	if _, ok := tsc.mutation.Category(); !ok {
		v := tenantsetting.DefaultCategory
		tsc.mutation.SetCategory(v)
	}
	if _, ok := tsc.mutation.IsPublic(); !ok {
		v := tenantsetting.DefaultIsPublic
		tsc.mutation.SetIsPublic(v)
	}
	if _, ok := tsc.mutation.IsRequired(); !ok {
		v := tenantsetting.DefaultIsRequired
		tsc.mutation.SetIsRequired(v)
	}
	if _, ok := tsc.mutation.IsReadonly(); !ok {
		v := tenantsetting.DefaultIsReadonly
		tsc.mutation.SetIsReadonly(v)
	}
	if _, ok := tsc.mutation.ID(); !ok {
		v := tenantsetting.DefaultID()
		tsc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tsc *TenantSettingCreate) check() error {
	if v, ok := tsc.mutation.TenantID(); ok {
		if err := tenantsetting.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "TenantSetting.tenant_id": %w`, err)}
		}
	}
	if v, ok := tsc.mutation.CreatedBy(); ok {
		if err := tenantsetting.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "TenantSetting.created_by": %w`, err)}
		}
	}
	if v, ok := tsc.mutation.UpdatedBy(); ok {
		if err := tenantsetting.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "TenantSetting.updated_by": %w`, err)}
		}
	}
	if _, ok := tsc.mutation.SettingKey(); !ok {
		return &ValidationError{Name: "setting_key", err: errors.New(`ent: missing required field "TenantSetting.setting_key"`)}
	}
	if v, ok := tsc.mutation.SettingKey(); ok {
		if err := tenantsetting.SettingKeyValidator(v); err != nil {
			return &ValidationError{Name: "setting_key", err: fmt.Errorf(`ent: validator failed for field "TenantSetting.setting_key": %w`, err)}
		}
	}
	if _, ok := tsc.mutation.SettingName(); !ok {
		return &ValidationError{Name: "setting_name", err: errors.New(`ent: missing required field "TenantSetting.setting_name"`)}
	}
	if v, ok := tsc.mutation.SettingName(); ok {
		if err := tenantsetting.SettingNameValidator(v); err != nil {
			return &ValidationError{Name: "setting_name", err: fmt.Errorf(`ent: validator failed for field "TenantSetting.setting_name": %w`, err)}
		}
	}
	if _, ok := tsc.mutation.SettingType(); !ok {
		return &ValidationError{Name: "setting_type", err: errors.New(`ent: missing required field "TenantSetting.setting_type"`)}
	}
	if _, ok := tsc.mutation.Scope(); !ok {
		return &ValidationError{Name: "scope", err: errors.New(`ent: missing required field "TenantSetting.scope"`)}
	}
	if _, ok := tsc.mutation.Category(); !ok {
		return &ValidationError{Name: "category", err: errors.New(`ent: missing required field "TenantSetting.category"`)}
	}
	if _, ok := tsc.mutation.IsPublic(); !ok {
		return &ValidationError{Name: "is_public", err: errors.New(`ent: missing required field "TenantSetting.is_public"`)}
	}
	if _, ok := tsc.mutation.IsRequired(); !ok {
		return &ValidationError{Name: "is_required", err: errors.New(`ent: missing required field "TenantSetting.is_required"`)}
	}
	if _, ok := tsc.mutation.IsReadonly(); !ok {
		return &ValidationError{Name: "is_readonly", err: errors.New(`ent: missing required field "TenantSetting.is_readonly"`)}
	}
	if v, ok := tsc.mutation.ID(); ok {
		if err := tenantsetting.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "TenantSetting.id": %w`, err)}
		}
	}
	return nil
}

func (tsc *TenantSettingCreate) sqlSave(ctx context.Context) (*TenantSetting, error) {
	if err := tsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected TenantSetting.ID type: %T", _spec.ID.Value)
		}
	}
	tsc.mutation.id = &_node.ID
	tsc.mutation.done = true
	return _node, nil
}

func (tsc *TenantSettingCreate) createSpec() (*TenantSetting, *sqlgraph.CreateSpec) {
	var (
		_node = &TenantSetting{config: tsc.config}
		_spec = sqlgraph.NewCreateSpec(tenantsetting.Table, sqlgraph.NewFieldSpec(tenantsetting.FieldID, field.TypeString))
	)
	if id, ok := tsc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tsc.mutation.TenantID(); ok {
		_spec.SetField(tenantsetting.FieldTenantID, field.TypeString, value)
		_node.TenantID = value
	}
	if value, ok := tsc.mutation.Description(); ok {
		_spec.SetField(tenantsetting.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := tsc.mutation.Extras(); ok {
		_spec.SetField(tenantsetting.FieldExtras, field.TypeJSON, value)
		_node.Extras = value
	}
	if value, ok := tsc.mutation.CreatedBy(); ok {
		_spec.SetField(tenantsetting.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := tsc.mutation.UpdatedBy(); ok {
		_spec.SetField(tenantsetting.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := tsc.mutation.CreatedAt(); ok {
		_spec.SetField(tenantsetting.FieldCreatedAt, field.TypeInt64, value)
		_node.CreatedAt = value
	}
	if value, ok := tsc.mutation.UpdatedAt(); ok {
		_spec.SetField(tenantsetting.FieldUpdatedAt, field.TypeInt64, value)
		_node.UpdatedAt = value
	}
	if value, ok := tsc.mutation.SettingKey(); ok {
		_spec.SetField(tenantsetting.FieldSettingKey, field.TypeString, value)
		_node.SettingKey = value
	}
	if value, ok := tsc.mutation.SettingName(); ok {
		_spec.SetField(tenantsetting.FieldSettingName, field.TypeString, value)
		_node.SettingName = value
	}
	if value, ok := tsc.mutation.SettingValue(); ok {
		_spec.SetField(tenantsetting.FieldSettingValue, field.TypeString, value)
		_node.SettingValue = value
	}
	if value, ok := tsc.mutation.DefaultValue(); ok {
		_spec.SetField(tenantsetting.FieldDefaultValue, field.TypeString, value)
		_node.DefaultValue = value
	}
	if value, ok := tsc.mutation.SettingType(); ok {
		_spec.SetField(tenantsetting.FieldSettingType, field.TypeString, value)
		_node.SettingType = value
	}
	if value, ok := tsc.mutation.Scope(); ok {
		_spec.SetField(tenantsetting.FieldScope, field.TypeString, value)
		_node.Scope = value
	}
	if value, ok := tsc.mutation.Category(); ok {
		_spec.SetField(tenantsetting.FieldCategory, field.TypeString, value)
		_node.Category = value
	}
	if value, ok := tsc.mutation.IsPublic(); ok {
		_spec.SetField(tenantsetting.FieldIsPublic, field.TypeBool, value)
		_node.IsPublic = value
	}
	if value, ok := tsc.mutation.IsRequired(); ok {
		_spec.SetField(tenantsetting.FieldIsRequired, field.TypeBool, value)
		_node.IsRequired = value
	}
	if value, ok := tsc.mutation.IsReadonly(); ok {
		_spec.SetField(tenantsetting.FieldIsReadonly, field.TypeBool, value)
		_node.IsReadonly = value
	}
	if value, ok := tsc.mutation.Validation(); ok {
		_spec.SetField(tenantsetting.FieldValidation, field.TypeJSON, value)
		_node.Validation = value
	}
	return _node, _spec
}

// TenantSettingCreateBulk is the builder for creating many TenantSetting entities in bulk.
type TenantSettingCreateBulk struct {
	config
	err      error
	builders []*TenantSettingCreate
}

// Save creates the TenantSetting entities in the database.
func (tscb *TenantSettingCreateBulk) Save(ctx context.Context) ([]*TenantSetting, error) {
	if tscb.err != nil {
		return nil, tscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tscb.builders))
	nodes := make([]*TenantSetting, len(tscb.builders))
	mutators := make([]Mutator, len(tscb.builders))
	for i := range tscb.builders {
		func(i int, root context.Context) {
			builder := tscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TenantSettingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tscb *TenantSettingCreateBulk) SaveX(ctx context.Context) []*TenantSetting {
	v, err := tscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tscb *TenantSettingCreateBulk) Exec(ctx context.Context) error {
	_, err := tscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tscb *TenantSettingCreateBulk) ExecX(ctx context.Context) {
	if err := tscb.Exec(ctx); err != nil {
		panic(err)
	}
}
