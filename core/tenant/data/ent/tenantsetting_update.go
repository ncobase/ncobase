// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/tenant/data/ent/predicate"
	"ncobase/tenant/data/ent/tenantsetting"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TenantSettingUpdate is the builder for updating TenantSetting entities.
type TenantSettingUpdate struct {
	config
	hooks    []Hook
	mutation *TenantSettingMutation
}

// Where appends a list predicates to the TenantSettingUpdate builder.
func (tsu *TenantSettingUpdate) Where(ps ...predicate.TenantSetting) *TenantSettingUpdate {
	tsu.mutation.Where(ps...)
	return tsu
}

// SetTenantID sets the "tenant_id" field.
func (tsu *TenantSettingUpdate) SetTenantID(s string) *TenantSettingUpdate {
	tsu.mutation.SetTenantID(s)
	return tsu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (tsu *TenantSettingUpdate) SetNillableTenantID(s *string) *TenantSettingUpdate {
	if s != nil {
		tsu.SetTenantID(*s)
	}
	return tsu
}

// ClearTenantID clears the value of the "tenant_id" field.
func (tsu *TenantSettingUpdate) ClearTenantID() *TenantSettingUpdate {
	tsu.mutation.ClearTenantID()
	return tsu
}

// SetDescription sets the "description" field.
func (tsu *TenantSettingUpdate) SetDescription(s string) *TenantSettingUpdate {
	tsu.mutation.SetDescription(s)
	return tsu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tsu *TenantSettingUpdate) SetNillableDescription(s *string) *TenantSettingUpdate {
	if s != nil {
		tsu.SetDescription(*s)
	}
	return tsu
}

// ClearDescription clears the value of the "description" field.
func (tsu *TenantSettingUpdate) ClearDescription() *TenantSettingUpdate {
	tsu.mutation.ClearDescription()
	return tsu
}

// SetExtras sets the "extras" field.
func (tsu *TenantSettingUpdate) SetExtras(m map[string]interface{}) *TenantSettingUpdate {
	tsu.mutation.SetExtras(m)
	return tsu
}

// ClearExtras clears the value of the "extras" field.
func (tsu *TenantSettingUpdate) ClearExtras() *TenantSettingUpdate {
	tsu.mutation.ClearExtras()
	return tsu
}

// SetCreatedBy sets the "created_by" field.
func (tsu *TenantSettingUpdate) SetCreatedBy(s string) *TenantSettingUpdate {
	tsu.mutation.SetCreatedBy(s)
	return tsu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (tsu *TenantSettingUpdate) SetNillableCreatedBy(s *string) *TenantSettingUpdate {
	if s != nil {
		tsu.SetCreatedBy(*s)
	}
	return tsu
}

// ClearCreatedBy clears the value of the "created_by" field.
func (tsu *TenantSettingUpdate) ClearCreatedBy() *TenantSettingUpdate {
	tsu.mutation.ClearCreatedBy()
	return tsu
}

// SetUpdatedBy sets the "updated_by" field.
func (tsu *TenantSettingUpdate) SetUpdatedBy(s string) *TenantSettingUpdate {
	tsu.mutation.SetUpdatedBy(s)
	return tsu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (tsu *TenantSettingUpdate) SetNillableUpdatedBy(s *string) *TenantSettingUpdate {
	if s != nil {
		tsu.SetUpdatedBy(*s)
	}
	return tsu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (tsu *TenantSettingUpdate) ClearUpdatedBy() *TenantSettingUpdate {
	tsu.mutation.ClearUpdatedBy()
	return tsu
}

// SetUpdatedAt sets the "updated_at" field.
func (tsu *TenantSettingUpdate) SetUpdatedAt(i int64) *TenantSettingUpdate {
	tsu.mutation.ResetUpdatedAt()
	tsu.mutation.SetUpdatedAt(i)
	return tsu
}

// AddUpdatedAt adds i to the "updated_at" field.
func (tsu *TenantSettingUpdate) AddUpdatedAt(i int64) *TenantSettingUpdate {
	tsu.mutation.AddUpdatedAt(i)
	return tsu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tsu *TenantSettingUpdate) ClearUpdatedAt() *TenantSettingUpdate {
	tsu.mutation.ClearUpdatedAt()
	return tsu
}

// SetSettingKey sets the "setting_key" field.
func (tsu *TenantSettingUpdate) SetSettingKey(s string) *TenantSettingUpdate {
	tsu.mutation.SetSettingKey(s)
	return tsu
}

// SetNillableSettingKey sets the "setting_key" field if the given value is not nil.
func (tsu *TenantSettingUpdate) SetNillableSettingKey(s *string) *TenantSettingUpdate {
	if s != nil {
		tsu.SetSettingKey(*s)
	}
	return tsu
}

// SetSettingName sets the "setting_name" field.
func (tsu *TenantSettingUpdate) SetSettingName(s string) *TenantSettingUpdate {
	tsu.mutation.SetSettingName(s)
	return tsu
}

// SetNillableSettingName sets the "setting_name" field if the given value is not nil.
func (tsu *TenantSettingUpdate) SetNillableSettingName(s *string) *TenantSettingUpdate {
	if s != nil {
		tsu.SetSettingName(*s)
	}
	return tsu
}

// SetSettingValue sets the "setting_value" field.
func (tsu *TenantSettingUpdate) SetSettingValue(s string) *TenantSettingUpdate {
	tsu.mutation.SetSettingValue(s)
	return tsu
}

// SetNillableSettingValue sets the "setting_value" field if the given value is not nil.
func (tsu *TenantSettingUpdate) SetNillableSettingValue(s *string) *TenantSettingUpdate {
	if s != nil {
		tsu.SetSettingValue(*s)
	}
	return tsu
}

// ClearSettingValue clears the value of the "setting_value" field.
func (tsu *TenantSettingUpdate) ClearSettingValue() *TenantSettingUpdate {
	tsu.mutation.ClearSettingValue()
	return tsu
}

// SetDefaultValue sets the "default_value" field.
func (tsu *TenantSettingUpdate) SetDefaultValue(s string) *TenantSettingUpdate {
	tsu.mutation.SetDefaultValue(s)
	return tsu
}

// SetNillableDefaultValue sets the "default_value" field if the given value is not nil.
func (tsu *TenantSettingUpdate) SetNillableDefaultValue(s *string) *TenantSettingUpdate {
	if s != nil {
		tsu.SetDefaultValue(*s)
	}
	return tsu
}

// ClearDefaultValue clears the value of the "default_value" field.
func (tsu *TenantSettingUpdate) ClearDefaultValue() *TenantSettingUpdate {
	tsu.mutation.ClearDefaultValue()
	return tsu
}

// SetSettingType sets the "setting_type" field.
func (tsu *TenantSettingUpdate) SetSettingType(s string) *TenantSettingUpdate {
	tsu.mutation.SetSettingType(s)
	return tsu
}

// SetNillableSettingType sets the "setting_type" field if the given value is not nil.
func (tsu *TenantSettingUpdate) SetNillableSettingType(s *string) *TenantSettingUpdate {
	if s != nil {
		tsu.SetSettingType(*s)
	}
	return tsu
}

// SetScope sets the "scope" field.
func (tsu *TenantSettingUpdate) SetScope(s string) *TenantSettingUpdate {
	tsu.mutation.SetScope(s)
	return tsu
}

// SetNillableScope sets the "scope" field if the given value is not nil.
func (tsu *TenantSettingUpdate) SetNillableScope(s *string) *TenantSettingUpdate {
	if s != nil {
		tsu.SetScope(*s)
	}
	return tsu
}

// SetCategory sets the "category" field.
func (tsu *TenantSettingUpdate) SetCategory(s string) *TenantSettingUpdate {
	tsu.mutation.SetCategory(s)
	return tsu
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (tsu *TenantSettingUpdate) SetNillableCategory(s *string) *TenantSettingUpdate {
	if s != nil {
		tsu.SetCategory(*s)
	}
	return tsu
}

// SetIsPublic sets the "is_public" field.
func (tsu *TenantSettingUpdate) SetIsPublic(b bool) *TenantSettingUpdate {
	tsu.mutation.SetIsPublic(b)
	return tsu
}

// SetNillableIsPublic sets the "is_public" field if the given value is not nil.
func (tsu *TenantSettingUpdate) SetNillableIsPublic(b *bool) *TenantSettingUpdate {
	if b != nil {
		tsu.SetIsPublic(*b)
	}
	return tsu
}

// SetIsRequired sets the "is_required" field.
func (tsu *TenantSettingUpdate) SetIsRequired(b bool) *TenantSettingUpdate {
	tsu.mutation.SetIsRequired(b)
	return tsu
}

// SetNillableIsRequired sets the "is_required" field if the given value is not nil.
func (tsu *TenantSettingUpdate) SetNillableIsRequired(b *bool) *TenantSettingUpdate {
	if b != nil {
		tsu.SetIsRequired(*b)
	}
	return tsu
}

// SetIsReadonly sets the "is_readonly" field.
func (tsu *TenantSettingUpdate) SetIsReadonly(b bool) *TenantSettingUpdate {
	tsu.mutation.SetIsReadonly(b)
	return tsu
}

// SetNillableIsReadonly sets the "is_readonly" field if the given value is not nil.
func (tsu *TenantSettingUpdate) SetNillableIsReadonly(b *bool) *TenantSettingUpdate {
	if b != nil {
		tsu.SetIsReadonly(*b)
	}
	return tsu
}

// SetValidation sets the "validation" field.
func (tsu *TenantSettingUpdate) SetValidation(m map[string]interface{}) *TenantSettingUpdate {
	tsu.mutation.SetValidation(m)
	return tsu
}

// ClearValidation clears the value of the "validation" field.
func (tsu *TenantSettingUpdate) ClearValidation() *TenantSettingUpdate {
	tsu.mutation.ClearValidation()
	return tsu
}

// Mutation returns the TenantSettingMutation object of the builder.
func (tsu *TenantSettingUpdate) Mutation() *TenantSettingMutation {
	return tsu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tsu *TenantSettingUpdate) Save(ctx context.Context) (int, error) {
	tsu.defaults()
	return withHooks(ctx, tsu.sqlSave, tsu.mutation, tsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tsu *TenantSettingUpdate) SaveX(ctx context.Context) int {
	affected, err := tsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tsu *TenantSettingUpdate) Exec(ctx context.Context) error {
	_, err := tsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tsu *TenantSettingUpdate) ExecX(ctx context.Context) {
	if err := tsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tsu *TenantSettingUpdate) defaults() {
	if _, ok := tsu.mutation.UpdatedAt(); !ok && !tsu.mutation.UpdatedAtCleared() {
		v := tenantsetting.UpdateDefaultUpdatedAt()
		tsu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tsu *TenantSettingUpdate) check() error {
	if v, ok := tsu.mutation.SettingKey(); ok {
		if err := tenantsetting.SettingKeyValidator(v); err != nil {
			return &ValidationError{Name: "setting_key", err: fmt.Errorf(`ent: validator failed for field "TenantSetting.setting_key": %w`, err)}
		}
	}
	if v, ok := tsu.mutation.SettingName(); ok {
		if err := tenantsetting.SettingNameValidator(v); err != nil {
			return &ValidationError{Name: "setting_name", err: fmt.Errorf(`ent: validator failed for field "TenantSetting.setting_name": %w`, err)}
		}
	}
	return nil
}

func (tsu *TenantSettingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tsu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(tenantsetting.Table, tenantsetting.Columns, sqlgraph.NewFieldSpec(tenantsetting.FieldID, field.TypeString))
	if ps := tsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tsu.mutation.TenantID(); ok {
		_spec.SetField(tenantsetting.FieldTenantID, field.TypeString, value)
	}
	if tsu.mutation.TenantIDCleared() {
		_spec.ClearField(tenantsetting.FieldTenantID, field.TypeString)
	}
	if value, ok := tsu.mutation.Description(); ok {
		_spec.SetField(tenantsetting.FieldDescription, field.TypeString, value)
	}
	if tsu.mutation.DescriptionCleared() {
		_spec.ClearField(tenantsetting.FieldDescription, field.TypeString)
	}
	if value, ok := tsu.mutation.Extras(); ok {
		_spec.SetField(tenantsetting.FieldExtras, field.TypeJSON, value)
	}
	if tsu.mutation.ExtrasCleared() {
		_spec.ClearField(tenantsetting.FieldExtras, field.TypeJSON)
	}
	if value, ok := tsu.mutation.CreatedBy(); ok {
		_spec.SetField(tenantsetting.FieldCreatedBy, field.TypeString, value)
	}
	if tsu.mutation.CreatedByCleared() {
		_spec.ClearField(tenantsetting.FieldCreatedBy, field.TypeString)
	}
	if value, ok := tsu.mutation.UpdatedBy(); ok {
		_spec.SetField(tenantsetting.FieldUpdatedBy, field.TypeString, value)
	}
	if tsu.mutation.UpdatedByCleared() {
		_spec.ClearField(tenantsetting.FieldUpdatedBy, field.TypeString)
	}
	if tsu.mutation.CreatedAtCleared() {
		_spec.ClearField(tenantsetting.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := tsu.mutation.UpdatedAt(); ok {
		_spec.SetField(tenantsetting.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := tsu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(tenantsetting.FieldUpdatedAt, field.TypeInt64, value)
	}
	if tsu.mutation.UpdatedAtCleared() {
		_spec.ClearField(tenantsetting.FieldUpdatedAt, field.TypeInt64)
	}
	if value, ok := tsu.mutation.SettingKey(); ok {
		_spec.SetField(tenantsetting.FieldSettingKey, field.TypeString, value)
	}
	if value, ok := tsu.mutation.SettingName(); ok {
		_spec.SetField(tenantsetting.FieldSettingName, field.TypeString, value)
	}
	if value, ok := tsu.mutation.SettingValue(); ok {
		_spec.SetField(tenantsetting.FieldSettingValue, field.TypeString, value)
	}
	if tsu.mutation.SettingValueCleared() {
		_spec.ClearField(tenantsetting.FieldSettingValue, field.TypeString)
	}
	if value, ok := tsu.mutation.DefaultValue(); ok {
		_spec.SetField(tenantsetting.FieldDefaultValue, field.TypeString, value)
	}
	if tsu.mutation.DefaultValueCleared() {
		_spec.ClearField(tenantsetting.FieldDefaultValue, field.TypeString)
	}
	if value, ok := tsu.mutation.SettingType(); ok {
		_spec.SetField(tenantsetting.FieldSettingType, field.TypeString, value)
	}
	if value, ok := tsu.mutation.Scope(); ok {
		_spec.SetField(tenantsetting.FieldScope, field.TypeString, value)
	}
	if value, ok := tsu.mutation.Category(); ok {
		_spec.SetField(tenantsetting.FieldCategory, field.TypeString, value)
	}
	if value, ok := tsu.mutation.IsPublic(); ok {
		_spec.SetField(tenantsetting.FieldIsPublic, field.TypeBool, value)
	}
	if value, ok := tsu.mutation.IsRequired(); ok {
		_spec.SetField(tenantsetting.FieldIsRequired, field.TypeBool, value)
	}
	if value, ok := tsu.mutation.IsReadonly(); ok {
		_spec.SetField(tenantsetting.FieldIsReadonly, field.TypeBool, value)
	}
	if value, ok := tsu.mutation.Validation(); ok {
		_spec.SetField(tenantsetting.FieldValidation, field.TypeJSON, value)
	}
	if tsu.mutation.ValidationCleared() {
		_spec.ClearField(tenantsetting.FieldValidation, field.TypeJSON)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tenantsetting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tsu.mutation.done = true
	return n, nil
}

// TenantSettingUpdateOne is the builder for updating a single TenantSetting entity.
type TenantSettingUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TenantSettingMutation
}

// SetTenantID sets the "tenant_id" field.
func (tsuo *TenantSettingUpdateOne) SetTenantID(s string) *TenantSettingUpdateOne {
	tsuo.mutation.SetTenantID(s)
	return tsuo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (tsuo *TenantSettingUpdateOne) SetNillableTenantID(s *string) *TenantSettingUpdateOne {
	if s != nil {
		tsuo.SetTenantID(*s)
	}
	return tsuo
}

// ClearTenantID clears the value of the "tenant_id" field.
func (tsuo *TenantSettingUpdateOne) ClearTenantID() *TenantSettingUpdateOne {
	tsuo.mutation.ClearTenantID()
	return tsuo
}

// SetDescription sets the "description" field.
func (tsuo *TenantSettingUpdateOne) SetDescription(s string) *TenantSettingUpdateOne {
	tsuo.mutation.SetDescription(s)
	return tsuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tsuo *TenantSettingUpdateOne) SetNillableDescription(s *string) *TenantSettingUpdateOne {
	if s != nil {
		tsuo.SetDescription(*s)
	}
	return tsuo
}

// ClearDescription clears the value of the "description" field.
func (tsuo *TenantSettingUpdateOne) ClearDescription() *TenantSettingUpdateOne {
	tsuo.mutation.ClearDescription()
	return tsuo
}

// SetExtras sets the "extras" field.
func (tsuo *TenantSettingUpdateOne) SetExtras(m map[string]interface{}) *TenantSettingUpdateOne {
	tsuo.mutation.SetExtras(m)
	return tsuo
}

// ClearExtras clears the value of the "extras" field.
func (tsuo *TenantSettingUpdateOne) ClearExtras() *TenantSettingUpdateOne {
	tsuo.mutation.ClearExtras()
	return tsuo
}

// SetCreatedBy sets the "created_by" field.
func (tsuo *TenantSettingUpdateOne) SetCreatedBy(s string) *TenantSettingUpdateOne {
	tsuo.mutation.SetCreatedBy(s)
	return tsuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (tsuo *TenantSettingUpdateOne) SetNillableCreatedBy(s *string) *TenantSettingUpdateOne {
	if s != nil {
		tsuo.SetCreatedBy(*s)
	}
	return tsuo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (tsuo *TenantSettingUpdateOne) ClearCreatedBy() *TenantSettingUpdateOne {
	tsuo.mutation.ClearCreatedBy()
	return tsuo
}

// SetUpdatedBy sets the "updated_by" field.
func (tsuo *TenantSettingUpdateOne) SetUpdatedBy(s string) *TenantSettingUpdateOne {
	tsuo.mutation.SetUpdatedBy(s)
	return tsuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (tsuo *TenantSettingUpdateOne) SetNillableUpdatedBy(s *string) *TenantSettingUpdateOne {
	if s != nil {
		tsuo.SetUpdatedBy(*s)
	}
	return tsuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (tsuo *TenantSettingUpdateOne) ClearUpdatedBy() *TenantSettingUpdateOne {
	tsuo.mutation.ClearUpdatedBy()
	return tsuo
}

// SetUpdatedAt sets the "updated_at" field.
func (tsuo *TenantSettingUpdateOne) SetUpdatedAt(i int64) *TenantSettingUpdateOne {
	tsuo.mutation.ResetUpdatedAt()
	tsuo.mutation.SetUpdatedAt(i)
	return tsuo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (tsuo *TenantSettingUpdateOne) AddUpdatedAt(i int64) *TenantSettingUpdateOne {
	tsuo.mutation.AddUpdatedAt(i)
	return tsuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tsuo *TenantSettingUpdateOne) ClearUpdatedAt() *TenantSettingUpdateOne {
	tsuo.mutation.ClearUpdatedAt()
	return tsuo
}

// SetSettingKey sets the "setting_key" field.
func (tsuo *TenantSettingUpdateOne) SetSettingKey(s string) *TenantSettingUpdateOne {
	tsuo.mutation.SetSettingKey(s)
	return tsuo
}

// SetNillableSettingKey sets the "setting_key" field if the given value is not nil.
func (tsuo *TenantSettingUpdateOne) SetNillableSettingKey(s *string) *TenantSettingUpdateOne {
	if s != nil {
		tsuo.SetSettingKey(*s)
	}
	return tsuo
}

// SetSettingName sets the "setting_name" field.
func (tsuo *TenantSettingUpdateOne) SetSettingName(s string) *TenantSettingUpdateOne {
	tsuo.mutation.SetSettingName(s)
	return tsuo
}

// SetNillableSettingName sets the "setting_name" field if the given value is not nil.
func (tsuo *TenantSettingUpdateOne) SetNillableSettingName(s *string) *TenantSettingUpdateOne {
	if s != nil {
		tsuo.SetSettingName(*s)
	}
	return tsuo
}

// SetSettingValue sets the "setting_value" field.
func (tsuo *TenantSettingUpdateOne) SetSettingValue(s string) *TenantSettingUpdateOne {
	tsuo.mutation.SetSettingValue(s)
	return tsuo
}

// SetNillableSettingValue sets the "setting_value" field if the given value is not nil.
func (tsuo *TenantSettingUpdateOne) SetNillableSettingValue(s *string) *TenantSettingUpdateOne {
	if s != nil {
		tsuo.SetSettingValue(*s)
	}
	return tsuo
}

// ClearSettingValue clears the value of the "setting_value" field.
func (tsuo *TenantSettingUpdateOne) ClearSettingValue() *TenantSettingUpdateOne {
	tsuo.mutation.ClearSettingValue()
	return tsuo
}

// SetDefaultValue sets the "default_value" field.
func (tsuo *TenantSettingUpdateOne) SetDefaultValue(s string) *TenantSettingUpdateOne {
	tsuo.mutation.SetDefaultValue(s)
	return tsuo
}

// SetNillableDefaultValue sets the "default_value" field if the given value is not nil.
func (tsuo *TenantSettingUpdateOne) SetNillableDefaultValue(s *string) *TenantSettingUpdateOne {
	if s != nil {
		tsuo.SetDefaultValue(*s)
	}
	return tsuo
}

// ClearDefaultValue clears the value of the "default_value" field.
func (tsuo *TenantSettingUpdateOne) ClearDefaultValue() *TenantSettingUpdateOne {
	tsuo.mutation.ClearDefaultValue()
	return tsuo
}

// SetSettingType sets the "setting_type" field.
func (tsuo *TenantSettingUpdateOne) SetSettingType(s string) *TenantSettingUpdateOne {
	tsuo.mutation.SetSettingType(s)
	return tsuo
}

// SetNillableSettingType sets the "setting_type" field if the given value is not nil.
func (tsuo *TenantSettingUpdateOne) SetNillableSettingType(s *string) *TenantSettingUpdateOne {
	if s != nil {
		tsuo.SetSettingType(*s)
	}
	return tsuo
}

// SetScope sets the "scope" field.
func (tsuo *TenantSettingUpdateOne) SetScope(s string) *TenantSettingUpdateOne {
	tsuo.mutation.SetScope(s)
	return tsuo
}

// SetNillableScope sets the "scope" field if the given value is not nil.
func (tsuo *TenantSettingUpdateOne) SetNillableScope(s *string) *TenantSettingUpdateOne {
	if s != nil {
		tsuo.SetScope(*s)
	}
	return tsuo
}

// SetCategory sets the "category" field.
func (tsuo *TenantSettingUpdateOne) SetCategory(s string) *TenantSettingUpdateOne {
	tsuo.mutation.SetCategory(s)
	return tsuo
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (tsuo *TenantSettingUpdateOne) SetNillableCategory(s *string) *TenantSettingUpdateOne {
	if s != nil {
		tsuo.SetCategory(*s)
	}
	return tsuo
}

// SetIsPublic sets the "is_public" field.
func (tsuo *TenantSettingUpdateOne) SetIsPublic(b bool) *TenantSettingUpdateOne {
	tsuo.mutation.SetIsPublic(b)
	return tsuo
}

// SetNillableIsPublic sets the "is_public" field if the given value is not nil.
func (tsuo *TenantSettingUpdateOne) SetNillableIsPublic(b *bool) *TenantSettingUpdateOne {
	if b != nil {
		tsuo.SetIsPublic(*b)
	}
	return tsuo
}

// SetIsRequired sets the "is_required" field.
func (tsuo *TenantSettingUpdateOne) SetIsRequired(b bool) *TenantSettingUpdateOne {
	tsuo.mutation.SetIsRequired(b)
	return tsuo
}

// SetNillableIsRequired sets the "is_required" field if the given value is not nil.
func (tsuo *TenantSettingUpdateOne) SetNillableIsRequired(b *bool) *TenantSettingUpdateOne {
	if b != nil {
		tsuo.SetIsRequired(*b)
	}
	return tsuo
}

// SetIsReadonly sets the "is_readonly" field.
func (tsuo *TenantSettingUpdateOne) SetIsReadonly(b bool) *TenantSettingUpdateOne {
	tsuo.mutation.SetIsReadonly(b)
	return tsuo
}

// SetNillableIsReadonly sets the "is_readonly" field if the given value is not nil.
func (tsuo *TenantSettingUpdateOne) SetNillableIsReadonly(b *bool) *TenantSettingUpdateOne {
	if b != nil {
		tsuo.SetIsReadonly(*b)
	}
	return tsuo
}

// SetValidation sets the "validation" field.
func (tsuo *TenantSettingUpdateOne) SetValidation(m map[string]interface{}) *TenantSettingUpdateOne {
	tsuo.mutation.SetValidation(m)
	return tsuo
}

// ClearValidation clears the value of the "validation" field.
func (tsuo *TenantSettingUpdateOne) ClearValidation() *TenantSettingUpdateOne {
	tsuo.mutation.ClearValidation()
	return tsuo
}

// Mutation returns the TenantSettingMutation object of the builder.
func (tsuo *TenantSettingUpdateOne) Mutation() *TenantSettingMutation {
	return tsuo.mutation
}

// Where appends a list predicates to the TenantSettingUpdate builder.
func (tsuo *TenantSettingUpdateOne) Where(ps ...predicate.TenantSetting) *TenantSettingUpdateOne {
	tsuo.mutation.Where(ps...)
	return tsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tsuo *TenantSettingUpdateOne) Select(field string, fields ...string) *TenantSettingUpdateOne {
	tsuo.fields = append([]string{field}, fields...)
	return tsuo
}

// Save executes the query and returns the updated TenantSetting entity.
func (tsuo *TenantSettingUpdateOne) Save(ctx context.Context) (*TenantSetting, error) {
	tsuo.defaults()
	return withHooks(ctx, tsuo.sqlSave, tsuo.mutation, tsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tsuo *TenantSettingUpdateOne) SaveX(ctx context.Context) *TenantSetting {
	node, err := tsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tsuo *TenantSettingUpdateOne) Exec(ctx context.Context) error {
	_, err := tsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tsuo *TenantSettingUpdateOne) ExecX(ctx context.Context) {
	if err := tsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tsuo *TenantSettingUpdateOne) defaults() {
	if _, ok := tsuo.mutation.UpdatedAt(); !ok && !tsuo.mutation.UpdatedAtCleared() {
		v := tenantsetting.UpdateDefaultUpdatedAt()
		tsuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tsuo *TenantSettingUpdateOne) check() error {
	if v, ok := tsuo.mutation.SettingKey(); ok {
		if err := tenantsetting.SettingKeyValidator(v); err != nil {
			return &ValidationError{Name: "setting_key", err: fmt.Errorf(`ent: validator failed for field "TenantSetting.setting_key": %w`, err)}
		}
	}
	if v, ok := tsuo.mutation.SettingName(); ok {
		if err := tenantsetting.SettingNameValidator(v); err != nil {
			return &ValidationError{Name: "setting_name", err: fmt.Errorf(`ent: validator failed for field "TenantSetting.setting_name": %w`, err)}
		}
	}
	return nil
}

func (tsuo *TenantSettingUpdateOne) sqlSave(ctx context.Context) (_node *TenantSetting, err error) {
	if err := tsuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(tenantsetting.Table, tenantsetting.Columns, sqlgraph.NewFieldSpec(tenantsetting.FieldID, field.TypeString))
	id, ok := tsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TenantSetting.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tenantsetting.FieldID)
		for _, f := range fields {
			if !tenantsetting.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tenantsetting.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tsuo.mutation.TenantID(); ok {
		_spec.SetField(tenantsetting.FieldTenantID, field.TypeString, value)
	}
	if tsuo.mutation.TenantIDCleared() {
		_spec.ClearField(tenantsetting.FieldTenantID, field.TypeString)
	}
	if value, ok := tsuo.mutation.Description(); ok {
		_spec.SetField(tenantsetting.FieldDescription, field.TypeString, value)
	}
	if tsuo.mutation.DescriptionCleared() {
		_spec.ClearField(tenantsetting.FieldDescription, field.TypeString)
	}
	if value, ok := tsuo.mutation.Extras(); ok {
		_spec.SetField(tenantsetting.FieldExtras, field.TypeJSON, value)
	}
	if tsuo.mutation.ExtrasCleared() {
		_spec.ClearField(tenantsetting.FieldExtras, field.TypeJSON)
	}
	if value, ok := tsuo.mutation.CreatedBy(); ok {
		_spec.SetField(tenantsetting.FieldCreatedBy, field.TypeString, value)
	}
	if tsuo.mutation.CreatedByCleared() {
		_spec.ClearField(tenantsetting.FieldCreatedBy, field.TypeString)
	}
	if value, ok := tsuo.mutation.UpdatedBy(); ok {
		_spec.SetField(tenantsetting.FieldUpdatedBy, field.TypeString, value)
	}
	if tsuo.mutation.UpdatedByCleared() {
		_spec.ClearField(tenantsetting.FieldUpdatedBy, field.TypeString)
	}
	if tsuo.mutation.CreatedAtCleared() {
		_spec.ClearField(tenantsetting.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := tsuo.mutation.UpdatedAt(); ok {
		_spec.SetField(tenantsetting.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := tsuo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(tenantsetting.FieldUpdatedAt, field.TypeInt64, value)
	}
	if tsuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(tenantsetting.FieldUpdatedAt, field.TypeInt64)
	}
	if value, ok := tsuo.mutation.SettingKey(); ok {
		_spec.SetField(tenantsetting.FieldSettingKey, field.TypeString, value)
	}
	if value, ok := tsuo.mutation.SettingName(); ok {
		_spec.SetField(tenantsetting.FieldSettingName, field.TypeString, value)
	}
	if value, ok := tsuo.mutation.SettingValue(); ok {
		_spec.SetField(tenantsetting.FieldSettingValue, field.TypeString, value)
	}
	if tsuo.mutation.SettingValueCleared() {
		_spec.ClearField(tenantsetting.FieldSettingValue, field.TypeString)
	}
	if value, ok := tsuo.mutation.DefaultValue(); ok {
		_spec.SetField(tenantsetting.FieldDefaultValue, field.TypeString, value)
	}
	if tsuo.mutation.DefaultValueCleared() {
		_spec.ClearField(tenantsetting.FieldDefaultValue, field.TypeString)
	}
	if value, ok := tsuo.mutation.SettingType(); ok {
		_spec.SetField(tenantsetting.FieldSettingType, field.TypeString, value)
	}
	if value, ok := tsuo.mutation.Scope(); ok {
		_spec.SetField(tenantsetting.FieldScope, field.TypeString, value)
	}
	if value, ok := tsuo.mutation.Category(); ok {
		_spec.SetField(tenantsetting.FieldCategory, field.TypeString, value)
	}
	if value, ok := tsuo.mutation.IsPublic(); ok {
		_spec.SetField(tenantsetting.FieldIsPublic, field.TypeBool, value)
	}
	if value, ok := tsuo.mutation.IsRequired(); ok {
		_spec.SetField(tenantsetting.FieldIsRequired, field.TypeBool, value)
	}
	if value, ok := tsuo.mutation.IsReadonly(); ok {
		_spec.SetField(tenantsetting.FieldIsReadonly, field.TypeBool, value)
	}
	if value, ok := tsuo.mutation.Validation(); ok {
		_spec.SetField(tenantsetting.FieldValidation, field.TypeJSON, value)
	}
	if tsuo.mutation.ValidationCleared() {
		_spec.ClearField(tenantsetting.FieldValidation, field.TypeJSON)
	}
	_node = &TenantSetting{config: tsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tenantsetting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tsuo.mutation.done = true
	return _node, nil
}
