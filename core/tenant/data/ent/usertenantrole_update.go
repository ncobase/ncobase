// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/tenant/data/ent/predicate"
	"ncobase/tenant/data/ent/usertenantrole"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserTenantRoleUpdate is the builder for updating UserTenantRole entities.
type UserTenantRoleUpdate struct {
	config
	hooks    []Hook
	mutation *UserTenantRoleMutation
}

// Where appends a list predicates to the UserTenantRoleUpdate builder.
func (utru *UserTenantRoleUpdate) Where(ps ...predicate.UserTenantRole) *UserTenantRoleUpdate {
	utru.mutation.Where(ps...)
	return utru
}

// SetUserID sets the "user_id" field.
func (utru *UserTenantRoleUpdate) SetUserID(s string) *UserTenantRoleUpdate {
	utru.mutation.SetUserID(s)
	return utru
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (utru *UserTenantRoleUpdate) SetNillableUserID(s *string) *UserTenantRoleUpdate {
	if s != nil {
		utru.SetUserID(*s)
	}
	return utru
}

// ClearUserID clears the value of the "user_id" field.
func (utru *UserTenantRoleUpdate) ClearUserID() *UserTenantRoleUpdate {
	utru.mutation.ClearUserID()
	return utru
}

// SetTenantID sets the "tenant_id" field.
func (utru *UserTenantRoleUpdate) SetTenantID(s string) *UserTenantRoleUpdate {
	utru.mutation.SetTenantID(s)
	return utru
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (utru *UserTenantRoleUpdate) SetNillableTenantID(s *string) *UserTenantRoleUpdate {
	if s != nil {
		utru.SetTenantID(*s)
	}
	return utru
}

// ClearTenantID clears the value of the "tenant_id" field.
func (utru *UserTenantRoleUpdate) ClearTenantID() *UserTenantRoleUpdate {
	utru.mutation.ClearTenantID()
	return utru
}

// SetRoleID sets the "role_id" field.
func (utru *UserTenantRoleUpdate) SetRoleID(s string) *UserTenantRoleUpdate {
	utru.mutation.SetRoleID(s)
	return utru
}

// SetNillableRoleID sets the "role_id" field if the given value is not nil.
func (utru *UserTenantRoleUpdate) SetNillableRoleID(s *string) *UserTenantRoleUpdate {
	if s != nil {
		utru.SetRoleID(*s)
	}
	return utru
}

// ClearRoleID clears the value of the "role_id" field.
func (utru *UserTenantRoleUpdate) ClearRoleID() *UserTenantRoleUpdate {
	utru.mutation.ClearRoleID()
	return utru
}

// SetCreatedBy sets the "created_by" field.
func (utru *UserTenantRoleUpdate) SetCreatedBy(s string) *UserTenantRoleUpdate {
	utru.mutation.SetCreatedBy(s)
	return utru
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (utru *UserTenantRoleUpdate) SetNillableCreatedBy(s *string) *UserTenantRoleUpdate {
	if s != nil {
		utru.SetCreatedBy(*s)
	}
	return utru
}

// ClearCreatedBy clears the value of the "created_by" field.
func (utru *UserTenantRoleUpdate) ClearCreatedBy() *UserTenantRoleUpdate {
	utru.mutation.ClearCreatedBy()
	return utru
}

// SetUpdatedBy sets the "updated_by" field.
func (utru *UserTenantRoleUpdate) SetUpdatedBy(s string) *UserTenantRoleUpdate {
	utru.mutation.SetUpdatedBy(s)
	return utru
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (utru *UserTenantRoleUpdate) SetNillableUpdatedBy(s *string) *UserTenantRoleUpdate {
	if s != nil {
		utru.SetUpdatedBy(*s)
	}
	return utru
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (utru *UserTenantRoleUpdate) ClearUpdatedBy() *UserTenantRoleUpdate {
	utru.mutation.ClearUpdatedBy()
	return utru
}

// SetUpdatedAt sets the "updated_at" field.
func (utru *UserTenantRoleUpdate) SetUpdatedAt(i int64) *UserTenantRoleUpdate {
	utru.mutation.ResetUpdatedAt()
	utru.mutation.SetUpdatedAt(i)
	return utru
}

// AddUpdatedAt adds i to the "updated_at" field.
func (utru *UserTenantRoleUpdate) AddUpdatedAt(i int64) *UserTenantRoleUpdate {
	utru.mutation.AddUpdatedAt(i)
	return utru
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (utru *UserTenantRoleUpdate) ClearUpdatedAt() *UserTenantRoleUpdate {
	utru.mutation.ClearUpdatedAt()
	return utru
}

// Mutation returns the UserTenantRoleMutation object of the builder.
func (utru *UserTenantRoleUpdate) Mutation() *UserTenantRoleMutation {
	return utru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (utru *UserTenantRoleUpdate) Save(ctx context.Context) (int, error) {
	utru.defaults()
	return withHooks(ctx, utru.sqlSave, utru.mutation, utru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (utru *UserTenantRoleUpdate) SaveX(ctx context.Context) int {
	affected, err := utru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (utru *UserTenantRoleUpdate) Exec(ctx context.Context) error {
	_, err := utru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (utru *UserTenantRoleUpdate) ExecX(ctx context.Context) {
	if err := utru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (utru *UserTenantRoleUpdate) defaults() {
	if _, ok := utru.mutation.UpdatedAt(); !ok && !utru.mutation.UpdatedAtCleared() {
		v := usertenantrole.UpdateDefaultUpdatedAt()
		utru.mutation.SetUpdatedAt(v)
	}
}

func (utru *UserTenantRoleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(usertenantrole.Table, usertenantrole.Columns, sqlgraph.NewFieldSpec(usertenantrole.FieldID, field.TypeString))
	if ps := utru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := utru.mutation.UserID(); ok {
		_spec.SetField(usertenantrole.FieldUserID, field.TypeString, value)
	}
	if utru.mutation.UserIDCleared() {
		_spec.ClearField(usertenantrole.FieldUserID, field.TypeString)
	}
	if value, ok := utru.mutation.TenantID(); ok {
		_spec.SetField(usertenantrole.FieldTenantID, field.TypeString, value)
	}
	if utru.mutation.TenantIDCleared() {
		_spec.ClearField(usertenantrole.FieldTenantID, field.TypeString)
	}
	if value, ok := utru.mutation.RoleID(); ok {
		_spec.SetField(usertenantrole.FieldRoleID, field.TypeString, value)
	}
	if utru.mutation.RoleIDCleared() {
		_spec.ClearField(usertenantrole.FieldRoleID, field.TypeString)
	}
	if value, ok := utru.mutation.CreatedBy(); ok {
		_spec.SetField(usertenantrole.FieldCreatedBy, field.TypeString, value)
	}
	if utru.mutation.CreatedByCleared() {
		_spec.ClearField(usertenantrole.FieldCreatedBy, field.TypeString)
	}
	if value, ok := utru.mutation.UpdatedBy(); ok {
		_spec.SetField(usertenantrole.FieldUpdatedBy, field.TypeString, value)
	}
	if utru.mutation.UpdatedByCleared() {
		_spec.ClearField(usertenantrole.FieldUpdatedBy, field.TypeString)
	}
	if utru.mutation.CreatedAtCleared() {
		_spec.ClearField(usertenantrole.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := utru.mutation.UpdatedAt(); ok {
		_spec.SetField(usertenantrole.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := utru.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(usertenantrole.FieldUpdatedAt, field.TypeInt64, value)
	}
	if utru.mutation.UpdatedAtCleared() {
		_spec.ClearField(usertenantrole.FieldUpdatedAt, field.TypeInt64)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, utru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usertenantrole.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	utru.mutation.done = true
	return n, nil
}

// UserTenantRoleUpdateOne is the builder for updating a single UserTenantRole entity.
type UserTenantRoleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserTenantRoleMutation
}

// SetUserID sets the "user_id" field.
func (utruo *UserTenantRoleUpdateOne) SetUserID(s string) *UserTenantRoleUpdateOne {
	utruo.mutation.SetUserID(s)
	return utruo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (utruo *UserTenantRoleUpdateOne) SetNillableUserID(s *string) *UserTenantRoleUpdateOne {
	if s != nil {
		utruo.SetUserID(*s)
	}
	return utruo
}

// ClearUserID clears the value of the "user_id" field.
func (utruo *UserTenantRoleUpdateOne) ClearUserID() *UserTenantRoleUpdateOne {
	utruo.mutation.ClearUserID()
	return utruo
}

// SetTenantID sets the "tenant_id" field.
func (utruo *UserTenantRoleUpdateOne) SetTenantID(s string) *UserTenantRoleUpdateOne {
	utruo.mutation.SetTenantID(s)
	return utruo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (utruo *UserTenantRoleUpdateOne) SetNillableTenantID(s *string) *UserTenantRoleUpdateOne {
	if s != nil {
		utruo.SetTenantID(*s)
	}
	return utruo
}

// ClearTenantID clears the value of the "tenant_id" field.
func (utruo *UserTenantRoleUpdateOne) ClearTenantID() *UserTenantRoleUpdateOne {
	utruo.mutation.ClearTenantID()
	return utruo
}

// SetRoleID sets the "role_id" field.
func (utruo *UserTenantRoleUpdateOne) SetRoleID(s string) *UserTenantRoleUpdateOne {
	utruo.mutation.SetRoleID(s)
	return utruo
}

// SetNillableRoleID sets the "role_id" field if the given value is not nil.
func (utruo *UserTenantRoleUpdateOne) SetNillableRoleID(s *string) *UserTenantRoleUpdateOne {
	if s != nil {
		utruo.SetRoleID(*s)
	}
	return utruo
}

// ClearRoleID clears the value of the "role_id" field.
func (utruo *UserTenantRoleUpdateOne) ClearRoleID() *UserTenantRoleUpdateOne {
	utruo.mutation.ClearRoleID()
	return utruo
}

// SetCreatedBy sets the "created_by" field.
func (utruo *UserTenantRoleUpdateOne) SetCreatedBy(s string) *UserTenantRoleUpdateOne {
	utruo.mutation.SetCreatedBy(s)
	return utruo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (utruo *UserTenantRoleUpdateOne) SetNillableCreatedBy(s *string) *UserTenantRoleUpdateOne {
	if s != nil {
		utruo.SetCreatedBy(*s)
	}
	return utruo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (utruo *UserTenantRoleUpdateOne) ClearCreatedBy() *UserTenantRoleUpdateOne {
	utruo.mutation.ClearCreatedBy()
	return utruo
}

// SetUpdatedBy sets the "updated_by" field.
func (utruo *UserTenantRoleUpdateOne) SetUpdatedBy(s string) *UserTenantRoleUpdateOne {
	utruo.mutation.SetUpdatedBy(s)
	return utruo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (utruo *UserTenantRoleUpdateOne) SetNillableUpdatedBy(s *string) *UserTenantRoleUpdateOne {
	if s != nil {
		utruo.SetUpdatedBy(*s)
	}
	return utruo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (utruo *UserTenantRoleUpdateOne) ClearUpdatedBy() *UserTenantRoleUpdateOne {
	utruo.mutation.ClearUpdatedBy()
	return utruo
}

// SetUpdatedAt sets the "updated_at" field.
func (utruo *UserTenantRoleUpdateOne) SetUpdatedAt(i int64) *UserTenantRoleUpdateOne {
	utruo.mutation.ResetUpdatedAt()
	utruo.mutation.SetUpdatedAt(i)
	return utruo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (utruo *UserTenantRoleUpdateOne) AddUpdatedAt(i int64) *UserTenantRoleUpdateOne {
	utruo.mutation.AddUpdatedAt(i)
	return utruo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (utruo *UserTenantRoleUpdateOne) ClearUpdatedAt() *UserTenantRoleUpdateOne {
	utruo.mutation.ClearUpdatedAt()
	return utruo
}

// Mutation returns the UserTenantRoleMutation object of the builder.
func (utruo *UserTenantRoleUpdateOne) Mutation() *UserTenantRoleMutation {
	return utruo.mutation
}

// Where appends a list predicates to the UserTenantRoleUpdate builder.
func (utruo *UserTenantRoleUpdateOne) Where(ps ...predicate.UserTenantRole) *UserTenantRoleUpdateOne {
	utruo.mutation.Where(ps...)
	return utruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (utruo *UserTenantRoleUpdateOne) Select(field string, fields ...string) *UserTenantRoleUpdateOne {
	utruo.fields = append([]string{field}, fields...)
	return utruo
}

// Save executes the query and returns the updated UserTenantRole entity.
func (utruo *UserTenantRoleUpdateOne) Save(ctx context.Context) (*UserTenantRole, error) {
	utruo.defaults()
	return withHooks(ctx, utruo.sqlSave, utruo.mutation, utruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (utruo *UserTenantRoleUpdateOne) SaveX(ctx context.Context) *UserTenantRole {
	node, err := utruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (utruo *UserTenantRoleUpdateOne) Exec(ctx context.Context) error {
	_, err := utruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (utruo *UserTenantRoleUpdateOne) ExecX(ctx context.Context) {
	if err := utruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (utruo *UserTenantRoleUpdateOne) defaults() {
	if _, ok := utruo.mutation.UpdatedAt(); !ok && !utruo.mutation.UpdatedAtCleared() {
		v := usertenantrole.UpdateDefaultUpdatedAt()
		utruo.mutation.SetUpdatedAt(v)
	}
}

func (utruo *UserTenantRoleUpdateOne) sqlSave(ctx context.Context) (_node *UserTenantRole, err error) {
	_spec := sqlgraph.NewUpdateSpec(usertenantrole.Table, usertenantrole.Columns, sqlgraph.NewFieldSpec(usertenantrole.FieldID, field.TypeString))
	id, ok := utruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserTenantRole.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := utruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, usertenantrole.FieldID)
		for _, f := range fields {
			if !usertenantrole.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != usertenantrole.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := utruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := utruo.mutation.UserID(); ok {
		_spec.SetField(usertenantrole.FieldUserID, field.TypeString, value)
	}
	if utruo.mutation.UserIDCleared() {
		_spec.ClearField(usertenantrole.FieldUserID, field.TypeString)
	}
	if value, ok := utruo.mutation.TenantID(); ok {
		_spec.SetField(usertenantrole.FieldTenantID, field.TypeString, value)
	}
	if utruo.mutation.TenantIDCleared() {
		_spec.ClearField(usertenantrole.FieldTenantID, field.TypeString)
	}
	if value, ok := utruo.mutation.RoleID(); ok {
		_spec.SetField(usertenantrole.FieldRoleID, field.TypeString, value)
	}
	if utruo.mutation.RoleIDCleared() {
		_spec.ClearField(usertenantrole.FieldRoleID, field.TypeString)
	}
	if value, ok := utruo.mutation.CreatedBy(); ok {
		_spec.SetField(usertenantrole.FieldCreatedBy, field.TypeString, value)
	}
	if utruo.mutation.CreatedByCleared() {
		_spec.ClearField(usertenantrole.FieldCreatedBy, field.TypeString)
	}
	if value, ok := utruo.mutation.UpdatedBy(); ok {
		_spec.SetField(usertenantrole.FieldUpdatedBy, field.TypeString, value)
	}
	if utruo.mutation.UpdatedByCleared() {
		_spec.ClearField(usertenantrole.FieldUpdatedBy, field.TypeString)
	}
	if utruo.mutation.CreatedAtCleared() {
		_spec.ClearField(usertenantrole.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := utruo.mutation.UpdatedAt(); ok {
		_spec.SetField(usertenantrole.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := utruo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(usertenantrole.FieldUpdatedAt, field.TypeInt64, value)
	}
	if utruo.mutation.UpdatedAtCleared() {
		_spec.ClearField(usertenantrole.FieldUpdatedAt, field.TypeInt64)
	}
	_node = &UserTenantRole{config: utruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, utruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usertenantrole.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	utruo.mutation.done = true
	return _node, nil
}
