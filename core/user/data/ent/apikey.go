// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"ncobase/user/data/ent/apikey"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ApiKey is the model entity for the ApiKey schema.
type ApiKey struct {
	config `json:"-"`
	// ID of the ent.
	// primary key
	ID string `json:"id,omitempty"`
	// name
	Name string `json:"name,omitempty"`
	// created at
	CreatedAt int64 `json:"created_at,omitempty"`
	// updated at
	UpdatedAt int64 `json:"updated_at,omitempty"`
	// user id
	UserID string `json:"user_id,omitempty"`
	// Key holds the value of the "key" field.
	Key string `json:"key,omitempty"`
	// LastUsed holds the value of the "last_used" field.
	LastUsed     int64 `json:"last_used,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ApiKey) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case apikey.FieldCreatedAt, apikey.FieldUpdatedAt, apikey.FieldLastUsed:
			values[i] = new(sql.NullInt64)
		case apikey.FieldID, apikey.FieldName, apikey.FieldUserID, apikey.FieldKey:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ApiKey fields.
func (ak *ApiKey) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case apikey.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				ak.ID = value.String
			}
		case apikey.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ak.Name = value.String
			}
		case apikey.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ak.CreatedAt = value.Int64
			}
		case apikey.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ak.UpdatedAt = value.Int64
			}
		case apikey.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				ak.UserID = value.String
			}
		case apikey.FieldKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field key", values[i])
			} else if value.Valid {
				ak.Key = value.String
			}
		case apikey.FieldLastUsed:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field last_used", values[i])
			} else if value.Valid {
				ak.LastUsed = value.Int64
			}
		default:
			ak.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ApiKey.
// This includes values selected through modifiers, order, etc.
func (ak *ApiKey) Value(name string) (ent.Value, error) {
	return ak.selectValues.Get(name)
}

// Update returns a builder for updating this ApiKey.
// Note that you need to call ApiKey.Unwrap() before calling this method if this ApiKey
// was returned from a transaction, and the transaction was committed or rolled back.
func (ak *ApiKey) Update() *ApiKeyUpdateOne {
	return NewApiKeyClient(ak.config).UpdateOne(ak)
}

// Unwrap unwraps the ApiKey entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ak *ApiKey) Unwrap() *ApiKey {
	_tx, ok := ak.config.driver.(*txDriver)
	if !ok {
		panic("ent: ApiKey is not a transactional entity")
	}
	ak.config.driver = _tx.drv
	return ak
}

// String implements the fmt.Stringer.
func (ak *ApiKey) String() string {
	var builder strings.Builder
	builder.WriteString("ApiKey(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ak.ID))
	builder.WriteString("name=")
	builder.WriteString(ak.Name)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", ak.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", ak.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(ak.UserID)
	builder.WriteString(", ")
	builder.WriteString("key=")
	builder.WriteString(ak.Key)
	builder.WriteString(", ")
	builder.WriteString("last_used=")
	builder.WriteString(fmt.Sprintf("%v", ak.LastUsed))
	builder.WriteByte(')')
	return builder.String()
}

// ApiKeys is a parsable slice of ApiKey.
type ApiKeys []*ApiKey
