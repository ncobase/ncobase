// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/user/data/ent/apikey"
	"ncobase/user/data/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ApiKeyUpdate is the builder for updating ApiKey entities.
type ApiKeyUpdate struct {
	config
	hooks    []Hook
	mutation *ApiKeyMutation
}

// Where appends a list predicates to the ApiKeyUpdate builder.
func (aku *ApiKeyUpdate) Where(ps ...predicate.ApiKey) *ApiKeyUpdate {
	aku.mutation.Where(ps...)
	return aku
}

// SetName sets the "name" field.
func (aku *ApiKeyUpdate) SetName(s string) *ApiKeyUpdate {
	aku.mutation.SetName(s)
	return aku
}

// SetNillableName sets the "name" field if the given value is not nil.
func (aku *ApiKeyUpdate) SetNillableName(s *string) *ApiKeyUpdate {
	if s != nil {
		aku.SetName(*s)
	}
	return aku
}

// ClearName clears the value of the "name" field.
func (aku *ApiKeyUpdate) ClearName() *ApiKeyUpdate {
	aku.mutation.ClearName()
	return aku
}

// SetUpdatedAt sets the "updated_at" field.
func (aku *ApiKeyUpdate) SetUpdatedAt(i int64) *ApiKeyUpdate {
	aku.mutation.ResetUpdatedAt()
	aku.mutation.SetUpdatedAt(i)
	return aku
}

// AddUpdatedAt adds i to the "updated_at" field.
func (aku *ApiKeyUpdate) AddUpdatedAt(i int64) *ApiKeyUpdate {
	aku.mutation.AddUpdatedAt(i)
	return aku
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (aku *ApiKeyUpdate) ClearUpdatedAt() *ApiKeyUpdate {
	aku.mutation.ClearUpdatedAt()
	return aku
}

// SetUserID sets the "user_id" field.
func (aku *ApiKeyUpdate) SetUserID(s string) *ApiKeyUpdate {
	aku.mutation.SetUserID(s)
	return aku
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (aku *ApiKeyUpdate) SetNillableUserID(s *string) *ApiKeyUpdate {
	if s != nil {
		aku.SetUserID(*s)
	}
	return aku
}

// ClearUserID clears the value of the "user_id" field.
func (aku *ApiKeyUpdate) ClearUserID() *ApiKeyUpdate {
	aku.mutation.ClearUserID()
	return aku
}

// SetKey sets the "key" field.
func (aku *ApiKeyUpdate) SetKey(s string) *ApiKeyUpdate {
	aku.mutation.SetKey(s)
	return aku
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (aku *ApiKeyUpdate) SetNillableKey(s *string) *ApiKeyUpdate {
	if s != nil {
		aku.SetKey(*s)
	}
	return aku
}

// SetLastUsed sets the "last_used" field.
func (aku *ApiKeyUpdate) SetLastUsed(i int64) *ApiKeyUpdate {
	aku.mutation.ResetLastUsed()
	aku.mutation.SetLastUsed(i)
	return aku
}

// SetNillableLastUsed sets the "last_used" field if the given value is not nil.
func (aku *ApiKeyUpdate) SetNillableLastUsed(i *int64) *ApiKeyUpdate {
	if i != nil {
		aku.SetLastUsed(*i)
	}
	return aku
}

// AddLastUsed adds i to the "last_used" field.
func (aku *ApiKeyUpdate) AddLastUsed(i int64) *ApiKeyUpdate {
	aku.mutation.AddLastUsed(i)
	return aku
}

// ClearLastUsed clears the value of the "last_used" field.
func (aku *ApiKeyUpdate) ClearLastUsed() *ApiKeyUpdate {
	aku.mutation.ClearLastUsed()
	return aku
}

// Mutation returns the ApiKeyMutation object of the builder.
func (aku *ApiKeyUpdate) Mutation() *ApiKeyMutation {
	return aku.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (aku *ApiKeyUpdate) Save(ctx context.Context) (int, error) {
	aku.defaults()
	return withHooks(ctx, aku.sqlSave, aku.mutation, aku.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aku *ApiKeyUpdate) SaveX(ctx context.Context) int {
	affected, err := aku.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (aku *ApiKeyUpdate) Exec(ctx context.Context) error {
	_, err := aku.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aku *ApiKeyUpdate) ExecX(ctx context.Context) {
	if err := aku.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aku *ApiKeyUpdate) defaults() {
	if _, ok := aku.mutation.UpdatedAt(); !ok && !aku.mutation.UpdatedAtCleared() {
		v := apikey.UpdateDefaultUpdatedAt()
		aku.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aku *ApiKeyUpdate) check() error {
	if v, ok := aku.mutation.Key(); ok {
		if err := apikey.KeyValidator(v); err != nil {
			return &ValidationError{Name: "key", err: fmt.Errorf(`ent: validator failed for field "ApiKey.key": %w`, err)}
		}
	}
	return nil
}

func (aku *ApiKeyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := aku.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(apikey.Table, apikey.Columns, sqlgraph.NewFieldSpec(apikey.FieldID, field.TypeString))
	if ps := aku.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aku.mutation.Name(); ok {
		_spec.SetField(apikey.FieldName, field.TypeString, value)
	}
	if aku.mutation.NameCleared() {
		_spec.ClearField(apikey.FieldName, field.TypeString)
	}
	if aku.mutation.CreatedAtCleared() {
		_spec.ClearField(apikey.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := aku.mutation.UpdatedAt(); ok {
		_spec.SetField(apikey.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := aku.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(apikey.FieldUpdatedAt, field.TypeInt64, value)
	}
	if aku.mutation.UpdatedAtCleared() {
		_spec.ClearField(apikey.FieldUpdatedAt, field.TypeInt64)
	}
	if value, ok := aku.mutation.UserID(); ok {
		_spec.SetField(apikey.FieldUserID, field.TypeString, value)
	}
	if aku.mutation.UserIDCleared() {
		_spec.ClearField(apikey.FieldUserID, field.TypeString)
	}
	if value, ok := aku.mutation.Key(); ok {
		_spec.SetField(apikey.FieldKey, field.TypeString, value)
	}
	if value, ok := aku.mutation.LastUsed(); ok {
		_spec.SetField(apikey.FieldLastUsed, field.TypeInt64, value)
	}
	if value, ok := aku.mutation.AddedLastUsed(); ok {
		_spec.AddField(apikey.FieldLastUsed, field.TypeInt64, value)
	}
	if aku.mutation.LastUsedCleared() {
		_spec.ClearField(apikey.FieldLastUsed, field.TypeInt64)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, aku.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{apikey.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	aku.mutation.done = true
	return n, nil
}

// ApiKeyUpdateOne is the builder for updating a single ApiKey entity.
type ApiKeyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ApiKeyMutation
}

// SetName sets the "name" field.
func (akuo *ApiKeyUpdateOne) SetName(s string) *ApiKeyUpdateOne {
	akuo.mutation.SetName(s)
	return akuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (akuo *ApiKeyUpdateOne) SetNillableName(s *string) *ApiKeyUpdateOne {
	if s != nil {
		akuo.SetName(*s)
	}
	return akuo
}

// ClearName clears the value of the "name" field.
func (akuo *ApiKeyUpdateOne) ClearName() *ApiKeyUpdateOne {
	akuo.mutation.ClearName()
	return akuo
}

// SetUpdatedAt sets the "updated_at" field.
func (akuo *ApiKeyUpdateOne) SetUpdatedAt(i int64) *ApiKeyUpdateOne {
	akuo.mutation.ResetUpdatedAt()
	akuo.mutation.SetUpdatedAt(i)
	return akuo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (akuo *ApiKeyUpdateOne) AddUpdatedAt(i int64) *ApiKeyUpdateOne {
	akuo.mutation.AddUpdatedAt(i)
	return akuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (akuo *ApiKeyUpdateOne) ClearUpdatedAt() *ApiKeyUpdateOne {
	akuo.mutation.ClearUpdatedAt()
	return akuo
}

// SetUserID sets the "user_id" field.
func (akuo *ApiKeyUpdateOne) SetUserID(s string) *ApiKeyUpdateOne {
	akuo.mutation.SetUserID(s)
	return akuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (akuo *ApiKeyUpdateOne) SetNillableUserID(s *string) *ApiKeyUpdateOne {
	if s != nil {
		akuo.SetUserID(*s)
	}
	return akuo
}

// ClearUserID clears the value of the "user_id" field.
func (akuo *ApiKeyUpdateOne) ClearUserID() *ApiKeyUpdateOne {
	akuo.mutation.ClearUserID()
	return akuo
}

// SetKey sets the "key" field.
func (akuo *ApiKeyUpdateOne) SetKey(s string) *ApiKeyUpdateOne {
	akuo.mutation.SetKey(s)
	return akuo
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (akuo *ApiKeyUpdateOne) SetNillableKey(s *string) *ApiKeyUpdateOne {
	if s != nil {
		akuo.SetKey(*s)
	}
	return akuo
}

// SetLastUsed sets the "last_used" field.
func (akuo *ApiKeyUpdateOne) SetLastUsed(i int64) *ApiKeyUpdateOne {
	akuo.mutation.ResetLastUsed()
	akuo.mutation.SetLastUsed(i)
	return akuo
}

// SetNillableLastUsed sets the "last_used" field if the given value is not nil.
func (akuo *ApiKeyUpdateOne) SetNillableLastUsed(i *int64) *ApiKeyUpdateOne {
	if i != nil {
		akuo.SetLastUsed(*i)
	}
	return akuo
}

// AddLastUsed adds i to the "last_used" field.
func (akuo *ApiKeyUpdateOne) AddLastUsed(i int64) *ApiKeyUpdateOne {
	akuo.mutation.AddLastUsed(i)
	return akuo
}

// ClearLastUsed clears the value of the "last_used" field.
func (akuo *ApiKeyUpdateOne) ClearLastUsed() *ApiKeyUpdateOne {
	akuo.mutation.ClearLastUsed()
	return akuo
}

// Mutation returns the ApiKeyMutation object of the builder.
func (akuo *ApiKeyUpdateOne) Mutation() *ApiKeyMutation {
	return akuo.mutation
}

// Where appends a list predicates to the ApiKeyUpdate builder.
func (akuo *ApiKeyUpdateOne) Where(ps ...predicate.ApiKey) *ApiKeyUpdateOne {
	akuo.mutation.Where(ps...)
	return akuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (akuo *ApiKeyUpdateOne) Select(field string, fields ...string) *ApiKeyUpdateOne {
	akuo.fields = append([]string{field}, fields...)
	return akuo
}

// Save executes the query and returns the updated ApiKey entity.
func (akuo *ApiKeyUpdateOne) Save(ctx context.Context) (*ApiKey, error) {
	akuo.defaults()
	return withHooks(ctx, akuo.sqlSave, akuo.mutation, akuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (akuo *ApiKeyUpdateOne) SaveX(ctx context.Context) *ApiKey {
	node, err := akuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (akuo *ApiKeyUpdateOne) Exec(ctx context.Context) error {
	_, err := akuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (akuo *ApiKeyUpdateOne) ExecX(ctx context.Context) {
	if err := akuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (akuo *ApiKeyUpdateOne) defaults() {
	if _, ok := akuo.mutation.UpdatedAt(); !ok && !akuo.mutation.UpdatedAtCleared() {
		v := apikey.UpdateDefaultUpdatedAt()
		akuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (akuo *ApiKeyUpdateOne) check() error {
	if v, ok := akuo.mutation.Key(); ok {
		if err := apikey.KeyValidator(v); err != nil {
			return &ValidationError{Name: "key", err: fmt.Errorf(`ent: validator failed for field "ApiKey.key": %w`, err)}
		}
	}
	return nil
}

func (akuo *ApiKeyUpdateOne) sqlSave(ctx context.Context) (_node *ApiKey, err error) {
	if err := akuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(apikey.Table, apikey.Columns, sqlgraph.NewFieldSpec(apikey.FieldID, field.TypeString))
	id, ok := akuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ApiKey.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := akuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, apikey.FieldID)
		for _, f := range fields {
			if !apikey.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != apikey.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := akuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := akuo.mutation.Name(); ok {
		_spec.SetField(apikey.FieldName, field.TypeString, value)
	}
	if akuo.mutation.NameCleared() {
		_spec.ClearField(apikey.FieldName, field.TypeString)
	}
	if akuo.mutation.CreatedAtCleared() {
		_spec.ClearField(apikey.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := akuo.mutation.UpdatedAt(); ok {
		_spec.SetField(apikey.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := akuo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(apikey.FieldUpdatedAt, field.TypeInt64, value)
	}
	if akuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(apikey.FieldUpdatedAt, field.TypeInt64)
	}
	if value, ok := akuo.mutation.UserID(); ok {
		_spec.SetField(apikey.FieldUserID, field.TypeString, value)
	}
	if akuo.mutation.UserIDCleared() {
		_spec.ClearField(apikey.FieldUserID, field.TypeString)
	}
	if value, ok := akuo.mutation.Key(); ok {
		_spec.SetField(apikey.FieldKey, field.TypeString, value)
	}
	if value, ok := akuo.mutation.LastUsed(); ok {
		_spec.SetField(apikey.FieldLastUsed, field.TypeInt64, value)
	}
	if value, ok := akuo.mutation.AddedLastUsed(); ok {
		_spec.AddField(apikey.FieldLastUsed, field.TypeInt64, value)
	}
	if akuo.mutation.LastUsedCleared() {
		_spec.ClearField(apikey.FieldLastUsed, field.TypeInt64)
	}
	_node = &ApiKey{config: akuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, akuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{apikey.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	akuo.mutation.done = true
	return _node, nil
}
