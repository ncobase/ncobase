// Code generated by ent, DO NOT EDIT.

package employee

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the employee type in the database.
	Label = "employee"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "user_id"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldEmployeeID holds the string denoting the employee_id field in the database.
	FieldEmployeeID = "employee_id"
	// FieldDepartment holds the string denoting the department field in the database.
	FieldDepartment = "department"
	// FieldPosition holds the string denoting the position field in the database.
	FieldPosition = "position"
	// FieldManagerID holds the string denoting the manager_id field in the database.
	FieldManagerID = "manager_id"
	// FieldHireDate holds the string denoting the hire_date field in the database.
	FieldHireDate = "hire_date"
	// FieldTerminationDate holds the string denoting the termination_date field in the database.
	FieldTerminationDate = "termination_date"
	// FieldEmploymentType holds the string denoting the employment_type field in the database.
	FieldEmploymentType = "employment_type"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldSalary holds the string denoting the salary field in the database.
	FieldSalary = "salary"
	// FieldWorkLocation holds the string denoting the work_location field in the database.
	FieldWorkLocation = "work_location"
	// FieldContactInfo holds the string denoting the contact_info field in the database.
	FieldContactInfo = "contact_info"
	// FieldSkills holds the string denoting the skills field in the database.
	FieldSkills = "skills"
	// FieldCertifications holds the string denoting the certifications field in the database.
	FieldCertifications = "certifications"
	// FieldExtras holds the string denoting the extras field in the database.
	FieldExtras = "extras"
	// Table holds the table name of the employee in the database.
	Table = "ncse_sys_employee"
)

// Columns holds all SQL columns for employee fields.
var Columns = []string{
	FieldID,
	FieldTenantID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldEmployeeID,
	FieldDepartment,
	FieldPosition,
	FieldManagerID,
	FieldHireDate,
	FieldTerminationDate,
	FieldEmploymentType,
	FieldStatus,
	FieldSalary,
	FieldWorkLocation,
	FieldContactInfo,
	FieldSkills,
	FieldCertifications,
	FieldExtras,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// TenantIDValidator is a validator for the "tenant_id" field. It is called by the builders before save.
	TenantIDValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() int64
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() int64
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() int64
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
)

// EmploymentType defines the type for the "employment_type" enum field.
type EmploymentType string

// EmploymentTypeFullTime is the default value of the EmploymentType enum.
const DefaultEmploymentType = EmploymentTypeFullTime

// EmploymentType values.
const (
	EmploymentTypeFullTime EmploymentType = "full_time"
	EmploymentTypePartTime EmploymentType = "part_time"
	EmploymentTypeContract EmploymentType = "contract"
	EmploymentTypeIntern   EmploymentType = "intern"
)

func (et EmploymentType) String() string {
	return string(et)
}

// EmploymentTypeValidator is a validator for the "employment_type" field enum values. It is called by the builders before save.
func EmploymentTypeValidator(et EmploymentType) error {
	switch et {
	case EmploymentTypeFullTime, EmploymentTypePartTime, EmploymentTypeContract, EmploymentTypeIntern:
		return nil
	default:
		return fmt.Errorf("employee: invalid enum value for employment_type field: %q", et)
	}
}

// Status defines the type for the "status" enum field.
type Status string

// StatusActive is the default value of the Status enum.
const DefaultStatus = StatusActive

// Status values.
const (
	StatusActive     Status = "active"
	StatusInactive   Status = "inactive"
	StatusOnLeave    Status = "on_leave"
	StatusTerminated Status = "terminated"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusActive, StatusInactive, StatusOnLeave, StatusTerminated:
		return nil
	default:
		return fmt.Errorf("employee: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the Employee queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByEmployeeID orders the results by the employee_id field.
func ByEmployeeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmployeeID, opts...).ToFunc()
}

// ByDepartment orders the results by the department field.
func ByDepartment(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDepartment, opts...).ToFunc()
}

// ByPosition orders the results by the position field.
func ByPosition(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPosition, opts...).ToFunc()
}

// ByManagerID orders the results by the manager_id field.
func ByManagerID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldManagerID, opts...).ToFunc()
}

// ByHireDate orders the results by the hire_date field.
func ByHireDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHireDate, opts...).ToFunc()
}

// ByTerminationDate orders the results by the termination_date field.
func ByTerminationDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTerminationDate, opts...).ToFunc()
}

// ByEmploymentType orders the results by the employment_type field.
func ByEmploymentType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmploymentType, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// BySalary orders the results by the salary field.
func BySalary(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSalary, opts...).ToFunc()
}

// ByWorkLocation orders the results by the work_location field.
func ByWorkLocation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWorkLocation, opts...).ToFunc()
}
