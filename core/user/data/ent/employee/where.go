// Code generated by ent, DO NOT EDIT.

package employee

import (
	"ncobase/user/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Employee {
	return predicate.Employee(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Employee {
	return predicate.Employee(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Employee {
	return predicate.Employee(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Employee {
	return predicate.Employee(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Employee {
	return predicate.Employee(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Employee {
	return predicate.Employee(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Employee {
	return predicate.Employee(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Employee {
	return predicate.Employee(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Employee {
	return predicate.Employee(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Employee {
	return predicate.Employee(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Employee {
	return predicate.Employee(sql.FieldContainsFold(FieldID, id))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v string) predicate.Employee {
	return predicate.Employee(sql.FieldEQ(FieldTenantID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v int64) predicate.Employee {
	return predicate.Employee(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v int64) predicate.Employee {
	return predicate.Employee(sql.FieldEQ(FieldUpdatedAt, v))
}

// EmployeeID applies equality check predicate on the "employee_id" field. It's identical to EmployeeIDEQ.
func EmployeeID(v string) predicate.Employee {
	return predicate.Employee(sql.FieldEQ(FieldEmployeeID, v))
}

// Department applies equality check predicate on the "department" field. It's identical to DepartmentEQ.
func Department(v string) predicate.Employee {
	return predicate.Employee(sql.FieldEQ(FieldDepartment, v))
}

// Position applies equality check predicate on the "position" field. It's identical to PositionEQ.
func Position(v string) predicate.Employee {
	return predicate.Employee(sql.FieldEQ(FieldPosition, v))
}

// ManagerID applies equality check predicate on the "manager_id" field. It's identical to ManagerIDEQ.
func ManagerID(v string) predicate.Employee {
	return predicate.Employee(sql.FieldEQ(FieldManagerID, v))
}

// HireDate applies equality check predicate on the "hire_date" field. It's identical to HireDateEQ.
func HireDate(v time.Time) predicate.Employee {
	return predicate.Employee(sql.FieldEQ(FieldHireDate, v))
}

// TerminationDate applies equality check predicate on the "termination_date" field. It's identical to TerminationDateEQ.
func TerminationDate(v time.Time) predicate.Employee {
	return predicate.Employee(sql.FieldEQ(FieldTerminationDate, v))
}

// Salary applies equality check predicate on the "salary" field. It's identical to SalaryEQ.
func Salary(v float64) predicate.Employee {
	return predicate.Employee(sql.FieldEQ(FieldSalary, v))
}

// WorkLocation applies equality check predicate on the "work_location" field. It's identical to WorkLocationEQ.
func WorkLocation(v string) predicate.Employee {
	return predicate.Employee(sql.FieldEQ(FieldWorkLocation, v))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v string) predicate.Employee {
	return predicate.Employee(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v string) predicate.Employee {
	return predicate.Employee(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...string) predicate.Employee {
	return predicate.Employee(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...string) predicate.Employee {
	return predicate.Employee(sql.FieldNotIn(FieldTenantID, vs...))
}

// TenantIDGT applies the GT predicate on the "tenant_id" field.
func TenantIDGT(v string) predicate.Employee {
	return predicate.Employee(sql.FieldGT(FieldTenantID, v))
}

// TenantIDGTE applies the GTE predicate on the "tenant_id" field.
func TenantIDGTE(v string) predicate.Employee {
	return predicate.Employee(sql.FieldGTE(FieldTenantID, v))
}

// TenantIDLT applies the LT predicate on the "tenant_id" field.
func TenantIDLT(v string) predicate.Employee {
	return predicate.Employee(sql.FieldLT(FieldTenantID, v))
}

// TenantIDLTE applies the LTE predicate on the "tenant_id" field.
func TenantIDLTE(v string) predicate.Employee {
	return predicate.Employee(sql.FieldLTE(FieldTenantID, v))
}

// TenantIDContains applies the Contains predicate on the "tenant_id" field.
func TenantIDContains(v string) predicate.Employee {
	return predicate.Employee(sql.FieldContains(FieldTenantID, v))
}

// TenantIDHasPrefix applies the HasPrefix predicate on the "tenant_id" field.
func TenantIDHasPrefix(v string) predicate.Employee {
	return predicate.Employee(sql.FieldHasPrefix(FieldTenantID, v))
}

// TenantIDHasSuffix applies the HasSuffix predicate on the "tenant_id" field.
func TenantIDHasSuffix(v string) predicate.Employee {
	return predicate.Employee(sql.FieldHasSuffix(FieldTenantID, v))
}

// TenantIDIsNil applies the IsNil predicate on the "tenant_id" field.
func TenantIDIsNil() predicate.Employee {
	return predicate.Employee(sql.FieldIsNull(FieldTenantID))
}

// TenantIDNotNil applies the NotNil predicate on the "tenant_id" field.
func TenantIDNotNil() predicate.Employee {
	return predicate.Employee(sql.FieldNotNull(FieldTenantID))
}

// TenantIDEqualFold applies the EqualFold predicate on the "tenant_id" field.
func TenantIDEqualFold(v string) predicate.Employee {
	return predicate.Employee(sql.FieldEqualFold(FieldTenantID, v))
}

// TenantIDContainsFold applies the ContainsFold predicate on the "tenant_id" field.
func TenantIDContainsFold(v string) predicate.Employee {
	return predicate.Employee(sql.FieldContainsFold(FieldTenantID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v int64) predicate.Employee {
	return predicate.Employee(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v int64) predicate.Employee {
	return predicate.Employee(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...int64) predicate.Employee {
	return predicate.Employee(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...int64) predicate.Employee {
	return predicate.Employee(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v int64) predicate.Employee {
	return predicate.Employee(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v int64) predicate.Employee {
	return predicate.Employee(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v int64) predicate.Employee {
	return predicate.Employee(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v int64) predicate.Employee {
	return predicate.Employee(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.Employee {
	return predicate.Employee(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.Employee {
	return predicate.Employee(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v int64) predicate.Employee {
	return predicate.Employee(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v int64) predicate.Employee {
	return predicate.Employee(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...int64) predicate.Employee {
	return predicate.Employee(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...int64) predicate.Employee {
	return predicate.Employee(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v int64) predicate.Employee {
	return predicate.Employee(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v int64) predicate.Employee {
	return predicate.Employee(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v int64) predicate.Employee {
	return predicate.Employee(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v int64) predicate.Employee {
	return predicate.Employee(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.Employee {
	return predicate.Employee(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.Employee {
	return predicate.Employee(sql.FieldNotNull(FieldUpdatedAt))
}

// EmployeeIDEQ applies the EQ predicate on the "employee_id" field.
func EmployeeIDEQ(v string) predicate.Employee {
	return predicate.Employee(sql.FieldEQ(FieldEmployeeID, v))
}

// EmployeeIDNEQ applies the NEQ predicate on the "employee_id" field.
func EmployeeIDNEQ(v string) predicate.Employee {
	return predicate.Employee(sql.FieldNEQ(FieldEmployeeID, v))
}

// EmployeeIDIn applies the In predicate on the "employee_id" field.
func EmployeeIDIn(vs ...string) predicate.Employee {
	return predicate.Employee(sql.FieldIn(FieldEmployeeID, vs...))
}

// EmployeeIDNotIn applies the NotIn predicate on the "employee_id" field.
func EmployeeIDNotIn(vs ...string) predicate.Employee {
	return predicate.Employee(sql.FieldNotIn(FieldEmployeeID, vs...))
}

// EmployeeIDGT applies the GT predicate on the "employee_id" field.
func EmployeeIDGT(v string) predicate.Employee {
	return predicate.Employee(sql.FieldGT(FieldEmployeeID, v))
}

// EmployeeIDGTE applies the GTE predicate on the "employee_id" field.
func EmployeeIDGTE(v string) predicate.Employee {
	return predicate.Employee(sql.FieldGTE(FieldEmployeeID, v))
}

// EmployeeIDLT applies the LT predicate on the "employee_id" field.
func EmployeeIDLT(v string) predicate.Employee {
	return predicate.Employee(sql.FieldLT(FieldEmployeeID, v))
}

// EmployeeIDLTE applies the LTE predicate on the "employee_id" field.
func EmployeeIDLTE(v string) predicate.Employee {
	return predicate.Employee(sql.FieldLTE(FieldEmployeeID, v))
}

// EmployeeIDContains applies the Contains predicate on the "employee_id" field.
func EmployeeIDContains(v string) predicate.Employee {
	return predicate.Employee(sql.FieldContains(FieldEmployeeID, v))
}

// EmployeeIDHasPrefix applies the HasPrefix predicate on the "employee_id" field.
func EmployeeIDHasPrefix(v string) predicate.Employee {
	return predicate.Employee(sql.FieldHasPrefix(FieldEmployeeID, v))
}

// EmployeeIDHasSuffix applies the HasSuffix predicate on the "employee_id" field.
func EmployeeIDHasSuffix(v string) predicate.Employee {
	return predicate.Employee(sql.FieldHasSuffix(FieldEmployeeID, v))
}

// EmployeeIDIsNil applies the IsNil predicate on the "employee_id" field.
func EmployeeIDIsNil() predicate.Employee {
	return predicate.Employee(sql.FieldIsNull(FieldEmployeeID))
}

// EmployeeIDNotNil applies the NotNil predicate on the "employee_id" field.
func EmployeeIDNotNil() predicate.Employee {
	return predicate.Employee(sql.FieldNotNull(FieldEmployeeID))
}

// EmployeeIDEqualFold applies the EqualFold predicate on the "employee_id" field.
func EmployeeIDEqualFold(v string) predicate.Employee {
	return predicate.Employee(sql.FieldEqualFold(FieldEmployeeID, v))
}

// EmployeeIDContainsFold applies the ContainsFold predicate on the "employee_id" field.
func EmployeeIDContainsFold(v string) predicate.Employee {
	return predicate.Employee(sql.FieldContainsFold(FieldEmployeeID, v))
}

// DepartmentEQ applies the EQ predicate on the "department" field.
func DepartmentEQ(v string) predicate.Employee {
	return predicate.Employee(sql.FieldEQ(FieldDepartment, v))
}

// DepartmentNEQ applies the NEQ predicate on the "department" field.
func DepartmentNEQ(v string) predicate.Employee {
	return predicate.Employee(sql.FieldNEQ(FieldDepartment, v))
}

// DepartmentIn applies the In predicate on the "department" field.
func DepartmentIn(vs ...string) predicate.Employee {
	return predicate.Employee(sql.FieldIn(FieldDepartment, vs...))
}

// DepartmentNotIn applies the NotIn predicate on the "department" field.
func DepartmentNotIn(vs ...string) predicate.Employee {
	return predicate.Employee(sql.FieldNotIn(FieldDepartment, vs...))
}

// DepartmentGT applies the GT predicate on the "department" field.
func DepartmentGT(v string) predicate.Employee {
	return predicate.Employee(sql.FieldGT(FieldDepartment, v))
}

// DepartmentGTE applies the GTE predicate on the "department" field.
func DepartmentGTE(v string) predicate.Employee {
	return predicate.Employee(sql.FieldGTE(FieldDepartment, v))
}

// DepartmentLT applies the LT predicate on the "department" field.
func DepartmentLT(v string) predicate.Employee {
	return predicate.Employee(sql.FieldLT(FieldDepartment, v))
}

// DepartmentLTE applies the LTE predicate on the "department" field.
func DepartmentLTE(v string) predicate.Employee {
	return predicate.Employee(sql.FieldLTE(FieldDepartment, v))
}

// DepartmentContains applies the Contains predicate on the "department" field.
func DepartmentContains(v string) predicate.Employee {
	return predicate.Employee(sql.FieldContains(FieldDepartment, v))
}

// DepartmentHasPrefix applies the HasPrefix predicate on the "department" field.
func DepartmentHasPrefix(v string) predicate.Employee {
	return predicate.Employee(sql.FieldHasPrefix(FieldDepartment, v))
}

// DepartmentHasSuffix applies the HasSuffix predicate on the "department" field.
func DepartmentHasSuffix(v string) predicate.Employee {
	return predicate.Employee(sql.FieldHasSuffix(FieldDepartment, v))
}

// DepartmentIsNil applies the IsNil predicate on the "department" field.
func DepartmentIsNil() predicate.Employee {
	return predicate.Employee(sql.FieldIsNull(FieldDepartment))
}

// DepartmentNotNil applies the NotNil predicate on the "department" field.
func DepartmentNotNil() predicate.Employee {
	return predicate.Employee(sql.FieldNotNull(FieldDepartment))
}

// DepartmentEqualFold applies the EqualFold predicate on the "department" field.
func DepartmentEqualFold(v string) predicate.Employee {
	return predicate.Employee(sql.FieldEqualFold(FieldDepartment, v))
}

// DepartmentContainsFold applies the ContainsFold predicate on the "department" field.
func DepartmentContainsFold(v string) predicate.Employee {
	return predicate.Employee(sql.FieldContainsFold(FieldDepartment, v))
}

// PositionEQ applies the EQ predicate on the "position" field.
func PositionEQ(v string) predicate.Employee {
	return predicate.Employee(sql.FieldEQ(FieldPosition, v))
}

// PositionNEQ applies the NEQ predicate on the "position" field.
func PositionNEQ(v string) predicate.Employee {
	return predicate.Employee(sql.FieldNEQ(FieldPosition, v))
}

// PositionIn applies the In predicate on the "position" field.
func PositionIn(vs ...string) predicate.Employee {
	return predicate.Employee(sql.FieldIn(FieldPosition, vs...))
}

// PositionNotIn applies the NotIn predicate on the "position" field.
func PositionNotIn(vs ...string) predicate.Employee {
	return predicate.Employee(sql.FieldNotIn(FieldPosition, vs...))
}

// PositionGT applies the GT predicate on the "position" field.
func PositionGT(v string) predicate.Employee {
	return predicate.Employee(sql.FieldGT(FieldPosition, v))
}

// PositionGTE applies the GTE predicate on the "position" field.
func PositionGTE(v string) predicate.Employee {
	return predicate.Employee(sql.FieldGTE(FieldPosition, v))
}

// PositionLT applies the LT predicate on the "position" field.
func PositionLT(v string) predicate.Employee {
	return predicate.Employee(sql.FieldLT(FieldPosition, v))
}

// PositionLTE applies the LTE predicate on the "position" field.
func PositionLTE(v string) predicate.Employee {
	return predicate.Employee(sql.FieldLTE(FieldPosition, v))
}

// PositionContains applies the Contains predicate on the "position" field.
func PositionContains(v string) predicate.Employee {
	return predicate.Employee(sql.FieldContains(FieldPosition, v))
}

// PositionHasPrefix applies the HasPrefix predicate on the "position" field.
func PositionHasPrefix(v string) predicate.Employee {
	return predicate.Employee(sql.FieldHasPrefix(FieldPosition, v))
}

// PositionHasSuffix applies the HasSuffix predicate on the "position" field.
func PositionHasSuffix(v string) predicate.Employee {
	return predicate.Employee(sql.FieldHasSuffix(FieldPosition, v))
}

// PositionIsNil applies the IsNil predicate on the "position" field.
func PositionIsNil() predicate.Employee {
	return predicate.Employee(sql.FieldIsNull(FieldPosition))
}

// PositionNotNil applies the NotNil predicate on the "position" field.
func PositionNotNil() predicate.Employee {
	return predicate.Employee(sql.FieldNotNull(FieldPosition))
}

// PositionEqualFold applies the EqualFold predicate on the "position" field.
func PositionEqualFold(v string) predicate.Employee {
	return predicate.Employee(sql.FieldEqualFold(FieldPosition, v))
}

// PositionContainsFold applies the ContainsFold predicate on the "position" field.
func PositionContainsFold(v string) predicate.Employee {
	return predicate.Employee(sql.FieldContainsFold(FieldPosition, v))
}

// ManagerIDEQ applies the EQ predicate on the "manager_id" field.
func ManagerIDEQ(v string) predicate.Employee {
	return predicate.Employee(sql.FieldEQ(FieldManagerID, v))
}

// ManagerIDNEQ applies the NEQ predicate on the "manager_id" field.
func ManagerIDNEQ(v string) predicate.Employee {
	return predicate.Employee(sql.FieldNEQ(FieldManagerID, v))
}

// ManagerIDIn applies the In predicate on the "manager_id" field.
func ManagerIDIn(vs ...string) predicate.Employee {
	return predicate.Employee(sql.FieldIn(FieldManagerID, vs...))
}

// ManagerIDNotIn applies the NotIn predicate on the "manager_id" field.
func ManagerIDNotIn(vs ...string) predicate.Employee {
	return predicate.Employee(sql.FieldNotIn(FieldManagerID, vs...))
}

// ManagerIDGT applies the GT predicate on the "manager_id" field.
func ManagerIDGT(v string) predicate.Employee {
	return predicate.Employee(sql.FieldGT(FieldManagerID, v))
}

// ManagerIDGTE applies the GTE predicate on the "manager_id" field.
func ManagerIDGTE(v string) predicate.Employee {
	return predicate.Employee(sql.FieldGTE(FieldManagerID, v))
}

// ManagerIDLT applies the LT predicate on the "manager_id" field.
func ManagerIDLT(v string) predicate.Employee {
	return predicate.Employee(sql.FieldLT(FieldManagerID, v))
}

// ManagerIDLTE applies the LTE predicate on the "manager_id" field.
func ManagerIDLTE(v string) predicate.Employee {
	return predicate.Employee(sql.FieldLTE(FieldManagerID, v))
}

// ManagerIDContains applies the Contains predicate on the "manager_id" field.
func ManagerIDContains(v string) predicate.Employee {
	return predicate.Employee(sql.FieldContains(FieldManagerID, v))
}

// ManagerIDHasPrefix applies the HasPrefix predicate on the "manager_id" field.
func ManagerIDHasPrefix(v string) predicate.Employee {
	return predicate.Employee(sql.FieldHasPrefix(FieldManagerID, v))
}

// ManagerIDHasSuffix applies the HasSuffix predicate on the "manager_id" field.
func ManagerIDHasSuffix(v string) predicate.Employee {
	return predicate.Employee(sql.FieldHasSuffix(FieldManagerID, v))
}

// ManagerIDIsNil applies the IsNil predicate on the "manager_id" field.
func ManagerIDIsNil() predicate.Employee {
	return predicate.Employee(sql.FieldIsNull(FieldManagerID))
}

// ManagerIDNotNil applies the NotNil predicate on the "manager_id" field.
func ManagerIDNotNil() predicate.Employee {
	return predicate.Employee(sql.FieldNotNull(FieldManagerID))
}

// ManagerIDEqualFold applies the EqualFold predicate on the "manager_id" field.
func ManagerIDEqualFold(v string) predicate.Employee {
	return predicate.Employee(sql.FieldEqualFold(FieldManagerID, v))
}

// ManagerIDContainsFold applies the ContainsFold predicate on the "manager_id" field.
func ManagerIDContainsFold(v string) predicate.Employee {
	return predicate.Employee(sql.FieldContainsFold(FieldManagerID, v))
}

// HireDateEQ applies the EQ predicate on the "hire_date" field.
func HireDateEQ(v time.Time) predicate.Employee {
	return predicate.Employee(sql.FieldEQ(FieldHireDate, v))
}

// HireDateNEQ applies the NEQ predicate on the "hire_date" field.
func HireDateNEQ(v time.Time) predicate.Employee {
	return predicate.Employee(sql.FieldNEQ(FieldHireDate, v))
}

// HireDateIn applies the In predicate on the "hire_date" field.
func HireDateIn(vs ...time.Time) predicate.Employee {
	return predicate.Employee(sql.FieldIn(FieldHireDate, vs...))
}

// HireDateNotIn applies the NotIn predicate on the "hire_date" field.
func HireDateNotIn(vs ...time.Time) predicate.Employee {
	return predicate.Employee(sql.FieldNotIn(FieldHireDate, vs...))
}

// HireDateGT applies the GT predicate on the "hire_date" field.
func HireDateGT(v time.Time) predicate.Employee {
	return predicate.Employee(sql.FieldGT(FieldHireDate, v))
}

// HireDateGTE applies the GTE predicate on the "hire_date" field.
func HireDateGTE(v time.Time) predicate.Employee {
	return predicate.Employee(sql.FieldGTE(FieldHireDate, v))
}

// HireDateLT applies the LT predicate on the "hire_date" field.
func HireDateLT(v time.Time) predicate.Employee {
	return predicate.Employee(sql.FieldLT(FieldHireDate, v))
}

// HireDateLTE applies the LTE predicate on the "hire_date" field.
func HireDateLTE(v time.Time) predicate.Employee {
	return predicate.Employee(sql.FieldLTE(FieldHireDate, v))
}

// HireDateIsNil applies the IsNil predicate on the "hire_date" field.
func HireDateIsNil() predicate.Employee {
	return predicate.Employee(sql.FieldIsNull(FieldHireDate))
}

// HireDateNotNil applies the NotNil predicate on the "hire_date" field.
func HireDateNotNil() predicate.Employee {
	return predicate.Employee(sql.FieldNotNull(FieldHireDate))
}

// TerminationDateEQ applies the EQ predicate on the "termination_date" field.
func TerminationDateEQ(v time.Time) predicate.Employee {
	return predicate.Employee(sql.FieldEQ(FieldTerminationDate, v))
}

// TerminationDateNEQ applies the NEQ predicate on the "termination_date" field.
func TerminationDateNEQ(v time.Time) predicate.Employee {
	return predicate.Employee(sql.FieldNEQ(FieldTerminationDate, v))
}

// TerminationDateIn applies the In predicate on the "termination_date" field.
func TerminationDateIn(vs ...time.Time) predicate.Employee {
	return predicate.Employee(sql.FieldIn(FieldTerminationDate, vs...))
}

// TerminationDateNotIn applies the NotIn predicate on the "termination_date" field.
func TerminationDateNotIn(vs ...time.Time) predicate.Employee {
	return predicate.Employee(sql.FieldNotIn(FieldTerminationDate, vs...))
}

// TerminationDateGT applies the GT predicate on the "termination_date" field.
func TerminationDateGT(v time.Time) predicate.Employee {
	return predicate.Employee(sql.FieldGT(FieldTerminationDate, v))
}

// TerminationDateGTE applies the GTE predicate on the "termination_date" field.
func TerminationDateGTE(v time.Time) predicate.Employee {
	return predicate.Employee(sql.FieldGTE(FieldTerminationDate, v))
}

// TerminationDateLT applies the LT predicate on the "termination_date" field.
func TerminationDateLT(v time.Time) predicate.Employee {
	return predicate.Employee(sql.FieldLT(FieldTerminationDate, v))
}

// TerminationDateLTE applies the LTE predicate on the "termination_date" field.
func TerminationDateLTE(v time.Time) predicate.Employee {
	return predicate.Employee(sql.FieldLTE(FieldTerminationDate, v))
}

// TerminationDateIsNil applies the IsNil predicate on the "termination_date" field.
func TerminationDateIsNil() predicate.Employee {
	return predicate.Employee(sql.FieldIsNull(FieldTerminationDate))
}

// TerminationDateNotNil applies the NotNil predicate on the "termination_date" field.
func TerminationDateNotNil() predicate.Employee {
	return predicate.Employee(sql.FieldNotNull(FieldTerminationDate))
}

// EmploymentTypeEQ applies the EQ predicate on the "employment_type" field.
func EmploymentTypeEQ(v EmploymentType) predicate.Employee {
	return predicate.Employee(sql.FieldEQ(FieldEmploymentType, v))
}

// EmploymentTypeNEQ applies the NEQ predicate on the "employment_type" field.
func EmploymentTypeNEQ(v EmploymentType) predicate.Employee {
	return predicate.Employee(sql.FieldNEQ(FieldEmploymentType, v))
}

// EmploymentTypeIn applies the In predicate on the "employment_type" field.
func EmploymentTypeIn(vs ...EmploymentType) predicate.Employee {
	return predicate.Employee(sql.FieldIn(FieldEmploymentType, vs...))
}

// EmploymentTypeNotIn applies the NotIn predicate on the "employment_type" field.
func EmploymentTypeNotIn(vs ...EmploymentType) predicate.Employee {
	return predicate.Employee(sql.FieldNotIn(FieldEmploymentType, vs...))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Employee {
	return predicate.Employee(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Employee {
	return predicate.Employee(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Employee {
	return predicate.Employee(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Employee {
	return predicate.Employee(sql.FieldNotIn(FieldStatus, vs...))
}

// SalaryEQ applies the EQ predicate on the "salary" field.
func SalaryEQ(v float64) predicate.Employee {
	return predicate.Employee(sql.FieldEQ(FieldSalary, v))
}

// SalaryNEQ applies the NEQ predicate on the "salary" field.
func SalaryNEQ(v float64) predicate.Employee {
	return predicate.Employee(sql.FieldNEQ(FieldSalary, v))
}

// SalaryIn applies the In predicate on the "salary" field.
func SalaryIn(vs ...float64) predicate.Employee {
	return predicate.Employee(sql.FieldIn(FieldSalary, vs...))
}

// SalaryNotIn applies the NotIn predicate on the "salary" field.
func SalaryNotIn(vs ...float64) predicate.Employee {
	return predicate.Employee(sql.FieldNotIn(FieldSalary, vs...))
}

// SalaryGT applies the GT predicate on the "salary" field.
func SalaryGT(v float64) predicate.Employee {
	return predicate.Employee(sql.FieldGT(FieldSalary, v))
}

// SalaryGTE applies the GTE predicate on the "salary" field.
func SalaryGTE(v float64) predicate.Employee {
	return predicate.Employee(sql.FieldGTE(FieldSalary, v))
}

// SalaryLT applies the LT predicate on the "salary" field.
func SalaryLT(v float64) predicate.Employee {
	return predicate.Employee(sql.FieldLT(FieldSalary, v))
}

// SalaryLTE applies the LTE predicate on the "salary" field.
func SalaryLTE(v float64) predicate.Employee {
	return predicate.Employee(sql.FieldLTE(FieldSalary, v))
}

// SalaryIsNil applies the IsNil predicate on the "salary" field.
func SalaryIsNil() predicate.Employee {
	return predicate.Employee(sql.FieldIsNull(FieldSalary))
}

// SalaryNotNil applies the NotNil predicate on the "salary" field.
func SalaryNotNil() predicate.Employee {
	return predicate.Employee(sql.FieldNotNull(FieldSalary))
}

// WorkLocationEQ applies the EQ predicate on the "work_location" field.
func WorkLocationEQ(v string) predicate.Employee {
	return predicate.Employee(sql.FieldEQ(FieldWorkLocation, v))
}

// WorkLocationNEQ applies the NEQ predicate on the "work_location" field.
func WorkLocationNEQ(v string) predicate.Employee {
	return predicate.Employee(sql.FieldNEQ(FieldWorkLocation, v))
}

// WorkLocationIn applies the In predicate on the "work_location" field.
func WorkLocationIn(vs ...string) predicate.Employee {
	return predicate.Employee(sql.FieldIn(FieldWorkLocation, vs...))
}

// WorkLocationNotIn applies the NotIn predicate on the "work_location" field.
func WorkLocationNotIn(vs ...string) predicate.Employee {
	return predicate.Employee(sql.FieldNotIn(FieldWorkLocation, vs...))
}

// WorkLocationGT applies the GT predicate on the "work_location" field.
func WorkLocationGT(v string) predicate.Employee {
	return predicate.Employee(sql.FieldGT(FieldWorkLocation, v))
}

// WorkLocationGTE applies the GTE predicate on the "work_location" field.
func WorkLocationGTE(v string) predicate.Employee {
	return predicate.Employee(sql.FieldGTE(FieldWorkLocation, v))
}

// WorkLocationLT applies the LT predicate on the "work_location" field.
func WorkLocationLT(v string) predicate.Employee {
	return predicate.Employee(sql.FieldLT(FieldWorkLocation, v))
}

// WorkLocationLTE applies the LTE predicate on the "work_location" field.
func WorkLocationLTE(v string) predicate.Employee {
	return predicate.Employee(sql.FieldLTE(FieldWorkLocation, v))
}

// WorkLocationContains applies the Contains predicate on the "work_location" field.
func WorkLocationContains(v string) predicate.Employee {
	return predicate.Employee(sql.FieldContains(FieldWorkLocation, v))
}

// WorkLocationHasPrefix applies the HasPrefix predicate on the "work_location" field.
func WorkLocationHasPrefix(v string) predicate.Employee {
	return predicate.Employee(sql.FieldHasPrefix(FieldWorkLocation, v))
}

// WorkLocationHasSuffix applies the HasSuffix predicate on the "work_location" field.
func WorkLocationHasSuffix(v string) predicate.Employee {
	return predicate.Employee(sql.FieldHasSuffix(FieldWorkLocation, v))
}

// WorkLocationIsNil applies the IsNil predicate on the "work_location" field.
func WorkLocationIsNil() predicate.Employee {
	return predicate.Employee(sql.FieldIsNull(FieldWorkLocation))
}

// WorkLocationNotNil applies the NotNil predicate on the "work_location" field.
func WorkLocationNotNil() predicate.Employee {
	return predicate.Employee(sql.FieldNotNull(FieldWorkLocation))
}

// WorkLocationEqualFold applies the EqualFold predicate on the "work_location" field.
func WorkLocationEqualFold(v string) predicate.Employee {
	return predicate.Employee(sql.FieldEqualFold(FieldWorkLocation, v))
}

// WorkLocationContainsFold applies the ContainsFold predicate on the "work_location" field.
func WorkLocationContainsFold(v string) predicate.Employee {
	return predicate.Employee(sql.FieldContainsFold(FieldWorkLocation, v))
}

// ContactInfoIsNil applies the IsNil predicate on the "contact_info" field.
func ContactInfoIsNil() predicate.Employee {
	return predicate.Employee(sql.FieldIsNull(FieldContactInfo))
}

// ContactInfoNotNil applies the NotNil predicate on the "contact_info" field.
func ContactInfoNotNil() predicate.Employee {
	return predicate.Employee(sql.FieldNotNull(FieldContactInfo))
}

// SkillsIsNil applies the IsNil predicate on the "skills" field.
func SkillsIsNil() predicate.Employee {
	return predicate.Employee(sql.FieldIsNull(FieldSkills))
}

// SkillsNotNil applies the NotNil predicate on the "skills" field.
func SkillsNotNil() predicate.Employee {
	return predicate.Employee(sql.FieldNotNull(FieldSkills))
}

// CertificationsIsNil applies the IsNil predicate on the "certifications" field.
func CertificationsIsNil() predicate.Employee {
	return predicate.Employee(sql.FieldIsNull(FieldCertifications))
}

// CertificationsNotNil applies the NotNil predicate on the "certifications" field.
func CertificationsNotNil() predicate.Employee {
	return predicate.Employee(sql.FieldNotNull(FieldCertifications))
}

// ExtrasIsNil applies the IsNil predicate on the "extras" field.
func ExtrasIsNil() predicate.Employee {
	return predicate.Employee(sql.FieldIsNull(FieldExtras))
}

// ExtrasNotNil applies the NotNil predicate on the "extras" field.
func ExtrasNotNil() predicate.Employee {
	return predicate.Employee(sql.FieldNotNull(FieldExtras))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Employee) predicate.Employee {
	return predicate.Employee(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Employee) predicate.Employee {
	return predicate.Employee(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Employee) predicate.Employee {
	return predicate.Employee(sql.NotPredicates(p))
}
