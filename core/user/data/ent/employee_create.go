// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/user/data/ent/employee"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EmployeeCreate is the builder for creating a Employee entity.
type EmployeeCreate struct {
	config
	mutation *EmployeeMutation
	hooks    []Hook
}

// SetTenantID sets the "tenant_id" field.
func (ec *EmployeeCreate) SetTenantID(s string) *EmployeeCreate {
	ec.mutation.SetTenantID(s)
	return ec
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (ec *EmployeeCreate) SetNillableTenantID(s *string) *EmployeeCreate {
	if s != nil {
		ec.SetTenantID(*s)
	}
	return ec
}

// SetCreatedAt sets the "created_at" field.
func (ec *EmployeeCreate) SetCreatedAt(i int64) *EmployeeCreate {
	ec.mutation.SetCreatedAt(i)
	return ec
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ec *EmployeeCreate) SetNillableCreatedAt(i *int64) *EmployeeCreate {
	if i != nil {
		ec.SetCreatedAt(*i)
	}
	return ec
}

// SetUpdatedAt sets the "updated_at" field.
func (ec *EmployeeCreate) SetUpdatedAt(i int64) *EmployeeCreate {
	ec.mutation.SetUpdatedAt(i)
	return ec
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ec *EmployeeCreate) SetNillableUpdatedAt(i *int64) *EmployeeCreate {
	if i != nil {
		ec.SetUpdatedAt(*i)
	}
	return ec
}

// SetEmployeeID sets the "employee_id" field.
func (ec *EmployeeCreate) SetEmployeeID(s string) *EmployeeCreate {
	ec.mutation.SetEmployeeID(s)
	return ec
}

// SetNillableEmployeeID sets the "employee_id" field if the given value is not nil.
func (ec *EmployeeCreate) SetNillableEmployeeID(s *string) *EmployeeCreate {
	if s != nil {
		ec.SetEmployeeID(*s)
	}
	return ec
}

// SetDepartment sets the "department" field.
func (ec *EmployeeCreate) SetDepartment(s string) *EmployeeCreate {
	ec.mutation.SetDepartment(s)
	return ec
}

// SetNillableDepartment sets the "department" field if the given value is not nil.
func (ec *EmployeeCreate) SetNillableDepartment(s *string) *EmployeeCreate {
	if s != nil {
		ec.SetDepartment(*s)
	}
	return ec
}

// SetPosition sets the "position" field.
func (ec *EmployeeCreate) SetPosition(s string) *EmployeeCreate {
	ec.mutation.SetPosition(s)
	return ec
}

// SetNillablePosition sets the "position" field if the given value is not nil.
func (ec *EmployeeCreate) SetNillablePosition(s *string) *EmployeeCreate {
	if s != nil {
		ec.SetPosition(*s)
	}
	return ec
}

// SetManagerID sets the "manager_id" field.
func (ec *EmployeeCreate) SetManagerID(s string) *EmployeeCreate {
	ec.mutation.SetManagerID(s)
	return ec
}

// SetNillableManagerID sets the "manager_id" field if the given value is not nil.
func (ec *EmployeeCreate) SetNillableManagerID(s *string) *EmployeeCreate {
	if s != nil {
		ec.SetManagerID(*s)
	}
	return ec
}

// SetHireDate sets the "hire_date" field.
func (ec *EmployeeCreate) SetHireDate(t time.Time) *EmployeeCreate {
	ec.mutation.SetHireDate(t)
	return ec
}

// SetNillableHireDate sets the "hire_date" field if the given value is not nil.
func (ec *EmployeeCreate) SetNillableHireDate(t *time.Time) *EmployeeCreate {
	if t != nil {
		ec.SetHireDate(*t)
	}
	return ec
}

// SetTerminationDate sets the "termination_date" field.
func (ec *EmployeeCreate) SetTerminationDate(t time.Time) *EmployeeCreate {
	ec.mutation.SetTerminationDate(t)
	return ec
}

// SetNillableTerminationDate sets the "termination_date" field if the given value is not nil.
func (ec *EmployeeCreate) SetNillableTerminationDate(t *time.Time) *EmployeeCreate {
	if t != nil {
		ec.SetTerminationDate(*t)
	}
	return ec
}

// SetEmploymentType sets the "employment_type" field.
func (ec *EmployeeCreate) SetEmploymentType(et employee.EmploymentType) *EmployeeCreate {
	ec.mutation.SetEmploymentType(et)
	return ec
}

// SetNillableEmploymentType sets the "employment_type" field if the given value is not nil.
func (ec *EmployeeCreate) SetNillableEmploymentType(et *employee.EmploymentType) *EmployeeCreate {
	if et != nil {
		ec.SetEmploymentType(*et)
	}
	return ec
}

// SetStatus sets the "status" field.
func (ec *EmployeeCreate) SetStatus(e employee.Status) *EmployeeCreate {
	ec.mutation.SetStatus(e)
	return ec
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ec *EmployeeCreate) SetNillableStatus(e *employee.Status) *EmployeeCreate {
	if e != nil {
		ec.SetStatus(*e)
	}
	return ec
}

// SetSalary sets the "salary" field.
func (ec *EmployeeCreate) SetSalary(f float64) *EmployeeCreate {
	ec.mutation.SetSalary(f)
	return ec
}

// SetNillableSalary sets the "salary" field if the given value is not nil.
func (ec *EmployeeCreate) SetNillableSalary(f *float64) *EmployeeCreate {
	if f != nil {
		ec.SetSalary(*f)
	}
	return ec
}

// SetWorkLocation sets the "work_location" field.
func (ec *EmployeeCreate) SetWorkLocation(s string) *EmployeeCreate {
	ec.mutation.SetWorkLocation(s)
	return ec
}

// SetNillableWorkLocation sets the "work_location" field if the given value is not nil.
func (ec *EmployeeCreate) SetNillableWorkLocation(s *string) *EmployeeCreate {
	if s != nil {
		ec.SetWorkLocation(*s)
	}
	return ec
}

// SetContactInfo sets the "contact_info" field.
func (ec *EmployeeCreate) SetContactInfo(m map[string]interface{}) *EmployeeCreate {
	ec.mutation.SetContactInfo(m)
	return ec
}

// SetSkills sets the "skills" field.
func (ec *EmployeeCreate) SetSkills(s []string) *EmployeeCreate {
	ec.mutation.SetSkills(s)
	return ec
}

// SetCertifications sets the "certifications" field.
func (ec *EmployeeCreate) SetCertifications(s []string) *EmployeeCreate {
	ec.mutation.SetCertifications(s)
	return ec
}

// SetExtras sets the "extras" field.
func (ec *EmployeeCreate) SetExtras(m map[string]interface{}) *EmployeeCreate {
	ec.mutation.SetExtras(m)
	return ec
}

// SetID sets the "id" field.
func (ec *EmployeeCreate) SetID(s string) *EmployeeCreate {
	ec.mutation.SetID(s)
	return ec
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ec *EmployeeCreate) SetNillableID(s *string) *EmployeeCreate {
	if s != nil {
		ec.SetID(*s)
	}
	return ec
}

// Mutation returns the EmployeeMutation object of the builder.
func (ec *EmployeeCreate) Mutation() *EmployeeMutation {
	return ec.mutation
}

// Save creates the Employee in the database.
func (ec *EmployeeCreate) Save(ctx context.Context) (*Employee, error) {
	ec.defaults()
	return withHooks(ctx, ec.sqlSave, ec.mutation, ec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ec *EmployeeCreate) SaveX(ctx context.Context) *Employee {
	v, err := ec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ec *EmployeeCreate) Exec(ctx context.Context) error {
	_, err := ec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ec *EmployeeCreate) ExecX(ctx context.Context) {
	if err := ec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ec *EmployeeCreate) defaults() {
	if _, ok := ec.mutation.CreatedAt(); !ok {
		v := employee.DefaultCreatedAt()
		ec.mutation.SetCreatedAt(v)
	}
	if _, ok := ec.mutation.UpdatedAt(); !ok {
		v := employee.DefaultUpdatedAt()
		ec.mutation.SetUpdatedAt(v)
	}
	if _, ok := ec.mutation.EmploymentType(); !ok {
		v := employee.DefaultEmploymentType
		ec.mutation.SetEmploymentType(v)
	}
	if _, ok := ec.mutation.Status(); !ok {
		v := employee.DefaultStatus
		ec.mutation.SetStatus(v)
	}
	if _, ok := ec.mutation.ID(); !ok {
		v := employee.DefaultID()
		ec.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ec *EmployeeCreate) check() error {
	if v, ok := ec.mutation.TenantID(); ok {
		if err := employee.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "Employee.tenant_id": %w`, err)}
		}
	}
	if _, ok := ec.mutation.EmploymentType(); !ok {
		return &ValidationError{Name: "employment_type", err: errors.New(`ent: missing required field "Employee.employment_type"`)}
	}
	if v, ok := ec.mutation.EmploymentType(); ok {
		if err := employee.EmploymentTypeValidator(v); err != nil {
			return &ValidationError{Name: "employment_type", err: fmt.Errorf(`ent: validator failed for field "Employee.employment_type": %w`, err)}
		}
	}
	if _, ok := ec.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Employee.status"`)}
	}
	if v, ok := ec.mutation.Status(); ok {
		if err := employee.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Employee.status": %w`, err)}
		}
	}
	return nil
}

func (ec *EmployeeCreate) sqlSave(ctx context.Context) (*Employee, error) {
	if err := ec.check(); err != nil {
		return nil, err
	}
	_node, _spec := ec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Employee.ID type: %T", _spec.ID.Value)
		}
	}
	ec.mutation.id = &_node.ID
	ec.mutation.done = true
	return _node, nil
}

func (ec *EmployeeCreate) createSpec() (*Employee, *sqlgraph.CreateSpec) {
	var (
		_node = &Employee{config: ec.config}
		_spec = sqlgraph.NewCreateSpec(employee.Table, sqlgraph.NewFieldSpec(employee.FieldID, field.TypeString))
	)
	if id, ok := ec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ec.mutation.TenantID(); ok {
		_spec.SetField(employee.FieldTenantID, field.TypeString, value)
		_node.TenantID = value
	}
	if value, ok := ec.mutation.CreatedAt(); ok {
		_spec.SetField(employee.FieldCreatedAt, field.TypeInt64, value)
		_node.CreatedAt = value
	}
	if value, ok := ec.mutation.UpdatedAt(); ok {
		_spec.SetField(employee.FieldUpdatedAt, field.TypeInt64, value)
		_node.UpdatedAt = value
	}
	if value, ok := ec.mutation.EmployeeID(); ok {
		_spec.SetField(employee.FieldEmployeeID, field.TypeString, value)
		_node.EmployeeID = value
	}
	if value, ok := ec.mutation.Department(); ok {
		_spec.SetField(employee.FieldDepartment, field.TypeString, value)
		_node.Department = value
	}
	if value, ok := ec.mutation.Position(); ok {
		_spec.SetField(employee.FieldPosition, field.TypeString, value)
		_node.Position = value
	}
	if value, ok := ec.mutation.ManagerID(); ok {
		_spec.SetField(employee.FieldManagerID, field.TypeString, value)
		_node.ManagerID = value
	}
	if value, ok := ec.mutation.HireDate(); ok {
		_spec.SetField(employee.FieldHireDate, field.TypeTime, value)
		_node.HireDate = value
	}
	if value, ok := ec.mutation.TerminationDate(); ok {
		_spec.SetField(employee.FieldTerminationDate, field.TypeTime, value)
		_node.TerminationDate = &value
	}
	if value, ok := ec.mutation.EmploymentType(); ok {
		_spec.SetField(employee.FieldEmploymentType, field.TypeEnum, value)
		_node.EmploymentType = value
	}
	if value, ok := ec.mutation.Status(); ok {
		_spec.SetField(employee.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := ec.mutation.Salary(); ok {
		_spec.SetField(employee.FieldSalary, field.TypeFloat64, value)
		_node.Salary = value
	}
	if value, ok := ec.mutation.WorkLocation(); ok {
		_spec.SetField(employee.FieldWorkLocation, field.TypeString, value)
		_node.WorkLocation = value
	}
	if value, ok := ec.mutation.ContactInfo(); ok {
		_spec.SetField(employee.FieldContactInfo, field.TypeJSON, value)
		_node.ContactInfo = value
	}
	if value, ok := ec.mutation.Skills(); ok {
		_spec.SetField(employee.FieldSkills, field.TypeJSON, value)
		_node.Skills = value
	}
	if value, ok := ec.mutation.Certifications(); ok {
		_spec.SetField(employee.FieldCertifications, field.TypeJSON, value)
		_node.Certifications = value
	}
	if value, ok := ec.mutation.Extras(); ok {
		_spec.SetField(employee.FieldExtras, field.TypeJSON, value)
		_node.Extras = value
	}
	return _node, _spec
}

// EmployeeCreateBulk is the builder for creating many Employee entities in bulk.
type EmployeeCreateBulk struct {
	config
	err      error
	builders []*EmployeeCreate
}

// Save creates the Employee entities in the database.
func (ecb *EmployeeCreateBulk) Save(ctx context.Context) ([]*Employee, error) {
	if ecb.err != nil {
		return nil, ecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ecb.builders))
	nodes := make([]*Employee, len(ecb.builders))
	mutators := make([]Mutator, len(ecb.builders))
	for i := range ecb.builders {
		func(i int, root context.Context) {
			builder := ecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EmployeeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ecb *EmployeeCreateBulk) SaveX(ctx context.Context) []*Employee {
	v, err := ecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ecb *EmployeeCreateBulk) Exec(ctx context.Context) error {
	_, err := ecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecb *EmployeeCreateBulk) ExecX(ctx context.Context) {
	if err := ecb.Exec(ctx); err != nil {
		panic(err)
	}
}
