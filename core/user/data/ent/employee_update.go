// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/user/data/ent/employee"
	"ncobase/user/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// EmployeeUpdate is the builder for updating Employee entities.
type EmployeeUpdate struct {
	config
	hooks    []Hook
	mutation *EmployeeMutation
}

// Where appends a list predicates to the EmployeeUpdate builder.
func (eu *EmployeeUpdate) Where(ps ...predicate.Employee) *EmployeeUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetSpaceID sets the "space_id" field.
func (eu *EmployeeUpdate) SetSpaceID(s string) *EmployeeUpdate {
	eu.mutation.SetSpaceID(s)
	return eu
}

// SetNillableSpaceID sets the "space_id" field if the given value is not nil.
func (eu *EmployeeUpdate) SetNillableSpaceID(s *string) *EmployeeUpdate {
	if s != nil {
		eu.SetSpaceID(*s)
	}
	return eu
}

// ClearSpaceID clears the value of the "space_id" field.
func (eu *EmployeeUpdate) ClearSpaceID() *EmployeeUpdate {
	eu.mutation.ClearSpaceID()
	return eu
}

// SetUpdatedAt sets the "updated_at" field.
func (eu *EmployeeUpdate) SetUpdatedAt(i int64) *EmployeeUpdate {
	eu.mutation.ResetUpdatedAt()
	eu.mutation.SetUpdatedAt(i)
	return eu
}

// AddUpdatedAt adds i to the "updated_at" field.
func (eu *EmployeeUpdate) AddUpdatedAt(i int64) *EmployeeUpdate {
	eu.mutation.AddUpdatedAt(i)
	return eu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (eu *EmployeeUpdate) ClearUpdatedAt() *EmployeeUpdate {
	eu.mutation.ClearUpdatedAt()
	return eu
}

// SetEmployeeID sets the "employee_id" field.
func (eu *EmployeeUpdate) SetEmployeeID(s string) *EmployeeUpdate {
	eu.mutation.SetEmployeeID(s)
	return eu
}

// SetNillableEmployeeID sets the "employee_id" field if the given value is not nil.
func (eu *EmployeeUpdate) SetNillableEmployeeID(s *string) *EmployeeUpdate {
	if s != nil {
		eu.SetEmployeeID(*s)
	}
	return eu
}

// ClearEmployeeID clears the value of the "employee_id" field.
func (eu *EmployeeUpdate) ClearEmployeeID() *EmployeeUpdate {
	eu.mutation.ClearEmployeeID()
	return eu
}

// SetDepartment sets the "department" field.
func (eu *EmployeeUpdate) SetDepartment(s string) *EmployeeUpdate {
	eu.mutation.SetDepartment(s)
	return eu
}

// SetNillableDepartment sets the "department" field if the given value is not nil.
func (eu *EmployeeUpdate) SetNillableDepartment(s *string) *EmployeeUpdate {
	if s != nil {
		eu.SetDepartment(*s)
	}
	return eu
}

// ClearDepartment clears the value of the "department" field.
func (eu *EmployeeUpdate) ClearDepartment() *EmployeeUpdate {
	eu.mutation.ClearDepartment()
	return eu
}

// SetPosition sets the "position" field.
func (eu *EmployeeUpdate) SetPosition(s string) *EmployeeUpdate {
	eu.mutation.SetPosition(s)
	return eu
}

// SetNillablePosition sets the "position" field if the given value is not nil.
func (eu *EmployeeUpdate) SetNillablePosition(s *string) *EmployeeUpdate {
	if s != nil {
		eu.SetPosition(*s)
	}
	return eu
}

// ClearPosition clears the value of the "position" field.
func (eu *EmployeeUpdate) ClearPosition() *EmployeeUpdate {
	eu.mutation.ClearPosition()
	return eu
}

// SetManagerID sets the "manager_id" field.
func (eu *EmployeeUpdate) SetManagerID(s string) *EmployeeUpdate {
	eu.mutation.SetManagerID(s)
	return eu
}

// SetNillableManagerID sets the "manager_id" field if the given value is not nil.
func (eu *EmployeeUpdate) SetNillableManagerID(s *string) *EmployeeUpdate {
	if s != nil {
		eu.SetManagerID(*s)
	}
	return eu
}

// ClearManagerID clears the value of the "manager_id" field.
func (eu *EmployeeUpdate) ClearManagerID() *EmployeeUpdate {
	eu.mutation.ClearManagerID()
	return eu
}

// SetHireDate sets the "hire_date" field.
func (eu *EmployeeUpdate) SetHireDate(t time.Time) *EmployeeUpdate {
	eu.mutation.SetHireDate(t)
	return eu
}

// SetNillableHireDate sets the "hire_date" field if the given value is not nil.
func (eu *EmployeeUpdate) SetNillableHireDate(t *time.Time) *EmployeeUpdate {
	if t != nil {
		eu.SetHireDate(*t)
	}
	return eu
}

// ClearHireDate clears the value of the "hire_date" field.
func (eu *EmployeeUpdate) ClearHireDate() *EmployeeUpdate {
	eu.mutation.ClearHireDate()
	return eu
}

// SetTerminationDate sets the "termination_date" field.
func (eu *EmployeeUpdate) SetTerminationDate(t time.Time) *EmployeeUpdate {
	eu.mutation.SetTerminationDate(t)
	return eu
}

// SetNillableTerminationDate sets the "termination_date" field if the given value is not nil.
func (eu *EmployeeUpdate) SetNillableTerminationDate(t *time.Time) *EmployeeUpdate {
	if t != nil {
		eu.SetTerminationDate(*t)
	}
	return eu
}

// ClearTerminationDate clears the value of the "termination_date" field.
func (eu *EmployeeUpdate) ClearTerminationDate() *EmployeeUpdate {
	eu.mutation.ClearTerminationDate()
	return eu
}

// SetEmploymentType sets the "employment_type" field.
func (eu *EmployeeUpdate) SetEmploymentType(et employee.EmploymentType) *EmployeeUpdate {
	eu.mutation.SetEmploymentType(et)
	return eu
}

// SetNillableEmploymentType sets the "employment_type" field if the given value is not nil.
func (eu *EmployeeUpdate) SetNillableEmploymentType(et *employee.EmploymentType) *EmployeeUpdate {
	if et != nil {
		eu.SetEmploymentType(*et)
	}
	return eu
}

// SetStatus sets the "status" field.
func (eu *EmployeeUpdate) SetStatus(e employee.Status) *EmployeeUpdate {
	eu.mutation.SetStatus(e)
	return eu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (eu *EmployeeUpdate) SetNillableStatus(e *employee.Status) *EmployeeUpdate {
	if e != nil {
		eu.SetStatus(*e)
	}
	return eu
}

// SetSalary sets the "salary" field.
func (eu *EmployeeUpdate) SetSalary(f float64) *EmployeeUpdate {
	eu.mutation.ResetSalary()
	eu.mutation.SetSalary(f)
	return eu
}

// SetNillableSalary sets the "salary" field if the given value is not nil.
func (eu *EmployeeUpdate) SetNillableSalary(f *float64) *EmployeeUpdate {
	if f != nil {
		eu.SetSalary(*f)
	}
	return eu
}

// AddSalary adds f to the "salary" field.
func (eu *EmployeeUpdate) AddSalary(f float64) *EmployeeUpdate {
	eu.mutation.AddSalary(f)
	return eu
}

// ClearSalary clears the value of the "salary" field.
func (eu *EmployeeUpdate) ClearSalary() *EmployeeUpdate {
	eu.mutation.ClearSalary()
	return eu
}

// SetWorkLocation sets the "work_location" field.
func (eu *EmployeeUpdate) SetWorkLocation(s string) *EmployeeUpdate {
	eu.mutation.SetWorkLocation(s)
	return eu
}

// SetNillableWorkLocation sets the "work_location" field if the given value is not nil.
func (eu *EmployeeUpdate) SetNillableWorkLocation(s *string) *EmployeeUpdate {
	if s != nil {
		eu.SetWorkLocation(*s)
	}
	return eu
}

// ClearWorkLocation clears the value of the "work_location" field.
func (eu *EmployeeUpdate) ClearWorkLocation() *EmployeeUpdate {
	eu.mutation.ClearWorkLocation()
	return eu
}

// SetContactInfo sets the "contact_info" field.
func (eu *EmployeeUpdate) SetContactInfo(m map[string]interface{}) *EmployeeUpdate {
	eu.mutation.SetContactInfo(m)
	return eu
}

// ClearContactInfo clears the value of the "contact_info" field.
func (eu *EmployeeUpdate) ClearContactInfo() *EmployeeUpdate {
	eu.mutation.ClearContactInfo()
	return eu
}

// SetSkills sets the "skills" field.
func (eu *EmployeeUpdate) SetSkills(s []string) *EmployeeUpdate {
	eu.mutation.SetSkills(s)
	return eu
}

// AppendSkills appends s to the "skills" field.
func (eu *EmployeeUpdate) AppendSkills(s []string) *EmployeeUpdate {
	eu.mutation.AppendSkills(s)
	return eu
}

// ClearSkills clears the value of the "skills" field.
func (eu *EmployeeUpdate) ClearSkills() *EmployeeUpdate {
	eu.mutation.ClearSkills()
	return eu
}

// SetCertifications sets the "certifications" field.
func (eu *EmployeeUpdate) SetCertifications(s []string) *EmployeeUpdate {
	eu.mutation.SetCertifications(s)
	return eu
}

// AppendCertifications appends s to the "certifications" field.
func (eu *EmployeeUpdate) AppendCertifications(s []string) *EmployeeUpdate {
	eu.mutation.AppendCertifications(s)
	return eu
}

// ClearCertifications clears the value of the "certifications" field.
func (eu *EmployeeUpdate) ClearCertifications() *EmployeeUpdate {
	eu.mutation.ClearCertifications()
	return eu
}

// SetExtras sets the "extras" field.
func (eu *EmployeeUpdate) SetExtras(m map[string]interface{}) *EmployeeUpdate {
	eu.mutation.SetExtras(m)
	return eu
}

// ClearExtras clears the value of the "extras" field.
func (eu *EmployeeUpdate) ClearExtras() *EmployeeUpdate {
	eu.mutation.ClearExtras()
	return eu
}

// Mutation returns the EmployeeMutation object of the builder.
func (eu *EmployeeUpdate) Mutation() *EmployeeMutation {
	return eu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *EmployeeUpdate) Save(ctx context.Context) (int, error) {
	eu.defaults()
	return withHooks(ctx, eu.sqlSave, eu.mutation, eu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EmployeeUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EmployeeUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EmployeeUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (eu *EmployeeUpdate) defaults() {
	if _, ok := eu.mutation.UpdatedAt(); !ok && !eu.mutation.UpdatedAtCleared() {
		v := employee.UpdateDefaultUpdatedAt()
		eu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eu *EmployeeUpdate) check() error {
	if v, ok := eu.mutation.EmploymentType(); ok {
		if err := employee.EmploymentTypeValidator(v); err != nil {
			return &ValidationError{Name: "employment_type", err: fmt.Errorf(`ent: validator failed for field "Employee.employment_type": %w`, err)}
		}
	}
	if v, ok := eu.mutation.Status(); ok {
		if err := employee.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Employee.status": %w`, err)}
		}
	}
	return nil
}

func (eu *EmployeeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := eu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(employee.Table, employee.Columns, sqlgraph.NewFieldSpec(employee.FieldID, field.TypeString))
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.SpaceID(); ok {
		_spec.SetField(employee.FieldSpaceID, field.TypeString, value)
	}
	if eu.mutation.SpaceIDCleared() {
		_spec.ClearField(employee.FieldSpaceID, field.TypeString)
	}
	if eu.mutation.CreatedAtCleared() {
		_spec.ClearField(employee.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := eu.mutation.UpdatedAt(); ok {
		_spec.SetField(employee.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := eu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(employee.FieldUpdatedAt, field.TypeInt64, value)
	}
	if eu.mutation.UpdatedAtCleared() {
		_spec.ClearField(employee.FieldUpdatedAt, field.TypeInt64)
	}
	if value, ok := eu.mutation.EmployeeID(); ok {
		_spec.SetField(employee.FieldEmployeeID, field.TypeString, value)
	}
	if eu.mutation.EmployeeIDCleared() {
		_spec.ClearField(employee.FieldEmployeeID, field.TypeString)
	}
	if value, ok := eu.mutation.Department(); ok {
		_spec.SetField(employee.FieldDepartment, field.TypeString, value)
	}
	if eu.mutation.DepartmentCleared() {
		_spec.ClearField(employee.FieldDepartment, field.TypeString)
	}
	if value, ok := eu.mutation.Position(); ok {
		_spec.SetField(employee.FieldPosition, field.TypeString, value)
	}
	if eu.mutation.PositionCleared() {
		_spec.ClearField(employee.FieldPosition, field.TypeString)
	}
	if value, ok := eu.mutation.ManagerID(); ok {
		_spec.SetField(employee.FieldManagerID, field.TypeString, value)
	}
	if eu.mutation.ManagerIDCleared() {
		_spec.ClearField(employee.FieldManagerID, field.TypeString)
	}
	if value, ok := eu.mutation.HireDate(); ok {
		_spec.SetField(employee.FieldHireDate, field.TypeTime, value)
	}
	if eu.mutation.HireDateCleared() {
		_spec.ClearField(employee.FieldHireDate, field.TypeTime)
	}
	if value, ok := eu.mutation.TerminationDate(); ok {
		_spec.SetField(employee.FieldTerminationDate, field.TypeTime, value)
	}
	if eu.mutation.TerminationDateCleared() {
		_spec.ClearField(employee.FieldTerminationDate, field.TypeTime)
	}
	if value, ok := eu.mutation.EmploymentType(); ok {
		_spec.SetField(employee.FieldEmploymentType, field.TypeEnum, value)
	}
	if value, ok := eu.mutation.Status(); ok {
		_spec.SetField(employee.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := eu.mutation.Salary(); ok {
		_spec.SetField(employee.FieldSalary, field.TypeFloat64, value)
	}
	if value, ok := eu.mutation.AddedSalary(); ok {
		_spec.AddField(employee.FieldSalary, field.TypeFloat64, value)
	}
	if eu.mutation.SalaryCleared() {
		_spec.ClearField(employee.FieldSalary, field.TypeFloat64)
	}
	if value, ok := eu.mutation.WorkLocation(); ok {
		_spec.SetField(employee.FieldWorkLocation, field.TypeString, value)
	}
	if eu.mutation.WorkLocationCleared() {
		_spec.ClearField(employee.FieldWorkLocation, field.TypeString)
	}
	if value, ok := eu.mutation.ContactInfo(); ok {
		_spec.SetField(employee.FieldContactInfo, field.TypeJSON, value)
	}
	if eu.mutation.ContactInfoCleared() {
		_spec.ClearField(employee.FieldContactInfo, field.TypeJSON)
	}
	if value, ok := eu.mutation.Skills(); ok {
		_spec.SetField(employee.FieldSkills, field.TypeJSON, value)
	}
	if value, ok := eu.mutation.AppendedSkills(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, employee.FieldSkills, value)
		})
	}
	if eu.mutation.SkillsCleared() {
		_spec.ClearField(employee.FieldSkills, field.TypeJSON)
	}
	if value, ok := eu.mutation.Certifications(); ok {
		_spec.SetField(employee.FieldCertifications, field.TypeJSON, value)
	}
	if value, ok := eu.mutation.AppendedCertifications(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, employee.FieldCertifications, value)
		})
	}
	if eu.mutation.CertificationsCleared() {
		_spec.ClearField(employee.FieldCertifications, field.TypeJSON)
	}
	if value, ok := eu.mutation.Extras(); ok {
		_spec.SetField(employee.FieldExtras, field.TypeJSON, value)
	}
	if eu.mutation.ExtrasCleared() {
		_spec.ClearField(employee.FieldExtras, field.TypeJSON)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{employee.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eu.mutation.done = true
	return n, nil
}

// EmployeeUpdateOne is the builder for updating a single Employee entity.
type EmployeeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EmployeeMutation
}

// SetSpaceID sets the "space_id" field.
func (euo *EmployeeUpdateOne) SetSpaceID(s string) *EmployeeUpdateOne {
	euo.mutation.SetSpaceID(s)
	return euo
}

// SetNillableSpaceID sets the "space_id" field if the given value is not nil.
func (euo *EmployeeUpdateOne) SetNillableSpaceID(s *string) *EmployeeUpdateOne {
	if s != nil {
		euo.SetSpaceID(*s)
	}
	return euo
}

// ClearSpaceID clears the value of the "space_id" field.
func (euo *EmployeeUpdateOne) ClearSpaceID() *EmployeeUpdateOne {
	euo.mutation.ClearSpaceID()
	return euo
}

// SetUpdatedAt sets the "updated_at" field.
func (euo *EmployeeUpdateOne) SetUpdatedAt(i int64) *EmployeeUpdateOne {
	euo.mutation.ResetUpdatedAt()
	euo.mutation.SetUpdatedAt(i)
	return euo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (euo *EmployeeUpdateOne) AddUpdatedAt(i int64) *EmployeeUpdateOne {
	euo.mutation.AddUpdatedAt(i)
	return euo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (euo *EmployeeUpdateOne) ClearUpdatedAt() *EmployeeUpdateOne {
	euo.mutation.ClearUpdatedAt()
	return euo
}

// SetEmployeeID sets the "employee_id" field.
func (euo *EmployeeUpdateOne) SetEmployeeID(s string) *EmployeeUpdateOne {
	euo.mutation.SetEmployeeID(s)
	return euo
}

// SetNillableEmployeeID sets the "employee_id" field if the given value is not nil.
func (euo *EmployeeUpdateOne) SetNillableEmployeeID(s *string) *EmployeeUpdateOne {
	if s != nil {
		euo.SetEmployeeID(*s)
	}
	return euo
}

// ClearEmployeeID clears the value of the "employee_id" field.
func (euo *EmployeeUpdateOne) ClearEmployeeID() *EmployeeUpdateOne {
	euo.mutation.ClearEmployeeID()
	return euo
}

// SetDepartment sets the "department" field.
func (euo *EmployeeUpdateOne) SetDepartment(s string) *EmployeeUpdateOne {
	euo.mutation.SetDepartment(s)
	return euo
}

// SetNillableDepartment sets the "department" field if the given value is not nil.
func (euo *EmployeeUpdateOne) SetNillableDepartment(s *string) *EmployeeUpdateOne {
	if s != nil {
		euo.SetDepartment(*s)
	}
	return euo
}

// ClearDepartment clears the value of the "department" field.
func (euo *EmployeeUpdateOne) ClearDepartment() *EmployeeUpdateOne {
	euo.mutation.ClearDepartment()
	return euo
}

// SetPosition sets the "position" field.
func (euo *EmployeeUpdateOne) SetPosition(s string) *EmployeeUpdateOne {
	euo.mutation.SetPosition(s)
	return euo
}

// SetNillablePosition sets the "position" field if the given value is not nil.
func (euo *EmployeeUpdateOne) SetNillablePosition(s *string) *EmployeeUpdateOne {
	if s != nil {
		euo.SetPosition(*s)
	}
	return euo
}

// ClearPosition clears the value of the "position" field.
func (euo *EmployeeUpdateOne) ClearPosition() *EmployeeUpdateOne {
	euo.mutation.ClearPosition()
	return euo
}

// SetManagerID sets the "manager_id" field.
func (euo *EmployeeUpdateOne) SetManagerID(s string) *EmployeeUpdateOne {
	euo.mutation.SetManagerID(s)
	return euo
}

// SetNillableManagerID sets the "manager_id" field if the given value is not nil.
func (euo *EmployeeUpdateOne) SetNillableManagerID(s *string) *EmployeeUpdateOne {
	if s != nil {
		euo.SetManagerID(*s)
	}
	return euo
}

// ClearManagerID clears the value of the "manager_id" field.
func (euo *EmployeeUpdateOne) ClearManagerID() *EmployeeUpdateOne {
	euo.mutation.ClearManagerID()
	return euo
}

// SetHireDate sets the "hire_date" field.
func (euo *EmployeeUpdateOne) SetHireDate(t time.Time) *EmployeeUpdateOne {
	euo.mutation.SetHireDate(t)
	return euo
}

// SetNillableHireDate sets the "hire_date" field if the given value is not nil.
func (euo *EmployeeUpdateOne) SetNillableHireDate(t *time.Time) *EmployeeUpdateOne {
	if t != nil {
		euo.SetHireDate(*t)
	}
	return euo
}

// ClearHireDate clears the value of the "hire_date" field.
func (euo *EmployeeUpdateOne) ClearHireDate() *EmployeeUpdateOne {
	euo.mutation.ClearHireDate()
	return euo
}

// SetTerminationDate sets the "termination_date" field.
func (euo *EmployeeUpdateOne) SetTerminationDate(t time.Time) *EmployeeUpdateOne {
	euo.mutation.SetTerminationDate(t)
	return euo
}

// SetNillableTerminationDate sets the "termination_date" field if the given value is not nil.
func (euo *EmployeeUpdateOne) SetNillableTerminationDate(t *time.Time) *EmployeeUpdateOne {
	if t != nil {
		euo.SetTerminationDate(*t)
	}
	return euo
}

// ClearTerminationDate clears the value of the "termination_date" field.
func (euo *EmployeeUpdateOne) ClearTerminationDate() *EmployeeUpdateOne {
	euo.mutation.ClearTerminationDate()
	return euo
}

// SetEmploymentType sets the "employment_type" field.
func (euo *EmployeeUpdateOne) SetEmploymentType(et employee.EmploymentType) *EmployeeUpdateOne {
	euo.mutation.SetEmploymentType(et)
	return euo
}

// SetNillableEmploymentType sets the "employment_type" field if the given value is not nil.
func (euo *EmployeeUpdateOne) SetNillableEmploymentType(et *employee.EmploymentType) *EmployeeUpdateOne {
	if et != nil {
		euo.SetEmploymentType(*et)
	}
	return euo
}

// SetStatus sets the "status" field.
func (euo *EmployeeUpdateOne) SetStatus(e employee.Status) *EmployeeUpdateOne {
	euo.mutation.SetStatus(e)
	return euo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (euo *EmployeeUpdateOne) SetNillableStatus(e *employee.Status) *EmployeeUpdateOne {
	if e != nil {
		euo.SetStatus(*e)
	}
	return euo
}

// SetSalary sets the "salary" field.
func (euo *EmployeeUpdateOne) SetSalary(f float64) *EmployeeUpdateOne {
	euo.mutation.ResetSalary()
	euo.mutation.SetSalary(f)
	return euo
}

// SetNillableSalary sets the "salary" field if the given value is not nil.
func (euo *EmployeeUpdateOne) SetNillableSalary(f *float64) *EmployeeUpdateOne {
	if f != nil {
		euo.SetSalary(*f)
	}
	return euo
}

// AddSalary adds f to the "salary" field.
func (euo *EmployeeUpdateOne) AddSalary(f float64) *EmployeeUpdateOne {
	euo.mutation.AddSalary(f)
	return euo
}

// ClearSalary clears the value of the "salary" field.
func (euo *EmployeeUpdateOne) ClearSalary() *EmployeeUpdateOne {
	euo.mutation.ClearSalary()
	return euo
}

// SetWorkLocation sets the "work_location" field.
func (euo *EmployeeUpdateOne) SetWorkLocation(s string) *EmployeeUpdateOne {
	euo.mutation.SetWorkLocation(s)
	return euo
}

// SetNillableWorkLocation sets the "work_location" field if the given value is not nil.
func (euo *EmployeeUpdateOne) SetNillableWorkLocation(s *string) *EmployeeUpdateOne {
	if s != nil {
		euo.SetWorkLocation(*s)
	}
	return euo
}

// ClearWorkLocation clears the value of the "work_location" field.
func (euo *EmployeeUpdateOne) ClearWorkLocation() *EmployeeUpdateOne {
	euo.mutation.ClearWorkLocation()
	return euo
}

// SetContactInfo sets the "contact_info" field.
func (euo *EmployeeUpdateOne) SetContactInfo(m map[string]interface{}) *EmployeeUpdateOne {
	euo.mutation.SetContactInfo(m)
	return euo
}

// ClearContactInfo clears the value of the "contact_info" field.
func (euo *EmployeeUpdateOne) ClearContactInfo() *EmployeeUpdateOne {
	euo.mutation.ClearContactInfo()
	return euo
}

// SetSkills sets the "skills" field.
func (euo *EmployeeUpdateOne) SetSkills(s []string) *EmployeeUpdateOne {
	euo.mutation.SetSkills(s)
	return euo
}

// AppendSkills appends s to the "skills" field.
func (euo *EmployeeUpdateOne) AppendSkills(s []string) *EmployeeUpdateOne {
	euo.mutation.AppendSkills(s)
	return euo
}

// ClearSkills clears the value of the "skills" field.
func (euo *EmployeeUpdateOne) ClearSkills() *EmployeeUpdateOne {
	euo.mutation.ClearSkills()
	return euo
}

// SetCertifications sets the "certifications" field.
func (euo *EmployeeUpdateOne) SetCertifications(s []string) *EmployeeUpdateOne {
	euo.mutation.SetCertifications(s)
	return euo
}

// AppendCertifications appends s to the "certifications" field.
func (euo *EmployeeUpdateOne) AppendCertifications(s []string) *EmployeeUpdateOne {
	euo.mutation.AppendCertifications(s)
	return euo
}

// ClearCertifications clears the value of the "certifications" field.
func (euo *EmployeeUpdateOne) ClearCertifications() *EmployeeUpdateOne {
	euo.mutation.ClearCertifications()
	return euo
}

// SetExtras sets the "extras" field.
func (euo *EmployeeUpdateOne) SetExtras(m map[string]interface{}) *EmployeeUpdateOne {
	euo.mutation.SetExtras(m)
	return euo
}

// ClearExtras clears the value of the "extras" field.
func (euo *EmployeeUpdateOne) ClearExtras() *EmployeeUpdateOne {
	euo.mutation.ClearExtras()
	return euo
}

// Mutation returns the EmployeeMutation object of the builder.
func (euo *EmployeeUpdateOne) Mutation() *EmployeeMutation {
	return euo.mutation
}

// Where appends a list predicates to the EmployeeUpdate builder.
func (euo *EmployeeUpdateOne) Where(ps ...predicate.Employee) *EmployeeUpdateOne {
	euo.mutation.Where(ps...)
	return euo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *EmployeeUpdateOne) Select(field string, fields ...string) *EmployeeUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Employee entity.
func (euo *EmployeeUpdateOne) Save(ctx context.Context) (*Employee, error) {
	euo.defaults()
	return withHooks(ctx, euo.sqlSave, euo.mutation, euo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EmployeeUpdateOne) SaveX(ctx context.Context) *Employee {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *EmployeeUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EmployeeUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (euo *EmployeeUpdateOne) defaults() {
	if _, ok := euo.mutation.UpdatedAt(); !ok && !euo.mutation.UpdatedAtCleared() {
		v := employee.UpdateDefaultUpdatedAt()
		euo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (euo *EmployeeUpdateOne) check() error {
	if v, ok := euo.mutation.EmploymentType(); ok {
		if err := employee.EmploymentTypeValidator(v); err != nil {
			return &ValidationError{Name: "employment_type", err: fmt.Errorf(`ent: validator failed for field "Employee.employment_type": %w`, err)}
		}
	}
	if v, ok := euo.mutation.Status(); ok {
		if err := employee.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Employee.status": %w`, err)}
		}
	}
	return nil
}

func (euo *EmployeeUpdateOne) sqlSave(ctx context.Context) (_node *Employee, err error) {
	if err := euo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(employee.Table, employee.Columns, sqlgraph.NewFieldSpec(employee.FieldID, field.TypeString))
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Employee.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, employee.FieldID)
		for _, f := range fields {
			if !employee.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != employee.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.SpaceID(); ok {
		_spec.SetField(employee.FieldSpaceID, field.TypeString, value)
	}
	if euo.mutation.SpaceIDCleared() {
		_spec.ClearField(employee.FieldSpaceID, field.TypeString)
	}
	if euo.mutation.CreatedAtCleared() {
		_spec.ClearField(employee.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := euo.mutation.UpdatedAt(); ok {
		_spec.SetField(employee.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := euo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(employee.FieldUpdatedAt, field.TypeInt64, value)
	}
	if euo.mutation.UpdatedAtCleared() {
		_spec.ClearField(employee.FieldUpdatedAt, field.TypeInt64)
	}
	if value, ok := euo.mutation.EmployeeID(); ok {
		_spec.SetField(employee.FieldEmployeeID, field.TypeString, value)
	}
	if euo.mutation.EmployeeIDCleared() {
		_spec.ClearField(employee.FieldEmployeeID, field.TypeString)
	}
	if value, ok := euo.mutation.Department(); ok {
		_spec.SetField(employee.FieldDepartment, field.TypeString, value)
	}
	if euo.mutation.DepartmentCleared() {
		_spec.ClearField(employee.FieldDepartment, field.TypeString)
	}
	if value, ok := euo.mutation.Position(); ok {
		_spec.SetField(employee.FieldPosition, field.TypeString, value)
	}
	if euo.mutation.PositionCleared() {
		_spec.ClearField(employee.FieldPosition, field.TypeString)
	}
	if value, ok := euo.mutation.ManagerID(); ok {
		_spec.SetField(employee.FieldManagerID, field.TypeString, value)
	}
	if euo.mutation.ManagerIDCleared() {
		_spec.ClearField(employee.FieldManagerID, field.TypeString)
	}
	if value, ok := euo.mutation.HireDate(); ok {
		_spec.SetField(employee.FieldHireDate, field.TypeTime, value)
	}
	if euo.mutation.HireDateCleared() {
		_spec.ClearField(employee.FieldHireDate, field.TypeTime)
	}
	if value, ok := euo.mutation.TerminationDate(); ok {
		_spec.SetField(employee.FieldTerminationDate, field.TypeTime, value)
	}
	if euo.mutation.TerminationDateCleared() {
		_spec.ClearField(employee.FieldTerminationDate, field.TypeTime)
	}
	if value, ok := euo.mutation.EmploymentType(); ok {
		_spec.SetField(employee.FieldEmploymentType, field.TypeEnum, value)
	}
	if value, ok := euo.mutation.Status(); ok {
		_spec.SetField(employee.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := euo.mutation.Salary(); ok {
		_spec.SetField(employee.FieldSalary, field.TypeFloat64, value)
	}
	if value, ok := euo.mutation.AddedSalary(); ok {
		_spec.AddField(employee.FieldSalary, field.TypeFloat64, value)
	}
	if euo.mutation.SalaryCleared() {
		_spec.ClearField(employee.FieldSalary, field.TypeFloat64)
	}
	if value, ok := euo.mutation.WorkLocation(); ok {
		_spec.SetField(employee.FieldWorkLocation, field.TypeString, value)
	}
	if euo.mutation.WorkLocationCleared() {
		_spec.ClearField(employee.FieldWorkLocation, field.TypeString)
	}
	if value, ok := euo.mutation.ContactInfo(); ok {
		_spec.SetField(employee.FieldContactInfo, field.TypeJSON, value)
	}
	if euo.mutation.ContactInfoCleared() {
		_spec.ClearField(employee.FieldContactInfo, field.TypeJSON)
	}
	if value, ok := euo.mutation.Skills(); ok {
		_spec.SetField(employee.FieldSkills, field.TypeJSON, value)
	}
	if value, ok := euo.mutation.AppendedSkills(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, employee.FieldSkills, value)
		})
	}
	if euo.mutation.SkillsCleared() {
		_spec.ClearField(employee.FieldSkills, field.TypeJSON)
	}
	if value, ok := euo.mutation.Certifications(); ok {
		_spec.SetField(employee.FieldCertifications, field.TypeJSON, value)
	}
	if value, ok := euo.mutation.AppendedCertifications(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, employee.FieldCertifications, value)
		})
	}
	if euo.mutation.CertificationsCleared() {
		_spec.ClearField(employee.FieldCertifications, field.TypeJSON)
	}
	if value, ok := euo.mutation.Extras(); ok {
		_spec.SetField(employee.FieldExtras, field.TypeJSON, value)
	}
	if euo.mutation.ExtrasCleared() {
		_spec.ClearField(employee.FieldExtras, field.TypeJSON)
	}
	_node = &Employee{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{employee.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	euo.mutation.done = true
	return _node, nil
}
