// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"ncobase/user/data/ent/userprofile"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// UserProfile is the model entity for the UserProfile schema.
type UserProfile struct {
	config `json:"-"`
	// ID of the ent.
	// user primary key alias
	ID string `json:"id,omitempty"`
	// display name
	DisplayName string `json:"display_name,omitempty"`
	// first name
	FirstName string `json:"first_name,omitempty"`
	// last name
	LastName string `json:"last_name,omitempty"`
	// title
	Title string `json:"title,omitempty"`
	// short bio
	ShortBio string `json:"short_bio,omitempty"`
	// about
	About string `json:"about,omitempty"`
	// List of social links or profile links
	Links []map[string]interface{} `json:"links,omitempty"`
	// thumbnail
	Thumbnail string `json:"thumbnail,omitempty"`
	// Extend properties
	Extras       map[string]interface{} `json:"extras,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserProfile) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case userprofile.FieldLinks, userprofile.FieldExtras:
			values[i] = new([]byte)
		case userprofile.FieldID, userprofile.FieldDisplayName, userprofile.FieldFirstName, userprofile.FieldLastName, userprofile.FieldTitle, userprofile.FieldShortBio, userprofile.FieldAbout, userprofile.FieldThumbnail:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserProfile fields.
func (up *UserProfile) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userprofile.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				up.ID = value.String
			}
		case userprofile.FieldDisplayName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field display_name", values[i])
			} else if value.Valid {
				up.DisplayName = value.String
			}
		case userprofile.FieldFirstName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field first_name", values[i])
			} else if value.Valid {
				up.FirstName = value.String
			}
		case userprofile.FieldLastName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_name", values[i])
			} else if value.Valid {
				up.LastName = value.String
			}
		case userprofile.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				up.Title = value.String
			}
		case userprofile.FieldShortBio:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field short_bio", values[i])
			} else if value.Valid {
				up.ShortBio = value.String
			}
		case userprofile.FieldAbout:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field about", values[i])
			} else if value.Valid {
				up.About = value.String
			}
		case userprofile.FieldLinks:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field links", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &up.Links); err != nil {
					return fmt.Errorf("unmarshal field links: %w", err)
				}
			}
		case userprofile.FieldThumbnail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field thumbnail", values[i])
			} else if value.Valid {
				up.Thumbnail = value.String
			}
		case userprofile.FieldExtras:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field extras", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &up.Extras); err != nil {
					return fmt.Errorf("unmarshal field extras: %w", err)
				}
			}
		default:
			up.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserProfile.
// This includes values selected through modifiers, order, etc.
func (up *UserProfile) Value(name string) (ent.Value, error) {
	return up.selectValues.Get(name)
}

// Update returns a builder for updating this UserProfile.
// Note that you need to call UserProfile.Unwrap() before calling this method if this UserProfile
// was returned from a transaction, and the transaction was committed or rolled back.
func (up *UserProfile) Update() *UserProfileUpdateOne {
	return NewUserProfileClient(up.config).UpdateOne(up)
}

// Unwrap unwraps the UserProfile entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (up *UserProfile) Unwrap() *UserProfile {
	_tx, ok := up.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserProfile is not a transactional entity")
	}
	up.config.driver = _tx.drv
	return up
}

// String implements the fmt.Stringer.
func (up *UserProfile) String() string {
	var builder strings.Builder
	builder.WriteString("UserProfile(")
	builder.WriteString(fmt.Sprintf("id=%v, ", up.ID))
	builder.WriteString("display_name=")
	builder.WriteString(up.DisplayName)
	builder.WriteString(", ")
	builder.WriteString("first_name=")
	builder.WriteString(up.FirstName)
	builder.WriteString(", ")
	builder.WriteString("last_name=")
	builder.WriteString(up.LastName)
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(up.Title)
	builder.WriteString(", ")
	builder.WriteString("short_bio=")
	builder.WriteString(up.ShortBio)
	builder.WriteString(", ")
	builder.WriteString("about=")
	builder.WriteString(up.About)
	builder.WriteString(", ")
	builder.WriteString("links=")
	builder.WriteString(fmt.Sprintf("%v", up.Links))
	builder.WriteString(", ")
	builder.WriteString("thumbnail=")
	builder.WriteString(up.Thumbnail)
	builder.WriteString(", ")
	builder.WriteString("extras=")
	builder.WriteString(fmt.Sprintf("%v", up.Extras))
	builder.WriteByte(')')
	return builder.String()
}

// UserProfiles is a parsable slice of UserProfile.
type UserProfiles []*UserProfile
