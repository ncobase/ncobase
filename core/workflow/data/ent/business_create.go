// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/workflow/data/ent/business"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BusinessCreate is the builder for creating a Business entity.
type BusinessCreate struct {
	config
	mutation *BusinessMutation
	hooks    []Hook
}

// SetCode sets the "code" field.
func (bc *BusinessCreate) SetCode(s string) *BusinessCreate {
	bc.mutation.SetCode(s)
	return bc
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (bc *BusinessCreate) SetNillableCode(s *string) *BusinessCreate {
	if s != nil {
		bc.SetCode(*s)
	}
	return bc
}

// SetStatus sets the "status" field.
func (bc *BusinessCreate) SetStatus(s string) *BusinessCreate {
	bc.mutation.SetStatus(s)
	return bc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (bc *BusinessCreate) SetNillableStatus(s *string) *BusinessCreate {
	if s != nil {
		bc.SetStatus(*s)
	}
	return bc
}

// SetFormCode sets the "form_code" field.
func (bc *BusinessCreate) SetFormCode(s string) *BusinessCreate {
	bc.mutation.SetFormCode(s)
	return bc
}

// SetFormVersion sets the "form_version" field.
func (bc *BusinessCreate) SetFormVersion(s string) *BusinessCreate {
	bc.mutation.SetFormVersion(s)
	return bc
}

// SetNillableFormVersion sets the "form_version" field if the given value is not nil.
func (bc *BusinessCreate) SetNillableFormVersion(s *string) *BusinessCreate {
	if s != nil {
		bc.SetFormVersion(*s)
	}
	return bc
}

// SetFormConfig sets the "form_config" field.
func (bc *BusinessCreate) SetFormConfig(m map[string]interface{}) *BusinessCreate {
	bc.mutation.SetFormConfig(m)
	return bc
}

// SetFormPermissions sets the "form_permissions" field.
func (bc *BusinessCreate) SetFormPermissions(m map[string]interface{}) *BusinessCreate {
	bc.mutation.SetFormPermissions(m)
	return bc
}

// SetFieldPermissions sets the "field_permissions" field.
func (bc *BusinessCreate) SetFieldPermissions(m map[string]interface{}) *BusinessCreate {
	bc.mutation.SetFieldPermissions(m)
	return bc
}

// SetProcessID sets the "process_id" field.
func (bc *BusinessCreate) SetProcessID(s string) *BusinessCreate {
	bc.mutation.SetProcessID(s)
	return bc
}

// SetTemplateID sets the "template_id" field.
func (bc *BusinessCreate) SetTemplateID(s string) *BusinessCreate {
	bc.mutation.SetTemplateID(s)
	return bc
}

// SetBusinessKey sets the "business_key" field.
func (bc *BusinessCreate) SetBusinessKey(s string) *BusinessCreate {
	bc.mutation.SetBusinessKey(s)
	return bc
}

// SetOriginData sets the "origin_data" field.
func (bc *BusinessCreate) SetOriginData(m map[string]interface{}) *BusinessCreate {
	bc.mutation.SetOriginData(m)
	return bc
}

// SetCurrentData sets the "current_data" field.
func (bc *BusinessCreate) SetCurrentData(m map[string]interface{}) *BusinessCreate {
	bc.mutation.SetCurrentData(m)
	return bc
}

// SetChangeLogs sets the "change_logs" field.
func (bc *BusinessCreate) SetChangeLogs(m []map[string]interface{}) *BusinessCreate {
	bc.mutation.SetChangeLogs(m)
	return bc
}

// SetLastModified sets the "last_modified" field.
func (bc *BusinessCreate) SetLastModified(i int64) *BusinessCreate {
	bc.mutation.SetLastModified(i)
	return bc
}

// SetNillableLastModified sets the "last_modified" field if the given value is not nil.
func (bc *BusinessCreate) SetNillableLastModified(i *int64) *BusinessCreate {
	if i != nil {
		bc.SetLastModified(*i)
	}
	return bc
}

// SetLastModifier sets the "last_modifier" field.
func (bc *BusinessCreate) SetLastModifier(s string) *BusinessCreate {
	bc.mutation.SetLastModifier(s)
	return bc
}

// SetNillableLastModifier sets the "last_modifier" field if the given value is not nil.
func (bc *BusinessCreate) SetNillableLastModifier(s *string) *BusinessCreate {
	if s != nil {
		bc.SetLastModifier(*s)
	}
	return bc
}

// SetOperationLogs sets the "operation_logs" field.
func (bc *BusinessCreate) SetOperationLogs(m []map[string]interface{}) *BusinessCreate {
	bc.mutation.SetOperationLogs(m)
	return bc
}

// SetFlowStatus sets the "flow_status" field.
func (bc *BusinessCreate) SetFlowStatus(s string) *BusinessCreate {
	bc.mutation.SetFlowStatus(s)
	return bc
}

// SetNillableFlowStatus sets the "flow_status" field if the given value is not nil.
func (bc *BusinessCreate) SetNillableFlowStatus(s *string) *BusinessCreate {
	if s != nil {
		bc.SetFlowStatus(*s)
	}
	return bc
}

// SetFlowVariables sets the "flow_variables" field.
func (bc *BusinessCreate) SetFlowVariables(m map[string]interface{}) *BusinessCreate {
	bc.mutation.SetFlowVariables(m)
	return bc
}

// SetIsDraft sets the "is_draft" field.
func (bc *BusinessCreate) SetIsDraft(b bool) *BusinessCreate {
	bc.mutation.SetIsDraft(b)
	return bc
}

// SetNillableIsDraft sets the "is_draft" field if the given value is not nil.
func (bc *BusinessCreate) SetNillableIsDraft(b *bool) *BusinessCreate {
	if b != nil {
		bc.SetIsDraft(*b)
	}
	return bc
}

// SetIsTerminated sets the "is_terminated" field.
func (bc *BusinessCreate) SetIsTerminated(b bool) *BusinessCreate {
	bc.mutation.SetIsTerminated(b)
	return bc
}

// SetNillableIsTerminated sets the "is_terminated" field if the given value is not nil.
func (bc *BusinessCreate) SetNillableIsTerminated(b *bool) *BusinessCreate {
	if b != nil {
		bc.SetIsTerminated(*b)
	}
	return bc
}

// SetIsSuspended sets the "is_suspended" field.
func (bc *BusinessCreate) SetIsSuspended(b bool) *BusinessCreate {
	bc.mutation.SetIsSuspended(b)
	return bc
}

// SetNillableIsSuspended sets the "is_suspended" field if the given value is not nil.
func (bc *BusinessCreate) SetNillableIsSuspended(b *bool) *BusinessCreate {
	if b != nil {
		bc.SetIsSuspended(*b)
	}
	return bc
}

// SetSuspendReason sets the "suspend_reason" field.
func (bc *BusinessCreate) SetSuspendReason(s string) *BusinessCreate {
	bc.mutation.SetSuspendReason(s)
	return bc
}

// SetNillableSuspendReason sets the "suspend_reason" field if the given value is not nil.
func (bc *BusinessCreate) SetNillableSuspendReason(s *string) *BusinessCreate {
	if s != nil {
		bc.SetSuspendReason(*s)
	}
	return bc
}

// SetBusinessTags sets the "business_tags" field.
func (bc *BusinessCreate) SetBusinessTags(s []string) *BusinessCreate {
	bc.mutation.SetBusinessTags(s)
	return bc
}

// SetModuleCode sets the "module_code" field.
func (bc *BusinessCreate) SetModuleCode(s string) *BusinessCreate {
	bc.mutation.SetModuleCode(s)
	return bc
}

// SetCategory sets the "category" field.
func (bc *BusinessCreate) SetCategory(s string) *BusinessCreate {
	bc.mutation.SetCategory(s)
	return bc
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (bc *BusinessCreate) SetNillableCategory(s *string) *BusinessCreate {
	if s != nil {
		bc.SetCategory(*s)
	}
	return bc
}

// SetViewers sets the "viewers" field.
func (bc *BusinessCreate) SetViewers(s []string) *BusinessCreate {
	bc.mutation.SetViewers(s)
	return bc
}

// SetEditors sets the "editors" field.
func (bc *BusinessCreate) SetEditors(s []string) *BusinessCreate {
	bc.mutation.SetEditors(s)
	return bc
}

// SetPermissionConfigs sets the "permission_configs" field.
func (bc *BusinessCreate) SetPermissionConfigs(m map[string]interface{}) *BusinessCreate {
	bc.mutation.SetPermissionConfigs(m)
	return bc
}

// SetRoleConfigs sets the "role_configs" field.
func (bc *BusinessCreate) SetRoleConfigs(m map[string]interface{}) *BusinessCreate {
	bc.mutation.SetRoleConfigs(m)
	return bc
}

// SetVisibleRange sets the "visible_range" field.
func (bc *BusinessCreate) SetVisibleRange(m map[string]interface{}) *BusinessCreate {
	bc.mutation.SetVisibleRange(m)
	return bc
}

// SetExtras sets the "extras" field.
func (bc *BusinessCreate) SetExtras(m map[string]interface{}) *BusinessCreate {
	bc.mutation.SetExtras(m)
	return bc
}

// SetTenantID sets the "tenant_id" field.
func (bc *BusinessCreate) SetTenantID(s string) *BusinessCreate {
	bc.mutation.SetTenantID(s)
	return bc
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (bc *BusinessCreate) SetNillableTenantID(s *string) *BusinessCreate {
	if s != nil {
		bc.SetTenantID(*s)
	}
	return bc
}

// SetCreatedBy sets the "created_by" field.
func (bc *BusinessCreate) SetCreatedBy(s string) *BusinessCreate {
	bc.mutation.SetCreatedBy(s)
	return bc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (bc *BusinessCreate) SetNillableCreatedBy(s *string) *BusinessCreate {
	if s != nil {
		bc.SetCreatedBy(*s)
	}
	return bc
}

// SetUpdatedBy sets the "updated_by" field.
func (bc *BusinessCreate) SetUpdatedBy(s string) *BusinessCreate {
	bc.mutation.SetUpdatedBy(s)
	return bc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (bc *BusinessCreate) SetNillableUpdatedBy(s *string) *BusinessCreate {
	if s != nil {
		bc.SetUpdatedBy(*s)
	}
	return bc
}

// SetCreatedAt sets the "created_at" field.
func (bc *BusinessCreate) SetCreatedAt(i int64) *BusinessCreate {
	bc.mutation.SetCreatedAt(i)
	return bc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bc *BusinessCreate) SetNillableCreatedAt(i *int64) *BusinessCreate {
	if i != nil {
		bc.SetCreatedAt(*i)
	}
	return bc
}

// SetUpdatedAt sets the "updated_at" field.
func (bc *BusinessCreate) SetUpdatedAt(i int64) *BusinessCreate {
	bc.mutation.SetUpdatedAt(i)
	return bc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (bc *BusinessCreate) SetNillableUpdatedAt(i *int64) *BusinessCreate {
	if i != nil {
		bc.SetUpdatedAt(*i)
	}
	return bc
}

// SetID sets the "id" field.
func (bc *BusinessCreate) SetID(s string) *BusinessCreate {
	bc.mutation.SetID(s)
	return bc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (bc *BusinessCreate) SetNillableID(s *string) *BusinessCreate {
	if s != nil {
		bc.SetID(*s)
	}
	return bc
}

// Mutation returns the BusinessMutation object of the builder.
func (bc *BusinessCreate) Mutation() *BusinessMutation {
	return bc.mutation
}

// Save creates the Business in the database.
func (bc *BusinessCreate) Save(ctx context.Context) (*Business, error) {
	bc.defaults()
	return withHooks(ctx, bc.sqlSave, bc.mutation, bc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bc *BusinessCreate) SaveX(ctx context.Context) *Business {
	v, err := bc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bc *BusinessCreate) Exec(ctx context.Context) error {
	_, err := bc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bc *BusinessCreate) ExecX(ctx context.Context) {
	if err := bc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bc *BusinessCreate) defaults() {
	if _, ok := bc.mutation.IsDraft(); !ok {
		v := business.DefaultIsDraft
		bc.mutation.SetIsDraft(v)
	}
	if _, ok := bc.mutation.IsTerminated(); !ok {
		v := business.DefaultIsTerminated
		bc.mutation.SetIsTerminated(v)
	}
	if _, ok := bc.mutation.IsSuspended(); !ok {
		v := business.DefaultIsSuspended
		bc.mutation.SetIsSuspended(v)
	}
	if _, ok := bc.mutation.Extras(); !ok {
		v := business.DefaultExtras
		bc.mutation.SetExtras(v)
	}
	if _, ok := bc.mutation.CreatedAt(); !ok {
		v := business.DefaultCreatedAt()
		bc.mutation.SetCreatedAt(v)
	}
	if _, ok := bc.mutation.UpdatedAt(); !ok {
		v := business.DefaultUpdatedAt()
		bc.mutation.SetUpdatedAt(v)
	}
	if _, ok := bc.mutation.ID(); !ok {
		v := business.DefaultID()
		bc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bc *BusinessCreate) check() error {
	if _, ok := bc.mutation.FormCode(); !ok {
		return &ValidationError{Name: "form_code", err: errors.New(`ent: missing required field "Business.form_code"`)}
	}
	if _, ok := bc.mutation.ProcessID(); !ok {
		return &ValidationError{Name: "process_id", err: errors.New(`ent: missing required field "Business.process_id"`)}
	}
	if _, ok := bc.mutation.TemplateID(); !ok {
		return &ValidationError{Name: "template_id", err: errors.New(`ent: missing required field "Business.template_id"`)}
	}
	if _, ok := bc.mutation.BusinessKey(); !ok {
		return &ValidationError{Name: "business_key", err: errors.New(`ent: missing required field "Business.business_key"`)}
	}
	if _, ok := bc.mutation.OriginData(); !ok {
		return &ValidationError{Name: "origin_data", err: errors.New(`ent: missing required field "Business.origin_data"`)}
	}
	if _, ok := bc.mutation.CurrentData(); !ok {
		return &ValidationError{Name: "current_data", err: errors.New(`ent: missing required field "Business.current_data"`)}
	}
	if _, ok := bc.mutation.IsDraft(); !ok {
		return &ValidationError{Name: "is_draft", err: errors.New(`ent: missing required field "Business.is_draft"`)}
	}
	if _, ok := bc.mutation.IsTerminated(); !ok {
		return &ValidationError{Name: "is_terminated", err: errors.New(`ent: missing required field "Business.is_terminated"`)}
	}
	if _, ok := bc.mutation.IsSuspended(); !ok {
		return &ValidationError{Name: "is_suspended", err: errors.New(`ent: missing required field "Business.is_suspended"`)}
	}
	if _, ok := bc.mutation.ModuleCode(); !ok {
		return &ValidationError{Name: "module_code", err: errors.New(`ent: missing required field "Business.module_code"`)}
	}
	if v, ok := bc.mutation.TenantID(); ok {
		if err := business.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "Business.tenant_id": %w`, err)}
		}
	}
	if v, ok := bc.mutation.CreatedBy(); ok {
		if err := business.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "Business.created_by": %w`, err)}
		}
	}
	if v, ok := bc.mutation.UpdatedBy(); ok {
		if err := business.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "Business.updated_by": %w`, err)}
		}
	}
	if v, ok := bc.mutation.ID(); ok {
		if err := business.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Business.id": %w`, err)}
		}
	}
	return nil
}

func (bc *BusinessCreate) sqlSave(ctx context.Context) (*Business, error) {
	if err := bc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Business.ID type: %T", _spec.ID.Value)
		}
	}
	bc.mutation.id = &_node.ID
	bc.mutation.done = true
	return _node, nil
}

func (bc *BusinessCreate) createSpec() (*Business, *sqlgraph.CreateSpec) {
	var (
		_node = &Business{config: bc.config}
		_spec = sqlgraph.NewCreateSpec(business.Table, sqlgraph.NewFieldSpec(business.FieldID, field.TypeString))
	)
	if id, ok := bc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := bc.mutation.Code(); ok {
		_spec.SetField(business.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if value, ok := bc.mutation.Status(); ok {
		_spec.SetField(business.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := bc.mutation.FormCode(); ok {
		_spec.SetField(business.FieldFormCode, field.TypeString, value)
		_node.FormCode = value
	}
	if value, ok := bc.mutation.FormVersion(); ok {
		_spec.SetField(business.FieldFormVersion, field.TypeString, value)
		_node.FormVersion = value
	}
	if value, ok := bc.mutation.FormConfig(); ok {
		_spec.SetField(business.FieldFormConfig, field.TypeJSON, value)
		_node.FormConfig = value
	}
	if value, ok := bc.mutation.FormPermissions(); ok {
		_spec.SetField(business.FieldFormPermissions, field.TypeJSON, value)
		_node.FormPermissions = value
	}
	if value, ok := bc.mutation.FieldPermissions(); ok {
		_spec.SetField(business.FieldFieldPermissions, field.TypeJSON, value)
		_node.FieldPermissions = value
	}
	if value, ok := bc.mutation.ProcessID(); ok {
		_spec.SetField(business.FieldProcessID, field.TypeString, value)
		_node.ProcessID = value
	}
	if value, ok := bc.mutation.TemplateID(); ok {
		_spec.SetField(business.FieldTemplateID, field.TypeString, value)
		_node.TemplateID = value
	}
	if value, ok := bc.mutation.BusinessKey(); ok {
		_spec.SetField(business.FieldBusinessKey, field.TypeString, value)
		_node.BusinessKey = value
	}
	if value, ok := bc.mutation.OriginData(); ok {
		_spec.SetField(business.FieldOriginData, field.TypeJSON, value)
		_node.OriginData = value
	}
	if value, ok := bc.mutation.CurrentData(); ok {
		_spec.SetField(business.FieldCurrentData, field.TypeJSON, value)
		_node.CurrentData = value
	}
	if value, ok := bc.mutation.ChangeLogs(); ok {
		_spec.SetField(business.FieldChangeLogs, field.TypeJSON, value)
		_node.ChangeLogs = value
	}
	if value, ok := bc.mutation.LastModified(); ok {
		_spec.SetField(business.FieldLastModified, field.TypeInt64, value)
		_node.LastModified = value
	}
	if value, ok := bc.mutation.LastModifier(); ok {
		_spec.SetField(business.FieldLastModifier, field.TypeString, value)
		_node.LastModifier = value
	}
	if value, ok := bc.mutation.OperationLogs(); ok {
		_spec.SetField(business.FieldOperationLogs, field.TypeJSON, value)
		_node.OperationLogs = value
	}
	if value, ok := bc.mutation.FlowStatus(); ok {
		_spec.SetField(business.FieldFlowStatus, field.TypeString, value)
		_node.FlowStatus = value
	}
	if value, ok := bc.mutation.FlowVariables(); ok {
		_spec.SetField(business.FieldFlowVariables, field.TypeJSON, value)
		_node.FlowVariables = value
	}
	if value, ok := bc.mutation.IsDraft(); ok {
		_spec.SetField(business.FieldIsDraft, field.TypeBool, value)
		_node.IsDraft = value
	}
	if value, ok := bc.mutation.IsTerminated(); ok {
		_spec.SetField(business.FieldIsTerminated, field.TypeBool, value)
		_node.IsTerminated = value
	}
	if value, ok := bc.mutation.IsSuspended(); ok {
		_spec.SetField(business.FieldIsSuspended, field.TypeBool, value)
		_node.IsSuspended = value
	}
	if value, ok := bc.mutation.SuspendReason(); ok {
		_spec.SetField(business.FieldSuspendReason, field.TypeString, value)
		_node.SuspendReason = value
	}
	if value, ok := bc.mutation.BusinessTags(); ok {
		_spec.SetField(business.FieldBusinessTags, field.TypeJSON, value)
		_node.BusinessTags = value
	}
	if value, ok := bc.mutation.ModuleCode(); ok {
		_spec.SetField(business.FieldModuleCode, field.TypeString, value)
		_node.ModuleCode = value
	}
	if value, ok := bc.mutation.Category(); ok {
		_spec.SetField(business.FieldCategory, field.TypeString, value)
		_node.Category = value
	}
	if value, ok := bc.mutation.Viewers(); ok {
		_spec.SetField(business.FieldViewers, field.TypeJSON, value)
		_node.Viewers = value
	}
	if value, ok := bc.mutation.Editors(); ok {
		_spec.SetField(business.FieldEditors, field.TypeJSON, value)
		_node.Editors = value
	}
	if value, ok := bc.mutation.PermissionConfigs(); ok {
		_spec.SetField(business.FieldPermissionConfigs, field.TypeJSON, value)
		_node.PermissionConfigs = value
	}
	if value, ok := bc.mutation.RoleConfigs(); ok {
		_spec.SetField(business.FieldRoleConfigs, field.TypeJSON, value)
		_node.RoleConfigs = value
	}
	if value, ok := bc.mutation.VisibleRange(); ok {
		_spec.SetField(business.FieldVisibleRange, field.TypeJSON, value)
		_node.VisibleRange = value
	}
	if value, ok := bc.mutation.Extras(); ok {
		_spec.SetField(business.FieldExtras, field.TypeJSON, value)
		_node.Extras = value
	}
	if value, ok := bc.mutation.TenantID(); ok {
		_spec.SetField(business.FieldTenantID, field.TypeString, value)
		_node.TenantID = value
	}
	if value, ok := bc.mutation.CreatedBy(); ok {
		_spec.SetField(business.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := bc.mutation.UpdatedBy(); ok {
		_spec.SetField(business.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := bc.mutation.CreatedAt(); ok {
		_spec.SetField(business.FieldCreatedAt, field.TypeInt64, value)
		_node.CreatedAt = value
	}
	if value, ok := bc.mutation.UpdatedAt(); ok {
		_spec.SetField(business.FieldUpdatedAt, field.TypeInt64, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// BusinessCreateBulk is the builder for creating many Business entities in bulk.
type BusinessCreateBulk struct {
	config
	err      error
	builders []*BusinessCreate
}

// Save creates the Business entities in the database.
func (bcb *BusinessCreateBulk) Save(ctx context.Context) ([]*Business, error) {
	if bcb.err != nil {
		return nil, bcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(bcb.builders))
	nodes := make([]*Business, len(bcb.builders))
	mutators := make([]Mutator, len(bcb.builders))
	for i := range bcb.builders {
		func(i int, root context.Context) {
			builder := bcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BusinessMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bcb *BusinessCreateBulk) SaveX(ctx context.Context) []*Business {
	v, err := bcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bcb *BusinessCreateBulk) Exec(ctx context.Context) error {
	_, err := bcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcb *BusinessCreateBulk) ExecX(ctx context.Context) {
	if err := bcb.Exec(ctx); err != nil {
		panic(err)
	}
}
