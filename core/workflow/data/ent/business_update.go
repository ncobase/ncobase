// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/core/workflow/data/ent/business"
	"ncobase/core/workflow/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// BusinessUpdate is the builder for updating Business entities.
type BusinessUpdate struct {
	config
	hooks    []Hook
	mutation *BusinessMutation
}

// Where appends a list predicates to the BusinessUpdate builder.
func (bu *BusinessUpdate) Where(ps ...predicate.Business) *BusinessUpdate {
	bu.mutation.Where(ps...)
	return bu
}

// SetCode sets the "code" field.
func (bu *BusinessUpdate) SetCode(s string) *BusinessUpdate {
	bu.mutation.SetCode(s)
	return bu
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (bu *BusinessUpdate) SetNillableCode(s *string) *BusinessUpdate {
	if s != nil {
		bu.SetCode(*s)
	}
	return bu
}

// ClearCode clears the value of the "code" field.
func (bu *BusinessUpdate) ClearCode() *BusinessUpdate {
	bu.mutation.ClearCode()
	return bu
}

// SetStatus sets the "status" field.
func (bu *BusinessUpdate) SetStatus(i int) *BusinessUpdate {
	bu.mutation.ResetStatus()
	bu.mutation.SetStatus(i)
	return bu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (bu *BusinessUpdate) SetNillableStatus(i *int) *BusinessUpdate {
	if i != nil {
		bu.SetStatus(*i)
	}
	return bu
}

// AddStatus adds i to the "status" field.
func (bu *BusinessUpdate) AddStatus(i int) *BusinessUpdate {
	bu.mutation.AddStatus(i)
	return bu
}

// SetFormCode sets the "form_code" field.
func (bu *BusinessUpdate) SetFormCode(s string) *BusinessUpdate {
	bu.mutation.SetFormCode(s)
	return bu
}

// SetNillableFormCode sets the "form_code" field if the given value is not nil.
func (bu *BusinessUpdate) SetNillableFormCode(s *string) *BusinessUpdate {
	if s != nil {
		bu.SetFormCode(*s)
	}
	return bu
}

// SetFormVersion sets the "form_version" field.
func (bu *BusinessUpdate) SetFormVersion(s string) *BusinessUpdate {
	bu.mutation.SetFormVersion(s)
	return bu
}

// SetNillableFormVersion sets the "form_version" field if the given value is not nil.
func (bu *BusinessUpdate) SetNillableFormVersion(s *string) *BusinessUpdate {
	if s != nil {
		bu.SetFormVersion(*s)
	}
	return bu
}

// ClearFormVersion clears the value of the "form_version" field.
func (bu *BusinessUpdate) ClearFormVersion() *BusinessUpdate {
	bu.mutation.ClearFormVersion()
	return bu
}

// SetFormConfig sets the "form_config" field.
func (bu *BusinessUpdate) SetFormConfig(m map[string]interface{}) *BusinessUpdate {
	bu.mutation.SetFormConfig(m)
	return bu
}

// ClearFormConfig clears the value of the "form_config" field.
func (bu *BusinessUpdate) ClearFormConfig() *BusinessUpdate {
	bu.mutation.ClearFormConfig()
	return bu
}

// SetFormPermissions sets the "form_permissions" field.
func (bu *BusinessUpdate) SetFormPermissions(m map[string]interface{}) *BusinessUpdate {
	bu.mutation.SetFormPermissions(m)
	return bu
}

// ClearFormPermissions clears the value of the "form_permissions" field.
func (bu *BusinessUpdate) ClearFormPermissions() *BusinessUpdate {
	bu.mutation.ClearFormPermissions()
	return bu
}

// SetFieldPermissions sets the "field_permissions" field.
func (bu *BusinessUpdate) SetFieldPermissions(m map[string]interface{}) *BusinessUpdate {
	bu.mutation.SetFieldPermissions(m)
	return bu
}

// ClearFieldPermissions clears the value of the "field_permissions" field.
func (bu *BusinessUpdate) ClearFieldPermissions() *BusinessUpdate {
	bu.mutation.ClearFieldPermissions()
	return bu
}

// SetProcessID sets the "process_id" field.
func (bu *BusinessUpdate) SetProcessID(s string) *BusinessUpdate {
	bu.mutation.SetProcessID(s)
	return bu
}

// SetNillableProcessID sets the "process_id" field if the given value is not nil.
func (bu *BusinessUpdate) SetNillableProcessID(s *string) *BusinessUpdate {
	if s != nil {
		bu.SetProcessID(*s)
	}
	return bu
}

// SetTemplateID sets the "template_id" field.
func (bu *BusinessUpdate) SetTemplateID(s string) *BusinessUpdate {
	bu.mutation.SetTemplateID(s)
	return bu
}

// SetNillableTemplateID sets the "template_id" field if the given value is not nil.
func (bu *BusinessUpdate) SetNillableTemplateID(s *string) *BusinessUpdate {
	if s != nil {
		bu.SetTemplateID(*s)
	}
	return bu
}

// SetBusinessKey sets the "business_key" field.
func (bu *BusinessUpdate) SetBusinessKey(s string) *BusinessUpdate {
	bu.mutation.SetBusinessKey(s)
	return bu
}

// SetNillableBusinessKey sets the "business_key" field if the given value is not nil.
func (bu *BusinessUpdate) SetNillableBusinessKey(s *string) *BusinessUpdate {
	if s != nil {
		bu.SetBusinessKey(*s)
	}
	return bu
}

// SetOriginData sets the "origin_data" field.
func (bu *BusinessUpdate) SetOriginData(m map[string]interface{}) *BusinessUpdate {
	bu.mutation.SetOriginData(m)
	return bu
}

// SetCurrentData sets the "current_data" field.
func (bu *BusinessUpdate) SetCurrentData(m map[string]interface{}) *BusinessUpdate {
	bu.mutation.SetCurrentData(m)
	return bu
}

// SetChangeLogs sets the "change_logs" field.
func (bu *BusinessUpdate) SetChangeLogs(m []map[string]interface{}) *BusinessUpdate {
	bu.mutation.SetChangeLogs(m)
	return bu
}

// AppendChangeLogs appends m to the "change_logs" field.
func (bu *BusinessUpdate) AppendChangeLogs(m []map[string]interface{}) *BusinessUpdate {
	bu.mutation.AppendChangeLogs(m)
	return bu
}

// ClearChangeLogs clears the value of the "change_logs" field.
func (bu *BusinessUpdate) ClearChangeLogs() *BusinessUpdate {
	bu.mutation.ClearChangeLogs()
	return bu
}

// SetLastModified sets the "last_modified" field.
func (bu *BusinessUpdate) SetLastModified(t time.Time) *BusinessUpdate {
	bu.mutation.SetLastModified(t)
	return bu
}

// SetNillableLastModified sets the "last_modified" field if the given value is not nil.
func (bu *BusinessUpdate) SetNillableLastModified(t *time.Time) *BusinessUpdate {
	if t != nil {
		bu.SetLastModified(*t)
	}
	return bu
}

// ClearLastModified clears the value of the "last_modified" field.
func (bu *BusinessUpdate) ClearLastModified() *BusinessUpdate {
	bu.mutation.ClearLastModified()
	return bu
}

// SetLastModifier sets the "last_modifier" field.
func (bu *BusinessUpdate) SetLastModifier(s string) *BusinessUpdate {
	bu.mutation.SetLastModifier(s)
	return bu
}

// SetNillableLastModifier sets the "last_modifier" field if the given value is not nil.
func (bu *BusinessUpdate) SetNillableLastModifier(s *string) *BusinessUpdate {
	if s != nil {
		bu.SetLastModifier(*s)
	}
	return bu
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (bu *BusinessUpdate) ClearLastModifier() *BusinessUpdate {
	bu.mutation.ClearLastModifier()
	return bu
}

// SetOperationLogs sets the "operation_logs" field.
func (bu *BusinessUpdate) SetOperationLogs(m []map[string]interface{}) *BusinessUpdate {
	bu.mutation.SetOperationLogs(m)
	return bu
}

// AppendOperationLogs appends m to the "operation_logs" field.
func (bu *BusinessUpdate) AppendOperationLogs(m []map[string]interface{}) *BusinessUpdate {
	bu.mutation.AppendOperationLogs(m)
	return bu
}

// ClearOperationLogs clears the value of the "operation_logs" field.
func (bu *BusinessUpdate) ClearOperationLogs() *BusinessUpdate {
	bu.mutation.ClearOperationLogs()
	return bu
}

// SetFlowStatus sets the "flow_status" field.
func (bu *BusinessUpdate) SetFlowStatus(s string) *BusinessUpdate {
	bu.mutation.SetFlowStatus(s)
	return bu
}

// SetNillableFlowStatus sets the "flow_status" field if the given value is not nil.
func (bu *BusinessUpdate) SetNillableFlowStatus(s *string) *BusinessUpdate {
	if s != nil {
		bu.SetFlowStatus(*s)
	}
	return bu
}

// ClearFlowStatus clears the value of the "flow_status" field.
func (bu *BusinessUpdate) ClearFlowStatus() *BusinessUpdate {
	bu.mutation.ClearFlowStatus()
	return bu
}

// SetFlowVariables sets the "flow_variables" field.
func (bu *BusinessUpdate) SetFlowVariables(m map[string]interface{}) *BusinessUpdate {
	bu.mutation.SetFlowVariables(m)
	return bu
}

// ClearFlowVariables clears the value of the "flow_variables" field.
func (bu *BusinessUpdate) ClearFlowVariables() *BusinessUpdate {
	bu.mutation.ClearFlowVariables()
	return bu
}

// SetIsDraft sets the "is_draft" field.
func (bu *BusinessUpdate) SetIsDraft(b bool) *BusinessUpdate {
	bu.mutation.SetIsDraft(b)
	return bu
}

// SetNillableIsDraft sets the "is_draft" field if the given value is not nil.
func (bu *BusinessUpdate) SetNillableIsDraft(b *bool) *BusinessUpdate {
	if b != nil {
		bu.SetIsDraft(*b)
	}
	return bu
}

// SetIsTerminated sets the "is_terminated" field.
func (bu *BusinessUpdate) SetIsTerminated(b bool) *BusinessUpdate {
	bu.mutation.SetIsTerminated(b)
	return bu
}

// SetNillableIsTerminated sets the "is_terminated" field if the given value is not nil.
func (bu *BusinessUpdate) SetNillableIsTerminated(b *bool) *BusinessUpdate {
	if b != nil {
		bu.SetIsTerminated(*b)
	}
	return bu
}

// SetIsSuspended sets the "is_suspended" field.
func (bu *BusinessUpdate) SetIsSuspended(b bool) *BusinessUpdate {
	bu.mutation.SetIsSuspended(b)
	return bu
}

// SetNillableIsSuspended sets the "is_suspended" field if the given value is not nil.
func (bu *BusinessUpdate) SetNillableIsSuspended(b *bool) *BusinessUpdate {
	if b != nil {
		bu.SetIsSuspended(*b)
	}
	return bu
}

// SetSuspendReason sets the "suspend_reason" field.
func (bu *BusinessUpdate) SetSuspendReason(s string) *BusinessUpdate {
	bu.mutation.SetSuspendReason(s)
	return bu
}

// SetNillableSuspendReason sets the "suspend_reason" field if the given value is not nil.
func (bu *BusinessUpdate) SetNillableSuspendReason(s *string) *BusinessUpdate {
	if s != nil {
		bu.SetSuspendReason(*s)
	}
	return bu
}

// ClearSuspendReason clears the value of the "suspend_reason" field.
func (bu *BusinessUpdate) ClearSuspendReason() *BusinessUpdate {
	bu.mutation.ClearSuspendReason()
	return bu
}

// SetBusinessTags sets the "business_tags" field.
func (bu *BusinessUpdate) SetBusinessTags(i []interface{}) *BusinessUpdate {
	bu.mutation.SetBusinessTags(i)
	return bu
}

// AppendBusinessTags appends i to the "business_tags" field.
func (bu *BusinessUpdate) AppendBusinessTags(i []interface{}) *BusinessUpdate {
	bu.mutation.AppendBusinessTags(i)
	return bu
}

// ClearBusinessTags clears the value of the "business_tags" field.
func (bu *BusinessUpdate) ClearBusinessTags() *BusinessUpdate {
	bu.mutation.ClearBusinessTags()
	return bu
}

// SetModuleCode sets the "module_code" field.
func (bu *BusinessUpdate) SetModuleCode(s string) *BusinessUpdate {
	bu.mutation.SetModuleCode(s)
	return bu
}

// SetNillableModuleCode sets the "module_code" field if the given value is not nil.
func (bu *BusinessUpdate) SetNillableModuleCode(s *string) *BusinessUpdate {
	if s != nil {
		bu.SetModuleCode(*s)
	}
	return bu
}

// SetCategory sets the "category" field.
func (bu *BusinessUpdate) SetCategory(s string) *BusinessUpdate {
	bu.mutation.SetCategory(s)
	return bu
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (bu *BusinessUpdate) SetNillableCategory(s *string) *BusinessUpdate {
	if s != nil {
		bu.SetCategory(*s)
	}
	return bu
}

// ClearCategory clears the value of the "category" field.
func (bu *BusinessUpdate) ClearCategory() *BusinessUpdate {
	bu.mutation.ClearCategory()
	return bu
}

// SetViewers sets the "viewers" field.
func (bu *BusinessUpdate) SetViewers(i []interface{}) *BusinessUpdate {
	bu.mutation.SetViewers(i)
	return bu
}

// AppendViewers appends i to the "viewers" field.
func (bu *BusinessUpdate) AppendViewers(i []interface{}) *BusinessUpdate {
	bu.mutation.AppendViewers(i)
	return bu
}

// ClearViewers clears the value of the "viewers" field.
func (bu *BusinessUpdate) ClearViewers() *BusinessUpdate {
	bu.mutation.ClearViewers()
	return bu
}

// SetEditors sets the "editors" field.
func (bu *BusinessUpdate) SetEditors(i []interface{}) *BusinessUpdate {
	bu.mutation.SetEditors(i)
	return bu
}

// AppendEditors appends i to the "editors" field.
func (bu *BusinessUpdate) AppendEditors(i []interface{}) *BusinessUpdate {
	bu.mutation.AppendEditors(i)
	return bu
}

// ClearEditors clears the value of the "editors" field.
func (bu *BusinessUpdate) ClearEditors() *BusinessUpdate {
	bu.mutation.ClearEditors()
	return bu
}

// SetPermissionConfigs sets the "permission_configs" field.
func (bu *BusinessUpdate) SetPermissionConfigs(m map[string]interface{}) *BusinessUpdate {
	bu.mutation.SetPermissionConfigs(m)
	return bu
}

// ClearPermissionConfigs clears the value of the "permission_configs" field.
func (bu *BusinessUpdate) ClearPermissionConfigs() *BusinessUpdate {
	bu.mutation.ClearPermissionConfigs()
	return bu
}

// SetRoleConfigs sets the "role_configs" field.
func (bu *BusinessUpdate) SetRoleConfigs(m map[string]interface{}) *BusinessUpdate {
	bu.mutation.SetRoleConfigs(m)
	return bu
}

// ClearRoleConfigs clears the value of the "role_configs" field.
func (bu *BusinessUpdate) ClearRoleConfigs() *BusinessUpdate {
	bu.mutation.ClearRoleConfigs()
	return bu
}

// SetVisibleRange sets the "visible_range" field.
func (bu *BusinessUpdate) SetVisibleRange(m map[string]interface{}) *BusinessUpdate {
	bu.mutation.SetVisibleRange(m)
	return bu
}

// ClearVisibleRange clears the value of the "visible_range" field.
func (bu *BusinessUpdate) ClearVisibleRange() *BusinessUpdate {
	bu.mutation.ClearVisibleRange()
	return bu
}

// SetExtras sets the "extras" field.
func (bu *BusinessUpdate) SetExtras(m map[string]interface{}) *BusinessUpdate {
	bu.mutation.SetExtras(m)
	return bu
}

// ClearExtras clears the value of the "extras" field.
func (bu *BusinessUpdate) ClearExtras() *BusinessUpdate {
	bu.mutation.ClearExtras()
	return bu
}

// SetTenantID sets the "tenant_id" field.
func (bu *BusinessUpdate) SetTenantID(s string) *BusinessUpdate {
	bu.mutation.SetTenantID(s)
	return bu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (bu *BusinessUpdate) SetNillableTenantID(s *string) *BusinessUpdate {
	if s != nil {
		bu.SetTenantID(*s)
	}
	return bu
}

// ClearTenantID clears the value of the "tenant_id" field.
func (bu *BusinessUpdate) ClearTenantID() *BusinessUpdate {
	bu.mutation.ClearTenantID()
	return bu
}

// SetCreatedBy sets the "created_by" field.
func (bu *BusinessUpdate) SetCreatedBy(s string) *BusinessUpdate {
	bu.mutation.SetCreatedBy(s)
	return bu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (bu *BusinessUpdate) SetNillableCreatedBy(s *string) *BusinessUpdate {
	if s != nil {
		bu.SetCreatedBy(*s)
	}
	return bu
}

// ClearCreatedBy clears the value of the "created_by" field.
func (bu *BusinessUpdate) ClearCreatedBy() *BusinessUpdate {
	bu.mutation.ClearCreatedBy()
	return bu
}

// SetUpdatedBy sets the "updated_by" field.
func (bu *BusinessUpdate) SetUpdatedBy(s string) *BusinessUpdate {
	bu.mutation.SetUpdatedBy(s)
	return bu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (bu *BusinessUpdate) SetNillableUpdatedBy(s *string) *BusinessUpdate {
	if s != nil {
		bu.SetUpdatedBy(*s)
	}
	return bu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (bu *BusinessUpdate) ClearUpdatedBy() *BusinessUpdate {
	bu.mutation.ClearUpdatedBy()
	return bu
}

// SetUpdatedAt sets the "updated_at" field.
func (bu *BusinessUpdate) SetUpdatedAt(i int64) *BusinessUpdate {
	bu.mutation.ResetUpdatedAt()
	bu.mutation.SetUpdatedAt(i)
	return bu
}

// AddUpdatedAt adds i to the "updated_at" field.
func (bu *BusinessUpdate) AddUpdatedAt(i int64) *BusinessUpdate {
	bu.mutation.AddUpdatedAt(i)
	return bu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (bu *BusinessUpdate) ClearUpdatedAt() *BusinessUpdate {
	bu.mutation.ClearUpdatedAt()
	return bu
}

// Mutation returns the BusinessMutation object of the builder.
func (bu *BusinessUpdate) Mutation() *BusinessMutation {
	return bu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bu *BusinessUpdate) Save(ctx context.Context) (int, error) {
	bu.defaults()
	return withHooks(ctx, bu.sqlSave, bu.mutation, bu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BusinessUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BusinessUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BusinessUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bu *BusinessUpdate) defaults() {
	if _, ok := bu.mutation.UpdatedAt(); !ok && !bu.mutation.UpdatedAtCleared() {
		v := business.UpdateDefaultUpdatedAt()
		bu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bu *BusinessUpdate) check() error {
	if v, ok := bu.mutation.TenantID(); ok {
		if err := business.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "Business.tenant_id": %w`, err)}
		}
	}
	if v, ok := bu.mutation.CreatedBy(); ok {
		if err := business.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "Business.created_by": %w`, err)}
		}
	}
	if v, ok := bu.mutation.UpdatedBy(); ok {
		if err := business.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "Business.updated_by": %w`, err)}
		}
	}
	return nil
}

func (bu *BusinessUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := bu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(business.Table, business.Columns, sqlgraph.NewFieldSpec(business.FieldID, field.TypeString))
	if ps := bu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.Code(); ok {
		_spec.SetField(business.FieldCode, field.TypeString, value)
	}
	if bu.mutation.CodeCleared() {
		_spec.ClearField(business.FieldCode, field.TypeString)
	}
	if value, ok := bu.mutation.Status(); ok {
		_spec.SetField(business.FieldStatus, field.TypeInt, value)
	}
	if value, ok := bu.mutation.AddedStatus(); ok {
		_spec.AddField(business.FieldStatus, field.TypeInt, value)
	}
	if value, ok := bu.mutation.FormCode(); ok {
		_spec.SetField(business.FieldFormCode, field.TypeString, value)
	}
	if value, ok := bu.mutation.FormVersion(); ok {
		_spec.SetField(business.FieldFormVersion, field.TypeString, value)
	}
	if bu.mutation.FormVersionCleared() {
		_spec.ClearField(business.FieldFormVersion, field.TypeString)
	}
	if value, ok := bu.mutation.FormConfig(); ok {
		_spec.SetField(business.FieldFormConfig, field.TypeJSON, value)
	}
	if bu.mutation.FormConfigCleared() {
		_spec.ClearField(business.FieldFormConfig, field.TypeJSON)
	}
	if value, ok := bu.mutation.FormPermissions(); ok {
		_spec.SetField(business.FieldFormPermissions, field.TypeJSON, value)
	}
	if bu.mutation.FormPermissionsCleared() {
		_spec.ClearField(business.FieldFormPermissions, field.TypeJSON)
	}
	if value, ok := bu.mutation.FieldPermissions(); ok {
		_spec.SetField(business.FieldFieldPermissions, field.TypeJSON, value)
	}
	if bu.mutation.FieldPermissionsCleared() {
		_spec.ClearField(business.FieldFieldPermissions, field.TypeJSON)
	}
	if value, ok := bu.mutation.ProcessID(); ok {
		_spec.SetField(business.FieldProcessID, field.TypeString, value)
	}
	if value, ok := bu.mutation.TemplateID(); ok {
		_spec.SetField(business.FieldTemplateID, field.TypeString, value)
	}
	if value, ok := bu.mutation.BusinessKey(); ok {
		_spec.SetField(business.FieldBusinessKey, field.TypeString, value)
	}
	if value, ok := bu.mutation.OriginData(); ok {
		_spec.SetField(business.FieldOriginData, field.TypeJSON, value)
	}
	if value, ok := bu.mutation.CurrentData(); ok {
		_spec.SetField(business.FieldCurrentData, field.TypeJSON, value)
	}
	if value, ok := bu.mutation.ChangeLogs(); ok {
		_spec.SetField(business.FieldChangeLogs, field.TypeJSON, value)
	}
	if value, ok := bu.mutation.AppendedChangeLogs(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, business.FieldChangeLogs, value)
		})
	}
	if bu.mutation.ChangeLogsCleared() {
		_spec.ClearField(business.FieldChangeLogs, field.TypeJSON)
	}
	if value, ok := bu.mutation.LastModified(); ok {
		_spec.SetField(business.FieldLastModified, field.TypeTime, value)
	}
	if bu.mutation.LastModifiedCleared() {
		_spec.ClearField(business.FieldLastModified, field.TypeTime)
	}
	if value, ok := bu.mutation.LastModifier(); ok {
		_spec.SetField(business.FieldLastModifier, field.TypeString, value)
	}
	if bu.mutation.LastModifierCleared() {
		_spec.ClearField(business.FieldLastModifier, field.TypeString)
	}
	if value, ok := bu.mutation.OperationLogs(); ok {
		_spec.SetField(business.FieldOperationLogs, field.TypeJSON, value)
	}
	if value, ok := bu.mutation.AppendedOperationLogs(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, business.FieldOperationLogs, value)
		})
	}
	if bu.mutation.OperationLogsCleared() {
		_spec.ClearField(business.FieldOperationLogs, field.TypeJSON)
	}
	if value, ok := bu.mutation.FlowStatus(); ok {
		_spec.SetField(business.FieldFlowStatus, field.TypeString, value)
	}
	if bu.mutation.FlowStatusCleared() {
		_spec.ClearField(business.FieldFlowStatus, field.TypeString)
	}
	if value, ok := bu.mutation.FlowVariables(); ok {
		_spec.SetField(business.FieldFlowVariables, field.TypeJSON, value)
	}
	if bu.mutation.FlowVariablesCleared() {
		_spec.ClearField(business.FieldFlowVariables, field.TypeJSON)
	}
	if value, ok := bu.mutation.IsDraft(); ok {
		_spec.SetField(business.FieldIsDraft, field.TypeBool, value)
	}
	if value, ok := bu.mutation.IsTerminated(); ok {
		_spec.SetField(business.FieldIsTerminated, field.TypeBool, value)
	}
	if value, ok := bu.mutation.IsSuspended(); ok {
		_spec.SetField(business.FieldIsSuspended, field.TypeBool, value)
	}
	if value, ok := bu.mutation.SuspendReason(); ok {
		_spec.SetField(business.FieldSuspendReason, field.TypeString, value)
	}
	if bu.mutation.SuspendReasonCleared() {
		_spec.ClearField(business.FieldSuspendReason, field.TypeString)
	}
	if value, ok := bu.mutation.BusinessTags(); ok {
		_spec.SetField(business.FieldBusinessTags, field.TypeJSON, value)
	}
	if value, ok := bu.mutation.AppendedBusinessTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, business.FieldBusinessTags, value)
		})
	}
	if bu.mutation.BusinessTagsCleared() {
		_spec.ClearField(business.FieldBusinessTags, field.TypeJSON)
	}
	if value, ok := bu.mutation.ModuleCode(); ok {
		_spec.SetField(business.FieldModuleCode, field.TypeString, value)
	}
	if value, ok := bu.mutation.Category(); ok {
		_spec.SetField(business.FieldCategory, field.TypeString, value)
	}
	if bu.mutation.CategoryCleared() {
		_spec.ClearField(business.FieldCategory, field.TypeString)
	}
	if value, ok := bu.mutation.Viewers(); ok {
		_spec.SetField(business.FieldViewers, field.TypeJSON, value)
	}
	if value, ok := bu.mutation.AppendedViewers(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, business.FieldViewers, value)
		})
	}
	if bu.mutation.ViewersCleared() {
		_spec.ClearField(business.FieldViewers, field.TypeJSON)
	}
	if value, ok := bu.mutation.Editors(); ok {
		_spec.SetField(business.FieldEditors, field.TypeJSON, value)
	}
	if value, ok := bu.mutation.AppendedEditors(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, business.FieldEditors, value)
		})
	}
	if bu.mutation.EditorsCleared() {
		_spec.ClearField(business.FieldEditors, field.TypeJSON)
	}
	if value, ok := bu.mutation.PermissionConfigs(); ok {
		_spec.SetField(business.FieldPermissionConfigs, field.TypeJSON, value)
	}
	if bu.mutation.PermissionConfigsCleared() {
		_spec.ClearField(business.FieldPermissionConfigs, field.TypeJSON)
	}
	if value, ok := bu.mutation.RoleConfigs(); ok {
		_spec.SetField(business.FieldRoleConfigs, field.TypeJSON, value)
	}
	if bu.mutation.RoleConfigsCleared() {
		_spec.ClearField(business.FieldRoleConfigs, field.TypeJSON)
	}
	if value, ok := bu.mutation.VisibleRange(); ok {
		_spec.SetField(business.FieldVisibleRange, field.TypeJSON, value)
	}
	if bu.mutation.VisibleRangeCleared() {
		_spec.ClearField(business.FieldVisibleRange, field.TypeJSON)
	}
	if value, ok := bu.mutation.Extras(); ok {
		_spec.SetField(business.FieldExtras, field.TypeJSON, value)
	}
	if bu.mutation.ExtrasCleared() {
		_spec.ClearField(business.FieldExtras, field.TypeJSON)
	}
	if value, ok := bu.mutation.TenantID(); ok {
		_spec.SetField(business.FieldTenantID, field.TypeString, value)
	}
	if bu.mutation.TenantIDCleared() {
		_spec.ClearField(business.FieldTenantID, field.TypeString)
	}
	if value, ok := bu.mutation.CreatedBy(); ok {
		_spec.SetField(business.FieldCreatedBy, field.TypeString, value)
	}
	if bu.mutation.CreatedByCleared() {
		_spec.ClearField(business.FieldCreatedBy, field.TypeString)
	}
	if value, ok := bu.mutation.UpdatedBy(); ok {
		_spec.SetField(business.FieldUpdatedBy, field.TypeString, value)
	}
	if bu.mutation.UpdatedByCleared() {
		_spec.ClearField(business.FieldUpdatedBy, field.TypeString)
	}
	if bu.mutation.CreatedAtCleared() {
		_spec.ClearField(business.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := bu.mutation.UpdatedAt(); ok {
		_spec.SetField(business.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := bu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(business.FieldUpdatedAt, field.TypeInt64, value)
	}
	if bu.mutation.UpdatedAtCleared() {
		_spec.ClearField(business.FieldUpdatedAt, field.TypeInt64)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{business.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bu.mutation.done = true
	return n, nil
}

// BusinessUpdateOne is the builder for updating a single Business entity.
type BusinessUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BusinessMutation
}

// SetCode sets the "code" field.
func (buo *BusinessUpdateOne) SetCode(s string) *BusinessUpdateOne {
	buo.mutation.SetCode(s)
	return buo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (buo *BusinessUpdateOne) SetNillableCode(s *string) *BusinessUpdateOne {
	if s != nil {
		buo.SetCode(*s)
	}
	return buo
}

// ClearCode clears the value of the "code" field.
func (buo *BusinessUpdateOne) ClearCode() *BusinessUpdateOne {
	buo.mutation.ClearCode()
	return buo
}

// SetStatus sets the "status" field.
func (buo *BusinessUpdateOne) SetStatus(i int) *BusinessUpdateOne {
	buo.mutation.ResetStatus()
	buo.mutation.SetStatus(i)
	return buo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (buo *BusinessUpdateOne) SetNillableStatus(i *int) *BusinessUpdateOne {
	if i != nil {
		buo.SetStatus(*i)
	}
	return buo
}

// AddStatus adds i to the "status" field.
func (buo *BusinessUpdateOne) AddStatus(i int) *BusinessUpdateOne {
	buo.mutation.AddStatus(i)
	return buo
}

// SetFormCode sets the "form_code" field.
func (buo *BusinessUpdateOne) SetFormCode(s string) *BusinessUpdateOne {
	buo.mutation.SetFormCode(s)
	return buo
}

// SetNillableFormCode sets the "form_code" field if the given value is not nil.
func (buo *BusinessUpdateOne) SetNillableFormCode(s *string) *BusinessUpdateOne {
	if s != nil {
		buo.SetFormCode(*s)
	}
	return buo
}

// SetFormVersion sets the "form_version" field.
func (buo *BusinessUpdateOne) SetFormVersion(s string) *BusinessUpdateOne {
	buo.mutation.SetFormVersion(s)
	return buo
}

// SetNillableFormVersion sets the "form_version" field if the given value is not nil.
func (buo *BusinessUpdateOne) SetNillableFormVersion(s *string) *BusinessUpdateOne {
	if s != nil {
		buo.SetFormVersion(*s)
	}
	return buo
}

// ClearFormVersion clears the value of the "form_version" field.
func (buo *BusinessUpdateOne) ClearFormVersion() *BusinessUpdateOne {
	buo.mutation.ClearFormVersion()
	return buo
}

// SetFormConfig sets the "form_config" field.
func (buo *BusinessUpdateOne) SetFormConfig(m map[string]interface{}) *BusinessUpdateOne {
	buo.mutation.SetFormConfig(m)
	return buo
}

// ClearFormConfig clears the value of the "form_config" field.
func (buo *BusinessUpdateOne) ClearFormConfig() *BusinessUpdateOne {
	buo.mutation.ClearFormConfig()
	return buo
}

// SetFormPermissions sets the "form_permissions" field.
func (buo *BusinessUpdateOne) SetFormPermissions(m map[string]interface{}) *BusinessUpdateOne {
	buo.mutation.SetFormPermissions(m)
	return buo
}

// ClearFormPermissions clears the value of the "form_permissions" field.
func (buo *BusinessUpdateOne) ClearFormPermissions() *BusinessUpdateOne {
	buo.mutation.ClearFormPermissions()
	return buo
}

// SetFieldPermissions sets the "field_permissions" field.
func (buo *BusinessUpdateOne) SetFieldPermissions(m map[string]interface{}) *BusinessUpdateOne {
	buo.mutation.SetFieldPermissions(m)
	return buo
}

// ClearFieldPermissions clears the value of the "field_permissions" field.
func (buo *BusinessUpdateOne) ClearFieldPermissions() *BusinessUpdateOne {
	buo.mutation.ClearFieldPermissions()
	return buo
}

// SetProcessID sets the "process_id" field.
func (buo *BusinessUpdateOne) SetProcessID(s string) *BusinessUpdateOne {
	buo.mutation.SetProcessID(s)
	return buo
}

// SetNillableProcessID sets the "process_id" field if the given value is not nil.
func (buo *BusinessUpdateOne) SetNillableProcessID(s *string) *BusinessUpdateOne {
	if s != nil {
		buo.SetProcessID(*s)
	}
	return buo
}

// SetTemplateID sets the "template_id" field.
func (buo *BusinessUpdateOne) SetTemplateID(s string) *BusinessUpdateOne {
	buo.mutation.SetTemplateID(s)
	return buo
}

// SetNillableTemplateID sets the "template_id" field if the given value is not nil.
func (buo *BusinessUpdateOne) SetNillableTemplateID(s *string) *BusinessUpdateOne {
	if s != nil {
		buo.SetTemplateID(*s)
	}
	return buo
}

// SetBusinessKey sets the "business_key" field.
func (buo *BusinessUpdateOne) SetBusinessKey(s string) *BusinessUpdateOne {
	buo.mutation.SetBusinessKey(s)
	return buo
}

// SetNillableBusinessKey sets the "business_key" field if the given value is not nil.
func (buo *BusinessUpdateOne) SetNillableBusinessKey(s *string) *BusinessUpdateOne {
	if s != nil {
		buo.SetBusinessKey(*s)
	}
	return buo
}

// SetOriginData sets the "origin_data" field.
func (buo *BusinessUpdateOne) SetOriginData(m map[string]interface{}) *BusinessUpdateOne {
	buo.mutation.SetOriginData(m)
	return buo
}

// SetCurrentData sets the "current_data" field.
func (buo *BusinessUpdateOne) SetCurrentData(m map[string]interface{}) *BusinessUpdateOne {
	buo.mutation.SetCurrentData(m)
	return buo
}

// SetChangeLogs sets the "change_logs" field.
func (buo *BusinessUpdateOne) SetChangeLogs(m []map[string]interface{}) *BusinessUpdateOne {
	buo.mutation.SetChangeLogs(m)
	return buo
}

// AppendChangeLogs appends m to the "change_logs" field.
func (buo *BusinessUpdateOne) AppendChangeLogs(m []map[string]interface{}) *BusinessUpdateOne {
	buo.mutation.AppendChangeLogs(m)
	return buo
}

// ClearChangeLogs clears the value of the "change_logs" field.
func (buo *BusinessUpdateOne) ClearChangeLogs() *BusinessUpdateOne {
	buo.mutation.ClearChangeLogs()
	return buo
}

// SetLastModified sets the "last_modified" field.
func (buo *BusinessUpdateOne) SetLastModified(t time.Time) *BusinessUpdateOne {
	buo.mutation.SetLastModified(t)
	return buo
}

// SetNillableLastModified sets the "last_modified" field if the given value is not nil.
func (buo *BusinessUpdateOne) SetNillableLastModified(t *time.Time) *BusinessUpdateOne {
	if t != nil {
		buo.SetLastModified(*t)
	}
	return buo
}

// ClearLastModified clears the value of the "last_modified" field.
func (buo *BusinessUpdateOne) ClearLastModified() *BusinessUpdateOne {
	buo.mutation.ClearLastModified()
	return buo
}

// SetLastModifier sets the "last_modifier" field.
func (buo *BusinessUpdateOne) SetLastModifier(s string) *BusinessUpdateOne {
	buo.mutation.SetLastModifier(s)
	return buo
}

// SetNillableLastModifier sets the "last_modifier" field if the given value is not nil.
func (buo *BusinessUpdateOne) SetNillableLastModifier(s *string) *BusinessUpdateOne {
	if s != nil {
		buo.SetLastModifier(*s)
	}
	return buo
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (buo *BusinessUpdateOne) ClearLastModifier() *BusinessUpdateOne {
	buo.mutation.ClearLastModifier()
	return buo
}

// SetOperationLogs sets the "operation_logs" field.
func (buo *BusinessUpdateOne) SetOperationLogs(m []map[string]interface{}) *BusinessUpdateOne {
	buo.mutation.SetOperationLogs(m)
	return buo
}

// AppendOperationLogs appends m to the "operation_logs" field.
func (buo *BusinessUpdateOne) AppendOperationLogs(m []map[string]interface{}) *BusinessUpdateOne {
	buo.mutation.AppendOperationLogs(m)
	return buo
}

// ClearOperationLogs clears the value of the "operation_logs" field.
func (buo *BusinessUpdateOne) ClearOperationLogs() *BusinessUpdateOne {
	buo.mutation.ClearOperationLogs()
	return buo
}

// SetFlowStatus sets the "flow_status" field.
func (buo *BusinessUpdateOne) SetFlowStatus(s string) *BusinessUpdateOne {
	buo.mutation.SetFlowStatus(s)
	return buo
}

// SetNillableFlowStatus sets the "flow_status" field if the given value is not nil.
func (buo *BusinessUpdateOne) SetNillableFlowStatus(s *string) *BusinessUpdateOne {
	if s != nil {
		buo.SetFlowStatus(*s)
	}
	return buo
}

// ClearFlowStatus clears the value of the "flow_status" field.
func (buo *BusinessUpdateOne) ClearFlowStatus() *BusinessUpdateOne {
	buo.mutation.ClearFlowStatus()
	return buo
}

// SetFlowVariables sets the "flow_variables" field.
func (buo *BusinessUpdateOne) SetFlowVariables(m map[string]interface{}) *BusinessUpdateOne {
	buo.mutation.SetFlowVariables(m)
	return buo
}

// ClearFlowVariables clears the value of the "flow_variables" field.
func (buo *BusinessUpdateOne) ClearFlowVariables() *BusinessUpdateOne {
	buo.mutation.ClearFlowVariables()
	return buo
}

// SetIsDraft sets the "is_draft" field.
func (buo *BusinessUpdateOne) SetIsDraft(b bool) *BusinessUpdateOne {
	buo.mutation.SetIsDraft(b)
	return buo
}

// SetNillableIsDraft sets the "is_draft" field if the given value is not nil.
func (buo *BusinessUpdateOne) SetNillableIsDraft(b *bool) *BusinessUpdateOne {
	if b != nil {
		buo.SetIsDraft(*b)
	}
	return buo
}

// SetIsTerminated sets the "is_terminated" field.
func (buo *BusinessUpdateOne) SetIsTerminated(b bool) *BusinessUpdateOne {
	buo.mutation.SetIsTerminated(b)
	return buo
}

// SetNillableIsTerminated sets the "is_terminated" field if the given value is not nil.
func (buo *BusinessUpdateOne) SetNillableIsTerminated(b *bool) *BusinessUpdateOne {
	if b != nil {
		buo.SetIsTerminated(*b)
	}
	return buo
}

// SetIsSuspended sets the "is_suspended" field.
func (buo *BusinessUpdateOne) SetIsSuspended(b bool) *BusinessUpdateOne {
	buo.mutation.SetIsSuspended(b)
	return buo
}

// SetNillableIsSuspended sets the "is_suspended" field if the given value is not nil.
func (buo *BusinessUpdateOne) SetNillableIsSuspended(b *bool) *BusinessUpdateOne {
	if b != nil {
		buo.SetIsSuspended(*b)
	}
	return buo
}

// SetSuspendReason sets the "suspend_reason" field.
func (buo *BusinessUpdateOne) SetSuspendReason(s string) *BusinessUpdateOne {
	buo.mutation.SetSuspendReason(s)
	return buo
}

// SetNillableSuspendReason sets the "suspend_reason" field if the given value is not nil.
func (buo *BusinessUpdateOne) SetNillableSuspendReason(s *string) *BusinessUpdateOne {
	if s != nil {
		buo.SetSuspendReason(*s)
	}
	return buo
}

// ClearSuspendReason clears the value of the "suspend_reason" field.
func (buo *BusinessUpdateOne) ClearSuspendReason() *BusinessUpdateOne {
	buo.mutation.ClearSuspendReason()
	return buo
}

// SetBusinessTags sets the "business_tags" field.
func (buo *BusinessUpdateOne) SetBusinessTags(i []interface{}) *BusinessUpdateOne {
	buo.mutation.SetBusinessTags(i)
	return buo
}

// AppendBusinessTags appends i to the "business_tags" field.
func (buo *BusinessUpdateOne) AppendBusinessTags(i []interface{}) *BusinessUpdateOne {
	buo.mutation.AppendBusinessTags(i)
	return buo
}

// ClearBusinessTags clears the value of the "business_tags" field.
func (buo *BusinessUpdateOne) ClearBusinessTags() *BusinessUpdateOne {
	buo.mutation.ClearBusinessTags()
	return buo
}

// SetModuleCode sets the "module_code" field.
func (buo *BusinessUpdateOne) SetModuleCode(s string) *BusinessUpdateOne {
	buo.mutation.SetModuleCode(s)
	return buo
}

// SetNillableModuleCode sets the "module_code" field if the given value is not nil.
func (buo *BusinessUpdateOne) SetNillableModuleCode(s *string) *BusinessUpdateOne {
	if s != nil {
		buo.SetModuleCode(*s)
	}
	return buo
}

// SetCategory sets the "category" field.
func (buo *BusinessUpdateOne) SetCategory(s string) *BusinessUpdateOne {
	buo.mutation.SetCategory(s)
	return buo
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (buo *BusinessUpdateOne) SetNillableCategory(s *string) *BusinessUpdateOne {
	if s != nil {
		buo.SetCategory(*s)
	}
	return buo
}

// ClearCategory clears the value of the "category" field.
func (buo *BusinessUpdateOne) ClearCategory() *BusinessUpdateOne {
	buo.mutation.ClearCategory()
	return buo
}

// SetViewers sets the "viewers" field.
func (buo *BusinessUpdateOne) SetViewers(i []interface{}) *BusinessUpdateOne {
	buo.mutation.SetViewers(i)
	return buo
}

// AppendViewers appends i to the "viewers" field.
func (buo *BusinessUpdateOne) AppendViewers(i []interface{}) *BusinessUpdateOne {
	buo.mutation.AppendViewers(i)
	return buo
}

// ClearViewers clears the value of the "viewers" field.
func (buo *BusinessUpdateOne) ClearViewers() *BusinessUpdateOne {
	buo.mutation.ClearViewers()
	return buo
}

// SetEditors sets the "editors" field.
func (buo *BusinessUpdateOne) SetEditors(i []interface{}) *BusinessUpdateOne {
	buo.mutation.SetEditors(i)
	return buo
}

// AppendEditors appends i to the "editors" field.
func (buo *BusinessUpdateOne) AppendEditors(i []interface{}) *BusinessUpdateOne {
	buo.mutation.AppendEditors(i)
	return buo
}

// ClearEditors clears the value of the "editors" field.
func (buo *BusinessUpdateOne) ClearEditors() *BusinessUpdateOne {
	buo.mutation.ClearEditors()
	return buo
}

// SetPermissionConfigs sets the "permission_configs" field.
func (buo *BusinessUpdateOne) SetPermissionConfigs(m map[string]interface{}) *BusinessUpdateOne {
	buo.mutation.SetPermissionConfigs(m)
	return buo
}

// ClearPermissionConfigs clears the value of the "permission_configs" field.
func (buo *BusinessUpdateOne) ClearPermissionConfigs() *BusinessUpdateOne {
	buo.mutation.ClearPermissionConfigs()
	return buo
}

// SetRoleConfigs sets the "role_configs" field.
func (buo *BusinessUpdateOne) SetRoleConfigs(m map[string]interface{}) *BusinessUpdateOne {
	buo.mutation.SetRoleConfigs(m)
	return buo
}

// ClearRoleConfigs clears the value of the "role_configs" field.
func (buo *BusinessUpdateOne) ClearRoleConfigs() *BusinessUpdateOne {
	buo.mutation.ClearRoleConfigs()
	return buo
}

// SetVisibleRange sets the "visible_range" field.
func (buo *BusinessUpdateOne) SetVisibleRange(m map[string]interface{}) *BusinessUpdateOne {
	buo.mutation.SetVisibleRange(m)
	return buo
}

// ClearVisibleRange clears the value of the "visible_range" field.
func (buo *BusinessUpdateOne) ClearVisibleRange() *BusinessUpdateOne {
	buo.mutation.ClearVisibleRange()
	return buo
}

// SetExtras sets the "extras" field.
func (buo *BusinessUpdateOne) SetExtras(m map[string]interface{}) *BusinessUpdateOne {
	buo.mutation.SetExtras(m)
	return buo
}

// ClearExtras clears the value of the "extras" field.
func (buo *BusinessUpdateOne) ClearExtras() *BusinessUpdateOne {
	buo.mutation.ClearExtras()
	return buo
}

// SetTenantID sets the "tenant_id" field.
func (buo *BusinessUpdateOne) SetTenantID(s string) *BusinessUpdateOne {
	buo.mutation.SetTenantID(s)
	return buo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (buo *BusinessUpdateOne) SetNillableTenantID(s *string) *BusinessUpdateOne {
	if s != nil {
		buo.SetTenantID(*s)
	}
	return buo
}

// ClearTenantID clears the value of the "tenant_id" field.
func (buo *BusinessUpdateOne) ClearTenantID() *BusinessUpdateOne {
	buo.mutation.ClearTenantID()
	return buo
}

// SetCreatedBy sets the "created_by" field.
func (buo *BusinessUpdateOne) SetCreatedBy(s string) *BusinessUpdateOne {
	buo.mutation.SetCreatedBy(s)
	return buo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (buo *BusinessUpdateOne) SetNillableCreatedBy(s *string) *BusinessUpdateOne {
	if s != nil {
		buo.SetCreatedBy(*s)
	}
	return buo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (buo *BusinessUpdateOne) ClearCreatedBy() *BusinessUpdateOne {
	buo.mutation.ClearCreatedBy()
	return buo
}

// SetUpdatedBy sets the "updated_by" field.
func (buo *BusinessUpdateOne) SetUpdatedBy(s string) *BusinessUpdateOne {
	buo.mutation.SetUpdatedBy(s)
	return buo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (buo *BusinessUpdateOne) SetNillableUpdatedBy(s *string) *BusinessUpdateOne {
	if s != nil {
		buo.SetUpdatedBy(*s)
	}
	return buo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (buo *BusinessUpdateOne) ClearUpdatedBy() *BusinessUpdateOne {
	buo.mutation.ClearUpdatedBy()
	return buo
}

// SetUpdatedAt sets the "updated_at" field.
func (buo *BusinessUpdateOne) SetUpdatedAt(i int64) *BusinessUpdateOne {
	buo.mutation.ResetUpdatedAt()
	buo.mutation.SetUpdatedAt(i)
	return buo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (buo *BusinessUpdateOne) AddUpdatedAt(i int64) *BusinessUpdateOne {
	buo.mutation.AddUpdatedAt(i)
	return buo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (buo *BusinessUpdateOne) ClearUpdatedAt() *BusinessUpdateOne {
	buo.mutation.ClearUpdatedAt()
	return buo
}

// Mutation returns the BusinessMutation object of the builder.
func (buo *BusinessUpdateOne) Mutation() *BusinessMutation {
	return buo.mutation
}

// Where appends a list predicates to the BusinessUpdate builder.
func (buo *BusinessUpdateOne) Where(ps ...predicate.Business) *BusinessUpdateOne {
	buo.mutation.Where(ps...)
	return buo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (buo *BusinessUpdateOne) Select(field string, fields ...string) *BusinessUpdateOne {
	buo.fields = append([]string{field}, fields...)
	return buo
}

// Save executes the query and returns the updated Business entity.
func (buo *BusinessUpdateOne) Save(ctx context.Context) (*Business, error) {
	buo.defaults()
	return withHooks(ctx, buo.sqlSave, buo.mutation, buo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BusinessUpdateOne) SaveX(ctx context.Context) *Business {
	node, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (buo *BusinessUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BusinessUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (buo *BusinessUpdateOne) defaults() {
	if _, ok := buo.mutation.UpdatedAt(); !ok && !buo.mutation.UpdatedAtCleared() {
		v := business.UpdateDefaultUpdatedAt()
		buo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (buo *BusinessUpdateOne) check() error {
	if v, ok := buo.mutation.TenantID(); ok {
		if err := business.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "Business.tenant_id": %w`, err)}
		}
	}
	if v, ok := buo.mutation.CreatedBy(); ok {
		if err := business.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "Business.created_by": %w`, err)}
		}
	}
	if v, ok := buo.mutation.UpdatedBy(); ok {
		if err := business.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "Business.updated_by": %w`, err)}
		}
	}
	return nil
}

func (buo *BusinessUpdateOne) sqlSave(ctx context.Context) (_node *Business, err error) {
	if err := buo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(business.Table, business.Columns, sqlgraph.NewFieldSpec(business.FieldID, field.TypeString))
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Business.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := buo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, business.FieldID)
		for _, f := range fields {
			if !business.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != business.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := buo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := buo.mutation.Code(); ok {
		_spec.SetField(business.FieldCode, field.TypeString, value)
	}
	if buo.mutation.CodeCleared() {
		_spec.ClearField(business.FieldCode, field.TypeString)
	}
	if value, ok := buo.mutation.Status(); ok {
		_spec.SetField(business.FieldStatus, field.TypeInt, value)
	}
	if value, ok := buo.mutation.AddedStatus(); ok {
		_spec.AddField(business.FieldStatus, field.TypeInt, value)
	}
	if value, ok := buo.mutation.FormCode(); ok {
		_spec.SetField(business.FieldFormCode, field.TypeString, value)
	}
	if value, ok := buo.mutation.FormVersion(); ok {
		_spec.SetField(business.FieldFormVersion, field.TypeString, value)
	}
	if buo.mutation.FormVersionCleared() {
		_spec.ClearField(business.FieldFormVersion, field.TypeString)
	}
	if value, ok := buo.mutation.FormConfig(); ok {
		_spec.SetField(business.FieldFormConfig, field.TypeJSON, value)
	}
	if buo.mutation.FormConfigCleared() {
		_spec.ClearField(business.FieldFormConfig, field.TypeJSON)
	}
	if value, ok := buo.mutation.FormPermissions(); ok {
		_spec.SetField(business.FieldFormPermissions, field.TypeJSON, value)
	}
	if buo.mutation.FormPermissionsCleared() {
		_spec.ClearField(business.FieldFormPermissions, field.TypeJSON)
	}
	if value, ok := buo.mutation.FieldPermissions(); ok {
		_spec.SetField(business.FieldFieldPermissions, field.TypeJSON, value)
	}
	if buo.mutation.FieldPermissionsCleared() {
		_spec.ClearField(business.FieldFieldPermissions, field.TypeJSON)
	}
	if value, ok := buo.mutation.ProcessID(); ok {
		_spec.SetField(business.FieldProcessID, field.TypeString, value)
	}
	if value, ok := buo.mutation.TemplateID(); ok {
		_spec.SetField(business.FieldTemplateID, field.TypeString, value)
	}
	if value, ok := buo.mutation.BusinessKey(); ok {
		_spec.SetField(business.FieldBusinessKey, field.TypeString, value)
	}
	if value, ok := buo.mutation.OriginData(); ok {
		_spec.SetField(business.FieldOriginData, field.TypeJSON, value)
	}
	if value, ok := buo.mutation.CurrentData(); ok {
		_spec.SetField(business.FieldCurrentData, field.TypeJSON, value)
	}
	if value, ok := buo.mutation.ChangeLogs(); ok {
		_spec.SetField(business.FieldChangeLogs, field.TypeJSON, value)
	}
	if value, ok := buo.mutation.AppendedChangeLogs(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, business.FieldChangeLogs, value)
		})
	}
	if buo.mutation.ChangeLogsCleared() {
		_spec.ClearField(business.FieldChangeLogs, field.TypeJSON)
	}
	if value, ok := buo.mutation.LastModified(); ok {
		_spec.SetField(business.FieldLastModified, field.TypeTime, value)
	}
	if buo.mutation.LastModifiedCleared() {
		_spec.ClearField(business.FieldLastModified, field.TypeTime)
	}
	if value, ok := buo.mutation.LastModifier(); ok {
		_spec.SetField(business.FieldLastModifier, field.TypeString, value)
	}
	if buo.mutation.LastModifierCleared() {
		_spec.ClearField(business.FieldLastModifier, field.TypeString)
	}
	if value, ok := buo.mutation.OperationLogs(); ok {
		_spec.SetField(business.FieldOperationLogs, field.TypeJSON, value)
	}
	if value, ok := buo.mutation.AppendedOperationLogs(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, business.FieldOperationLogs, value)
		})
	}
	if buo.mutation.OperationLogsCleared() {
		_spec.ClearField(business.FieldOperationLogs, field.TypeJSON)
	}
	if value, ok := buo.mutation.FlowStatus(); ok {
		_spec.SetField(business.FieldFlowStatus, field.TypeString, value)
	}
	if buo.mutation.FlowStatusCleared() {
		_spec.ClearField(business.FieldFlowStatus, field.TypeString)
	}
	if value, ok := buo.mutation.FlowVariables(); ok {
		_spec.SetField(business.FieldFlowVariables, field.TypeJSON, value)
	}
	if buo.mutation.FlowVariablesCleared() {
		_spec.ClearField(business.FieldFlowVariables, field.TypeJSON)
	}
	if value, ok := buo.mutation.IsDraft(); ok {
		_spec.SetField(business.FieldIsDraft, field.TypeBool, value)
	}
	if value, ok := buo.mutation.IsTerminated(); ok {
		_spec.SetField(business.FieldIsTerminated, field.TypeBool, value)
	}
	if value, ok := buo.mutation.IsSuspended(); ok {
		_spec.SetField(business.FieldIsSuspended, field.TypeBool, value)
	}
	if value, ok := buo.mutation.SuspendReason(); ok {
		_spec.SetField(business.FieldSuspendReason, field.TypeString, value)
	}
	if buo.mutation.SuspendReasonCleared() {
		_spec.ClearField(business.FieldSuspendReason, field.TypeString)
	}
	if value, ok := buo.mutation.BusinessTags(); ok {
		_spec.SetField(business.FieldBusinessTags, field.TypeJSON, value)
	}
	if value, ok := buo.mutation.AppendedBusinessTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, business.FieldBusinessTags, value)
		})
	}
	if buo.mutation.BusinessTagsCleared() {
		_spec.ClearField(business.FieldBusinessTags, field.TypeJSON)
	}
	if value, ok := buo.mutation.ModuleCode(); ok {
		_spec.SetField(business.FieldModuleCode, field.TypeString, value)
	}
	if value, ok := buo.mutation.Category(); ok {
		_spec.SetField(business.FieldCategory, field.TypeString, value)
	}
	if buo.mutation.CategoryCleared() {
		_spec.ClearField(business.FieldCategory, field.TypeString)
	}
	if value, ok := buo.mutation.Viewers(); ok {
		_spec.SetField(business.FieldViewers, field.TypeJSON, value)
	}
	if value, ok := buo.mutation.AppendedViewers(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, business.FieldViewers, value)
		})
	}
	if buo.mutation.ViewersCleared() {
		_spec.ClearField(business.FieldViewers, field.TypeJSON)
	}
	if value, ok := buo.mutation.Editors(); ok {
		_spec.SetField(business.FieldEditors, field.TypeJSON, value)
	}
	if value, ok := buo.mutation.AppendedEditors(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, business.FieldEditors, value)
		})
	}
	if buo.mutation.EditorsCleared() {
		_spec.ClearField(business.FieldEditors, field.TypeJSON)
	}
	if value, ok := buo.mutation.PermissionConfigs(); ok {
		_spec.SetField(business.FieldPermissionConfigs, field.TypeJSON, value)
	}
	if buo.mutation.PermissionConfigsCleared() {
		_spec.ClearField(business.FieldPermissionConfigs, field.TypeJSON)
	}
	if value, ok := buo.mutation.RoleConfigs(); ok {
		_spec.SetField(business.FieldRoleConfigs, field.TypeJSON, value)
	}
	if buo.mutation.RoleConfigsCleared() {
		_spec.ClearField(business.FieldRoleConfigs, field.TypeJSON)
	}
	if value, ok := buo.mutation.VisibleRange(); ok {
		_spec.SetField(business.FieldVisibleRange, field.TypeJSON, value)
	}
	if buo.mutation.VisibleRangeCleared() {
		_spec.ClearField(business.FieldVisibleRange, field.TypeJSON)
	}
	if value, ok := buo.mutation.Extras(); ok {
		_spec.SetField(business.FieldExtras, field.TypeJSON, value)
	}
	if buo.mutation.ExtrasCleared() {
		_spec.ClearField(business.FieldExtras, field.TypeJSON)
	}
	if value, ok := buo.mutation.TenantID(); ok {
		_spec.SetField(business.FieldTenantID, field.TypeString, value)
	}
	if buo.mutation.TenantIDCleared() {
		_spec.ClearField(business.FieldTenantID, field.TypeString)
	}
	if value, ok := buo.mutation.CreatedBy(); ok {
		_spec.SetField(business.FieldCreatedBy, field.TypeString, value)
	}
	if buo.mutation.CreatedByCleared() {
		_spec.ClearField(business.FieldCreatedBy, field.TypeString)
	}
	if value, ok := buo.mutation.UpdatedBy(); ok {
		_spec.SetField(business.FieldUpdatedBy, field.TypeString, value)
	}
	if buo.mutation.UpdatedByCleared() {
		_spec.ClearField(business.FieldUpdatedBy, field.TypeString)
	}
	if buo.mutation.CreatedAtCleared() {
		_spec.ClearField(business.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := buo.mutation.UpdatedAt(); ok {
		_spec.SetField(business.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := buo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(business.FieldUpdatedAt, field.TypeInt64, value)
	}
	if buo.mutation.UpdatedAtCleared() {
		_spec.ClearField(business.FieldUpdatedAt, field.TypeInt64)
	}
	_node = &Business{config: buo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{business.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	buo.mutation.done = true
	return _node, nil
}
