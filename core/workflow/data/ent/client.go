// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"ncobase/core/workflow/data/ent/migrate"

	"ncobase/core/workflow/data/ent/business"
	"ncobase/core/workflow/data/ent/delegation"
	"ncobase/core/workflow/data/ent/history"
	"ncobase/core/workflow/data/ent/node"
	"ncobase/core/workflow/data/ent/process"
	"ncobase/core/workflow/data/ent/processdesign"
	"ncobase/core/workflow/data/ent/rule"
	"ncobase/core/workflow/data/ent/task"
	"ncobase/core/workflow/data/ent/template"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Business is the client for interacting with the Business builders.
	Business *BusinessClient
	// Delegation is the client for interacting with the Delegation builders.
	Delegation *DelegationClient
	// History is the client for interacting with the History builders.
	History *HistoryClient
	// Node is the client for interacting with the Node builders.
	Node *NodeClient
	// Process is the client for interacting with the Process builders.
	Process *ProcessClient
	// ProcessDesign is the client for interacting with the ProcessDesign builders.
	ProcessDesign *ProcessDesignClient
	// Rule is the client for interacting with the Rule builders.
	Rule *RuleClient
	// Task is the client for interacting with the Task builders.
	Task *TaskClient
	// Template is the client for interacting with the Template builders.
	Template *TemplateClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Business = NewBusinessClient(c.config)
	c.Delegation = NewDelegationClient(c.config)
	c.History = NewHistoryClient(c.config)
	c.Node = NewNodeClient(c.config)
	c.Process = NewProcessClient(c.config)
	c.ProcessDesign = NewProcessDesignClient(c.config)
	c.Rule = NewRuleClient(c.config)
	c.Task = NewTaskClient(c.config)
	c.Template = NewTemplateClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:           ctx,
		config:        cfg,
		Business:      NewBusinessClient(cfg),
		Delegation:    NewDelegationClient(cfg),
		History:       NewHistoryClient(cfg),
		Node:          NewNodeClient(cfg),
		Process:       NewProcessClient(cfg),
		ProcessDesign: NewProcessDesignClient(cfg),
		Rule:          NewRuleClient(cfg),
		Task:          NewTaskClient(cfg),
		Template:      NewTemplateClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:           ctx,
		config:        cfg,
		Business:      NewBusinessClient(cfg),
		Delegation:    NewDelegationClient(cfg),
		History:       NewHistoryClient(cfg),
		Node:          NewNodeClient(cfg),
		Process:       NewProcessClient(cfg),
		ProcessDesign: NewProcessDesignClient(cfg),
		Rule:          NewRuleClient(cfg),
		Task:          NewTaskClient(cfg),
		Template:      NewTemplateClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Business.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.Business, c.Delegation, c.History, c.Node, c.Process, c.ProcessDesign, c.Rule,
		c.Task, c.Template,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.Business, c.Delegation, c.History, c.Node, c.Process, c.ProcessDesign, c.Rule,
		c.Task, c.Template,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *BusinessMutation:
		return c.Business.mutate(ctx, m)
	case *DelegationMutation:
		return c.Delegation.mutate(ctx, m)
	case *HistoryMutation:
		return c.History.mutate(ctx, m)
	case *NodeMutation:
		return c.Node.mutate(ctx, m)
	case *ProcessMutation:
		return c.Process.mutate(ctx, m)
	case *ProcessDesignMutation:
		return c.ProcessDesign.mutate(ctx, m)
	case *RuleMutation:
		return c.Rule.mutate(ctx, m)
	case *TaskMutation:
		return c.Task.mutate(ctx, m)
	case *TemplateMutation:
		return c.Template.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// BusinessClient is a client for the Business schema.
type BusinessClient struct {
	config
}

// NewBusinessClient returns a client for the Business from the given config.
func NewBusinessClient(c config) *BusinessClient {
	return &BusinessClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `business.Hooks(f(g(h())))`.
func (c *BusinessClient) Use(hooks ...Hook) {
	c.hooks.Business = append(c.hooks.Business, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `business.Intercept(f(g(h())))`.
func (c *BusinessClient) Intercept(interceptors ...Interceptor) {
	c.inters.Business = append(c.inters.Business, interceptors...)
}

// Create returns a builder for creating a Business entity.
func (c *BusinessClient) Create() *BusinessCreate {
	mutation := newBusinessMutation(c.config, OpCreate)
	return &BusinessCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Business entities.
func (c *BusinessClient) CreateBulk(builders ...*BusinessCreate) *BusinessCreateBulk {
	return &BusinessCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *BusinessClient) MapCreateBulk(slice any, setFunc func(*BusinessCreate, int)) *BusinessCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &BusinessCreateBulk{err: fmt.Errorf("calling to BusinessClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*BusinessCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &BusinessCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Business.
func (c *BusinessClient) Update() *BusinessUpdate {
	mutation := newBusinessMutation(c.config, OpUpdate)
	return &BusinessUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BusinessClient) UpdateOne(b *Business) *BusinessUpdateOne {
	mutation := newBusinessMutation(c.config, OpUpdateOne, withBusiness(b))
	return &BusinessUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BusinessClient) UpdateOneID(id string) *BusinessUpdateOne {
	mutation := newBusinessMutation(c.config, OpUpdateOne, withBusinessID(id))
	return &BusinessUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Business.
func (c *BusinessClient) Delete() *BusinessDelete {
	mutation := newBusinessMutation(c.config, OpDelete)
	return &BusinessDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BusinessClient) DeleteOne(b *Business) *BusinessDeleteOne {
	return c.DeleteOneID(b.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BusinessClient) DeleteOneID(id string) *BusinessDeleteOne {
	builder := c.Delete().Where(business.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BusinessDeleteOne{builder}
}

// Query returns a query builder for Business.
func (c *BusinessClient) Query() *BusinessQuery {
	return &BusinessQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBusiness},
		inters: c.Interceptors(),
	}
}

// Get returns a Business entity by its id.
func (c *BusinessClient) Get(ctx context.Context, id string) (*Business, error) {
	return c.Query().Where(business.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BusinessClient) GetX(ctx context.Context, id string) *Business {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *BusinessClient) Hooks() []Hook {
	return c.hooks.Business
}

// Interceptors returns the client interceptors.
func (c *BusinessClient) Interceptors() []Interceptor {
	return c.inters.Business
}

func (c *BusinessClient) mutate(ctx context.Context, m *BusinessMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BusinessCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BusinessUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BusinessUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BusinessDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Business mutation op: %q", m.Op())
	}
}

// DelegationClient is a client for the Delegation schema.
type DelegationClient struct {
	config
}

// NewDelegationClient returns a client for the Delegation from the given config.
func NewDelegationClient(c config) *DelegationClient {
	return &DelegationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `delegation.Hooks(f(g(h())))`.
func (c *DelegationClient) Use(hooks ...Hook) {
	c.hooks.Delegation = append(c.hooks.Delegation, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `delegation.Intercept(f(g(h())))`.
func (c *DelegationClient) Intercept(interceptors ...Interceptor) {
	c.inters.Delegation = append(c.inters.Delegation, interceptors...)
}

// Create returns a builder for creating a Delegation entity.
func (c *DelegationClient) Create() *DelegationCreate {
	mutation := newDelegationMutation(c.config, OpCreate)
	return &DelegationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Delegation entities.
func (c *DelegationClient) CreateBulk(builders ...*DelegationCreate) *DelegationCreateBulk {
	return &DelegationCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *DelegationClient) MapCreateBulk(slice any, setFunc func(*DelegationCreate, int)) *DelegationCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &DelegationCreateBulk{err: fmt.Errorf("calling to DelegationClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*DelegationCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &DelegationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Delegation.
func (c *DelegationClient) Update() *DelegationUpdate {
	mutation := newDelegationMutation(c.config, OpUpdate)
	return &DelegationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DelegationClient) UpdateOne(d *Delegation) *DelegationUpdateOne {
	mutation := newDelegationMutation(c.config, OpUpdateOne, withDelegation(d))
	return &DelegationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DelegationClient) UpdateOneID(id string) *DelegationUpdateOne {
	mutation := newDelegationMutation(c.config, OpUpdateOne, withDelegationID(id))
	return &DelegationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Delegation.
func (c *DelegationClient) Delete() *DelegationDelete {
	mutation := newDelegationMutation(c.config, OpDelete)
	return &DelegationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DelegationClient) DeleteOne(d *Delegation) *DelegationDeleteOne {
	return c.DeleteOneID(d.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DelegationClient) DeleteOneID(id string) *DelegationDeleteOne {
	builder := c.Delete().Where(delegation.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DelegationDeleteOne{builder}
}

// Query returns a query builder for Delegation.
func (c *DelegationClient) Query() *DelegationQuery {
	return &DelegationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDelegation},
		inters: c.Interceptors(),
	}
}

// Get returns a Delegation entity by its id.
func (c *DelegationClient) Get(ctx context.Context, id string) (*Delegation, error) {
	return c.Query().Where(delegation.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DelegationClient) GetX(ctx context.Context, id string) *Delegation {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *DelegationClient) Hooks() []Hook {
	return c.hooks.Delegation
}

// Interceptors returns the client interceptors.
func (c *DelegationClient) Interceptors() []Interceptor {
	return c.inters.Delegation
}

func (c *DelegationClient) mutate(ctx context.Context, m *DelegationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DelegationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DelegationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DelegationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DelegationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Delegation mutation op: %q", m.Op())
	}
}

// HistoryClient is a client for the History schema.
type HistoryClient struct {
	config
}

// NewHistoryClient returns a client for the History from the given config.
func NewHistoryClient(c config) *HistoryClient {
	return &HistoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `history.Hooks(f(g(h())))`.
func (c *HistoryClient) Use(hooks ...Hook) {
	c.hooks.History = append(c.hooks.History, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `history.Intercept(f(g(h())))`.
func (c *HistoryClient) Intercept(interceptors ...Interceptor) {
	c.inters.History = append(c.inters.History, interceptors...)
}

// Create returns a builder for creating a History entity.
func (c *HistoryClient) Create() *HistoryCreate {
	mutation := newHistoryMutation(c.config, OpCreate)
	return &HistoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of History entities.
func (c *HistoryClient) CreateBulk(builders ...*HistoryCreate) *HistoryCreateBulk {
	return &HistoryCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *HistoryClient) MapCreateBulk(slice any, setFunc func(*HistoryCreate, int)) *HistoryCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &HistoryCreateBulk{err: fmt.Errorf("calling to HistoryClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*HistoryCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &HistoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for History.
func (c *HistoryClient) Update() *HistoryUpdate {
	mutation := newHistoryMutation(c.config, OpUpdate)
	return &HistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *HistoryClient) UpdateOne(h *History) *HistoryUpdateOne {
	mutation := newHistoryMutation(c.config, OpUpdateOne, withHistory(h))
	return &HistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *HistoryClient) UpdateOneID(id string) *HistoryUpdateOne {
	mutation := newHistoryMutation(c.config, OpUpdateOne, withHistoryID(id))
	return &HistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for History.
func (c *HistoryClient) Delete() *HistoryDelete {
	mutation := newHistoryMutation(c.config, OpDelete)
	return &HistoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *HistoryClient) DeleteOne(h *History) *HistoryDeleteOne {
	return c.DeleteOneID(h.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *HistoryClient) DeleteOneID(id string) *HistoryDeleteOne {
	builder := c.Delete().Where(history.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &HistoryDeleteOne{builder}
}

// Query returns a query builder for History.
func (c *HistoryClient) Query() *HistoryQuery {
	return &HistoryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeHistory},
		inters: c.Interceptors(),
	}
}

// Get returns a History entity by its id.
func (c *HistoryClient) Get(ctx context.Context, id string) (*History, error) {
	return c.Query().Where(history.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *HistoryClient) GetX(ctx context.Context, id string) *History {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *HistoryClient) Hooks() []Hook {
	return c.hooks.History
}

// Interceptors returns the client interceptors.
func (c *HistoryClient) Interceptors() []Interceptor {
	return c.inters.History
}

func (c *HistoryClient) mutate(ctx context.Context, m *HistoryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&HistoryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&HistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&HistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&HistoryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown History mutation op: %q", m.Op())
	}
}

// NodeClient is a client for the Node schema.
type NodeClient struct {
	config
}

// NewNodeClient returns a client for the Node from the given config.
func NewNodeClient(c config) *NodeClient {
	return &NodeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `node.Hooks(f(g(h())))`.
func (c *NodeClient) Use(hooks ...Hook) {
	c.hooks.Node = append(c.hooks.Node, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `node.Intercept(f(g(h())))`.
func (c *NodeClient) Intercept(interceptors ...Interceptor) {
	c.inters.Node = append(c.inters.Node, interceptors...)
}

// Create returns a builder for creating a Node entity.
func (c *NodeClient) Create() *NodeCreate {
	mutation := newNodeMutation(c.config, OpCreate)
	return &NodeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Node entities.
func (c *NodeClient) CreateBulk(builders ...*NodeCreate) *NodeCreateBulk {
	return &NodeCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *NodeClient) MapCreateBulk(slice any, setFunc func(*NodeCreate, int)) *NodeCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &NodeCreateBulk{err: fmt.Errorf("calling to NodeClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*NodeCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &NodeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Node.
func (c *NodeClient) Update() *NodeUpdate {
	mutation := newNodeMutation(c.config, OpUpdate)
	return &NodeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NodeClient) UpdateOne(n *Node) *NodeUpdateOne {
	mutation := newNodeMutation(c.config, OpUpdateOne, withNode(n))
	return &NodeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NodeClient) UpdateOneID(id string) *NodeUpdateOne {
	mutation := newNodeMutation(c.config, OpUpdateOne, withNodeID(id))
	return &NodeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Node.
func (c *NodeClient) Delete() *NodeDelete {
	mutation := newNodeMutation(c.config, OpDelete)
	return &NodeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *NodeClient) DeleteOne(n *Node) *NodeDeleteOne {
	return c.DeleteOneID(n.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *NodeClient) DeleteOneID(id string) *NodeDeleteOne {
	builder := c.Delete().Where(node.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NodeDeleteOne{builder}
}

// Query returns a query builder for Node.
func (c *NodeClient) Query() *NodeQuery {
	return &NodeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeNode},
		inters: c.Interceptors(),
	}
}

// Get returns a Node entity by its id.
func (c *NodeClient) Get(ctx context.Context, id string) (*Node, error) {
	return c.Query().Where(node.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NodeClient) GetX(ctx context.Context, id string) *Node {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *NodeClient) Hooks() []Hook {
	return c.hooks.Node
}

// Interceptors returns the client interceptors.
func (c *NodeClient) Interceptors() []Interceptor {
	return c.inters.Node
}

func (c *NodeClient) mutate(ctx context.Context, m *NodeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&NodeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&NodeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&NodeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&NodeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Node mutation op: %q", m.Op())
	}
}

// ProcessClient is a client for the Process schema.
type ProcessClient struct {
	config
}

// NewProcessClient returns a client for the Process from the given config.
func NewProcessClient(c config) *ProcessClient {
	return &ProcessClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `process.Hooks(f(g(h())))`.
func (c *ProcessClient) Use(hooks ...Hook) {
	c.hooks.Process = append(c.hooks.Process, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `process.Intercept(f(g(h())))`.
func (c *ProcessClient) Intercept(interceptors ...Interceptor) {
	c.inters.Process = append(c.inters.Process, interceptors...)
}

// Create returns a builder for creating a Process entity.
func (c *ProcessClient) Create() *ProcessCreate {
	mutation := newProcessMutation(c.config, OpCreate)
	return &ProcessCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Process entities.
func (c *ProcessClient) CreateBulk(builders ...*ProcessCreate) *ProcessCreateBulk {
	return &ProcessCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ProcessClient) MapCreateBulk(slice any, setFunc func(*ProcessCreate, int)) *ProcessCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ProcessCreateBulk{err: fmt.Errorf("calling to ProcessClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ProcessCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ProcessCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Process.
func (c *ProcessClient) Update() *ProcessUpdate {
	mutation := newProcessMutation(c.config, OpUpdate)
	return &ProcessUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProcessClient) UpdateOne(pr *Process) *ProcessUpdateOne {
	mutation := newProcessMutation(c.config, OpUpdateOne, withProcess(pr))
	return &ProcessUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProcessClient) UpdateOneID(id string) *ProcessUpdateOne {
	mutation := newProcessMutation(c.config, OpUpdateOne, withProcessID(id))
	return &ProcessUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Process.
func (c *ProcessClient) Delete() *ProcessDelete {
	mutation := newProcessMutation(c.config, OpDelete)
	return &ProcessDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ProcessClient) DeleteOne(pr *Process) *ProcessDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ProcessClient) DeleteOneID(id string) *ProcessDeleteOne {
	builder := c.Delete().Where(process.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProcessDeleteOne{builder}
}

// Query returns a query builder for Process.
func (c *ProcessClient) Query() *ProcessQuery {
	return &ProcessQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeProcess},
		inters: c.Interceptors(),
	}
}

// Get returns a Process entity by its id.
func (c *ProcessClient) Get(ctx context.Context, id string) (*Process, error) {
	return c.Query().Where(process.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProcessClient) GetX(ctx context.Context, id string) *Process {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ProcessClient) Hooks() []Hook {
	return c.hooks.Process
}

// Interceptors returns the client interceptors.
func (c *ProcessClient) Interceptors() []Interceptor {
	return c.inters.Process
}

func (c *ProcessClient) mutate(ctx context.Context, m *ProcessMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ProcessCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ProcessUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ProcessUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ProcessDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Process mutation op: %q", m.Op())
	}
}

// ProcessDesignClient is a client for the ProcessDesign schema.
type ProcessDesignClient struct {
	config
}

// NewProcessDesignClient returns a client for the ProcessDesign from the given config.
func NewProcessDesignClient(c config) *ProcessDesignClient {
	return &ProcessDesignClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `processdesign.Hooks(f(g(h())))`.
func (c *ProcessDesignClient) Use(hooks ...Hook) {
	c.hooks.ProcessDesign = append(c.hooks.ProcessDesign, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `processdesign.Intercept(f(g(h())))`.
func (c *ProcessDesignClient) Intercept(interceptors ...Interceptor) {
	c.inters.ProcessDesign = append(c.inters.ProcessDesign, interceptors...)
}

// Create returns a builder for creating a ProcessDesign entity.
func (c *ProcessDesignClient) Create() *ProcessDesignCreate {
	mutation := newProcessDesignMutation(c.config, OpCreate)
	return &ProcessDesignCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProcessDesign entities.
func (c *ProcessDesignClient) CreateBulk(builders ...*ProcessDesignCreate) *ProcessDesignCreateBulk {
	return &ProcessDesignCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ProcessDesignClient) MapCreateBulk(slice any, setFunc func(*ProcessDesignCreate, int)) *ProcessDesignCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ProcessDesignCreateBulk{err: fmt.Errorf("calling to ProcessDesignClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ProcessDesignCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ProcessDesignCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProcessDesign.
func (c *ProcessDesignClient) Update() *ProcessDesignUpdate {
	mutation := newProcessDesignMutation(c.config, OpUpdate)
	return &ProcessDesignUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProcessDesignClient) UpdateOne(pd *ProcessDesign) *ProcessDesignUpdateOne {
	mutation := newProcessDesignMutation(c.config, OpUpdateOne, withProcessDesign(pd))
	return &ProcessDesignUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProcessDesignClient) UpdateOneID(id string) *ProcessDesignUpdateOne {
	mutation := newProcessDesignMutation(c.config, OpUpdateOne, withProcessDesignID(id))
	return &ProcessDesignUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProcessDesign.
func (c *ProcessDesignClient) Delete() *ProcessDesignDelete {
	mutation := newProcessDesignMutation(c.config, OpDelete)
	return &ProcessDesignDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ProcessDesignClient) DeleteOne(pd *ProcessDesign) *ProcessDesignDeleteOne {
	return c.DeleteOneID(pd.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ProcessDesignClient) DeleteOneID(id string) *ProcessDesignDeleteOne {
	builder := c.Delete().Where(processdesign.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProcessDesignDeleteOne{builder}
}

// Query returns a query builder for ProcessDesign.
func (c *ProcessDesignClient) Query() *ProcessDesignQuery {
	return &ProcessDesignQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeProcessDesign},
		inters: c.Interceptors(),
	}
}

// Get returns a ProcessDesign entity by its id.
func (c *ProcessDesignClient) Get(ctx context.Context, id string) (*ProcessDesign, error) {
	return c.Query().Where(processdesign.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProcessDesignClient) GetX(ctx context.Context, id string) *ProcessDesign {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ProcessDesignClient) Hooks() []Hook {
	return c.hooks.ProcessDesign
}

// Interceptors returns the client interceptors.
func (c *ProcessDesignClient) Interceptors() []Interceptor {
	return c.inters.ProcessDesign
}

func (c *ProcessDesignClient) mutate(ctx context.Context, m *ProcessDesignMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ProcessDesignCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ProcessDesignUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ProcessDesignUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ProcessDesignDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ProcessDesign mutation op: %q", m.Op())
	}
}

// RuleClient is a client for the Rule schema.
type RuleClient struct {
	config
}

// NewRuleClient returns a client for the Rule from the given config.
func NewRuleClient(c config) *RuleClient {
	return &RuleClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `rule.Hooks(f(g(h())))`.
func (c *RuleClient) Use(hooks ...Hook) {
	c.hooks.Rule = append(c.hooks.Rule, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `rule.Intercept(f(g(h())))`.
func (c *RuleClient) Intercept(interceptors ...Interceptor) {
	c.inters.Rule = append(c.inters.Rule, interceptors...)
}

// Create returns a builder for creating a Rule entity.
func (c *RuleClient) Create() *RuleCreate {
	mutation := newRuleMutation(c.config, OpCreate)
	return &RuleCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Rule entities.
func (c *RuleClient) CreateBulk(builders ...*RuleCreate) *RuleCreateBulk {
	return &RuleCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *RuleClient) MapCreateBulk(slice any, setFunc func(*RuleCreate, int)) *RuleCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &RuleCreateBulk{err: fmt.Errorf("calling to RuleClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*RuleCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &RuleCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Rule.
func (c *RuleClient) Update() *RuleUpdate {
	mutation := newRuleMutation(c.config, OpUpdate)
	return &RuleUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RuleClient) UpdateOne(r *Rule) *RuleUpdateOne {
	mutation := newRuleMutation(c.config, OpUpdateOne, withRule(r))
	return &RuleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RuleClient) UpdateOneID(id string) *RuleUpdateOne {
	mutation := newRuleMutation(c.config, OpUpdateOne, withRuleID(id))
	return &RuleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Rule.
func (c *RuleClient) Delete() *RuleDelete {
	mutation := newRuleMutation(c.config, OpDelete)
	return &RuleDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RuleClient) DeleteOne(r *Rule) *RuleDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RuleClient) DeleteOneID(id string) *RuleDeleteOne {
	builder := c.Delete().Where(rule.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RuleDeleteOne{builder}
}

// Query returns a query builder for Rule.
func (c *RuleClient) Query() *RuleQuery {
	return &RuleQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRule},
		inters: c.Interceptors(),
	}
}

// Get returns a Rule entity by its id.
func (c *RuleClient) Get(ctx context.Context, id string) (*Rule, error) {
	return c.Query().Where(rule.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RuleClient) GetX(ctx context.Context, id string) *Rule {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *RuleClient) Hooks() []Hook {
	return c.hooks.Rule
}

// Interceptors returns the client interceptors.
func (c *RuleClient) Interceptors() []Interceptor {
	return c.inters.Rule
}

func (c *RuleClient) mutate(ctx context.Context, m *RuleMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RuleCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RuleUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RuleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RuleDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Rule mutation op: %q", m.Op())
	}
}

// TaskClient is a client for the Task schema.
type TaskClient struct {
	config
}

// NewTaskClient returns a client for the Task from the given config.
func NewTaskClient(c config) *TaskClient {
	return &TaskClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `task.Hooks(f(g(h())))`.
func (c *TaskClient) Use(hooks ...Hook) {
	c.hooks.Task = append(c.hooks.Task, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `task.Intercept(f(g(h())))`.
func (c *TaskClient) Intercept(interceptors ...Interceptor) {
	c.inters.Task = append(c.inters.Task, interceptors...)
}

// Create returns a builder for creating a Task entity.
func (c *TaskClient) Create() *TaskCreate {
	mutation := newTaskMutation(c.config, OpCreate)
	return &TaskCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Task entities.
func (c *TaskClient) CreateBulk(builders ...*TaskCreate) *TaskCreateBulk {
	return &TaskCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TaskClient) MapCreateBulk(slice any, setFunc func(*TaskCreate, int)) *TaskCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TaskCreateBulk{err: fmt.Errorf("calling to TaskClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TaskCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TaskCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Task.
func (c *TaskClient) Update() *TaskUpdate {
	mutation := newTaskMutation(c.config, OpUpdate)
	return &TaskUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TaskClient) UpdateOne(t *Task) *TaskUpdateOne {
	mutation := newTaskMutation(c.config, OpUpdateOne, withTask(t))
	return &TaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TaskClient) UpdateOneID(id string) *TaskUpdateOne {
	mutation := newTaskMutation(c.config, OpUpdateOne, withTaskID(id))
	return &TaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Task.
func (c *TaskClient) Delete() *TaskDelete {
	mutation := newTaskMutation(c.config, OpDelete)
	return &TaskDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TaskClient) DeleteOne(t *Task) *TaskDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TaskClient) DeleteOneID(id string) *TaskDeleteOne {
	builder := c.Delete().Where(task.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TaskDeleteOne{builder}
}

// Query returns a query builder for Task.
func (c *TaskClient) Query() *TaskQuery {
	return &TaskQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTask},
		inters: c.Interceptors(),
	}
}

// Get returns a Task entity by its id.
func (c *TaskClient) Get(ctx context.Context, id string) (*Task, error) {
	return c.Query().Where(task.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TaskClient) GetX(ctx context.Context, id string) *Task {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TaskClient) Hooks() []Hook {
	return c.hooks.Task
}

// Interceptors returns the client interceptors.
func (c *TaskClient) Interceptors() []Interceptor {
	return c.inters.Task
}

func (c *TaskClient) mutate(ctx context.Context, m *TaskMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TaskCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TaskUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TaskDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Task mutation op: %q", m.Op())
	}
}

// TemplateClient is a client for the Template schema.
type TemplateClient struct {
	config
}

// NewTemplateClient returns a client for the Template from the given config.
func NewTemplateClient(c config) *TemplateClient {
	return &TemplateClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `template.Hooks(f(g(h())))`.
func (c *TemplateClient) Use(hooks ...Hook) {
	c.hooks.Template = append(c.hooks.Template, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `template.Intercept(f(g(h())))`.
func (c *TemplateClient) Intercept(interceptors ...Interceptor) {
	c.inters.Template = append(c.inters.Template, interceptors...)
}

// Create returns a builder for creating a Template entity.
func (c *TemplateClient) Create() *TemplateCreate {
	mutation := newTemplateMutation(c.config, OpCreate)
	return &TemplateCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Template entities.
func (c *TemplateClient) CreateBulk(builders ...*TemplateCreate) *TemplateCreateBulk {
	return &TemplateCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TemplateClient) MapCreateBulk(slice any, setFunc func(*TemplateCreate, int)) *TemplateCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TemplateCreateBulk{err: fmt.Errorf("calling to TemplateClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TemplateCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TemplateCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Template.
func (c *TemplateClient) Update() *TemplateUpdate {
	mutation := newTemplateMutation(c.config, OpUpdate)
	return &TemplateUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TemplateClient) UpdateOne(t *Template) *TemplateUpdateOne {
	mutation := newTemplateMutation(c.config, OpUpdateOne, withTemplate(t))
	return &TemplateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TemplateClient) UpdateOneID(id string) *TemplateUpdateOne {
	mutation := newTemplateMutation(c.config, OpUpdateOne, withTemplateID(id))
	return &TemplateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Template.
func (c *TemplateClient) Delete() *TemplateDelete {
	mutation := newTemplateMutation(c.config, OpDelete)
	return &TemplateDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TemplateClient) DeleteOne(t *Template) *TemplateDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TemplateClient) DeleteOneID(id string) *TemplateDeleteOne {
	builder := c.Delete().Where(template.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TemplateDeleteOne{builder}
}

// Query returns a query builder for Template.
func (c *TemplateClient) Query() *TemplateQuery {
	return &TemplateQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTemplate},
		inters: c.Interceptors(),
	}
}

// Get returns a Template entity by its id.
func (c *TemplateClient) Get(ctx context.Context, id string) (*Template, error) {
	return c.Query().Where(template.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TemplateClient) GetX(ctx context.Context, id string) *Template {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TemplateClient) Hooks() []Hook {
	return c.hooks.Template
}

// Interceptors returns the client interceptors.
func (c *TemplateClient) Interceptors() []Interceptor {
	return c.inters.Template
}

func (c *TemplateClient) mutate(ctx context.Context, m *TemplateMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TemplateCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TemplateUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TemplateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TemplateDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Template mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Business, Delegation, History, Node, Process, ProcessDesign, Rule, Task,
		Template []ent.Hook
	}
	inters struct {
		Business, Delegation, History, Node, Process, ProcessDesign, Rule, Task,
		Template []ent.Interceptor
	}
)
