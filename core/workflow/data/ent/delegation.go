// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"ncobase/core/workflow/data/ent/delegation"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Delegation is the model entity for the Delegation schema.
type Delegation struct {
	config `json:"-"`
	// ID of the ent.
	// primary key
	ID string `json:"id,omitempty"`
	// Status, text status
	Status string `json:"status,omitempty"`
	// Extend properties
	Extras map[string]interface{} `json:"extras,omitempty"`
	// tenant id
	TenantID string `json:"tenant_id,omitempty"`
	// id of the creator
	CreatedBy string `json:"created_by,omitempty"`
	// id of the last updater
	UpdatedBy string `json:"updated_by,omitempty"`
	// created at
	CreatedAt int64 `json:"created_at,omitempty"`
	// updated at
	UpdatedAt int64 `json:"updated_at,omitempty"`
	// User ID who delegates
	DelegatorID string `json:"delegator_id,omitempty"`
	// User ID to delegate to
	DelegateeID string `json:"delegatee_id,omitempty"`
	// Template ID if specific
	TemplateID string `json:"template_id,omitempty"`
	// Node type if specific
	NodeType string `json:"node_type,omitempty"`
	// Delegation conditions
	Conditions []string `json:"conditions,omitempty"`
	// Delegation start time
	StartTime int64 `json:"start_time,omitempty"`
	// Delegation end time
	EndTime int64 `json:"end_time,omitempty"`
	// Whether delegation is enabled
	IsEnabled    bool `json:"is_enabled,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Delegation) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case delegation.FieldExtras, delegation.FieldConditions:
			values[i] = new([]byte)
		case delegation.FieldIsEnabled:
			values[i] = new(sql.NullBool)
		case delegation.FieldCreatedAt, delegation.FieldUpdatedAt, delegation.FieldStartTime, delegation.FieldEndTime:
			values[i] = new(sql.NullInt64)
		case delegation.FieldID, delegation.FieldStatus, delegation.FieldTenantID, delegation.FieldCreatedBy, delegation.FieldUpdatedBy, delegation.FieldDelegatorID, delegation.FieldDelegateeID, delegation.FieldTemplateID, delegation.FieldNodeType:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Delegation fields.
func (d *Delegation) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case delegation.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				d.ID = value.String
			}
		case delegation.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				d.Status = value.String
			}
		case delegation.FieldExtras:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field extras", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &d.Extras); err != nil {
					return fmt.Errorf("unmarshal field extras: %w", err)
				}
			}
		case delegation.FieldTenantID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				d.TenantID = value.String
			}
		case delegation.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				d.CreatedBy = value.String
			}
		case delegation.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				d.UpdatedBy = value.String
			}
		case delegation.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				d.CreatedAt = value.Int64
			}
		case delegation.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				d.UpdatedAt = value.Int64
			}
		case delegation.FieldDelegatorID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field delegator_id", values[i])
			} else if value.Valid {
				d.DelegatorID = value.String
			}
		case delegation.FieldDelegateeID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field delegatee_id", values[i])
			} else if value.Valid {
				d.DelegateeID = value.String
			}
		case delegation.FieldTemplateID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field template_id", values[i])
			} else if value.Valid {
				d.TemplateID = value.String
			}
		case delegation.FieldNodeType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field node_type", values[i])
			} else if value.Valid {
				d.NodeType = value.String
			}
		case delegation.FieldConditions:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field conditions", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &d.Conditions); err != nil {
					return fmt.Errorf("unmarshal field conditions: %w", err)
				}
			}
		case delegation.FieldStartTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field start_time", values[i])
			} else if value.Valid {
				d.StartTime = value.Int64
			}
		case delegation.FieldEndTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field end_time", values[i])
			} else if value.Valid {
				d.EndTime = value.Int64
			}
		case delegation.FieldIsEnabled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_enabled", values[i])
			} else if value.Valid {
				d.IsEnabled = value.Bool
			}
		default:
			d.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Delegation.
// This includes values selected through modifiers, order, etc.
func (d *Delegation) Value(name string) (ent.Value, error) {
	return d.selectValues.Get(name)
}

// Update returns a builder for updating this Delegation.
// Note that you need to call Delegation.Unwrap() before calling this method if this Delegation
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Delegation) Update() *DelegationUpdateOne {
	return NewDelegationClient(d.config).UpdateOne(d)
}

// Unwrap unwraps the Delegation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (d *Delegation) Unwrap() *Delegation {
	_tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: Delegation is not a transactional entity")
	}
	d.config.driver = _tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Delegation) String() string {
	var builder strings.Builder
	builder.WriteString("Delegation(")
	builder.WriteString(fmt.Sprintf("id=%v, ", d.ID))
	builder.WriteString("status=")
	builder.WriteString(d.Status)
	builder.WriteString(", ")
	builder.WriteString("extras=")
	builder.WriteString(fmt.Sprintf("%v", d.Extras))
	builder.WriteString(", ")
	builder.WriteString("tenant_id=")
	builder.WriteString(d.TenantID)
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(d.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(d.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", d.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", d.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("delegator_id=")
	builder.WriteString(d.DelegatorID)
	builder.WriteString(", ")
	builder.WriteString("delegatee_id=")
	builder.WriteString(d.DelegateeID)
	builder.WriteString(", ")
	builder.WriteString("template_id=")
	builder.WriteString(d.TemplateID)
	builder.WriteString(", ")
	builder.WriteString("node_type=")
	builder.WriteString(d.NodeType)
	builder.WriteString(", ")
	builder.WriteString("conditions=")
	builder.WriteString(fmt.Sprintf("%v", d.Conditions))
	builder.WriteString(", ")
	builder.WriteString("start_time=")
	builder.WriteString(fmt.Sprintf("%v", d.StartTime))
	builder.WriteString(", ")
	builder.WriteString("end_time=")
	builder.WriteString(fmt.Sprintf("%v", d.EndTime))
	builder.WriteString(", ")
	builder.WriteString("is_enabled=")
	builder.WriteString(fmt.Sprintf("%v", d.IsEnabled))
	builder.WriteByte(')')
	return builder.String()
}

// Delegations is a parsable slice of Delegation.
type Delegations []*Delegation
