// Code generated by ent, DO NOT EDIT.

package delegation

import (
	"ncobase/core/workflow/data/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Delegation {
	return predicate.Delegation(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Delegation {
	return predicate.Delegation(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Delegation {
	return predicate.Delegation(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Delegation {
	return predicate.Delegation(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Delegation {
	return predicate.Delegation(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Delegation {
	return predicate.Delegation(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Delegation {
	return predicate.Delegation(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Delegation {
	return predicate.Delegation(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Delegation {
	return predicate.Delegation(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Delegation {
	return predicate.Delegation(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Delegation {
	return predicate.Delegation(sql.FieldContainsFold(FieldID, id))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.Delegation {
	return predicate.Delegation(sql.FieldEQ(FieldStatus, v))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v string) predicate.Delegation {
	return predicate.Delegation(sql.FieldEQ(FieldTenantID, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v string) predicate.Delegation {
	return predicate.Delegation(sql.FieldEQ(FieldCreatedBy, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v string) predicate.Delegation {
	return predicate.Delegation(sql.FieldEQ(FieldUpdatedBy, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v int64) predicate.Delegation {
	return predicate.Delegation(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v int64) predicate.Delegation {
	return predicate.Delegation(sql.FieldEQ(FieldUpdatedAt, v))
}

// DelegatorID applies equality check predicate on the "delegator_id" field. It's identical to DelegatorIDEQ.
func DelegatorID(v string) predicate.Delegation {
	return predicate.Delegation(sql.FieldEQ(FieldDelegatorID, v))
}

// DelegateeID applies equality check predicate on the "delegatee_id" field. It's identical to DelegateeIDEQ.
func DelegateeID(v string) predicate.Delegation {
	return predicate.Delegation(sql.FieldEQ(FieldDelegateeID, v))
}

// TemplateID applies equality check predicate on the "template_id" field. It's identical to TemplateIDEQ.
func TemplateID(v string) predicate.Delegation {
	return predicate.Delegation(sql.FieldEQ(FieldTemplateID, v))
}

// NodeType applies equality check predicate on the "node_type" field. It's identical to NodeTypeEQ.
func NodeType(v string) predicate.Delegation {
	return predicate.Delegation(sql.FieldEQ(FieldNodeType, v))
}

// StartTime applies equality check predicate on the "start_time" field. It's identical to StartTimeEQ.
func StartTime(v int64) predicate.Delegation {
	return predicate.Delegation(sql.FieldEQ(FieldStartTime, v))
}

// EndTime applies equality check predicate on the "end_time" field. It's identical to EndTimeEQ.
func EndTime(v int64) predicate.Delegation {
	return predicate.Delegation(sql.FieldEQ(FieldEndTime, v))
}

// IsEnabled applies equality check predicate on the "is_enabled" field. It's identical to IsEnabledEQ.
func IsEnabled(v bool) predicate.Delegation {
	return predicate.Delegation(sql.FieldEQ(FieldIsEnabled, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.Delegation {
	return predicate.Delegation(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.Delegation {
	return predicate.Delegation(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.Delegation {
	return predicate.Delegation(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.Delegation {
	return predicate.Delegation(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.Delegation {
	return predicate.Delegation(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.Delegation {
	return predicate.Delegation(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.Delegation {
	return predicate.Delegation(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.Delegation {
	return predicate.Delegation(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.Delegation {
	return predicate.Delegation(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.Delegation {
	return predicate.Delegation(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.Delegation {
	return predicate.Delegation(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusIsNil applies the IsNil predicate on the "status" field.
func StatusIsNil() predicate.Delegation {
	return predicate.Delegation(sql.FieldIsNull(FieldStatus))
}

// StatusNotNil applies the NotNil predicate on the "status" field.
func StatusNotNil() predicate.Delegation {
	return predicate.Delegation(sql.FieldNotNull(FieldStatus))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.Delegation {
	return predicate.Delegation(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.Delegation {
	return predicate.Delegation(sql.FieldContainsFold(FieldStatus, v))
}

// ExtrasIsNil applies the IsNil predicate on the "extras" field.
func ExtrasIsNil() predicate.Delegation {
	return predicate.Delegation(sql.FieldIsNull(FieldExtras))
}

// ExtrasNotNil applies the NotNil predicate on the "extras" field.
func ExtrasNotNil() predicate.Delegation {
	return predicate.Delegation(sql.FieldNotNull(FieldExtras))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v string) predicate.Delegation {
	return predicate.Delegation(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v string) predicate.Delegation {
	return predicate.Delegation(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...string) predicate.Delegation {
	return predicate.Delegation(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...string) predicate.Delegation {
	return predicate.Delegation(sql.FieldNotIn(FieldTenantID, vs...))
}

// TenantIDGT applies the GT predicate on the "tenant_id" field.
func TenantIDGT(v string) predicate.Delegation {
	return predicate.Delegation(sql.FieldGT(FieldTenantID, v))
}

// TenantIDGTE applies the GTE predicate on the "tenant_id" field.
func TenantIDGTE(v string) predicate.Delegation {
	return predicate.Delegation(sql.FieldGTE(FieldTenantID, v))
}

// TenantIDLT applies the LT predicate on the "tenant_id" field.
func TenantIDLT(v string) predicate.Delegation {
	return predicate.Delegation(sql.FieldLT(FieldTenantID, v))
}

// TenantIDLTE applies the LTE predicate on the "tenant_id" field.
func TenantIDLTE(v string) predicate.Delegation {
	return predicate.Delegation(sql.FieldLTE(FieldTenantID, v))
}

// TenantIDContains applies the Contains predicate on the "tenant_id" field.
func TenantIDContains(v string) predicate.Delegation {
	return predicate.Delegation(sql.FieldContains(FieldTenantID, v))
}

// TenantIDHasPrefix applies the HasPrefix predicate on the "tenant_id" field.
func TenantIDHasPrefix(v string) predicate.Delegation {
	return predicate.Delegation(sql.FieldHasPrefix(FieldTenantID, v))
}

// TenantIDHasSuffix applies the HasSuffix predicate on the "tenant_id" field.
func TenantIDHasSuffix(v string) predicate.Delegation {
	return predicate.Delegation(sql.FieldHasSuffix(FieldTenantID, v))
}

// TenantIDIsNil applies the IsNil predicate on the "tenant_id" field.
func TenantIDIsNil() predicate.Delegation {
	return predicate.Delegation(sql.FieldIsNull(FieldTenantID))
}

// TenantIDNotNil applies the NotNil predicate on the "tenant_id" field.
func TenantIDNotNil() predicate.Delegation {
	return predicate.Delegation(sql.FieldNotNull(FieldTenantID))
}

// TenantIDEqualFold applies the EqualFold predicate on the "tenant_id" field.
func TenantIDEqualFold(v string) predicate.Delegation {
	return predicate.Delegation(sql.FieldEqualFold(FieldTenantID, v))
}

// TenantIDContainsFold applies the ContainsFold predicate on the "tenant_id" field.
func TenantIDContainsFold(v string) predicate.Delegation {
	return predicate.Delegation(sql.FieldContainsFold(FieldTenantID, v))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v string) predicate.Delegation {
	return predicate.Delegation(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v string) predicate.Delegation {
	return predicate.Delegation(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...string) predicate.Delegation {
	return predicate.Delegation(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...string) predicate.Delegation {
	return predicate.Delegation(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v string) predicate.Delegation {
	return predicate.Delegation(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v string) predicate.Delegation {
	return predicate.Delegation(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v string) predicate.Delegation {
	return predicate.Delegation(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v string) predicate.Delegation {
	return predicate.Delegation(sql.FieldLTE(FieldCreatedBy, v))
}

// CreatedByContains applies the Contains predicate on the "created_by" field.
func CreatedByContains(v string) predicate.Delegation {
	return predicate.Delegation(sql.FieldContains(FieldCreatedBy, v))
}

// CreatedByHasPrefix applies the HasPrefix predicate on the "created_by" field.
func CreatedByHasPrefix(v string) predicate.Delegation {
	return predicate.Delegation(sql.FieldHasPrefix(FieldCreatedBy, v))
}

// CreatedByHasSuffix applies the HasSuffix predicate on the "created_by" field.
func CreatedByHasSuffix(v string) predicate.Delegation {
	return predicate.Delegation(sql.FieldHasSuffix(FieldCreatedBy, v))
}

// CreatedByIsNil applies the IsNil predicate on the "created_by" field.
func CreatedByIsNil() predicate.Delegation {
	return predicate.Delegation(sql.FieldIsNull(FieldCreatedBy))
}

// CreatedByNotNil applies the NotNil predicate on the "created_by" field.
func CreatedByNotNil() predicate.Delegation {
	return predicate.Delegation(sql.FieldNotNull(FieldCreatedBy))
}

// CreatedByEqualFold applies the EqualFold predicate on the "created_by" field.
func CreatedByEqualFold(v string) predicate.Delegation {
	return predicate.Delegation(sql.FieldEqualFold(FieldCreatedBy, v))
}

// CreatedByContainsFold applies the ContainsFold predicate on the "created_by" field.
func CreatedByContainsFold(v string) predicate.Delegation {
	return predicate.Delegation(sql.FieldContainsFold(FieldCreatedBy, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v string) predicate.Delegation {
	return predicate.Delegation(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v string) predicate.Delegation {
	return predicate.Delegation(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...string) predicate.Delegation {
	return predicate.Delegation(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...string) predicate.Delegation {
	return predicate.Delegation(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v string) predicate.Delegation {
	return predicate.Delegation(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v string) predicate.Delegation {
	return predicate.Delegation(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v string) predicate.Delegation {
	return predicate.Delegation(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v string) predicate.Delegation {
	return predicate.Delegation(sql.FieldLTE(FieldUpdatedBy, v))
}

// UpdatedByContains applies the Contains predicate on the "updated_by" field.
func UpdatedByContains(v string) predicate.Delegation {
	return predicate.Delegation(sql.FieldContains(FieldUpdatedBy, v))
}

// UpdatedByHasPrefix applies the HasPrefix predicate on the "updated_by" field.
func UpdatedByHasPrefix(v string) predicate.Delegation {
	return predicate.Delegation(sql.FieldHasPrefix(FieldUpdatedBy, v))
}

// UpdatedByHasSuffix applies the HasSuffix predicate on the "updated_by" field.
func UpdatedByHasSuffix(v string) predicate.Delegation {
	return predicate.Delegation(sql.FieldHasSuffix(FieldUpdatedBy, v))
}

// UpdatedByIsNil applies the IsNil predicate on the "updated_by" field.
func UpdatedByIsNil() predicate.Delegation {
	return predicate.Delegation(sql.FieldIsNull(FieldUpdatedBy))
}

// UpdatedByNotNil applies the NotNil predicate on the "updated_by" field.
func UpdatedByNotNil() predicate.Delegation {
	return predicate.Delegation(sql.FieldNotNull(FieldUpdatedBy))
}

// UpdatedByEqualFold applies the EqualFold predicate on the "updated_by" field.
func UpdatedByEqualFold(v string) predicate.Delegation {
	return predicate.Delegation(sql.FieldEqualFold(FieldUpdatedBy, v))
}

// UpdatedByContainsFold applies the ContainsFold predicate on the "updated_by" field.
func UpdatedByContainsFold(v string) predicate.Delegation {
	return predicate.Delegation(sql.FieldContainsFold(FieldUpdatedBy, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v int64) predicate.Delegation {
	return predicate.Delegation(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v int64) predicate.Delegation {
	return predicate.Delegation(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...int64) predicate.Delegation {
	return predicate.Delegation(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...int64) predicate.Delegation {
	return predicate.Delegation(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v int64) predicate.Delegation {
	return predicate.Delegation(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v int64) predicate.Delegation {
	return predicate.Delegation(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v int64) predicate.Delegation {
	return predicate.Delegation(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v int64) predicate.Delegation {
	return predicate.Delegation(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.Delegation {
	return predicate.Delegation(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.Delegation {
	return predicate.Delegation(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v int64) predicate.Delegation {
	return predicate.Delegation(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v int64) predicate.Delegation {
	return predicate.Delegation(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...int64) predicate.Delegation {
	return predicate.Delegation(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...int64) predicate.Delegation {
	return predicate.Delegation(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v int64) predicate.Delegation {
	return predicate.Delegation(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v int64) predicate.Delegation {
	return predicate.Delegation(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v int64) predicate.Delegation {
	return predicate.Delegation(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v int64) predicate.Delegation {
	return predicate.Delegation(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.Delegation {
	return predicate.Delegation(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.Delegation {
	return predicate.Delegation(sql.FieldNotNull(FieldUpdatedAt))
}

// DelegatorIDEQ applies the EQ predicate on the "delegator_id" field.
func DelegatorIDEQ(v string) predicate.Delegation {
	return predicate.Delegation(sql.FieldEQ(FieldDelegatorID, v))
}

// DelegatorIDNEQ applies the NEQ predicate on the "delegator_id" field.
func DelegatorIDNEQ(v string) predicate.Delegation {
	return predicate.Delegation(sql.FieldNEQ(FieldDelegatorID, v))
}

// DelegatorIDIn applies the In predicate on the "delegator_id" field.
func DelegatorIDIn(vs ...string) predicate.Delegation {
	return predicate.Delegation(sql.FieldIn(FieldDelegatorID, vs...))
}

// DelegatorIDNotIn applies the NotIn predicate on the "delegator_id" field.
func DelegatorIDNotIn(vs ...string) predicate.Delegation {
	return predicate.Delegation(sql.FieldNotIn(FieldDelegatorID, vs...))
}

// DelegatorIDGT applies the GT predicate on the "delegator_id" field.
func DelegatorIDGT(v string) predicate.Delegation {
	return predicate.Delegation(sql.FieldGT(FieldDelegatorID, v))
}

// DelegatorIDGTE applies the GTE predicate on the "delegator_id" field.
func DelegatorIDGTE(v string) predicate.Delegation {
	return predicate.Delegation(sql.FieldGTE(FieldDelegatorID, v))
}

// DelegatorIDLT applies the LT predicate on the "delegator_id" field.
func DelegatorIDLT(v string) predicate.Delegation {
	return predicate.Delegation(sql.FieldLT(FieldDelegatorID, v))
}

// DelegatorIDLTE applies the LTE predicate on the "delegator_id" field.
func DelegatorIDLTE(v string) predicate.Delegation {
	return predicate.Delegation(sql.FieldLTE(FieldDelegatorID, v))
}

// DelegatorIDContains applies the Contains predicate on the "delegator_id" field.
func DelegatorIDContains(v string) predicate.Delegation {
	return predicate.Delegation(sql.FieldContains(FieldDelegatorID, v))
}

// DelegatorIDHasPrefix applies the HasPrefix predicate on the "delegator_id" field.
func DelegatorIDHasPrefix(v string) predicate.Delegation {
	return predicate.Delegation(sql.FieldHasPrefix(FieldDelegatorID, v))
}

// DelegatorIDHasSuffix applies the HasSuffix predicate on the "delegator_id" field.
func DelegatorIDHasSuffix(v string) predicate.Delegation {
	return predicate.Delegation(sql.FieldHasSuffix(FieldDelegatorID, v))
}

// DelegatorIDEqualFold applies the EqualFold predicate on the "delegator_id" field.
func DelegatorIDEqualFold(v string) predicate.Delegation {
	return predicate.Delegation(sql.FieldEqualFold(FieldDelegatorID, v))
}

// DelegatorIDContainsFold applies the ContainsFold predicate on the "delegator_id" field.
func DelegatorIDContainsFold(v string) predicate.Delegation {
	return predicate.Delegation(sql.FieldContainsFold(FieldDelegatorID, v))
}

// DelegateeIDEQ applies the EQ predicate on the "delegatee_id" field.
func DelegateeIDEQ(v string) predicate.Delegation {
	return predicate.Delegation(sql.FieldEQ(FieldDelegateeID, v))
}

// DelegateeIDNEQ applies the NEQ predicate on the "delegatee_id" field.
func DelegateeIDNEQ(v string) predicate.Delegation {
	return predicate.Delegation(sql.FieldNEQ(FieldDelegateeID, v))
}

// DelegateeIDIn applies the In predicate on the "delegatee_id" field.
func DelegateeIDIn(vs ...string) predicate.Delegation {
	return predicate.Delegation(sql.FieldIn(FieldDelegateeID, vs...))
}

// DelegateeIDNotIn applies the NotIn predicate on the "delegatee_id" field.
func DelegateeIDNotIn(vs ...string) predicate.Delegation {
	return predicate.Delegation(sql.FieldNotIn(FieldDelegateeID, vs...))
}

// DelegateeIDGT applies the GT predicate on the "delegatee_id" field.
func DelegateeIDGT(v string) predicate.Delegation {
	return predicate.Delegation(sql.FieldGT(FieldDelegateeID, v))
}

// DelegateeIDGTE applies the GTE predicate on the "delegatee_id" field.
func DelegateeIDGTE(v string) predicate.Delegation {
	return predicate.Delegation(sql.FieldGTE(FieldDelegateeID, v))
}

// DelegateeIDLT applies the LT predicate on the "delegatee_id" field.
func DelegateeIDLT(v string) predicate.Delegation {
	return predicate.Delegation(sql.FieldLT(FieldDelegateeID, v))
}

// DelegateeIDLTE applies the LTE predicate on the "delegatee_id" field.
func DelegateeIDLTE(v string) predicate.Delegation {
	return predicate.Delegation(sql.FieldLTE(FieldDelegateeID, v))
}

// DelegateeIDContains applies the Contains predicate on the "delegatee_id" field.
func DelegateeIDContains(v string) predicate.Delegation {
	return predicate.Delegation(sql.FieldContains(FieldDelegateeID, v))
}

// DelegateeIDHasPrefix applies the HasPrefix predicate on the "delegatee_id" field.
func DelegateeIDHasPrefix(v string) predicate.Delegation {
	return predicate.Delegation(sql.FieldHasPrefix(FieldDelegateeID, v))
}

// DelegateeIDHasSuffix applies the HasSuffix predicate on the "delegatee_id" field.
func DelegateeIDHasSuffix(v string) predicate.Delegation {
	return predicate.Delegation(sql.FieldHasSuffix(FieldDelegateeID, v))
}

// DelegateeIDEqualFold applies the EqualFold predicate on the "delegatee_id" field.
func DelegateeIDEqualFold(v string) predicate.Delegation {
	return predicate.Delegation(sql.FieldEqualFold(FieldDelegateeID, v))
}

// DelegateeIDContainsFold applies the ContainsFold predicate on the "delegatee_id" field.
func DelegateeIDContainsFold(v string) predicate.Delegation {
	return predicate.Delegation(sql.FieldContainsFold(FieldDelegateeID, v))
}

// TemplateIDEQ applies the EQ predicate on the "template_id" field.
func TemplateIDEQ(v string) predicate.Delegation {
	return predicate.Delegation(sql.FieldEQ(FieldTemplateID, v))
}

// TemplateIDNEQ applies the NEQ predicate on the "template_id" field.
func TemplateIDNEQ(v string) predicate.Delegation {
	return predicate.Delegation(sql.FieldNEQ(FieldTemplateID, v))
}

// TemplateIDIn applies the In predicate on the "template_id" field.
func TemplateIDIn(vs ...string) predicate.Delegation {
	return predicate.Delegation(sql.FieldIn(FieldTemplateID, vs...))
}

// TemplateIDNotIn applies the NotIn predicate on the "template_id" field.
func TemplateIDNotIn(vs ...string) predicate.Delegation {
	return predicate.Delegation(sql.FieldNotIn(FieldTemplateID, vs...))
}

// TemplateIDGT applies the GT predicate on the "template_id" field.
func TemplateIDGT(v string) predicate.Delegation {
	return predicate.Delegation(sql.FieldGT(FieldTemplateID, v))
}

// TemplateIDGTE applies the GTE predicate on the "template_id" field.
func TemplateIDGTE(v string) predicate.Delegation {
	return predicate.Delegation(sql.FieldGTE(FieldTemplateID, v))
}

// TemplateIDLT applies the LT predicate on the "template_id" field.
func TemplateIDLT(v string) predicate.Delegation {
	return predicate.Delegation(sql.FieldLT(FieldTemplateID, v))
}

// TemplateIDLTE applies the LTE predicate on the "template_id" field.
func TemplateIDLTE(v string) predicate.Delegation {
	return predicate.Delegation(sql.FieldLTE(FieldTemplateID, v))
}

// TemplateIDContains applies the Contains predicate on the "template_id" field.
func TemplateIDContains(v string) predicate.Delegation {
	return predicate.Delegation(sql.FieldContains(FieldTemplateID, v))
}

// TemplateIDHasPrefix applies the HasPrefix predicate on the "template_id" field.
func TemplateIDHasPrefix(v string) predicate.Delegation {
	return predicate.Delegation(sql.FieldHasPrefix(FieldTemplateID, v))
}

// TemplateIDHasSuffix applies the HasSuffix predicate on the "template_id" field.
func TemplateIDHasSuffix(v string) predicate.Delegation {
	return predicate.Delegation(sql.FieldHasSuffix(FieldTemplateID, v))
}

// TemplateIDIsNil applies the IsNil predicate on the "template_id" field.
func TemplateIDIsNil() predicate.Delegation {
	return predicate.Delegation(sql.FieldIsNull(FieldTemplateID))
}

// TemplateIDNotNil applies the NotNil predicate on the "template_id" field.
func TemplateIDNotNil() predicate.Delegation {
	return predicate.Delegation(sql.FieldNotNull(FieldTemplateID))
}

// TemplateIDEqualFold applies the EqualFold predicate on the "template_id" field.
func TemplateIDEqualFold(v string) predicate.Delegation {
	return predicate.Delegation(sql.FieldEqualFold(FieldTemplateID, v))
}

// TemplateIDContainsFold applies the ContainsFold predicate on the "template_id" field.
func TemplateIDContainsFold(v string) predicate.Delegation {
	return predicate.Delegation(sql.FieldContainsFold(FieldTemplateID, v))
}

// NodeTypeEQ applies the EQ predicate on the "node_type" field.
func NodeTypeEQ(v string) predicate.Delegation {
	return predicate.Delegation(sql.FieldEQ(FieldNodeType, v))
}

// NodeTypeNEQ applies the NEQ predicate on the "node_type" field.
func NodeTypeNEQ(v string) predicate.Delegation {
	return predicate.Delegation(sql.FieldNEQ(FieldNodeType, v))
}

// NodeTypeIn applies the In predicate on the "node_type" field.
func NodeTypeIn(vs ...string) predicate.Delegation {
	return predicate.Delegation(sql.FieldIn(FieldNodeType, vs...))
}

// NodeTypeNotIn applies the NotIn predicate on the "node_type" field.
func NodeTypeNotIn(vs ...string) predicate.Delegation {
	return predicate.Delegation(sql.FieldNotIn(FieldNodeType, vs...))
}

// NodeTypeGT applies the GT predicate on the "node_type" field.
func NodeTypeGT(v string) predicate.Delegation {
	return predicate.Delegation(sql.FieldGT(FieldNodeType, v))
}

// NodeTypeGTE applies the GTE predicate on the "node_type" field.
func NodeTypeGTE(v string) predicate.Delegation {
	return predicate.Delegation(sql.FieldGTE(FieldNodeType, v))
}

// NodeTypeLT applies the LT predicate on the "node_type" field.
func NodeTypeLT(v string) predicate.Delegation {
	return predicate.Delegation(sql.FieldLT(FieldNodeType, v))
}

// NodeTypeLTE applies the LTE predicate on the "node_type" field.
func NodeTypeLTE(v string) predicate.Delegation {
	return predicate.Delegation(sql.FieldLTE(FieldNodeType, v))
}

// NodeTypeContains applies the Contains predicate on the "node_type" field.
func NodeTypeContains(v string) predicate.Delegation {
	return predicate.Delegation(sql.FieldContains(FieldNodeType, v))
}

// NodeTypeHasPrefix applies the HasPrefix predicate on the "node_type" field.
func NodeTypeHasPrefix(v string) predicate.Delegation {
	return predicate.Delegation(sql.FieldHasPrefix(FieldNodeType, v))
}

// NodeTypeHasSuffix applies the HasSuffix predicate on the "node_type" field.
func NodeTypeHasSuffix(v string) predicate.Delegation {
	return predicate.Delegation(sql.FieldHasSuffix(FieldNodeType, v))
}

// NodeTypeIsNil applies the IsNil predicate on the "node_type" field.
func NodeTypeIsNil() predicate.Delegation {
	return predicate.Delegation(sql.FieldIsNull(FieldNodeType))
}

// NodeTypeNotNil applies the NotNil predicate on the "node_type" field.
func NodeTypeNotNil() predicate.Delegation {
	return predicate.Delegation(sql.FieldNotNull(FieldNodeType))
}

// NodeTypeEqualFold applies the EqualFold predicate on the "node_type" field.
func NodeTypeEqualFold(v string) predicate.Delegation {
	return predicate.Delegation(sql.FieldEqualFold(FieldNodeType, v))
}

// NodeTypeContainsFold applies the ContainsFold predicate on the "node_type" field.
func NodeTypeContainsFold(v string) predicate.Delegation {
	return predicate.Delegation(sql.FieldContainsFold(FieldNodeType, v))
}

// ConditionsIsNil applies the IsNil predicate on the "conditions" field.
func ConditionsIsNil() predicate.Delegation {
	return predicate.Delegation(sql.FieldIsNull(FieldConditions))
}

// ConditionsNotNil applies the NotNil predicate on the "conditions" field.
func ConditionsNotNil() predicate.Delegation {
	return predicate.Delegation(sql.FieldNotNull(FieldConditions))
}

// StartTimeEQ applies the EQ predicate on the "start_time" field.
func StartTimeEQ(v int64) predicate.Delegation {
	return predicate.Delegation(sql.FieldEQ(FieldStartTime, v))
}

// StartTimeNEQ applies the NEQ predicate on the "start_time" field.
func StartTimeNEQ(v int64) predicate.Delegation {
	return predicate.Delegation(sql.FieldNEQ(FieldStartTime, v))
}

// StartTimeIn applies the In predicate on the "start_time" field.
func StartTimeIn(vs ...int64) predicate.Delegation {
	return predicate.Delegation(sql.FieldIn(FieldStartTime, vs...))
}

// StartTimeNotIn applies the NotIn predicate on the "start_time" field.
func StartTimeNotIn(vs ...int64) predicate.Delegation {
	return predicate.Delegation(sql.FieldNotIn(FieldStartTime, vs...))
}

// StartTimeGT applies the GT predicate on the "start_time" field.
func StartTimeGT(v int64) predicate.Delegation {
	return predicate.Delegation(sql.FieldGT(FieldStartTime, v))
}

// StartTimeGTE applies the GTE predicate on the "start_time" field.
func StartTimeGTE(v int64) predicate.Delegation {
	return predicate.Delegation(sql.FieldGTE(FieldStartTime, v))
}

// StartTimeLT applies the LT predicate on the "start_time" field.
func StartTimeLT(v int64) predicate.Delegation {
	return predicate.Delegation(sql.FieldLT(FieldStartTime, v))
}

// StartTimeLTE applies the LTE predicate on the "start_time" field.
func StartTimeLTE(v int64) predicate.Delegation {
	return predicate.Delegation(sql.FieldLTE(FieldStartTime, v))
}

// EndTimeEQ applies the EQ predicate on the "end_time" field.
func EndTimeEQ(v int64) predicate.Delegation {
	return predicate.Delegation(sql.FieldEQ(FieldEndTime, v))
}

// EndTimeNEQ applies the NEQ predicate on the "end_time" field.
func EndTimeNEQ(v int64) predicate.Delegation {
	return predicate.Delegation(sql.FieldNEQ(FieldEndTime, v))
}

// EndTimeIn applies the In predicate on the "end_time" field.
func EndTimeIn(vs ...int64) predicate.Delegation {
	return predicate.Delegation(sql.FieldIn(FieldEndTime, vs...))
}

// EndTimeNotIn applies the NotIn predicate on the "end_time" field.
func EndTimeNotIn(vs ...int64) predicate.Delegation {
	return predicate.Delegation(sql.FieldNotIn(FieldEndTime, vs...))
}

// EndTimeGT applies the GT predicate on the "end_time" field.
func EndTimeGT(v int64) predicate.Delegation {
	return predicate.Delegation(sql.FieldGT(FieldEndTime, v))
}

// EndTimeGTE applies the GTE predicate on the "end_time" field.
func EndTimeGTE(v int64) predicate.Delegation {
	return predicate.Delegation(sql.FieldGTE(FieldEndTime, v))
}

// EndTimeLT applies the LT predicate on the "end_time" field.
func EndTimeLT(v int64) predicate.Delegation {
	return predicate.Delegation(sql.FieldLT(FieldEndTime, v))
}

// EndTimeLTE applies the LTE predicate on the "end_time" field.
func EndTimeLTE(v int64) predicate.Delegation {
	return predicate.Delegation(sql.FieldLTE(FieldEndTime, v))
}

// IsEnabledEQ applies the EQ predicate on the "is_enabled" field.
func IsEnabledEQ(v bool) predicate.Delegation {
	return predicate.Delegation(sql.FieldEQ(FieldIsEnabled, v))
}

// IsEnabledNEQ applies the NEQ predicate on the "is_enabled" field.
func IsEnabledNEQ(v bool) predicate.Delegation {
	return predicate.Delegation(sql.FieldNEQ(FieldIsEnabled, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Delegation) predicate.Delegation {
	return predicate.Delegation(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Delegation) predicate.Delegation {
	return predicate.Delegation(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Delegation) predicate.Delegation {
	return predicate.Delegation(sql.NotPredicates(p))
}
