// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"ncobase/workflow/data/ent/history"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// History is the model entity for the History schema.
type History struct {
	config `json:"-"`
	// ID of the ent.
	// primary key
	ID string `json:"id,omitempty"`
	// type
	Type string `json:"type,omitempty"`
	// Process instance ID
	ProcessID string `json:"process_id,omitempty"`
	// Process template ID
	TemplateID string `json:"template_id,omitempty"`
	// Business document ID
	BusinessKey string `json:"business_key,omitempty"`
	// Unique identifier for the node
	NodeKey string `json:"node_key,omitempty"`
	// Node type
	NodeType string `json:"node_type,omitempty"`
	// Node configuration
	NodeConfig map[string]interface{} `json:"node_config,omitempty"`
	// Node rules
	NodeRules map[string]interface{} `json:"node_rules,omitempty"`
	// Node events
	NodeEvents map[string]interface{} `json:"node_events,omitempty"`
	// tenant id
	TenantID string `json:"tenant_id,omitempty"`
	// id of the creator
	CreatedBy string `json:"created_by,omitempty"`
	// id of the last updater
	UpdatedBy string `json:"updated_by,omitempty"`
	// created at
	CreatedAt int64 `json:"created_at,omitempty"`
	// updated at
	UpdatedAt int64 `json:"updated_at,omitempty"`
	// Node name
	NodeName string `json:"node_name,omitempty"`
	// Operation user
	Operator string `json:"operator,omitempty"`
	// Operator's department
	OperatorDept string `json:"operator_dept,omitempty"`
	// Task ID
	TaskID string `json:"task_id,omitempty"`
	// Task variables
	Variables map[string]interface{} `json:"variables,omitempty"`
	// Form data
	FormData map[string]interface{} `json:"form_data,omitempty"`
	// Operation action
	Action string `json:"action,omitempty"`
	// Operation comment
	Comment string `json:"comment,omitempty"`
	// Detailed information
	Details      map[string]interface{} `json:"details,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*History) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case history.FieldNodeConfig, history.FieldNodeRules, history.FieldNodeEvents, history.FieldVariables, history.FieldFormData, history.FieldDetails:
			values[i] = new([]byte)
		case history.FieldCreatedAt, history.FieldUpdatedAt:
			values[i] = new(sql.NullInt64)
		case history.FieldID, history.FieldType, history.FieldProcessID, history.FieldTemplateID, history.FieldBusinessKey, history.FieldNodeKey, history.FieldNodeType, history.FieldTenantID, history.FieldCreatedBy, history.FieldUpdatedBy, history.FieldNodeName, history.FieldOperator, history.FieldOperatorDept, history.FieldTaskID, history.FieldAction, history.FieldComment:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the History fields.
func (h *History) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case history.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				h.ID = value.String
			}
		case history.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				h.Type = value.String
			}
		case history.FieldProcessID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field process_id", values[i])
			} else if value.Valid {
				h.ProcessID = value.String
			}
		case history.FieldTemplateID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field template_id", values[i])
			} else if value.Valid {
				h.TemplateID = value.String
			}
		case history.FieldBusinessKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field business_key", values[i])
			} else if value.Valid {
				h.BusinessKey = value.String
			}
		case history.FieldNodeKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field node_key", values[i])
			} else if value.Valid {
				h.NodeKey = value.String
			}
		case history.FieldNodeType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field node_type", values[i])
			} else if value.Valid {
				h.NodeType = value.String
			}
		case history.FieldNodeConfig:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field node_config", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &h.NodeConfig); err != nil {
					return fmt.Errorf("unmarshal field node_config: %w", err)
				}
			}
		case history.FieldNodeRules:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field node_rules", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &h.NodeRules); err != nil {
					return fmt.Errorf("unmarshal field node_rules: %w", err)
				}
			}
		case history.FieldNodeEvents:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field node_events", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &h.NodeEvents); err != nil {
					return fmt.Errorf("unmarshal field node_events: %w", err)
				}
			}
		case history.FieldTenantID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				h.TenantID = value.String
			}
		case history.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				h.CreatedBy = value.String
			}
		case history.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				h.UpdatedBy = value.String
			}
		case history.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				h.CreatedAt = value.Int64
			}
		case history.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				h.UpdatedAt = value.Int64
			}
		case history.FieldNodeName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field node_name", values[i])
			} else if value.Valid {
				h.NodeName = value.String
			}
		case history.FieldOperator:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field operator", values[i])
			} else if value.Valid {
				h.Operator = value.String
			}
		case history.FieldOperatorDept:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field operator_dept", values[i])
			} else if value.Valid {
				h.OperatorDept = value.String
			}
		case history.FieldTaskID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field task_id", values[i])
			} else if value.Valid {
				h.TaskID = value.String
			}
		case history.FieldVariables:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field variables", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &h.Variables); err != nil {
					return fmt.Errorf("unmarshal field variables: %w", err)
				}
			}
		case history.FieldFormData:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field form_data", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &h.FormData); err != nil {
					return fmt.Errorf("unmarshal field form_data: %w", err)
				}
			}
		case history.FieldAction:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field action", values[i])
			} else if value.Valid {
				h.Action = value.String
			}
		case history.FieldComment:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field comment", values[i])
			} else if value.Valid {
				h.Comment = value.String
			}
		case history.FieldDetails:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field details", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &h.Details); err != nil {
					return fmt.Errorf("unmarshal field details: %w", err)
				}
			}
		default:
			h.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the History.
// This includes values selected through modifiers, order, etc.
func (h *History) Value(name string) (ent.Value, error) {
	return h.selectValues.Get(name)
}

// Update returns a builder for updating this History.
// Note that you need to call History.Unwrap() before calling this method if this History
// was returned from a transaction, and the transaction was committed or rolled back.
func (h *History) Update() *HistoryUpdateOne {
	return NewHistoryClient(h.config).UpdateOne(h)
}

// Unwrap unwraps the History entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (h *History) Unwrap() *History {
	_tx, ok := h.config.driver.(*txDriver)
	if !ok {
		panic("ent: History is not a transactional entity")
	}
	h.config.driver = _tx.drv
	return h
}

// String implements the fmt.Stringer.
func (h *History) String() string {
	var builder strings.Builder
	builder.WriteString("History(")
	builder.WriteString(fmt.Sprintf("id=%v, ", h.ID))
	builder.WriteString("type=")
	builder.WriteString(h.Type)
	builder.WriteString(", ")
	builder.WriteString("process_id=")
	builder.WriteString(h.ProcessID)
	builder.WriteString(", ")
	builder.WriteString("template_id=")
	builder.WriteString(h.TemplateID)
	builder.WriteString(", ")
	builder.WriteString("business_key=")
	builder.WriteString(h.BusinessKey)
	builder.WriteString(", ")
	builder.WriteString("node_key=")
	builder.WriteString(h.NodeKey)
	builder.WriteString(", ")
	builder.WriteString("node_type=")
	builder.WriteString(h.NodeType)
	builder.WriteString(", ")
	builder.WriteString("node_config=")
	builder.WriteString(fmt.Sprintf("%v", h.NodeConfig))
	builder.WriteString(", ")
	builder.WriteString("node_rules=")
	builder.WriteString(fmt.Sprintf("%v", h.NodeRules))
	builder.WriteString(", ")
	builder.WriteString("node_events=")
	builder.WriteString(fmt.Sprintf("%v", h.NodeEvents))
	builder.WriteString(", ")
	builder.WriteString("tenant_id=")
	builder.WriteString(h.TenantID)
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(h.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(h.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", h.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", h.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("node_name=")
	builder.WriteString(h.NodeName)
	builder.WriteString(", ")
	builder.WriteString("operator=")
	builder.WriteString(h.Operator)
	builder.WriteString(", ")
	builder.WriteString("operator_dept=")
	builder.WriteString(h.OperatorDept)
	builder.WriteString(", ")
	builder.WriteString("task_id=")
	builder.WriteString(h.TaskID)
	builder.WriteString(", ")
	builder.WriteString("variables=")
	builder.WriteString(fmt.Sprintf("%v", h.Variables))
	builder.WriteString(", ")
	builder.WriteString("form_data=")
	builder.WriteString(fmt.Sprintf("%v", h.FormData))
	builder.WriteString(", ")
	builder.WriteString("action=")
	builder.WriteString(h.Action)
	builder.WriteString(", ")
	builder.WriteString("comment=")
	builder.WriteString(h.Comment)
	builder.WriteString(", ")
	builder.WriteString("details=")
	builder.WriteString(fmt.Sprintf("%v", h.Details))
	builder.WriteByte(')')
	return builder.String()
}

// Histories is a parsable slice of History.
type Histories []*History
