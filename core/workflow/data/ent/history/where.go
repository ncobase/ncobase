// Code generated by ent, DO NOT EDIT.

package history

import (
	"ncobase/core/workflow/data/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.History {
	return predicate.History(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.History {
	return predicate.History(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.History {
	return predicate.History(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.History {
	return predicate.History(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.History {
	return predicate.History(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.History {
	return predicate.History(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.History {
	return predicate.History(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.History {
	return predicate.History(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.History {
	return predicate.History(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.History {
	return predicate.History(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.History {
	return predicate.History(sql.FieldContainsFold(FieldID, id))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.History {
	return predicate.History(sql.FieldEQ(FieldType, v))
}

// ProcessID applies equality check predicate on the "process_id" field. It's identical to ProcessIDEQ.
func ProcessID(v string) predicate.History {
	return predicate.History(sql.FieldEQ(FieldProcessID, v))
}

// TemplateID applies equality check predicate on the "template_id" field. It's identical to TemplateIDEQ.
func TemplateID(v string) predicate.History {
	return predicate.History(sql.FieldEQ(FieldTemplateID, v))
}

// BusinessKey applies equality check predicate on the "business_key" field. It's identical to BusinessKeyEQ.
func BusinessKey(v string) predicate.History {
	return predicate.History(sql.FieldEQ(FieldBusinessKey, v))
}

// NodeKey applies equality check predicate on the "node_key" field. It's identical to NodeKeyEQ.
func NodeKey(v string) predicate.History {
	return predicate.History(sql.FieldEQ(FieldNodeKey, v))
}

// NodeType applies equality check predicate on the "node_type" field. It's identical to NodeTypeEQ.
func NodeType(v string) predicate.History {
	return predicate.History(sql.FieldEQ(FieldNodeType, v))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v string) predicate.History {
	return predicate.History(sql.FieldEQ(FieldTenantID, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v string) predicate.History {
	return predicate.History(sql.FieldEQ(FieldCreatedBy, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v string) predicate.History {
	return predicate.History(sql.FieldEQ(FieldUpdatedBy, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v int64) predicate.History {
	return predicate.History(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v int64) predicate.History {
	return predicate.History(sql.FieldEQ(FieldUpdatedAt, v))
}

// NodeName applies equality check predicate on the "node_name" field. It's identical to NodeNameEQ.
func NodeName(v string) predicate.History {
	return predicate.History(sql.FieldEQ(FieldNodeName, v))
}

// Operator applies equality check predicate on the "operator" field. It's identical to OperatorEQ.
func Operator(v string) predicate.History {
	return predicate.History(sql.FieldEQ(FieldOperator, v))
}

// OperatorDept applies equality check predicate on the "operator_dept" field. It's identical to OperatorDeptEQ.
func OperatorDept(v string) predicate.History {
	return predicate.History(sql.FieldEQ(FieldOperatorDept, v))
}

// TaskID applies equality check predicate on the "task_id" field. It's identical to TaskIDEQ.
func TaskID(v string) predicate.History {
	return predicate.History(sql.FieldEQ(FieldTaskID, v))
}

// Action applies equality check predicate on the "action" field. It's identical to ActionEQ.
func Action(v string) predicate.History {
	return predicate.History(sql.FieldEQ(FieldAction, v))
}

// Comment applies equality check predicate on the "comment" field. It's identical to CommentEQ.
func Comment(v string) predicate.History {
	return predicate.History(sql.FieldEQ(FieldComment, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.History {
	return predicate.History(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.History {
	return predicate.History(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.History {
	return predicate.History(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.History {
	return predicate.History(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.History {
	return predicate.History(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.History {
	return predicate.History(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.History {
	return predicate.History(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.History {
	return predicate.History(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.History {
	return predicate.History(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.History {
	return predicate.History(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.History {
	return predicate.History(sql.FieldHasSuffix(FieldType, v))
}

// TypeIsNil applies the IsNil predicate on the "type" field.
func TypeIsNil() predicate.History {
	return predicate.History(sql.FieldIsNull(FieldType))
}

// TypeNotNil applies the NotNil predicate on the "type" field.
func TypeNotNil() predicate.History {
	return predicate.History(sql.FieldNotNull(FieldType))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.History {
	return predicate.History(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.History {
	return predicate.History(sql.FieldContainsFold(FieldType, v))
}

// ProcessIDEQ applies the EQ predicate on the "process_id" field.
func ProcessIDEQ(v string) predicate.History {
	return predicate.History(sql.FieldEQ(FieldProcessID, v))
}

// ProcessIDNEQ applies the NEQ predicate on the "process_id" field.
func ProcessIDNEQ(v string) predicate.History {
	return predicate.History(sql.FieldNEQ(FieldProcessID, v))
}

// ProcessIDIn applies the In predicate on the "process_id" field.
func ProcessIDIn(vs ...string) predicate.History {
	return predicate.History(sql.FieldIn(FieldProcessID, vs...))
}

// ProcessIDNotIn applies the NotIn predicate on the "process_id" field.
func ProcessIDNotIn(vs ...string) predicate.History {
	return predicate.History(sql.FieldNotIn(FieldProcessID, vs...))
}

// ProcessIDGT applies the GT predicate on the "process_id" field.
func ProcessIDGT(v string) predicate.History {
	return predicate.History(sql.FieldGT(FieldProcessID, v))
}

// ProcessIDGTE applies the GTE predicate on the "process_id" field.
func ProcessIDGTE(v string) predicate.History {
	return predicate.History(sql.FieldGTE(FieldProcessID, v))
}

// ProcessIDLT applies the LT predicate on the "process_id" field.
func ProcessIDLT(v string) predicate.History {
	return predicate.History(sql.FieldLT(FieldProcessID, v))
}

// ProcessIDLTE applies the LTE predicate on the "process_id" field.
func ProcessIDLTE(v string) predicate.History {
	return predicate.History(sql.FieldLTE(FieldProcessID, v))
}

// ProcessIDContains applies the Contains predicate on the "process_id" field.
func ProcessIDContains(v string) predicate.History {
	return predicate.History(sql.FieldContains(FieldProcessID, v))
}

// ProcessIDHasPrefix applies the HasPrefix predicate on the "process_id" field.
func ProcessIDHasPrefix(v string) predicate.History {
	return predicate.History(sql.FieldHasPrefix(FieldProcessID, v))
}

// ProcessIDHasSuffix applies the HasSuffix predicate on the "process_id" field.
func ProcessIDHasSuffix(v string) predicate.History {
	return predicate.History(sql.FieldHasSuffix(FieldProcessID, v))
}

// ProcessIDEqualFold applies the EqualFold predicate on the "process_id" field.
func ProcessIDEqualFold(v string) predicate.History {
	return predicate.History(sql.FieldEqualFold(FieldProcessID, v))
}

// ProcessIDContainsFold applies the ContainsFold predicate on the "process_id" field.
func ProcessIDContainsFold(v string) predicate.History {
	return predicate.History(sql.FieldContainsFold(FieldProcessID, v))
}

// TemplateIDEQ applies the EQ predicate on the "template_id" field.
func TemplateIDEQ(v string) predicate.History {
	return predicate.History(sql.FieldEQ(FieldTemplateID, v))
}

// TemplateIDNEQ applies the NEQ predicate on the "template_id" field.
func TemplateIDNEQ(v string) predicate.History {
	return predicate.History(sql.FieldNEQ(FieldTemplateID, v))
}

// TemplateIDIn applies the In predicate on the "template_id" field.
func TemplateIDIn(vs ...string) predicate.History {
	return predicate.History(sql.FieldIn(FieldTemplateID, vs...))
}

// TemplateIDNotIn applies the NotIn predicate on the "template_id" field.
func TemplateIDNotIn(vs ...string) predicate.History {
	return predicate.History(sql.FieldNotIn(FieldTemplateID, vs...))
}

// TemplateIDGT applies the GT predicate on the "template_id" field.
func TemplateIDGT(v string) predicate.History {
	return predicate.History(sql.FieldGT(FieldTemplateID, v))
}

// TemplateIDGTE applies the GTE predicate on the "template_id" field.
func TemplateIDGTE(v string) predicate.History {
	return predicate.History(sql.FieldGTE(FieldTemplateID, v))
}

// TemplateIDLT applies the LT predicate on the "template_id" field.
func TemplateIDLT(v string) predicate.History {
	return predicate.History(sql.FieldLT(FieldTemplateID, v))
}

// TemplateIDLTE applies the LTE predicate on the "template_id" field.
func TemplateIDLTE(v string) predicate.History {
	return predicate.History(sql.FieldLTE(FieldTemplateID, v))
}

// TemplateIDContains applies the Contains predicate on the "template_id" field.
func TemplateIDContains(v string) predicate.History {
	return predicate.History(sql.FieldContains(FieldTemplateID, v))
}

// TemplateIDHasPrefix applies the HasPrefix predicate on the "template_id" field.
func TemplateIDHasPrefix(v string) predicate.History {
	return predicate.History(sql.FieldHasPrefix(FieldTemplateID, v))
}

// TemplateIDHasSuffix applies the HasSuffix predicate on the "template_id" field.
func TemplateIDHasSuffix(v string) predicate.History {
	return predicate.History(sql.FieldHasSuffix(FieldTemplateID, v))
}

// TemplateIDEqualFold applies the EqualFold predicate on the "template_id" field.
func TemplateIDEqualFold(v string) predicate.History {
	return predicate.History(sql.FieldEqualFold(FieldTemplateID, v))
}

// TemplateIDContainsFold applies the ContainsFold predicate on the "template_id" field.
func TemplateIDContainsFold(v string) predicate.History {
	return predicate.History(sql.FieldContainsFold(FieldTemplateID, v))
}

// BusinessKeyEQ applies the EQ predicate on the "business_key" field.
func BusinessKeyEQ(v string) predicate.History {
	return predicate.History(sql.FieldEQ(FieldBusinessKey, v))
}

// BusinessKeyNEQ applies the NEQ predicate on the "business_key" field.
func BusinessKeyNEQ(v string) predicate.History {
	return predicate.History(sql.FieldNEQ(FieldBusinessKey, v))
}

// BusinessKeyIn applies the In predicate on the "business_key" field.
func BusinessKeyIn(vs ...string) predicate.History {
	return predicate.History(sql.FieldIn(FieldBusinessKey, vs...))
}

// BusinessKeyNotIn applies the NotIn predicate on the "business_key" field.
func BusinessKeyNotIn(vs ...string) predicate.History {
	return predicate.History(sql.FieldNotIn(FieldBusinessKey, vs...))
}

// BusinessKeyGT applies the GT predicate on the "business_key" field.
func BusinessKeyGT(v string) predicate.History {
	return predicate.History(sql.FieldGT(FieldBusinessKey, v))
}

// BusinessKeyGTE applies the GTE predicate on the "business_key" field.
func BusinessKeyGTE(v string) predicate.History {
	return predicate.History(sql.FieldGTE(FieldBusinessKey, v))
}

// BusinessKeyLT applies the LT predicate on the "business_key" field.
func BusinessKeyLT(v string) predicate.History {
	return predicate.History(sql.FieldLT(FieldBusinessKey, v))
}

// BusinessKeyLTE applies the LTE predicate on the "business_key" field.
func BusinessKeyLTE(v string) predicate.History {
	return predicate.History(sql.FieldLTE(FieldBusinessKey, v))
}

// BusinessKeyContains applies the Contains predicate on the "business_key" field.
func BusinessKeyContains(v string) predicate.History {
	return predicate.History(sql.FieldContains(FieldBusinessKey, v))
}

// BusinessKeyHasPrefix applies the HasPrefix predicate on the "business_key" field.
func BusinessKeyHasPrefix(v string) predicate.History {
	return predicate.History(sql.FieldHasPrefix(FieldBusinessKey, v))
}

// BusinessKeyHasSuffix applies the HasSuffix predicate on the "business_key" field.
func BusinessKeyHasSuffix(v string) predicate.History {
	return predicate.History(sql.FieldHasSuffix(FieldBusinessKey, v))
}

// BusinessKeyEqualFold applies the EqualFold predicate on the "business_key" field.
func BusinessKeyEqualFold(v string) predicate.History {
	return predicate.History(sql.FieldEqualFold(FieldBusinessKey, v))
}

// BusinessKeyContainsFold applies the ContainsFold predicate on the "business_key" field.
func BusinessKeyContainsFold(v string) predicate.History {
	return predicate.History(sql.FieldContainsFold(FieldBusinessKey, v))
}

// NodeKeyEQ applies the EQ predicate on the "node_key" field.
func NodeKeyEQ(v string) predicate.History {
	return predicate.History(sql.FieldEQ(FieldNodeKey, v))
}

// NodeKeyNEQ applies the NEQ predicate on the "node_key" field.
func NodeKeyNEQ(v string) predicate.History {
	return predicate.History(sql.FieldNEQ(FieldNodeKey, v))
}

// NodeKeyIn applies the In predicate on the "node_key" field.
func NodeKeyIn(vs ...string) predicate.History {
	return predicate.History(sql.FieldIn(FieldNodeKey, vs...))
}

// NodeKeyNotIn applies the NotIn predicate on the "node_key" field.
func NodeKeyNotIn(vs ...string) predicate.History {
	return predicate.History(sql.FieldNotIn(FieldNodeKey, vs...))
}

// NodeKeyGT applies the GT predicate on the "node_key" field.
func NodeKeyGT(v string) predicate.History {
	return predicate.History(sql.FieldGT(FieldNodeKey, v))
}

// NodeKeyGTE applies the GTE predicate on the "node_key" field.
func NodeKeyGTE(v string) predicate.History {
	return predicate.History(sql.FieldGTE(FieldNodeKey, v))
}

// NodeKeyLT applies the LT predicate on the "node_key" field.
func NodeKeyLT(v string) predicate.History {
	return predicate.History(sql.FieldLT(FieldNodeKey, v))
}

// NodeKeyLTE applies the LTE predicate on the "node_key" field.
func NodeKeyLTE(v string) predicate.History {
	return predicate.History(sql.FieldLTE(FieldNodeKey, v))
}

// NodeKeyContains applies the Contains predicate on the "node_key" field.
func NodeKeyContains(v string) predicate.History {
	return predicate.History(sql.FieldContains(FieldNodeKey, v))
}

// NodeKeyHasPrefix applies the HasPrefix predicate on the "node_key" field.
func NodeKeyHasPrefix(v string) predicate.History {
	return predicate.History(sql.FieldHasPrefix(FieldNodeKey, v))
}

// NodeKeyHasSuffix applies the HasSuffix predicate on the "node_key" field.
func NodeKeyHasSuffix(v string) predicate.History {
	return predicate.History(sql.FieldHasSuffix(FieldNodeKey, v))
}

// NodeKeyEqualFold applies the EqualFold predicate on the "node_key" field.
func NodeKeyEqualFold(v string) predicate.History {
	return predicate.History(sql.FieldEqualFold(FieldNodeKey, v))
}

// NodeKeyContainsFold applies the ContainsFold predicate on the "node_key" field.
func NodeKeyContainsFold(v string) predicate.History {
	return predicate.History(sql.FieldContainsFold(FieldNodeKey, v))
}

// NodeTypeEQ applies the EQ predicate on the "node_type" field.
func NodeTypeEQ(v string) predicate.History {
	return predicate.History(sql.FieldEQ(FieldNodeType, v))
}

// NodeTypeNEQ applies the NEQ predicate on the "node_type" field.
func NodeTypeNEQ(v string) predicate.History {
	return predicate.History(sql.FieldNEQ(FieldNodeType, v))
}

// NodeTypeIn applies the In predicate on the "node_type" field.
func NodeTypeIn(vs ...string) predicate.History {
	return predicate.History(sql.FieldIn(FieldNodeType, vs...))
}

// NodeTypeNotIn applies the NotIn predicate on the "node_type" field.
func NodeTypeNotIn(vs ...string) predicate.History {
	return predicate.History(sql.FieldNotIn(FieldNodeType, vs...))
}

// NodeTypeGT applies the GT predicate on the "node_type" field.
func NodeTypeGT(v string) predicate.History {
	return predicate.History(sql.FieldGT(FieldNodeType, v))
}

// NodeTypeGTE applies the GTE predicate on the "node_type" field.
func NodeTypeGTE(v string) predicate.History {
	return predicate.History(sql.FieldGTE(FieldNodeType, v))
}

// NodeTypeLT applies the LT predicate on the "node_type" field.
func NodeTypeLT(v string) predicate.History {
	return predicate.History(sql.FieldLT(FieldNodeType, v))
}

// NodeTypeLTE applies the LTE predicate on the "node_type" field.
func NodeTypeLTE(v string) predicate.History {
	return predicate.History(sql.FieldLTE(FieldNodeType, v))
}

// NodeTypeContains applies the Contains predicate on the "node_type" field.
func NodeTypeContains(v string) predicate.History {
	return predicate.History(sql.FieldContains(FieldNodeType, v))
}

// NodeTypeHasPrefix applies the HasPrefix predicate on the "node_type" field.
func NodeTypeHasPrefix(v string) predicate.History {
	return predicate.History(sql.FieldHasPrefix(FieldNodeType, v))
}

// NodeTypeHasSuffix applies the HasSuffix predicate on the "node_type" field.
func NodeTypeHasSuffix(v string) predicate.History {
	return predicate.History(sql.FieldHasSuffix(FieldNodeType, v))
}

// NodeTypeEqualFold applies the EqualFold predicate on the "node_type" field.
func NodeTypeEqualFold(v string) predicate.History {
	return predicate.History(sql.FieldEqualFold(FieldNodeType, v))
}

// NodeTypeContainsFold applies the ContainsFold predicate on the "node_type" field.
func NodeTypeContainsFold(v string) predicate.History {
	return predicate.History(sql.FieldContainsFold(FieldNodeType, v))
}

// NodeConfigIsNil applies the IsNil predicate on the "node_config" field.
func NodeConfigIsNil() predicate.History {
	return predicate.History(sql.FieldIsNull(FieldNodeConfig))
}

// NodeConfigNotNil applies the NotNil predicate on the "node_config" field.
func NodeConfigNotNil() predicate.History {
	return predicate.History(sql.FieldNotNull(FieldNodeConfig))
}

// NodeRulesIsNil applies the IsNil predicate on the "node_rules" field.
func NodeRulesIsNil() predicate.History {
	return predicate.History(sql.FieldIsNull(FieldNodeRules))
}

// NodeRulesNotNil applies the NotNil predicate on the "node_rules" field.
func NodeRulesNotNil() predicate.History {
	return predicate.History(sql.FieldNotNull(FieldNodeRules))
}

// NodeEventsIsNil applies the IsNil predicate on the "node_events" field.
func NodeEventsIsNil() predicate.History {
	return predicate.History(sql.FieldIsNull(FieldNodeEvents))
}

// NodeEventsNotNil applies the NotNil predicate on the "node_events" field.
func NodeEventsNotNil() predicate.History {
	return predicate.History(sql.FieldNotNull(FieldNodeEvents))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v string) predicate.History {
	return predicate.History(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v string) predicate.History {
	return predicate.History(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...string) predicate.History {
	return predicate.History(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...string) predicate.History {
	return predicate.History(sql.FieldNotIn(FieldTenantID, vs...))
}

// TenantIDGT applies the GT predicate on the "tenant_id" field.
func TenantIDGT(v string) predicate.History {
	return predicate.History(sql.FieldGT(FieldTenantID, v))
}

// TenantIDGTE applies the GTE predicate on the "tenant_id" field.
func TenantIDGTE(v string) predicate.History {
	return predicate.History(sql.FieldGTE(FieldTenantID, v))
}

// TenantIDLT applies the LT predicate on the "tenant_id" field.
func TenantIDLT(v string) predicate.History {
	return predicate.History(sql.FieldLT(FieldTenantID, v))
}

// TenantIDLTE applies the LTE predicate on the "tenant_id" field.
func TenantIDLTE(v string) predicate.History {
	return predicate.History(sql.FieldLTE(FieldTenantID, v))
}

// TenantIDContains applies the Contains predicate on the "tenant_id" field.
func TenantIDContains(v string) predicate.History {
	return predicate.History(sql.FieldContains(FieldTenantID, v))
}

// TenantIDHasPrefix applies the HasPrefix predicate on the "tenant_id" field.
func TenantIDHasPrefix(v string) predicate.History {
	return predicate.History(sql.FieldHasPrefix(FieldTenantID, v))
}

// TenantIDHasSuffix applies the HasSuffix predicate on the "tenant_id" field.
func TenantIDHasSuffix(v string) predicate.History {
	return predicate.History(sql.FieldHasSuffix(FieldTenantID, v))
}

// TenantIDIsNil applies the IsNil predicate on the "tenant_id" field.
func TenantIDIsNil() predicate.History {
	return predicate.History(sql.FieldIsNull(FieldTenantID))
}

// TenantIDNotNil applies the NotNil predicate on the "tenant_id" field.
func TenantIDNotNil() predicate.History {
	return predicate.History(sql.FieldNotNull(FieldTenantID))
}

// TenantIDEqualFold applies the EqualFold predicate on the "tenant_id" field.
func TenantIDEqualFold(v string) predicate.History {
	return predicate.History(sql.FieldEqualFold(FieldTenantID, v))
}

// TenantIDContainsFold applies the ContainsFold predicate on the "tenant_id" field.
func TenantIDContainsFold(v string) predicate.History {
	return predicate.History(sql.FieldContainsFold(FieldTenantID, v))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v string) predicate.History {
	return predicate.History(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v string) predicate.History {
	return predicate.History(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...string) predicate.History {
	return predicate.History(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...string) predicate.History {
	return predicate.History(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v string) predicate.History {
	return predicate.History(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v string) predicate.History {
	return predicate.History(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v string) predicate.History {
	return predicate.History(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v string) predicate.History {
	return predicate.History(sql.FieldLTE(FieldCreatedBy, v))
}

// CreatedByContains applies the Contains predicate on the "created_by" field.
func CreatedByContains(v string) predicate.History {
	return predicate.History(sql.FieldContains(FieldCreatedBy, v))
}

// CreatedByHasPrefix applies the HasPrefix predicate on the "created_by" field.
func CreatedByHasPrefix(v string) predicate.History {
	return predicate.History(sql.FieldHasPrefix(FieldCreatedBy, v))
}

// CreatedByHasSuffix applies the HasSuffix predicate on the "created_by" field.
func CreatedByHasSuffix(v string) predicate.History {
	return predicate.History(sql.FieldHasSuffix(FieldCreatedBy, v))
}

// CreatedByIsNil applies the IsNil predicate on the "created_by" field.
func CreatedByIsNil() predicate.History {
	return predicate.History(sql.FieldIsNull(FieldCreatedBy))
}

// CreatedByNotNil applies the NotNil predicate on the "created_by" field.
func CreatedByNotNil() predicate.History {
	return predicate.History(sql.FieldNotNull(FieldCreatedBy))
}

// CreatedByEqualFold applies the EqualFold predicate on the "created_by" field.
func CreatedByEqualFold(v string) predicate.History {
	return predicate.History(sql.FieldEqualFold(FieldCreatedBy, v))
}

// CreatedByContainsFold applies the ContainsFold predicate on the "created_by" field.
func CreatedByContainsFold(v string) predicate.History {
	return predicate.History(sql.FieldContainsFold(FieldCreatedBy, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v string) predicate.History {
	return predicate.History(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v string) predicate.History {
	return predicate.History(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...string) predicate.History {
	return predicate.History(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...string) predicate.History {
	return predicate.History(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v string) predicate.History {
	return predicate.History(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v string) predicate.History {
	return predicate.History(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v string) predicate.History {
	return predicate.History(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v string) predicate.History {
	return predicate.History(sql.FieldLTE(FieldUpdatedBy, v))
}

// UpdatedByContains applies the Contains predicate on the "updated_by" field.
func UpdatedByContains(v string) predicate.History {
	return predicate.History(sql.FieldContains(FieldUpdatedBy, v))
}

// UpdatedByHasPrefix applies the HasPrefix predicate on the "updated_by" field.
func UpdatedByHasPrefix(v string) predicate.History {
	return predicate.History(sql.FieldHasPrefix(FieldUpdatedBy, v))
}

// UpdatedByHasSuffix applies the HasSuffix predicate on the "updated_by" field.
func UpdatedByHasSuffix(v string) predicate.History {
	return predicate.History(sql.FieldHasSuffix(FieldUpdatedBy, v))
}

// UpdatedByIsNil applies the IsNil predicate on the "updated_by" field.
func UpdatedByIsNil() predicate.History {
	return predicate.History(sql.FieldIsNull(FieldUpdatedBy))
}

// UpdatedByNotNil applies the NotNil predicate on the "updated_by" field.
func UpdatedByNotNil() predicate.History {
	return predicate.History(sql.FieldNotNull(FieldUpdatedBy))
}

// UpdatedByEqualFold applies the EqualFold predicate on the "updated_by" field.
func UpdatedByEqualFold(v string) predicate.History {
	return predicate.History(sql.FieldEqualFold(FieldUpdatedBy, v))
}

// UpdatedByContainsFold applies the ContainsFold predicate on the "updated_by" field.
func UpdatedByContainsFold(v string) predicate.History {
	return predicate.History(sql.FieldContainsFold(FieldUpdatedBy, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v int64) predicate.History {
	return predicate.History(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v int64) predicate.History {
	return predicate.History(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...int64) predicate.History {
	return predicate.History(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...int64) predicate.History {
	return predicate.History(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v int64) predicate.History {
	return predicate.History(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v int64) predicate.History {
	return predicate.History(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v int64) predicate.History {
	return predicate.History(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v int64) predicate.History {
	return predicate.History(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.History {
	return predicate.History(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.History {
	return predicate.History(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v int64) predicate.History {
	return predicate.History(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v int64) predicate.History {
	return predicate.History(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...int64) predicate.History {
	return predicate.History(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...int64) predicate.History {
	return predicate.History(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v int64) predicate.History {
	return predicate.History(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v int64) predicate.History {
	return predicate.History(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v int64) predicate.History {
	return predicate.History(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v int64) predicate.History {
	return predicate.History(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.History {
	return predicate.History(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.History {
	return predicate.History(sql.FieldNotNull(FieldUpdatedAt))
}

// NodeNameEQ applies the EQ predicate on the "node_name" field.
func NodeNameEQ(v string) predicate.History {
	return predicate.History(sql.FieldEQ(FieldNodeName, v))
}

// NodeNameNEQ applies the NEQ predicate on the "node_name" field.
func NodeNameNEQ(v string) predicate.History {
	return predicate.History(sql.FieldNEQ(FieldNodeName, v))
}

// NodeNameIn applies the In predicate on the "node_name" field.
func NodeNameIn(vs ...string) predicate.History {
	return predicate.History(sql.FieldIn(FieldNodeName, vs...))
}

// NodeNameNotIn applies the NotIn predicate on the "node_name" field.
func NodeNameNotIn(vs ...string) predicate.History {
	return predicate.History(sql.FieldNotIn(FieldNodeName, vs...))
}

// NodeNameGT applies the GT predicate on the "node_name" field.
func NodeNameGT(v string) predicate.History {
	return predicate.History(sql.FieldGT(FieldNodeName, v))
}

// NodeNameGTE applies the GTE predicate on the "node_name" field.
func NodeNameGTE(v string) predicate.History {
	return predicate.History(sql.FieldGTE(FieldNodeName, v))
}

// NodeNameLT applies the LT predicate on the "node_name" field.
func NodeNameLT(v string) predicate.History {
	return predicate.History(sql.FieldLT(FieldNodeName, v))
}

// NodeNameLTE applies the LTE predicate on the "node_name" field.
func NodeNameLTE(v string) predicate.History {
	return predicate.History(sql.FieldLTE(FieldNodeName, v))
}

// NodeNameContains applies the Contains predicate on the "node_name" field.
func NodeNameContains(v string) predicate.History {
	return predicate.History(sql.FieldContains(FieldNodeName, v))
}

// NodeNameHasPrefix applies the HasPrefix predicate on the "node_name" field.
func NodeNameHasPrefix(v string) predicate.History {
	return predicate.History(sql.FieldHasPrefix(FieldNodeName, v))
}

// NodeNameHasSuffix applies the HasSuffix predicate on the "node_name" field.
func NodeNameHasSuffix(v string) predicate.History {
	return predicate.History(sql.FieldHasSuffix(FieldNodeName, v))
}

// NodeNameEqualFold applies the EqualFold predicate on the "node_name" field.
func NodeNameEqualFold(v string) predicate.History {
	return predicate.History(sql.FieldEqualFold(FieldNodeName, v))
}

// NodeNameContainsFold applies the ContainsFold predicate on the "node_name" field.
func NodeNameContainsFold(v string) predicate.History {
	return predicate.History(sql.FieldContainsFold(FieldNodeName, v))
}

// OperatorEQ applies the EQ predicate on the "operator" field.
func OperatorEQ(v string) predicate.History {
	return predicate.History(sql.FieldEQ(FieldOperator, v))
}

// OperatorNEQ applies the NEQ predicate on the "operator" field.
func OperatorNEQ(v string) predicate.History {
	return predicate.History(sql.FieldNEQ(FieldOperator, v))
}

// OperatorIn applies the In predicate on the "operator" field.
func OperatorIn(vs ...string) predicate.History {
	return predicate.History(sql.FieldIn(FieldOperator, vs...))
}

// OperatorNotIn applies the NotIn predicate on the "operator" field.
func OperatorNotIn(vs ...string) predicate.History {
	return predicate.History(sql.FieldNotIn(FieldOperator, vs...))
}

// OperatorGT applies the GT predicate on the "operator" field.
func OperatorGT(v string) predicate.History {
	return predicate.History(sql.FieldGT(FieldOperator, v))
}

// OperatorGTE applies the GTE predicate on the "operator" field.
func OperatorGTE(v string) predicate.History {
	return predicate.History(sql.FieldGTE(FieldOperator, v))
}

// OperatorLT applies the LT predicate on the "operator" field.
func OperatorLT(v string) predicate.History {
	return predicate.History(sql.FieldLT(FieldOperator, v))
}

// OperatorLTE applies the LTE predicate on the "operator" field.
func OperatorLTE(v string) predicate.History {
	return predicate.History(sql.FieldLTE(FieldOperator, v))
}

// OperatorContains applies the Contains predicate on the "operator" field.
func OperatorContains(v string) predicate.History {
	return predicate.History(sql.FieldContains(FieldOperator, v))
}

// OperatorHasPrefix applies the HasPrefix predicate on the "operator" field.
func OperatorHasPrefix(v string) predicate.History {
	return predicate.History(sql.FieldHasPrefix(FieldOperator, v))
}

// OperatorHasSuffix applies the HasSuffix predicate on the "operator" field.
func OperatorHasSuffix(v string) predicate.History {
	return predicate.History(sql.FieldHasSuffix(FieldOperator, v))
}

// OperatorEqualFold applies the EqualFold predicate on the "operator" field.
func OperatorEqualFold(v string) predicate.History {
	return predicate.History(sql.FieldEqualFold(FieldOperator, v))
}

// OperatorContainsFold applies the ContainsFold predicate on the "operator" field.
func OperatorContainsFold(v string) predicate.History {
	return predicate.History(sql.FieldContainsFold(FieldOperator, v))
}

// OperatorDeptEQ applies the EQ predicate on the "operator_dept" field.
func OperatorDeptEQ(v string) predicate.History {
	return predicate.History(sql.FieldEQ(FieldOperatorDept, v))
}

// OperatorDeptNEQ applies the NEQ predicate on the "operator_dept" field.
func OperatorDeptNEQ(v string) predicate.History {
	return predicate.History(sql.FieldNEQ(FieldOperatorDept, v))
}

// OperatorDeptIn applies the In predicate on the "operator_dept" field.
func OperatorDeptIn(vs ...string) predicate.History {
	return predicate.History(sql.FieldIn(FieldOperatorDept, vs...))
}

// OperatorDeptNotIn applies the NotIn predicate on the "operator_dept" field.
func OperatorDeptNotIn(vs ...string) predicate.History {
	return predicate.History(sql.FieldNotIn(FieldOperatorDept, vs...))
}

// OperatorDeptGT applies the GT predicate on the "operator_dept" field.
func OperatorDeptGT(v string) predicate.History {
	return predicate.History(sql.FieldGT(FieldOperatorDept, v))
}

// OperatorDeptGTE applies the GTE predicate on the "operator_dept" field.
func OperatorDeptGTE(v string) predicate.History {
	return predicate.History(sql.FieldGTE(FieldOperatorDept, v))
}

// OperatorDeptLT applies the LT predicate on the "operator_dept" field.
func OperatorDeptLT(v string) predicate.History {
	return predicate.History(sql.FieldLT(FieldOperatorDept, v))
}

// OperatorDeptLTE applies the LTE predicate on the "operator_dept" field.
func OperatorDeptLTE(v string) predicate.History {
	return predicate.History(sql.FieldLTE(FieldOperatorDept, v))
}

// OperatorDeptContains applies the Contains predicate on the "operator_dept" field.
func OperatorDeptContains(v string) predicate.History {
	return predicate.History(sql.FieldContains(FieldOperatorDept, v))
}

// OperatorDeptHasPrefix applies the HasPrefix predicate on the "operator_dept" field.
func OperatorDeptHasPrefix(v string) predicate.History {
	return predicate.History(sql.FieldHasPrefix(FieldOperatorDept, v))
}

// OperatorDeptHasSuffix applies the HasSuffix predicate on the "operator_dept" field.
func OperatorDeptHasSuffix(v string) predicate.History {
	return predicate.History(sql.FieldHasSuffix(FieldOperatorDept, v))
}

// OperatorDeptIsNil applies the IsNil predicate on the "operator_dept" field.
func OperatorDeptIsNil() predicate.History {
	return predicate.History(sql.FieldIsNull(FieldOperatorDept))
}

// OperatorDeptNotNil applies the NotNil predicate on the "operator_dept" field.
func OperatorDeptNotNil() predicate.History {
	return predicate.History(sql.FieldNotNull(FieldOperatorDept))
}

// OperatorDeptEqualFold applies the EqualFold predicate on the "operator_dept" field.
func OperatorDeptEqualFold(v string) predicate.History {
	return predicate.History(sql.FieldEqualFold(FieldOperatorDept, v))
}

// OperatorDeptContainsFold applies the ContainsFold predicate on the "operator_dept" field.
func OperatorDeptContainsFold(v string) predicate.History {
	return predicate.History(sql.FieldContainsFold(FieldOperatorDept, v))
}

// TaskIDEQ applies the EQ predicate on the "task_id" field.
func TaskIDEQ(v string) predicate.History {
	return predicate.History(sql.FieldEQ(FieldTaskID, v))
}

// TaskIDNEQ applies the NEQ predicate on the "task_id" field.
func TaskIDNEQ(v string) predicate.History {
	return predicate.History(sql.FieldNEQ(FieldTaskID, v))
}

// TaskIDIn applies the In predicate on the "task_id" field.
func TaskIDIn(vs ...string) predicate.History {
	return predicate.History(sql.FieldIn(FieldTaskID, vs...))
}

// TaskIDNotIn applies the NotIn predicate on the "task_id" field.
func TaskIDNotIn(vs ...string) predicate.History {
	return predicate.History(sql.FieldNotIn(FieldTaskID, vs...))
}

// TaskIDGT applies the GT predicate on the "task_id" field.
func TaskIDGT(v string) predicate.History {
	return predicate.History(sql.FieldGT(FieldTaskID, v))
}

// TaskIDGTE applies the GTE predicate on the "task_id" field.
func TaskIDGTE(v string) predicate.History {
	return predicate.History(sql.FieldGTE(FieldTaskID, v))
}

// TaskIDLT applies the LT predicate on the "task_id" field.
func TaskIDLT(v string) predicate.History {
	return predicate.History(sql.FieldLT(FieldTaskID, v))
}

// TaskIDLTE applies the LTE predicate on the "task_id" field.
func TaskIDLTE(v string) predicate.History {
	return predicate.History(sql.FieldLTE(FieldTaskID, v))
}

// TaskIDContains applies the Contains predicate on the "task_id" field.
func TaskIDContains(v string) predicate.History {
	return predicate.History(sql.FieldContains(FieldTaskID, v))
}

// TaskIDHasPrefix applies the HasPrefix predicate on the "task_id" field.
func TaskIDHasPrefix(v string) predicate.History {
	return predicate.History(sql.FieldHasPrefix(FieldTaskID, v))
}

// TaskIDHasSuffix applies the HasSuffix predicate on the "task_id" field.
func TaskIDHasSuffix(v string) predicate.History {
	return predicate.History(sql.FieldHasSuffix(FieldTaskID, v))
}

// TaskIDIsNil applies the IsNil predicate on the "task_id" field.
func TaskIDIsNil() predicate.History {
	return predicate.History(sql.FieldIsNull(FieldTaskID))
}

// TaskIDNotNil applies the NotNil predicate on the "task_id" field.
func TaskIDNotNil() predicate.History {
	return predicate.History(sql.FieldNotNull(FieldTaskID))
}

// TaskIDEqualFold applies the EqualFold predicate on the "task_id" field.
func TaskIDEqualFold(v string) predicate.History {
	return predicate.History(sql.FieldEqualFold(FieldTaskID, v))
}

// TaskIDContainsFold applies the ContainsFold predicate on the "task_id" field.
func TaskIDContainsFold(v string) predicate.History {
	return predicate.History(sql.FieldContainsFold(FieldTaskID, v))
}

// FormDataIsNil applies the IsNil predicate on the "form_data" field.
func FormDataIsNil() predicate.History {
	return predicate.History(sql.FieldIsNull(FieldFormData))
}

// FormDataNotNil applies the NotNil predicate on the "form_data" field.
func FormDataNotNil() predicate.History {
	return predicate.History(sql.FieldNotNull(FieldFormData))
}

// ActionEQ applies the EQ predicate on the "action" field.
func ActionEQ(v string) predicate.History {
	return predicate.History(sql.FieldEQ(FieldAction, v))
}

// ActionNEQ applies the NEQ predicate on the "action" field.
func ActionNEQ(v string) predicate.History {
	return predicate.History(sql.FieldNEQ(FieldAction, v))
}

// ActionIn applies the In predicate on the "action" field.
func ActionIn(vs ...string) predicate.History {
	return predicate.History(sql.FieldIn(FieldAction, vs...))
}

// ActionNotIn applies the NotIn predicate on the "action" field.
func ActionNotIn(vs ...string) predicate.History {
	return predicate.History(sql.FieldNotIn(FieldAction, vs...))
}

// ActionGT applies the GT predicate on the "action" field.
func ActionGT(v string) predicate.History {
	return predicate.History(sql.FieldGT(FieldAction, v))
}

// ActionGTE applies the GTE predicate on the "action" field.
func ActionGTE(v string) predicate.History {
	return predicate.History(sql.FieldGTE(FieldAction, v))
}

// ActionLT applies the LT predicate on the "action" field.
func ActionLT(v string) predicate.History {
	return predicate.History(sql.FieldLT(FieldAction, v))
}

// ActionLTE applies the LTE predicate on the "action" field.
func ActionLTE(v string) predicate.History {
	return predicate.History(sql.FieldLTE(FieldAction, v))
}

// ActionContains applies the Contains predicate on the "action" field.
func ActionContains(v string) predicate.History {
	return predicate.History(sql.FieldContains(FieldAction, v))
}

// ActionHasPrefix applies the HasPrefix predicate on the "action" field.
func ActionHasPrefix(v string) predicate.History {
	return predicate.History(sql.FieldHasPrefix(FieldAction, v))
}

// ActionHasSuffix applies the HasSuffix predicate on the "action" field.
func ActionHasSuffix(v string) predicate.History {
	return predicate.History(sql.FieldHasSuffix(FieldAction, v))
}

// ActionEqualFold applies the EqualFold predicate on the "action" field.
func ActionEqualFold(v string) predicate.History {
	return predicate.History(sql.FieldEqualFold(FieldAction, v))
}

// ActionContainsFold applies the ContainsFold predicate on the "action" field.
func ActionContainsFold(v string) predicate.History {
	return predicate.History(sql.FieldContainsFold(FieldAction, v))
}

// CommentEQ applies the EQ predicate on the "comment" field.
func CommentEQ(v string) predicate.History {
	return predicate.History(sql.FieldEQ(FieldComment, v))
}

// CommentNEQ applies the NEQ predicate on the "comment" field.
func CommentNEQ(v string) predicate.History {
	return predicate.History(sql.FieldNEQ(FieldComment, v))
}

// CommentIn applies the In predicate on the "comment" field.
func CommentIn(vs ...string) predicate.History {
	return predicate.History(sql.FieldIn(FieldComment, vs...))
}

// CommentNotIn applies the NotIn predicate on the "comment" field.
func CommentNotIn(vs ...string) predicate.History {
	return predicate.History(sql.FieldNotIn(FieldComment, vs...))
}

// CommentGT applies the GT predicate on the "comment" field.
func CommentGT(v string) predicate.History {
	return predicate.History(sql.FieldGT(FieldComment, v))
}

// CommentGTE applies the GTE predicate on the "comment" field.
func CommentGTE(v string) predicate.History {
	return predicate.History(sql.FieldGTE(FieldComment, v))
}

// CommentLT applies the LT predicate on the "comment" field.
func CommentLT(v string) predicate.History {
	return predicate.History(sql.FieldLT(FieldComment, v))
}

// CommentLTE applies the LTE predicate on the "comment" field.
func CommentLTE(v string) predicate.History {
	return predicate.History(sql.FieldLTE(FieldComment, v))
}

// CommentContains applies the Contains predicate on the "comment" field.
func CommentContains(v string) predicate.History {
	return predicate.History(sql.FieldContains(FieldComment, v))
}

// CommentHasPrefix applies the HasPrefix predicate on the "comment" field.
func CommentHasPrefix(v string) predicate.History {
	return predicate.History(sql.FieldHasPrefix(FieldComment, v))
}

// CommentHasSuffix applies the HasSuffix predicate on the "comment" field.
func CommentHasSuffix(v string) predicate.History {
	return predicate.History(sql.FieldHasSuffix(FieldComment, v))
}

// CommentIsNil applies the IsNil predicate on the "comment" field.
func CommentIsNil() predicate.History {
	return predicate.History(sql.FieldIsNull(FieldComment))
}

// CommentNotNil applies the NotNil predicate on the "comment" field.
func CommentNotNil() predicate.History {
	return predicate.History(sql.FieldNotNull(FieldComment))
}

// CommentEqualFold applies the EqualFold predicate on the "comment" field.
func CommentEqualFold(v string) predicate.History {
	return predicate.History(sql.FieldEqualFold(FieldComment, v))
}

// CommentContainsFold applies the ContainsFold predicate on the "comment" field.
func CommentContainsFold(v string) predicate.History {
	return predicate.History(sql.FieldContainsFold(FieldComment, v))
}

// DetailsIsNil applies the IsNil predicate on the "details" field.
func DetailsIsNil() predicate.History {
	return predicate.History(sql.FieldIsNull(FieldDetails))
}

// DetailsNotNil applies the NotNil predicate on the "details" field.
func DetailsNotNil() predicate.History {
	return predicate.History(sql.FieldNotNull(FieldDetails))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.History) predicate.History {
	return predicate.History(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.History) predicate.History {
	return predicate.History(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.History) predicate.History {
	return predicate.History(sql.NotPredicates(p))
}
