// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/core/workflow/data/ent/history"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// HistoryCreate is the builder for creating a History entity.
type HistoryCreate struct {
	config
	mutation *HistoryMutation
	hooks    []Hook
}

// SetType sets the "type" field.
func (hc *HistoryCreate) SetType(s string) *HistoryCreate {
	hc.mutation.SetType(s)
	return hc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (hc *HistoryCreate) SetNillableType(s *string) *HistoryCreate {
	if s != nil {
		hc.SetType(*s)
	}
	return hc
}

// SetProcessID sets the "process_id" field.
func (hc *HistoryCreate) SetProcessID(s string) *HistoryCreate {
	hc.mutation.SetProcessID(s)
	return hc
}

// SetTemplateID sets the "template_id" field.
func (hc *HistoryCreate) SetTemplateID(s string) *HistoryCreate {
	hc.mutation.SetTemplateID(s)
	return hc
}

// SetBusinessKey sets the "business_key" field.
func (hc *HistoryCreate) SetBusinessKey(s string) *HistoryCreate {
	hc.mutation.SetBusinessKey(s)
	return hc
}

// SetNodeKey sets the "node_key" field.
func (hc *HistoryCreate) SetNodeKey(s string) *HistoryCreate {
	hc.mutation.SetNodeKey(s)
	return hc
}

// SetNodeType sets the "node_type" field.
func (hc *HistoryCreate) SetNodeType(s string) *HistoryCreate {
	hc.mutation.SetNodeType(s)
	return hc
}

// SetNodeConfig sets the "node_config" field.
func (hc *HistoryCreate) SetNodeConfig(m map[string]interface{}) *HistoryCreate {
	hc.mutation.SetNodeConfig(m)
	return hc
}

// SetNodeRules sets the "node_rules" field.
func (hc *HistoryCreate) SetNodeRules(m map[string]interface{}) *HistoryCreate {
	hc.mutation.SetNodeRules(m)
	return hc
}

// SetNodeEvents sets the "node_events" field.
func (hc *HistoryCreate) SetNodeEvents(m map[string]interface{}) *HistoryCreate {
	hc.mutation.SetNodeEvents(m)
	return hc
}

// SetTenantID sets the "tenant_id" field.
func (hc *HistoryCreate) SetTenantID(s string) *HistoryCreate {
	hc.mutation.SetTenantID(s)
	return hc
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (hc *HistoryCreate) SetNillableTenantID(s *string) *HistoryCreate {
	if s != nil {
		hc.SetTenantID(*s)
	}
	return hc
}

// SetCreatedBy sets the "created_by" field.
func (hc *HistoryCreate) SetCreatedBy(s string) *HistoryCreate {
	hc.mutation.SetCreatedBy(s)
	return hc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (hc *HistoryCreate) SetNillableCreatedBy(s *string) *HistoryCreate {
	if s != nil {
		hc.SetCreatedBy(*s)
	}
	return hc
}

// SetUpdatedBy sets the "updated_by" field.
func (hc *HistoryCreate) SetUpdatedBy(s string) *HistoryCreate {
	hc.mutation.SetUpdatedBy(s)
	return hc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (hc *HistoryCreate) SetNillableUpdatedBy(s *string) *HistoryCreate {
	if s != nil {
		hc.SetUpdatedBy(*s)
	}
	return hc
}

// SetCreatedAt sets the "created_at" field.
func (hc *HistoryCreate) SetCreatedAt(i int64) *HistoryCreate {
	hc.mutation.SetCreatedAt(i)
	return hc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (hc *HistoryCreate) SetNillableCreatedAt(i *int64) *HistoryCreate {
	if i != nil {
		hc.SetCreatedAt(*i)
	}
	return hc
}

// SetUpdatedAt sets the "updated_at" field.
func (hc *HistoryCreate) SetUpdatedAt(i int64) *HistoryCreate {
	hc.mutation.SetUpdatedAt(i)
	return hc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (hc *HistoryCreate) SetNillableUpdatedAt(i *int64) *HistoryCreate {
	if i != nil {
		hc.SetUpdatedAt(*i)
	}
	return hc
}

// SetNodeName sets the "node_name" field.
func (hc *HistoryCreate) SetNodeName(s string) *HistoryCreate {
	hc.mutation.SetNodeName(s)
	return hc
}

// SetOperator sets the "operator" field.
func (hc *HistoryCreate) SetOperator(s string) *HistoryCreate {
	hc.mutation.SetOperator(s)
	return hc
}

// SetOperatorDept sets the "operator_dept" field.
func (hc *HistoryCreate) SetOperatorDept(s string) *HistoryCreate {
	hc.mutation.SetOperatorDept(s)
	return hc
}

// SetNillableOperatorDept sets the "operator_dept" field if the given value is not nil.
func (hc *HistoryCreate) SetNillableOperatorDept(s *string) *HistoryCreate {
	if s != nil {
		hc.SetOperatorDept(*s)
	}
	return hc
}

// SetTaskID sets the "task_id" field.
func (hc *HistoryCreate) SetTaskID(s string) *HistoryCreate {
	hc.mutation.SetTaskID(s)
	return hc
}

// SetNillableTaskID sets the "task_id" field if the given value is not nil.
func (hc *HistoryCreate) SetNillableTaskID(s *string) *HistoryCreate {
	if s != nil {
		hc.SetTaskID(*s)
	}
	return hc
}

// SetVariables sets the "variables" field.
func (hc *HistoryCreate) SetVariables(m map[string]interface{}) *HistoryCreate {
	hc.mutation.SetVariables(m)
	return hc
}

// SetFormData sets the "form_data" field.
func (hc *HistoryCreate) SetFormData(m map[string]interface{}) *HistoryCreate {
	hc.mutation.SetFormData(m)
	return hc
}

// SetAction sets the "action" field.
func (hc *HistoryCreate) SetAction(s string) *HistoryCreate {
	hc.mutation.SetAction(s)
	return hc
}

// SetComment sets the "comment" field.
func (hc *HistoryCreate) SetComment(s string) *HistoryCreate {
	hc.mutation.SetComment(s)
	return hc
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (hc *HistoryCreate) SetNillableComment(s *string) *HistoryCreate {
	if s != nil {
		hc.SetComment(*s)
	}
	return hc
}

// SetDetails sets the "details" field.
func (hc *HistoryCreate) SetDetails(m map[string]interface{}) *HistoryCreate {
	hc.mutation.SetDetails(m)
	return hc
}

// SetID sets the "id" field.
func (hc *HistoryCreate) SetID(s string) *HistoryCreate {
	hc.mutation.SetID(s)
	return hc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (hc *HistoryCreate) SetNillableID(s *string) *HistoryCreate {
	if s != nil {
		hc.SetID(*s)
	}
	return hc
}

// Mutation returns the HistoryMutation object of the builder.
func (hc *HistoryCreate) Mutation() *HistoryMutation {
	return hc.mutation
}

// Save creates the History in the database.
func (hc *HistoryCreate) Save(ctx context.Context) (*History, error) {
	hc.defaults()
	return withHooks(ctx, hc.sqlSave, hc.mutation, hc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (hc *HistoryCreate) SaveX(ctx context.Context) *History {
	v, err := hc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hc *HistoryCreate) Exec(ctx context.Context) error {
	_, err := hc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hc *HistoryCreate) ExecX(ctx context.Context) {
	if err := hc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (hc *HistoryCreate) defaults() {
	if _, ok := hc.mutation.CreatedAt(); !ok {
		v := history.DefaultCreatedAt()
		hc.mutation.SetCreatedAt(v)
	}
	if _, ok := hc.mutation.UpdatedAt(); !ok {
		v := history.DefaultUpdatedAt()
		hc.mutation.SetUpdatedAt(v)
	}
	if _, ok := hc.mutation.ID(); !ok {
		v := history.DefaultID()
		hc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hc *HistoryCreate) check() error {
	if _, ok := hc.mutation.ProcessID(); !ok {
		return &ValidationError{Name: "process_id", err: errors.New(`ent: missing required field "History.process_id"`)}
	}
	if _, ok := hc.mutation.TemplateID(); !ok {
		return &ValidationError{Name: "template_id", err: errors.New(`ent: missing required field "History.template_id"`)}
	}
	if _, ok := hc.mutation.BusinessKey(); !ok {
		return &ValidationError{Name: "business_key", err: errors.New(`ent: missing required field "History.business_key"`)}
	}
	if _, ok := hc.mutation.NodeKey(); !ok {
		return &ValidationError{Name: "node_key", err: errors.New(`ent: missing required field "History.node_key"`)}
	}
	if _, ok := hc.mutation.NodeType(); !ok {
		return &ValidationError{Name: "node_type", err: errors.New(`ent: missing required field "History.node_type"`)}
	}
	if v, ok := hc.mutation.TenantID(); ok {
		if err := history.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "History.tenant_id": %w`, err)}
		}
	}
	if v, ok := hc.mutation.CreatedBy(); ok {
		if err := history.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "History.created_by": %w`, err)}
		}
	}
	if v, ok := hc.mutation.UpdatedBy(); ok {
		if err := history.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "History.updated_by": %w`, err)}
		}
	}
	if _, ok := hc.mutation.NodeName(); !ok {
		return &ValidationError{Name: "node_name", err: errors.New(`ent: missing required field "History.node_name"`)}
	}
	if _, ok := hc.mutation.Operator(); !ok {
		return &ValidationError{Name: "operator", err: errors.New(`ent: missing required field "History.operator"`)}
	}
	if _, ok := hc.mutation.Variables(); !ok {
		return &ValidationError{Name: "variables", err: errors.New(`ent: missing required field "History.variables"`)}
	}
	if _, ok := hc.mutation.Action(); !ok {
		return &ValidationError{Name: "action", err: errors.New(`ent: missing required field "History.action"`)}
	}
	if v, ok := hc.mutation.ID(); ok {
		if err := history.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "History.id": %w`, err)}
		}
	}
	return nil
}

func (hc *HistoryCreate) sqlSave(ctx context.Context) (*History, error) {
	if err := hc.check(); err != nil {
		return nil, err
	}
	_node, _spec := hc.createSpec()
	if err := sqlgraph.CreateNode(ctx, hc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected History.ID type: %T", _spec.ID.Value)
		}
	}
	hc.mutation.id = &_node.ID
	hc.mutation.done = true
	return _node, nil
}

func (hc *HistoryCreate) createSpec() (*History, *sqlgraph.CreateSpec) {
	var (
		_node = &History{config: hc.config}
		_spec = sqlgraph.NewCreateSpec(history.Table, sqlgraph.NewFieldSpec(history.FieldID, field.TypeString))
	)
	if id, ok := hc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := hc.mutation.GetType(); ok {
		_spec.SetField(history.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := hc.mutation.ProcessID(); ok {
		_spec.SetField(history.FieldProcessID, field.TypeString, value)
		_node.ProcessID = value
	}
	if value, ok := hc.mutation.TemplateID(); ok {
		_spec.SetField(history.FieldTemplateID, field.TypeString, value)
		_node.TemplateID = value
	}
	if value, ok := hc.mutation.BusinessKey(); ok {
		_spec.SetField(history.FieldBusinessKey, field.TypeString, value)
		_node.BusinessKey = value
	}
	if value, ok := hc.mutation.NodeKey(); ok {
		_spec.SetField(history.FieldNodeKey, field.TypeString, value)
		_node.NodeKey = value
	}
	if value, ok := hc.mutation.NodeType(); ok {
		_spec.SetField(history.FieldNodeType, field.TypeString, value)
		_node.NodeType = value
	}
	if value, ok := hc.mutation.NodeConfig(); ok {
		_spec.SetField(history.FieldNodeConfig, field.TypeJSON, value)
		_node.NodeConfig = value
	}
	if value, ok := hc.mutation.NodeRules(); ok {
		_spec.SetField(history.FieldNodeRules, field.TypeJSON, value)
		_node.NodeRules = value
	}
	if value, ok := hc.mutation.NodeEvents(); ok {
		_spec.SetField(history.FieldNodeEvents, field.TypeJSON, value)
		_node.NodeEvents = value
	}
	if value, ok := hc.mutation.TenantID(); ok {
		_spec.SetField(history.FieldTenantID, field.TypeString, value)
		_node.TenantID = value
	}
	if value, ok := hc.mutation.CreatedBy(); ok {
		_spec.SetField(history.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := hc.mutation.UpdatedBy(); ok {
		_spec.SetField(history.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := hc.mutation.CreatedAt(); ok {
		_spec.SetField(history.FieldCreatedAt, field.TypeInt64, value)
		_node.CreatedAt = value
	}
	if value, ok := hc.mutation.UpdatedAt(); ok {
		_spec.SetField(history.FieldUpdatedAt, field.TypeInt64, value)
		_node.UpdatedAt = value
	}
	if value, ok := hc.mutation.NodeName(); ok {
		_spec.SetField(history.FieldNodeName, field.TypeString, value)
		_node.NodeName = value
	}
	if value, ok := hc.mutation.Operator(); ok {
		_spec.SetField(history.FieldOperator, field.TypeString, value)
		_node.Operator = value
	}
	if value, ok := hc.mutation.OperatorDept(); ok {
		_spec.SetField(history.FieldOperatorDept, field.TypeString, value)
		_node.OperatorDept = value
	}
	if value, ok := hc.mutation.TaskID(); ok {
		_spec.SetField(history.FieldTaskID, field.TypeString, value)
		_node.TaskID = value
	}
	if value, ok := hc.mutation.Variables(); ok {
		_spec.SetField(history.FieldVariables, field.TypeJSON, value)
		_node.Variables = value
	}
	if value, ok := hc.mutation.FormData(); ok {
		_spec.SetField(history.FieldFormData, field.TypeJSON, value)
		_node.FormData = value
	}
	if value, ok := hc.mutation.Action(); ok {
		_spec.SetField(history.FieldAction, field.TypeString, value)
		_node.Action = value
	}
	if value, ok := hc.mutation.Comment(); ok {
		_spec.SetField(history.FieldComment, field.TypeString, value)
		_node.Comment = value
	}
	if value, ok := hc.mutation.Details(); ok {
		_spec.SetField(history.FieldDetails, field.TypeJSON, value)
		_node.Details = value
	}
	return _node, _spec
}

// HistoryCreateBulk is the builder for creating many History entities in bulk.
type HistoryCreateBulk struct {
	config
	err      error
	builders []*HistoryCreate
}

// Save creates the History entities in the database.
func (hcb *HistoryCreateBulk) Save(ctx context.Context) ([]*History, error) {
	if hcb.err != nil {
		return nil, hcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(hcb.builders))
	nodes := make([]*History, len(hcb.builders))
	mutators := make([]Mutator, len(hcb.builders))
	for i := range hcb.builders {
		func(i int, root context.Context) {
			builder := hcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*HistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, hcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, hcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, hcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (hcb *HistoryCreateBulk) SaveX(ctx context.Context) []*History {
	v, err := hcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hcb *HistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := hcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hcb *HistoryCreateBulk) ExecX(ctx context.Context) {
	if err := hcb.Exec(ctx); err != nil {
		panic(err)
	}
}
