// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/workflow/data/ent/history"
	"ncobase/workflow/data/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// HistoryUpdate is the builder for updating History entities.
type HistoryUpdate struct {
	config
	hooks    []Hook
	mutation *HistoryMutation
}

// Where appends a list predicates to the HistoryUpdate builder.
func (hu *HistoryUpdate) Where(ps ...predicate.History) *HistoryUpdate {
	hu.mutation.Where(ps...)
	return hu
}

// SetType sets the "type" field.
func (hu *HistoryUpdate) SetType(s string) *HistoryUpdate {
	hu.mutation.SetType(s)
	return hu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (hu *HistoryUpdate) SetNillableType(s *string) *HistoryUpdate {
	if s != nil {
		hu.SetType(*s)
	}
	return hu
}

// ClearType clears the value of the "type" field.
func (hu *HistoryUpdate) ClearType() *HistoryUpdate {
	hu.mutation.ClearType()
	return hu
}

// SetProcessID sets the "process_id" field.
func (hu *HistoryUpdate) SetProcessID(s string) *HistoryUpdate {
	hu.mutation.SetProcessID(s)
	return hu
}

// SetNillableProcessID sets the "process_id" field if the given value is not nil.
func (hu *HistoryUpdate) SetNillableProcessID(s *string) *HistoryUpdate {
	if s != nil {
		hu.SetProcessID(*s)
	}
	return hu
}

// SetTemplateID sets the "template_id" field.
func (hu *HistoryUpdate) SetTemplateID(s string) *HistoryUpdate {
	hu.mutation.SetTemplateID(s)
	return hu
}

// SetNillableTemplateID sets the "template_id" field if the given value is not nil.
func (hu *HistoryUpdate) SetNillableTemplateID(s *string) *HistoryUpdate {
	if s != nil {
		hu.SetTemplateID(*s)
	}
	return hu
}

// SetBusinessKey sets the "business_key" field.
func (hu *HistoryUpdate) SetBusinessKey(s string) *HistoryUpdate {
	hu.mutation.SetBusinessKey(s)
	return hu
}

// SetNillableBusinessKey sets the "business_key" field if the given value is not nil.
func (hu *HistoryUpdate) SetNillableBusinessKey(s *string) *HistoryUpdate {
	if s != nil {
		hu.SetBusinessKey(*s)
	}
	return hu
}

// SetNodeKey sets the "node_key" field.
func (hu *HistoryUpdate) SetNodeKey(s string) *HistoryUpdate {
	hu.mutation.SetNodeKey(s)
	return hu
}

// SetNillableNodeKey sets the "node_key" field if the given value is not nil.
func (hu *HistoryUpdate) SetNillableNodeKey(s *string) *HistoryUpdate {
	if s != nil {
		hu.SetNodeKey(*s)
	}
	return hu
}

// SetNodeType sets the "node_type" field.
func (hu *HistoryUpdate) SetNodeType(s string) *HistoryUpdate {
	hu.mutation.SetNodeType(s)
	return hu
}

// SetNillableNodeType sets the "node_type" field if the given value is not nil.
func (hu *HistoryUpdate) SetNillableNodeType(s *string) *HistoryUpdate {
	if s != nil {
		hu.SetNodeType(*s)
	}
	return hu
}

// SetNodeConfig sets the "node_config" field.
func (hu *HistoryUpdate) SetNodeConfig(m map[string]interface{}) *HistoryUpdate {
	hu.mutation.SetNodeConfig(m)
	return hu
}

// ClearNodeConfig clears the value of the "node_config" field.
func (hu *HistoryUpdate) ClearNodeConfig() *HistoryUpdate {
	hu.mutation.ClearNodeConfig()
	return hu
}

// SetNodeRules sets the "node_rules" field.
func (hu *HistoryUpdate) SetNodeRules(m map[string]interface{}) *HistoryUpdate {
	hu.mutation.SetNodeRules(m)
	return hu
}

// ClearNodeRules clears the value of the "node_rules" field.
func (hu *HistoryUpdate) ClearNodeRules() *HistoryUpdate {
	hu.mutation.ClearNodeRules()
	return hu
}

// SetNodeEvents sets the "node_events" field.
func (hu *HistoryUpdate) SetNodeEvents(m map[string]interface{}) *HistoryUpdate {
	hu.mutation.SetNodeEvents(m)
	return hu
}

// ClearNodeEvents clears the value of the "node_events" field.
func (hu *HistoryUpdate) ClearNodeEvents() *HistoryUpdate {
	hu.mutation.ClearNodeEvents()
	return hu
}

// SetTenantID sets the "tenant_id" field.
func (hu *HistoryUpdate) SetTenantID(s string) *HistoryUpdate {
	hu.mutation.SetTenantID(s)
	return hu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (hu *HistoryUpdate) SetNillableTenantID(s *string) *HistoryUpdate {
	if s != nil {
		hu.SetTenantID(*s)
	}
	return hu
}

// ClearTenantID clears the value of the "tenant_id" field.
func (hu *HistoryUpdate) ClearTenantID() *HistoryUpdate {
	hu.mutation.ClearTenantID()
	return hu
}

// SetCreatedBy sets the "created_by" field.
func (hu *HistoryUpdate) SetCreatedBy(s string) *HistoryUpdate {
	hu.mutation.SetCreatedBy(s)
	return hu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (hu *HistoryUpdate) SetNillableCreatedBy(s *string) *HistoryUpdate {
	if s != nil {
		hu.SetCreatedBy(*s)
	}
	return hu
}

// ClearCreatedBy clears the value of the "created_by" field.
func (hu *HistoryUpdate) ClearCreatedBy() *HistoryUpdate {
	hu.mutation.ClearCreatedBy()
	return hu
}

// SetUpdatedBy sets the "updated_by" field.
func (hu *HistoryUpdate) SetUpdatedBy(s string) *HistoryUpdate {
	hu.mutation.SetUpdatedBy(s)
	return hu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (hu *HistoryUpdate) SetNillableUpdatedBy(s *string) *HistoryUpdate {
	if s != nil {
		hu.SetUpdatedBy(*s)
	}
	return hu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (hu *HistoryUpdate) ClearUpdatedBy() *HistoryUpdate {
	hu.mutation.ClearUpdatedBy()
	return hu
}

// SetUpdatedAt sets the "updated_at" field.
func (hu *HistoryUpdate) SetUpdatedAt(i int64) *HistoryUpdate {
	hu.mutation.ResetUpdatedAt()
	hu.mutation.SetUpdatedAt(i)
	return hu
}

// AddUpdatedAt adds i to the "updated_at" field.
func (hu *HistoryUpdate) AddUpdatedAt(i int64) *HistoryUpdate {
	hu.mutation.AddUpdatedAt(i)
	return hu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (hu *HistoryUpdate) ClearUpdatedAt() *HistoryUpdate {
	hu.mutation.ClearUpdatedAt()
	return hu
}

// SetNodeName sets the "node_name" field.
func (hu *HistoryUpdate) SetNodeName(s string) *HistoryUpdate {
	hu.mutation.SetNodeName(s)
	return hu
}

// SetNillableNodeName sets the "node_name" field if the given value is not nil.
func (hu *HistoryUpdate) SetNillableNodeName(s *string) *HistoryUpdate {
	if s != nil {
		hu.SetNodeName(*s)
	}
	return hu
}

// SetOperator sets the "operator" field.
func (hu *HistoryUpdate) SetOperator(s string) *HistoryUpdate {
	hu.mutation.SetOperator(s)
	return hu
}

// SetNillableOperator sets the "operator" field if the given value is not nil.
func (hu *HistoryUpdate) SetNillableOperator(s *string) *HistoryUpdate {
	if s != nil {
		hu.SetOperator(*s)
	}
	return hu
}

// SetOperatorDept sets the "operator_dept" field.
func (hu *HistoryUpdate) SetOperatorDept(s string) *HistoryUpdate {
	hu.mutation.SetOperatorDept(s)
	return hu
}

// SetNillableOperatorDept sets the "operator_dept" field if the given value is not nil.
func (hu *HistoryUpdate) SetNillableOperatorDept(s *string) *HistoryUpdate {
	if s != nil {
		hu.SetOperatorDept(*s)
	}
	return hu
}

// ClearOperatorDept clears the value of the "operator_dept" field.
func (hu *HistoryUpdate) ClearOperatorDept() *HistoryUpdate {
	hu.mutation.ClearOperatorDept()
	return hu
}

// SetTaskID sets the "task_id" field.
func (hu *HistoryUpdate) SetTaskID(s string) *HistoryUpdate {
	hu.mutation.SetTaskID(s)
	return hu
}

// SetNillableTaskID sets the "task_id" field if the given value is not nil.
func (hu *HistoryUpdate) SetNillableTaskID(s *string) *HistoryUpdate {
	if s != nil {
		hu.SetTaskID(*s)
	}
	return hu
}

// ClearTaskID clears the value of the "task_id" field.
func (hu *HistoryUpdate) ClearTaskID() *HistoryUpdate {
	hu.mutation.ClearTaskID()
	return hu
}

// SetVariables sets the "variables" field.
func (hu *HistoryUpdate) SetVariables(m map[string]interface{}) *HistoryUpdate {
	hu.mutation.SetVariables(m)
	return hu
}

// SetFormData sets the "form_data" field.
func (hu *HistoryUpdate) SetFormData(m map[string]interface{}) *HistoryUpdate {
	hu.mutation.SetFormData(m)
	return hu
}

// ClearFormData clears the value of the "form_data" field.
func (hu *HistoryUpdate) ClearFormData() *HistoryUpdate {
	hu.mutation.ClearFormData()
	return hu
}

// SetAction sets the "action" field.
func (hu *HistoryUpdate) SetAction(s string) *HistoryUpdate {
	hu.mutation.SetAction(s)
	return hu
}

// SetNillableAction sets the "action" field if the given value is not nil.
func (hu *HistoryUpdate) SetNillableAction(s *string) *HistoryUpdate {
	if s != nil {
		hu.SetAction(*s)
	}
	return hu
}

// SetComment sets the "comment" field.
func (hu *HistoryUpdate) SetComment(s string) *HistoryUpdate {
	hu.mutation.SetComment(s)
	return hu
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (hu *HistoryUpdate) SetNillableComment(s *string) *HistoryUpdate {
	if s != nil {
		hu.SetComment(*s)
	}
	return hu
}

// ClearComment clears the value of the "comment" field.
func (hu *HistoryUpdate) ClearComment() *HistoryUpdate {
	hu.mutation.ClearComment()
	return hu
}

// SetDetails sets the "details" field.
func (hu *HistoryUpdate) SetDetails(m map[string]interface{}) *HistoryUpdate {
	hu.mutation.SetDetails(m)
	return hu
}

// ClearDetails clears the value of the "details" field.
func (hu *HistoryUpdate) ClearDetails() *HistoryUpdate {
	hu.mutation.ClearDetails()
	return hu
}

// Mutation returns the HistoryMutation object of the builder.
func (hu *HistoryUpdate) Mutation() *HistoryMutation {
	return hu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (hu *HistoryUpdate) Save(ctx context.Context) (int, error) {
	hu.defaults()
	return withHooks(ctx, hu.sqlSave, hu.mutation, hu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (hu *HistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := hu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (hu *HistoryUpdate) Exec(ctx context.Context) error {
	_, err := hu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hu *HistoryUpdate) ExecX(ctx context.Context) {
	if err := hu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (hu *HistoryUpdate) defaults() {
	if _, ok := hu.mutation.UpdatedAt(); !ok && !hu.mutation.UpdatedAtCleared() {
		v := history.UpdateDefaultUpdatedAt()
		hu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hu *HistoryUpdate) check() error {
	if v, ok := hu.mutation.TenantID(); ok {
		if err := history.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "History.tenant_id": %w`, err)}
		}
	}
	if v, ok := hu.mutation.CreatedBy(); ok {
		if err := history.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "History.created_by": %w`, err)}
		}
	}
	if v, ok := hu.mutation.UpdatedBy(); ok {
		if err := history.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "History.updated_by": %w`, err)}
		}
	}
	return nil
}

func (hu *HistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := hu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(history.Table, history.Columns, sqlgraph.NewFieldSpec(history.FieldID, field.TypeString))
	if ps := hu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hu.mutation.GetType(); ok {
		_spec.SetField(history.FieldType, field.TypeString, value)
	}
	if hu.mutation.TypeCleared() {
		_spec.ClearField(history.FieldType, field.TypeString)
	}
	if value, ok := hu.mutation.ProcessID(); ok {
		_spec.SetField(history.FieldProcessID, field.TypeString, value)
	}
	if value, ok := hu.mutation.TemplateID(); ok {
		_spec.SetField(history.FieldTemplateID, field.TypeString, value)
	}
	if value, ok := hu.mutation.BusinessKey(); ok {
		_spec.SetField(history.FieldBusinessKey, field.TypeString, value)
	}
	if value, ok := hu.mutation.NodeKey(); ok {
		_spec.SetField(history.FieldNodeKey, field.TypeString, value)
	}
	if value, ok := hu.mutation.NodeType(); ok {
		_spec.SetField(history.FieldNodeType, field.TypeString, value)
	}
	if value, ok := hu.mutation.NodeConfig(); ok {
		_spec.SetField(history.FieldNodeConfig, field.TypeJSON, value)
	}
	if hu.mutation.NodeConfigCleared() {
		_spec.ClearField(history.FieldNodeConfig, field.TypeJSON)
	}
	if value, ok := hu.mutation.NodeRules(); ok {
		_spec.SetField(history.FieldNodeRules, field.TypeJSON, value)
	}
	if hu.mutation.NodeRulesCleared() {
		_spec.ClearField(history.FieldNodeRules, field.TypeJSON)
	}
	if value, ok := hu.mutation.NodeEvents(); ok {
		_spec.SetField(history.FieldNodeEvents, field.TypeJSON, value)
	}
	if hu.mutation.NodeEventsCleared() {
		_spec.ClearField(history.FieldNodeEvents, field.TypeJSON)
	}
	if value, ok := hu.mutation.TenantID(); ok {
		_spec.SetField(history.FieldTenantID, field.TypeString, value)
	}
	if hu.mutation.TenantIDCleared() {
		_spec.ClearField(history.FieldTenantID, field.TypeString)
	}
	if value, ok := hu.mutation.CreatedBy(); ok {
		_spec.SetField(history.FieldCreatedBy, field.TypeString, value)
	}
	if hu.mutation.CreatedByCleared() {
		_spec.ClearField(history.FieldCreatedBy, field.TypeString)
	}
	if value, ok := hu.mutation.UpdatedBy(); ok {
		_spec.SetField(history.FieldUpdatedBy, field.TypeString, value)
	}
	if hu.mutation.UpdatedByCleared() {
		_spec.ClearField(history.FieldUpdatedBy, field.TypeString)
	}
	if hu.mutation.CreatedAtCleared() {
		_spec.ClearField(history.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := hu.mutation.UpdatedAt(); ok {
		_spec.SetField(history.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := hu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(history.FieldUpdatedAt, field.TypeInt64, value)
	}
	if hu.mutation.UpdatedAtCleared() {
		_spec.ClearField(history.FieldUpdatedAt, field.TypeInt64)
	}
	if value, ok := hu.mutation.NodeName(); ok {
		_spec.SetField(history.FieldNodeName, field.TypeString, value)
	}
	if value, ok := hu.mutation.Operator(); ok {
		_spec.SetField(history.FieldOperator, field.TypeString, value)
	}
	if value, ok := hu.mutation.OperatorDept(); ok {
		_spec.SetField(history.FieldOperatorDept, field.TypeString, value)
	}
	if hu.mutation.OperatorDeptCleared() {
		_spec.ClearField(history.FieldOperatorDept, field.TypeString)
	}
	if value, ok := hu.mutation.TaskID(); ok {
		_spec.SetField(history.FieldTaskID, field.TypeString, value)
	}
	if hu.mutation.TaskIDCleared() {
		_spec.ClearField(history.FieldTaskID, field.TypeString)
	}
	if value, ok := hu.mutation.Variables(); ok {
		_spec.SetField(history.FieldVariables, field.TypeJSON, value)
	}
	if value, ok := hu.mutation.FormData(); ok {
		_spec.SetField(history.FieldFormData, field.TypeJSON, value)
	}
	if hu.mutation.FormDataCleared() {
		_spec.ClearField(history.FieldFormData, field.TypeJSON)
	}
	if value, ok := hu.mutation.Action(); ok {
		_spec.SetField(history.FieldAction, field.TypeString, value)
	}
	if value, ok := hu.mutation.Comment(); ok {
		_spec.SetField(history.FieldComment, field.TypeString, value)
	}
	if hu.mutation.CommentCleared() {
		_spec.ClearField(history.FieldComment, field.TypeString)
	}
	if value, ok := hu.mutation.Details(); ok {
		_spec.SetField(history.FieldDetails, field.TypeJSON, value)
	}
	if hu.mutation.DetailsCleared() {
		_spec.ClearField(history.FieldDetails, field.TypeJSON)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, hu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{history.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	hu.mutation.done = true
	return n, nil
}

// HistoryUpdateOne is the builder for updating a single History entity.
type HistoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *HistoryMutation
}

// SetType sets the "type" field.
func (huo *HistoryUpdateOne) SetType(s string) *HistoryUpdateOne {
	huo.mutation.SetType(s)
	return huo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (huo *HistoryUpdateOne) SetNillableType(s *string) *HistoryUpdateOne {
	if s != nil {
		huo.SetType(*s)
	}
	return huo
}

// ClearType clears the value of the "type" field.
func (huo *HistoryUpdateOne) ClearType() *HistoryUpdateOne {
	huo.mutation.ClearType()
	return huo
}

// SetProcessID sets the "process_id" field.
func (huo *HistoryUpdateOne) SetProcessID(s string) *HistoryUpdateOne {
	huo.mutation.SetProcessID(s)
	return huo
}

// SetNillableProcessID sets the "process_id" field if the given value is not nil.
func (huo *HistoryUpdateOne) SetNillableProcessID(s *string) *HistoryUpdateOne {
	if s != nil {
		huo.SetProcessID(*s)
	}
	return huo
}

// SetTemplateID sets the "template_id" field.
func (huo *HistoryUpdateOne) SetTemplateID(s string) *HistoryUpdateOne {
	huo.mutation.SetTemplateID(s)
	return huo
}

// SetNillableTemplateID sets the "template_id" field if the given value is not nil.
func (huo *HistoryUpdateOne) SetNillableTemplateID(s *string) *HistoryUpdateOne {
	if s != nil {
		huo.SetTemplateID(*s)
	}
	return huo
}

// SetBusinessKey sets the "business_key" field.
func (huo *HistoryUpdateOne) SetBusinessKey(s string) *HistoryUpdateOne {
	huo.mutation.SetBusinessKey(s)
	return huo
}

// SetNillableBusinessKey sets the "business_key" field if the given value is not nil.
func (huo *HistoryUpdateOne) SetNillableBusinessKey(s *string) *HistoryUpdateOne {
	if s != nil {
		huo.SetBusinessKey(*s)
	}
	return huo
}

// SetNodeKey sets the "node_key" field.
func (huo *HistoryUpdateOne) SetNodeKey(s string) *HistoryUpdateOne {
	huo.mutation.SetNodeKey(s)
	return huo
}

// SetNillableNodeKey sets the "node_key" field if the given value is not nil.
func (huo *HistoryUpdateOne) SetNillableNodeKey(s *string) *HistoryUpdateOne {
	if s != nil {
		huo.SetNodeKey(*s)
	}
	return huo
}

// SetNodeType sets the "node_type" field.
func (huo *HistoryUpdateOne) SetNodeType(s string) *HistoryUpdateOne {
	huo.mutation.SetNodeType(s)
	return huo
}

// SetNillableNodeType sets the "node_type" field if the given value is not nil.
func (huo *HistoryUpdateOne) SetNillableNodeType(s *string) *HistoryUpdateOne {
	if s != nil {
		huo.SetNodeType(*s)
	}
	return huo
}

// SetNodeConfig sets the "node_config" field.
func (huo *HistoryUpdateOne) SetNodeConfig(m map[string]interface{}) *HistoryUpdateOne {
	huo.mutation.SetNodeConfig(m)
	return huo
}

// ClearNodeConfig clears the value of the "node_config" field.
func (huo *HistoryUpdateOne) ClearNodeConfig() *HistoryUpdateOne {
	huo.mutation.ClearNodeConfig()
	return huo
}

// SetNodeRules sets the "node_rules" field.
func (huo *HistoryUpdateOne) SetNodeRules(m map[string]interface{}) *HistoryUpdateOne {
	huo.mutation.SetNodeRules(m)
	return huo
}

// ClearNodeRules clears the value of the "node_rules" field.
func (huo *HistoryUpdateOne) ClearNodeRules() *HistoryUpdateOne {
	huo.mutation.ClearNodeRules()
	return huo
}

// SetNodeEvents sets the "node_events" field.
func (huo *HistoryUpdateOne) SetNodeEvents(m map[string]interface{}) *HistoryUpdateOne {
	huo.mutation.SetNodeEvents(m)
	return huo
}

// ClearNodeEvents clears the value of the "node_events" field.
func (huo *HistoryUpdateOne) ClearNodeEvents() *HistoryUpdateOne {
	huo.mutation.ClearNodeEvents()
	return huo
}

// SetTenantID sets the "tenant_id" field.
func (huo *HistoryUpdateOne) SetTenantID(s string) *HistoryUpdateOne {
	huo.mutation.SetTenantID(s)
	return huo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (huo *HistoryUpdateOne) SetNillableTenantID(s *string) *HistoryUpdateOne {
	if s != nil {
		huo.SetTenantID(*s)
	}
	return huo
}

// ClearTenantID clears the value of the "tenant_id" field.
func (huo *HistoryUpdateOne) ClearTenantID() *HistoryUpdateOne {
	huo.mutation.ClearTenantID()
	return huo
}

// SetCreatedBy sets the "created_by" field.
func (huo *HistoryUpdateOne) SetCreatedBy(s string) *HistoryUpdateOne {
	huo.mutation.SetCreatedBy(s)
	return huo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (huo *HistoryUpdateOne) SetNillableCreatedBy(s *string) *HistoryUpdateOne {
	if s != nil {
		huo.SetCreatedBy(*s)
	}
	return huo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (huo *HistoryUpdateOne) ClearCreatedBy() *HistoryUpdateOne {
	huo.mutation.ClearCreatedBy()
	return huo
}

// SetUpdatedBy sets the "updated_by" field.
func (huo *HistoryUpdateOne) SetUpdatedBy(s string) *HistoryUpdateOne {
	huo.mutation.SetUpdatedBy(s)
	return huo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (huo *HistoryUpdateOne) SetNillableUpdatedBy(s *string) *HistoryUpdateOne {
	if s != nil {
		huo.SetUpdatedBy(*s)
	}
	return huo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (huo *HistoryUpdateOne) ClearUpdatedBy() *HistoryUpdateOne {
	huo.mutation.ClearUpdatedBy()
	return huo
}

// SetUpdatedAt sets the "updated_at" field.
func (huo *HistoryUpdateOne) SetUpdatedAt(i int64) *HistoryUpdateOne {
	huo.mutation.ResetUpdatedAt()
	huo.mutation.SetUpdatedAt(i)
	return huo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (huo *HistoryUpdateOne) AddUpdatedAt(i int64) *HistoryUpdateOne {
	huo.mutation.AddUpdatedAt(i)
	return huo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (huo *HistoryUpdateOne) ClearUpdatedAt() *HistoryUpdateOne {
	huo.mutation.ClearUpdatedAt()
	return huo
}

// SetNodeName sets the "node_name" field.
func (huo *HistoryUpdateOne) SetNodeName(s string) *HistoryUpdateOne {
	huo.mutation.SetNodeName(s)
	return huo
}

// SetNillableNodeName sets the "node_name" field if the given value is not nil.
func (huo *HistoryUpdateOne) SetNillableNodeName(s *string) *HistoryUpdateOne {
	if s != nil {
		huo.SetNodeName(*s)
	}
	return huo
}

// SetOperator sets the "operator" field.
func (huo *HistoryUpdateOne) SetOperator(s string) *HistoryUpdateOne {
	huo.mutation.SetOperator(s)
	return huo
}

// SetNillableOperator sets the "operator" field if the given value is not nil.
func (huo *HistoryUpdateOne) SetNillableOperator(s *string) *HistoryUpdateOne {
	if s != nil {
		huo.SetOperator(*s)
	}
	return huo
}

// SetOperatorDept sets the "operator_dept" field.
func (huo *HistoryUpdateOne) SetOperatorDept(s string) *HistoryUpdateOne {
	huo.mutation.SetOperatorDept(s)
	return huo
}

// SetNillableOperatorDept sets the "operator_dept" field if the given value is not nil.
func (huo *HistoryUpdateOne) SetNillableOperatorDept(s *string) *HistoryUpdateOne {
	if s != nil {
		huo.SetOperatorDept(*s)
	}
	return huo
}

// ClearOperatorDept clears the value of the "operator_dept" field.
func (huo *HistoryUpdateOne) ClearOperatorDept() *HistoryUpdateOne {
	huo.mutation.ClearOperatorDept()
	return huo
}

// SetTaskID sets the "task_id" field.
func (huo *HistoryUpdateOne) SetTaskID(s string) *HistoryUpdateOne {
	huo.mutation.SetTaskID(s)
	return huo
}

// SetNillableTaskID sets the "task_id" field if the given value is not nil.
func (huo *HistoryUpdateOne) SetNillableTaskID(s *string) *HistoryUpdateOne {
	if s != nil {
		huo.SetTaskID(*s)
	}
	return huo
}

// ClearTaskID clears the value of the "task_id" field.
func (huo *HistoryUpdateOne) ClearTaskID() *HistoryUpdateOne {
	huo.mutation.ClearTaskID()
	return huo
}

// SetVariables sets the "variables" field.
func (huo *HistoryUpdateOne) SetVariables(m map[string]interface{}) *HistoryUpdateOne {
	huo.mutation.SetVariables(m)
	return huo
}

// SetFormData sets the "form_data" field.
func (huo *HistoryUpdateOne) SetFormData(m map[string]interface{}) *HistoryUpdateOne {
	huo.mutation.SetFormData(m)
	return huo
}

// ClearFormData clears the value of the "form_data" field.
func (huo *HistoryUpdateOne) ClearFormData() *HistoryUpdateOne {
	huo.mutation.ClearFormData()
	return huo
}

// SetAction sets the "action" field.
func (huo *HistoryUpdateOne) SetAction(s string) *HistoryUpdateOne {
	huo.mutation.SetAction(s)
	return huo
}

// SetNillableAction sets the "action" field if the given value is not nil.
func (huo *HistoryUpdateOne) SetNillableAction(s *string) *HistoryUpdateOne {
	if s != nil {
		huo.SetAction(*s)
	}
	return huo
}

// SetComment sets the "comment" field.
func (huo *HistoryUpdateOne) SetComment(s string) *HistoryUpdateOne {
	huo.mutation.SetComment(s)
	return huo
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (huo *HistoryUpdateOne) SetNillableComment(s *string) *HistoryUpdateOne {
	if s != nil {
		huo.SetComment(*s)
	}
	return huo
}

// ClearComment clears the value of the "comment" field.
func (huo *HistoryUpdateOne) ClearComment() *HistoryUpdateOne {
	huo.mutation.ClearComment()
	return huo
}

// SetDetails sets the "details" field.
func (huo *HistoryUpdateOne) SetDetails(m map[string]interface{}) *HistoryUpdateOne {
	huo.mutation.SetDetails(m)
	return huo
}

// ClearDetails clears the value of the "details" field.
func (huo *HistoryUpdateOne) ClearDetails() *HistoryUpdateOne {
	huo.mutation.ClearDetails()
	return huo
}

// Mutation returns the HistoryMutation object of the builder.
func (huo *HistoryUpdateOne) Mutation() *HistoryMutation {
	return huo.mutation
}

// Where appends a list predicates to the HistoryUpdate builder.
func (huo *HistoryUpdateOne) Where(ps ...predicate.History) *HistoryUpdateOne {
	huo.mutation.Where(ps...)
	return huo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (huo *HistoryUpdateOne) Select(field string, fields ...string) *HistoryUpdateOne {
	huo.fields = append([]string{field}, fields...)
	return huo
}

// Save executes the query and returns the updated History entity.
func (huo *HistoryUpdateOne) Save(ctx context.Context) (*History, error) {
	huo.defaults()
	return withHooks(ctx, huo.sqlSave, huo.mutation, huo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (huo *HistoryUpdateOne) SaveX(ctx context.Context) *History {
	node, err := huo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (huo *HistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := huo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (huo *HistoryUpdateOne) ExecX(ctx context.Context) {
	if err := huo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (huo *HistoryUpdateOne) defaults() {
	if _, ok := huo.mutation.UpdatedAt(); !ok && !huo.mutation.UpdatedAtCleared() {
		v := history.UpdateDefaultUpdatedAt()
		huo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (huo *HistoryUpdateOne) check() error {
	if v, ok := huo.mutation.TenantID(); ok {
		if err := history.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "History.tenant_id": %w`, err)}
		}
	}
	if v, ok := huo.mutation.CreatedBy(); ok {
		if err := history.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "History.created_by": %w`, err)}
		}
	}
	if v, ok := huo.mutation.UpdatedBy(); ok {
		if err := history.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "History.updated_by": %w`, err)}
		}
	}
	return nil
}

func (huo *HistoryUpdateOne) sqlSave(ctx context.Context) (_node *History, err error) {
	if err := huo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(history.Table, history.Columns, sqlgraph.NewFieldSpec(history.FieldID, field.TypeString))
	id, ok := huo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "History.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := huo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, history.FieldID)
		for _, f := range fields {
			if !history.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != history.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := huo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := huo.mutation.GetType(); ok {
		_spec.SetField(history.FieldType, field.TypeString, value)
	}
	if huo.mutation.TypeCleared() {
		_spec.ClearField(history.FieldType, field.TypeString)
	}
	if value, ok := huo.mutation.ProcessID(); ok {
		_spec.SetField(history.FieldProcessID, field.TypeString, value)
	}
	if value, ok := huo.mutation.TemplateID(); ok {
		_spec.SetField(history.FieldTemplateID, field.TypeString, value)
	}
	if value, ok := huo.mutation.BusinessKey(); ok {
		_spec.SetField(history.FieldBusinessKey, field.TypeString, value)
	}
	if value, ok := huo.mutation.NodeKey(); ok {
		_spec.SetField(history.FieldNodeKey, field.TypeString, value)
	}
	if value, ok := huo.mutation.NodeType(); ok {
		_spec.SetField(history.FieldNodeType, field.TypeString, value)
	}
	if value, ok := huo.mutation.NodeConfig(); ok {
		_spec.SetField(history.FieldNodeConfig, field.TypeJSON, value)
	}
	if huo.mutation.NodeConfigCleared() {
		_spec.ClearField(history.FieldNodeConfig, field.TypeJSON)
	}
	if value, ok := huo.mutation.NodeRules(); ok {
		_spec.SetField(history.FieldNodeRules, field.TypeJSON, value)
	}
	if huo.mutation.NodeRulesCleared() {
		_spec.ClearField(history.FieldNodeRules, field.TypeJSON)
	}
	if value, ok := huo.mutation.NodeEvents(); ok {
		_spec.SetField(history.FieldNodeEvents, field.TypeJSON, value)
	}
	if huo.mutation.NodeEventsCleared() {
		_spec.ClearField(history.FieldNodeEvents, field.TypeJSON)
	}
	if value, ok := huo.mutation.TenantID(); ok {
		_spec.SetField(history.FieldTenantID, field.TypeString, value)
	}
	if huo.mutation.TenantIDCleared() {
		_spec.ClearField(history.FieldTenantID, field.TypeString)
	}
	if value, ok := huo.mutation.CreatedBy(); ok {
		_spec.SetField(history.FieldCreatedBy, field.TypeString, value)
	}
	if huo.mutation.CreatedByCleared() {
		_spec.ClearField(history.FieldCreatedBy, field.TypeString)
	}
	if value, ok := huo.mutation.UpdatedBy(); ok {
		_spec.SetField(history.FieldUpdatedBy, field.TypeString, value)
	}
	if huo.mutation.UpdatedByCleared() {
		_spec.ClearField(history.FieldUpdatedBy, field.TypeString)
	}
	if huo.mutation.CreatedAtCleared() {
		_spec.ClearField(history.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := huo.mutation.UpdatedAt(); ok {
		_spec.SetField(history.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := huo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(history.FieldUpdatedAt, field.TypeInt64, value)
	}
	if huo.mutation.UpdatedAtCleared() {
		_spec.ClearField(history.FieldUpdatedAt, field.TypeInt64)
	}
	if value, ok := huo.mutation.NodeName(); ok {
		_spec.SetField(history.FieldNodeName, field.TypeString, value)
	}
	if value, ok := huo.mutation.Operator(); ok {
		_spec.SetField(history.FieldOperator, field.TypeString, value)
	}
	if value, ok := huo.mutation.OperatorDept(); ok {
		_spec.SetField(history.FieldOperatorDept, field.TypeString, value)
	}
	if huo.mutation.OperatorDeptCleared() {
		_spec.ClearField(history.FieldOperatorDept, field.TypeString)
	}
	if value, ok := huo.mutation.TaskID(); ok {
		_spec.SetField(history.FieldTaskID, field.TypeString, value)
	}
	if huo.mutation.TaskIDCleared() {
		_spec.ClearField(history.FieldTaskID, field.TypeString)
	}
	if value, ok := huo.mutation.Variables(); ok {
		_spec.SetField(history.FieldVariables, field.TypeJSON, value)
	}
	if value, ok := huo.mutation.FormData(); ok {
		_spec.SetField(history.FieldFormData, field.TypeJSON, value)
	}
	if huo.mutation.FormDataCleared() {
		_spec.ClearField(history.FieldFormData, field.TypeJSON)
	}
	if value, ok := huo.mutation.Action(); ok {
		_spec.SetField(history.FieldAction, field.TypeString, value)
	}
	if value, ok := huo.mutation.Comment(); ok {
		_spec.SetField(history.FieldComment, field.TypeString, value)
	}
	if huo.mutation.CommentCleared() {
		_spec.ClearField(history.FieldComment, field.TypeString)
	}
	if value, ok := huo.mutation.Details(); ok {
		_spec.SetField(history.FieldDetails, field.TypeJSON, value)
	}
	if huo.mutation.DetailsCleared() {
		_spec.ClearField(history.FieldDetails, field.TypeJSON)
	}
	_node = &History{config: huo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, huo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{history.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	huo.mutation.done = true
	return _node, nil
}
