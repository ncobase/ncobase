// Code generated by ent, DO NOT EDIT.

package node

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the node type in the database.
	Label = "node"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldNodeKey holds the string denoting the node_key field in the database.
	FieldNodeKey = "node_key"
	// FieldNodeType holds the string denoting the node_type field in the database.
	FieldNodeType = "node_type"
	// FieldNodeConfig holds the string denoting the node_config field in the database.
	FieldNodeConfig = "node_config"
	// FieldNodeRules holds the string denoting the node_rules field in the database.
	FieldNodeRules = "node_rules"
	// FieldNodeEvents holds the string denoting the node_events field in the database.
	FieldNodeEvents = "node_events"
	// FieldFormCode holds the string denoting the form_code field in the database.
	FieldFormCode = "form_code"
	// FieldFormVersion holds the string denoting the form_version field in the database.
	FieldFormVersion = "form_version"
	// FieldFormConfig holds the string denoting the form_config field in the database.
	FieldFormConfig = "form_config"
	// FieldFormPermissions holds the string denoting the form_permissions field in the database.
	FieldFormPermissions = "form_permissions"
	// FieldFieldPermissions holds the string denoting the field_permissions field in the database.
	FieldFieldPermissions = "field_permissions"
	// FieldAssignees holds the string denoting the assignees field in the database.
	FieldAssignees = "assignees"
	// FieldCandidates holds the string denoting the candidates field in the database.
	FieldCandidates = "candidates"
	// FieldDelegatedFrom holds the string denoting the delegated_from field in the database.
	FieldDelegatedFrom = "delegated_from"
	// FieldDelegatedReason holds the string denoting the delegated_reason field in the database.
	FieldDelegatedReason = "delegated_reason"
	// FieldIsDelegated holds the string denoting the is_delegated field in the database.
	FieldIsDelegated = "is_delegated"
	// FieldIsTransferred holds the string denoting the is_transferred field in the database.
	FieldIsTransferred = "is_transferred"
	// FieldAllowCancel holds the string denoting the allow_cancel field in the database.
	FieldAllowCancel = "allow_cancel"
	// FieldAllowUrge holds the string denoting the allow_urge field in the database.
	FieldAllowUrge = "allow_urge"
	// FieldAllowDelegate holds the string denoting the allow_delegate field in the database.
	FieldAllowDelegate = "allow_delegate"
	// FieldAllowTransfer holds the string denoting the allow_transfer field in the database.
	FieldAllowTransfer = "allow_transfer"
	// FieldIsDraftEnabled holds the string denoting the is_draft_enabled field in the database.
	FieldIsDraftEnabled = "is_draft_enabled"
	// FieldIsAutoStart holds the string denoting the is_auto_start field in the database.
	FieldIsAutoStart = "is_auto_start"
	// FieldStrictMode holds the string denoting the strict_mode field in the database.
	FieldStrictMode = "strict_mode"
	// FieldStartTime holds the string denoting the start_time field in the database.
	FieldStartTime = "start_time"
	// FieldEndTime holds the string denoting the end_time field in the database.
	FieldEndTime = "end_time"
	// FieldDueTime holds the string denoting the due_time field in the database.
	FieldDueTime = "due_time"
	// FieldDuration holds the string denoting the duration field in the database.
	FieldDuration = "duration"
	// FieldPriority holds the string denoting the priority field in the database.
	FieldPriority = "priority"
	// FieldIsTimeout holds the string denoting the is_timeout field in the database.
	FieldIsTimeout = "is_timeout"
	// FieldReminderCount holds the string denoting the reminder_count field in the database.
	FieldReminderCount = "reminder_count"
	// FieldExtras holds the string denoting the extras field in the database.
	FieldExtras = "extras"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldProcessID holds the string denoting the process_id field in the database.
	FieldProcessID = "process_id"
	// FieldPermissions holds the string denoting the permissions field in the database.
	FieldPermissions = "permissions"
	// FieldPrevNodes holds the string denoting the prev_nodes field in the database.
	FieldPrevNodes = "prev_nodes"
	// FieldNextNodes holds the string denoting the next_nodes field in the database.
	FieldNextNodes = "next_nodes"
	// FieldParallelNodes holds the string denoting the parallel_nodes field in the database.
	FieldParallelNodes = "parallel_nodes"
	// FieldBranchNodes holds the string denoting the branch_nodes field in the database.
	FieldBranchNodes = "branch_nodes"
	// FieldConditions holds the string denoting the conditions field in the database.
	FieldConditions = "conditions"
	// FieldProperties holds the string denoting the properties field in the database.
	FieldProperties = "properties"
	// FieldIsCountersign holds the string denoting the is_countersign field in the database.
	FieldIsCountersign = "is_countersign"
	// FieldCountersignRule holds the string denoting the countersign_rule field in the database.
	FieldCountersignRule = "countersign_rule"
	// FieldHandlers holds the string denoting the handlers field in the database.
	FieldHandlers = "handlers"
	// FieldListeners holds the string denoting the listeners field in the database.
	FieldListeners = "listeners"
	// FieldHooks holds the string denoting the hooks field in the database.
	FieldHooks = "hooks"
	// FieldRetryTimes holds the string denoting the retry_times field in the database.
	FieldRetryTimes = "retry_times"
	// FieldRetryInterval holds the string denoting the retry_interval field in the database.
	FieldRetryInterval = "retry_interval"
	// FieldIsWorkingDay holds the string denoting the is_working_day field in the database.
	FieldIsWorkingDay = "is_working_day"
	// Table holds the table name of the node in the database.
	Table = "ncse_flow_node"
)

// Columns holds all SQL columns for node fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldDescription,
	FieldType,
	FieldStatus,
	FieldNodeKey,
	FieldNodeType,
	FieldNodeConfig,
	FieldNodeRules,
	FieldNodeEvents,
	FieldFormCode,
	FieldFormVersion,
	FieldFormConfig,
	FieldFormPermissions,
	FieldFieldPermissions,
	FieldAssignees,
	FieldCandidates,
	FieldDelegatedFrom,
	FieldDelegatedReason,
	FieldIsDelegated,
	FieldIsTransferred,
	FieldAllowCancel,
	FieldAllowUrge,
	FieldAllowDelegate,
	FieldAllowTransfer,
	FieldIsDraftEnabled,
	FieldIsAutoStart,
	FieldStrictMode,
	FieldStartTime,
	FieldEndTime,
	FieldDueTime,
	FieldDuration,
	FieldPriority,
	FieldIsTimeout,
	FieldReminderCount,
	FieldExtras,
	FieldTenantID,
	FieldCreatedBy,
	FieldUpdatedBy,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldProcessID,
	FieldPermissions,
	FieldPrevNodes,
	FieldNextNodes,
	FieldParallelNodes,
	FieldBranchNodes,
	FieldConditions,
	FieldProperties,
	FieldIsCountersign,
	FieldCountersignRule,
	FieldHandlers,
	FieldListeners,
	FieldHooks,
	FieldRetryTimes,
	FieldRetryInterval,
	FieldIsWorkingDay,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultIsDelegated holds the default value on creation for the "is_delegated" field.
	DefaultIsDelegated bool
	// DefaultIsTransferred holds the default value on creation for the "is_transferred" field.
	DefaultIsTransferred bool
	// DefaultAllowCancel holds the default value on creation for the "allow_cancel" field.
	DefaultAllowCancel bool
	// DefaultAllowUrge holds the default value on creation for the "allow_urge" field.
	DefaultAllowUrge bool
	// DefaultAllowDelegate holds the default value on creation for the "allow_delegate" field.
	DefaultAllowDelegate bool
	// DefaultAllowTransfer holds the default value on creation for the "allow_transfer" field.
	DefaultAllowTransfer bool
	// DefaultIsDraftEnabled holds the default value on creation for the "is_draft_enabled" field.
	DefaultIsDraftEnabled bool
	// DefaultIsAutoStart holds the default value on creation for the "is_auto_start" field.
	DefaultIsAutoStart bool
	// DefaultStrictMode holds the default value on creation for the "strict_mode" field.
	DefaultStrictMode bool
	// DefaultStartTime holds the default value on creation for the "start_time" field.
	DefaultStartTime func() int64
	// DefaultPriority holds the default value on creation for the "priority" field.
	DefaultPriority int
	// DefaultIsTimeout holds the default value on creation for the "is_timeout" field.
	DefaultIsTimeout bool
	// DefaultReminderCount holds the default value on creation for the "reminder_count" field.
	DefaultReminderCount int
	// DefaultExtras holds the default value on creation for the "extras" field.
	DefaultExtras map[string]interface{}
	// TenantIDValidator is a validator for the "tenant_id" field. It is called by the builders before save.
	TenantIDValidator func(string) error
	// CreatedByValidator is a validator for the "created_by" field. It is called by the builders before save.
	CreatedByValidator func(string) error
	// UpdatedByValidator is a validator for the "updated_by" field. It is called by the builders before save.
	UpdatedByValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() int64
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() int64
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() int64
	// DefaultIsCountersign holds the default value on creation for the "is_countersign" field.
	DefaultIsCountersign bool
	// DefaultRetryTimes holds the default value on creation for the "retry_times" field.
	DefaultRetryTimes int
	// DefaultRetryInterval holds the default value on creation for the "retry_interval" field.
	DefaultRetryInterval int
	// DefaultIsWorkingDay holds the default value on creation for the "is_working_day" field.
	DefaultIsWorkingDay bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)

// OrderOption defines the ordering options for the Node queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByNodeKey orders the results by the node_key field.
func ByNodeKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNodeKey, opts...).ToFunc()
}

// ByNodeType orders the results by the node_type field.
func ByNodeType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNodeType, opts...).ToFunc()
}

// ByFormCode orders the results by the form_code field.
func ByFormCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFormCode, opts...).ToFunc()
}

// ByFormVersion orders the results by the form_version field.
func ByFormVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFormVersion, opts...).ToFunc()
}

// ByDelegatedFrom orders the results by the delegated_from field.
func ByDelegatedFrom(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDelegatedFrom, opts...).ToFunc()
}

// ByDelegatedReason orders the results by the delegated_reason field.
func ByDelegatedReason(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDelegatedReason, opts...).ToFunc()
}

// ByIsDelegated orders the results by the is_delegated field.
func ByIsDelegated(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsDelegated, opts...).ToFunc()
}

// ByIsTransferred orders the results by the is_transferred field.
func ByIsTransferred(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsTransferred, opts...).ToFunc()
}

// ByAllowCancel orders the results by the allow_cancel field.
func ByAllowCancel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAllowCancel, opts...).ToFunc()
}

// ByAllowUrge orders the results by the allow_urge field.
func ByAllowUrge(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAllowUrge, opts...).ToFunc()
}

// ByAllowDelegate orders the results by the allow_delegate field.
func ByAllowDelegate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAllowDelegate, opts...).ToFunc()
}

// ByAllowTransfer orders the results by the allow_transfer field.
func ByAllowTransfer(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAllowTransfer, opts...).ToFunc()
}

// ByIsDraftEnabled orders the results by the is_draft_enabled field.
func ByIsDraftEnabled(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsDraftEnabled, opts...).ToFunc()
}

// ByIsAutoStart orders the results by the is_auto_start field.
func ByIsAutoStart(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsAutoStart, opts...).ToFunc()
}

// ByStrictMode orders the results by the strict_mode field.
func ByStrictMode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStrictMode, opts...).ToFunc()
}

// ByStartTime orders the results by the start_time field.
func ByStartTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartTime, opts...).ToFunc()
}

// ByEndTime orders the results by the end_time field.
func ByEndTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndTime, opts...).ToFunc()
}

// ByDueTime orders the results by the due_time field.
func ByDueTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDueTime, opts...).ToFunc()
}

// ByDuration orders the results by the duration field.
func ByDuration(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDuration, opts...).ToFunc()
}

// ByPriority orders the results by the priority field.
func ByPriority(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPriority, opts...).ToFunc()
}

// ByIsTimeout orders the results by the is_timeout field.
func ByIsTimeout(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsTimeout, opts...).ToFunc()
}

// ByReminderCount orders the results by the reminder_count field.
func ByReminderCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReminderCount, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the updated_by field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByProcessID orders the results by the process_id field.
func ByProcessID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProcessID, opts...).ToFunc()
}

// ByIsCountersign orders the results by the is_countersign field.
func ByIsCountersign(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsCountersign, opts...).ToFunc()
}

// ByCountersignRule orders the results by the countersign_rule field.
func ByCountersignRule(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCountersignRule, opts...).ToFunc()
}

// ByRetryTimes orders the results by the retry_times field.
func ByRetryTimes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRetryTimes, opts...).ToFunc()
}

// ByRetryInterval orders the results by the retry_interval field.
func ByRetryInterval(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRetryInterval, opts...).ToFunc()
}

// ByIsWorkingDay orders the results by the is_working_day field.
func ByIsWorkingDay(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsWorkingDay, opts...).ToFunc()
}
