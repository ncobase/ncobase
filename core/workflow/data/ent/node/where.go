// Code generated by ent, DO NOT EDIT.

package node

import (
	"ncobase/core/workflow/data/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Node {
	return predicate.Node(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Node {
	return predicate.Node(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Node {
	return predicate.Node(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Node {
	return predicate.Node(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Node {
	return predicate.Node(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Node {
	return predicate.Node(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Node {
	return predicate.Node(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Node {
	return predicate.Node(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Node {
	return predicate.Node(sql.FieldContainsFold(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldName, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldDescription, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldType, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldStatus, v))
}

// NodeKey applies equality check predicate on the "node_key" field. It's identical to NodeKeyEQ.
func NodeKey(v string) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldNodeKey, v))
}

// NodeType applies equality check predicate on the "node_type" field. It's identical to NodeTypeEQ.
func NodeType(v string) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldNodeType, v))
}

// FormCode applies equality check predicate on the "form_code" field. It's identical to FormCodeEQ.
func FormCode(v string) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldFormCode, v))
}

// FormVersion applies equality check predicate on the "form_version" field. It's identical to FormVersionEQ.
func FormVersion(v string) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldFormVersion, v))
}

// DelegatedFrom applies equality check predicate on the "delegated_from" field. It's identical to DelegatedFromEQ.
func DelegatedFrom(v string) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldDelegatedFrom, v))
}

// DelegatedReason applies equality check predicate on the "delegated_reason" field. It's identical to DelegatedReasonEQ.
func DelegatedReason(v string) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldDelegatedReason, v))
}

// IsDelegated applies equality check predicate on the "is_delegated" field. It's identical to IsDelegatedEQ.
func IsDelegated(v bool) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldIsDelegated, v))
}

// IsTransferred applies equality check predicate on the "is_transferred" field. It's identical to IsTransferredEQ.
func IsTransferred(v bool) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldIsTransferred, v))
}

// AllowCancel applies equality check predicate on the "allow_cancel" field. It's identical to AllowCancelEQ.
func AllowCancel(v bool) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldAllowCancel, v))
}

// AllowUrge applies equality check predicate on the "allow_urge" field. It's identical to AllowUrgeEQ.
func AllowUrge(v bool) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldAllowUrge, v))
}

// AllowDelegate applies equality check predicate on the "allow_delegate" field. It's identical to AllowDelegateEQ.
func AllowDelegate(v bool) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldAllowDelegate, v))
}

// AllowTransfer applies equality check predicate on the "allow_transfer" field. It's identical to AllowTransferEQ.
func AllowTransfer(v bool) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldAllowTransfer, v))
}

// IsDraftEnabled applies equality check predicate on the "is_draft_enabled" field. It's identical to IsDraftEnabledEQ.
func IsDraftEnabled(v bool) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldIsDraftEnabled, v))
}

// IsAutoStart applies equality check predicate on the "is_auto_start" field. It's identical to IsAutoStartEQ.
func IsAutoStart(v bool) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldIsAutoStart, v))
}

// StrictMode applies equality check predicate on the "strict_mode" field. It's identical to StrictModeEQ.
func StrictMode(v bool) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldStrictMode, v))
}

// StartTime applies equality check predicate on the "start_time" field. It's identical to StartTimeEQ.
func StartTime(v int64) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldStartTime, v))
}

// EndTime applies equality check predicate on the "end_time" field. It's identical to EndTimeEQ.
func EndTime(v int64) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldEndTime, v))
}

// DueTime applies equality check predicate on the "due_time" field. It's identical to DueTimeEQ.
func DueTime(v int64) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldDueTime, v))
}

// Duration applies equality check predicate on the "duration" field. It's identical to DurationEQ.
func Duration(v int) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldDuration, v))
}

// Priority applies equality check predicate on the "priority" field. It's identical to PriorityEQ.
func Priority(v int) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldPriority, v))
}

// IsTimeout applies equality check predicate on the "is_timeout" field. It's identical to IsTimeoutEQ.
func IsTimeout(v bool) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldIsTimeout, v))
}

// ReminderCount applies equality check predicate on the "reminder_count" field. It's identical to ReminderCountEQ.
func ReminderCount(v int) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldReminderCount, v))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v string) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldTenantID, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v string) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldCreatedBy, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v string) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldUpdatedBy, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v int64) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v int64) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldUpdatedAt, v))
}

// ProcessID applies equality check predicate on the "process_id" field. It's identical to ProcessIDEQ.
func ProcessID(v string) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldProcessID, v))
}

// IsCountersign applies equality check predicate on the "is_countersign" field. It's identical to IsCountersignEQ.
func IsCountersign(v bool) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldIsCountersign, v))
}

// CountersignRule applies equality check predicate on the "countersign_rule" field. It's identical to CountersignRuleEQ.
func CountersignRule(v string) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldCountersignRule, v))
}

// RetryTimes applies equality check predicate on the "retry_times" field. It's identical to RetryTimesEQ.
func RetryTimes(v int) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldRetryTimes, v))
}

// RetryInterval applies equality check predicate on the "retry_interval" field. It's identical to RetryIntervalEQ.
func RetryInterval(v int) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldRetryInterval, v))
}

// IsWorkingDay applies equality check predicate on the "is_working_day" field. It's identical to IsWorkingDayEQ.
func IsWorkingDay(v bool) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldIsWorkingDay, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Node {
	return predicate.Node(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Node {
	return predicate.Node(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Node {
	return predicate.Node(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Node {
	return predicate.Node(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Node {
	return predicate.Node(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Node {
	return predicate.Node(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Node {
	return predicate.Node(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Node {
	return predicate.Node(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Node {
	return predicate.Node(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Node {
	return predicate.Node(sql.FieldHasSuffix(FieldName, v))
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.Node {
	return predicate.Node(sql.FieldIsNull(FieldName))
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.Node {
	return predicate.Node(sql.FieldNotNull(FieldName))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Node {
	return predicate.Node(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Node {
	return predicate.Node(sql.FieldContainsFold(FieldName, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Node {
	return predicate.Node(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Node {
	return predicate.Node(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Node {
	return predicate.Node(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Node {
	return predicate.Node(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Node {
	return predicate.Node(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Node {
	return predicate.Node(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Node {
	return predicate.Node(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Node {
	return predicate.Node(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Node {
	return predicate.Node(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Node {
	return predicate.Node(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Node {
	return predicate.Node(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Node {
	return predicate.Node(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Node {
	return predicate.Node(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Node {
	return predicate.Node(sql.FieldContainsFold(FieldDescription, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.Node {
	return predicate.Node(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.Node {
	return predicate.Node(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.Node {
	return predicate.Node(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.Node {
	return predicate.Node(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.Node {
	return predicate.Node(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.Node {
	return predicate.Node(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.Node {
	return predicate.Node(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.Node {
	return predicate.Node(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.Node {
	return predicate.Node(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.Node {
	return predicate.Node(sql.FieldHasSuffix(FieldType, v))
}

// TypeIsNil applies the IsNil predicate on the "type" field.
func TypeIsNil() predicate.Node {
	return predicate.Node(sql.FieldIsNull(FieldType))
}

// TypeNotNil applies the NotNil predicate on the "type" field.
func TypeNotNil() predicate.Node {
	return predicate.Node(sql.FieldNotNull(FieldType))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.Node {
	return predicate.Node(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.Node {
	return predicate.Node(sql.FieldContainsFold(FieldType, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.Node {
	return predicate.Node(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.Node {
	return predicate.Node(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.Node {
	return predicate.Node(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.Node {
	return predicate.Node(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.Node {
	return predicate.Node(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.Node {
	return predicate.Node(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.Node {
	return predicate.Node(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.Node {
	return predicate.Node(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.Node {
	return predicate.Node(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.Node {
	return predicate.Node(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusIsNil applies the IsNil predicate on the "status" field.
func StatusIsNil() predicate.Node {
	return predicate.Node(sql.FieldIsNull(FieldStatus))
}

// StatusNotNil applies the NotNil predicate on the "status" field.
func StatusNotNil() predicate.Node {
	return predicate.Node(sql.FieldNotNull(FieldStatus))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.Node {
	return predicate.Node(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.Node {
	return predicate.Node(sql.FieldContainsFold(FieldStatus, v))
}

// NodeKeyEQ applies the EQ predicate on the "node_key" field.
func NodeKeyEQ(v string) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldNodeKey, v))
}

// NodeKeyNEQ applies the NEQ predicate on the "node_key" field.
func NodeKeyNEQ(v string) predicate.Node {
	return predicate.Node(sql.FieldNEQ(FieldNodeKey, v))
}

// NodeKeyIn applies the In predicate on the "node_key" field.
func NodeKeyIn(vs ...string) predicate.Node {
	return predicate.Node(sql.FieldIn(FieldNodeKey, vs...))
}

// NodeKeyNotIn applies the NotIn predicate on the "node_key" field.
func NodeKeyNotIn(vs ...string) predicate.Node {
	return predicate.Node(sql.FieldNotIn(FieldNodeKey, vs...))
}

// NodeKeyGT applies the GT predicate on the "node_key" field.
func NodeKeyGT(v string) predicate.Node {
	return predicate.Node(sql.FieldGT(FieldNodeKey, v))
}

// NodeKeyGTE applies the GTE predicate on the "node_key" field.
func NodeKeyGTE(v string) predicate.Node {
	return predicate.Node(sql.FieldGTE(FieldNodeKey, v))
}

// NodeKeyLT applies the LT predicate on the "node_key" field.
func NodeKeyLT(v string) predicate.Node {
	return predicate.Node(sql.FieldLT(FieldNodeKey, v))
}

// NodeKeyLTE applies the LTE predicate on the "node_key" field.
func NodeKeyLTE(v string) predicate.Node {
	return predicate.Node(sql.FieldLTE(FieldNodeKey, v))
}

// NodeKeyContains applies the Contains predicate on the "node_key" field.
func NodeKeyContains(v string) predicate.Node {
	return predicate.Node(sql.FieldContains(FieldNodeKey, v))
}

// NodeKeyHasPrefix applies the HasPrefix predicate on the "node_key" field.
func NodeKeyHasPrefix(v string) predicate.Node {
	return predicate.Node(sql.FieldHasPrefix(FieldNodeKey, v))
}

// NodeKeyHasSuffix applies the HasSuffix predicate on the "node_key" field.
func NodeKeyHasSuffix(v string) predicate.Node {
	return predicate.Node(sql.FieldHasSuffix(FieldNodeKey, v))
}

// NodeKeyEqualFold applies the EqualFold predicate on the "node_key" field.
func NodeKeyEqualFold(v string) predicate.Node {
	return predicate.Node(sql.FieldEqualFold(FieldNodeKey, v))
}

// NodeKeyContainsFold applies the ContainsFold predicate on the "node_key" field.
func NodeKeyContainsFold(v string) predicate.Node {
	return predicate.Node(sql.FieldContainsFold(FieldNodeKey, v))
}

// NodeTypeEQ applies the EQ predicate on the "node_type" field.
func NodeTypeEQ(v string) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldNodeType, v))
}

// NodeTypeNEQ applies the NEQ predicate on the "node_type" field.
func NodeTypeNEQ(v string) predicate.Node {
	return predicate.Node(sql.FieldNEQ(FieldNodeType, v))
}

// NodeTypeIn applies the In predicate on the "node_type" field.
func NodeTypeIn(vs ...string) predicate.Node {
	return predicate.Node(sql.FieldIn(FieldNodeType, vs...))
}

// NodeTypeNotIn applies the NotIn predicate on the "node_type" field.
func NodeTypeNotIn(vs ...string) predicate.Node {
	return predicate.Node(sql.FieldNotIn(FieldNodeType, vs...))
}

// NodeTypeGT applies the GT predicate on the "node_type" field.
func NodeTypeGT(v string) predicate.Node {
	return predicate.Node(sql.FieldGT(FieldNodeType, v))
}

// NodeTypeGTE applies the GTE predicate on the "node_type" field.
func NodeTypeGTE(v string) predicate.Node {
	return predicate.Node(sql.FieldGTE(FieldNodeType, v))
}

// NodeTypeLT applies the LT predicate on the "node_type" field.
func NodeTypeLT(v string) predicate.Node {
	return predicate.Node(sql.FieldLT(FieldNodeType, v))
}

// NodeTypeLTE applies the LTE predicate on the "node_type" field.
func NodeTypeLTE(v string) predicate.Node {
	return predicate.Node(sql.FieldLTE(FieldNodeType, v))
}

// NodeTypeContains applies the Contains predicate on the "node_type" field.
func NodeTypeContains(v string) predicate.Node {
	return predicate.Node(sql.FieldContains(FieldNodeType, v))
}

// NodeTypeHasPrefix applies the HasPrefix predicate on the "node_type" field.
func NodeTypeHasPrefix(v string) predicate.Node {
	return predicate.Node(sql.FieldHasPrefix(FieldNodeType, v))
}

// NodeTypeHasSuffix applies the HasSuffix predicate on the "node_type" field.
func NodeTypeHasSuffix(v string) predicate.Node {
	return predicate.Node(sql.FieldHasSuffix(FieldNodeType, v))
}

// NodeTypeEqualFold applies the EqualFold predicate on the "node_type" field.
func NodeTypeEqualFold(v string) predicate.Node {
	return predicate.Node(sql.FieldEqualFold(FieldNodeType, v))
}

// NodeTypeContainsFold applies the ContainsFold predicate on the "node_type" field.
func NodeTypeContainsFold(v string) predicate.Node {
	return predicate.Node(sql.FieldContainsFold(FieldNodeType, v))
}

// NodeConfigIsNil applies the IsNil predicate on the "node_config" field.
func NodeConfigIsNil() predicate.Node {
	return predicate.Node(sql.FieldIsNull(FieldNodeConfig))
}

// NodeConfigNotNil applies the NotNil predicate on the "node_config" field.
func NodeConfigNotNil() predicate.Node {
	return predicate.Node(sql.FieldNotNull(FieldNodeConfig))
}

// NodeRulesIsNil applies the IsNil predicate on the "node_rules" field.
func NodeRulesIsNil() predicate.Node {
	return predicate.Node(sql.FieldIsNull(FieldNodeRules))
}

// NodeRulesNotNil applies the NotNil predicate on the "node_rules" field.
func NodeRulesNotNil() predicate.Node {
	return predicate.Node(sql.FieldNotNull(FieldNodeRules))
}

// NodeEventsIsNil applies the IsNil predicate on the "node_events" field.
func NodeEventsIsNil() predicate.Node {
	return predicate.Node(sql.FieldIsNull(FieldNodeEvents))
}

// NodeEventsNotNil applies the NotNil predicate on the "node_events" field.
func NodeEventsNotNil() predicate.Node {
	return predicate.Node(sql.FieldNotNull(FieldNodeEvents))
}

// FormCodeEQ applies the EQ predicate on the "form_code" field.
func FormCodeEQ(v string) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldFormCode, v))
}

// FormCodeNEQ applies the NEQ predicate on the "form_code" field.
func FormCodeNEQ(v string) predicate.Node {
	return predicate.Node(sql.FieldNEQ(FieldFormCode, v))
}

// FormCodeIn applies the In predicate on the "form_code" field.
func FormCodeIn(vs ...string) predicate.Node {
	return predicate.Node(sql.FieldIn(FieldFormCode, vs...))
}

// FormCodeNotIn applies the NotIn predicate on the "form_code" field.
func FormCodeNotIn(vs ...string) predicate.Node {
	return predicate.Node(sql.FieldNotIn(FieldFormCode, vs...))
}

// FormCodeGT applies the GT predicate on the "form_code" field.
func FormCodeGT(v string) predicate.Node {
	return predicate.Node(sql.FieldGT(FieldFormCode, v))
}

// FormCodeGTE applies the GTE predicate on the "form_code" field.
func FormCodeGTE(v string) predicate.Node {
	return predicate.Node(sql.FieldGTE(FieldFormCode, v))
}

// FormCodeLT applies the LT predicate on the "form_code" field.
func FormCodeLT(v string) predicate.Node {
	return predicate.Node(sql.FieldLT(FieldFormCode, v))
}

// FormCodeLTE applies the LTE predicate on the "form_code" field.
func FormCodeLTE(v string) predicate.Node {
	return predicate.Node(sql.FieldLTE(FieldFormCode, v))
}

// FormCodeContains applies the Contains predicate on the "form_code" field.
func FormCodeContains(v string) predicate.Node {
	return predicate.Node(sql.FieldContains(FieldFormCode, v))
}

// FormCodeHasPrefix applies the HasPrefix predicate on the "form_code" field.
func FormCodeHasPrefix(v string) predicate.Node {
	return predicate.Node(sql.FieldHasPrefix(FieldFormCode, v))
}

// FormCodeHasSuffix applies the HasSuffix predicate on the "form_code" field.
func FormCodeHasSuffix(v string) predicate.Node {
	return predicate.Node(sql.FieldHasSuffix(FieldFormCode, v))
}

// FormCodeEqualFold applies the EqualFold predicate on the "form_code" field.
func FormCodeEqualFold(v string) predicate.Node {
	return predicate.Node(sql.FieldEqualFold(FieldFormCode, v))
}

// FormCodeContainsFold applies the ContainsFold predicate on the "form_code" field.
func FormCodeContainsFold(v string) predicate.Node {
	return predicate.Node(sql.FieldContainsFold(FieldFormCode, v))
}

// FormVersionEQ applies the EQ predicate on the "form_version" field.
func FormVersionEQ(v string) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldFormVersion, v))
}

// FormVersionNEQ applies the NEQ predicate on the "form_version" field.
func FormVersionNEQ(v string) predicate.Node {
	return predicate.Node(sql.FieldNEQ(FieldFormVersion, v))
}

// FormVersionIn applies the In predicate on the "form_version" field.
func FormVersionIn(vs ...string) predicate.Node {
	return predicate.Node(sql.FieldIn(FieldFormVersion, vs...))
}

// FormVersionNotIn applies the NotIn predicate on the "form_version" field.
func FormVersionNotIn(vs ...string) predicate.Node {
	return predicate.Node(sql.FieldNotIn(FieldFormVersion, vs...))
}

// FormVersionGT applies the GT predicate on the "form_version" field.
func FormVersionGT(v string) predicate.Node {
	return predicate.Node(sql.FieldGT(FieldFormVersion, v))
}

// FormVersionGTE applies the GTE predicate on the "form_version" field.
func FormVersionGTE(v string) predicate.Node {
	return predicate.Node(sql.FieldGTE(FieldFormVersion, v))
}

// FormVersionLT applies the LT predicate on the "form_version" field.
func FormVersionLT(v string) predicate.Node {
	return predicate.Node(sql.FieldLT(FieldFormVersion, v))
}

// FormVersionLTE applies the LTE predicate on the "form_version" field.
func FormVersionLTE(v string) predicate.Node {
	return predicate.Node(sql.FieldLTE(FieldFormVersion, v))
}

// FormVersionContains applies the Contains predicate on the "form_version" field.
func FormVersionContains(v string) predicate.Node {
	return predicate.Node(sql.FieldContains(FieldFormVersion, v))
}

// FormVersionHasPrefix applies the HasPrefix predicate on the "form_version" field.
func FormVersionHasPrefix(v string) predicate.Node {
	return predicate.Node(sql.FieldHasPrefix(FieldFormVersion, v))
}

// FormVersionHasSuffix applies the HasSuffix predicate on the "form_version" field.
func FormVersionHasSuffix(v string) predicate.Node {
	return predicate.Node(sql.FieldHasSuffix(FieldFormVersion, v))
}

// FormVersionIsNil applies the IsNil predicate on the "form_version" field.
func FormVersionIsNil() predicate.Node {
	return predicate.Node(sql.FieldIsNull(FieldFormVersion))
}

// FormVersionNotNil applies the NotNil predicate on the "form_version" field.
func FormVersionNotNil() predicate.Node {
	return predicate.Node(sql.FieldNotNull(FieldFormVersion))
}

// FormVersionEqualFold applies the EqualFold predicate on the "form_version" field.
func FormVersionEqualFold(v string) predicate.Node {
	return predicate.Node(sql.FieldEqualFold(FieldFormVersion, v))
}

// FormVersionContainsFold applies the ContainsFold predicate on the "form_version" field.
func FormVersionContainsFold(v string) predicate.Node {
	return predicate.Node(sql.FieldContainsFold(FieldFormVersion, v))
}

// FormConfigIsNil applies the IsNil predicate on the "form_config" field.
func FormConfigIsNil() predicate.Node {
	return predicate.Node(sql.FieldIsNull(FieldFormConfig))
}

// FormConfigNotNil applies the NotNil predicate on the "form_config" field.
func FormConfigNotNil() predicate.Node {
	return predicate.Node(sql.FieldNotNull(FieldFormConfig))
}

// FormPermissionsIsNil applies the IsNil predicate on the "form_permissions" field.
func FormPermissionsIsNil() predicate.Node {
	return predicate.Node(sql.FieldIsNull(FieldFormPermissions))
}

// FormPermissionsNotNil applies the NotNil predicate on the "form_permissions" field.
func FormPermissionsNotNil() predicate.Node {
	return predicate.Node(sql.FieldNotNull(FieldFormPermissions))
}

// FieldPermissionsIsNil applies the IsNil predicate on the "field_permissions" field.
func FieldPermissionsIsNil() predicate.Node {
	return predicate.Node(sql.FieldIsNull(FieldFieldPermissions))
}

// FieldPermissionsNotNil applies the NotNil predicate on the "field_permissions" field.
func FieldPermissionsNotNil() predicate.Node {
	return predicate.Node(sql.FieldNotNull(FieldFieldPermissions))
}

// DelegatedFromEQ applies the EQ predicate on the "delegated_from" field.
func DelegatedFromEQ(v string) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldDelegatedFrom, v))
}

// DelegatedFromNEQ applies the NEQ predicate on the "delegated_from" field.
func DelegatedFromNEQ(v string) predicate.Node {
	return predicate.Node(sql.FieldNEQ(FieldDelegatedFrom, v))
}

// DelegatedFromIn applies the In predicate on the "delegated_from" field.
func DelegatedFromIn(vs ...string) predicate.Node {
	return predicate.Node(sql.FieldIn(FieldDelegatedFrom, vs...))
}

// DelegatedFromNotIn applies the NotIn predicate on the "delegated_from" field.
func DelegatedFromNotIn(vs ...string) predicate.Node {
	return predicate.Node(sql.FieldNotIn(FieldDelegatedFrom, vs...))
}

// DelegatedFromGT applies the GT predicate on the "delegated_from" field.
func DelegatedFromGT(v string) predicate.Node {
	return predicate.Node(sql.FieldGT(FieldDelegatedFrom, v))
}

// DelegatedFromGTE applies the GTE predicate on the "delegated_from" field.
func DelegatedFromGTE(v string) predicate.Node {
	return predicate.Node(sql.FieldGTE(FieldDelegatedFrom, v))
}

// DelegatedFromLT applies the LT predicate on the "delegated_from" field.
func DelegatedFromLT(v string) predicate.Node {
	return predicate.Node(sql.FieldLT(FieldDelegatedFrom, v))
}

// DelegatedFromLTE applies the LTE predicate on the "delegated_from" field.
func DelegatedFromLTE(v string) predicate.Node {
	return predicate.Node(sql.FieldLTE(FieldDelegatedFrom, v))
}

// DelegatedFromContains applies the Contains predicate on the "delegated_from" field.
func DelegatedFromContains(v string) predicate.Node {
	return predicate.Node(sql.FieldContains(FieldDelegatedFrom, v))
}

// DelegatedFromHasPrefix applies the HasPrefix predicate on the "delegated_from" field.
func DelegatedFromHasPrefix(v string) predicate.Node {
	return predicate.Node(sql.FieldHasPrefix(FieldDelegatedFrom, v))
}

// DelegatedFromHasSuffix applies the HasSuffix predicate on the "delegated_from" field.
func DelegatedFromHasSuffix(v string) predicate.Node {
	return predicate.Node(sql.FieldHasSuffix(FieldDelegatedFrom, v))
}

// DelegatedFromIsNil applies the IsNil predicate on the "delegated_from" field.
func DelegatedFromIsNil() predicate.Node {
	return predicate.Node(sql.FieldIsNull(FieldDelegatedFrom))
}

// DelegatedFromNotNil applies the NotNil predicate on the "delegated_from" field.
func DelegatedFromNotNil() predicate.Node {
	return predicate.Node(sql.FieldNotNull(FieldDelegatedFrom))
}

// DelegatedFromEqualFold applies the EqualFold predicate on the "delegated_from" field.
func DelegatedFromEqualFold(v string) predicate.Node {
	return predicate.Node(sql.FieldEqualFold(FieldDelegatedFrom, v))
}

// DelegatedFromContainsFold applies the ContainsFold predicate on the "delegated_from" field.
func DelegatedFromContainsFold(v string) predicate.Node {
	return predicate.Node(sql.FieldContainsFold(FieldDelegatedFrom, v))
}

// DelegatedReasonEQ applies the EQ predicate on the "delegated_reason" field.
func DelegatedReasonEQ(v string) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldDelegatedReason, v))
}

// DelegatedReasonNEQ applies the NEQ predicate on the "delegated_reason" field.
func DelegatedReasonNEQ(v string) predicate.Node {
	return predicate.Node(sql.FieldNEQ(FieldDelegatedReason, v))
}

// DelegatedReasonIn applies the In predicate on the "delegated_reason" field.
func DelegatedReasonIn(vs ...string) predicate.Node {
	return predicate.Node(sql.FieldIn(FieldDelegatedReason, vs...))
}

// DelegatedReasonNotIn applies the NotIn predicate on the "delegated_reason" field.
func DelegatedReasonNotIn(vs ...string) predicate.Node {
	return predicate.Node(sql.FieldNotIn(FieldDelegatedReason, vs...))
}

// DelegatedReasonGT applies the GT predicate on the "delegated_reason" field.
func DelegatedReasonGT(v string) predicate.Node {
	return predicate.Node(sql.FieldGT(FieldDelegatedReason, v))
}

// DelegatedReasonGTE applies the GTE predicate on the "delegated_reason" field.
func DelegatedReasonGTE(v string) predicate.Node {
	return predicate.Node(sql.FieldGTE(FieldDelegatedReason, v))
}

// DelegatedReasonLT applies the LT predicate on the "delegated_reason" field.
func DelegatedReasonLT(v string) predicate.Node {
	return predicate.Node(sql.FieldLT(FieldDelegatedReason, v))
}

// DelegatedReasonLTE applies the LTE predicate on the "delegated_reason" field.
func DelegatedReasonLTE(v string) predicate.Node {
	return predicate.Node(sql.FieldLTE(FieldDelegatedReason, v))
}

// DelegatedReasonContains applies the Contains predicate on the "delegated_reason" field.
func DelegatedReasonContains(v string) predicate.Node {
	return predicate.Node(sql.FieldContains(FieldDelegatedReason, v))
}

// DelegatedReasonHasPrefix applies the HasPrefix predicate on the "delegated_reason" field.
func DelegatedReasonHasPrefix(v string) predicate.Node {
	return predicate.Node(sql.FieldHasPrefix(FieldDelegatedReason, v))
}

// DelegatedReasonHasSuffix applies the HasSuffix predicate on the "delegated_reason" field.
func DelegatedReasonHasSuffix(v string) predicate.Node {
	return predicate.Node(sql.FieldHasSuffix(FieldDelegatedReason, v))
}

// DelegatedReasonIsNil applies the IsNil predicate on the "delegated_reason" field.
func DelegatedReasonIsNil() predicate.Node {
	return predicate.Node(sql.FieldIsNull(FieldDelegatedReason))
}

// DelegatedReasonNotNil applies the NotNil predicate on the "delegated_reason" field.
func DelegatedReasonNotNil() predicate.Node {
	return predicate.Node(sql.FieldNotNull(FieldDelegatedReason))
}

// DelegatedReasonEqualFold applies the EqualFold predicate on the "delegated_reason" field.
func DelegatedReasonEqualFold(v string) predicate.Node {
	return predicate.Node(sql.FieldEqualFold(FieldDelegatedReason, v))
}

// DelegatedReasonContainsFold applies the ContainsFold predicate on the "delegated_reason" field.
func DelegatedReasonContainsFold(v string) predicate.Node {
	return predicate.Node(sql.FieldContainsFold(FieldDelegatedReason, v))
}

// IsDelegatedEQ applies the EQ predicate on the "is_delegated" field.
func IsDelegatedEQ(v bool) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldIsDelegated, v))
}

// IsDelegatedNEQ applies the NEQ predicate on the "is_delegated" field.
func IsDelegatedNEQ(v bool) predicate.Node {
	return predicate.Node(sql.FieldNEQ(FieldIsDelegated, v))
}

// IsTransferredEQ applies the EQ predicate on the "is_transferred" field.
func IsTransferredEQ(v bool) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldIsTransferred, v))
}

// IsTransferredNEQ applies the NEQ predicate on the "is_transferred" field.
func IsTransferredNEQ(v bool) predicate.Node {
	return predicate.Node(sql.FieldNEQ(FieldIsTransferred, v))
}

// AllowCancelEQ applies the EQ predicate on the "allow_cancel" field.
func AllowCancelEQ(v bool) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldAllowCancel, v))
}

// AllowCancelNEQ applies the NEQ predicate on the "allow_cancel" field.
func AllowCancelNEQ(v bool) predicate.Node {
	return predicate.Node(sql.FieldNEQ(FieldAllowCancel, v))
}

// AllowUrgeEQ applies the EQ predicate on the "allow_urge" field.
func AllowUrgeEQ(v bool) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldAllowUrge, v))
}

// AllowUrgeNEQ applies the NEQ predicate on the "allow_urge" field.
func AllowUrgeNEQ(v bool) predicate.Node {
	return predicate.Node(sql.FieldNEQ(FieldAllowUrge, v))
}

// AllowDelegateEQ applies the EQ predicate on the "allow_delegate" field.
func AllowDelegateEQ(v bool) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldAllowDelegate, v))
}

// AllowDelegateNEQ applies the NEQ predicate on the "allow_delegate" field.
func AllowDelegateNEQ(v bool) predicate.Node {
	return predicate.Node(sql.FieldNEQ(FieldAllowDelegate, v))
}

// AllowTransferEQ applies the EQ predicate on the "allow_transfer" field.
func AllowTransferEQ(v bool) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldAllowTransfer, v))
}

// AllowTransferNEQ applies the NEQ predicate on the "allow_transfer" field.
func AllowTransferNEQ(v bool) predicate.Node {
	return predicate.Node(sql.FieldNEQ(FieldAllowTransfer, v))
}

// IsDraftEnabledEQ applies the EQ predicate on the "is_draft_enabled" field.
func IsDraftEnabledEQ(v bool) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldIsDraftEnabled, v))
}

// IsDraftEnabledNEQ applies the NEQ predicate on the "is_draft_enabled" field.
func IsDraftEnabledNEQ(v bool) predicate.Node {
	return predicate.Node(sql.FieldNEQ(FieldIsDraftEnabled, v))
}

// IsAutoStartEQ applies the EQ predicate on the "is_auto_start" field.
func IsAutoStartEQ(v bool) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldIsAutoStart, v))
}

// IsAutoStartNEQ applies the NEQ predicate on the "is_auto_start" field.
func IsAutoStartNEQ(v bool) predicate.Node {
	return predicate.Node(sql.FieldNEQ(FieldIsAutoStart, v))
}

// StrictModeEQ applies the EQ predicate on the "strict_mode" field.
func StrictModeEQ(v bool) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldStrictMode, v))
}

// StrictModeNEQ applies the NEQ predicate on the "strict_mode" field.
func StrictModeNEQ(v bool) predicate.Node {
	return predicate.Node(sql.FieldNEQ(FieldStrictMode, v))
}

// StartTimeEQ applies the EQ predicate on the "start_time" field.
func StartTimeEQ(v int64) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldStartTime, v))
}

// StartTimeNEQ applies the NEQ predicate on the "start_time" field.
func StartTimeNEQ(v int64) predicate.Node {
	return predicate.Node(sql.FieldNEQ(FieldStartTime, v))
}

// StartTimeIn applies the In predicate on the "start_time" field.
func StartTimeIn(vs ...int64) predicate.Node {
	return predicate.Node(sql.FieldIn(FieldStartTime, vs...))
}

// StartTimeNotIn applies the NotIn predicate on the "start_time" field.
func StartTimeNotIn(vs ...int64) predicate.Node {
	return predicate.Node(sql.FieldNotIn(FieldStartTime, vs...))
}

// StartTimeGT applies the GT predicate on the "start_time" field.
func StartTimeGT(v int64) predicate.Node {
	return predicate.Node(sql.FieldGT(FieldStartTime, v))
}

// StartTimeGTE applies the GTE predicate on the "start_time" field.
func StartTimeGTE(v int64) predicate.Node {
	return predicate.Node(sql.FieldGTE(FieldStartTime, v))
}

// StartTimeLT applies the LT predicate on the "start_time" field.
func StartTimeLT(v int64) predicate.Node {
	return predicate.Node(sql.FieldLT(FieldStartTime, v))
}

// StartTimeLTE applies the LTE predicate on the "start_time" field.
func StartTimeLTE(v int64) predicate.Node {
	return predicate.Node(sql.FieldLTE(FieldStartTime, v))
}

// EndTimeEQ applies the EQ predicate on the "end_time" field.
func EndTimeEQ(v int64) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldEndTime, v))
}

// EndTimeNEQ applies the NEQ predicate on the "end_time" field.
func EndTimeNEQ(v int64) predicate.Node {
	return predicate.Node(sql.FieldNEQ(FieldEndTime, v))
}

// EndTimeIn applies the In predicate on the "end_time" field.
func EndTimeIn(vs ...int64) predicate.Node {
	return predicate.Node(sql.FieldIn(FieldEndTime, vs...))
}

// EndTimeNotIn applies the NotIn predicate on the "end_time" field.
func EndTimeNotIn(vs ...int64) predicate.Node {
	return predicate.Node(sql.FieldNotIn(FieldEndTime, vs...))
}

// EndTimeGT applies the GT predicate on the "end_time" field.
func EndTimeGT(v int64) predicate.Node {
	return predicate.Node(sql.FieldGT(FieldEndTime, v))
}

// EndTimeGTE applies the GTE predicate on the "end_time" field.
func EndTimeGTE(v int64) predicate.Node {
	return predicate.Node(sql.FieldGTE(FieldEndTime, v))
}

// EndTimeLT applies the LT predicate on the "end_time" field.
func EndTimeLT(v int64) predicate.Node {
	return predicate.Node(sql.FieldLT(FieldEndTime, v))
}

// EndTimeLTE applies the LTE predicate on the "end_time" field.
func EndTimeLTE(v int64) predicate.Node {
	return predicate.Node(sql.FieldLTE(FieldEndTime, v))
}

// EndTimeIsNil applies the IsNil predicate on the "end_time" field.
func EndTimeIsNil() predicate.Node {
	return predicate.Node(sql.FieldIsNull(FieldEndTime))
}

// EndTimeNotNil applies the NotNil predicate on the "end_time" field.
func EndTimeNotNil() predicate.Node {
	return predicate.Node(sql.FieldNotNull(FieldEndTime))
}

// DueTimeEQ applies the EQ predicate on the "due_time" field.
func DueTimeEQ(v int64) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldDueTime, v))
}

// DueTimeNEQ applies the NEQ predicate on the "due_time" field.
func DueTimeNEQ(v int64) predicate.Node {
	return predicate.Node(sql.FieldNEQ(FieldDueTime, v))
}

// DueTimeIn applies the In predicate on the "due_time" field.
func DueTimeIn(vs ...int64) predicate.Node {
	return predicate.Node(sql.FieldIn(FieldDueTime, vs...))
}

// DueTimeNotIn applies the NotIn predicate on the "due_time" field.
func DueTimeNotIn(vs ...int64) predicate.Node {
	return predicate.Node(sql.FieldNotIn(FieldDueTime, vs...))
}

// DueTimeGT applies the GT predicate on the "due_time" field.
func DueTimeGT(v int64) predicate.Node {
	return predicate.Node(sql.FieldGT(FieldDueTime, v))
}

// DueTimeGTE applies the GTE predicate on the "due_time" field.
func DueTimeGTE(v int64) predicate.Node {
	return predicate.Node(sql.FieldGTE(FieldDueTime, v))
}

// DueTimeLT applies the LT predicate on the "due_time" field.
func DueTimeLT(v int64) predicate.Node {
	return predicate.Node(sql.FieldLT(FieldDueTime, v))
}

// DueTimeLTE applies the LTE predicate on the "due_time" field.
func DueTimeLTE(v int64) predicate.Node {
	return predicate.Node(sql.FieldLTE(FieldDueTime, v))
}

// DueTimeIsNil applies the IsNil predicate on the "due_time" field.
func DueTimeIsNil() predicate.Node {
	return predicate.Node(sql.FieldIsNull(FieldDueTime))
}

// DueTimeNotNil applies the NotNil predicate on the "due_time" field.
func DueTimeNotNil() predicate.Node {
	return predicate.Node(sql.FieldNotNull(FieldDueTime))
}

// DurationEQ applies the EQ predicate on the "duration" field.
func DurationEQ(v int) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldDuration, v))
}

// DurationNEQ applies the NEQ predicate on the "duration" field.
func DurationNEQ(v int) predicate.Node {
	return predicate.Node(sql.FieldNEQ(FieldDuration, v))
}

// DurationIn applies the In predicate on the "duration" field.
func DurationIn(vs ...int) predicate.Node {
	return predicate.Node(sql.FieldIn(FieldDuration, vs...))
}

// DurationNotIn applies the NotIn predicate on the "duration" field.
func DurationNotIn(vs ...int) predicate.Node {
	return predicate.Node(sql.FieldNotIn(FieldDuration, vs...))
}

// DurationGT applies the GT predicate on the "duration" field.
func DurationGT(v int) predicate.Node {
	return predicate.Node(sql.FieldGT(FieldDuration, v))
}

// DurationGTE applies the GTE predicate on the "duration" field.
func DurationGTE(v int) predicate.Node {
	return predicate.Node(sql.FieldGTE(FieldDuration, v))
}

// DurationLT applies the LT predicate on the "duration" field.
func DurationLT(v int) predicate.Node {
	return predicate.Node(sql.FieldLT(FieldDuration, v))
}

// DurationLTE applies the LTE predicate on the "duration" field.
func DurationLTE(v int) predicate.Node {
	return predicate.Node(sql.FieldLTE(FieldDuration, v))
}

// DurationIsNil applies the IsNil predicate on the "duration" field.
func DurationIsNil() predicate.Node {
	return predicate.Node(sql.FieldIsNull(FieldDuration))
}

// DurationNotNil applies the NotNil predicate on the "duration" field.
func DurationNotNil() predicate.Node {
	return predicate.Node(sql.FieldNotNull(FieldDuration))
}

// PriorityEQ applies the EQ predicate on the "priority" field.
func PriorityEQ(v int) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldPriority, v))
}

// PriorityNEQ applies the NEQ predicate on the "priority" field.
func PriorityNEQ(v int) predicate.Node {
	return predicate.Node(sql.FieldNEQ(FieldPriority, v))
}

// PriorityIn applies the In predicate on the "priority" field.
func PriorityIn(vs ...int) predicate.Node {
	return predicate.Node(sql.FieldIn(FieldPriority, vs...))
}

// PriorityNotIn applies the NotIn predicate on the "priority" field.
func PriorityNotIn(vs ...int) predicate.Node {
	return predicate.Node(sql.FieldNotIn(FieldPriority, vs...))
}

// PriorityGT applies the GT predicate on the "priority" field.
func PriorityGT(v int) predicate.Node {
	return predicate.Node(sql.FieldGT(FieldPriority, v))
}

// PriorityGTE applies the GTE predicate on the "priority" field.
func PriorityGTE(v int) predicate.Node {
	return predicate.Node(sql.FieldGTE(FieldPriority, v))
}

// PriorityLT applies the LT predicate on the "priority" field.
func PriorityLT(v int) predicate.Node {
	return predicate.Node(sql.FieldLT(FieldPriority, v))
}

// PriorityLTE applies the LTE predicate on the "priority" field.
func PriorityLTE(v int) predicate.Node {
	return predicate.Node(sql.FieldLTE(FieldPriority, v))
}

// IsTimeoutEQ applies the EQ predicate on the "is_timeout" field.
func IsTimeoutEQ(v bool) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldIsTimeout, v))
}

// IsTimeoutNEQ applies the NEQ predicate on the "is_timeout" field.
func IsTimeoutNEQ(v bool) predicate.Node {
	return predicate.Node(sql.FieldNEQ(FieldIsTimeout, v))
}

// ReminderCountEQ applies the EQ predicate on the "reminder_count" field.
func ReminderCountEQ(v int) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldReminderCount, v))
}

// ReminderCountNEQ applies the NEQ predicate on the "reminder_count" field.
func ReminderCountNEQ(v int) predicate.Node {
	return predicate.Node(sql.FieldNEQ(FieldReminderCount, v))
}

// ReminderCountIn applies the In predicate on the "reminder_count" field.
func ReminderCountIn(vs ...int) predicate.Node {
	return predicate.Node(sql.FieldIn(FieldReminderCount, vs...))
}

// ReminderCountNotIn applies the NotIn predicate on the "reminder_count" field.
func ReminderCountNotIn(vs ...int) predicate.Node {
	return predicate.Node(sql.FieldNotIn(FieldReminderCount, vs...))
}

// ReminderCountGT applies the GT predicate on the "reminder_count" field.
func ReminderCountGT(v int) predicate.Node {
	return predicate.Node(sql.FieldGT(FieldReminderCount, v))
}

// ReminderCountGTE applies the GTE predicate on the "reminder_count" field.
func ReminderCountGTE(v int) predicate.Node {
	return predicate.Node(sql.FieldGTE(FieldReminderCount, v))
}

// ReminderCountLT applies the LT predicate on the "reminder_count" field.
func ReminderCountLT(v int) predicate.Node {
	return predicate.Node(sql.FieldLT(FieldReminderCount, v))
}

// ReminderCountLTE applies the LTE predicate on the "reminder_count" field.
func ReminderCountLTE(v int) predicate.Node {
	return predicate.Node(sql.FieldLTE(FieldReminderCount, v))
}

// ExtrasIsNil applies the IsNil predicate on the "extras" field.
func ExtrasIsNil() predicate.Node {
	return predicate.Node(sql.FieldIsNull(FieldExtras))
}

// ExtrasNotNil applies the NotNil predicate on the "extras" field.
func ExtrasNotNil() predicate.Node {
	return predicate.Node(sql.FieldNotNull(FieldExtras))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v string) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v string) predicate.Node {
	return predicate.Node(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...string) predicate.Node {
	return predicate.Node(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...string) predicate.Node {
	return predicate.Node(sql.FieldNotIn(FieldTenantID, vs...))
}

// TenantIDGT applies the GT predicate on the "tenant_id" field.
func TenantIDGT(v string) predicate.Node {
	return predicate.Node(sql.FieldGT(FieldTenantID, v))
}

// TenantIDGTE applies the GTE predicate on the "tenant_id" field.
func TenantIDGTE(v string) predicate.Node {
	return predicate.Node(sql.FieldGTE(FieldTenantID, v))
}

// TenantIDLT applies the LT predicate on the "tenant_id" field.
func TenantIDLT(v string) predicate.Node {
	return predicate.Node(sql.FieldLT(FieldTenantID, v))
}

// TenantIDLTE applies the LTE predicate on the "tenant_id" field.
func TenantIDLTE(v string) predicate.Node {
	return predicate.Node(sql.FieldLTE(FieldTenantID, v))
}

// TenantIDContains applies the Contains predicate on the "tenant_id" field.
func TenantIDContains(v string) predicate.Node {
	return predicate.Node(sql.FieldContains(FieldTenantID, v))
}

// TenantIDHasPrefix applies the HasPrefix predicate on the "tenant_id" field.
func TenantIDHasPrefix(v string) predicate.Node {
	return predicate.Node(sql.FieldHasPrefix(FieldTenantID, v))
}

// TenantIDHasSuffix applies the HasSuffix predicate on the "tenant_id" field.
func TenantIDHasSuffix(v string) predicate.Node {
	return predicate.Node(sql.FieldHasSuffix(FieldTenantID, v))
}

// TenantIDIsNil applies the IsNil predicate on the "tenant_id" field.
func TenantIDIsNil() predicate.Node {
	return predicate.Node(sql.FieldIsNull(FieldTenantID))
}

// TenantIDNotNil applies the NotNil predicate on the "tenant_id" field.
func TenantIDNotNil() predicate.Node {
	return predicate.Node(sql.FieldNotNull(FieldTenantID))
}

// TenantIDEqualFold applies the EqualFold predicate on the "tenant_id" field.
func TenantIDEqualFold(v string) predicate.Node {
	return predicate.Node(sql.FieldEqualFold(FieldTenantID, v))
}

// TenantIDContainsFold applies the ContainsFold predicate on the "tenant_id" field.
func TenantIDContainsFold(v string) predicate.Node {
	return predicate.Node(sql.FieldContainsFold(FieldTenantID, v))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v string) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v string) predicate.Node {
	return predicate.Node(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...string) predicate.Node {
	return predicate.Node(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...string) predicate.Node {
	return predicate.Node(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v string) predicate.Node {
	return predicate.Node(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v string) predicate.Node {
	return predicate.Node(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v string) predicate.Node {
	return predicate.Node(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v string) predicate.Node {
	return predicate.Node(sql.FieldLTE(FieldCreatedBy, v))
}

// CreatedByContains applies the Contains predicate on the "created_by" field.
func CreatedByContains(v string) predicate.Node {
	return predicate.Node(sql.FieldContains(FieldCreatedBy, v))
}

// CreatedByHasPrefix applies the HasPrefix predicate on the "created_by" field.
func CreatedByHasPrefix(v string) predicate.Node {
	return predicate.Node(sql.FieldHasPrefix(FieldCreatedBy, v))
}

// CreatedByHasSuffix applies the HasSuffix predicate on the "created_by" field.
func CreatedByHasSuffix(v string) predicate.Node {
	return predicate.Node(sql.FieldHasSuffix(FieldCreatedBy, v))
}

// CreatedByIsNil applies the IsNil predicate on the "created_by" field.
func CreatedByIsNil() predicate.Node {
	return predicate.Node(sql.FieldIsNull(FieldCreatedBy))
}

// CreatedByNotNil applies the NotNil predicate on the "created_by" field.
func CreatedByNotNil() predicate.Node {
	return predicate.Node(sql.FieldNotNull(FieldCreatedBy))
}

// CreatedByEqualFold applies the EqualFold predicate on the "created_by" field.
func CreatedByEqualFold(v string) predicate.Node {
	return predicate.Node(sql.FieldEqualFold(FieldCreatedBy, v))
}

// CreatedByContainsFold applies the ContainsFold predicate on the "created_by" field.
func CreatedByContainsFold(v string) predicate.Node {
	return predicate.Node(sql.FieldContainsFold(FieldCreatedBy, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v string) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v string) predicate.Node {
	return predicate.Node(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...string) predicate.Node {
	return predicate.Node(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...string) predicate.Node {
	return predicate.Node(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v string) predicate.Node {
	return predicate.Node(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v string) predicate.Node {
	return predicate.Node(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v string) predicate.Node {
	return predicate.Node(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v string) predicate.Node {
	return predicate.Node(sql.FieldLTE(FieldUpdatedBy, v))
}

// UpdatedByContains applies the Contains predicate on the "updated_by" field.
func UpdatedByContains(v string) predicate.Node {
	return predicate.Node(sql.FieldContains(FieldUpdatedBy, v))
}

// UpdatedByHasPrefix applies the HasPrefix predicate on the "updated_by" field.
func UpdatedByHasPrefix(v string) predicate.Node {
	return predicate.Node(sql.FieldHasPrefix(FieldUpdatedBy, v))
}

// UpdatedByHasSuffix applies the HasSuffix predicate on the "updated_by" field.
func UpdatedByHasSuffix(v string) predicate.Node {
	return predicate.Node(sql.FieldHasSuffix(FieldUpdatedBy, v))
}

// UpdatedByIsNil applies the IsNil predicate on the "updated_by" field.
func UpdatedByIsNil() predicate.Node {
	return predicate.Node(sql.FieldIsNull(FieldUpdatedBy))
}

// UpdatedByNotNil applies the NotNil predicate on the "updated_by" field.
func UpdatedByNotNil() predicate.Node {
	return predicate.Node(sql.FieldNotNull(FieldUpdatedBy))
}

// UpdatedByEqualFold applies the EqualFold predicate on the "updated_by" field.
func UpdatedByEqualFold(v string) predicate.Node {
	return predicate.Node(sql.FieldEqualFold(FieldUpdatedBy, v))
}

// UpdatedByContainsFold applies the ContainsFold predicate on the "updated_by" field.
func UpdatedByContainsFold(v string) predicate.Node {
	return predicate.Node(sql.FieldContainsFold(FieldUpdatedBy, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v int64) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v int64) predicate.Node {
	return predicate.Node(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...int64) predicate.Node {
	return predicate.Node(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...int64) predicate.Node {
	return predicate.Node(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v int64) predicate.Node {
	return predicate.Node(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v int64) predicate.Node {
	return predicate.Node(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v int64) predicate.Node {
	return predicate.Node(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v int64) predicate.Node {
	return predicate.Node(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.Node {
	return predicate.Node(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.Node {
	return predicate.Node(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v int64) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v int64) predicate.Node {
	return predicate.Node(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...int64) predicate.Node {
	return predicate.Node(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...int64) predicate.Node {
	return predicate.Node(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v int64) predicate.Node {
	return predicate.Node(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v int64) predicate.Node {
	return predicate.Node(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v int64) predicate.Node {
	return predicate.Node(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v int64) predicate.Node {
	return predicate.Node(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.Node {
	return predicate.Node(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.Node {
	return predicate.Node(sql.FieldNotNull(FieldUpdatedAt))
}

// ProcessIDEQ applies the EQ predicate on the "process_id" field.
func ProcessIDEQ(v string) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldProcessID, v))
}

// ProcessIDNEQ applies the NEQ predicate on the "process_id" field.
func ProcessIDNEQ(v string) predicate.Node {
	return predicate.Node(sql.FieldNEQ(FieldProcessID, v))
}

// ProcessIDIn applies the In predicate on the "process_id" field.
func ProcessIDIn(vs ...string) predicate.Node {
	return predicate.Node(sql.FieldIn(FieldProcessID, vs...))
}

// ProcessIDNotIn applies the NotIn predicate on the "process_id" field.
func ProcessIDNotIn(vs ...string) predicate.Node {
	return predicate.Node(sql.FieldNotIn(FieldProcessID, vs...))
}

// ProcessIDGT applies the GT predicate on the "process_id" field.
func ProcessIDGT(v string) predicate.Node {
	return predicate.Node(sql.FieldGT(FieldProcessID, v))
}

// ProcessIDGTE applies the GTE predicate on the "process_id" field.
func ProcessIDGTE(v string) predicate.Node {
	return predicate.Node(sql.FieldGTE(FieldProcessID, v))
}

// ProcessIDLT applies the LT predicate on the "process_id" field.
func ProcessIDLT(v string) predicate.Node {
	return predicate.Node(sql.FieldLT(FieldProcessID, v))
}

// ProcessIDLTE applies the LTE predicate on the "process_id" field.
func ProcessIDLTE(v string) predicate.Node {
	return predicate.Node(sql.FieldLTE(FieldProcessID, v))
}

// ProcessIDContains applies the Contains predicate on the "process_id" field.
func ProcessIDContains(v string) predicate.Node {
	return predicate.Node(sql.FieldContains(FieldProcessID, v))
}

// ProcessIDHasPrefix applies the HasPrefix predicate on the "process_id" field.
func ProcessIDHasPrefix(v string) predicate.Node {
	return predicate.Node(sql.FieldHasPrefix(FieldProcessID, v))
}

// ProcessIDHasSuffix applies the HasSuffix predicate on the "process_id" field.
func ProcessIDHasSuffix(v string) predicate.Node {
	return predicate.Node(sql.FieldHasSuffix(FieldProcessID, v))
}

// ProcessIDEqualFold applies the EqualFold predicate on the "process_id" field.
func ProcessIDEqualFold(v string) predicate.Node {
	return predicate.Node(sql.FieldEqualFold(FieldProcessID, v))
}

// ProcessIDContainsFold applies the ContainsFold predicate on the "process_id" field.
func ProcessIDContainsFold(v string) predicate.Node {
	return predicate.Node(sql.FieldContainsFold(FieldProcessID, v))
}

// PrevNodesIsNil applies the IsNil predicate on the "prev_nodes" field.
func PrevNodesIsNil() predicate.Node {
	return predicate.Node(sql.FieldIsNull(FieldPrevNodes))
}

// PrevNodesNotNil applies the NotNil predicate on the "prev_nodes" field.
func PrevNodesNotNil() predicate.Node {
	return predicate.Node(sql.FieldNotNull(FieldPrevNodes))
}

// NextNodesIsNil applies the IsNil predicate on the "next_nodes" field.
func NextNodesIsNil() predicate.Node {
	return predicate.Node(sql.FieldIsNull(FieldNextNodes))
}

// NextNodesNotNil applies the NotNil predicate on the "next_nodes" field.
func NextNodesNotNil() predicate.Node {
	return predicate.Node(sql.FieldNotNull(FieldNextNodes))
}

// ParallelNodesIsNil applies the IsNil predicate on the "parallel_nodes" field.
func ParallelNodesIsNil() predicate.Node {
	return predicate.Node(sql.FieldIsNull(FieldParallelNodes))
}

// ParallelNodesNotNil applies the NotNil predicate on the "parallel_nodes" field.
func ParallelNodesNotNil() predicate.Node {
	return predicate.Node(sql.FieldNotNull(FieldParallelNodes))
}

// BranchNodesIsNil applies the IsNil predicate on the "branch_nodes" field.
func BranchNodesIsNil() predicate.Node {
	return predicate.Node(sql.FieldIsNull(FieldBranchNodes))
}

// BranchNodesNotNil applies the NotNil predicate on the "branch_nodes" field.
func BranchNodesNotNil() predicate.Node {
	return predicate.Node(sql.FieldNotNull(FieldBranchNodes))
}

// ConditionsIsNil applies the IsNil predicate on the "conditions" field.
func ConditionsIsNil() predicate.Node {
	return predicate.Node(sql.FieldIsNull(FieldConditions))
}

// ConditionsNotNil applies the NotNil predicate on the "conditions" field.
func ConditionsNotNil() predicate.Node {
	return predicate.Node(sql.FieldNotNull(FieldConditions))
}

// PropertiesIsNil applies the IsNil predicate on the "properties" field.
func PropertiesIsNil() predicate.Node {
	return predicate.Node(sql.FieldIsNull(FieldProperties))
}

// PropertiesNotNil applies the NotNil predicate on the "properties" field.
func PropertiesNotNil() predicate.Node {
	return predicate.Node(sql.FieldNotNull(FieldProperties))
}

// IsCountersignEQ applies the EQ predicate on the "is_countersign" field.
func IsCountersignEQ(v bool) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldIsCountersign, v))
}

// IsCountersignNEQ applies the NEQ predicate on the "is_countersign" field.
func IsCountersignNEQ(v bool) predicate.Node {
	return predicate.Node(sql.FieldNEQ(FieldIsCountersign, v))
}

// CountersignRuleEQ applies the EQ predicate on the "countersign_rule" field.
func CountersignRuleEQ(v string) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldCountersignRule, v))
}

// CountersignRuleNEQ applies the NEQ predicate on the "countersign_rule" field.
func CountersignRuleNEQ(v string) predicate.Node {
	return predicate.Node(sql.FieldNEQ(FieldCountersignRule, v))
}

// CountersignRuleIn applies the In predicate on the "countersign_rule" field.
func CountersignRuleIn(vs ...string) predicate.Node {
	return predicate.Node(sql.FieldIn(FieldCountersignRule, vs...))
}

// CountersignRuleNotIn applies the NotIn predicate on the "countersign_rule" field.
func CountersignRuleNotIn(vs ...string) predicate.Node {
	return predicate.Node(sql.FieldNotIn(FieldCountersignRule, vs...))
}

// CountersignRuleGT applies the GT predicate on the "countersign_rule" field.
func CountersignRuleGT(v string) predicate.Node {
	return predicate.Node(sql.FieldGT(FieldCountersignRule, v))
}

// CountersignRuleGTE applies the GTE predicate on the "countersign_rule" field.
func CountersignRuleGTE(v string) predicate.Node {
	return predicate.Node(sql.FieldGTE(FieldCountersignRule, v))
}

// CountersignRuleLT applies the LT predicate on the "countersign_rule" field.
func CountersignRuleLT(v string) predicate.Node {
	return predicate.Node(sql.FieldLT(FieldCountersignRule, v))
}

// CountersignRuleLTE applies the LTE predicate on the "countersign_rule" field.
func CountersignRuleLTE(v string) predicate.Node {
	return predicate.Node(sql.FieldLTE(FieldCountersignRule, v))
}

// CountersignRuleContains applies the Contains predicate on the "countersign_rule" field.
func CountersignRuleContains(v string) predicate.Node {
	return predicate.Node(sql.FieldContains(FieldCountersignRule, v))
}

// CountersignRuleHasPrefix applies the HasPrefix predicate on the "countersign_rule" field.
func CountersignRuleHasPrefix(v string) predicate.Node {
	return predicate.Node(sql.FieldHasPrefix(FieldCountersignRule, v))
}

// CountersignRuleHasSuffix applies the HasSuffix predicate on the "countersign_rule" field.
func CountersignRuleHasSuffix(v string) predicate.Node {
	return predicate.Node(sql.FieldHasSuffix(FieldCountersignRule, v))
}

// CountersignRuleIsNil applies the IsNil predicate on the "countersign_rule" field.
func CountersignRuleIsNil() predicate.Node {
	return predicate.Node(sql.FieldIsNull(FieldCountersignRule))
}

// CountersignRuleNotNil applies the NotNil predicate on the "countersign_rule" field.
func CountersignRuleNotNil() predicate.Node {
	return predicate.Node(sql.FieldNotNull(FieldCountersignRule))
}

// CountersignRuleEqualFold applies the EqualFold predicate on the "countersign_rule" field.
func CountersignRuleEqualFold(v string) predicate.Node {
	return predicate.Node(sql.FieldEqualFold(FieldCountersignRule, v))
}

// CountersignRuleContainsFold applies the ContainsFold predicate on the "countersign_rule" field.
func CountersignRuleContainsFold(v string) predicate.Node {
	return predicate.Node(sql.FieldContainsFold(FieldCountersignRule, v))
}

// HandlersIsNil applies the IsNil predicate on the "handlers" field.
func HandlersIsNil() predicate.Node {
	return predicate.Node(sql.FieldIsNull(FieldHandlers))
}

// HandlersNotNil applies the NotNil predicate on the "handlers" field.
func HandlersNotNil() predicate.Node {
	return predicate.Node(sql.FieldNotNull(FieldHandlers))
}

// ListenersIsNil applies the IsNil predicate on the "listeners" field.
func ListenersIsNil() predicate.Node {
	return predicate.Node(sql.FieldIsNull(FieldListeners))
}

// ListenersNotNil applies the NotNil predicate on the "listeners" field.
func ListenersNotNil() predicate.Node {
	return predicate.Node(sql.FieldNotNull(FieldListeners))
}

// HooksIsNil applies the IsNil predicate on the "hooks" field.
func HooksIsNil() predicate.Node {
	return predicate.Node(sql.FieldIsNull(FieldHooks))
}

// HooksNotNil applies the NotNil predicate on the "hooks" field.
func HooksNotNil() predicate.Node {
	return predicate.Node(sql.FieldNotNull(FieldHooks))
}

// VariablesIsNil applies the IsNil predicate on the "variables" field.
func VariablesIsNil() predicate.Node {
	return predicate.Node(sql.FieldIsNull(FieldVariables))
}

// VariablesNotNil applies the NotNil predicate on the "variables" field.
func VariablesNotNil() predicate.Node {
	return predicate.Node(sql.FieldNotNull(FieldVariables))
}

// RetryTimesEQ applies the EQ predicate on the "retry_times" field.
func RetryTimesEQ(v int) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldRetryTimes, v))
}

// RetryTimesNEQ applies the NEQ predicate on the "retry_times" field.
func RetryTimesNEQ(v int) predicate.Node {
	return predicate.Node(sql.FieldNEQ(FieldRetryTimes, v))
}

// RetryTimesIn applies the In predicate on the "retry_times" field.
func RetryTimesIn(vs ...int) predicate.Node {
	return predicate.Node(sql.FieldIn(FieldRetryTimes, vs...))
}

// RetryTimesNotIn applies the NotIn predicate on the "retry_times" field.
func RetryTimesNotIn(vs ...int) predicate.Node {
	return predicate.Node(sql.FieldNotIn(FieldRetryTimes, vs...))
}

// RetryTimesGT applies the GT predicate on the "retry_times" field.
func RetryTimesGT(v int) predicate.Node {
	return predicate.Node(sql.FieldGT(FieldRetryTimes, v))
}

// RetryTimesGTE applies the GTE predicate on the "retry_times" field.
func RetryTimesGTE(v int) predicate.Node {
	return predicate.Node(sql.FieldGTE(FieldRetryTimes, v))
}

// RetryTimesLT applies the LT predicate on the "retry_times" field.
func RetryTimesLT(v int) predicate.Node {
	return predicate.Node(sql.FieldLT(FieldRetryTimes, v))
}

// RetryTimesLTE applies the LTE predicate on the "retry_times" field.
func RetryTimesLTE(v int) predicate.Node {
	return predicate.Node(sql.FieldLTE(FieldRetryTimes, v))
}

// RetryTimesIsNil applies the IsNil predicate on the "retry_times" field.
func RetryTimesIsNil() predicate.Node {
	return predicate.Node(sql.FieldIsNull(FieldRetryTimes))
}

// RetryTimesNotNil applies the NotNil predicate on the "retry_times" field.
func RetryTimesNotNil() predicate.Node {
	return predicate.Node(sql.FieldNotNull(FieldRetryTimes))
}

// RetryIntervalEQ applies the EQ predicate on the "retry_interval" field.
func RetryIntervalEQ(v int) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldRetryInterval, v))
}

// RetryIntervalNEQ applies the NEQ predicate on the "retry_interval" field.
func RetryIntervalNEQ(v int) predicate.Node {
	return predicate.Node(sql.FieldNEQ(FieldRetryInterval, v))
}

// RetryIntervalIn applies the In predicate on the "retry_interval" field.
func RetryIntervalIn(vs ...int) predicate.Node {
	return predicate.Node(sql.FieldIn(FieldRetryInterval, vs...))
}

// RetryIntervalNotIn applies the NotIn predicate on the "retry_interval" field.
func RetryIntervalNotIn(vs ...int) predicate.Node {
	return predicate.Node(sql.FieldNotIn(FieldRetryInterval, vs...))
}

// RetryIntervalGT applies the GT predicate on the "retry_interval" field.
func RetryIntervalGT(v int) predicate.Node {
	return predicate.Node(sql.FieldGT(FieldRetryInterval, v))
}

// RetryIntervalGTE applies the GTE predicate on the "retry_interval" field.
func RetryIntervalGTE(v int) predicate.Node {
	return predicate.Node(sql.FieldGTE(FieldRetryInterval, v))
}

// RetryIntervalLT applies the LT predicate on the "retry_interval" field.
func RetryIntervalLT(v int) predicate.Node {
	return predicate.Node(sql.FieldLT(FieldRetryInterval, v))
}

// RetryIntervalLTE applies the LTE predicate on the "retry_interval" field.
func RetryIntervalLTE(v int) predicate.Node {
	return predicate.Node(sql.FieldLTE(FieldRetryInterval, v))
}

// RetryIntervalIsNil applies the IsNil predicate on the "retry_interval" field.
func RetryIntervalIsNil() predicate.Node {
	return predicate.Node(sql.FieldIsNull(FieldRetryInterval))
}

// RetryIntervalNotNil applies the NotNil predicate on the "retry_interval" field.
func RetryIntervalNotNil() predicate.Node {
	return predicate.Node(sql.FieldNotNull(FieldRetryInterval))
}

// IsWorkingDayEQ applies the EQ predicate on the "is_working_day" field.
func IsWorkingDayEQ(v bool) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldIsWorkingDay, v))
}

// IsWorkingDayNEQ applies the NEQ predicate on the "is_working_day" field.
func IsWorkingDayNEQ(v bool) predicate.Node {
	return predicate.Node(sql.FieldNEQ(FieldIsWorkingDay, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Node) predicate.Node {
	return predicate.Node(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Node) predicate.Node {
	return predicate.Node(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Node) predicate.Node {
	return predicate.Node(sql.NotPredicates(p))
}
