// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/core/workflow/data/ent/node"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// NodeCreate is the builder for creating a Node entity.
type NodeCreate struct {
	config
	mutation *NodeMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (nc *NodeCreate) SetName(s string) *NodeCreate {
	nc.mutation.SetName(s)
	return nc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (nc *NodeCreate) SetNillableName(s *string) *NodeCreate {
	if s != nil {
		nc.SetName(*s)
	}
	return nc
}

// SetDescription sets the "description" field.
func (nc *NodeCreate) SetDescription(s string) *NodeCreate {
	nc.mutation.SetDescription(s)
	return nc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (nc *NodeCreate) SetNillableDescription(s *string) *NodeCreate {
	if s != nil {
		nc.SetDescription(*s)
	}
	return nc
}

// SetType sets the "type" field.
func (nc *NodeCreate) SetType(s string) *NodeCreate {
	nc.mutation.SetType(s)
	return nc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (nc *NodeCreate) SetNillableType(s *string) *NodeCreate {
	if s != nil {
		nc.SetType(*s)
	}
	return nc
}

// SetStatus sets the "status" field.
func (nc *NodeCreate) SetStatus(s string) *NodeCreate {
	nc.mutation.SetStatus(s)
	return nc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (nc *NodeCreate) SetNillableStatus(s *string) *NodeCreate {
	if s != nil {
		nc.SetStatus(*s)
	}
	return nc
}

// SetNodeKey sets the "node_key" field.
func (nc *NodeCreate) SetNodeKey(s string) *NodeCreate {
	nc.mutation.SetNodeKey(s)
	return nc
}

// SetNodeType sets the "node_type" field.
func (nc *NodeCreate) SetNodeType(s string) *NodeCreate {
	nc.mutation.SetNodeType(s)
	return nc
}

// SetNodeConfig sets the "node_config" field.
func (nc *NodeCreate) SetNodeConfig(m map[string]interface{}) *NodeCreate {
	nc.mutation.SetNodeConfig(m)
	return nc
}

// SetNodeRules sets the "node_rules" field.
func (nc *NodeCreate) SetNodeRules(m map[string]interface{}) *NodeCreate {
	nc.mutation.SetNodeRules(m)
	return nc
}

// SetNodeEvents sets the "node_events" field.
func (nc *NodeCreate) SetNodeEvents(m map[string]interface{}) *NodeCreate {
	nc.mutation.SetNodeEvents(m)
	return nc
}

// SetFormCode sets the "form_code" field.
func (nc *NodeCreate) SetFormCode(s string) *NodeCreate {
	nc.mutation.SetFormCode(s)
	return nc
}

// SetFormVersion sets the "form_version" field.
func (nc *NodeCreate) SetFormVersion(s string) *NodeCreate {
	nc.mutation.SetFormVersion(s)
	return nc
}

// SetNillableFormVersion sets the "form_version" field if the given value is not nil.
func (nc *NodeCreate) SetNillableFormVersion(s *string) *NodeCreate {
	if s != nil {
		nc.SetFormVersion(*s)
	}
	return nc
}

// SetFormConfig sets the "form_config" field.
func (nc *NodeCreate) SetFormConfig(m map[string]interface{}) *NodeCreate {
	nc.mutation.SetFormConfig(m)
	return nc
}

// SetFormPermissions sets the "form_permissions" field.
func (nc *NodeCreate) SetFormPermissions(m map[string]interface{}) *NodeCreate {
	nc.mutation.SetFormPermissions(m)
	return nc
}

// SetFieldPermissions sets the "field_permissions" field.
func (nc *NodeCreate) SetFieldPermissions(m map[string]interface{}) *NodeCreate {
	nc.mutation.SetFieldPermissions(m)
	return nc
}

// SetAssignees sets the "assignees" field.
func (nc *NodeCreate) SetAssignees(m []map[string]interface{}) *NodeCreate {
	nc.mutation.SetAssignees(m)
	return nc
}

// SetCandidates sets the "candidates" field.
func (nc *NodeCreate) SetCandidates(m []map[string]interface{}) *NodeCreate {
	nc.mutation.SetCandidates(m)
	return nc
}

// SetDelegatedFrom sets the "delegated_from" field.
func (nc *NodeCreate) SetDelegatedFrom(s string) *NodeCreate {
	nc.mutation.SetDelegatedFrom(s)
	return nc
}

// SetNillableDelegatedFrom sets the "delegated_from" field if the given value is not nil.
func (nc *NodeCreate) SetNillableDelegatedFrom(s *string) *NodeCreate {
	if s != nil {
		nc.SetDelegatedFrom(*s)
	}
	return nc
}

// SetDelegatedReason sets the "delegated_reason" field.
func (nc *NodeCreate) SetDelegatedReason(s string) *NodeCreate {
	nc.mutation.SetDelegatedReason(s)
	return nc
}

// SetNillableDelegatedReason sets the "delegated_reason" field if the given value is not nil.
func (nc *NodeCreate) SetNillableDelegatedReason(s *string) *NodeCreate {
	if s != nil {
		nc.SetDelegatedReason(*s)
	}
	return nc
}

// SetIsDelegated sets the "is_delegated" field.
func (nc *NodeCreate) SetIsDelegated(b bool) *NodeCreate {
	nc.mutation.SetIsDelegated(b)
	return nc
}

// SetNillableIsDelegated sets the "is_delegated" field if the given value is not nil.
func (nc *NodeCreate) SetNillableIsDelegated(b *bool) *NodeCreate {
	if b != nil {
		nc.SetIsDelegated(*b)
	}
	return nc
}

// SetIsTransferred sets the "is_transferred" field.
func (nc *NodeCreate) SetIsTransferred(b bool) *NodeCreate {
	nc.mutation.SetIsTransferred(b)
	return nc
}

// SetNillableIsTransferred sets the "is_transferred" field if the given value is not nil.
func (nc *NodeCreate) SetNillableIsTransferred(b *bool) *NodeCreate {
	if b != nil {
		nc.SetIsTransferred(*b)
	}
	return nc
}

// SetAllowCancel sets the "allow_cancel" field.
func (nc *NodeCreate) SetAllowCancel(b bool) *NodeCreate {
	nc.mutation.SetAllowCancel(b)
	return nc
}

// SetNillableAllowCancel sets the "allow_cancel" field if the given value is not nil.
func (nc *NodeCreate) SetNillableAllowCancel(b *bool) *NodeCreate {
	if b != nil {
		nc.SetAllowCancel(*b)
	}
	return nc
}

// SetAllowUrge sets the "allow_urge" field.
func (nc *NodeCreate) SetAllowUrge(b bool) *NodeCreate {
	nc.mutation.SetAllowUrge(b)
	return nc
}

// SetNillableAllowUrge sets the "allow_urge" field if the given value is not nil.
func (nc *NodeCreate) SetNillableAllowUrge(b *bool) *NodeCreate {
	if b != nil {
		nc.SetAllowUrge(*b)
	}
	return nc
}

// SetAllowDelegate sets the "allow_delegate" field.
func (nc *NodeCreate) SetAllowDelegate(b bool) *NodeCreate {
	nc.mutation.SetAllowDelegate(b)
	return nc
}

// SetNillableAllowDelegate sets the "allow_delegate" field if the given value is not nil.
func (nc *NodeCreate) SetNillableAllowDelegate(b *bool) *NodeCreate {
	if b != nil {
		nc.SetAllowDelegate(*b)
	}
	return nc
}

// SetAllowTransfer sets the "allow_transfer" field.
func (nc *NodeCreate) SetAllowTransfer(b bool) *NodeCreate {
	nc.mutation.SetAllowTransfer(b)
	return nc
}

// SetNillableAllowTransfer sets the "allow_transfer" field if the given value is not nil.
func (nc *NodeCreate) SetNillableAllowTransfer(b *bool) *NodeCreate {
	if b != nil {
		nc.SetAllowTransfer(*b)
	}
	return nc
}

// SetIsDraftEnabled sets the "is_draft_enabled" field.
func (nc *NodeCreate) SetIsDraftEnabled(b bool) *NodeCreate {
	nc.mutation.SetIsDraftEnabled(b)
	return nc
}

// SetNillableIsDraftEnabled sets the "is_draft_enabled" field if the given value is not nil.
func (nc *NodeCreate) SetNillableIsDraftEnabled(b *bool) *NodeCreate {
	if b != nil {
		nc.SetIsDraftEnabled(*b)
	}
	return nc
}

// SetIsAutoStart sets the "is_auto_start" field.
func (nc *NodeCreate) SetIsAutoStart(b bool) *NodeCreate {
	nc.mutation.SetIsAutoStart(b)
	return nc
}

// SetNillableIsAutoStart sets the "is_auto_start" field if the given value is not nil.
func (nc *NodeCreate) SetNillableIsAutoStart(b *bool) *NodeCreate {
	if b != nil {
		nc.SetIsAutoStart(*b)
	}
	return nc
}

// SetStrictMode sets the "strict_mode" field.
func (nc *NodeCreate) SetStrictMode(b bool) *NodeCreate {
	nc.mutation.SetStrictMode(b)
	return nc
}

// SetNillableStrictMode sets the "strict_mode" field if the given value is not nil.
func (nc *NodeCreate) SetNillableStrictMode(b *bool) *NodeCreate {
	if b != nil {
		nc.SetStrictMode(*b)
	}
	return nc
}

// SetStartTime sets the "start_time" field.
func (nc *NodeCreate) SetStartTime(i int64) *NodeCreate {
	nc.mutation.SetStartTime(i)
	return nc
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (nc *NodeCreate) SetNillableStartTime(i *int64) *NodeCreate {
	if i != nil {
		nc.SetStartTime(*i)
	}
	return nc
}

// SetEndTime sets the "end_time" field.
func (nc *NodeCreate) SetEndTime(i int64) *NodeCreate {
	nc.mutation.SetEndTime(i)
	return nc
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (nc *NodeCreate) SetNillableEndTime(i *int64) *NodeCreate {
	if i != nil {
		nc.SetEndTime(*i)
	}
	return nc
}

// SetDueTime sets the "due_time" field.
func (nc *NodeCreate) SetDueTime(i int64) *NodeCreate {
	nc.mutation.SetDueTime(i)
	return nc
}

// SetNillableDueTime sets the "due_time" field if the given value is not nil.
func (nc *NodeCreate) SetNillableDueTime(i *int64) *NodeCreate {
	if i != nil {
		nc.SetDueTime(*i)
	}
	return nc
}

// SetDuration sets the "duration" field.
func (nc *NodeCreate) SetDuration(i int) *NodeCreate {
	nc.mutation.SetDuration(i)
	return nc
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (nc *NodeCreate) SetNillableDuration(i *int) *NodeCreate {
	if i != nil {
		nc.SetDuration(*i)
	}
	return nc
}

// SetPriority sets the "priority" field.
func (nc *NodeCreate) SetPriority(i int) *NodeCreate {
	nc.mutation.SetPriority(i)
	return nc
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (nc *NodeCreate) SetNillablePriority(i *int) *NodeCreate {
	if i != nil {
		nc.SetPriority(*i)
	}
	return nc
}

// SetIsTimeout sets the "is_timeout" field.
func (nc *NodeCreate) SetIsTimeout(b bool) *NodeCreate {
	nc.mutation.SetIsTimeout(b)
	return nc
}

// SetNillableIsTimeout sets the "is_timeout" field if the given value is not nil.
func (nc *NodeCreate) SetNillableIsTimeout(b *bool) *NodeCreate {
	if b != nil {
		nc.SetIsTimeout(*b)
	}
	return nc
}

// SetReminderCount sets the "reminder_count" field.
func (nc *NodeCreate) SetReminderCount(i int) *NodeCreate {
	nc.mutation.SetReminderCount(i)
	return nc
}

// SetNillableReminderCount sets the "reminder_count" field if the given value is not nil.
func (nc *NodeCreate) SetNillableReminderCount(i *int) *NodeCreate {
	if i != nil {
		nc.SetReminderCount(*i)
	}
	return nc
}

// SetExtras sets the "extras" field.
func (nc *NodeCreate) SetExtras(m map[string]interface{}) *NodeCreate {
	nc.mutation.SetExtras(m)
	return nc
}

// SetTenantID sets the "tenant_id" field.
func (nc *NodeCreate) SetTenantID(s string) *NodeCreate {
	nc.mutation.SetTenantID(s)
	return nc
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (nc *NodeCreate) SetNillableTenantID(s *string) *NodeCreate {
	if s != nil {
		nc.SetTenantID(*s)
	}
	return nc
}

// SetCreatedBy sets the "created_by" field.
func (nc *NodeCreate) SetCreatedBy(s string) *NodeCreate {
	nc.mutation.SetCreatedBy(s)
	return nc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (nc *NodeCreate) SetNillableCreatedBy(s *string) *NodeCreate {
	if s != nil {
		nc.SetCreatedBy(*s)
	}
	return nc
}

// SetUpdatedBy sets the "updated_by" field.
func (nc *NodeCreate) SetUpdatedBy(s string) *NodeCreate {
	nc.mutation.SetUpdatedBy(s)
	return nc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (nc *NodeCreate) SetNillableUpdatedBy(s *string) *NodeCreate {
	if s != nil {
		nc.SetUpdatedBy(*s)
	}
	return nc
}

// SetCreatedAt sets the "created_at" field.
func (nc *NodeCreate) SetCreatedAt(i int64) *NodeCreate {
	nc.mutation.SetCreatedAt(i)
	return nc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (nc *NodeCreate) SetNillableCreatedAt(i *int64) *NodeCreate {
	if i != nil {
		nc.SetCreatedAt(*i)
	}
	return nc
}

// SetUpdatedAt sets the "updated_at" field.
func (nc *NodeCreate) SetUpdatedAt(i int64) *NodeCreate {
	nc.mutation.SetUpdatedAt(i)
	return nc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (nc *NodeCreate) SetNillableUpdatedAt(i *int64) *NodeCreate {
	if i != nil {
		nc.SetUpdatedAt(*i)
	}
	return nc
}

// SetProcessID sets the "process_id" field.
func (nc *NodeCreate) SetProcessID(s string) *NodeCreate {
	nc.mutation.SetProcessID(s)
	return nc
}

// SetPermissions sets the "permissions" field.
func (nc *NodeCreate) SetPermissions(m map[string]interface{}) *NodeCreate {
	nc.mutation.SetPermissions(m)
	return nc
}

// SetPrevNodes sets the "prev_nodes" field.
func (nc *NodeCreate) SetPrevNodes(s []string) *NodeCreate {
	nc.mutation.SetPrevNodes(s)
	return nc
}

// SetNextNodes sets the "next_nodes" field.
func (nc *NodeCreate) SetNextNodes(s []string) *NodeCreate {
	nc.mutation.SetNextNodes(s)
	return nc
}

// SetParallelNodes sets the "parallel_nodes" field.
func (nc *NodeCreate) SetParallelNodes(s []string) *NodeCreate {
	nc.mutation.SetParallelNodes(s)
	return nc
}

// SetBranchNodes sets the "branch_nodes" field.
func (nc *NodeCreate) SetBranchNodes(s []string) *NodeCreate {
	nc.mutation.SetBranchNodes(s)
	return nc
}

// SetConditions sets the "conditions" field.
func (nc *NodeCreate) SetConditions(m []map[string]interface{}) *NodeCreate {
	nc.mutation.SetConditions(m)
	return nc
}

// SetProperties sets the "properties" field.
func (nc *NodeCreate) SetProperties(m map[string]interface{}) *NodeCreate {
	nc.mutation.SetProperties(m)
	return nc
}

// SetIsCountersign sets the "is_countersign" field.
func (nc *NodeCreate) SetIsCountersign(b bool) *NodeCreate {
	nc.mutation.SetIsCountersign(b)
	return nc
}

// SetNillableIsCountersign sets the "is_countersign" field if the given value is not nil.
func (nc *NodeCreate) SetNillableIsCountersign(b *bool) *NodeCreate {
	if b != nil {
		nc.SetIsCountersign(*b)
	}
	return nc
}

// SetCountersignRule sets the "countersign_rule" field.
func (nc *NodeCreate) SetCountersignRule(s string) *NodeCreate {
	nc.mutation.SetCountersignRule(s)
	return nc
}

// SetNillableCountersignRule sets the "countersign_rule" field if the given value is not nil.
func (nc *NodeCreate) SetNillableCountersignRule(s *string) *NodeCreate {
	if s != nil {
		nc.SetCountersignRule(*s)
	}
	return nc
}

// SetHandlers sets the "handlers" field.
func (nc *NodeCreate) SetHandlers(m map[string]interface{}) *NodeCreate {
	nc.mutation.SetHandlers(m)
	return nc
}

// SetListeners sets the "listeners" field.
func (nc *NodeCreate) SetListeners(m map[string]interface{}) *NodeCreate {
	nc.mutation.SetListeners(m)
	return nc
}

// SetHooks sets the "hooks" field.
func (nc *NodeCreate) SetHooks(m map[string]interface{}) *NodeCreate {
	nc.mutation.SetHooks(m)
	return nc
}

// SetRetryTimes sets the "retry_times" field.
func (nc *NodeCreate) SetRetryTimes(i int) *NodeCreate {
	nc.mutation.SetRetryTimes(i)
	return nc
}

// SetNillableRetryTimes sets the "retry_times" field if the given value is not nil.
func (nc *NodeCreate) SetNillableRetryTimes(i *int) *NodeCreate {
	if i != nil {
		nc.SetRetryTimes(*i)
	}
	return nc
}

// SetRetryInterval sets the "retry_interval" field.
func (nc *NodeCreate) SetRetryInterval(i int) *NodeCreate {
	nc.mutation.SetRetryInterval(i)
	return nc
}

// SetNillableRetryInterval sets the "retry_interval" field if the given value is not nil.
func (nc *NodeCreate) SetNillableRetryInterval(i *int) *NodeCreate {
	if i != nil {
		nc.SetRetryInterval(*i)
	}
	return nc
}

// SetIsWorkingDay sets the "is_working_day" field.
func (nc *NodeCreate) SetIsWorkingDay(b bool) *NodeCreate {
	nc.mutation.SetIsWorkingDay(b)
	return nc
}

// SetNillableIsWorkingDay sets the "is_working_day" field if the given value is not nil.
func (nc *NodeCreate) SetNillableIsWorkingDay(b *bool) *NodeCreate {
	if b != nil {
		nc.SetIsWorkingDay(*b)
	}
	return nc
}

// SetID sets the "id" field.
func (nc *NodeCreate) SetID(s string) *NodeCreate {
	nc.mutation.SetID(s)
	return nc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (nc *NodeCreate) SetNillableID(s *string) *NodeCreate {
	if s != nil {
		nc.SetID(*s)
	}
	return nc
}

// Mutation returns the NodeMutation object of the builder.
func (nc *NodeCreate) Mutation() *NodeMutation {
	return nc.mutation
}

// Save creates the Node in the database.
func (nc *NodeCreate) Save(ctx context.Context) (*Node, error) {
	nc.defaults()
	return withHooks(ctx, nc.sqlSave, nc.mutation, nc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (nc *NodeCreate) SaveX(ctx context.Context) *Node {
	v, err := nc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (nc *NodeCreate) Exec(ctx context.Context) error {
	_, err := nc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nc *NodeCreate) ExecX(ctx context.Context) {
	if err := nc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nc *NodeCreate) defaults() {
	if _, ok := nc.mutation.IsDelegated(); !ok {
		v := node.DefaultIsDelegated
		nc.mutation.SetIsDelegated(v)
	}
	if _, ok := nc.mutation.IsTransferred(); !ok {
		v := node.DefaultIsTransferred
		nc.mutation.SetIsTransferred(v)
	}
	if _, ok := nc.mutation.AllowCancel(); !ok {
		v := node.DefaultAllowCancel
		nc.mutation.SetAllowCancel(v)
	}
	if _, ok := nc.mutation.AllowUrge(); !ok {
		v := node.DefaultAllowUrge
		nc.mutation.SetAllowUrge(v)
	}
	if _, ok := nc.mutation.AllowDelegate(); !ok {
		v := node.DefaultAllowDelegate
		nc.mutation.SetAllowDelegate(v)
	}
	if _, ok := nc.mutation.AllowTransfer(); !ok {
		v := node.DefaultAllowTransfer
		nc.mutation.SetAllowTransfer(v)
	}
	if _, ok := nc.mutation.IsDraftEnabled(); !ok {
		v := node.DefaultIsDraftEnabled
		nc.mutation.SetIsDraftEnabled(v)
	}
	if _, ok := nc.mutation.IsAutoStart(); !ok {
		v := node.DefaultIsAutoStart
		nc.mutation.SetIsAutoStart(v)
	}
	if _, ok := nc.mutation.StrictMode(); !ok {
		v := node.DefaultStrictMode
		nc.mutation.SetStrictMode(v)
	}
	if _, ok := nc.mutation.StartTime(); !ok {
		v := node.DefaultStartTime()
		nc.mutation.SetStartTime(v)
	}
	if _, ok := nc.mutation.Priority(); !ok {
		v := node.DefaultPriority
		nc.mutation.SetPriority(v)
	}
	if _, ok := nc.mutation.IsTimeout(); !ok {
		v := node.DefaultIsTimeout
		nc.mutation.SetIsTimeout(v)
	}
	if _, ok := nc.mutation.ReminderCount(); !ok {
		v := node.DefaultReminderCount
		nc.mutation.SetReminderCount(v)
	}
	if _, ok := nc.mutation.Extras(); !ok {
		v := node.DefaultExtras
		nc.mutation.SetExtras(v)
	}
	if _, ok := nc.mutation.CreatedAt(); !ok {
		v := node.DefaultCreatedAt()
		nc.mutation.SetCreatedAt(v)
	}
	if _, ok := nc.mutation.UpdatedAt(); !ok {
		v := node.DefaultUpdatedAt()
		nc.mutation.SetUpdatedAt(v)
	}
	if _, ok := nc.mutation.IsCountersign(); !ok {
		v := node.DefaultIsCountersign
		nc.mutation.SetIsCountersign(v)
	}
	if _, ok := nc.mutation.RetryTimes(); !ok {
		v := node.DefaultRetryTimes
		nc.mutation.SetRetryTimes(v)
	}
	if _, ok := nc.mutation.RetryInterval(); !ok {
		v := node.DefaultRetryInterval
		nc.mutation.SetRetryInterval(v)
	}
	if _, ok := nc.mutation.IsWorkingDay(); !ok {
		v := node.DefaultIsWorkingDay
		nc.mutation.SetIsWorkingDay(v)
	}
	if _, ok := nc.mutation.ID(); !ok {
		v := node.DefaultID()
		nc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nc *NodeCreate) check() error {
	if _, ok := nc.mutation.NodeKey(); !ok {
		return &ValidationError{Name: "node_key", err: errors.New(`ent: missing required field "Node.node_key"`)}
	}
	if _, ok := nc.mutation.NodeType(); !ok {
		return &ValidationError{Name: "node_type", err: errors.New(`ent: missing required field "Node.node_type"`)}
	}
	if _, ok := nc.mutation.FormCode(); !ok {
		return &ValidationError{Name: "form_code", err: errors.New(`ent: missing required field "Node.form_code"`)}
	}
	if _, ok := nc.mutation.Assignees(); !ok {
		return &ValidationError{Name: "assignees", err: errors.New(`ent: missing required field "Node.assignees"`)}
	}
	if _, ok := nc.mutation.Candidates(); !ok {
		return &ValidationError{Name: "candidates", err: errors.New(`ent: missing required field "Node.candidates"`)}
	}
	if _, ok := nc.mutation.IsDelegated(); !ok {
		return &ValidationError{Name: "is_delegated", err: errors.New(`ent: missing required field "Node.is_delegated"`)}
	}
	if _, ok := nc.mutation.IsTransferred(); !ok {
		return &ValidationError{Name: "is_transferred", err: errors.New(`ent: missing required field "Node.is_transferred"`)}
	}
	if _, ok := nc.mutation.AllowCancel(); !ok {
		return &ValidationError{Name: "allow_cancel", err: errors.New(`ent: missing required field "Node.allow_cancel"`)}
	}
	if _, ok := nc.mutation.AllowUrge(); !ok {
		return &ValidationError{Name: "allow_urge", err: errors.New(`ent: missing required field "Node.allow_urge"`)}
	}
	if _, ok := nc.mutation.AllowDelegate(); !ok {
		return &ValidationError{Name: "allow_delegate", err: errors.New(`ent: missing required field "Node.allow_delegate"`)}
	}
	if _, ok := nc.mutation.AllowTransfer(); !ok {
		return &ValidationError{Name: "allow_transfer", err: errors.New(`ent: missing required field "Node.allow_transfer"`)}
	}
	if _, ok := nc.mutation.IsDraftEnabled(); !ok {
		return &ValidationError{Name: "is_draft_enabled", err: errors.New(`ent: missing required field "Node.is_draft_enabled"`)}
	}
	if _, ok := nc.mutation.IsAutoStart(); !ok {
		return &ValidationError{Name: "is_auto_start", err: errors.New(`ent: missing required field "Node.is_auto_start"`)}
	}
	if _, ok := nc.mutation.StrictMode(); !ok {
		return &ValidationError{Name: "strict_mode", err: errors.New(`ent: missing required field "Node.strict_mode"`)}
	}
	if _, ok := nc.mutation.StartTime(); !ok {
		return &ValidationError{Name: "start_time", err: errors.New(`ent: missing required field "Node.start_time"`)}
	}
	if _, ok := nc.mutation.Priority(); !ok {
		return &ValidationError{Name: "priority", err: errors.New(`ent: missing required field "Node.priority"`)}
	}
	if _, ok := nc.mutation.IsTimeout(); !ok {
		return &ValidationError{Name: "is_timeout", err: errors.New(`ent: missing required field "Node.is_timeout"`)}
	}
	if _, ok := nc.mutation.ReminderCount(); !ok {
		return &ValidationError{Name: "reminder_count", err: errors.New(`ent: missing required field "Node.reminder_count"`)}
	}
	if v, ok := nc.mutation.TenantID(); ok {
		if err := node.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "Node.tenant_id": %w`, err)}
		}
	}
	if v, ok := nc.mutation.CreatedBy(); ok {
		if err := node.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "Node.created_by": %w`, err)}
		}
	}
	if v, ok := nc.mutation.UpdatedBy(); ok {
		if err := node.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "Node.updated_by": %w`, err)}
		}
	}
	if _, ok := nc.mutation.ProcessID(); !ok {
		return &ValidationError{Name: "process_id", err: errors.New(`ent: missing required field "Node.process_id"`)}
	}
	if _, ok := nc.mutation.Permissions(); !ok {
		return &ValidationError{Name: "permissions", err: errors.New(`ent: missing required field "Node.permissions"`)}
	}
	if _, ok := nc.mutation.IsCountersign(); !ok {
		return &ValidationError{Name: "is_countersign", err: errors.New(`ent: missing required field "Node.is_countersign"`)}
	}
	if _, ok := nc.mutation.IsWorkingDay(); !ok {
		return &ValidationError{Name: "is_working_day", err: errors.New(`ent: missing required field "Node.is_working_day"`)}
	}
	if v, ok := nc.mutation.ID(); ok {
		if err := node.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Node.id": %w`, err)}
		}
	}
	return nil
}

func (nc *NodeCreate) sqlSave(ctx context.Context) (*Node, error) {
	if err := nc.check(); err != nil {
		return nil, err
	}
	_node, _spec := nc.createSpec()
	if err := sqlgraph.CreateNode(ctx, nc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Node.ID type: %T", _spec.ID.Value)
		}
	}
	nc.mutation.id = &_node.ID
	nc.mutation.done = true
	return _node, nil
}

func (nc *NodeCreate) createSpec() (*Node, *sqlgraph.CreateSpec) {
	var (
		_node = &Node{config: nc.config}
		_spec = sqlgraph.NewCreateSpec(node.Table, sqlgraph.NewFieldSpec(node.FieldID, field.TypeString))
	)
	if id, ok := nc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := nc.mutation.Name(); ok {
		_spec.SetField(node.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := nc.mutation.Description(); ok {
		_spec.SetField(node.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := nc.mutation.GetType(); ok {
		_spec.SetField(node.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := nc.mutation.Status(); ok {
		_spec.SetField(node.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := nc.mutation.NodeKey(); ok {
		_spec.SetField(node.FieldNodeKey, field.TypeString, value)
		_node.NodeKey = value
	}
	if value, ok := nc.mutation.NodeType(); ok {
		_spec.SetField(node.FieldNodeType, field.TypeString, value)
		_node.NodeType = value
	}
	if value, ok := nc.mutation.NodeConfig(); ok {
		_spec.SetField(node.FieldNodeConfig, field.TypeJSON, value)
		_node.NodeConfig = value
	}
	if value, ok := nc.mutation.NodeRules(); ok {
		_spec.SetField(node.FieldNodeRules, field.TypeJSON, value)
		_node.NodeRules = value
	}
	if value, ok := nc.mutation.NodeEvents(); ok {
		_spec.SetField(node.FieldNodeEvents, field.TypeJSON, value)
		_node.NodeEvents = value
	}
	if value, ok := nc.mutation.FormCode(); ok {
		_spec.SetField(node.FieldFormCode, field.TypeString, value)
		_node.FormCode = value
	}
	if value, ok := nc.mutation.FormVersion(); ok {
		_spec.SetField(node.FieldFormVersion, field.TypeString, value)
		_node.FormVersion = value
	}
	if value, ok := nc.mutation.FormConfig(); ok {
		_spec.SetField(node.FieldFormConfig, field.TypeJSON, value)
		_node.FormConfig = value
	}
	if value, ok := nc.mutation.FormPermissions(); ok {
		_spec.SetField(node.FieldFormPermissions, field.TypeJSON, value)
		_node.FormPermissions = value
	}
	if value, ok := nc.mutation.FieldPermissions(); ok {
		_spec.SetField(node.FieldFieldPermissions, field.TypeJSON, value)
		_node.FieldPermissions = value
	}
	if value, ok := nc.mutation.Assignees(); ok {
		_spec.SetField(node.FieldAssignees, field.TypeJSON, value)
		_node.Assignees = value
	}
	if value, ok := nc.mutation.Candidates(); ok {
		_spec.SetField(node.FieldCandidates, field.TypeJSON, value)
		_node.Candidates = value
	}
	if value, ok := nc.mutation.DelegatedFrom(); ok {
		_spec.SetField(node.FieldDelegatedFrom, field.TypeString, value)
		_node.DelegatedFrom = value
	}
	if value, ok := nc.mutation.DelegatedReason(); ok {
		_spec.SetField(node.FieldDelegatedReason, field.TypeString, value)
		_node.DelegatedReason = value
	}
	if value, ok := nc.mutation.IsDelegated(); ok {
		_spec.SetField(node.FieldIsDelegated, field.TypeBool, value)
		_node.IsDelegated = value
	}
	if value, ok := nc.mutation.IsTransferred(); ok {
		_spec.SetField(node.FieldIsTransferred, field.TypeBool, value)
		_node.IsTransferred = value
	}
	if value, ok := nc.mutation.AllowCancel(); ok {
		_spec.SetField(node.FieldAllowCancel, field.TypeBool, value)
		_node.AllowCancel = value
	}
	if value, ok := nc.mutation.AllowUrge(); ok {
		_spec.SetField(node.FieldAllowUrge, field.TypeBool, value)
		_node.AllowUrge = value
	}
	if value, ok := nc.mutation.AllowDelegate(); ok {
		_spec.SetField(node.FieldAllowDelegate, field.TypeBool, value)
		_node.AllowDelegate = value
	}
	if value, ok := nc.mutation.AllowTransfer(); ok {
		_spec.SetField(node.FieldAllowTransfer, field.TypeBool, value)
		_node.AllowTransfer = value
	}
	if value, ok := nc.mutation.IsDraftEnabled(); ok {
		_spec.SetField(node.FieldIsDraftEnabled, field.TypeBool, value)
		_node.IsDraftEnabled = value
	}
	if value, ok := nc.mutation.IsAutoStart(); ok {
		_spec.SetField(node.FieldIsAutoStart, field.TypeBool, value)
		_node.IsAutoStart = value
	}
	if value, ok := nc.mutation.StrictMode(); ok {
		_spec.SetField(node.FieldStrictMode, field.TypeBool, value)
		_node.StrictMode = value
	}
	if value, ok := nc.mutation.StartTime(); ok {
		_spec.SetField(node.FieldStartTime, field.TypeInt64, value)
		_node.StartTime = value
	}
	if value, ok := nc.mutation.EndTime(); ok {
		_spec.SetField(node.FieldEndTime, field.TypeInt64, value)
		_node.EndTime = &value
	}
	if value, ok := nc.mutation.DueTime(); ok {
		_spec.SetField(node.FieldDueTime, field.TypeInt64, value)
		_node.DueTime = &value
	}
	if value, ok := nc.mutation.Duration(); ok {
		_spec.SetField(node.FieldDuration, field.TypeInt, value)
		_node.Duration = value
	}
	if value, ok := nc.mutation.Priority(); ok {
		_spec.SetField(node.FieldPriority, field.TypeInt, value)
		_node.Priority = value
	}
	if value, ok := nc.mutation.IsTimeout(); ok {
		_spec.SetField(node.FieldIsTimeout, field.TypeBool, value)
		_node.IsTimeout = value
	}
	if value, ok := nc.mutation.ReminderCount(); ok {
		_spec.SetField(node.FieldReminderCount, field.TypeInt, value)
		_node.ReminderCount = value
	}
	if value, ok := nc.mutation.Extras(); ok {
		_spec.SetField(node.FieldExtras, field.TypeJSON, value)
		_node.Extras = value
	}
	if value, ok := nc.mutation.TenantID(); ok {
		_spec.SetField(node.FieldTenantID, field.TypeString, value)
		_node.TenantID = value
	}
	if value, ok := nc.mutation.CreatedBy(); ok {
		_spec.SetField(node.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := nc.mutation.UpdatedBy(); ok {
		_spec.SetField(node.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := nc.mutation.CreatedAt(); ok {
		_spec.SetField(node.FieldCreatedAt, field.TypeInt64, value)
		_node.CreatedAt = value
	}
	if value, ok := nc.mutation.UpdatedAt(); ok {
		_spec.SetField(node.FieldUpdatedAt, field.TypeInt64, value)
		_node.UpdatedAt = value
	}
	if value, ok := nc.mutation.ProcessID(); ok {
		_spec.SetField(node.FieldProcessID, field.TypeString, value)
		_node.ProcessID = value
	}
	if value, ok := nc.mutation.Permissions(); ok {
		_spec.SetField(node.FieldPermissions, field.TypeJSON, value)
		_node.Permissions = value
	}
	if value, ok := nc.mutation.PrevNodes(); ok {
		_spec.SetField(node.FieldPrevNodes, field.TypeJSON, value)
		_node.PrevNodes = value
	}
	if value, ok := nc.mutation.NextNodes(); ok {
		_spec.SetField(node.FieldNextNodes, field.TypeJSON, value)
		_node.NextNodes = value
	}
	if value, ok := nc.mutation.ParallelNodes(); ok {
		_spec.SetField(node.FieldParallelNodes, field.TypeJSON, value)
		_node.ParallelNodes = value
	}
	if value, ok := nc.mutation.BranchNodes(); ok {
		_spec.SetField(node.FieldBranchNodes, field.TypeJSON, value)
		_node.BranchNodes = value
	}
	if value, ok := nc.mutation.Conditions(); ok {
		_spec.SetField(node.FieldConditions, field.TypeJSON, value)
		_node.Conditions = value
	}
	if value, ok := nc.mutation.Properties(); ok {
		_spec.SetField(node.FieldProperties, field.TypeJSON, value)
		_node.Properties = value
	}
	if value, ok := nc.mutation.IsCountersign(); ok {
		_spec.SetField(node.FieldIsCountersign, field.TypeBool, value)
		_node.IsCountersign = value
	}
	if value, ok := nc.mutation.CountersignRule(); ok {
		_spec.SetField(node.FieldCountersignRule, field.TypeString, value)
		_node.CountersignRule = value
	}
	if value, ok := nc.mutation.Handlers(); ok {
		_spec.SetField(node.FieldHandlers, field.TypeJSON, value)
		_node.Handlers = value
	}
	if value, ok := nc.mutation.Listeners(); ok {
		_spec.SetField(node.FieldListeners, field.TypeJSON, value)
		_node.Listeners = value
	}
	if value, ok := nc.mutation.Hooks(); ok {
		_spec.SetField(node.FieldHooks, field.TypeJSON, value)
		_node.Hooks = value
	}
	if value, ok := nc.mutation.RetryTimes(); ok {
		_spec.SetField(node.FieldRetryTimes, field.TypeInt, value)
		_node.RetryTimes = value
	}
	if value, ok := nc.mutation.RetryInterval(); ok {
		_spec.SetField(node.FieldRetryInterval, field.TypeInt, value)
		_node.RetryInterval = value
	}
	if value, ok := nc.mutation.IsWorkingDay(); ok {
		_spec.SetField(node.FieldIsWorkingDay, field.TypeBool, value)
		_node.IsWorkingDay = value
	}
	return _node, _spec
}

// NodeCreateBulk is the builder for creating many Node entities in bulk.
type NodeCreateBulk struct {
	config
	err      error
	builders []*NodeCreate
}

// Save creates the Node entities in the database.
func (ncb *NodeCreateBulk) Save(ctx context.Context) ([]*Node, error) {
	if ncb.err != nil {
		return nil, ncb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ncb.builders))
	nodes := make([]*Node, len(ncb.builders))
	mutators := make([]Mutator, len(ncb.builders))
	for i := range ncb.builders {
		func(i int, root context.Context) {
			builder := ncb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*NodeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ncb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ncb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ncb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ncb *NodeCreateBulk) SaveX(ctx context.Context) []*Node {
	v, err := ncb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ncb *NodeCreateBulk) Exec(ctx context.Context) error {
	_, err := ncb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ncb *NodeCreateBulk) ExecX(ctx context.Context) {
	if err := ncb.Exec(ctx); err != nil {
		panic(err)
	}
}
