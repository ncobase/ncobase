// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/core/workflow/data/ent/node"
	"ncobase/core/workflow/data/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// NodeUpdate is the builder for updating Node entities.
type NodeUpdate struct {
	config
	hooks    []Hook
	mutation *NodeMutation
}

// Where appends a list predicates to the NodeUpdate builder.
func (nu *NodeUpdate) Where(ps ...predicate.Node) *NodeUpdate {
	nu.mutation.Where(ps...)
	return nu
}

// SetName sets the "name" field.
func (nu *NodeUpdate) SetName(s string) *NodeUpdate {
	nu.mutation.SetName(s)
	return nu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (nu *NodeUpdate) SetNillableName(s *string) *NodeUpdate {
	if s != nil {
		nu.SetName(*s)
	}
	return nu
}

// ClearName clears the value of the "name" field.
func (nu *NodeUpdate) ClearName() *NodeUpdate {
	nu.mutation.ClearName()
	return nu
}

// SetDescription sets the "description" field.
func (nu *NodeUpdate) SetDescription(s string) *NodeUpdate {
	nu.mutation.SetDescription(s)
	return nu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (nu *NodeUpdate) SetNillableDescription(s *string) *NodeUpdate {
	if s != nil {
		nu.SetDescription(*s)
	}
	return nu
}

// ClearDescription clears the value of the "description" field.
func (nu *NodeUpdate) ClearDescription() *NodeUpdate {
	nu.mutation.ClearDescription()
	return nu
}

// SetType sets the "type" field.
func (nu *NodeUpdate) SetType(s string) *NodeUpdate {
	nu.mutation.SetType(s)
	return nu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (nu *NodeUpdate) SetNillableType(s *string) *NodeUpdate {
	if s != nil {
		nu.SetType(*s)
	}
	return nu
}

// ClearType clears the value of the "type" field.
func (nu *NodeUpdate) ClearType() *NodeUpdate {
	nu.mutation.ClearType()
	return nu
}

// SetStatus sets the "status" field.
func (nu *NodeUpdate) SetStatus(s string) *NodeUpdate {
	nu.mutation.SetStatus(s)
	return nu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (nu *NodeUpdate) SetNillableStatus(s *string) *NodeUpdate {
	if s != nil {
		nu.SetStatus(*s)
	}
	return nu
}

// ClearStatus clears the value of the "status" field.
func (nu *NodeUpdate) ClearStatus() *NodeUpdate {
	nu.mutation.ClearStatus()
	return nu
}

// SetNodeKey sets the "node_key" field.
func (nu *NodeUpdate) SetNodeKey(s string) *NodeUpdate {
	nu.mutation.SetNodeKey(s)
	return nu
}

// SetNillableNodeKey sets the "node_key" field if the given value is not nil.
func (nu *NodeUpdate) SetNillableNodeKey(s *string) *NodeUpdate {
	if s != nil {
		nu.SetNodeKey(*s)
	}
	return nu
}

// SetNodeType sets the "node_type" field.
func (nu *NodeUpdate) SetNodeType(s string) *NodeUpdate {
	nu.mutation.SetNodeType(s)
	return nu
}

// SetNillableNodeType sets the "node_type" field if the given value is not nil.
func (nu *NodeUpdate) SetNillableNodeType(s *string) *NodeUpdate {
	if s != nil {
		nu.SetNodeType(*s)
	}
	return nu
}

// SetNodeConfig sets the "node_config" field.
func (nu *NodeUpdate) SetNodeConfig(m map[string]interface{}) *NodeUpdate {
	nu.mutation.SetNodeConfig(m)
	return nu
}

// ClearNodeConfig clears the value of the "node_config" field.
func (nu *NodeUpdate) ClearNodeConfig() *NodeUpdate {
	nu.mutation.ClearNodeConfig()
	return nu
}

// SetNodeRules sets the "node_rules" field.
func (nu *NodeUpdate) SetNodeRules(m map[string]interface{}) *NodeUpdate {
	nu.mutation.SetNodeRules(m)
	return nu
}

// ClearNodeRules clears the value of the "node_rules" field.
func (nu *NodeUpdate) ClearNodeRules() *NodeUpdate {
	nu.mutation.ClearNodeRules()
	return nu
}

// SetNodeEvents sets the "node_events" field.
func (nu *NodeUpdate) SetNodeEvents(m map[string]interface{}) *NodeUpdate {
	nu.mutation.SetNodeEvents(m)
	return nu
}

// ClearNodeEvents clears the value of the "node_events" field.
func (nu *NodeUpdate) ClearNodeEvents() *NodeUpdate {
	nu.mutation.ClearNodeEvents()
	return nu
}

// SetFormCode sets the "form_code" field.
func (nu *NodeUpdate) SetFormCode(s string) *NodeUpdate {
	nu.mutation.SetFormCode(s)
	return nu
}

// SetNillableFormCode sets the "form_code" field if the given value is not nil.
func (nu *NodeUpdate) SetNillableFormCode(s *string) *NodeUpdate {
	if s != nil {
		nu.SetFormCode(*s)
	}
	return nu
}

// SetFormVersion sets the "form_version" field.
func (nu *NodeUpdate) SetFormVersion(s string) *NodeUpdate {
	nu.mutation.SetFormVersion(s)
	return nu
}

// SetNillableFormVersion sets the "form_version" field if the given value is not nil.
func (nu *NodeUpdate) SetNillableFormVersion(s *string) *NodeUpdate {
	if s != nil {
		nu.SetFormVersion(*s)
	}
	return nu
}

// ClearFormVersion clears the value of the "form_version" field.
func (nu *NodeUpdate) ClearFormVersion() *NodeUpdate {
	nu.mutation.ClearFormVersion()
	return nu
}

// SetFormConfig sets the "form_config" field.
func (nu *NodeUpdate) SetFormConfig(m map[string]interface{}) *NodeUpdate {
	nu.mutation.SetFormConfig(m)
	return nu
}

// ClearFormConfig clears the value of the "form_config" field.
func (nu *NodeUpdate) ClearFormConfig() *NodeUpdate {
	nu.mutation.ClearFormConfig()
	return nu
}

// SetFormPermissions sets the "form_permissions" field.
func (nu *NodeUpdate) SetFormPermissions(m map[string]interface{}) *NodeUpdate {
	nu.mutation.SetFormPermissions(m)
	return nu
}

// ClearFormPermissions clears the value of the "form_permissions" field.
func (nu *NodeUpdate) ClearFormPermissions() *NodeUpdate {
	nu.mutation.ClearFormPermissions()
	return nu
}

// SetFieldPermissions sets the "field_permissions" field.
func (nu *NodeUpdate) SetFieldPermissions(m map[string]interface{}) *NodeUpdate {
	nu.mutation.SetFieldPermissions(m)
	return nu
}

// ClearFieldPermissions clears the value of the "field_permissions" field.
func (nu *NodeUpdate) ClearFieldPermissions() *NodeUpdate {
	nu.mutation.ClearFieldPermissions()
	return nu
}

// SetAssignees sets the "assignees" field.
func (nu *NodeUpdate) SetAssignees(m []map[string]interface{}) *NodeUpdate {
	nu.mutation.SetAssignees(m)
	return nu
}

// AppendAssignees appends m to the "assignees" field.
func (nu *NodeUpdate) AppendAssignees(m []map[string]interface{}) *NodeUpdate {
	nu.mutation.AppendAssignees(m)
	return nu
}

// SetCandidates sets the "candidates" field.
func (nu *NodeUpdate) SetCandidates(m []map[string]interface{}) *NodeUpdate {
	nu.mutation.SetCandidates(m)
	return nu
}

// AppendCandidates appends m to the "candidates" field.
func (nu *NodeUpdate) AppendCandidates(m []map[string]interface{}) *NodeUpdate {
	nu.mutation.AppendCandidates(m)
	return nu
}

// SetDelegatedFrom sets the "delegated_from" field.
func (nu *NodeUpdate) SetDelegatedFrom(s string) *NodeUpdate {
	nu.mutation.SetDelegatedFrom(s)
	return nu
}

// SetNillableDelegatedFrom sets the "delegated_from" field if the given value is not nil.
func (nu *NodeUpdate) SetNillableDelegatedFrom(s *string) *NodeUpdate {
	if s != nil {
		nu.SetDelegatedFrom(*s)
	}
	return nu
}

// ClearDelegatedFrom clears the value of the "delegated_from" field.
func (nu *NodeUpdate) ClearDelegatedFrom() *NodeUpdate {
	nu.mutation.ClearDelegatedFrom()
	return nu
}

// SetDelegatedReason sets the "delegated_reason" field.
func (nu *NodeUpdate) SetDelegatedReason(s string) *NodeUpdate {
	nu.mutation.SetDelegatedReason(s)
	return nu
}

// SetNillableDelegatedReason sets the "delegated_reason" field if the given value is not nil.
func (nu *NodeUpdate) SetNillableDelegatedReason(s *string) *NodeUpdate {
	if s != nil {
		nu.SetDelegatedReason(*s)
	}
	return nu
}

// ClearDelegatedReason clears the value of the "delegated_reason" field.
func (nu *NodeUpdate) ClearDelegatedReason() *NodeUpdate {
	nu.mutation.ClearDelegatedReason()
	return nu
}

// SetIsDelegated sets the "is_delegated" field.
func (nu *NodeUpdate) SetIsDelegated(b bool) *NodeUpdate {
	nu.mutation.SetIsDelegated(b)
	return nu
}

// SetNillableIsDelegated sets the "is_delegated" field if the given value is not nil.
func (nu *NodeUpdate) SetNillableIsDelegated(b *bool) *NodeUpdate {
	if b != nil {
		nu.SetIsDelegated(*b)
	}
	return nu
}

// SetIsTransferred sets the "is_transferred" field.
func (nu *NodeUpdate) SetIsTransferred(b bool) *NodeUpdate {
	nu.mutation.SetIsTransferred(b)
	return nu
}

// SetNillableIsTransferred sets the "is_transferred" field if the given value is not nil.
func (nu *NodeUpdate) SetNillableIsTransferred(b *bool) *NodeUpdate {
	if b != nil {
		nu.SetIsTransferred(*b)
	}
	return nu
}

// SetAllowCancel sets the "allow_cancel" field.
func (nu *NodeUpdate) SetAllowCancel(b bool) *NodeUpdate {
	nu.mutation.SetAllowCancel(b)
	return nu
}

// SetNillableAllowCancel sets the "allow_cancel" field if the given value is not nil.
func (nu *NodeUpdate) SetNillableAllowCancel(b *bool) *NodeUpdate {
	if b != nil {
		nu.SetAllowCancel(*b)
	}
	return nu
}

// SetAllowUrge sets the "allow_urge" field.
func (nu *NodeUpdate) SetAllowUrge(b bool) *NodeUpdate {
	nu.mutation.SetAllowUrge(b)
	return nu
}

// SetNillableAllowUrge sets the "allow_urge" field if the given value is not nil.
func (nu *NodeUpdate) SetNillableAllowUrge(b *bool) *NodeUpdate {
	if b != nil {
		nu.SetAllowUrge(*b)
	}
	return nu
}

// SetAllowDelegate sets the "allow_delegate" field.
func (nu *NodeUpdate) SetAllowDelegate(b bool) *NodeUpdate {
	nu.mutation.SetAllowDelegate(b)
	return nu
}

// SetNillableAllowDelegate sets the "allow_delegate" field if the given value is not nil.
func (nu *NodeUpdate) SetNillableAllowDelegate(b *bool) *NodeUpdate {
	if b != nil {
		nu.SetAllowDelegate(*b)
	}
	return nu
}

// SetAllowTransfer sets the "allow_transfer" field.
func (nu *NodeUpdate) SetAllowTransfer(b bool) *NodeUpdate {
	nu.mutation.SetAllowTransfer(b)
	return nu
}

// SetNillableAllowTransfer sets the "allow_transfer" field if the given value is not nil.
func (nu *NodeUpdate) SetNillableAllowTransfer(b *bool) *NodeUpdate {
	if b != nil {
		nu.SetAllowTransfer(*b)
	}
	return nu
}

// SetIsDraftEnabled sets the "is_draft_enabled" field.
func (nu *NodeUpdate) SetIsDraftEnabled(b bool) *NodeUpdate {
	nu.mutation.SetIsDraftEnabled(b)
	return nu
}

// SetNillableIsDraftEnabled sets the "is_draft_enabled" field if the given value is not nil.
func (nu *NodeUpdate) SetNillableIsDraftEnabled(b *bool) *NodeUpdate {
	if b != nil {
		nu.SetIsDraftEnabled(*b)
	}
	return nu
}

// SetIsAutoStart sets the "is_auto_start" field.
func (nu *NodeUpdate) SetIsAutoStart(b bool) *NodeUpdate {
	nu.mutation.SetIsAutoStart(b)
	return nu
}

// SetNillableIsAutoStart sets the "is_auto_start" field if the given value is not nil.
func (nu *NodeUpdate) SetNillableIsAutoStart(b *bool) *NodeUpdate {
	if b != nil {
		nu.SetIsAutoStart(*b)
	}
	return nu
}

// SetStrictMode sets the "strict_mode" field.
func (nu *NodeUpdate) SetStrictMode(b bool) *NodeUpdate {
	nu.mutation.SetStrictMode(b)
	return nu
}

// SetNillableStrictMode sets the "strict_mode" field if the given value is not nil.
func (nu *NodeUpdate) SetNillableStrictMode(b *bool) *NodeUpdate {
	if b != nil {
		nu.SetStrictMode(*b)
	}
	return nu
}

// SetStartTime sets the "start_time" field.
func (nu *NodeUpdate) SetStartTime(i int64) *NodeUpdate {
	nu.mutation.ResetStartTime()
	nu.mutation.SetStartTime(i)
	return nu
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (nu *NodeUpdate) SetNillableStartTime(i *int64) *NodeUpdate {
	if i != nil {
		nu.SetStartTime(*i)
	}
	return nu
}

// AddStartTime adds i to the "start_time" field.
func (nu *NodeUpdate) AddStartTime(i int64) *NodeUpdate {
	nu.mutation.AddStartTime(i)
	return nu
}

// SetEndTime sets the "end_time" field.
func (nu *NodeUpdate) SetEndTime(i int64) *NodeUpdate {
	nu.mutation.ResetEndTime()
	nu.mutation.SetEndTime(i)
	return nu
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (nu *NodeUpdate) SetNillableEndTime(i *int64) *NodeUpdate {
	if i != nil {
		nu.SetEndTime(*i)
	}
	return nu
}

// AddEndTime adds i to the "end_time" field.
func (nu *NodeUpdate) AddEndTime(i int64) *NodeUpdate {
	nu.mutation.AddEndTime(i)
	return nu
}

// ClearEndTime clears the value of the "end_time" field.
func (nu *NodeUpdate) ClearEndTime() *NodeUpdate {
	nu.mutation.ClearEndTime()
	return nu
}

// SetDueTime sets the "due_time" field.
func (nu *NodeUpdate) SetDueTime(i int64) *NodeUpdate {
	nu.mutation.ResetDueTime()
	nu.mutation.SetDueTime(i)
	return nu
}

// SetNillableDueTime sets the "due_time" field if the given value is not nil.
func (nu *NodeUpdate) SetNillableDueTime(i *int64) *NodeUpdate {
	if i != nil {
		nu.SetDueTime(*i)
	}
	return nu
}

// AddDueTime adds i to the "due_time" field.
func (nu *NodeUpdate) AddDueTime(i int64) *NodeUpdate {
	nu.mutation.AddDueTime(i)
	return nu
}

// ClearDueTime clears the value of the "due_time" field.
func (nu *NodeUpdate) ClearDueTime() *NodeUpdate {
	nu.mutation.ClearDueTime()
	return nu
}

// SetDuration sets the "duration" field.
func (nu *NodeUpdate) SetDuration(i int) *NodeUpdate {
	nu.mutation.ResetDuration()
	nu.mutation.SetDuration(i)
	return nu
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (nu *NodeUpdate) SetNillableDuration(i *int) *NodeUpdate {
	if i != nil {
		nu.SetDuration(*i)
	}
	return nu
}

// AddDuration adds i to the "duration" field.
func (nu *NodeUpdate) AddDuration(i int) *NodeUpdate {
	nu.mutation.AddDuration(i)
	return nu
}

// ClearDuration clears the value of the "duration" field.
func (nu *NodeUpdate) ClearDuration() *NodeUpdate {
	nu.mutation.ClearDuration()
	return nu
}

// SetPriority sets the "priority" field.
func (nu *NodeUpdate) SetPriority(i int) *NodeUpdate {
	nu.mutation.ResetPriority()
	nu.mutation.SetPriority(i)
	return nu
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (nu *NodeUpdate) SetNillablePriority(i *int) *NodeUpdate {
	if i != nil {
		nu.SetPriority(*i)
	}
	return nu
}

// AddPriority adds i to the "priority" field.
func (nu *NodeUpdate) AddPriority(i int) *NodeUpdate {
	nu.mutation.AddPriority(i)
	return nu
}

// SetIsTimeout sets the "is_timeout" field.
func (nu *NodeUpdate) SetIsTimeout(b bool) *NodeUpdate {
	nu.mutation.SetIsTimeout(b)
	return nu
}

// SetNillableIsTimeout sets the "is_timeout" field if the given value is not nil.
func (nu *NodeUpdate) SetNillableIsTimeout(b *bool) *NodeUpdate {
	if b != nil {
		nu.SetIsTimeout(*b)
	}
	return nu
}

// SetReminderCount sets the "reminder_count" field.
func (nu *NodeUpdate) SetReminderCount(i int) *NodeUpdate {
	nu.mutation.ResetReminderCount()
	nu.mutation.SetReminderCount(i)
	return nu
}

// SetNillableReminderCount sets the "reminder_count" field if the given value is not nil.
func (nu *NodeUpdate) SetNillableReminderCount(i *int) *NodeUpdate {
	if i != nil {
		nu.SetReminderCount(*i)
	}
	return nu
}

// AddReminderCount adds i to the "reminder_count" field.
func (nu *NodeUpdate) AddReminderCount(i int) *NodeUpdate {
	nu.mutation.AddReminderCount(i)
	return nu
}

// SetExtras sets the "extras" field.
func (nu *NodeUpdate) SetExtras(m map[string]interface{}) *NodeUpdate {
	nu.mutation.SetExtras(m)
	return nu
}

// ClearExtras clears the value of the "extras" field.
func (nu *NodeUpdate) ClearExtras() *NodeUpdate {
	nu.mutation.ClearExtras()
	return nu
}

// SetTenantID sets the "tenant_id" field.
func (nu *NodeUpdate) SetTenantID(s string) *NodeUpdate {
	nu.mutation.SetTenantID(s)
	return nu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (nu *NodeUpdate) SetNillableTenantID(s *string) *NodeUpdate {
	if s != nil {
		nu.SetTenantID(*s)
	}
	return nu
}

// ClearTenantID clears the value of the "tenant_id" field.
func (nu *NodeUpdate) ClearTenantID() *NodeUpdate {
	nu.mutation.ClearTenantID()
	return nu
}

// SetCreatedBy sets the "created_by" field.
func (nu *NodeUpdate) SetCreatedBy(s string) *NodeUpdate {
	nu.mutation.SetCreatedBy(s)
	return nu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (nu *NodeUpdate) SetNillableCreatedBy(s *string) *NodeUpdate {
	if s != nil {
		nu.SetCreatedBy(*s)
	}
	return nu
}

// ClearCreatedBy clears the value of the "created_by" field.
func (nu *NodeUpdate) ClearCreatedBy() *NodeUpdate {
	nu.mutation.ClearCreatedBy()
	return nu
}

// SetUpdatedBy sets the "updated_by" field.
func (nu *NodeUpdate) SetUpdatedBy(s string) *NodeUpdate {
	nu.mutation.SetUpdatedBy(s)
	return nu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (nu *NodeUpdate) SetNillableUpdatedBy(s *string) *NodeUpdate {
	if s != nil {
		nu.SetUpdatedBy(*s)
	}
	return nu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (nu *NodeUpdate) ClearUpdatedBy() *NodeUpdate {
	nu.mutation.ClearUpdatedBy()
	return nu
}

// SetUpdatedAt sets the "updated_at" field.
func (nu *NodeUpdate) SetUpdatedAt(i int64) *NodeUpdate {
	nu.mutation.ResetUpdatedAt()
	nu.mutation.SetUpdatedAt(i)
	return nu
}

// AddUpdatedAt adds i to the "updated_at" field.
func (nu *NodeUpdate) AddUpdatedAt(i int64) *NodeUpdate {
	nu.mutation.AddUpdatedAt(i)
	return nu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (nu *NodeUpdate) ClearUpdatedAt() *NodeUpdate {
	nu.mutation.ClearUpdatedAt()
	return nu
}

// SetProcessID sets the "process_id" field.
func (nu *NodeUpdate) SetProcessID(s string) *NodeUpdate {
	nu.mutation.SetProcessID(s)
	return nu
}

// SetNillableProcessID sets the "process_id" field if the given value is not nil.
func (nu *NodeUpdate) SetNillableProcessID(s *string) *NodeUpdate {
	if s != nil {
		nu.SetProcessID(*s)
	}
	return nu
}

// SetPermissions sets the "permissions" field.
func (nu *NodeUpdate) SetPermissions(m map[string]interface{}) *NodeUpdate {
	nu.mutation.SetPermissions(m)
	return nu
}

// SetPrevNodes sets the "prev_nodes" field.
func (nu *NodeUpdate) SetPrevNodes(s []string) *NodeUpdate {
	nu.mutation.SetPrevNodes(s)
	return nu
}

// AppendPrevNodes appends s to the "prev_nodes" field.
func (nu *NodeUpdate) AppendPrevNodes(s []string) *NodeUpdate {
	nu.mutation.AppendPrevNodes(s)
	return nu
}

// ClearPrevNodes clears the value of the "prev_nodes" field.
func (nu *NodeUpdate) ClearPrevNodes() *NodeUpdate {
	nu.mutation.ClearPrevNodes()
	return nu
}

// SetNextNodes sets the "next_nodes" field.
func (nu *NodeUpdate) SetNextNodes(s []string) *NodeUpdate {
	nu.mutation.SetNextNodes(s)
	return nu
}

// AppendNextNodes appends s to the "next_nodes" field.
func (nu *NodeUpdate) AppendNextNodes(s []string) *NodeUpdate {
	nu.mutation.AppendNextNodes(s)
	return nu
}

// ClearNextNodes clears the value of the "next_nodes" field.
func (nu *NodeUpdate) ClearNextNodes() *NodeUpdate {
	nu.mutation.ClearNextNodes()
	return nu
}

// SetParallelNodes sets the "parallel_nodes" field.
func (nu *NodeUpdate) SetParallelNodes(s []string) *NodeUpdate {
	nu.mutation.SetParallelNodes(s)
	return nu
}

// AppendParallelNodes appends s to the "parallel_nodes" field.
func (nu *NodeUpdate) AppendParallelNodes(s []string) *NodeUpdate {
	nu.mutation.AppendParallelNodes(s)
	return nu
}

// ClearParallelNodes clears the value of the "parallel_nodes" field.
func (nu *NodeUpdate) ClearParallelNodes() *NodeUpdate {
	nu.mutation.ClearParallelNodes()
	return nu
}

// SetBranchNodes sets the "branch_nodes" field.
func (nu *NodeUpdate) SetBranchNodes(s []string) *NodeUpdate {
	nu.mutation.SetBranchNodes(s)
	return nu
}

// AppendBranchNodes appends s to the "branch_nodes" field.
func (nu *NodeUpdate) AppendBranchNodes(s []string) *NodeUpdate {
	nu.mutation.AppendBranchNodes(s)
	return nu
}

// ClearBranchNodes clears the value of the "branch_nodes" field.
func (nu *NodeUpdate) ClearBranchNodes() *NodeUpdate {
	nu.mutation.ClearBranchNodes()
	return nu
}

// SetConditions sets the "conditions" field.
func (nu *NodeUpdate) SetConditions(m []map[string]interface{}) *NodeUpdate {
	nu.mutation.SetConditions(m)
	return nu
}

// AppendConditions appends m to the "conditions" field.
func (nu *NodeUpdate) AppendConditions(m []map[string]interface{}) *NodeUpdate {
	nu.mutation.AppendConditions(m)
	return nu
}

// ClearConditions clears the value of the "conditions" field.
func (nu *NodeUpdate) ClearConditions() *NodeUpdate {
	nu.mutation.ClearConditions()
	return nu
}

// SetProperties sets the "properties" field.
func (nu *NodeUpdate) SetProperties(m map[string]interface{}) *NodeUpdate {
	nu.mutation.SetProperties(m)
	return nu
}

// ClearProperties clears the value of the "properties" field.
func (nu *NodeUpdate) ClearProperties() *NodeUpdate {
	nu.mutation.ClearProperties()
	return nu
}

// SetIsCountersign sets the "is_countersign" field.
func (nu *NodeUpdate) SetIsCountersign(b bool) *NodeUpdate {
	nu.mutation.SetIsCountersign(b)
	return nu
}

// SetNillableIsCountersign sets the "is_countersign" field if the given value is not nil.
func (nu *NodeUpdate) SetNillableIsCountersign(b *bool) *NodeUpdate {
	if b != nil {
		nu.SetIsCountersign(*b)
	}
	return nu
}

// SetCountersignRule sets the "countersign_rule" field.
func (nu *NodeUpdate) SetCountersignRule(s string) *NodeUpdate {
	nu.mutation.SetCountersignRule(s)
	return nu
}

// SetNillableCountersignRule sets the "countersign_rule" field if the given value is not nil.
func (nu *NodeUpdate) SetNillableCountersignRule(s *string) *NodeUpdate {
	if s != nil {
		nu.SetCountersignRule(*s)
	}
	return nu
}

// ClearCountersignRule clears the value of the "countersign_rule" field.
func (nu *NodeUpdate) ClearCountersignRule() *NodeUpdate {
	nu.mutation.ClearCountersignRule()
	return nu
}

// SetHandlers sets the "handlers" field.
func (nu *NodeUpdate) SetHandlers(m map[string]interface{}) *NodeUpdate {
	nu.mutation.SetHandlers(m)
	return nu
}

// ClearHandlers clears the value of the "handlers" field.
func (nu *NodeUpdate) ClearHandlers() *NodeUpdate {
	nu.mutation.ClearHandlers()
	return nu
}

// SetListeners sets the "listeners" field.
func (nu *NodeUpdate) SetListeners(m map[string]interface{}) *NodeUpdate {
	nu.mutation.SetListeners(m)
	return nu
}

// ClearListeners clears the value of the "listeners" field.
func (nu *NodeUpdate) ClearListeners() *NodeUpdate {
	nu.mutation.ClearListeners()
	return nu
}

// SetHooks sets the "hooks" field.
func (nu *NodeUpdate) SetHooks(m map[string]interface{}) *NodeUpdate {
	nu.mutation.SetHooks(m)
	return nu
}

// ClearHooks clears the value of the "hooks" field.
func (nu *NodeUpdate) ClearHooks() *NodeUpdate {
	nu.mutation.ClearHooks()
	return nu
}

// SetRetryTimes sets the "retry_times" field.
func (nu *NodeUpdate) SetRetryTimes(i int) *NodeUpdate {
	nu.mutation.ResetRetryTimes()
	nu.mutation.SetRetryTimes(i)
	return nu
}

// SetNillableRetryTimes sets the "retry_times" field if the given value is not nil.
func (nu *NodeUpdate) SetNillableRetryTimes(i *int) *NodeUpdate {
	if i != nil {
		nu.SetRetryTimes(*i)
	}
	return nu
}

// AddRetryTimes adds i to the "retry_times" field.
func (nu *NodeUpdate) AddRetryTimes(i int) *NodeUpdate {
	nu.mutation.AddRetryTimes(i)
	return nu
}

// ClearRetryTimes clears the value of the "retry_times" field.
func (nu *NodeUpdate) ClearRetryTimes() *NodeUpdate {
	nu.mutation.ClearRetryTimes()
	return nu
}

// SetRetryInterval sets the "retry_interval" field.
func (nu *NodeUpdate) SetRetryInterval(i int) *NodeUpdate {
	nu.mutation.ResetRetryInterval()
	nu.mutation.SetRetryInterval(i)
	return nu
}

// SetNillableRetryInterval sets the "retry_interval" field if the given value is not nil.
func (nu *NodeUpdate) SetNillableRetryInterval(i *int) *NodeUpdate {
	if i != nil {
		nu.SetRetryInterval(*i)
	}
	return nu
}

// AddRetryInterval adds i to the "retry_interval" field.
func (nu *NodeUpdate) AddRetryInterval(i int) *NodeUpdate {
	nu.mutation.AddRetryInterval(i)
	return nu
}

// ClearRetryInterval clears the value of the "retry_interval" field.
func (nu *NodeUpdate) ClearRetryInterval() *NodeUpdate {
	nu.mutation.ClearRetryInterval()
	return nu
}

// SetIsWorkingDay sets the "is_working_day" field.
func (nu *NodeUpdate) SetIsWorkingDay(b bool) *NodeUpdate {
	nu.mutation.SetIsWorkingDay(b)
	return nu
}

// SetNillableIsWorkingDay sets the "is_working_day" field if the given value is not nil.
func (nu *NodeUpdate) SetNillableIsWorkingDay(b *bool) *NodeUpdate {
	if b != nil {
		nu.SetIsWorkingDay(*b)
	}
	return nu
}

// Mutation returns the NodeMutation object of the builder.
func (nu *NodeUpdate) Mutation() *NodeMutation {
	return nu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (nu *NodeUpdate) Save(ctx context.Context) (int, error) {
	nu.defaults()
	return withHooks(ctx, nu.sqlSave, nu.mutation, nu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nu *NodeUpdate) SaveX(ctx context.Context) int {
	affected, err := nu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (nu *NodeUpdate) Exec(ctx context.Context) error {
	_, err := nu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nu *NodeUpdate) ExecX(ctx context.Context) {
	if err := nu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nu *NodeUpdate) defaults() {
	if _, ok := nu.mutation.UpdatedAt(); !ok && !nu.mutation.UpdatedAtCleared() {
		v := node.UpdateDefaultUpdatedAt()
		nu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nu *NodeUpdate) check() error {
	if v, ok := nu.mutation.TenantID(); ok {
		if err := node.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "Node.tenant_id": %w`, err)}
		}
	}
	if v, ok := nu.mutation.CreatedBy(); ok {
		if err := node.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "Node.created_by": %w`, err)}
		}
	}
	if v, ok := nu.mutation.UpdatedBy(); ok {
		if err := node.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "Node.updated_by": %w`, err)}
		}
	}
	return nil
}

func (nu *NodeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := nu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(node.Table, node.Columns, sqlgraph.NewFieldSpec(node.FieldID, field.TypeString))
	if ps := nu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nu.mutation.Name(); ok {
		_spec.SetField(node.FieldName, field.TypeString, value)
	}
	if nu.mutation.NameCleared() {
		_spec.ClearField(node.FieldName, field.TypeString)
	}
	if value, ok := nu.mutation.Description(); ok {
		_spec.SetField(node.FieldDescription, field.TypeString, value)
	}
	if nu.mutation.DescriptionCleared() {
		_spec.ClearField(node.FieldDescription, field.TypeString)
	}
	if value, ok := nu.mutation.GetType(); ok {
		_spec.SetField(node.FieldType, field.TypeString, value)
	}
	if nu.mutation.TypeCleared() {
		_spec.ClearField(node.FieldType, field.TypeString)
	}
	if value, ok := nu.mutation.Status(); ok {
		_spec.SetField(node.FieldStatus, field.TypeString, value)
	}
	if nu.mutation.StatusCleared() {
		_spec.ClearField(node.FieldStatus, field.TypeString)
	}
	if value, ok := nu.mutation.NodeKey(); ok {
		_spec.SetField(node.FieldNodeKey, field.TypeString, value)
	}
	if value, ok := nu.mutation.NodeType(); ok {
		_spec.SetField(node.FieldNodeType, field.TypeString, value)
	}
	if value, ok := nu.mutation.NodeConfig(); ok {
		_spec.SetField(node.FieldNodeConfig, field.TypeJSON, value)
	}
	if nu.mutation.NodeConfigCleared() {
		_spec.ClearField(node.FieldNodeConfig, field.TypeJSON)
	}
	if value, ok := nu.mutation.NodeRules(); ok {
		_spec.SetField(node.FieldNodeRules, field.TypeJSON, value)
	}
	if nu.mutation.NodeRulesCleared() {
		_spec.ClearField(node.FieldNodeRules, field.TypeJSON)
	}
	if value, ok := nu.mutation.NodeEvents(); ok {
		_spec.SetField(node.FieldNodeEvents, field.TypeJSON, value)
	}
	if nu.mutation.NodeEventsCleared() {
		_spec.ClearField(node.FieldNodeEvents, field.TypeJSON)
	}
	if value, ok := nu.mutation.FormCode(); ok {
		_spec.SetField(node.FieldFormCode, field.TypeString, value)
	}
	if value, ok := nu.mutation.FormVersion(); ok {
		_spec.SetField(node.FieldFormVersion, field.TypeString, value)
	}
	if nu.mutation.FormVersionCleared() {
		_spec.ClearField(node.FieldFormVersion, field.TypeString)
	}
	if value, ok := nu.mutation.FormConfig(); ok {
		_spec.SetField(node.FieldFormConfig, field.TypeJSON, value)
	}
	if nu.mutation.FormConfigCleared() {
		_spec.ClearField(node.FieldFormConfig, field.TypeJSON)
	}
	if value, ok := nu.mutation.FormPermissions(); ok {
		_spec.SetField(node.FieldFormPermissions, field.TypeJSON, value)
	}
	if nu.mutation.FormPermissionsCleared() {
		_spec.ClearField(node.FieldFormPermissions, field.TypeJSON)
	}
	if value, ok := nu.mutation.FieldPermissions(); ok {
		_spec.SetField(node.FieldFieldPermissions, field.TypeJSON, value)
	}
	if nu.mutation.FieldPermissionsCleared() {
		_spec.ClearField(node.FieldFieldPermissions, field.TypeJSON)
	}
	if value, ok := nu.mutation.Assignees(); ok {
		_spec.SetField(node.FieldAssignees, field.TypeJSON, value)
	}
	if value, ok := nu.mutation.AppendedAssignees(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, node.FieldAssignees, value)
		})
	}
	if value, ok := nu.mutation.Candidates(); ok {
		_spec.SetField(node.FieldCandidates, field.TypeJSON, value)
	}
	if value, ok := nu.mutation.AppendedCandidates(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, node.FieldCandidates, value)
		})
	}
	if value, ok := nu.mutation.DelegatedFrom(); ok {
		_spec.SetField(node.FieldDelegatedFrom, field.TypeString, value)
	}
	if nu.mutation.DelegatedFromCleared() {
		_spec.ClearField(node.FieldDelegatedFrom, field.TypeString)
	}
	if value, ok := nu.mutation.DelegatedReason(); ok {
		_spec.SetField(node.FieldDelegatedReason, field.TypeString, value)
	}
	if nu.mutation.DelegatedReasonCleared() {
		_spec.ClearField(node.FieldDelegatedReason, field.TypeString)
	}
	if value, ok := nu.mutation.IsDelegated(); ok {
		_spec.SetField(node.FieldIsDelegated, field.TypeBool, value)
	}
	if value, ok := nu.mutation.IsTransferred(); ok {
		_spec.SetField(node.FieldIsTransferred, field.TypeBool, value)
	}
	if value, ok := nu.mutation.AllowCancel(); ok {
		_spec.SetField(node.FieldAllowCancel, field.TypeBool, value)
	}
	if value, ok := nu.mutation.AllowUrge(); ok {
		_spec.SetField(node.FieldAllowUrge, field.TypeBool, value)
	}
	if value, ok := nu.mutation.AllowDelegate(); ok {
		_spec.SetField(node.FieldAllowDelegate, field.TypeBool, value)
	}
	if value, ok := nu.mutation.AllowTransfer(); ok {
		_spec.SetField(node.FieldAllowTransfer, field.TypeBool, value)
	}
	if value, ok := nu.mutation.IsDraftEnabled(); ok {
		_spec.SetField(node.FieldIsDraftEnabled, field.TypeBool, value)
	}
	if value, ok := nu.mutation.IsAutoStart(); ok {
		_spec.SetField(node.FieldIsAutoStart, field.TypeBool, value)
	}
	if value, ok := nu.mutation.StrictMode(); ok {
		_spec.SetField(node.FieldStrictMode, field.TypeBool, value)
	}
	if value, ok := nu.mutation.StartTime(); ok {
		_spec.SetField(node.FieldStartTime, field.TypeInt64, value)
	}
	if value, ok := nu.mutation.AddedStartTime(); ok {
		_spec.AddField(node.FieldStartTime, field.TypeInt64, value)
	}
	if value, ok := nu.mutation.EndTime(); ok {
		_spec.SetField(node.FieldEndTime, field.TypeInt64, value)
	}
	if value, ok := nu.mutation.AddedEndTime(); ok {
		_spec.AddField(node.FieldEndTime, field.TypeInt64, value)
	}
	if nu.mutation.EndTimeCleared() {
		_spec.ClearField(node.FieldEndTime, field.TypeInt64)
	}
	if value, ok := nu.mutation.DueTime(); ok {
		_spec.SetField(node.FieldDueTime, field.TypeInt64, value)
	}
	if value, ok := nu.mutation.AddedDueTime(); ok {
		_spec.AddField(node.FieldDueTime, field.TypeInt64, value)
	}
	if nu.mutation.DueTimeCleared() {
		_spec.ClearField(node.FieldDueTime, field.TypeInt64)
	}
	if value, ok := nu.mutation.Duration(); ok {
		_spec.SetField(node.FieldDuration, field.TypeInt, value)
	}
	if value, ok := nu.mutation.AddedDuration(); ok {
		_spec.AddField(node.FieldDuration, field.TypeInt, value)
	}
	if nu.mutation.DurationCleared() {
		_spec.ClearField(node.FieldDuration, field.TypeInt)
	}
	if value, ok := nu.mutation.Priority(); ok {
		_spec.SetField(node.FieldPriority, field.TypeInt, value)
	}
	if value, ok := nu.mutation.AddedPriority(); ok {
		_spec.AddField(node.FieldPriority, field.TypeInt, value)
	}
	if value, ok := nu.mutation.IsTimeout(); ok {
		_spec.SetField(node.FieldIsTimeout, field.TypeBool, value)
	}
	if value, ok := nu.mutation.ReminderCount(); ok {
		_spec.SetField(node.FieldReminderCount, field.TypeInt, value)
	}
	if value, ok := nu.mutation.AddedReminderCount(); ok {
		_spec.AddField(node.FieldReminderCount, field.TypeInt, value)
	}
	if value, ok := nu.mutation.Extras(); ok {
		_spec.SetField(node.FieldExtras, field.TypeJSON, value)
	}
	if nu.mutation.ExtrasCleared() {
		_spec.ClearField(node.FieldExtras, field.TypeJSON)
	}
	if value, ok := nu.mutation.TenantID(); ok {
		_spec.SetField(node.FieldTenantID, field.TypeString, value)
	}
	if nu.mutation.TenantIDCleared() {
		_spec.ClearField(node.FieldTenantID, field.TypeString)
	}
	if value, ok := nu.mutation.CreatedBy(); ok {
		_spec.SetField(node.FieldCreatedBy, field.TypeString, value)
	}
	if nu.mutation.CreatedByCleared() {
		_spec.ClearField(node.FieldCreatedBy, field.TypeString)
	}
	if value, ok := nu.mutation.UpdatedBy(); ok {
		_spec.SetField(node.FieldUpdatedBy, field.TypeString, value)
	}
	if nu.mutation.UpdatedByCleared() {
		_spec.ClearField(node.FieldUpdatedBy, field.TypeString)
	}
	if nu.mutation.CreatedAtCleared() {
		_spec.ClearField(node.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := nu.mutation.UpdatedAt(); ok {
		_spec.SetField(node.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := nu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(node.FieldUpdatedAt, field.TypeInt64, value)
	}
	if nu.mutation.UpdatedAtCleared() {
		_spec.ClearField(node.FieldUpdatedAt, field.TypeInt64)
	}
	if value, ok := nu.mutation.ProcessID(); ok {
		_spec.SetField(node.FieldProcessID, field.TypeString, value)
	}
	if value, ok := nu.mutation.Permissions(); ok {
		_spec.SetField(node.FieldPermissions, field.TypeJSON, value)
	}
	if value, ok := nu.mutation.PrevNodes(); ok {
		_spec.SetField(node.FieldPrevNodes, field.TypeJSON, value)
	}
	if value, ok := nu.mutation.AppendedPrevNodes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, node.FieldPrevNodes, value)
		})
	}
	if nu.mutation.PrevNodesCleared() {
		_spec.ClearField(node.FieldPrevNodes, field.TypeJSON)
	}
	if value, ok := nu.mutation.NextNodes(); ok {
		_spec.SetField(node.FieldNextNodes, field.TypeJSON, value)
	}
	if value, ok := nu.mutation.AppendedNextNodes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, node.FieldNextNodes, value)
		})
	}
	if nu.mutation.NextNodesCleared() {
		_spec.ClearField(node.FieldNextNodes, field.TypeJSON)
	}
	if value, ok := nu.mutation.ParallelNodes(); ok {
		_spec.SetField(node.FieldParallelNodes, field.TypeJSON, value)
	}
	if value, ok := nu.mutation.AppendedParallelNodes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, node.FieldParallelNodes, value)
		})
	}
	if nu.mutation.ParallelNodesCleared() {
		_spec.ClearField(node.FieldParallelNodes, field.TypeJSON)
	}
	if value, ok := nu.mutation.BranchNodes(); ok {
		_spec.SetField(node.FieldBranchNodes, field.TypeJSON, value)
	}
	if value, ok := nu.mutation.AppendedBranchNodes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, node.FieldBranchNodes, value)
		})
	}
	if nu.mutation.BranchNodesCleared() {
		_spec.ClearField(node.FieldBranchNodes, field.TypeJSON)
	}
	if value, ok := nu.mutation.Conditions(); ok {
		_spec.SetField(node.FieldConditions, field.TypeJSON, value)
	}
	if value, ok := nu.mutation.AppendedConditions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, node.FieldConditions, value)
		})
	}
	if nu.mutation.ConditionsCleared() {
		_spec.ClearField(node.FieldConditions, field.TypeJSON)
	}
	if value, ok := nu.mutation.Properties(); ok {
		_spec.SetField(node.FieldProperties, field.TypeJSON, value)
	}
	if nu.mutation.PropertiesCleared() {
		_spec.ClearField(node.FieldProperties, field.TypeJSON)
	}
	if value, ok := nu.mutation.IsCountersign(); ok {
		_spec.SetField(node.FieldIsCountersign, field.TypeBool, value)
	}
	if value, ok := nu.mutation.CountersignRule(); ok {
		_spec.SetField(node.FieldCountersignRule, field.TypeString, value)
	}
	if nu.mutation.CountersignRuleCleared() {
		_spec.ClearField(node.FieldCountersignRule, field.TypeString)
	}
	if value, ok := nu.mutation.Handlers(); ok {
		_spec.SetField(node.FieldHandlers, field.TypeJSON, value)
	}
	if nu.mutation.HandlersCleared() {
		_spec.ClearField(node.FieldHandlers, field.TypeJSON)
	}
	if value, ok := nu.mutation.Listeners(); ok {
		_spec.SetField(node.FieldListeners, field.TypeJSON, value)
	}
	if nu.mutation.ListenersCleared() {
		_spec.ClearField(node.FieldListeners, field.TypeJSON)
	}
	if value, ok := nu.mutation.Hooks(); ok {
		_spec.SetField(node.FieldHooks, field.TypeJSON, value)
	}
	if nu.mutation.HooksCleared() {
		_spec.ClearField(node.FieldHooks, field.TypeJSON)
	}
	if value, ok := nu.mutation.RetryTimes(); ok {
		_spec.SetField(node.FieldRetryTimes, field.TypeInt, value)
	}
	if value, ok := nu.mutation.AddedRetryTimes(); ok {
		_spec.AddField(node.FieldRetryTimes, field.TypeInt, value)
	}
	if nu.mutation.RetryTimesCleared() {
		_spec.ClearField(node.FieldRetryTimes, field.TypeInt)
	}
	if value, ok := nu.mutation.RetryInterval(); ok {
		_spec.SetField(node.FieldRetryInterval, field.TypeInt, value)
	}
	if value, ok := nu.mutation.AddedRetryInterval(); ok {
		_spec.AddField(node.FieldRetryInterval, field.TypeInt, value)
	}
	if nu.mutation.RetryIntervalCleared() {
		_spec.ClearField(node.FieldRetryInterval, field.TypeInt)
	}
	if value, ok := nu.mutation.IsWorkingDay(); ok {
		_spec.SetField(node.FieldIsWorkingDay, field.TypeBool, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, nu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{node.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	nu.mutation.done = true
	return n, nil
}

// NodeUpdateOne is the builder for updating a single Node entity.
type NodeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NodeMutation
}

// SetName sets the "name" field.
func (nuo *NodeUpdateOne) SetName(s string) *NodeUpdateOne {
	nuo.mutation.SetName(s)
	return nuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (nuo *NodeUpdateOne) SetNillableName(s *string) *NodeUpdateOne {
	if s != nil {
		nuo.SetName(*s)
	}
	return nuo
}

// ClearName clears the value of the "name" field.
func (nuo *NodeUpdateOne) ClearName() *NodeUpdateOne {
	nuo.mutation.ClearName()
	return nuo
}

// SetDescription sets the "description" field.
func (nuo *NodeUpdateOne) SetDescription(s string) *NodeUpdateOne {
	nuo.mutation.SetDescription(s)
	return nuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (nuo *NodeUpdateOne) SetNillableDescription(s *string) *NodeUpdateOne {
	if s != nil {
		nuo.SetDescription(*s)
	}
	return nuo
}

// ClearDescription clears the value of the "description" field.
func (nuo *NodeUpdateOne) ClearDescription() *NodeUpdateOne {
	nuo.mutation.ClearDescription()
	return nuo
}

// SetType sets the "type" field.
func (nuo *NodeUpdateOne) SetType(s string) *NodeUpdateOne {
	nuo.mutation.SetType(s)
	return nuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (nuo *NodeUpdateOne) SetNillableType(s *string) *NodeUpdateOne {
	if s != nil {
		nuo.SetType(*s)
	}
	return nuo
}

// ClearType clears the value of the "type" field.
func (nuo *NodeUpdateOne) ClearType() *NodeUpdateOne {
	nuo.mutation.ClearType()
	return nuo
}

// SetStatus sets the "status" field.
func (nuo *NodeUpdateOne) SetStatus(s string) *NodeUpdateOne {
	nuo.mutation.SetStatus(s)
	return nuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (nuo *NodeUpdateOne) SetNillableStatus(s *string) *NodeUpdateOne {
	if s != nil {
		nuo.SetStatus(*s)
	}
	return nuo
}

// ClearStatus clears the value of the "status" field.
func (nuo *NodeUpdateOne) ClearStatus() *NodeUpdateOne {
	nuo.mutation.ClearStatus()
	return nuo
}

// SetNodeKey sets the "node_key" field.
func (nuo *NodeUpdateOne) SetNodeKey(s string) *NodeUpdateOne {
	nuo.mutation.SetNodeKey(s)
	return nuo
}

// SetNillableNodeKey sets the "node_key" field if the given value is not nil.
func (nuo *NodeUpdateOne) SetNillableNodeKey(s *string) *NodeUpdateOne {
	if s != nil {
		nuo.SetNodeKey(*s)
	}
	return nuo
}

// SetNodeType sets the "node_type" field.
func (nuo *NodeUpdateOne) SetNodeType(s string) *NodeUpdateOne {
	nuo.mutation.SetNodeType(s)
	return nuo
}

// SetNillableNodeType sets the "node_type" field if the given value is not nil.
func (nuo *NodeUpdateOne) SetNillableNodeType(s *string) *NodeUpdateOne {
	if s != nil {
		nuo.SetNodeType(*s)
	}
	return nuo
}

// SetNodeConfig sets the "node_config" field.
func (nuo *NodeUpdateOne) SetNodeConfig(m map[string]interface{}) *NodeUpdateOne {
	nuo.mutation.SetNodeConfig(m)
	return nuo
}

// ClearNodeConfig clears the value of the "node_config" field.
func (nuo *NodeUpdateOne) ClearNodeConfig() *NodeUpdateOne {
	nuo.mutation.ClearNodeConfig()
	return nuo
}

// SetNodeRules sets the "node_rules" field.
func (nuo *NodeUpdateOne) SetNodeRules(m map[string]interface{}) *NodeUpdateOne {
	nuo.mutation.SetNodeRules(m)
	return nuo
}

// ClearNodeRules clears the value of the "node_rules" field.
func (nuo *NodeUpdateOne) ClearNodeRules() *NodeUpdateOne {
	nuo.mutation.ClearNodeRules()
	return nuo
}

// SetNodeEvents sets the "node_events" field.
func (nuo *NodeUpdateOne) SetNodeEvents(m map[string]interface{}) *NodeUpdateOne {
	nuo.mutation.SetNodeEvents(m)
	return nuo
}

// ClearNodeEvents clears the value of the "node_events" field.
func (nuo *NodeUpdateOne) ClearNodeEvents() *NodeUpdateOne {
	nuo.mutation.ClearNodeEvents()
	return nuo
}

// SetFormCode sets the "form_code" field.
func (nuo *NodeUpdateOne) SetFormCode(s string) *NodeUpdateOne {
	nuo.mutation.SetFormCode(s)
	return nuo
}

// SetNillableFormCode sets the "form_code" field if the given value is not nil.
func (nuo *NodeUpdateOne) SetNillableFormCode(s *string) *NodeUpdateOne {
	if s != nil {
		nuo.SetFormCode(*s)
	}
	return nuo
}

// SetFormVersion sets the "form_version" field.
func (nuo *NodeUpdateOne) SetFormVersion(s string) *NodeUpdateOne {
	nuo.mutation.SetFormVersion(s)
	return nuo
}

// SetNillableFormVersion sets the "form_version" field if the given value is not nil.
func (nuo *NodeUpdateOne) SetNillableFormVersion(s *string) *NodeUpdateOne {
	if s != nil {
		nuo.SetFormVersion(*s)
	}
	return nuo
}

// ClearFormVersion clears the value of the "form_version" field.
func (nuo *NodeUpdateOne) ClearFormVersion() *NodeUpdateOne {
	nuo.mutation.ClearFormVersion()
	return nuo
}

// SetFormConfig sets the "form_config" field.
func (nuo *NodeUpdateOne) SetFormConfig(m map[string]interface{}) *NodeUpdateOne {
	nuo.mutation.SetFormConfig(m)
	return nuo
}

// ClearFormConfig clears the value of the "form_config" field.
func (nuo *NodeUpdateOne) ClearFormConfig() *NodeUpdateOne {
	nuo.mutation.ClearFormConfig()
	return nuo
}

// SetFormPermissions sets the "form_permissions" field.
func (nuo *NodeUpdateOne) SetFormPermissions(m map[string]interface{}) *NodeUpdateOne {
	nuo.mutation.SetFormPermissions(m)
	return nuo
}

// ClearFormPermissions clears the value of the "form_permissions" field.
func (nuo *NodeUpdateOne) ClearFormPermissions() *NodeUpdateOne {
	nuo.mutation.ClearFormPermissions()
	return nuo
}

// SetFieldPermissions sets the "field_permissions" field.
func (nuo *NodeUpdateOne) SetFieldPermissions(m map[string]interface{}) *NodeUpdateOne {
	nuo.mutation.SetFieldPermissions(m)
	return nuo
}

// ClearFieldPermissions clears the value of the "field_permissions" field.
func (nuo *NodeUpdateOne) ClearFieldPermissions() *NodeUpdateOne {
	nuo.mutation.ClearFieldPermissions()
	return nuo
}

// SetAssignees sets the "assignees" field.
func (nuo *NodeUpdateOne) SetAssignees(m []map[string]interface{}) *NodeUpdateOne {
	nuo.mutation.SetAssignees(m)
	return nuo
}

// AppendAssignees appends m to the "assignees" field.
func (nuo *NodeUpdateOne) AppendAssignees(m []map[string]interface{}) *NodeUpdateOne {
	nuo.mutation.AppendAssignees(m)
	return nuo
}

// SetCandidates sets the "candidates" field.
func (nuo *NodeUpdateOne) SetCandidates(m []map[string]interface{}) *NodeUpdateOne {
	nuo.mutation.SetCandidates(m)
	return nuo
}

// AppendCandidates appends m to the "candidates" field.
func (nuo *NodeUpdateOne) AppendCandidates(m []map[string]interface{}) *NodeUpdateOne {
	nuo.mutation.AppendCandidates(m)
	return nuo
}

// SetDelegatedFrom sets the "delegated_from" field.
func (nuo *NodeUpdateOne) SetDelegatedFrom(s string) *NodeUpdateOne {
	nuo.mutation.SetDelegatedFrom(s)
	return nuo
}

// SetNillableDelegatedFrom sets the "delegated_from" field if the given value is not nil.
func (nuo *NodeUpdateOne) SetNillableDelegatedFrom(s *string) *NodeUpdateOne {
	if s != nil {
		nuo.SetDelegatedFrom(*s)
	}
	return nuo
}

// ClearDelegatedFrom clears the value of the "delegated_from" field.
func (nuo *NodeUpdateOne) ClearDelegatedFrom() *NodeUpdateOne {
	nuo.mutation.ClearDelegatedFrom()
	return nuo
}

// SetDelegatedReason sets the "delegated_reason" field.
func (nuo *NodeUpdateOne) SetDelegatedReason(s string) *NodeUpdateOne {
	nuo.mutation.SetDelegatedReason(s)
	return nuo
}

// SetNillableDelegatedReason sets the "delegated_reason" field if the given value is not nil.
func (nuo *NodeUpdateOne) SetNillableDelegatedReason(s *string) *NodeUpdateOne {
	if s != nil {
		nuo.SetDelegatedReason(*s)
	}
	return nuo
}

// ClearDelegatedReason clears the value of the "delegated_reason" field.
func (nuo *NodeUpdateOne) ClearDelegatedReason() *NodeUpdateOne {
	nuo.mutation.ClearDelegatedReason()
	return nuo
}

// SetIsDelegated sets the "is_delegated" field.
func (nuo *NodeUpdateOne) SetIsDelegated(b bool) *NodeUpdateOne {
	nuo.mutation.SetIsDelegated(b)
	return nuo
}

// SetNillableIsDelegated sets the "is_delegated" field if the given value is not nil.
func (nuo *NodeUpdateOne) SetNillableIsDelegated(b *bool) *NodeUpdateOne {
	if b != nil {
		nuo.SetIsDelegated(*b)
	}
	return nuo
}

// SetIsTransferred sets the "is_transferred" field.
func (nuo *NodeUpdateOne) SetIsTransferred(b bool) *NodeUpdateOne {
	nuo.mutation.SetIsTransferred(b)
	return nuo
}

// SetNillableIsTransferred sets the "is_transferred" field if the given value is not nil.
func (nuo *NodeUpdateOne) SetNillableIsTransferred(b *bool) *NodeUpdateOne {
	if b != nil {
		nuo.SetIsTransferred(*b)
	}
	return nuo
}

// SetAllowCancel sets the "allow_cancel" field.
func (nuo *NodeUpdateOne) SetAllowCancel(b bool) *NodeUpdateOne {
	nuo.mutation.SetAllowCancel(b)
	return nuo
}

// SetNillableAllowCancel sets the "allow_cancel" field if the given value is not nil.
func (nuo *NodeUpdateOne) SetNillableAllowCancel(b *bool) *NodeUpdateOne {
	if b != nil {
		nuo.SetAllowCancel(*b)
	}
	return nuo
}

// SetAllowUrge sets the "allow_urge" field.
func (nuo *NodeUpdateOne) SetAllowUrge(b bool) *NodeUpdateOne {
	nuo.mutation.SetAllowUrge(b)
	return nuo
}

// SetNillableAllowUrge sets the "allow_urge" field if the given value is not nil.
func (nuo *NodeUpdateOne) SetNillableAllowUrge(b *bool) *NodeUpdateOne {
	if b != nil {
		nuo.SetAllowUrge(*b)
	}
	return nuo
}

// SetAllowDelegate sets the "allow_delegate" field.
func (nuo *NodeUpdateOne) SetAllowDelegate(b bool) *NodeUpdateOne {
	nuo.mutation.SetAllowDelegate(b)
	return nuo
}

// SetNillableAllowDelegate sets the "allow_delegate" field if the given value is not nil.
func (nuo *NodeUpdateOne) SetNillableAllowDelegate(b *bool) *NodeUpdateOne {
	if b != nil {
		nuo.SetAllowDelegate(*b)
	}
	return nuo
}

// SetAllowTransfer sets the "allow_transfer" field.
func (nuo *NodeUpdateOne) SetAllowTransfer(b bool) *NodeUpdateOne {
	nuo.mutation.SetAllowTransfer(b)
	return nuo
}

// SetNillableAllowTransfer sets the "allow_transfer" field if the given value is not nil.
func (nuo *NodeUpdateOne) SetNillableAllowTransfer(b *bool) *NodeUpdateOne {
	if b != nil {
		nuo.SetAllowTransfer(*b)
	}
	return nuo
}

// SetIsDraftEnabled sets the "is_draft_enabled" field.
func (nuo *NodeUpdateOne) SetIsDraftEnabled(b bool) *NodeUpdateOne {
	nuo.mutation.SetIsDraftEnabled(b)
	return nuo
}

// SetNillableIsDraftEnabled sets the "is_draft_enabled" field if the given value is not nil.
func (nuo *NodeUpdateOne) SetNillableIsDraftEnabled(b *bool) *NodeUpdateOne {
	if b != nil {
		nuo.SetIsDraftEnabled(*b)
	}
	return nuo
}

// SetIsAutoStart sets the "is_auto_start" field.
func (nuo *NodeUpdateOne) SetIsAutoStart(b bool) *NodeUpdateOne {
	nuo.mutation.SetIsAutoStart(b)
	return nuo
}

// SetNillableIsAutoStart sets the "is_auto_start" field if the given value is not nil.
func (nuo *NodeUpdateOne) SetNillableIsAutoStart(b *bool) *NodeUpdateOne {
	if b != nil {
		nuo.SetIsAutoStart(*b)
	}
	return nuo
}

// SetStrictMode sets the "strict_mode" field.
func (nuo *NodeUpdateOne) SetStrictMode(b bool) *NodeUpdateOne {
	nuo.mutation.SetStrictMode(b)
	return nuo
}

// SetNillableStrictMode sets the "strict_mode" field if the given value is not nil.
func (nuo *NodeUpdateOne) SetNillableStrictMode(b *bool) *NodeUpdateOne {
	if b != nil {
		nuo.SetStrictMode(*b)
	}
	return nuo
}

// SetStartTime sets the "start_time" field.
func (nuo *NodeUpdateOne) SetStartTime(i int64) *NodeUpdateOne {
	nuo.mutation.ResetStartTime()
	nuo.mutation.SetStartTime(i)
	return nuo
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (nuo *NodeUpdateOne) SetNillableStartTime(i *int64) *NodeUpdateOne {
	if i != nil {
		nuo.SetStartTime(*i)
	}
	return nuo
}

// AddStartTime adds i to the "start_time" field.
func (nuo *NodeUpdateOne) AddStartTime(i int64) *NodeUpdateOne {
	nuo.mutation.AddStartTime(i)
	return nuo
}

// SetEndTime sets the "end_time" field.
func (nuo *NodeUpdateOne) SetEndTime(i int64) *NodeUpdateOne {
	nuo.mutation.ResetEndTime()
	nuo.mutation.SetEndTime(i)
	return nuo
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (nuo *NodeUpdateOne) SetNillableEndTime(i *int64) *NodeUpdateOne {
	if i != nil {
		nuo.SetEndTime(*i)
	}
	return nuo
}

// AddEndTime adds i to the "end_time" field.
func (nuo *NodeUpdateOne) AddEndTime(i int64) *NodeUpdateOne {
	nuo.mutation.AddEndTime(i)
	return nuo
}

// ClearEndTime clears the value of the "end_time" field.
func (nuo *NodeUpdateOne) ClearEndTime() *NodeUpdateOne {
	nuo.mutation.ClearEndTime()
	return nuo
}

// SetDueTime sets the "due_time" field.
func (nuo *NodeUpdateOne) SetDueTime(i int64) *NodeUpdateOne {
	nuo.mutation.ResetDueTime()
	nuo.mutation.SetDueTime(i)
	return nuo
}

// SetNillableDueTime sets the "due_time" field if the given value is not nil.
func (nuo *NodeUpdateOne) SetNillableDueTime(i *int64) *NodeUpdateOne {
	if i != nil {
		nuo.SetDueTime(*i)
	}
	return nuo
}

// AddDueTime adds i to the "due_time" field.
func (nuo *NodeUpdateOne) AddDueTime(i int64) *NodeUpdateOne {
	nuo.mutation.AddDueTime(i)
	return nuo
}

// ClearDueTime clears the value of the "due_time" field.
func (nuo *NodeUpdateOne) ClearDueTime() *NodeUpdateOne {
	nuo.mutation.ClearDueTime()
	return nuo
}

// SetDuration sets the "duration" field.
func (nuo *NodeUpdateOne) SetDuration(i int) *NodeUpdateOne {
	nuo.mutation.ResetDuration()
	nuo.mutation.SetDuration(i)
	return nuo
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (nuo *NodeUpdateOne) SetNillableDuration(i *int) *NodeUpdateOne {
	if i != nil {
		nuo.SetDuration(*i)
	}
	return nuo
}

// AddDuration adds i to the "duration" field.
func (nuo *NodeUpdateOne) AddDuration(i int) *NodeUpdateOne {
	nuo.mutation.AddDuration(i)
	return nuo
}

// ClearDuration clears the value of the "duration" field.
func (nuo *NodeUpdateOne) ClearDuration() *NodeUpdateOne {
	nuo.mutation.ClearDuration()
	return nuo
}

// SetPriority sets the "priority" field.
func (nuo *NodeUpdateOne) SetPriority(i int) *NodeUpdateOne {
	nuo.mutation.ResetPriority()
	nuo.mutation.SetPriority(i)
	return nuo
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (nuo *NodeUpdateOne) SetNillablePriority(i *int) *NodeUpdateOne {
	if i != nil {
		nuo.SetPriority(*i)
	}
	return nuo
}

// AddPriority adds i to the "priority" field.
func (nuo *NodeUpdateOne) AddPriority(i int) *NodeUpdateOne {
	nuo.mutation.AddPriority(i)
	return nuo
}

// SetIsTimeout sets the "is_timeout" field.
func (nuo *NodeUpdateOne) SetIsTimeout(b bool) *NodeUpdateOne {
	nuo.mutation.SetIsTimeout(b)
	return nuo
}

// SetNillableIsTimeout sets the "is_timeout" field if the given value is not nil.
func (nuo *NodeUpdateOne) SetNillableIsTimeout(b *bool) *NodeUpdateOne {
	if b != nil {
		nuo.SetIsTimeout(*b)
	}
	return nuo
}

// SetReminderCount sets the "reminder_count" field.
func (nuo *NodeUpdateOne) SetReminderCount(i int) *NodeUpdateOne {
	nuo.mutation.ResetReminderCount()
	nuo.mutation.SetReminderCount(i)
	return nuo
}

// SetNillableReminderCount sets the "reminder_count" field if the given value is not nil.
func (nuo *NodeUpdateOne) SetNillableReminderCount(i *int) *NodeUpdateOne {
	if i != nil {
		nuo.SetReminderCount(*i)
	}
	return nuo
}

// AddReminderCount adds i to the "reminder_count" field.
func (nuo *NodeUpdateOne) AddReminderCount(i int) *NodeUpdateOne {
	nuo.mutation.AddReminderCount(i)
	return nuo
}

// SetExtras sets the "extras" field.
func (nuo *NodeUpdateOne) SetExtras(m map[string]interface{}) *NodeUpdateOne {
	nuo.mutation.SetExtras(m)
	return nuo
}

// ClearExtras clears the value of the "extras" field.
func (nuo *NodeUpdateOne) ClearExtras() *NodeUpdateOne {
	nuo.mutation.ClearExtras()
	return nuo
}

// SetTenantID sets the "tenant_id" field.
func (nuo *NodeUpdateOne) SetTenantID(s string) *NodeUpdateOne {
	nuo.mutation.SetTenantID(s)
	return nuo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (nuo *NodeUpdateOne) SetNillableTenantID(s *string) *NodeUpdateOne {
	if s != nil {
		nuo.SetTenantID(*s)
	}
	return nuo
}

// ClearTenantID clears the value of the "tenant_id" field.
func (nuo *NodeUpdateOne) ClearTenantID() *NodeUpdateOne {
	nuo.mutation.ClearTenantID()
	return nuo
}

// SetCreatedBy sets the "created_by" field.
func (nuo *NodeUpdateOne) SetCreatedBy(s string) *NodeUpdateOne {
	nuo.mutation.SetCreatedBy(s)
	return nuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (nuo *NodeUpdateOne) SetNillableCreatedBy(s *string) *NodeUpdateOne {
	if s != nil {
		nuo.SetCreatedBy(*s)
	}
	return nuo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (nuo *NodeUpdateOne) ClearCreatedBy() *NodeUpdateOne {
	nuo.mutation.ClearCreatedBy()
	return nuo
}

// SetUpdatedBy sets the "updated_by" field.
func (nuo *NodeUpdateOne) SetUpdatedBy(s string) *NodeUpdateOne {
	nuo.mutation.SetUpdatedBy(s)
	return nuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (nuo *NodeUpdateOne) SetNillableUpdatedBy(s *string) *NodeUpdateOne {
	if s != nil {
		nuo.SetUpdatedBy(*s)
	}
	return nuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (nuo *NodeUpdateOne) ClearUpdatedBy() *NodeUpdateOne {
	nuo.mutation.ClearUpdatedBy()
	return nuo
}

// SetUpdatedAt sets the "updated_at" field.
func (nuo *NodeUpdateOne) SetUpdatedAt(i int64) *NodeUpdateOne {
	nuo.mutation.ResetUpdatedAt()
	nuo.mutation.SetUpdatedAt(i)
	return nuo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (nuo *NodeUpdateOne) AddUpdatedAt(i int64) *NodeUpdateOne {
	nuo.mutation.AddUpdatedAt(i)
	return nuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (nuo *NodeUpdateOne) ClearUpdatedAt() *NodeUpdateOne {
	nuo.mutation.ClearUpdatedAt()
	return nuo
}

// SetProcessID sets the "process_id" field.
func (nuo *NodeUpdateOne) SetProcessID(s string) *NodeUpdateOne {
	nuo.mutation.SetProcessID(s)
	return nuo
}

// SetNillableProcessID sets the "process_id" field if the given value is not nil.
func (nuo *NodeUpdateOne) SetNillableProcessID(s *string) *NodeUpdateOne {
	if s != nil {
		nuo.SetProcessID(*s)
	}
	return nuo
}

// SetPermissions sets the "permissions" field.
func (nuo *NodeUpdateOne) SetPermissions(m map[string]interface{}) *NodeUpdateOne {
	nuo.mutation.SetPermissions(m)
	return nuo
}

// SetPrevNodes sets the "prev_nodes" field.
func (nuo *NodeUpdateOne) SetPrevNodes(s []string) *NodeUpdateOne {
	nuo.mutation.SetPrevNodes(s)
	return nuo
}

// AppendPrevNodes appends s to the "prev_nodes" field.
func (nuo *NodeUpdateOne) AppendPrevNodes(s []string) *NodeUpdateOne {
	nuo.mutation.AppendPrevNodes(s)
	return nuo
}

// ClearPrevNodes clears the value of the "prev_nodes" field.
func (nuo *NodeUpdateOne) ClearPrevNodes() *NodeUpdateOne {
	nuo.mutation.ClearPrevNodes()
	return nuo
}

// SetNextNodes sets the "next_nodes" field.
func (nuo *NodeUpdateOne) SetNextNodes(s []string) *NodeUpdateOne {
	nuo.mutation.SetNextNodes(s)
	return nuo
}

// AppendNextNodes appends s to the "next_nodes" field.
func (nuo *NodeUpdateOne) AppendNextNodes(s []string) *NodeUpdateOne {
	nuo.mutation.AppendNextNodes(s)
	return nuo
}

// ClearNextNodes clears the value of the "next_nodes" field.
func (nuo *NodeUpdateOne) ClearNextNodes() *NodeUpdateOne {
	nuo.mutation.ClearNextNodes()
	return nuo
}

// SetParallelNodes sets the "parallel_nodes" field.
func (nuo *NodeUpdateOne) SetParallelNodes(s []string) *NodeUpdateOne {
	nuo.mutation.SetParallelNodes(s)
	return nuo
}

// AppendParallelNodes appends s to the "parallel_nodes" field.
func (nuo *NodeUpdateOne) AppendParallelNodes(s []string) *NodeUpdateOne {
	nuo.mutation.AppendParallelNodes(s)
	return nuo
}

// ClearParallelNodes clears the value of the "parallel_nodes" field.
func (nuo *NodeUpdateOne) ClearParallelNodes() *NodeUpdateOne {
	nuo.mutation.ClearParallelNodes()
	return nuo
}

// SetBranchNodes sets the "branch_nodes" field.
func (nuo *NodeUpdateOne) SetBranchNodes(s []string) *NodeUpdateOne {
	nuo.mutation.SetBranchNodes(s)
	return nuo
}

// AppendBranchNodes appends s to the "branch_nodes" field.
func (nuo *NodeUpdateOne) AppendBranchNodes(s []string) *NodeUpdateOne {
	nuo.mutation.AppendBranchNodes(s)
	return nuo
}

// ClearBranchNodes clears the value of the "branch_nodes" field.
func (nuo *NodeUpdateOne) ClearBranchNodes() *NodeUpdateOne {
	nuo.mutation.ClearBranchNodes()
	return nuo
}

// SetConditions sets the "conditions" field.
func (nuo *NodeUpdateOne) SetConditions(m []map[string]interface{}) *NodeUpdateOne {
	nuo.mutation.SetConditions(m)
	return nuo
}

// AppendConditions appends m to the "conditions" field.
func (nuo *NodeUpdateOne) AppendConditions(m []map[string]interface{}) *NodeUpdateOne {
	nuo.mutation.AppendConditions(m)
	return nuo
}

// ClearConditions clears the value of the "conditions" field.
func (nuo *NodeUpdateOne) ClearConditions() *NodeUpdateOne {
	nuo.mutation.ClearConditions()
	return nuo
}

// SetProperties sets the "properties" field.
func (nuo *NodeUpdateOne) SetProperties(m map[string]interface{}) *NodeUpdateOne {
	nuo.mutation.SetProperties(m)
	return nuo
}

// ClearProperties clears the value of the "properties" field.
func (nuo *NodeUpdateOne) ClearProperties() *NodeUpdateOne {
	nuo.mutation.ClearProperties()
	return nuo
}

// SetIsCountersign sets the "is_countersign" field.
func (nuo *NodeUpdateOne) SetIsCountersign(b bool) *NodeUpdateOne {
	nuo.mutation.SetIsCountersign(b)
	return nuo
}

// SetNillableIsCountersign sets the "is_countersign" field if the given value is not nil.
func (nuo *NodeUpdateOne) SetNillableIsCountersign(b *bool) *NodeUpdateOne {
	if b != nil {
		nuo.SetIsCountersign(*b)
	}
	return nuo
}

// SetCountersignRule sets the "countersign_rule" field.
func (nuo *NodeUpdateOne) SetCountersignRule(s string) *NodeUpdateOne {
	nuo.mutation.SetCountersignRule(s)
	return nuo
}

// SetNillableCountersignRule sets the "countersign_rule" field if the given value is not nil.
func (nuo *NodeUpdateOne) SetNillableCountersignRule(s *string) *NodeUpdateOne {
	if s != nil {
		nuo.SetCountersignRule(*s)
	}
	return nuo
}

// ClearCountersignRule clears the value of the "countersign_rule" field.
func (nuo *NodeUpdateOne) ClearCountersignRule() *NodeUpdateOne {
	nuo.mutation.ClearCountersignRule()
	return nuo
}

// SetHandlers sets the "handlers" field.
func (nuo *NodeUpdateOne) SetHandlers(m map[string]interface{}) *NodeUpdateOne {
	nuo.mutation.SetHandlers(m)
	return nuo
}

// ClearHandlers clears the value of the "handlers" field.
func (nuo *NodeUpdateOne) ClearHandlers() *NodeUpdateOne {
	nuo.mutation.ClearHandlers()
	return nuo
}

// SetListeners sets the "listeners" field.
func (nuo *NodeUpdateOne) SetListeners(m map[string]interface{}) *NodeUpdateOne {
	nuo.mutation.SetListeners(m)
	return nuo
}

// ClearListeners clears the value of the "listeners" field.
func (nuo *NodeUpdateOne) ClearListeners() *NodeUpdateOne {
	nuo.mutation.ClearListeners()
	return nuo
}

// SetHooks sets the "hooks" field.
func (nuo *NodeUpdateOne) SetHooks(m map[string]interface{}) *NodeUpdateOne {
	nuo.mutation.SetHooks(m)
	return nuo
}

// ClearHooks clears the value of the "hooks" field.
func (nuo *NodeUpdateOne) ClearHooks() *NodeUpdateOne {
	nuo.mutation.ClearHooks()
	return nuo
}

// SetRetryTimes sets the "retry_times" field.
func (nuo *NodeUpdateOne) SetRetryTimes(i int) *NodeUpdateOne {
	nuo.mutation.ResetRetryTimes()
	nuo.mutation.SetRetryTimes(i)
	return nuo
}

// SetNillableRetryTimes sets the "retry_times" field if the given value is not nil.
func (nuo *NodeUpdateOne) SetNillableRetryTimes(i *int) *NodeUpdateOne {
	if i != nil {
		nuo.SetRetryTimes(*i)
	}
	return nuo
}

// AddRetryTimes adds i to the "retry_times" field.
func (nuo *NodeUpdateOne) AddRetryTimes(i int) *NodeUpdateOne {
	nuo.mutation.AddRetryTimes(i)
	return nuo
}

// ClearRetryTimes clears the value of the "retry_times" field.
func (nuo *NodeUpdateOne) ClearRetryTimes() *NodeUpdateOne {
	nuo.mutation.ClearRetryTimes()
	return nuo
}

// SetRetryInterval sets the "retry_interval" field.
func (nuo *NodeUpdateOne) SetRetryInterval(i int) *NodeUpdateOne {
	nuo.mutation.ResetRetryInterval()
	nuo.mutation.SetRetryInterval(i)
	return nuo
}

// SetNillableRetryInterval sets the "retry_interval" field if the given value is not nil.
func (nuo *NodeUpdateOne) SetNillableRetryInterval(i *int) *NodeUpdateOne {
	if i != nil {
		nuo.SetRetryInterval(*i)
	}
	return nuo
}

// AddRetryInterval adds i to the "retry_interval" field.
func (nuo *NodeUpdateOne) AddRetryInterval(i int) *NodeUpdateOne {
	nuo.mutation.AddRetryInterval(i)
	return nuo
}

// ClearRetryInterval clears the value of the "retry_interval" field.
func (nuo *NodeUpdateOne) ClearRetryInterval() *NodeUpdateOne {
	nuo.mutation.ClearRetryInterval()
	return nuo
}

// SetIsWorkingDay sets the "is_working_day" field.
func (nuo *NodeUpdateOne) SetIsWorkingDay(b bool) *NodeUpdateOne {
	nuo.mutation.SetIsWorkingDay(b)
	return nuo
}

// SetNillableIsWorkingDay sets the "is_working_day" field if the given value is not nil.
func (nuo *NodeUpdateOne) SetNillableIsWorkingDay(b *bool) *NodeUpdateOne {
	if b != nil {
		nuo.SetIsWorkingDay(*b)
	}
	return nuo
}

// Mutation returns the NodeMutation object of the builder.
func (nuo *NodeUpdateOne) Mutation() *NodeMutation {
	return nuo.mutation
}

// Where appends a list predicates to the NodeUpdate builder.
func (nuo *NodeUpdateOne) Where(ps ...predicate.Node) *NodeUpdateOne {
	nuo.mutation.Where(ps...)
	return nuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (nuo *NodeUpdateOne) Select(field string, fields ...string) *NodeUpdateOne {
	nuo.fields = append([]string{field}, fields...)
	return nuo
}

// Save executes the query and returns the updated Node entity.
func (nuo *NodeUpdateOne) Save(ctx context.Context) (*Node, error) {
	nuo.defaults()
	return withHooks(ctx, nuo.sqlSave, nuo.mutation, nuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nuo *NodeUpdateOne) SaveX(ctx context.Context) *Node {
	node, err := nuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (nuo *NodeUpdateOne) Exec(ctx context.Context) error {
	_, err := nuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nuo *NodeUpdateOne) ExecX(ctx context.Context) {
	if err := nuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nuo *NodeUpdateOne) defaults() {
	if _, ok := nuo.mutation.UpdatedAt(); !ok && !nuo.mutation.UpdatedAtCleared() {
		v := node.UpdateDefaultUpdatedAt()
		nuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nuo *NodeUpdateOne) check() error {
	if v, ok := nuo.mutation.TenantID(); ok {
		if err := node.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "Node.tenant_id": %w`, err)}
		}
	}
	if v, ok := nuo.mutation.CreatedBy(); ok {
		if err := node.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "Node.created_by": %w`, err)}
		}
	}
	if v, ok := nuo.mutation.UpdatedBy(); ok {
		if err := node.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "Node.updated_by": %w`, err)}
		}
	}
	return nil
}

func (nuo *NodeUpdateOne) sqlSave(ctx context.Context) (_node *Node, err error) {
	if err := nuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(node.Table, node.Columns, sqlgraph.NewFieldSpec(node.FieldID, field.TypeString))
	id, ok := nuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Node.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := nuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, node.FieldID)
		for _, f := range fields {
			if !node.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != node.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := nuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nuo.mutation.Name(); ok {
		_spec.SetField(node.FieldName, field.TypeString, value)
	}
	if nuo.mutation.NameCleared() {
		_spec.ClearField(node.FieldName, field.TypeString)
	}
	if value, ok := nuo.mutation.Description(); ok {
		_spec.SetField(node.FieldDescription, field.TypeString, value)
	}
	if nuo.mutation.DescriptionCleared() {
		_spec.ClearField(node.FieldDescription, field.TypeString)
	}
	if value, ok := nuo.mutation.GetType(); ok {
		_spec.SetField(node.FieldType, field.TypeString, value)
	}
	if nuo.mutation.TypeCleared() {
		_spec.ClearField(node.FieldType, field.TypeString)
	}
	if value, ok := nuo.mutation.Status(); ok {
		_spec.SetField(node.FieldStatus, field.TypeString, value)
	}
	if nuo.mutation.StatusCleared() {
		_spec.ClearField(node.FieldStatus, field.TypeString)
	}
	if value, ok := nuo.mutation.NodeKey(); ok {
		_spec.SetField(node.FieldNodeKey, field.TypeString, value)
	}
	if value, ok := nuo.mutation.NodeType(); ok {
		_spec.SetField(node.FieldNodeType, field.TypeString, value)
	}
	if value, ok := nuo.mutation.NodeConfig(); ok {
		_spec.SetField(node.FieldNodeConfig, field.TypeJSON, value)
	}
	if nuo.mutation.NodeConfigCleared() {
		_spec.ClearField(node.FieldNodeConfig, field.TypeJSON)
	}
	if value, ok := nuo.mutation.NodeRules(); ok {
		_spec.SetField(node.FieldNodeRules, field.TypeJSON, value)
	}
	if nuo.mutation.NodeRulesCleared() {
		_spec.ClearField(node.FieldNodeRules, field.TypeJSON)
	}
	if value, ok := nuo.mutation.NodeEvents(); ok {
		_spec.SetField(node.FieldNodeEvents, field.TypeJSON, value)
	}
	if nuo.mutation.NodeEventsCleared() {
		_spec.ClearField(node.FieldNodeEvents, field.TypeJSON)
	}
	if value, ok := nuo.mutation.FormCode(); ok {
		_spec.SetField(node.FieldFormCode, field.TypeString, value)
	}
	if value, ok := nuo.mutation.FormVersion(); ok {
		_spec.SetField(node.FieldFormVersion, field.TypeString, value)
	}
	if nuo.mutation.FormVersionCleared() {
		_spec.ClearField(node.FieldFormVersion, field.TypeString)
	}
	if value, ok := nuo.mutation.FormConfig(); ok {
		_spec.SetField(node.FieldFormConfig, field.TypeJSON, value)
	}
	if nuo.mutation.FormConfigCleared() {
		_spec.ClearField(node.FieldFormConfig, field.TypeJSON)
	}
	if value, ok := nuo.mutation.FormPermissions(); ok {
		_spec.SetField(node.FieldFormPermissions, field.TypeJSON, value)
	}
	if nuo.mutation.FormPermissionsCleared() {
		_spec.ClearField(node.FieldFormPermissions, field.TypeJSON)
	}
	if value, ok := nuo.mutation.FieldPermissions(); ok {
		_spec.SetField(node.FieldFieldPermissions, field.TypeJSON, value)
	}
	if nuo.mutation.FieldPermissionsCleared() {
		_spec.ClearField(node.FieldFieldPermissions, field.TypeJSON)
	}
	if value, ok := nuo.mutation.Assignees(); ok {
		_spec.SetField(node.FieldAssignees, field.TypeJSON, value)
	}
	if value, ok := nuo.mutation.AppendedAssignees(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, node.FieldAssignees, value)
		})
	}
	if value, ok := nuo.mutation.Candidates(); ok {
		_spec.SetField(node.FieldCandidates, field.TypeJSON, value)
	}
	if value, ok := nuo.mutation.AppendedCandidates(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, node.FieldCandidates, value)
		})
	}
	if value, ok := nuo.mutation.DelegatedFrom(); ok {
		_spec.SetField(node.FieldDelegatedFrom, field.TypeString, value)
	}
	if nuo.mutation.DelegatedFromCleared() {
		_spec.ClearField(node.FieldDelegatedFrom, field.TypeString)
	}
	if value, ok := nuo.mutation.DelegatedReason(); ok {
		_spec.SetField(node.FieldDelegatedReason, field.TypeString, value)
	}
	if nuo.mutation.DelegatedReasonCleared() {
		_spec.ClearField(node.FieldDelegatedReason, field.TypeString)
	}
	if value, ok := nuo.mutation.IsDelegated(); ok {
		_spec.SetField(node.FieldIsDelegated, field.TypeBool, value)
	}
	if value, ok := nuo.mutation.IsTransferred(); ok {
		_spec.SetField(node.FieldIsTransferred, field.TypeBool, value)
	}
	if value, ok := nuo.mutation.AllowCancel(); ok {
		_spec.SetField(node.FieldAllowCancel, field.TypeBool, value)
	}
	if value, ok := nuo.mutation.AllowUrge(); ok {
		_spec.SetField(node.FieldAllowUrge, field.TypeBool, value)
	}
	if value, ok := nuo.mutation.AllowDelegate(); ok {
		_spec.SetField(node.FieldAllowDelegate, field.TypeBool, value)
	}
	if value, ok := nuo.mutation.AllowTransfer(); ok {
		_spec.SetField(node.FieldAllowTransfer, field.TypeBool, value)
	}
	if value, ok := nuo.mutation.IsDraftEnabled(); ok {
		_spec.SetField(node.FieldIsDraftEnabled, field.TypeBool, value)
	}
	if value, ok := nuo.mutation.IsAutoStart(); ok {
		_spec.SetField(node.FieldIsAutoStart, field.TypeBool, value)
	}
	if value, ok := nuo.mutation.StrictMode(); ok {
		_spec.SetField(node.FieldStrictMode, field.TypeBool, value)
	}
	if value, ok := nuo.mutation.StartTime(); ok {
		_spec.SetField(node.FieldStartTime, field.TypeInt64, value)
	}
	if value, ok := nuo.mutation.AddedStartTime(); ok {
		_spec.AddField(node.FieldStartTime, field.TypeInt64, value)
	}
	if value, ok := nuo.mutation.EndTime(); ok {
		_spec.SetField(node.FieldEndTime, field.TypeInt64, value)
	}
	if value, ok := nuo.mutation.AddedEndTime(); ok {
		_spec.AddField(node.FieldEndTime, field.TypeInt64, value)
	}
	if nuo.mutation.EndTimeCleared() {
		_spec.ClearField(node.FieldEndTime, field.TypeInt64)
	}
	if value, ok := nuo.mutation.DueTime(); ok {
		_spec.SetField(node.FieldDueTime, field.TypeInt64, value)
	}
	if value, ok := nuo.mutation.AddedDueTime(); ok {
		_spec.AddField(node.FieldDueTime, field.TypeInt64, value)
	}
	if nuo.mutation.DueTimeCleared() {
		_spec.ClearField(node.FieldDueTime, field.TypeInt64)
	}
	if value, ok := nuo.mutation.Duration(); ok {
		_spec.SetField(node.FieldDuration, field.TypeInt, value)
	}
	if value, ok := nuo.mutation.AddedDuration(); ok {
		_spec.AddField(node.FieldDuration, field.TypeInt, value)
	}
	if nuo.mutation.DurationCleared() {
		_spec.ClearField(node.FieldDuration, field.TypeInt)
	}
	if value, ok := nuo.mutation.Priority(); ok {
		_spec.SetField(node.FieldPriority, field.TypeInt, value)
	}
	if value, ok := nuo.mutation.AddedPriority(); ok {
		_spec.AddField(node.FieldPriority, field.TypeInt, value)
	}
	if value, ok := nuo.mutation.IsTimeout(); ok {
		_spec.SetField(node.FieldIsTimeout, field.TypeBool, value)
	}
	if value, ok := nuo.mutation.ReminderCount(); ok {
		_spec.SetField(node.FieldReminderCount, field.TypeInt, value)
	}
	if value, ok := nuo.mutation.AddedReminderCount(); ok {
		_spec.AddField(node.FieldReminderCount, field.TypeInt, value)
	}
	if value, ok := nuo.mutation.Extras(); ok {
		_spec.SetField(node.FieldExtras, field.TypeJSON, value)
	}
	if nuo.mutation.ExtrasCleared() {
		_spec.ClearField(node.FieldExtras, field.TypeJSON)
	}
	if value, ok := nuo.mutation.TenantID(); ok {
		_spec.SetField(node.FieldTenantID, field.TypeString, value)
	}
	if nuo.mutation.TenantIDCleared() {
		_spec.ClearField(node.FieldTenantID, field.TypeString)
	}
	if value, ok := nuo.mutation.CreatedBy(); ok {
		_spec.SetField(node.FieldCreatedBy, field.TypeString, value)
	}
	if nuo.mutation.CreatedByCleared() {
		_spec.ClearField(node.FieldCreatedBy, field.TypeString)
	}
	if value, ok := nuo.mutation.UpdatedBy(); ok {
		_spec.SetField(node.FieldUpdatedBy, field.TypeString, value)
	}
	if nuo.mutation.UpdatedByCleared() {
		_spec.ClearField(node.FieldUpdatedBy, field.TypeString)
	}
	if nuo.mutation.CreatedAtCleared() {
		_spec.ClearField(node.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := nuo.mutation.UpdatedAt(); ok {
		_spec.SetField(node.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := nuo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(node.FieldUpdatedAt, field.TypeInt64, value)
	}
	if nuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(node.FieldUpdatedAt, field.TypeInt64)
	}
	if value, ok := nuo.mutation.ProcessID(); ok {
		_spec.SetField(node.FieldProcessID, field.TypeString, value)
	}
	if value, ok := nuo.mutation.Permissions(); ok {
		_spec.SetField(node.FieldPermissions, field.TypeJSON, value)
	}
	if value, ok := nuo.mutation.PrevNodes(); ok {
		_spec.SetField(node.FieldPrevNodes, field.TypeJSON, value)
	}
	if value, ok := nuo.mutation.AppendedPrevNodes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, node.FieldPrevNodes, value)
		})
	}
	if nuo.mutation.PrevNodesCleared() {
		_spec.ClearField(node.FieldPrevNodes, field.TypeJSON)
	}
	if value, ok := nuo.mutation.NextNodes(); ok {
		_spec.SetField(node.FieldNextNodes, field.TypeJSON, value)
	}
	if value, ok := nuo.mutation.AppendedNextNodes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, node.FieldNextNodes, value)
		})
	}
	if nuo.mutation.NextNodesCleared() {
		_spec.ClearField(node.FieldNextNodes, field.TypeJSON)
	}
	if value, ok := nuo.mutation.ParallelNodes(); ok {
		_spec.SetField(node.FieldParallelNodes, field.TypeJSON, value)
	}
	if value, ok := nuo.mutation.AppendedParallelNodes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, node.FieldParallelNodes, value)
		})
	}
	if nuo.mutation.ParallelNodesCleared() {
		_spec.ClearField(node.FieldParallelNodes, field.TypeJSON)
	}
	if value, ok := nuo.mutation.BranchNodes(); ok {
		_spec.SetField(node.FieldBranchNodes, field.TypeJSON, value)
	}
	if value, ok := nuo.mutation.AppendedBranchNodes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, node.FieldBranchNodes, value)
		})
	}
	if nuo.mutation.BranchNodesCleared() {
		_spec.ClearField(node.FieldBranchNodes, field.TypeJSON)
	}
	if value, ok := nuo.mutation.Conditions(); ok {
		_spec.SetField(node.FieldConditions, field.TypeJSON, value)
	}
	if value, ok := nuo.mutation.AppendedConditions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, node.FieldConditions, value)
		})
	}
	if nuo.mutation.ConditionsCleared() {
		_spec.ClearField(node.FieldConditions, field.TypeJSON)
	}
	if value, ok := nuo.mutation.Properties(); ok {
		_spec.SetField(node.FieldProperties, field.TypeJSON, value)
	}
	if nuo.mutation.PropertiesCleared() {
		_spec.ClearField(node.FieldProperties, field.TypeJSON)
	}
	if value, ok := nuo.mutation.IsCountersign(); ok {
		_spec.SetField(node.FieldIsCountersign, field.TypeBool, value)
	}
	if value, ok := nuo.mutation.CountersignRule(); ok {
		_spec.SetField(node.FieldCountersignRule, field.TypeString, value)
	}
	if nuo.mutation.CountersignRuleCleared() {
		_spec.ClearField(node.FieldCountersignRule, field.TypeString)
	}
	if value, ok := nuo.mutation.Handlers(); ok {
		_spec.SetField(node.FieldHandlers, field.TypeJSON, value)
	}
	if nuo.mutation.HandlersCleared() {
		_spec.ClearField(node.FieldHandlers, field.TypeJSON)
	}
	if value, ok := nuo.mutation.Listeners(); ok {
		_spec.SetField(node.FieldListeners, field.TypeJSON, value)
	}
	if nuo.mutation.ListenersCleared() {
		_spec.ClearField(node.FieldListeners, field.TypeJSON)
	}
	if value, ok := nuo.mutation.Hooks(); ok {
		_spec.SetField(node.FieldHooks, field.TypeJSON, value)
	}
	if nuo.mutation.HooksCleared() {
		_spec.ClearField(node.FieldHooks, field.TypeJSON)
	}
	if value, ok := nuo.mutation.RetryTimes(); ok {
		_spec.SetField(node.FieldRetryTimes, field.TypeInt, value)
	}
	if value, ok := nuo.mutation.AddedRetryTimes(); ok {
		_spec.AddField(node.FieldRetryTimes, field.TypeInt, value)
	}
	if nuo.mutation.RetryTimesCleared() {
		_spec.ClearField(node.FieldRetryTimes, field.TypeInt)
	}
	if value, ok := nuo.mutation.RetryInterval(); ok {
		_spec.SetField(node.FieldRetryInterval, field.TypeInt, value)
	}
	if value, ok := nuo.mutation.AddedRetryInterval(); ok {
		_spec.AddField(node.FieldRetryInterval, field.TypeInt, value)
	}
	if nuo.mutation.RetryIntervalCleared() {
		_spec.ClearField(node.FieldRetryInterval, field.TypeInt)
	}
	if value, ok := nuo.mutation.IsWorkingDay(); ok {
		_spec.SetField(node.FieldIsWorkingDay, field.TypeBool, value)
	}
	_node = &Node{config: nuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, nuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{node.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	nuo.mutation.done = true
	return _node, nil
}
