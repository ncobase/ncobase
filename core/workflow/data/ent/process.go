// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"ncobase/core/workflow/data/ent/process"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Process is the model entity for the Process schema.
type Process struct {
	config `json:"-"`
	// ID of the ent.
	// primary key
	ID string `json:"id,omitempty"`
	// status: 0 activated, 1 unactivated, 2 disabled
	Status int `json:"status,omitempty"`
	// Process instance ID
	ProcessID string `json:"process_id,omitempty"`
	// Process template ID
	TemplateID string `json:"template_id,omitempty"`
	// Business document ID
	BusinessKey string `json:"business_key,omitempty"`
	// Form type code
	FormCode string `json:"form_code,omitempty"`
	// Form version number
	FormVersion string `json:"form_version,omitempty"`
	// Form configuration
	FormConfig map[string]interface{} `json:"form_config,omitempty"`
	// Form permission settings
	FormPermissions map[string]interface{} `json:"form_permissions,omitempty"`
	// Field level permissions
	FieldPermissions map[string]interface{} `json:"field_permissions,omitempty"`
	// Business tags
	BusinessTags []interface{} `json:"business_tags,omitempty"`
	// Module code
	ModuleCode string `json:"module_code,omitempty"`
	// Category
	Category string `json:"category,omitempty"`
	// Flow status
	FlowStatus string `json:"flow_status,omitempty"`
	// Flow variables
	FlowVariables map[string]interface{} `json:"flow_variables,omitempty"`
	// Whether is draft
	IsDraft bool `json:"is_draft,omitempty"`
	// Whether is terminated
	IsTerminated bool `json:"is_terminated,omitempty"`
	// Whether is suspended
	IsSuspended bool `json:"is_suspended,omitempty"`
	// Suspension reason
	SuspendReason string `json:"suspend_reason,omitempty"`
	// Start time
	StartTime time.Time `json:"start_time,omitempty"`
	// End time
	EndTime *time.Time `json:"end_time,omitempty"`
	// Due time
	DueTime *time.Time `json:"due_time,omitempty"`
	// Duration in seconds
	Duration int `json:"duration,omitempty"`
	// Priority level
	Priority int `json:"priority,omitempty"`
	// Whether timed out
	IsTimeout bool `json:"is_timeout,omitempty"`
	// Number of reminders sent
	ReminderCount int `json:"reminder_count,omitempty"`
	// Allow cancellation
	AllowCancel bool `json:"allow_cancel,omitempty"`
	// Allow urging
	AllowUrge bool `json:"allow_urge,omitempty"`
	// Allow delegation
	AllowDelegate bool `json:"allow_delegate,omitempty"`
	// Allow transfer
	AllowTransfer bool `json:"allow_transfer,omitempty"`
	// Whether draft is enabled
	IsDraftEnabled bool `json:"is_draft_enabled,omitempty"`
	// Whether auto start is enabled
	IsAutoStart bool `json:"is_auto_start,omitempty"`
	// Enable strict mode
	StrictMode bool `json:"strict_mode,omitempty"`
	// Extend properties
	Extras map[string]interface{} `json:"extras,omitempty"`
	// tenant id
	TenantID string `json:"tenant_id,omitempty"`
	// id of the creator
	CreatedBy string `json:"created_by,omitempty"`
	// id of the last updater
	UpdatedBy string `json:"updated_by,omitempty"`
	// created at
	CreatedAt int64 `json:"created_at,omitempty"`
	// updated at
	UpdatedAt int64 `json:"updated_at,omitempty"`
	// Process unique identifier
	ProcessKey string `json:"process_key,omitempty"`
	// Process initiator
	Initiator string `json:"initiator,omitempty"`
	// Initiator's department
	InitiatorDept string `json:"initiator_dept,omitempty"`
	// Process code
	ProcessCode string `json:"process_code,omitempty"`
	// Process variables
	Variables map[string]interface{} `json:"variables,omitempty"`
	// Current node
	CurrentNode string `json:"current_node,omitempty"`
	// Currently active nodes
	ActiveNodes []interface{} `json:"active_nodes,omitempty"`
	// Process snapshot
	ProcessSnapshot map[string]interface{} `json:"process_snapshot,omitempty"`
	// Form snapshot
	FormSnapshot map[string]interface{} `json:"form_snapshot,omitempty"`
	// Number of urges
	UrgeCount    int `json:"urge_count,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Process) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case process.FieldFormConfig, process.FieldFormPermissions, process.FieldFieldPermissions, process.FieldBusinessTags, process.FieldFlowVariables, process.FieldExtras, process.FieldVariables, process.FieldActiveNodes, process.FieldProcessSnapshot, process.FieldFormSnapshot:
			values[i] = new([]byte)
		case process.FieldIsDraft, process.FieldIsTerminated, process.FieldIsSuspended, process.FieldIsTimeout, process.FieldAllowCancel, process.FieldAllowUrge, process.FieldAllowDelegate, process.FieldAllowTransfer, process.FieldIsDraftEnabled, process.FieldIsAutoStart, process.FieldStrictMode:
			values[i] = new(sql.NullBool)
		case process.FieldStatus, process.FieldDuration, process.FieldPriority, process.FieldReminderCount, process.FieldCreatedAt, process.FieldUpdatedAt, process.FieldUrgeCount:
			values[i] = new(sql.NullInt64)
		case process.FieldID, process.FieldProcessID, process.FieldTemplateID, process.FieldBusinessKey, process.FieldFormCode, process.FieldFormVersion, process.FieldModuleCode, process.FieldCategory, process.FieldFlowStatus, process.FieldSuspendReason, process.FieldTenantID, process.FieldCreatedBy, process.FieldUpdatedBy, process.FieldProcessKey, process.FieldInitiator, process.FieldInitiatorDept, process.FieldProcessCode, process.FieldCurrentNode:
			values[i] = new(sql.NullString)
		case process.FieldStartTime, process.FieldEndTime, process.FieldDueTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Process fields.
func (pr *Process) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case process.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				pr.ID = value.String
			}
		case process.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				pr.Status = int(value.Int64)
			}
		case process.FieldProcessID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field process_id", values[i])
			} else if value.Valid {
				pr.ProcessID = value.String
			}
		case process.FieldTemplateID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field template_id", values[i])
			} else if value.Valid {
				pr.TemplateID = value.String
			}
		case process.FieldBusinessKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field business_key", values[i])
			} else if value.Valid {
				pr.BusinessKey = value.String
			}
		case process.FieldFormCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field form_code", values[i])
			} else if value.Valid {
				pr.FormCode = value.String
			}
		case process.FieldFormVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field form_version", values[i])
			} else if value.Valid {
				pr.FormVersion = value.String
			}
		case process.FieldFormConfig:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field form_config", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pr.FormConfig); err != nil {
					return fmt.Errorf("unmarshal field form_config: %w", err)
				}
			}
		case process.FieldFormPermissions:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field form_permissions", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pr.FormPermissions); err != nil {
					return fmt.Errorf("unmarshal field form_permissions: %w", err)
				}
			}
		case process.FieldFieldPermissions:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field field_permissions", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pr.FieldPermissions); err != nil {
					return fmt.Errorf("unmarshal field field_permissions: %w", err)
				}
			}
		case process.FieldBusinessTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field business_tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pr.BusinessTags); err != nil {
					return fmt.Errorf("unmarshal field business_tags: %w", err)
				}
			}
		case process.FieldModuleCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field module_code", values[i])
			} else if value.Valid {
				pr.ModuleCode = value.String
			}
		case process.FieldCategory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field category", values[i])
			} else if value.Valid {
				pr.Category = value.String
			}
		case process.FieldFlowStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field flow_status", values[i])
			} else if value.Valid {
				pr.FlowStatus = value.String
			}
		case process.FieldFlowVariables:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field flow_variables", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pr.FlowVariables); err != nil {
					return fmt.Errorf("unmarshal field flow_variables: %w", err)
				}
			}
		case process.FieldIsDraft:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_draft", values[i])
			} else if value.Valid {
				pr.IsDraft = value.Bool
			}
		case process.FieldIsTerminated:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_terminated", values[i])
			} else if value.Valid {
				pr.IsTerminated = value.Bool
			}
		case process.FieldIsSuspended:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_suspended", values[i])
			} else if value.Valid {
				pr.IsSuspended = value.Bool
			}
		case process.FieldSuspendReason:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field suspend_reason", values[i])
			} else if value.Valid {
				pr.SuspendReason = value.String
			}
		case process.FieldStartTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_time", values[i])
			} else if value.Valid {
				pr.StartTime = value.Time
			}
		case process.FieldEndTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_time", values[i])
			} else if value.Valid {
				pr.EndTime = new(time.Time)
				*pr.EndTime = value.Time
			}
		case process.FieldDueTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field due_time", values[i])
			} else if value.Valid {
				pr.DueTime = new(time.Time)
				*pr.DueTime = value.Time
			}
		case process.FieldDuration:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field duration", values[i])
			} else if value.Valid {
				pr.Duration = int(value.Int64)
			}
		case process.FieldPriority:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field priority", values[i])
			} else if value.Valid {
				pr.Priority = int(value.Int64)
			}
		case process.FieldIsTimeout:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_timeout", values[i])
			} else if value.Valid {
				pr.IsTimeout = value.Bool
			}
		case process.FieldReminderCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field reminder_count", values[i])
			} else if value.Valid {
				pr.ReminderCount = int(value.Int64)
			}
		case process.FieldAllowCancel:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field allow_cancel", values[i])
			} else if value.Valid {
				pr.AllowCancel = value.Bool
			}
		case process.FieldAllowUrge:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field allow_urge", values[i])
			} else if value.Valid {
				pr.AllowUrge = value.Bool
			}
		case process.FieldAllowDelegate:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field allow_delegate", values[i])
			} else if value.Valid {
				pr.AllowDelegate = value.Bool
			}
		case process.FieldAllowTransfer:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field allow_transfer", values[i])
			} else if value.Valid {
				pr.AllowTransfer = value.Bool
			}
		case process.FieldIsDraftEnabled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_draft_enabled", values[i])
			} else if value.Valid {
				pr.IsDraftEnabled = value.Bool
			}
		case process.FieldIsAutoStart:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_auto_start", values[i])
			} else if value.Valid {
				pr.IsAutoStart = value.Bool
			}
		case process.FieldStrictMode:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field strict_mode", values[i])
			} else if value.Valid {
				pr.StrictMode = value.Bool
			}
		case process.FieldExtras:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field extras", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pr.Extras); err != nil {
					return fmt.Errorf("unmarshal field extras: %w", err)
				}
			}
		case process.FieldTenantID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				pr.TenantID = value.String
			}
		case process.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				pr.CreatedBy = value.String
			}
		case process.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				pr.UpdatedBy = value.String
			}
		case process.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pr.CreatedAt = value.Int64
			}
		case process.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pr.UpdatedAt = value.Int64
			}
		case process.FieldProcessKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field process_key", values[i])
			} else if value.Valid {
				pr.ProcessKey = value.String
			}
		case process.FieldInitiator:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field initiator", values[i])
			} else if value.Valid {
				pr.Initiator = value.String
			}
		case process.FieldInitiatorDept:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field initiator_dept", values[i])
			} else if value.Valid {
				pr.InitiatorDept = value.String
			}
		case process.FieldProcessCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field process_code", values[i])
			} else if value.Valid {
				pr.ProcessCode = value.String
			}
		case process.FieldVariables:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field variables", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pr.Variables); err != nil {
					return fmt.Errorf("unmarshal field variables: %w", err)
				}
			}
		case process.FieldCurrentNode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field current_node", values[i])
			} else if value.Valid {
				pr.CurrentNode = value.String
			}
		case process.FieldActiveNodes:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field active_nodes", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pr.ActiveNodes); err != nil {
					return fmt.Errorf("unmarshal field active_nodes: %w", err)
				}
			}
		case process.FieldProcessSnapshot:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field process_snapshot", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pr.ProcessSnapshot); err != nil {
					return fmt.Errorf("unmarshal field process_snapshot: %w", err)
				}
			}
		case process.FieldFormSnapshot:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field form_snapshot", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pr.FormSnapshot); err != nil {
					return fmt.Errorf("unmarshal field form_snapshot: %w", err)
				}
			}
		case process.FieldUrgeCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field urge_count", values[i])
			} else if value.Valid {
				pr.UrgeCount = int(value.Int64)
			}
		default:
			pr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Process.
// This includes values selected through modifiers, order, etc.
func (pr *Process) Value(name string) (ent.Value, error) {
	return pr.selectValues.Get(name)
}

// Update returns a builder for updating this Process.
// Note that you need to call Process.Unwrap() before calling this method if this Process
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Process) Update() *ProcessUpdateOne {
	return NewProcessClient(pr.config).UpdateOne(pr)
}

// Unwrap unwraps the Process entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *Process) Unwrap() *Process {
	_tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Process is not a transactional entity")
	}
	pr.config.driver = _tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Process) String() string {
	var builder strings.Builder
	builder.WriteString("Process(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pr.ID))
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", pr.Status))
	builder.WriteString(", ")
	builder.WriteString("process_id=")
	builder.WriteString(pr.ProcessID)
	builder.WriteString(", ")
	builder.WriteString("template_id=")
	builder.WriteString(pr.TemplateID)
	builder.WriteString(", ")
	builder.WriteString("business_key=")
	builder.WriteString(pr.BusinessKey)
	builder.WriteString(", ")
	builder.WriteString("form_code=")
	builder.WriteString(pr.FormCode)
	builder.WriteString(", ")
	builder.WriteString("form_version=")
	builder.WriteString(pr.FormVersion)
	builder.WriteString(", ")
	builder.WriteString("form_config=")
	builder.WriteString(fmt.Sprintf("%v", pr.FormConfig))
	builder.WriteString(", ")
	builder.WriteString("form_permissions=")
	builder.WriteString(fmt.Sprintf("%v", pr.FormPermissions))
	builder.WriteString(", ")
	builder.WriteString("field_permissions=")
	builder.WriteString(fmt.Sprintf("%v", pr.FieldPermissions))
	builder.WriteString(", ")
	builder.WriteString("business_tags=")
	builder.WriteString(fmt.Sprintf("%v", pr.BusinessTags))
	builder.WriteString(", ")
	builder.WriteString("module_code=")
	builder.WriteString(pr.ModuleCode)
	builder.WriteString(", ")
	builder.WriteString("category=")
	builder.WriteString(pr.Category)
	builder.WriteString(", ")
	builder.WriteString("flow_status=")
	builder.WriteString(pr.FlowStatus)
	builder.WriteString(", ")
	builder.WriteString("flow_variables=")
	builder.WriteString(fmt.Sprintf("%v", pr.FlowVariables))
	builder.WriteString(", ")
	builder.WriteString("is_draft=")
	builder.WriteString(fmt.Sprintf("%v", pr.IsDraft))
	builder.WriteString(", ")
	builder.WriteString("is_terminated=")
	builder.WriteString(fmt.Sprintf("%v", pr.IsTerminated))
	builder.WriteString(", ")
	builder.WriteString("is_suspended=")
	builder.WriteString(fmt.Sprintf("%v", pr.IsSuspended))
	builder.WriteString(", ")
	builder.WriteString("suspend_reason=")
	builder.WriteString(pr.SuspendReason)
	builder.WriteString(", ")
	builder.WriteString("start_time=")
	builder.WriteString(pr.StartTime.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := pr.EndTime; v != nil {
		builder.WriteString("end_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := pr.DueTime; v != nil {
		builder.WriteString("due_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("duration=")
	builder.WriteString(fmt.Sprintf("%v", pr.Duration))
	builder.WriteString(", ")
	builder.WriteString("priority=")
	builder.WriteString(fmt.Sprintf("%v", pr.Priority))
	builder.WriteString(", ")
	builder.WriteString("is_timeout=")
	builder.WriteString(fmt.Sprintf("%v", pr.IsTimeout))
	builder.WriteString(", ")
	builder.WriteString("reminder_count=")
	builder.WriteString(fmt.Sprintf("%v", pr.ReminderCount))
	builder.WriteString(", ")
	builder.WriteString("allow_cancel=")
	builder.WriteString(fmt.Sprintf("%v", pr.AllowCancel))
	builder.WriteString(", ")
	builder.WriteString("allow_urge=")
	builder.WriteString(fmt.Sprintf("%v", pr.AllowUrge))
	builder.WriteString(", ")
	builder.WriteString("allow_delegate=")
	builder.WriteString(fmt.Sprintf("%v", pr.AllowDelegate))
	builder.WriteString(", ")
	builder.WriteString("allow_transfer=")
	builder.WriteString(fmt.Sprintf("%v", pr.AllowTransfer))
	builder.WriteString(", ")
	builder.WriteString("is_draft_enabled=")
	builder.WriteString(fmt.Sprintf("%v", pr.IsDraftEnabled))
	builder.WriteString(", ")
	builder.WriteString("is_auto_start=")
	builder.WriteString(fmt.Sprintf("%v", pr.IsAutoStart))
	builder.WriteString(", ")
	builder.WriteString("strict_mode=")
	builder.WriteString(fmt.Sprintf("%v", pr.StrictMode))
	builder.WriteString(", ")
	builder.WriteString("extras=")
	builder.WriteString(fmt.Sprintf("%v", pr.Extras))
	builder.WriteString(", ")
	builder.WriteString("tenant_id=")
	builder.WriteString(pr.TenantID)
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(pr.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(pr.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", pr.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", pr.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("process_key=")
	builder.WriteString(pr.ProcessKey)
	builder.WriteString(", ")
	builder.WriteString("initiator=")
	builder.WriteString(pr.Initiator)
	builder.WriteString(", ")
	builder.WriteString("initiator_dept=")
	builder.WriteString(pr.InitiatorDept)
	builder.WriteString(", ")
	builder.WriteString("process_code=")
	builder.WriteString(pr.ProcessCode)
	builder.WriteString(", ")
	builder.WriteString("variables=")
	builder.WriteString(fmt.Sprintf("%v", pr.Variables))
	builder.WriteString(", ")
	builder.WriteString("current_node=")
	builder.WriteString(pr.CurrentNode)
	builder.WriteString(", ")
	builder.WriteString("active_nodes=")
	builder.WriteString(fmt.Sprintf("%v", pr.ActiveNodes))
	builder.WriteString(", ")
	builder.WriteString("process_snapshot=")
	builder.WriteString(fmt.Sprintf("%v", pr.ProcessSnapshot))
	builder.WriteString(", ")
	builder.WriteString("form_snapshot=")
	builder.WriteString(fmt.Sprintf("%v", pr.FormSnapshot))
	builder.WriteString(", ")
	builder.WriteString("urge_count=")
	builder.WriteString(fmt.Sprintf("%v", pr.UrgeCount))
	builder.WriteByte(')')
	return builder.String()
}

// Processes is a parsable slice of Process.
type Processes []*Process
