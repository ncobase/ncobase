// Code generated by ent, DO NOT EDIT.

package process

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the process type in the database.
	Label = "process"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldProcessID holds the string denoting the process_id field in the database.
	FieldProcessID = "process_id"
	// FieldTemplateID holds the string denoting the template_id field in the database.
	FieldTemplateID = "template_id"
	// FieldBusinessKey holds the string denoting the business_key field in the database.
	FieldBusinessKey = "business_key"
	// FieldFormCode holds the string denoting the form_code field in the database.
	FieldFormCode = "form_code"
	// FieldFormVersion holds the string denoting the form_version field in the database.
	FieldFormVersion = "form_version"
	// FieldFormConfig holds the string denoting the form_config field in the database.
	FieldFormConfig = "form_config"
	// FieldFormPermissions holds the string denoting the form_permissions field in the database.
	FieldFormPermissions = "form_permissions"
	// FieldFieldPermissions holds the string denoting the field_permissions field in the database.
	FieldFieldPermissions = "field_permissions"
	// FieldBusinessTags holds the string denoting the business_tags field in the database.
	FieldBusinessTags = "business_tags"
	// FieldModuleCode holds the string denoting the module_code field in the database.
	FieldModuleCode = "module_code"
	// FieldCategory holds the string denoting the category field in the database.
	FieldCategory = "category"
	// FieldFlowStatus holds the string denoting the flow_status field in the database.
	FieldFlowStatus = "flow_status"
	// FieldFlowVariables holds the string denoting the flow_variables field in the database.
	FieldFlowVariables = "flow_variables"
	// FieldIsDraft holds the string denoting the is_draft field in the database.
	FieldIsDraft = "is_draft"
	// FieldIsTerminated holds the string denoting the is_terminated field in the database.
	FieldIsTerminated = "is_terminated"
	// FieldIsSuspended holds the string denoting the is_suspended field in the database.
	FieldIsSuspended = "is_suspended"
	// FieldSuspendReason holds the string denoting the suspend_reason field in the database.
	FieldSuspendReason = "suspend_reason"
	// FieldStartTime holds the string denoting the start_time field in the database.
	FieldStartTime = "start_time"
	// FieldEndTime holds the string denoting the end_time field in the database.
	FieldEndTime = "end_time"
	// FieldDueTime holds the string denoting the due_time field in the database.
	FieldDueTime = "due_time"
	// FieldDuration holds the string denoting the duration field in the database.
	FieldDuration = "duration"
	// FieldPriority holds the string denoting the priority field in the database.
	FieldPriority = "priority"
	// FieldIsTimeout holds the string denoting the is_timeout field in the database.
	FieldIsTimeout = "is_timeout"
	// FieldReminderCount holds the string denoting the reminder_count field in the database.
	FieldReminderCount = "reminder_count"
	// FieldAllowCancel holds the string denoting the allow_cancel field in the database.
	FieldAllowCancel = "allow_cancel"
	// FieldAllowUrge holds the string denoting the allow_urge field in the database.
	FieldAllowUrge = "allow_urge"
	// FieldAllowDelegate holds the string denoting the allow_delegate field in the database.
	FieldAllowDelegate = "allow_delegate"
	// FieldAllowTransfer holds the string denoting the allow_transfer field in the database.
	FieldAllowTransfer = "allow_transfer"
	// FieldIsDraftEnabled holds the string denoting the is_draft_enabled field in the database.
	FieldIsDraftEnabled = "is_draft_enabled"
	// FieldIsAutoStart holds the string denoting the is_auto_start field in the database.
	FieldIsAutoStart = "is_auto_start"
	// FieldStrictMode holds the string denoting the strict_mode field in the database.
	FieldStrictMode = "strict_mode"
	// FieldExtras holds the string denoting the extras field in the database.
	FieldExtras = "extras"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldProcessKey holds the string denoting the process_key field in the database.
	FieldProcessKey = "process_key"
	// FieldInitiator holds the string denoting the initiator field in the database.
	FieldInitiator = "initiator"
	// FieldInitiatorDept holds the string denoting the initiator_dept field in the database.
	FieldInitiatorDept = "initiator_dept"
	// FieldProcessCode holds the string denoting the process_code field in the database.
	FieldProcessCode = "process_code"
	// FieldVariables holds the string denoting the variables field in the database.
	FieldVariables = "variables"
	// FieldCurrentNode holds the string denoting the current_node field in the database.
	FieldCurrentNode = "current_node"
	// FieldActiveNodes holds the string denoting the active_nodes field in the database.
	FieldActiveNodes = "active_nodes"
	// FieldProcessSnapshot holds the string denoting the process_snapshot field in the database.
	FieldProcessSnapshot = "process_snapshot"
	// FieldFormSnapshot holds the string denoting the form_snapshot field in the database.
	FieldFormSnapshot = "form_snapshot"
	// FieldUrgeCount holds the string denoting the urge_count field in the database.
	FieldUrgeCount = "urge_count"
	// Table holds the table name of the process in the database.
	Table = "ncse_flow_process"
)

// Columns holds all SQL columns for process fields.
var Columns = []string{
	FieldID,
	FieldStatus,
	FieldProcessID,
	FieldTemplateID,
	FieldBusinessKey,
	FieldFormCode,
	FieldFormVersion,
	FieldFormConfig,
	FieldFormPermissions,
	FieldFieldPermissions,
	FieldBusinessTags,
	FieldModuleCode,
	FieldCategory,
	FieldFlowStatus,
	FieldFlowVariables,
	FieldIsDraft,
	FieldIsTerminated,
	FieldIsSuspended,
	FieldSuspendReason,
	FieldStartTime,
	FieldEndTime,
	FieldDueTime,
	FieldDuration,
	FieldPriority,
	FieldIsTimeout,
	FieldReminderCount,
	FieldAllowCancel,
	FieldAllowUrge,
	FieldAllowDelegate,
	FieldAllowTransfer,
	FieldIsDraftEnabled,
	FieldIsAutoStart,
	FieldStrictMode,
	FieldExtras,
	FieldTenantID,
	FieldCreatedBy,
	FieldUpdatedBy,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldProcessKey,
	FieldInitiator,
	FieldInitiatorDept,
	FieldProcessCode,
	FieldVariables,
	FieldCurrentNode,
	FieldActiveNodes,
	FieldProcessSnapshot,
	FieldFormSnapshot,
	FieldUrgeCount,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultIsDraft holds the default value on creation for the "is_draft" field.
	DefaultIsDraft bool
	// DefaultIsTerminated holds the default value on creation for the "is_terminated" field.
	DefaultIsTerminated bool
	// DefaultIsSuspended holds the default value on creation for the "is_suspended" field.
	DefaultIsSuspended bool
	// DefaultStartTime holds the default value on creation for the "start_time" field.
	DefaultStartTime func() int64
	// DefaultPriority holds the default value on creation for the "priority" field.
	DefaultPriority int
	// DefaultIsTimeout holds the default value on creation for the "is_timeout" field.
	DefaultIsTimeout bool
	// DefaultReminderCount holds the default value on creation for the "reminder_count" field.
	DefaultReminderCount int
	// DefaultAllowCancel holds the default value on creation for the "allow_cancel" field.
	DefaultAllowCancel bool
	// DefaultAllowUrge holds the default value on creation for the "allow_urge" field.
	DefaultAllowUrge bool
	// DefaultAllowDelegate holds the default value on creation for the "allow_delegate" field.
	DefaultAllowDelegate bool
	// DefaultAllowTransfer holds the default value on creation for the "allow_transfer" field.
	DefaultAllowTransfer bool
	// DefaultIsDraftEnabled holds the default value on creation for the "is_draft_enabled" field.
	DefaultIsDraftEnabled bool
	// DefaultIsAutoStart holds the default value on creation for the "is_auto_start" field.
	DefaultIsAutoStart bool
	// DefaultStrictMode holds the default value on creation for the "strict_mode" field.
	DefaultStrictMode bool
	// DefaultExtras holds the default value on creation for the "extras" field.
	DefaultExtras map[string]interface{}
	// TenantIDValidator is a validator for the "tenant_id" field. It is called by the builders before save.
	TenantIDValidator func(string) error
	// CreatedByValidator is a validator for the "created_by" field. It is called by the builders before save.
	CreatedByValidator func(string) error
	// UpdatedByValidator is a validator for the "updated_by" field. It is called by the builders before save.
	UpdatedByValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() int64
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() int64
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() int64
	// DefaultUrgeCount holds the default value on creation for the "urge_count" field.
	DefaultUrgeCount int
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)

// OrderOption defines the ordering options for the Process queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByProcessID orders the results by the process_id field.
func ByProcessID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProcessID, opts...).ToFunc()
}

// ByTemplateID orders the results by the template_id field.
func ByTemplateID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTemplateID, opts...).ToFunc()
}

// ByBusinessKey orders the results by the business_key field.
func ByBusinessKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBusinessKey, opts...).ToFunc()
}

// ByFormCode orders the results by the form_code field.
func ByFormCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFormCode, opts...).ToFunc()
}

// ByFormVersion orders the results by the form_version field.
func ByFormVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFormVersion, opts...).ToFunc()
}

// ByModuleCode orders the results by the module_code field.
func ByModuleCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModuleCode, opts...).ToFunc()
}

// ByCategory orders the results by the category field.
func ByCategory(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCategory, opts...).ToFunc()
}

// ByFlowStatus orders the results by the flow_status field.
func ByFlowStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFlowStatus, opts...).ToFunc()
}

// ByIsDraft orders the results by the is_draft field.
func ByIsDraft(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsDraft, opts...).ToFunc()
}

// ByIsTerminated orders the results by the is_terminated field.
func ByIsTerminated(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsTerminated, opts...).ToFunc()
}

// ByIsSuspended orders the results by the is_suspended field.
func ByIsSuspended(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsSuspended, opts...).ToFunc()
}

// BySuspendReason orders the results by the suspend_reason field.
func BySuspendReason(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSuspendReason, opts...).ToFunc()
}

// ByStartTime orders the results by the start_time field.
func ByStartTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartTime, opts...).ToFunc()
}

// ByEndTime orders the results by the end_time field.
func ByEndTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndTime, opts...).ToFunc()
}

// ByDueTime orders the results by the due_time field.
func ByDueTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDueTime, opts...).ToFunc()
}

// ByDuration orders the results by the duration field.
func ByDuration(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDuration, opts...).ToFunc()
}

// ByPriority orders the results by the priority field.
func ByPriority(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPriority, opts...).ToFunc()
}

// ByIsTimeout orders the results by the is_timeout field.
func ByIsTimeout(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsTimeout, opts...).ToFunc()
}

// ByReminderCount orders the results by the reminder_count field.
func ByReminderCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReminderCount, opts...).ToFunc()
}

// ByAllowCancel orders the results by the allow_cancel field.
func ByAllowCancel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAllowCancel, opts...).ToFunc()
}

// ByAllowUrge orders the results by the allow_urge field.
func ByAllowUrge(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAllowUrge, opts...).ToFunc()
}

// ByAllowDelegate orders the results by the allow_delegate field.
func ByAllowDelegate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAllowDelegate, opts...).ToFunc()
}

// ByAllowTransfer orders the results by the allow_transfer field.
func ByAllowTransfer(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAllowTransfer, opts...).ToFunc()
}

// ByIsDraftEnabled orders the results by the is_draft_enabled field.
func ByIsDraftEnabled(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsDraftEnabled, opts...).ToFunc()
}

// ByIsAutoStart orders the results by the is_auto_start field.
func ByIsAutoStart(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsAutoStart, opts...).ToFunc()
}

// ByStrictMode orders the results by the strict_mode field.
func ByStrictMode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStrictMode, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the updated_by field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByProcessKey orders the results by the process_key field.
func ByProcessKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProcessKey, opts...).ToFunc()
}

// ByInitiator orders the results by the initiator field.
func ByInitiator(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInitiator, opts...).ToFunc()
}

// ByInitiatorDept orders the results by the initiator_dept field.
func ByInitiatorDept(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInitiatorDept, opts...).ToFunc()
}

// ByProcessCode orders the results by the process_code field.
func ByProcessCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProcessCode, opts...).ToFunc()
}

// ByCurrentNode orders the results by the current_node field.
func ByCurrentNode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCurrentNode, opts...).ToFunc()
}

// ByUrgeCount orders the results by the urge_count field.
func ByUrgeCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUrgeCount, opts...).ToFunc()
}
