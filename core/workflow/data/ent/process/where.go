// Code generated by ent, DO NOT EDIT.

package process

import (
	"ncobase/core/workflow/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Process {
	return predicate.Process(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Process {
	return predicate.Process(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Process {
	return predicate.Process(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Process {
	return predicate.Process(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Process {
	return predicate.Process(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Process {
	return predicate.Process(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Process {
	return predicate.Process(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Process {
	return predicate.Process(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Process {
	return predicate.Process(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Process {
	return predicate.Process(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Process {
	return predicate.Process(sql.FieldContainsFold(FieldID, id))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int) predicate.Process {
	return predicate.Process(sql.FieldEQ(FieldStatus, v))
}

// ProcessID applies equality check predicate on the "process_id" field. It's identical to ProcessIDEQ.
func ProcessID(v string) predicate.Process {
	return predicate.Process(sql.FieldEQ(FieldProcessID, v))
}

// TemplateID applies equality check predicate on the "template_id" field. It's identical to TemplateIDEQ.
func TemplateID(v string) predicate.Process {
	return predicate.Process(sql.FieldEQ(FieldTemplateID, v))
}

// BusinessKey applies equality check predicate on the "business_key" field. It's identical to BusinessKeyEQ.
func BusinessKey(v string) predicate.Process {
	return predicate.Process(sql.FieldEQ(FieldBusinessKey, v))
}

// FormCode applies equality check predicate on the "form_code" field. It's identical to FormCodeEQ.
func FormCode(v string) predicate.Process {
	return predicate.Process(sql.FieldEQ(FieldFormCode, v))
}

// FormVersion applies equality check predicate on the "form_version" field. It's identical to FormVersionEQ.
func FormVersion(v string) predicate.Process {
	return predicate.Process(sql.FieldEQ(FieldFormVersion, v))
}

// ModuleCode applies equality check predicate on the "module_code" field. It's identical to ModuleCodeEQ.
func ModuleCode(v string) predicate.Process {
	return predicate.Process(sql.FieldEQ(FieldModuleCode, v))
}

// Category applies equality check predicate on the "category" field. It's identical to CategoryEQ.
func Category(v string) predicate.Process {
	return predicate.Process(sql.FieldEQ(FieldCategory, v))
}

// FlowStatus applies equality check predicate on the "flow_status" field. It's identical to FlowStatusEQ.
func FlowStatus(v string) predicate.Process {
	return predicate.Process(sql.FieldEQ(FieldFlowStatus, v))
}

// IsDraft applies equality check predicate on the "is_draft" field. It's identical to IsDraftEQ.
func IsDraft(v bool) predicate.Process {
	return predicate.Process(sql.FieldEQ(FieldIsDraft, v))
}

// IsTerminated applies equality check predicate on the "is_terminated" field. It's identical to IsTerminatedEQ.
func IsTerminated(v bool) predicate.Process {
	return predicate.Process(sql.FieldEQ(FieldIsTerminated, v))
}

// IsSuspended applies equality check predicate on the "is_suspended" field. It's identical to IsSuspendedEQ.
func IsSuspended(v bool) predicate.Process {
	return predicate.Process(sql.FieldEQ(FieldIsSuspended, v))
}

// SuspendReason applies equality check predicate on the "suspend_reason" field. It's identical to SuspendReasonEQ.
func SuspendReason(v string) predicate.Process {
	return predicate.Process(sql.FieldEQ(FieldSuspendReason, v))
}

// StartTime applies equality check predicate on the "start_time" field. It's identical to StartTimeEQ.
func StartTime(v time.Time) predicate.Process {
	return predicate.Process(sql.FieldEQ(FieldStartTime, v))
}

// EndTime applies equality check predicate on the "end_time" field. It's identical to EndTimeEQ.
func EndTime(v time.Time) predicate.Process {
	return predicate.Process(sql.FieldEQ(FieldEndTime, v))
}

// DueTime applies equality check predicate on the "due_time" field. It's identical to DueTimeEQ.
func DueTime(v time.Time) predicate.Process {
	return predicate.Process(sql.FieldEQ(FieldDueTime, v))
}

// Duration applies equality check predicate on the "duration" field. It's identical to DurationEQ.
func Duration(v int) predicate.Process {
	return predicate.Process(sql.FieldEQ(FieldDuration, v))
}

// Priority applies equality check predicate on the "priority" field. It's identical to PriorityEQ.
func Priority(v int) predicate.Process {
	return predicate.Process(sql.FieldEQ(FieldPriority, v))
}

// IsTimeout applies equality check predicate on the "is_timeout" field. It's identical to IsTimeoutEQ.
func IsTimeout(v bool) predicate.Process {
	return predicate.Process(sql.FieldEQ(FieldIsTimeout, v))
}

// ReminderCount applies equality check predicate on the "reminder_count" field. It's identical to ReminderCountEQ.
func ReminderCount(v int) predicate.Process {
	return predicate.Process(sql.FieldEQ(FieldReminderCount, v))
}

// AllowCancel applies equality check predicate on the "allow_cancel" field. It's identical to AllowCancelEQ.
func AllowCancel(v bool) predicate.Process {
	return predicate.Process(sql.FieldEQ(FieldAllowCancel, v))
}

// AllowUrge applies equality check predicate on the "allow_urge" field. It's identical to AllowUrgeEQ.
func AllowUrge(v bool) predicate.Process {
	return predicate.Process(sql.FieldEQ(FieldAllowUrge, v))
}

// AllowDelegate applies equality check predicate on the "allow_delegate" field. It's identical to AllowDelegateEQ.
func AllowDelegate(v bool) predicate.Process {
	return predicate.Process(sql.FieldEQ(FieldAllowDelegate, v))
}

// AllowTransfer applies equality check predicate on the "allow_transfer" field. It's identical to AllowTransferEQ.
func AllowTransfer(v bool) predicate.Process {
	return predicate.Process(sql.FieldEQ(FieldAllowTransfer, v))
}

// IsDraftEnabled applies equality check predicate on the "is_draft_enabled" field. It's identical to IsDraftEnabledEQ.
func IsDraftEnabled(v bool) predicate.Process {
	return predicate.Process(sql.FieldEQ(FieldIsDraftEnabled, v))
}

// IsAutoStart applies equality check predicate on the "is_auto_start" field. It's identical to IsAutoStartEQ.
func IsAutoStart(v bool) predicate.Process {
	return predicate.Process(sql.FieldEQ(FieldIsAutoStart, v))
}

// StrictMode applies equality check predicate on the "strict_mode" field. It's identical to StrictModeEQ.
func StrictMode(v bool) predicate.Process {
	return predicate.Process(sql.FieldEQ(FieldStrictMode, v))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v string) predicate.Process {
	return predicate.Process(sql.FieldEQ(FieldTenantID, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v string) predicate.Process {
	return predicate.Process(sql.FieldEQ(FieldCreatedBy, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v string) predicate.Process {
	return predicate.Process(sql.FieldEQ(FieldUpdatedBy, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v int64) predicate.Process {
	return predicate.Process(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v int64) predicate.Process {
	return predicate.Process(sql.FieldEQ(FieldUpdatedAt, v))
}

// ProcessKey applies equality check predicate on the "process_key" field. It's identical to ProcessKeyEQ.
func ProcessKey(v string) predicate.Process {
	return predicate.Process(sql.FieldEQ(FieldProcessKey, v))
}

// Initiator applies equality check predicate on the "initiator" field. It's identical to InitiatorEQ.
func Initiator(v string) predicate.Process {
	return predicate.Process(sql.FieldEQ(FieldInitiator, v))
}

// InitiatorDept applies equality check predicate on the "initiator_dept" field. It's identical to InitiatorDeptEQ.
func InitiatorDept(v string) predicate.Process {
	return predicate.Process(sql.FieldEQ(FieldInitiatorDept, v))
}

// ProcessCode applies equality check predicate on the "process_code" field. It's identical to ProcessCodeEQ.
func ProcessCode(v string) predicate.Process {
	return predicate.Process(sql.FieldEQ(FieldProcessCode, v))
}

// CurrentNode applies equality check predicate on the "current_node" field. It's identical to CurrentNodeEQ.
func CurrentNode(v string) predicate.Process {
	return predicate.Process(sql.FieldEQ(FieldCurrentNode, v))
}

// UrgeCount applies equality check predicate on the "urge_count" field. It's identical to UrgeCountEQ.
func UrgeCount(v int) predicate.Process {
	return predicate.Process(sql.FieldEQ(FieldUrgeCount, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int) predicate.Process {
	return predicate.Process(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int) predicate.Process {
	return predicate.Process(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int) predicate.Process {
	return predicate.Process(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int) predicate.Process {
	return predicate.Process(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int) predicate.Process {
	return predicate.Process(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int) predicate.Process {
	return predicate.Process(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int) predicate.Process {
	return predicate.Process(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int) predicate.Process {
	return predicate.Process(sql.FieldLTE(FieldStatus, v))
}

// ProcessIDEQ applies the EQ predicate on the "process_id" field.
func ProcessIDEQ(v string) predicate.Process {
	return predicate.Process(sql.FieldEQ(FieldProcessID, v))
}

// ProcessIDNEQ applies the NEQ predicate on the "process_id" field.
func ProcessIDNEQ(v string) predicate.Process {
	return predicate.Process(sql.FieldNEQ(FieldProcessID, v))
}

// ProcessIDIn applies the In predicate on the "process_id" field.
func ProcessIDIn(vs ...string) predicate.Process {
	return predicate.Process(sql.FieldIn(FieldProcessID, vs...))
}

// ProcessIDNotIn applies the NotIn predicate on the "process_id" field.
func ProcessIDNotIn(vs ...string) predicate.Process {
	return predicate.Process(sql.FieldNotIn(FieldProcessID, vs...))
}

// ProcessIDGT applies the GT predicate on the "process_id" field.
func ProcessIDGT(v string) predicate.Process {
	return predicate.Process(sql.FieldGT(FieldProcessID, v))
}

// ProcessIDGTE applies the GTE predicate on the "process_id" field.
func ProcessIDGTE(v string) predicate.Process {
	return predicate.Process(sql.FieldGTE(FieldProcessID, v))
}

// ProcessIDLT applies the LT predicate on the "process_id" field.
func ProcessIDLT(v string) predicate.Process {
	return predicate.Process(sql.FieldLT(FieldProcessID, v))
}

// ProcessIDLTE applies the LTE predicate on the "process_id" field.
func ProcessIDLTE(v string) predicate.Process {
	return predicate.Process(sql.FieldLTE(FieldProcessID, v))
}

// ProcessIDContains applies the Contains predicate on the "process_id" field.
func ProcessIDContains(v string) predicate.Process {
	return predicate.Process(sql.FieldContains(FieldProcessID, v))
}

// ProcessIDHasPrefix applies the HasPrefix predicate on the "process_id" field.
func ProcessIDHasPrefix(v string) predicate.Process {
	return predicate.Process(sql.FieldHasPrefix(FieldProcessID, v))
}

// ProcessIDHasSuffix applies the HasSuffix predicate on the "process_id" field.
func ProcessIDHasSuffix(v string) predicate.Process {
	return predicate.Process(sql.FieldHasSuffix(FieldProcessID, v))
}

// ProcessIDEqualFold applies the EqualFold predicate on the "process_id" field.
func ProcessIDEqualFold(v string) predicate.Process {
	return predicate.Process(sql.FieldEqualFold(FieldProcessID, v))
}

// ProcessIDContainsFold applies the ContainsFold predicate on the "process_id" field.
func ProcessIDContainsFold(v string) predicate.Process {
	return predicate.Process(sql.FieldContainsFold(FieldProcessID, v))
}

// TemplateIDEQ applies the EQ predicate on the "template_id" field.
func TemplateIDEQ(v string) predicate.Process {
	return predicate.Process(sql.FieldEQ(FieldTemplateID, v))
}

// TemplateIDNEQ applies the NEQ predicate on the "template_id" field.
func TemplateIDNEQ(v string) predicate.Process {
	return predicate.Process(sql.FieldNEQ(FieldTemplateID, v))
}

// TemplateIDIn applies the In predicate on the "template_id" field.
func TemplateIDIn(vs ...string) predicate.Process {
	return predicate.Process(sql.FieldIn(FieldTemplateID, vs...))
}

// TemplateIDNotIn applies the NotIn predicate on the "template_id" field.
func TemplateIDNotIn(vs ...string) predicate.Process {
	return predicate.Process(sql.FieldNotIn(FieldTemplateID, vs...))
}

// TemplateIDGT applies the GT predicate on the "template_id" field.
func TemplateIDGT(v string) predicate.Process {
	return predicate.Process(sql.FieldGT(FieldTemplateID, v))
}

// TemplateIDGTE applies the GTE predicate on the "template_id" field.
func TemplateIDGTE(v string) predicate.Process {
	return predicate.Process(sql.FieldGTE(FieldTemplateID, v))
}

// TemplateIDLT applies the LT predicate on the "template_id" field.
func TemplateIDLT(v string) predicate.Process {
	return predicate.Process(sql.FieldLT(FieldTemplateID, v))
}

// TemplateIDLTE applies the LTE predicate on the "template_id" field.
func TemplateIDLTE(v string) predicate.Process {
	return predicate.Process(sql.FieldLTE(FieldTemplateID, v))
}

// TemplateIDContains applies the Contains predicate on the "template_id" field.
func TemplateIDContains(v string) predicate.Process {
	return predicate.Process(sql.FieldContains(FieldTemplateID, v))
}

// TemplateIDHasPrefix applies the HasPrefix predicate on the "template_id" field.
func TemplateIDHasPrefix(v string) predicate.Process {
	return predicate.Process(sql.FieldHasPrefix(FieldTemplateID, v))
}

// TemplateIDHasSuffix applies the HasSuffix predicate on the "template_id" field.
func TemplateIDHasSuffix(v string) predicate.Process {
	return predicate.Process(sql.FieldHasSuffix(FieldTemplateID, v))
}

// TemplateIDEqualFold applies the EqualFold predicate on the "template_id" field.
func TemplateIDEqualFold(v string) predicate.Process {
	return predicate.Process(sql.FieldEqualFold(FieldTemplateID, v))
}

// TemplateIDContainsFold applies the ContainsFold predicate on the "template_id" field.
func TemplateIDContainsFold(v string) predicate.Process {
	return predicate.Process(sql.FieldContainsFold(FieldTemplateID, v))
}

// BusinessKeyEQ applies the EQ predicate on the "business_key" field.
func BusinessKeyEQ(v string) predicate.Process {
	return predicate.Process(sql.FieldEQ(FieldBusinessKey, v))
}

// BusinessKeyNEQ applies the NEQ predicate on the "business_key" field.
func BusinessKeyNEQ(v string) predicate.Process {
	return predicate.Process(sql.FieldNEQ(FieldBusinessKey, v))
}

// BusinessKeyIn applies the In predicate on the "business_key" field.
func BusinessKeyIn(vs ...string) predicate.Process {
	return predicate.Process(sql.FieldIn(FieldBusinessKey, vs...))
}

// BusinessKeyNotIn applies the NotIn predicate on the "business_key" field.
func BusinessKeyNotIn(vs ...string) predicate.Process {
	return predicate.Process(sql.FieldNotIn(FieldBusinessKey, vs...))
}

// BusinessKeyGT applies the GT predicate on the "business_key" field.
func BusinessKeyGT(v string) predicate.Process {
	return predicate.Process(sql.FieldGT(FieldBusinessKey, v))
}

// BusinessKeyGTE applies the GTE predicate on the "business_key" field.
func BusinessKeyGTE(v string) predicate.Process {
	return predicate.Process(sql.FieldGTE(FieldBusinessKey, v))
}

// BusinessKeyLT applies the LT predicate on the "business_key" field.
func BusinessKeyLT(v string) predicate.Process {
	return predicate.Process(sql.FieldLT(FieldBusinessKey, v))
}

// BusinessKeyLTE applies the LTE predicate on the "business_key" field.
func BusinessKeyLTE(v string) predicate.Process {
	return predicate.Process(sql.FieldLTE(FieldBusinessKey, v))
}

// BusinessKeyContains applies the Contains predicate on the "business_key" field.
func BusinessKeyContains(v string) predicate.Process {
	return predicate.Process(sql.FieldContains(FieldBusinessKey, v))
}

// BusinessKeyHasPrefix applies the HasPrefix predicate on the "business_key" field.
func BusinessKeyHasPrefix(v string) predicate.Process {
	return predicate.Process(sql.FieldHasPrefix(FieldBusinessKey, v))
}

// BusinessKeyHasSuffix applies the HasSuffix predicate on the "business_key" field.
func BusinessKeyHasSuffix(v string) predicate.Process {
	return predicate.Process(sql.FieldHasSuffix(FieldBusinessKey, v))
}

// BusinessKeyEqualFold applies the EqualFold predicate on the "business_key" field.
func BusinessKeyEqualFold(v string) predicate.Process {
	return predicate.Process(sql.FieldEqualFold(FieldBusinessKey, v))
}

// BusinessKeyContainsFold applies the ContainsFold predicate on the "business_key" field.
func BusinessKeyContainsFold(v string) predicate.Process {
	return predicate.Process(sql.FieldContainsFold(FieldBusinessKey, v))
}

// FormCodeEQ applies the EQ predicate on the "form_code" field.
func FormCodeEQ(v string) predicate.Process {
	return predicate.Process(sql.FieldEQ(FieldFormCode, v))
}

// FormCodeNEQ applies the NEQ predicate on the "form_code" field.
func FormCodeNEQ(v string) predicate.Process {
	return predicate.Process(sql.FieldNEQ(FieldFormCode, v))
}

// FormCodeIn applies the In predicate on the "form_code" field.
func FormCodeIn(vs ...string) predicate.Process {
	return predicate.Process(sql.FieldIn(FieldFormCode, vs...))
}

// FormCodeNotIn applies the NotIn predicate on the "form_code" field.
func FormCodeNotIn(vs ...string) predicate.Process {
	return predicate.Process(sql.FieldNotIn(FieldFormCode, vs...))
}

// FormCodeGT applies the GT predicate on the "form_code" field.
func FormCodeGT(v string) predicate.Process {
	return predicate.Process(sql.FieldGT(FieldFormCode, v))
}

// FormCodeGTE applies the GTE predicate on the "form_code" field.
func FormCodeGTE(v string) predicate.Process {
	return predicate.Process(sql.FieldGTE(FieldFormCode, v))
}

// FormCodeLT applies the LT predicate on the "form_code" field.
func FormCodeLT(v string) predicate.Process {
	return predicate.Process(sql.FieldLT(FieldFormCode, v))
}

// FormCodeLTE applies the LTE predicate on the "form_code" field.
func FormCodeLTE(v string) predicate.Process {
	return predicate.Process(sql.FieldLTE(FieldFormCode, v))
}

// FormCodeContains applies the Contains predicate on the "form_code" field.
func FormCodeContains(v string) predicate.Process {
	return predicate.Process(sql.FieldContains(FieldFormCode, v))
}

// FormCodeHasPrefix applies the HasPrefix predicate on the "form_code" field.
func FormCodeHasPrefix(v string) predicate.Process {
	return predicate.Process(sql.FieldHasPrefix(FieldFormCode, v))
}

// FormCodeHasSuffix applies the HasSuffix predicate on the "form_code" field.
func FormCodeHasSuffix(v string) predicate.Process {
	return predicate.Process(sql.FieldHasSuffix(FieldFormCode, v))
}

// FormCodeEqualFold applies the EqualFold predicate on the "form_code" field.
func FormCodeEqualFold(v string) predicate.Process {
	return predicate.Process(sql.FieldEqualFold(FieldFormCode, v))
}

// FormCodeContainsFold applies the ContainsFold predicate on the "form_code" field.
func FormCodeContainsFold(v string) predicate.Process {
	return predicate.Process(sql.FieldContainsFold(FieldFormCode, v))
}

// FormVersionEQ applies the EQ predicate on the "form_version" field.
func FormVersionEQ(v string) predicate.Process {
	return predicate.Process(sql.FieldEQ(FieldFormVersion, v))
}

// FormVersionNEQ applies the NEQ predicate on the "form_version" field.
func FormVersionNEQ(v string) predicate.Process {
	return predicate.Process(sql.FieldNEQ(FieldFormVersion, v))
}

// FormVersionIn applies the In predicate on the "form_version" field.
func FormVersionIn(vs ...string) predicate.Process {
	return predicate.Process(sql.FieldIn(FieldFormVersion, vs...))
}

// FormVersionNotIn applies the NotIn predicate on the "form_version" field.
func FormVersionNotIn(vs ...string) predicate.Process {
	return predicate.Process(sql.FieldNotIn(FieldFormVersion, vs...))
}

// FormVersionGT applies the GT predicate on the "form_version" field.
func FormVersionGT(v string) predicate.Process {
	return predicate.Process(sql.FieldGT(FieldFormVersion, v))
}

// FormVersionGTE applies the GTE predicate on the "form_version" field.
func FormVersionGTE(v string) predicate.Process {
	return predicate.Process(sql.FieldGTE(FieldFormVersion, v))
}

// FormVersionLT applies the LT predicate on the "form_version" field.
func FormVersionLT(v string) predicate.Process {
	return predicate.Process(sql.FieldLT(FieldFormVersion, v))
}

// FormVersionLTE applies the LTE predicate on the "form_version" field.
func FormVersionLTE(v string) predicate.Process {
	return predicate.Process(sql.FieldLTE(FieldFormVersion, v))
}

// FormVersionContains applies the Contains predicate on the "form_version" field.
func FormVersionContains(v string) predicate.Process {
	return predicate.Process(sql.FieldContains(FieldFormVersion, v))
}

// FormVersionHasPrefix applies the HasPrefix predicate on the "form_version" field.
func FormVersionHasPrefix(v string) predicate.Process {
	return predicate.Process(sql.FieldHasPrefix(FieldFormVersion, v))
}

// FormVersionHasSuffix applies the HasSuffix predicate on the "form_version" field.
func FormVersionHasSuffix(v string) predicate.Process {
	return predicate.Process(sql.FieldHasSuffix(FieldFormVersion, v))
}

// FormVersionIsNil applies the IsNil predicate on the "form_version" field.
func FormVersionIsNil() predicate.Process {
	return predicate.Process(sql.FieldIsNull(FieldFormVersion))
}

// FormVersionNotNil applies the NotNil predicate on the "form_version" field.
func FormVersionNotNil() predicate.Process {
	return predicate.Process(sql.FieldNotNull(FieldFormVersion))
}

// FormVersionEqualFold applies the EqualFold predicate on the "form_version" field.
func FormVersionEqualFold(v string) predicate.Process {
	return predicate.Process(sql.FieldEqualFold(FieldFormVersion, v))
}

// FormVersionContainsFold applies the ContainsFold predicate on the "form_version" field.
func FormVersionContainsFold(v string) predicate.Process {
	return predicate.Process(sql.FieldContainsFold(FieldFormVersion, v))
}

// FormConfigIsNil applies the IsNil predicate on the "form_config" field.
func FormConfigIsNil() predicate.Process {
	return predicate.Process(sql.FieldIsNull(FieldFormConfig))
}

// FormConfigNotNil applies the NotNil predicate on the "form_config" field.
func FormConfigNotNil() predicate.Process {
	return predicate.Process(sql.FieldNotNull(FieldFormConfig))
}

// FormPermissionsIsNil applies the IsNil predicate on the "form_permissions" field.
func FormPermissionsIsNil() predicate.Process {
	return predicate.Process(sql.FieldIsNull(FieldFormPermissions))
}

// FormPermissionsNotNil applies the NotNil predicate on the "form_permissions" field.
func FormPermissionsNotNil() predicate.Process {
	return predicate.Process(sql.FieldNotNull(FieldFormPermissions))
}

// FieldPermissionsIsNil applies the IsNil predicate on the "field_permissions" field.
func FieldPermissionsIsNil() predicate.Process {
	return predicate.Process(sql.FieldIsNull(FieldFieldPermissions))
}

// FieldPermissionsNotNil applies the NotNil predicate on the "field_permissions" field.
func FieldPermissionsNotNil() predicate.Process {
	return predicate.Process(sql.FieldNotNull(FieldFieldPermissions))
}

// BusinessTagsIsNil applies the IsNil predicate on the "business_tags" field.
func BusinessTagsIsNil() predicate.Process {
	return predicate.Process(sql.FieldIsNull(FieldBusinessTags))
}

// BusinessTagsNotNil applies the NotNil predicate on the "business_tags" field.
func BusinessTagsNotNil() predicate.Process {
	return predicate.Process(sql.FieldNotNull(FieldBusinessTags))
}

// ModuleCodeEQ applies the EQ predicate on the "module_code" field.
func ModuleCodeEQ(v string) predicate.Process {
	return predicate.Process(sql.FieldEQ(FieldModuleCode, v))
}

// ModuleCodeNEQ applies the NEQ predicate on the "module_code" field.
func ModuleCodeNEQ(v string) predicate.Process {
	return predicate.Process(sql.FieldNEQ(FieldModuleCode, v))
}

// ModuleCodeIn applies the In predicate on the "module_code" field.
func ModuleCodeIn(vs ...string) predicate.Process {
	return predicate.Process(sql.FieldIn(FieldModuleCode, vs...))
}

// ModuleCodeNotIn applies the NotIn predicate on the "module_code" field.
func ModuleCodeNotIn(vs ...string) predicate.Process {
	return predicate.Process(sql.FieldNotIn(FieldModuleCode, vs...))
}

// ModuleCodeGT applies the GT predicate on the "module_code" field.
func ModuleCodeGT(v string) predicate.Process {
	return predicate.Process(sql.FieldGT(FieldModuleCode, v))
}

// ModuleCodeGTE applies the GTE predicate on the "module_code" field.
func ModuleCodeGTE(v string) predicate.Process {
	return predicate.Process(sql.FieldGTE(FieldModuleCode, v))
}

// ModuleCodeLT applies the LT predicate on the "module_code" field.
func ModuleCodeLT(v string) predicate.Process {
	return predicate.Process(sql.FieldLT(FieldModuleCode, v))
}

// ModuleCodeLTE applies the LTE predicate on the "module_code" field.
func ModuleCodeLTE(v string) predicate.Process {
	return predicate.Process(sql.FieldLTE(FieldModuleCode, v))
}

// ModuleCodeContains applies the Contains predicate on the "module_code" field.
func ModuleCodeContains(v string) predicate.Process {
	return predicate.Process(sql.FieldContains(FieldModuleCode, v))
}

// ModuleCodeHasPrefix applies the HasPrefix predicate on the "module_code" field.
func ModuleCodeHasPrefix(v string) predicate.Process {
	return predicate.Process(sql.FieldHasPrefix(FieldModuleCode, v))
}

// ModuleCodeHasSuffix applies the HasSuffix predicate on the "module_code" field.
func ModuleCodeHasSuffix(v string) predicate.Process {
	return predicate.Process(sql.FieldHasSuffix(FieldModuleCode, v))
}

// ModuleCodeEqualFold applies the EqualFold predicate on the "module_code" field.
func ModuleCodeEqualFold(v string) predicate.Process {
	return predicate.Process(sql.FieldEqualFold(FieldModuleCode, v))
}

// ModuleCodeContainsFold applies the ContainsFold predicate on the "module_code" field.
func ModuleCodeContainsFold(v string) predicate.Process {
	return predicate.Process(sql.FieldContainsFold(FieldModuleCode, v))
}

// CategoryEQ applies the EQ predicate on the "category" field.
func CategoryEQ(v string) predicate.Process {
	return predicate.Process(sql.FieldEQ(FieldCategory, v))
}

// CategoryNEQ applies the NEQ predicate on the "category" field.
func CategoryNEQ(v string) predicate.Process {
	return predicate.Process(sql.FieldNEQ(FieldCategory, v))
}

// CategoryIn applies the In predicate on the "category" field.
func CategoryIn(vs ...string) predicate.Process {
	return predicate.Process(sql.FieldIn(FieldCategory, vs...))
}

// CategoryNotIn applies the NotIn predicate on the "category" field.
func CategoryNotIn(vs ...string) predicate.Process {
	return predicate.Process(sql.FieldNotIn(FieldCategory, vs...))
}

// CategoryGT applies the GT predicate on the "category" field.
func CategoryGT(v string) predicate.Process {
	return predicate.Process(sql.FieldGT(FieldCategory, v))
}

// CategoryGTE applies the GTE predicate on the "category" field.
func CategoryGTE(v string) predicate.Process {
	return predicate.Process(sql.FieldGTE(FieldCategory, v))
}

// CategoryLT applies the LT predicate on the "category" field.
func CategoryLT(v string) predicate.Process {
	return predicate.Process(sql.FieldLT(FieldCategory, v))
}

// CategoryLTE applies the LTE predicate on the "category" field.
func CategoryLTE(v string) predicate.Process {
	return predicate.Process(sql.FieldLTE(FieldCategory, v))
}

// CategoryContains applies the Contains predicate on the "category" field.
func CategoryContains(v string) predicate.Process {
	return predicate.Process(sql.FieldContains(FieldCategory, v))
}

// CategoryHasPrefix applies the HasPrefix predicate on the "category" field.
func CategoryHasPrefix(v string) predicate.Process {
	return predicate.Process(sql.FieldHasPrefix(FieldCategory, v))
}

// CategoryHasSuffix applies the HasSuffix predicate on the "category" field.
func CategoryHasSuffix(v string) predicate.Process {
	return predicate.Process(sql.FieldHasSuffix(FieldCategory, v))
}

// CategoryIsNil applies the IsNil predicate on the "category" field.
func CategoryIsNil() predicate.Process {
	return predicate.Process(sql.FieldIsNull(FieldCategory))
}

// CategoryNotNil applies the NotNil predicate on the "category" field.
func CategoryNotNil() predicate.Process {
	return predicate.Process(sql.FieldNotNull(FieldCategory))
}

// CategoryEqualFold applies the EqualFold predicate on the "category" field.
func CategoryEqualFold(v string) predicate.Process {
	return predicate.Process(sql.FieldEqualFold(FieldCategory, v))
}

// CategoryContainsFold applies the ContainsFold predicate on the "category" field.
func CategoryContainsFold(v string) predicate.Process {
	return predicate.Process(sql.FieldContainsFold(FieldCategory, v))
}

// FlowStatusEQ applies the EQ predicate on the "flow_status" field.
func FlowStatusEQ(v string) predicate.Process {
	return predicate.Process(sql.FieldEQ(FieldFlowStatus, v))
}

// FlowStatusNEQ applies the NEQ predicate on the "flow_status" field.
func FlowStatusNEQ(v string) predicate.Process {
	return predicate.Process(sql.FieldNEQ(FieldFlowStatus, v))
}

// FlowStatusIn applies the In predicate on the "flow_status" field.
func FlowStatusIn(vs ...string) predicate.Process {
	return predicate.Process(sql.FieldIn(FieldFlowStatus, vs...))
}

// FlowStatusNotIn applies the NotIn predicate on the "flow_status" field.
func FlowStatusNotIn(vs ...string) predicate.Process {
	return predicate.Process(sql.FieldNotIn(FieldFlowStatus, vs...))
}

// FlowStatusGT applies the GT predicate on the "flow_status" field.
func FlowStatusGT(v string) predicate.Process {
	return predicate.Process(sql.FieldGT(FieldFlowStatus, v))
}

// FlowStatusGTE applies the GTE predicate on the "flow_status" field.
func FlowStatusGTE(v string) predicate.Process {
	return predicate.Process(sql.FieldGTE(FieldFlowStatus, v))
}

// FlowStatusLT applies the LT predicate on the "flow_status" field.
func FlowStatusLT(v string) predicate.Process {
	return predicate.Process(sql.FieldLT(FieldFlowStatus, v))
}

// FlowStatusLTE applies the LTE predicate on the "flow_status" field.
func FlowStatusLTE(v string) predicate.Process {
	return predicate.Process(sql.FieldLTE(FieldFlowStatus, v))
}

// FlowStatusContains applies the Contains predicate on the "flow_status" field.
func FlowStatusContains(v string) predicate.Process {
	return predicate.Process(sql.FieldContains(FieldFlowStatus, v))
}

// FlowStatusHasPrefix applies the HasPrefix predicate on the "flow_status" field.
func FlowStatusHasPrefix(v string) predicate.Process {
	return predicate.Process(sql.FieldHasPrefix(FieldFlowStatus, v))
}

// FlowStatusHasSuffix applies the HasSuffix predicate on the "flow_status" field.
func FlowStatusHasSuffix(v string) predicate.Process {
	return predicate.Process(sql.FieldHasSuffix(FieldFlowStatus, v))
}

// FlowStatusIsNil applies the IsNil predicate on the "flow_status" field.
func FlowStatusIsNil() predicate.Process {
	return predicate.Process(sql.FieldIsNull(FieldFlowStatus))
}

// FlowStatusNotNil applies the NotNil predicate on the "flow_status" field.
func FlowStatusNotNil() predicate.Process {
	return predicate.Process(sql.FieldNotNull(FieldFlowStatus))
}

// FlowStatusEqualFold applies the EqualFold predicate on the "flow_status" field.
func FlowStatusEqualFold(v string) predicate.Process {
	return predicate.Process(sql.FieldEqualFold(FieldFlowStatus, v))
}

// FlowStatusContainsFold applies the ContainsFold predicate on the "flow_status" field.
func FlowStatusContainsFold(v string) predicate.Process {
	return predicate.Process(sql.FieldContainsFold(FieldFlowStatus, v))
}

// FlowVariablesIsNil applies the IsNil predicate on the "flow_variables" field.
func FlowVariablesIsNil() predicate.Process {
	return predicate.Process(sql.FieldIsNull(FieldFlowVariables))
}

// FlowVariablesNotNil applies the NotNil predicate on the "flow_variables" field.
func FlowVariablesNotNil() predicate.Process {
	return predicate.Process(sql.FieldNotNull(FieldFlowVariables))
}

// IsDraftEQ applies the EQ predicate on the "is_draft" field.
func IsDraftEQ(v bool) predicate.Process {
	return predicate.Process(sql.FieldEQ(FieldIsDraft, v))
}

// IsDraftNEQ applies the NEQ predicate on the "is_draft" field.
func IsDraftNEQ(v bool) predicate.Process {
	return predicate.Process(sql.FieldNEQ(FieldIsDraft, v))
}

// IsTerminatedEQ applies the EQ predicate on the "is_terminated" field.
func IsTerminatedEQ(v bool) predicate.Process {
	return predicate.Process(sql.FieldEQ(FieldIsTerminated, v))
}

// IsTerminatedNEQ applies the NEQ predicate on the "is_terminated" field.
func IsTerminatedNEQ(v bool) predicate.Process {
	return predicate.Process(sql.FieldNEQ(FieldIsTerminated, v))
}

// IsSuspendedEQ applies the EQ predicate on the "is_suspended" field.
func IsSuspendedEQ(v bool) predicate.Process {
	return predicate.Process(sql.FieldEQ(FieldIsSuspended, v))
}

// IsSuspendedNEQ applies the NEQ predicate on the "is_suspended" field.
func IsSuspendedNEQ(v bool) predicate.Process {
	return predicate.Process(sql.FieldNEQ(FieldIsSuspended, v))
}

// SuspendReasonEQ applies the EQ predicate on the "suspend_reason" field.
func SuspendReasonEQ(v string) predicate.Process {
	return predicate.Process(sql.FieldEQ(FieldSuspendReason, v))
}

// SuspendReasonNEQ applies the NEQ predicate on the "suspend_reason" field.
func SuspendReasonNEQ(v string) predicate.Process {
	return predicate.Process(sql.FieldNEQ(FieldSuspendReason, v))
}

// SuspendReasonIn applies the In predicate on the "suspend_reason" field.
func SuspendReasonIn(vs ...string) predicate.Process {
	return predicate.Process(sql.FieldIn(FieldSuspendReason, vs...))
}

// SuspendReasonNotIn applies the NotIn predicate on the "suspend_reason" field.
func SuspendReasonNotIn(vs ...string) predicate.Process {
	return predicate.Process(sql.FieldNotIn(FieldSuspendReason, vs...))
}

// SuspendReasonGT applies the GT predicate on the "suspend_reason" field.
func SuspendReasonGT(v string) predicate.Process {
	return predicate.Process(sql.FieldGT(FieldSuspendReason, v))
}

// SuspendReasonGTE applies the GTE predicate on the "suspend_reason" field.
func SuspendReasonGTE(v string) predicate.Process {
	return predicate.Process(sql.FieldGTE(FieldSuspendReason, v))
}

// SuspendReasonLT applies the LT predicate on the "suspend_reason" field.
func SuspendReasonLT(v string) predicate.Process {
	return predicate.Process(sql.FieldLT(FieldSuspendReason, v))
}

// SuspendReasonLTE applies the LTE predicate on the "suspend_reason" field.
func SuspendReasonLTE(v string) predicate.Process {
	return predicate.Process(sql.FieldLTE(FieldSuspendReason, v))
}

// SuspendReasonContains applies the Contains predicate on the "suspend_reason" field.
func SuspendReasonContains(v string) predicate.Process {
	return predicate.Process(sql.FieldContains(FieldSuspendReason, v))
}

// SuspendReasonHasPrefix applies the HasPrefix predicate on the "suspend_reason" field.
func SuspendReasonHasPrefix(v string) predicate.Process {
	return predicate.Process(sql.FieldHasPrefix(FieldSuspendReason, v))
}

// SuspendReasonHasSuffix applies the HasSuffix predicate on the "suspend_reason" field.
func SuspendReasonHasSuffix(v string) predicate.Process {
	return predicate.Process(sql.FieldHasSuffix(FieldSuspendReason, v))
}

// SuspendReasonIsNil applies the IsNil predicate on the "suspend_reason" field.
func SuspendReasonIsNil() predicate.Process {
	return predicate.Process(sql.FieldIsNull(FieldSuspendReason))
}

// SuspendReasonNotNil applies the NotNil predicate on the "suspend_reason" field.
func SuspendReasonNotNil() predicate.Process {
	return predicate.Process(sql.FieldNotNull(FieldSuspendReason))
}

// SuspendReasonEqualFold applies the EqualFold predicate on the "suspend_reason" field.
func SuspendReasonEqualFold(v string) predicate.Process {
	return predicate.Process(sql.FieldEqualFold(FieldSuspendReason, v))
}

// SuspendReasonContainsFold applies the ContainsFold predicate on the "suspend_reason" field.
func SuspendReasonContainsFold(v string) predicate.Process {
	return predicate.Process(sql.FieldContainsFold(FieldSuspendReason, v))
}

// StartTimeEQ applies the EQ predicate on the "start_time" field.
func StartTimeEQ(v time.Time) predicate.Process {
	return predicate.Process(sql.FieldEQ(FieldStartTime, v))
}

// StartTimeNEQ applies the NEQ predicate on the "start_time" field.
func StartTimeNEQ(v time.Time) predicate.Process {
	return predicate.Process(sql.FieldNEQ(FieldStartTime, v))
}

// StartTimeIn applies the In predicate on the "start_time" field.
func StartTimeIn(vs ...time.Time) predicate.Process {
	return predicate.Process(sql.FieldIn(FieldStartTime, vs...))
}

// StartTimeNotIn applies the NotIn predicate on the "start_time" field.
func StartTimeNotIn(vs ...time.Time) predicate.Process {
	return predicate.Process(sql.FieldNotIn(FieldStartTime, vs...))
}

// StartTimeGT applies the GT predicate on the "start_time" field.
func StartTimeGT(v time.Time) predicate.Process {
	return predicate.Process(sql.FieldGT(FieldStartTime, v))
}

// StartTimeGTE applies the GTE predicate on the "start_time" field.
func StartTimeGTE(v time.Time) predicate.Process {
	return predicate.Process(sql.FieldGTE(FieldStartTime, v))
}

// StartTimeLT applies the LT predicate on the "start_time" field.
func StartTimeLT(v time.Time) predicate.Process {
	return predicate.Process(sql.FieldLT(FieldStartTime, v))
}

// StartTimeLTE applies the LTE predicate on the "start_time" field.
func StartTimeLTE(v time.Time) predicate.Process {
	return predicate.Process(sql.FieldLTE(FieldStartTime, v))
}

// EndTimeEQ applies the EQ predicate on the "end_time" field.
func EndTimeEQ(v time.Time) predicate.Process {
	return predicate.Process(sql.FieldEQ(FieldEndTime, v))
}

// EndTimeNEQ applies the NEQ predicate on the "end_time" field.
func EndTimeNEQ(v time.Time) predicate.Process {
	return predicate.Process(sql.FieldNEQ(FieldEndTime, v))
}

// EndTimeIn applies the In predicate on the "end_time" field.
func EndTimeIn(vs ...time.Time) predicate.Process {
	return predicate.Process(sql.FieldIn(FieldEndTime, vs...))
}

// EndTimeNotIn applies the NotIn predicate on the "end_time" field.
func EndTimeNotIn(vs ...time.Time) predicate.Process {
	return predicate.Process(sql.FieldNotIn(FieldEndTime, vs...))
}

// EndTimeGT applies the GT predicate on the "end_time" field.
func EndTimeGT(v time.Time) predicate.Process {
	return predicate.Process(sql.FieldGT(FieldEndTime, v))
}

// EndTimeGTE applies the GTE predicate on the "end_time" field.
func EndTimeGTE(v time.Time) predicate.Process {
	return predicate.Process(sql.FieldGTE(FieldEndTime, v))
}

// EndTimeLT applies the LT predicate on the "end_time" field.
func EndTimeLT(v time.Time) predicate.Process {
	return predicate.Process(sql.FieldLT(FieldEndTime, v))
}

// EndTimeLTE applies the LTE predicate on the "end_time" field.
func EndTimeLTE(v time.Time) predicate.Process {
	return predicate.Process(sql.FieldLTE(FieldEndTime, v))
}

// EndTimeIsNil applies the IsNil predicate on the "end_time" field.
func EndTimeIsNil() predicate.Process {
	return predicate.Process(sql.FieldIsNull(FieldEndTime))
}

// EndTimeNotNil applies the NotNil predicate on the "end_time" field.
func EndTimeNotNil() predicate.Process {
	return predicate.Process(sql.FieldNotNull(FieldEndTime))
}

// DueTimeEQ applies the EQ predicate on the "due_time" field.
func DueTimeEQ(v time.Time) predicate.Process {
	return predicate.Process(sql.FieldEQ(FieldDueTime, v))
}

// DueTimeNEQ applies the NEQ predicate on the "due_time" field.
func DueTimeNEQ(v time.Time) predicate.Process {
	return predicate.Process(sql.FieldNEQ(FieldDueTime, v))
}

// DueTimeIn applies the In predicate on the "due_time" field.
func DueTimeIn(vs ...time.Time) predicate.Process {
	return predicate.Process(sql.FieldIn(FieldDueTime, vs...))
}

// DueTimeNotIn applies the NotIn predicate on the "due_time" field.
func DueTimeNotIn(vs ...time.Time) predicate.Process {
	return predicate.Process(sql.FieldNotIn(FieldDueTime, vs...))
}

// DueTimeGT applies the GT predicate on the "due_time" field.
func DueTimeGT(v time.Time) predicate.Process {
	return predicate.Process(sql.FieldGT(FieldDueTime, v))
}

// DueTimeGTE applies the GTE predicate on the "due_time" field.
func DueTimeGTE(v time.Time) predicate.Process {
	return predicate.Process(sql.FieldGTE(FieldDueTime, v))
}

// DueTimeLT applies the LT predicate on the "due_time" field.
func DueTimeLT(v time.Time) predicate.Process {
	return predicate.Process(sql.FieldLT(FieldDueTime, v))
}

// DueTimeLTE applies the LTE predicate on the "due_time" field.
func DueTimeLTE(v time.Time) predicate.Process {
	return predicate.Process(sql.FieldLTE(FieldDueTime, v))
}

// DueTimeIsNil applies the IsNil predicate on the "due_time" field.
func DueTimeIsNil() predicate.Process {
	return predicate.Process(sql.FieldIsNull(FieldDueTime))
}

// DueTimeNotNil applies the NotNil predicate on the "due_time" field.
func DueTimeNotNil() predicate.Process {
	return predicate.Process(sql.FieldNotNull(FieldDueTime))
}

// DurationEQ applies the EQ predicate on the "duration" field.
func DurationEQ(v int) predicate.Process {
	return predicate.Process(sql.FieldEQ(FieldDuration, v))
}

// DurationNEQ applies the NEQ predicate on the "duration" field.
func DurationNEQ(v int) predicate.Process {
	return predicate.Process(sql.FieldNEQ(FieldDuration, v))
}

// DurationIn applies the In predicate on the "duration" field.
func DurationIn(vs ...int) predicate.Process {
	return predicate.Process(sql.FieldIn(FieldDuration, vs...))
}

// DurationNotIn applies the NotIn predicate on the "duration" field.
func DurationNotIn(vs ...int) predicate.Process {
	return predicate.Process(sql.FieldNotIn(FieldDuration, vs...))
}

// DurationGT applies the GT predicate on the "duration" field.
func DurationGT(v int) predicate.Process {
	return predicate.Process(sql.FieldGT(FieldDuration, v))
}

// DurationGTE applies the GTE predicate on the "duration" field.
func DurationGTE(v int) predicate.Process {
	return predicate.Process(sql.FieldGTE(FieldDuration, v))
}

// DurationLT applies the LT predicate on the "duration" field.
func DurationLT(v int) predicate.Process {
	return predicate.Process(sql.FieldLT(FieldDuration, v))
}

// DurationLTE applies the LTE predicate on the "duration" field.
func DurationLTE(v int) predicate.Process {
	return predicate.Process(sql.FieldLTE(FieldDuration, v))
}

// DurationIsNil applies the IsNil predicate on the "duration" field.
func DurationIsNil() predicate.Process {
	return predicate.Process(sql.FieldIsNull(FieldDuration))
}

// DurationNotNil applies the NotNil predicate on the "duration" field.
func DurationNotNil() predicate.Process {
	return predicate.Process(sql.FieldNotNull(FieldDuration))
}

// PriorityEQ applies the EQ predicate on the "priority" field.
func PriorityEQ(v int) predicate.Process {
	return predicate.Process(sql.FieldEQ(FieldPriority, v))
}

// PriorityNEQ applies the NEQ predicate on the "priority" field.
func PriorityNEQ(v int) predicate.Process {
	return predicate.Process(sql.FieldNEQ(FieldPriority, v))
}

// PriorityIn applies the In predicate on the "priority" field.
func PriorityIn(vs ...int) predicate.Process {
	return predicate.Process(sql.FieldIn(FieldPriority, vs...))
}

// PriorityNotIn applies the NotIn predicate on the "priority" field.
func PriorityNotIn(vs ...int) predicate.Process {
	return predicate.Process(sql.FieldNotIn(FieldPriority, vs...))
}

// PriorityGT applies the GT predicate on the "priority" field.
func PriorityGT(v int) predicate.Process {
	return predicate.Process(sql.FieldGT(FieldPriority, v))
}

// PriorityGTE applies the GTE predicate on the "priority" field.
func PriorityGTE(v int) predicate.Process {
	return predicate.Process(sql.FieldGTE(FieldPriority, v))
}

// PriorityLT applies the LT predicate on the "priority" field.
func PriorityLT(v int) predicate.Process {
	return predicate.Process(sql.FieldLT(FieldPriority, v))
}

// PriorityLTE applies the LTE predicate on the "priority" field.
func PriorityLTE(v int) predicate.Process {
	return predicate.Process(sql.FieldLTE(FieldPriority, v))
}

// IsTimeoutEQ applies the EQ predicate on the "is_timeout" field.
func IsTimeoutEQ(v bool) predicate.Process {
	return predicate.Process(sql.FieldEQ(FieldIsTimeout, v))
}

// IsTimeoutNEQ applies the NEQ predicate on the "is_timeout" field.
func IsTimeoutNEQ(v bool) predicate.Process {
	return predicate.Process(sql.FieldNEQ(FieldIsTimeout, v))
}

// ReminderCountEQ applies the EQ predicate on the "reminder_count" field.
func ReminderCountEQ(v int) predicate.Process {
	return predicate.Process(sql.FieldEQ(FieldReminderCount, v))
}

// ReminderCountNEQ applies the NEQ predicate on the "reminder_count" field.
func ReminderCountNEQ(v int) predicate.Process {
	return predicate.Process(sql.FieldNEQ(FieldReminderCount, v))
}

// ReminderCountIn applies the In predicate on the "reminder_count" field.
func ReminderCountIn(vs ...int) predicate.Process {
	return predicate.Process(sql.FieldIn(FieldReminderCount, vs...))
}

// ReminderCountNotIn applies the NotIn predicate on the "reminder_count" field.
func ReminderCountNotIn(vs ...int) predicate.Process {
	return predicate.Process(sql.FieldNotIn(FieldReminderCount, vs...))
}

// ReminderCountGT applies the GT predicate on the "reminder_count" field.
func ReminderCountGT(v int) predicate.Process {
	return predicate.Process(sql.FieldGT(FieldReminderCount, v))
}

// ReminderCountGTE applies the GTE predicate on the "reminder_count" field.
func ReminderCountGTE(v int) predicate.Process {
	return predicate.Process(sql.FieldGTE(FieldReminderCount, v))
}

// ReminderCountLT applies the LT predicate on the "reminder_count" field.
func ReminderCountLT(v int) predicate.Process {
	return predicate.Process(sql.FieldLT(FieldReminderCount, v))
}

// ReminderCountLTE applies the LTE predicate on the "reminder_count" field.
func ReminderCountLTE(v int) predicate.Process {
	return predicate.Process(sql.FieldLTE(FieldReminderCount, v))
}

// AllowCancelEQ applies the EQ predicate on the "allow_cancel" field.
func AllowCancelEQ(v bool) predicate.Process {
	return predicate.Process(sql.FieldEQ(FieldAllowCancel, v))
}

// AllowCancelNEQ applies the NEQ predicate on the "allow_cancel" field.
func AllowCancelNEQ(v bool) predicate.Process {
	return predicate.Process(sql.FieldNEQ(FieldAllowCancel, v))
}

// AllowUrgeEQ applies the EQ predicate on the "allow_urge" field.
func AllowUrgeEQ(v bool) predicate.Process {
	return predicate.Process(sql.FieldEQ(FieldAllowUrge, v))
}

// AllowUrgeNEQ applies the NEQ predicate on the "allow_urge" field.
func AllowUrgeNEQ(v bool) predicate.Process {
	return predicate.Process(sql.FieldNEQ(FieldAllowUrge, v))
}

// AllowDelegateEQ applies the EQ predicate on the "allow_delegate" field.
func AllowDelegateEQ(v bool) predicate.Process {
	return predicate.Process(sql.FieldEQ(FieldAllowDelegate, v))
}

// AllowDelegateNEQ applies the NEQ predicate on the "allow_delegate" field.
func AllowDelegateNEQ(v bool) predicate.Process {
	return predicate.Process(sql.FieldNEQ(FieldAllowDelegate, v))
}

// AllowTransferEQ applies the EQ predicate on the "allow_transfer" field.
func AllowTransferEQ(v bool) predicate.Process {
	return predicate.Process(sql.FieldEQ(FieldAllowTransfer, v))
}

// AllowTransferNEQ applies the NEQ predicate on the "allow_transfer" field.
func AllowTransferNEQ(v bool) predicate.Process {
	return predicate.Process(sql.FieldNEQ(FieldAllowTransfer, v))
}

// IsDraftEnabledEQ applies the EQ predicate on the "is_draft_enabled" field.
func IsDraftEnabledEQ(v bool) predicate.Process {
	return predicate.Process(sql.FieldEQ(FieldIsDraftEnabled, v))
}

// IsDraftEnabledNEQ applies the NEQ predicate on the "is_draft_enabled" field.
func IsDraftEnabledNEQ(v bool) predicate.Process {
	return predicate.Process(sql.FieldNEQ(FieldIsDraftEnabled, v))
}

// IsAutoStartEQ applies the EQ predicate on the "is_auto_start" field.
func IsAutoStartEQ(v bool) predicate.Process {
	return predicate.Process(sql.FieldEQ(FieldIsAutoStart, v))
}

// IsAutoStartNEQ applies the NEQ predicate on the "is_auto_start" field.
func IsAutoStartNEQ(v bool) predicate.Process {
	return predicate.Process(sql.FieldNEQ(FieldIsAutoStart, v))
}

// StrictModeEQ applies the EQ predicate on the "strict_mode" field.
func StrictModeEQ(v bool) predicate.Process {
	return predicate.Process(sql.FieldEQ(FieldStrictMode, v))
}

// StrictModeNEQ applies the NEQ predicate on the "strict_mode" field.
func StrictModeNEQ(v bool) predicate.Process {
	return predicate.Process(sql.FieldNEQ(FieldStrictMode, v))
}

// ExtrasIsNil applies the IsNil predicate on the "extras" field.
func ExtrasIsNil() predicate.Process {
	return predicate.Process(sql.FieldIsNull(FieldExtras))
}

// ExtrasNotNil applies the NotNil predicate on the "extras" field.
func ExtrasNotNil() predicate.Process {
	return predicate.Process(sql.FieldNotNull(FieldExtras))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v string) predicate.Process {
	return predicate.Process(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v string) predicate.Process {
	return predicate.Process(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...string) predicate.Process {
	return predicate.Process(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...string) predicate.Process {
	return predicate.Process(sql.FieldNotIn(FieldTenantID, vs...))
}

// TenantIDGT applies the GT predicate on the "tenant_id" field.
func TenantIDGT(v string) predicate.Process {
	return predicate.Process(sql.FieldGT(FieldTenantID, v))
}

// TenantIDGTE applies the GTE predicate on the "tenant_id" field.
func TenantIDGTE(v string) predicate.Process {
	return predicate.Process(sql.FieldGTE(FieldTenantID, v))
}

// TenantIDLT applies the LT predicate on the "tenant_id" field.
func TenantIDLT(v string) predicate.Process {
	return predicate.Process(sql.FieldLT(FieldTenantID, v))
}

// TenantIDLTE applies the LTE predicate on the "tenant_id" field.
func TenantIDLTE(v string) predicate.Process {
	return predicate.Process(sql.FieldLTE(FieldTenantID, v))
}

// TenantIDContains applies the Contains predicate on the "tenant_id" field.
func TenantIDContains(v string) predicate.Process {
	return predicate.Process(sql.FieldContains(FieldTenantID, v))
}

// TenantIDHasPrefix applies the HasPrefix predicate on the "tenant_id" field.
func TenantIDHasPrefix(v string) predicate.Process {
	return predicate.Process(sql.FieldHasPrefix(FieldTenantID, v))
}

// TenantIDHasSuffix applies the HasSuffix predicate on the "tenant_id" field.
func TenantIDHasSuffix(v string) predicate.Process {
	return predicate.Process(sql.FieldHasSuffix(FieldTenantID, v))
}

// TenantIDIsNil applies the IsNil predicate on the "tenant_id" field.
func TenantIDIsNil() predicate.Process {
	return predicate.Process(sql.FieldIsNull(FieldTenantID))
}

// TenantIDNotNil applies the NotNil predicate on the "tenant_id" field.
func TenantIDNotNil() predicate.Process {
	return predicate.Process(sql.FieldNotNull(FieldTenantID))
}

// TenantIDEqualFold applies the EqualFold predicate on the "tenant_id" field.
func TenantIDEqualFold(v string) predicate.Process {
	return predicate.Process(sql.FieldEqualFold(FieldTenantID, v))
}

// TenantIDContainsFold applies the ContainsFold predicate on the "tenant_id" field.
func TenantIDContainsFold(v string) predicate.Process {
	return predicate.Process(sql.FieldContainsFold(FieldTenantID, v))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v string) predicate.Process {
	return predicate.Process(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v string) predicate.Process {
	return predicate.Process(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...string) predicate.Process {
	return predicate.Process(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...string) predicate.Process {
	return predicate.Process(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v string) predicate.Process {
	return predicate.Process(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v string) predicate.Process {
	return predicate.Process(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v string) predicate.Process {
	return predicate.Process(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v string) predicate.Process {
	return predicate.Process(sql.FieldLTE(FieldCreatedBy, v))
}

// CreatedByContains applies the Contains predicate on the "created_by" field.
func CreatedByContains(v string) predicate.Process {
	return predicate.Process(sql.FieldContains(FieldCreatedBy, v))
}

// CreatedByHasPrefix applies the HasPrefix predicate on the "created_by" field.
func CreatedByHasPrefix(v string) predicate.Process {
	return predicate.Process(sql.FieldHasPrefix(FieldCreatedBy, v))
}

// CreatedByHasSuffix applies the HasSuffix predicate on the "created_by" field.
func CreatedByHasSuffix(v string) predicate.Process {
	return predicate.Process(sql.FieldHasSuffix(FieldCreatedBy, v))
}

// CreatedByIsNil applies the IsNil predicate on the "created_by" field.
func CreatedByIsNil() predicate.Process {
	return predicate.Process(sql.FieldIsNull(FieldCreatedBy))
}

// CreatedByNotNil applies the NotNil predicate on the "created_by" field.
func CreatedByNotNil() predicate.Process {
	return predicate.Process(sql.FieldNotNull(FieldCreatedBy))
}

// CreatedByEqualFold applies the EqualFold predicate on the "created_by" field.
func CreatedByEqualFold(v string) predicate.Process {
	return predicate.Process(sql.FieldEqualFold(FieldCreatedBy, v))
}

// CreatedByContainsFold applies the ContainsFold predicate on the "created_by" field.
func CreatedByContainsFold(v string) predicate.Process {
	return predicate.Process(sql.FieldContainsFold(FieldCreatedBy, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v string) predicate.Process {
	return predicate.Process(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v string) predicate.Process {
	return predicate.Process(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...string) predicate.Process {
	return predicate.Process(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...string) predicate.Process {
	return predicate.Process(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v string) predicate.Process {
	return predicate.Process(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v string) predicate.Process {
	return predicate.Process(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v string) predicate.Process {
	return predicate.Process(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v string) predicate.Process {
	return predicate.Process(sql.FieldLTE(FieldUpdatedBy, v))
}

// UpdatedByContains applies the Contains predicate on the "updated_by" field.
func UpdatedByContains(v string) predicate.Process {
	return predicate.Process(sql.FieldContains(FieldUpdatedBy, v))
}

// UpdatedByHasPrefix applies the HasPrefix predicate on the "updated_by" field.
func UpdatedByHasPrefix(v string) predicate.Process {
	return predicate.Process(sql.FieldHasPrefix(FieldUpdatedBy, v))
}

// UpdatedByHasSuffix applies the HasSuffix predicate on the "updated_by" field.
func UpdatedByHasSuffix(v string) predicate.Process {
	return predicate.Process(sql.FieldHasSuffix(FieldUpdatedBy, v))
}

// UpdatedByIsNil applies the IsNil predicate on the "updated_by" field.
func UpdatedByIsNil() predicate.Process {
	return predicate.Process(sql.FieldIsNull(FieldUpdatedBy))
}

// UpdatedByNotNil applies the NotNil predicate on the "updated_by" field.
func UpdatedByNotNil() predicate.Process {
	return predicate.Process(sql.FieldNotNull(FieldUpdatedBy))
}

// UpdatedByEqualFold applies the EqualFold predicate on the "updated_by" field.
func UpdatedByEqualFold(v string) predicate.Process {
	return predicate.Process(sql.FieldEqualFold(FieldUpdatedBy, v))
}

// UpdatedByContainsFold applies the ContainsFold predicate on the "updated_by" field.
func UpdatedByContainsFold(v string) predicate.Process {
	return predicate.Process(sql.FieldContainsFold(FieldUpdatedBy, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v int64) predicate.Process {
	return predicate.Process(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v int64) predicate.Process {
	return predicate.Process(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...int64) predicate.Process {
	return predicate.Process(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...int64) predicate.Process {
	return predicate.Process(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v int64) predicate.Process {
	return predicate.Process(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v int64) predicate.Process {
	return predicate.Process(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v int64) predicate.Process {
	return predicate.Process(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v int64) predicate.Process {
	return predicate.Process(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.Process {
	return predicate.Process(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.Process {
	return predicate.Process(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v int64) predicate.Process {
	return predicate.Process(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v int64) predicate.Process {
	return predicate.Process(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...int64) predicate.Process {
	return predicate.Process(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...int64) predicate.Process {
	return predicate.Process(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v int64) predicate.Process {
	return predicate.Process(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v int64) predicate.Process {
	return predicate.Process(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v int64) predicate.Process {
	return predicate.Process(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v int64) predicate.Process {
	return predicate.Process(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.Process {
	return predicate.Process(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.Process {
	return predicate.Process(sql.FieldNotNull(FieldUpdatedAt))
}

// ProcessKeyEQ applies the EQ predicate on the "process_key" field.
func ProcessKeyEQ(v string) predicate.Process {
	return predicate.Process(sql.FieldEQ(FieldProcessKey, v))
}

// ProcessKeyNEQ applies the NEQ predicate on the "process_key" field.
func ProcessKeyNEQ(v string) predicate.Process {
	return predicate.Process(sql.FieldNEQ(FieldProcessKey, v))
}

// ProcessKeyIn applies the In predicate on the "process_key" field.
func ProcessKeyIn(vs ...string) predicate.Process {
	return predicate.Process(sql.FieldIn(FieldProcessKey, vs...))
}

// ProcessKeyNotIn applies the NotIn predicate on the "process_key" field.
func ProcessKeyNotIn(vs ...string) predicate.Process {
	return predicate.Process(sql.FieldNotIn(FieldProcessKey, vs...))
}

// ProcessKeyGT applies the GT predicate on the "process_key" field.
func ProcessKeyGT(v string) predicate.Process {
	return predicate.Process(sql.FieldGT(FieldProcessKey, v))
}

// ProcessKeyGTE applies the GTE predicate on the "process_key" field.
func ProcessKeyGTE(v string) predicate.Process {
	return predicate.Process(sql.FieldGTE(FieldProcessKey, v))
}

// ProcessKeyLT applies the LT predicate on the "process_key" field.
func ProcessKeyLT(v string) predicate.Process {
	return predicate.Process(sql.FieldLT(FieldProcessKey, v))
}

// ProcessKeyLTE applies the LTE predicate on the "process_key" field.
func ProcessKeyLTE(v string) predicate.Process {
	return predicate.Process(sql.FieldLTE(FieldProcessKey, v))
}

// ProcessKeyContains applies the Contains predicate on the "process_key" field.
func ProcessKeyContains(v string) predicate.Process {
	return predicate.Process(sql.FieldContains(FieldProcessKey, v))
}

// ProcessKeyHasPrefix applies the HasPrefix predicate on the "process_key" field.
func ProcessKeyHasPrefix(v string) predicate.Process {
	return predicate.Process(sql.FieldHasPrefix(FieldProcessKey, v))
}

// ProcessKeyHasSuffix applies the HasSuffix predicate on the "process_key" field.
func ProcessKeyHasSuffix(v string) predicate.Process {
	return predicate.Process(sql.FieldHasSuffix(FieldProcessKey, v))
}

// ProcessKeyEqualFold applies the EqualFold predicate on the "process_key" field.
func ProcessKeyEqualFold(v string) predicate.Process {
	return predicate.Process(sql.FieldEqualFold(FieldProcessKey, v))
}

// ProcessKeyContainsFold applies the ContainsFold predicate on the "process_key" field.
func ProcessKeyContainsFold(v string) predicate.Process {
	return predicate.Process(sql.FieldContainsFold(FieldProcessKey, v))
}

// InitiatorEQ applies the EQ predicate on the "initiator" field.
func InitiatorEQ(v string) predicate.Process {
	return predicate.Process(sql.FieldEQ(FieldInitiator, v))
}

// InitiatorNEQ applies the NEQ predicate on the "initiator" field.
func InitiatorNEQ(v string) predicate.Process {
	return predicate.Process(sql.FieldNEQ(FieldInitiator, v))
}

// InitiatorIn applies the In predicate on the "initiator" field.
func InitiatorIn(vs ...string) predicate.Process {
	return predicate.Process(sql.FieldIn(FieldInitiator, vs...))
}

// InitiatorNotIn applies the NotIn predicate on the "initiator" field.
func InitiatorNotIn(vs ...string) predicate.Process {
	return predicate.Process(sql.FieldNotIn(FieldInitiator, vs...))
}

// InitiatorGT applies the GT predicate on the "initiator" field.
func InitiatorGT(v string) predicate.Process {
	return predicate.Process(sql.FieldGT(FieldInitiator, v))
}

// InitiatorGTE applies the GTE predicate on the "initiator" field.
func InitiatorGTE(v string) predicate.Process {
	return predicate.Process(sql.FieldGTE(FieldInitiator, v))
}

// InitiatorLT applies the LT predicate on the "initiator" field.
func InitiatorLT(v string) predicate.Process {
	return predicate.Process(sql.FieldLT(FieldInitiator, v))
}

// InitiatorLTE applies the LTE predicate on the "initiator" field.
func InitiatorLTE(v string) predicate.Process {
	return predicate.Process(sql.FieldLTE(FieldInitiator, v))
}

// InitiatorContains applies the Contains predicate on the "initiator" field.
func InitiatorContains(v string) predicate.Process {
	return predicate.Process(sql.FieldContains(FieldInitiator, v))
}

// InitiatorHasPrefix applies the HasPrefix predicate on the "initiator" field.
func InitiatorHasPrefix(v string) predicate.Process {
	return predicate.Process(sql.FieldHasPrefix(FieldInitiator, v))
}

// InitiatorHasSuffix applies the HasSuffix predicate on the "initiator" field.
func InitiatorHasSuffix(v string) predicate.Process {
	return predicate.Process(sql.FieldHasSuffix(FieldInitiator, v))
}

// InitiatorEqualFold applies the EqualFold predicate on the "initiator" field.
func InitiatorEqualFold(v string) predicate.Process {
	return predicate.Process(sql.FieldEqualFold(FieldInitiator, v))
}

// InitiatorContainsFold applies the ContainsFold predicate on the "initiator" field.
func InitiatorContainsFold(v string) predicate.Process {
	return predicate.Process(sql.FieldContainsFold(FieldInitiator, v))
}

// InitiatorDeptEQ applies the EQ predicate on the "initiator_dept" field.
func InitiatorDeptEQ(v string) predicate.Process {
	return predicate.Process(sql.FieldEQ(FieldInitiatorDept, v))
}

// InitiatorDeptNEQ applies the NEQ predicate on the "initiator_dept" field.
func InitiatorDeptNEQ(v string) predicate.Process {
	return predicate.Process(sql.FieldNEQ(FieldInitiatorDept, v))
}

// InitiatorDeptIn applies the In predicate on the "initiator_dept" field.
func InitiatorDeptIn(vs ...string) predicate.Process {
	return predicate.Process(sql.FieldIn(FieldInitiatorDept, vs...))
}

// InitiatorDeptNotIn applies the NotIn predicate on the "initiator_dept" field.
func InitiatorDeptNotIn(vs ...string) predicate.Process {
	return predicate.Process(sql.FieldNotIn(FieldInitiatorDept, vs...))
}

// InitiatorDeptGT applies the GT predicate on the "initiator_dept" field.
func InitiatorDeptGT(v string) predicate.Process {
	return predicate.Process(sql.FieldGT(FieldInitiatorDept, v))
}

// InitiatorDeptGTE applies the GTE predicate on the "initiator_dept" field.
func InitiatorDeptGTE(v string) predicate.Process {
	return predicate.Process(sql.FieldGTE(FieldInitiatorDept, v))
}

// InitiatorDeptLT applies the LT predicate on the "initiator_dept" field.
func InitiatorDeptLT(v string) predicate.Process {
	return predicate.Process(sql.FieldLT(FieldInitiatorDept, v))
}

// InitiatorDeptLTE applies the LTE predicate on the "initiator_dept" field.
func InitiatorDeptLTE(v string) predicate.Process {
	return predicate.Process(sql.FieldLTE(FieldInitiatorDept, v))
}

// InitiatorDeptContains applies the Contains predicate on the "initiator_dept" field.
func InitiatorDeptContains(v string) predicate.Process {
	return predicate.Process(sql.FieldContains(FieldInitiatorDept, v))
}

// InitiatorDeptHasPrefix applies the HasPrefix predicate on the "initiator_dept" field.
func InitiatorDeptHasPrefix(v string) predicate.Process {
	return predicate.Process(sql.FieldHasPrefix(FieldInitiatorDept, v))
}

// InitiatorDeptHasSuffix applies the HasSuffix predicate on the "initiator_dept" field.
func InitiatorDeptHasSuffix(v string) predicate.Process {
	return predicate.Process(sql.FieldHasSuffix(FieldInitiatorDept, v))
}

// InitiatorDeptIsNil applies the IsNil predicate on the "initiator_dept" field.
func InitiatorDeptIsNil() predicate.Process {
	return predicate.Process(sql.FieldIsNull(FieldInitiatorDept))
}

// InitiatorDeptNotNil applies the NotNil predicate on the "initiator_dept" field.
func InitiatorDeptNotNil() predicate.Process {
	return predicate.Process(sql.FieldNotNull(FieldInitiatorDept))
}

// InitiatorDeptEqualFold applies the EqualFold predicate on the "initiator_dept" field.
func InitiatorDeptEqualFold(v string) predicate.Process {
	return predicate.Process(sql.FieldEqualFold(FieldInitiatorDept, v))
}

// InitiatorDeptContainsFold applies the ContainsFold predicate on the "initiator_dept" field.
func InitiatorDeptContainsFold(v string) predicate.Process {
	return predicate.Process(sql.FieldContainsFold(FieldInitiatorDept, v))
}

// ProcessCodeEQ applies the EQ predicate on the "process_code" field.
func ProcessCodeEQ(v string) predicate.Process {
	return predicate.Process(sql.FieldEQ(FieldProcessCode, v))
}

// ProcessCodeNEQ applies the NEQ predicate on the "process_code" field.
func ProcessCodeNEQ(v string) predicate.Process {
	return predicate.Process(sql.FieldNEQ(FieldProcessCode, v))
}

// ProcessCodeIn applies the In predicate on the "process_code" field.
func ProcessCodeIn(vs ...string) predicate.Process {
	return predicate.Process(sql.FieldIn(FieldProcessCode, vs...))
}

// ProcessCodeNotIn applies the NotIn predicate on the "process_code" field.
func ProcessCodeNotIn(vs ...string) predicate.Process {
	return predicate.Process(sql.FieldNotIn(FieldProcessCode, vs...))
}

// ProcessCodeGT applies the GT predicate on the "process_code" field.
func ProcessCodeGT(v string) predicate.Process {
	return predicate.Process(sql.FieldGT(FieldProcessCode, v))
}

// ProcessCodeGTE applies the GTE predicate on the "process_code" field.
func ProcessCodeGTE(v string) predicate.Process {
	return predicate.Process(sql.FieldGTE(FieldProcessCode, v))
}

// ProcessCodeLT applies the LT predicate on the "process_code" field.
func ProcessCodeLT(v string) predicate.Process {
	return predicate.Process(sql.FieldLT(FieldProcessCode, v))
}

// ProcessCodeLTE applies the LTE predicate on the "process_code" field.
func ProcessCodeLTE(v string) predicate.Process {
	return predicate.Process(sql.FieldLTE(FieldProcessCode, v))
}

// ProcessCodeContains applies the Contains predicate on the "process_code" field.
func ProcessCodeContains(v string) predicate.Process {
	return predicate.Process(sql.FieldContains(FieldProcessCode, v))
}

// ProcessCodeHasPrefix applies the HasPrefix predicate on the "process_code" field.
func ProcessCodeHasPrefix(v string) predicate.Process {
	return predicate.Process(sql.FieldHasPrefix(FieldProcessCode, v))
}

// ProcessCodeHasSuffix applies the HasSuffix predicate on the "process_code" field.
func ProcessCodeHasSuffix(v string) predicate.Process {
	return predicate.Process(sql.FieldHasSuffix(FieldProcessCode, v))
}

// ProcessCodeEqualFold applies the EqualFold predicate on the "process_code" field.
func ProcessCodeEqualFold(v string) predicate.Process {
	return predicate.Process(sql.FieldEqualFold(FieldProcessCode, v))
}

// ProcessCodeContainsFold applies the ContainsFold predicate on the "process_code" field.
func ProcessCodeContainsFold(v string) predicate.Process {
	return predicate.Process(sql.FieldContainsFold(FieldProcessCode, v))
}

// CurrentNodeEQ applies the EQ predicate on the "current_node" field.
func CurrentNodeEQ(v string) predicate.Process {
	return predicate.Process(sql.FieldEQ(FieldCurrentNode, v))
}

// CurrentNodeNEQ applies the NEQ predicate on the "current_node" field.
func CurrentNodeNEQ(v string) predicate.Process {
	return predicate.Process(sql.FieldNEQ(FieldCurrentNode, v))
}

// CurrentNodeIn applies the In predicate on the "current_node" field.
func CurrentNodeIn(vs ...string) predicate.Process {
	return predicate.Process(sql.FieldIn(FieldCurrentNode, vs...))
}

// CurrentNodeNotIn applies the NotIn predicate on the "current_node" field.
func CurrentNodeNotIn(vs ...string) predicate.Process {
	return predicate.Process(sql.FieldNotIn(FieldCurrentNode, vs...))
}

// CurrentNodeGT applies the GT predicate on the "current_node" field.
func CurrentNodeGT(v string) predicate.Process {
	return predicate.Process(sql.FieldGT(FieldCurrentNode, v))
}

// CurrentNodeGTE applies the GTE predicate on the "current_node" field.
func CurrentNodeGTE(v string) predicate.Process {
	return predicate.Process(sql.FieldGTE(FieldCurrentNode, v))
}

// CurrentNodeLT applies the LT predicate on the "current_node" field.
func CurrentNodeLT(v string) predicate.Process {
	return predicate.Process(sql.FieldLT(FieldCurrentNode, v))
}

// CurrentNodeLTE applies the LTE predicate on the "current_node" field.
func CurrentNodeLTE(v string) predicate.Process {
	return predicate.Process(sql.FieldLTE(FieldCurrentNode, v))
}

// CurrentNodeContains applies the Contains predicate on the "current_node" field.
func CurrentNodeContains(v string) predicate.Process {
	return predicate.Process(sql.FieldContains(FieldCurrentNode, v))
}

// CurrentNodeHasPrefix applies the HasPrefix predicate on the "current_node" field.
func CurrentNodeHasPrefix(v string) predicate.Process {
	return predicate.Process(sql.FieldHasPrefix(FieldCurrentNode, v))
}

// CurrentNodeHasSuffix applies the HasSuffix predicate on the "current_node" field.
func CurrentNodeHasSuffix(v string) predicate.Process {
	return predicate.Process(sql.FieldHasSuffix(FieldCurrentNode, v))
}

// CurrentNodeIsNil applies the IsNil predicate on the "current_node" field.
func CurrentNodeIsNil() predicate.Process {
	return predicate.Process(sql.FieldIsNull(FieldCurrentNode))
}

// CurrentNodeNotNil applies the NotNil predicate on the "current_node" field.
func CurrentNodeNotNil() predicate.Process {
	return predicate.Process(sql.FieldNotNull(FieldCurrentNode))
}

// CurrentNodeEqualFold applies the EqualFold predicate on the "current_node" field.
func CurrentNodeEqualFold(v string) predicate.Process {
	return predicate.Process(sql.FieldEqualFold(FieldCurrentNode, v))
}

// CurrentNodeContainsFold applies the ContainsFold predicate on the "current_node" field.
func CurrentNodeContainsFold(v string) predicate.Process {
	return predicate.Process(sql.FieldContainsFold(FieldCurrentNode, v))
}

// ActiveNodesIsNil applies the IsNil predicate on the "active_nodes" field.
func ActiveNodesIsNil() predicate.Process {
	return predicate.Process(sql.FieldIsNull(FieldActiveNodes))
}

// ActiveNodesNotNil applies the NotNil predicate on the "active_nodes" field.
func ActiveNodesNotNil() predicate.Process {
	return predicate.Process(sql.FieldNotNull(FieldActiveNodes))
}

// ProcessSnapshotIsNil applies the IsNil predicate on the "process_snapshot" field.
func ProcessSnapshotIsNil() predicate.Process {
	return predicate.Process(sql.FieldIsNull(FieldProcessSnapshot))
}

// ProcessSnapshotNotNil applies the NotNil predicate on the "process_snapshot" field.
func ProcessSnapshotNotNil() predicate.Process {
	return predicate.Process(sql.FieldNotNull(FieldProcessSnapshot))
}

// FormSnapshotIsNil applies the IsNil predicate on the "form_snapshot" field.
func FormSnapshotIsNil() predicate.Process {
	return predicate.Process(sql.FieldIsNull(FieldFormSnapshot))
}

// FormSnapshotNotNil applies the NotNil predicate on the "form_snapshot" field.
func FormSnapshotNotNil() predicate.Process {
	return predicate.Process(sql.FieldNotNull(FieldFormSnapshot))
}

// UrgeCountEQ applies the EQ predicate on the "urge_count" field.
func UrgeCountEQ(v int) predicate.Process {
	return predicate.Process(sql.FieldEQ(FieldUrgeCount, v))
}

// UrgeCountNEQ applies the NEQ predicate on the "urge_count" field.
func UrgeCountNEQ(v int) predicate.Process {
	return predicate.Process(sql.FieldNEQ(FieldUrgeCount, v))
}

// UrgeCountIn applies the In predicate on the "urge_count" field.
func UrgeCountIn(vs ...int) predicate.Process {
	return predicate.Process(sql.FieldIn(FieldUrgeCount, vs...))
}

// UrgeCountNotIn applies the NotIn predicate on the "urge_count" field.
func UrgeCountNotIn(vs ...int) predicate.Process {
	return predicate.Process(sql.FieldNotIn(FieldUrgeCount, vs...))
}

// UrgeCountGT applies the GT predicate on the "urge_count" field.
func UrgeCountGT(v int) predicate.Process {
	return predicate.Process(sql.FieldGT(FieldUrgeCount, v))
}

// UrgeCountGTE applies the GTE predicate on the "urge_count" field.
func UrgeCountGTE(v int) predicate.Process {
	return predicate.Process(sql.FieldGTE(FieldUrgeCount, v))
}

// UrgeCountLT applies the LT predicate on the "urge_count" field.
func UrgeCountLT(v int) predicate.Process {
	return predicate.Process(sql.FieldLT(FieldUrgeCount, v))
}

// UrgeCountLTE applies the LTE predicate on the "urge_count" field.
func UrgeCountLTE(v int) predicate.Process {
	return predicate.Process(sql.FieldLTE(FieldUrgeCount, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Process) predicate.Process {
	return predicate.Process(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Process) predicate.Process {
	return predicate.Process(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Process) predicate.Process {
	return predicate.Process(sql.NotPredicates(p))
}
