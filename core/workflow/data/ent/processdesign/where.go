// Code generated by ent, DO NOT EDIT.

package processdesign

import (
	"ncobase/workflow/data/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldContainsFold(FieldID, id))
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v string) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldEQ(FieldVersion, v))
}

// Disabled applies equality check predicate on the "disabled" field. It's identical to DisabledEQ.
func Disabled(v bool) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldEQ(FieldDisabled, v))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v string) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldEQ(FieldTenantID, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v string) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldEQ(FieldCreatedBy, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v string) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldEQ(FieldUpdatedBy, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v int64) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v int64) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldEQ(FieldUpdatedAt, v))
}

// TemplateID applies equality check predicate on the "template_id" field. It's identical to TemplateIDEQ.
func TemplateID(v string) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldEQ(FieldTemplateID, v))
}

// IsDraft applies equality check predicate on the "is_draft" field. It's identical to IsDraftEQ.
func IsDraft(v bool) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldEQ(FieldIsDraft, v))
}

// SourceVersion applies equality check predicate on the "source_version" field. It's identical to SourceVersionEQ.
func SourceVersion(v string) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldEQ(FieldSourceVersion, v))
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v string) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldEQ(FieldVersion, v))
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v string) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldNEQ(FieldVersion, v))
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...string) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldIn(FieldVersion, vs...))
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...string) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldNotIn(FieldVersion, vs...))
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v string) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldGT(FieldVersion, v))
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v string) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldGTE(FieldVersion, v))
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v string) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldLT(FieldVersion, v))
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v string) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldLTE(FieldVersion, v))
}

// VersionContains applies the Contains predicate on the "version" field.
func VersionContains(v string) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldContains(FieldVersion, v))
}

// VersionHasPrefix applies the HasPrefix predicate on the "version" field.
func VersionHasPrefix(v string) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldHasPrefix(FieldVersion, v))
}

// VersionHasSuffix applies the HasSuffix predicate on the "version" field.
func VersionHasSuffix(v string) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldHasSuffix(FieldVersion, v))
}

// VersionIsNil applies the IsNil predicate on the "version" field.
func VersionIsNil() predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldIsNull(FieldVersion))
}

// VersionNotNil applies the NotNil predicate on the "version" field.
func VersionNotNil() predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldNotNull(FieldVersion))
}

// VersionEqualFold applies the EqualFold predicate on the "version" field.
func VersionEqualFold(v string) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldEqualFold(FieldVersion, v))
}

// VersionContainsFold applies the ContainsFold predicate on the "version" field.
func VersionContainsFold(v string) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldContainsFold(FieldVersion, v))
}

// DisabledEQ applies the EQ predicate on the "disabled" field.
func DisabledEQ(v bool) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldEQ(FieldDisabled, v))
}

// DisabledNEQ applies the NEQ predicate on the "disabled" field.
func DisabledNEQ(v bool) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldNEQ(FieldDisabled, v))
}

// DisabledIsNil applies the IsNil predicate on the "disabled" field.
func DisabledIsNil() predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldIsNull(FieldDisabled))
}

// DisabledNotNil applies the NotNil predicate on the "disabled" field.
func DisabledNotNil() predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldNotNull(FieldDisabled))
}

// ExtrasIsNil applies the IsNil predicate on the "extras" field.
func ExtrasIsNil() predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldIsNull(FieldExtras))
}

// ExtrasNotNil applies the NotNil predicate on the "extras" field.
func ExtrasNotNil() predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldNotNull(FieldExtras))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v string) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v string) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...string) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...string) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldNotIn(FieldTenantID, vs...))
}

// TenantIDGT applies the GT predicate on the "tenant_id" field.
func TenantIDGT(v string) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldGT(FieldTenantID, v))
}

// TenantIDGTE applies the GTE predicate on the "tenant_id" field.
func TenantIDGTE(v string) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldGTE(FieldTenantID, v))
}

// TenantIDLT applies the LT predicate on the "tenant_id" field.
func TenantIDLT(v string) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldLT(FieldTenantID, v))
}

// TenantIDLTE applies the LTE predicate on the "tenant_id" field.
func TenantIDLTE(v string) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldLTE(FieldTenantID, v))
}

// TenantIDContains applies the Contains predicate on the "tenant_id" field.
func TenantIDContains(v string) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldContains(FieldTenantID, v))
}

// TenantIDHasPrefix applies the HasPrefix predicate on the "tenant_id" field.
func TenantIDHasPrefix(v string) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldHasPrefix(FieldTenantID, v))
}

// TenantIDHasSuffix applies the HasSuffix predicate on the "tenant_id" field.
func TenantIDHasSuffix(v string) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldHasSuffix(FieldTenantID, v))
}

// TenantIDIsNil applies the IsNil predicate on the "tenant_id" field.
func TenantIDIsNil() predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldIsNull(FieldTenantID))
}

// TenantIDNotNil applies the NotNil predicate on the "tenant_id" field.
func TenantIDNotNil() predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldNotNull(FieldTenantID))
}

// TenantIDEqualFold applies the EqualFold predicate on the "tenant_id" field.
func TenantIDEqualFold(v string) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldEqualFold(FieldTenantID, v))
}

// TenantIDContainsFold applies the ContainsFold predicate on the "tenant_id" field.
func TenantIDContainsFold(v string) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldContainsFold(FieldTenantID, v))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v string) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v string) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...string) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...string) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v string) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v string) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v string) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v string) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldLTE(FieldCreatedBy, v))
}

// CreatedByContains applies the Contains predicate on the "created_by" field.
func CreatedByContains(v string) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldContains(FieldCreatedBy, v))
}

// CreatedByHasPrefix applies the HasPrefix predicate on the "created_by" field.
func CreatedByHasPrefix(v string) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldHasPrefix(FieldCreatedBy, v))
}

// CreatedByHasSuffix applies the HasSuffix predicate on the "created_by" field.
func CreatedByHasSuffix(v string) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldHasSuffix(FieldCreatedBy, v))
}

// CreatedByIsNil applies the IsNil predicate on the "created_by" field.
func CreatedByIsNil() predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldIsNull(FieldCreatedBy))
}

// CreatedByNotNil applies the NotNil predicate on the "created_by" field.
func CreatedByNotNil() predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldNotNull(FieldCreatedBy))
}

// CreatedByEqualFold applies the EqualFold predicate on the "created_by" field.
func CreatedByEqualFold(v string) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldEqualFold(FieldCreatedBy, v))
}

// CreatedByContainsFold applies the ContainsFold predicate on the "created_by" field.
func CreatedByContainsFold(v string) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldContainsFold(FieldCreatedBy, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v string) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v string) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...string) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...string) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v string) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v string) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v string) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v string) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldLTE(FieldUpdatedBy, v))
}

// UpdatedByContains applies the Contains predicate on the "updated_by" field.
func UpdatedByContains(v string) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldContains(FieldUpdatedBy, v))
}

// UpdatedByHasPrefix applies the HasPrefix predicate on the "updated_by" field.
func UpdatedByHasPrefix(v string) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldHasPrefix(FieldUpdatedBy, v))
}

// UpdatedByHasSuffix applies the HasSuffix predicate on the "updated_by" field.
func UpdatedByHasSuffix(v string) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldHasSuffix(FieldUpdatedBy, v))
}

// UpdatedByIsNil applies the IsNil predicate on the "updated_by" field.
func UpdatedByIsNil() predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldIsNull(FieldUpdatedBy))
}

// UpdatedByNotNil applies the NotNil predicate on the "updated_by" field.
func UpdatedByNotNil() predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldNotNull(FieldUpdatedBy))
}

// UpdatedByEqualFold applies the EqualFold predicate on the "updated_by" field.
func UpdatedByEqualFold(v string) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldEqualFold(FieldUpdatedBy, v))
}

// UpdatedByContainsFold applies the ContainsFold predicate on the "updated_by" field.
func UpdatedByContainsFold(v string) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldContainsFold(FieldUpdatedBy, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v int64) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v int64) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...int64) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...int64) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v int64) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v int64) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v int64) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v int64) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v int64) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v int64) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...int64) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...int64) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v int64) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v int64) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v int64) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v int64) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldNotNull(FieldUpdatedAt))
}

// TemplateIDEQ applies the EQ predicate on the "template_id" field.
func TemplateIDEQ(v string) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldEQ(FieldTemplateID, v))
}

// TemplateIDNEQ applies the NEQ predicate on the "template_id" field.
func TemplateIDNEQ(v string) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldNEQ(FieldTemplateID, v))
}

// TemplateIDIn applies the In predicate on the "template_id" field.
func TemplateIDIn(vs ...string) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldIn(FieldTemplateID, vs...))
}

// TemplateIDNotIn applies the NotIn predicate on the "template_id" field.
func TemplateIDNotIn(vs ...string) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldNotIn(FieldTemplateID, vs...))
}

// TemplateIDGT applies the GT predicate on the "template_id" field.
func TemplateIDGT(v string) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldGT(FieldTemplateID, v))
}

// TemplateIDGTE applies the GTE predicate on the "template_id" field.
func TemplateIDGTE(v string) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldGTE(FieldTemplateID, v))
}

// TemplateIDLT applies the LT predicate on the "template_id" field.
func TemplateIDLT(v string) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldLT(FieldTemplateID, v))
}

// TemplateIDLTE applies the LTE predicate on the "template_id" field.
func TemplateIDLTE(v string) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldLTE(FieldTemplateID, v))
}

// TemplateIDContains applies the Contains predicate on the "template_id" field.
func TemplateIDContains(v string) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldContains(FieldTemplateID, v))
}

// TemplateIDHasPrefix applies the HasPrefix predicate on the "template_id" field.
func TemplateIDHasPrefix(v string) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldHasPrefix(FieldTemplateID, v))
}

// TemplateIDHasSuffix applies the HasSuffix predicate on the "template_id" field.
func TemplateIDHasSuffix(v string) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldHasSuffix(FieldTemplateID, v))
}

// TemplateIDEqualFold applies the EqualFold predicate on the "template_id" field.
func TemplateIDEqualFold(v string) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldEqualFold(FieldTemplateID, v))
}

// TemplateIDContainsFold applies the ContainsFold predicate on the "template_id" field.
func TemplateIDContainsFold(v string) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldContainsFold(FieldTemplateID, v))
}

// GraphDataIsNil applies the IsNil predicate on the "graph_data" field.
func GraphDataIsNil() predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldIsNull(FieldGraphData))
}

// GraphDataNotNil applies the NotNil predicate on the "graph_data" field.
func GraphDataNotNil() predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldNotNull(FieldGraphData))
}

// NodeLayoutsIsNil applies the IsNil predicate on the "node_layouts" field.
func NodeLayoutsIsNil() predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldIsNull(FieldNodeLayouts))
}

// NodeLayoutsNotNil applies the NotNil predicate on the "node_layouts" field.
func NodeLayoutsNotNil() predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldNotNull(FieldNodeLayouts))
}

// PropertiesIsNil applies the IsNil predicate on the "properties" field.
func PropertiesIsNil() predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldIsNull(FieldProperties))
}

// PropertiesNotNil applies the NotNil predicate on the "properties" field.
func PropertiesNotNil() predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldNotNull(FieldProperties))
}

// ValidationRulesIsNil applies the IsNil predicate on the "validation_rules" field.
func ValidationRulesIsNil() predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldIsNull(FieldValidationRules))
}

// ValidationRulesNotNil applies the NotNil predicate on the "validation_rules" field.
func ValidationRulesNotNil() predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldNotNull(FieldValidationRules))
}

// IsDraftEQ applies the EQ predicate on the "is_draft" field.
func IsDraftEQ(v bool) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldEQ(FieldIsDraft, v))
}

// IsDraftNEQ applies the NEQ predicate on the "is_draft" field.
func IsDraftNEQ(v bool) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldNEQ(FieldIsDraft, v))
}

// SourceVersionEQ applies the EQ predicate on the "source_version" field.
func SourceVersionEQ(v string) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldEQ(FieldSourceVersion, v))
}

// SourceVersionNEQ applies the NEQ predicate on the "source_version" field.
func SourceVersionNEQ(v string) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldNEQ(FieldSourceVersion, v))
}

// SourceVersionIn applies the In predicate on the "source_version" field.
func SourceVersionIn(vs ...string) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldIn(FieldSourceVersion, vs...))
}

// SourceVersionNotIn applies the NotIn predicate on the "source_version" field.
func SourceVersionNotIn(vs ...string) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldNotIn(FieldSourceVersion, vs...))
}

// SourceVersionGT applies the GT predicate on the "source_version" field.
func SourceVersionGT(v string) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldGT(FieldSourceVersion, v))
}

// SourceVersionGTE applies the GTE predicate on the "source_version" field.
func SourceVersionGTE(v string) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldGTE(FieldSourceVersion, v))
}

// SourceVersionLT applies the LT predicate on the "source_version" field.
func SourceVersionLT(v string) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldLT(FieldSourceVersion, v))
}

// SourceVersionLTE applies the LTE predicate on the "source_version" field.
func SourceVersionLTE(v string) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldLTE(FieldSourceVersion, v))
}

// SourceVersionContains applies the Contains predicate on the "source_version" field.
func SourceVersionContains(v string) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldContains(FieldSourceVersion, v))
}

// SourceVersionHasPrefix applies the HasPrefix predicate on the "source_version" field.
func SourceVersionHasPrefix(v string) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldHasPrefix(FieldSourceVersion, v))
}

// SourceVersionHasSuffix applies the HasSuffix predicate on the "source_version" field.
func SourceVersionHasSuffix(v string) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldHasSuffix(FieldSourceVersion, v))
}

// SourceVersionIsNil applies the IsNil predicate on the "source_version" field.
func SourceVersionIsNil() predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldIsNull(FieldSourceVersion))
}

// SourceVersionNotNil applies the NotNil predicate on the "source_version" field.
func SourceVersionNotNil() predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldNotNull(FieldSourceVersion))
}

// SourceVersionEqualFold applies the EqualFold predicate on the "source_version" field.
func SourceVersionEqualFold(v string) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldEqualFold(FieldSourceVersion, v))
}

// SourceVersionContainsFold applies the ContainsFold predicate on the "source_version" field.
func SourceVersionContainsFold(v string) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.FieldContainsFold(FieldSourceVersion, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ProcessDesign) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ProcessDesign) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ProcessDesign) predicate.ProcessDesign {
	return predicate.ProcessDesign(sql.NotPredicates(p))
}
