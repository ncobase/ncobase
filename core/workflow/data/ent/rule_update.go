// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/core/workflow/data/ent/predicate"
	"ncobase/core/workflow/data/ent/rule"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RuleUpdate is the builder for updating Rule entities.
type RuleUpdate struct {
	config
	hooks    []Hook
	mutation *RuleMutation
}

// Where appends a list predicates to the RuleUpdate builder.
func (ru *RuleUpdate) Where(ps ...predicate.Rule) *RuleUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetName sets the "name" field.
func (ru *RuleUpdate) SetName(s string) *RuleUpdate {
	ru.mutation.SetName(s)
	return ru
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ru *RuleUpdate) SetNillableName(s *string) *RuleUpdate {
	if s != nil {
		ru.SetName(*s)
	}
	return ru
}

// ClearName clears the value of the "name" field.
func (ru *RuleUpdate) ClearName() *RuleUpdate {
	ru.mutation.ClearName()
	return ru
}

// SetCode sets the "code" field.
func (ru *RuleUpdate) SetCode(s string) *RuleUpdate {
	ru.mutation.SetCode(s)
	return ru
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (ru *RuleUpdate) SetNillableCode(s *string) *RuleUpdate {
	if s != nil {
		ru.SetCode(*s)
	}
	return ru
}

// ClearCode clears the value of the "code" field.
func (ru *RuleUpdate) ClearCode() *RuleUpdate {
	ru.mutation.ClearCode()
	return ru
}

// SetDescription sets the "description" field.
func (ru *RuleUpdate) SetDescription(s string) *RuleUpdate {
	ru.mutation.SetDescription(s)
	return ru
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ru *RuleUpdate) SetNillableDescription(s *string) *RuleUpdate {
	if s != nil {
		ru.SetDescription(*s)
	}
	return ru
}

// ClearDescription clears the value of the "description" field.
func (ru *RuleUpdate) ClearDescription() *RuleUpdate {
	ru.mutation.ClearDescription()
	return ru
}

// SetType sets the "type" field.
func (ru *RuleUpdate) SetType(s string) *RuleUpdate {
	ru.mutation.SetType(s)
	return ru
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ru *RuleUpdate) SetNillableType(s *string) *RuleUpdate {
	if s != nil {
		ru.SetType(*s)
	}
	return ru
}

// ClearType clears the value of the "type" field.
func (ru *RuleUpdate) ClearType() *RuleUpdate {
	ru.mutation.ClearType()
	return ru
}

// SetStatus sets the "status" field.
func (ru *RuleUpdate) SetStatus(s string) *RuleUpdate {
	ru.mutation.SetStatus(s)
	return ru
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ru *RuleUpdate) SetNillableStatus(s *string) *RuleUpdate {
	if s != nil {
		ru.SetStatus(*s)
	}
	return ru
}

// ClearStatus clears the value of the "status" field.
func (ru *RuleUpdate) ClearStatus() *RuleUpdate {
	ru.mutation.ClearStatus()
	return ru
}

// SetExtras sets the "extras" field.
func (ru *RuleUpdate) SetExtras(m map[string]interface{}) *RuleUpdate {
	ru.mutation.SetExtras(m)
	return ru
}

// ClearExtras clears the value of the "extras" field.
func (ru *RuleUpdate) ClearExtras() *RuleUpdate {
	ru.mutation.ClearExtras()
	return ru
}

// SetTenantID sets the "tenant_id" field.
func (ru *RuleUpdate) SetTenantID(s string) *RuleUpdate {
	ru.mutation.SetTenantID(s)
	return ru
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (ru *RuleUpdate) SetNillableTenantID(s *string) *RuleUpdate {
	if s != nil {
		ru.SetTenantID(*s)
	}
	return ru
}

// ClearTenantID clears the value of the "tenant_id" field.
func (ru *RuleUpdate) ClearTenantID() *RuleUpdate {
	ru.mutation.ClearTenantID()
	return ru
}

// SetCreatedBy sets the "created_by" field.
func (ru *RuleUpdate) SetCreatedBy(s string) *RuleUpdate {
	ru.mutation.SetCreatedBy(s)
	return ru
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (ru *RuleUpdate) SetNillableCreatedBy(s *string) *RuleUpdate {
	if s != nil {
		ru.SetCreatedBy(*s)
	}
	return ru
}

// ClearCreatedBy clears the value of the "created_by" field.
func (ru *RuleUpdate) ClearCreatedBy() *RuleUpdate {
	ru.mutation.ClearCreatedBy()
	return ru
}

// SetUpdatedBy sets the "updated_by" field.
func (ru *RuleUpdate) SetUpdatedBy(s string) *RuleUpdate {
	ru.mutation.SetUpdatedBy(s)
	return ru
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ru *RuleUpdate) SetNillableUpdatedBy(s *string) *RuleUpdate {
	if s != nil {
		ru.SetUpdatedBy(*s)
	}
	return ru
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (ru *RuleUpdate) ClearUpdatedBy() *RuleUpdate {
	ru.mutation.ClearUpdatedBy()
	return ru
}

// SetUpdatedAt sets the "updated_at" field.
func (ru *RuleUpdate) SetUpdatedAt(i int64) *RuleUpdate {
	ru.mutation.ResetUpdatedAt()
	ru.mutation.SetUpdatedAt(i)
	return ru
}

// AddUpdatedAt adds i to the "updated_at" field.
func (ru *RuleUpdate) AddUpdatedAt(i int64) *RuleUpdate {
	ru.mutation.AddUpdatedAt(i)
	return ru
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (ru *RuleUpdate) ClearUpdatedAt() *RuleUpdate {
	ru.mutation.ClearUpdatedAt()
	return ru
}

// SetRuleKey sets the "rule_key" field.
func (ru *RuleUpdate) SetRuleKey(s string) *RuleUpdate {
	ru.mutation.SetRuleKey(s)
	return ru
}

// SetNillableRuleKey sets the "rule_key" field if the given value is not nil.
func (ru *RuleUpdate) SetNillableRuleKey(s *string) *RuleUpdate {
	if s != nil {
		ru.SetRuleKey(*s)
	}
	return ru
}

// SetTemplateID sets the "template_id" field.
func (ru *RuleUpdate) SetTemplateID(s string) *RuleUpdate {
	ru.mutation.SetTemplateID(s)
	return ru
}

// SetNillableTemplateID sets the "template_id" field if the given value is not nil.
func (ru *RuleUpdate) SetNillableTemplateID(s *string) *RuleUpdate {
	if s != nil {
		ru.SetTemplateID(*s)
	}
	return ru
}

// ClearTemplateID clears the value of the "template_id" field.
func (ru *RuleUpdate) ClearTemplateID() *RuleUpdate {
	ru.mutation.ClearTemplateID()
	return ru
}

// SetNodeKey sets the "node_key" field.
func (ru *RuleUpdate) SetNodeKey(s string) *RuleUpdate {
	ru.mutation.SetNodeKey(s)
	return ru
}

// SetNillableNodeKey sets the "node_key" field if the given value is not nil.
func (ru *RuleUpdate) SetNillableNodeKey(s *string) *RuleUpdate {
	if s != nil {
		ru.SetNodeKey(*s)
	}
	return ru
}

// ClearNodeKey clears the value of the "node_key" field.
func (ru *RuleUpdate) ClearNodeKey() *RuleUpdate {
	ru.mutation.ClearNodeKey()
	return ru
}

// SetConditions sets the "conditions" field.
func (ru *RuleUpdate) SetConditions(m map[string]interface{}) *RuleUpdate {
	ru.mutation.SetConditions(m)
	return ru
}

// SetActions sets the "actions" field.
func (ru *RuleUpdate) SetActions(m map[string]interface{}) *RuleUpdate {
	ru.mutation.SetActions(m)
	return ru
}

// SetPriority sets the "priority" field.
func (ru *RuleUpdate) SetPriority(i int) *RuleUpdate {
	ru.mutation.ResetPriority()
	ru.mutation.SetPriority(i)
	return ru
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (ru *RuleUpdate) SetNillablePriority(i *int) *RuleUpdate {
	if i != nil {
		ru.SetPriority(*i)
	}
	return ru
}

// AddPriority adds i to the "priority" field.
func (ru *RuleUpdate) AddPriority(i int) *RuleUpdate {
	ru.mutation.AddPriority(i)
	return ru
}

// SetIsEnabled sets the "is_enabled" field.
func (ru *RuleUpdate) SetIsEnabled(b bool) *RuleUpdate {
	ru.mutation.SetIsEnabled(b)
	return ru
}

// SetNillableIsEnabled sets the "is_enabled" field if the given value is not nil.
func (ru *RuleUpdate) SetNillableIsEnabled(b *bool) *RuleUpdate {
	if b != nil {
		ru.SetIsEnabled(*b)
	}
	return ru
}

// SetEffectiveTime sets the "effective_time" field.
func (ru *RuleUpdate) SetEffectiveTime(i int64) *RuleUpdate {
	ru.mutation.ResetEffectiveTime()
	ru.mutation.SetEffectiveTime(i)
	return ru
}

// SetNillableEffectiveTime sets the "effective_time" field if the given value is not nil.
func (ru *RuleUpdate) SetNillableEffectiveTime(i *int64) *RuleUpdate {
	if i != nil {
		ru.SetEffectiveTime(*i)
	}
	return ru
}

// AddEffectiveTime adds i to the "effective_time" field.
func (ru *RuleUpdate) AddEffectiveTime(i int64) *RuleUpdate {
	ru.mutation.AddEffectiveTime(i)
	return ru
}

// ClearEffectiveTime clears the value of the "effective_time" field.
func (ru *RuleUpdate) ClearEffectiveTime() *RuleUpdate {
	ru.mutation.ClearEffectiveTime()
	return ru
}

// SetExpireTime sets the "expire_time" field.
func (ru *RuleUpdate) SetExpireTime(i int64) *RuleUpdate {
	ru.mutation.ResetExpireTime()
	ru.mutation.SetExpireTime(i)
	return ru
}

// SetNillableExpireTime sets the "expire_time" field if the given value is not nil.
func (ru *RuleUpdate) SetNillableExpireTime(i *int64) *RuleUpdate {
	if i != nil {
		ru.SetExpireTime(*i)
	}
	return ru
}

// AddExpireTime adds i to the "expire_time" field.
func (ru *RuleUpdate) AddExpireTime(i int64) *RuleUpdate {
	ru.mutation.AddExpireTime(i)
	return ru
}

// ClearExpireTime clears the value of the "expire_time" field.
func (ru *RuleUpdate) ClearExpireTime() *RuleUpdate {
	ru.mutation.ClearExpireTime()
	return ru
}

// Mutation returns the RuleMutation object of the builder.
func (ru *RuleUpdate) Mutation() *RuleMutation {
	return ru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RuleUpdate) Save(ctx context.Context) (int, error) {
	ru.defaults()
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RuleUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RuleUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RuleUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ru *RuleUpdate) defaults() {
	if _, ok := ru.mutation.UpdatedAt(); !ok && !ru.mutation.UpdatedAtCleared() {
		v := rule.UpdateDefaultUpdatedAt()
		ru.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ru *RuleUpdate) check() error {
	if v, ok := ru.mutation.TenantID(); ok {
		if err := rule.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "Rule.tenant_id": %w`, err)}
		}
	}
	if v, ok := ru.mutation.CreatedBy(); ok {
		if err := rule.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "Rule.created_by": %w`, err)}
		}
	}
	if v, ok := ru.mutation.UpdatedBy(); ok {
		if err := rule.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "Rule.updated_by": %w`, err)}
		}
	}
	return nil
}

func (ru *RuleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(rule.Table, rule.Columns, sqlgraph.NewFieldSpec(rule.FieldID, field.TypeString))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.Name(); ok {
		_spec.SetField(rule.FieldName, field.TypeString, value)
	}
	if ru.mutation.NameCleared() {
		_spec.ClearField(rule.FieldName, field.TypeString)
	}
	if value, ok := ru.mutation.Code(); ok {
		_spec.SetField(rule.FieldCode, field.TypeString, value)
	}
	if ru.mutation.CodeCleared() {
		_spec.ClearField(rule.FieldCode, field.TypeString)
	}
	if value, ok := ru.mutation.Description(); ok {
		_spec.SetField(rule.FieldDescription, field.TypeString, value)
	}
	if ru.mutation.DescriptionCleared() {
		_spec.ClearField(rule.FieldDescription, field.TypeString)
	}
	if value, ok := ru.mutation.GetType(); ok {
		_spec.SetField(rule.FieldType, field.TypeString, value)
	}
	if ru.mutation.TypeCleared() {
		_spec.ClearField(rule.FieldType, field.TypeString)
	}
	if value, ok := ru.mutation.Status(); ok {
		_spec.SetField(rule.FieldStatus, field.TypeString, value)
	}
	if ru.mutation.StatusCleared() {
		_spec.ClearField(rule.FieldStatus, field.TypeString)
	}
	if value, ok := ru.mutation.Extras(); ok {
		_spec.SetField(rule.FieldExtras, field.TypeJSON, value)
	}
	if ru.mutation.ExtrasCleared() {
		_spec.ClearField(rule.FieldExtras, field.TypeJSON)
	}
	if value, ok := ru.mutation.TenantID(); ok {
		_spec.SetField(rule.FieldTenantID, field.TypeString, value)
	}
	if ru.mutation.TenantIDCleared() {
		_spec.ClearField(rule.FieldTenantID, field.TypeString)
	}
	if value, ok := ru.mutation.CreatedBy(); ok {
		_spec.SetField(rule.FieldCreatedBy, field.TypeString, value)
	}
	if ru.mutation.CreatedByCleared() {
		_spec.ClearField(rule.FieldCreatedBy, field.TypeString)
	}
	if value, ok := ru.mutation.UpdatedBy(); ok {
		_spec.SetField(rule.FieldUpdatedBy, field.TypeString, value)
	}
	if ru.mutation.UpdatedByCleared() {
		_spec.ClearField(rule.FieldUpdatedBy, field.TypeString)
	}
	if ru.mutation.CreatedAtCleared() {
		_spec.ClearField(rule.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := ru.mutation.UpdatedAt(); ok {
		_spec.SetField(rule.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := ru.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(rule.FieldUpdatedAt, field.TypeInt64, value)
	}
	if ru.mutation.UpdatedAtCleared() {
		_spec.ClearField(rule.FieldUpdatedAt, field.TypeInt64)
	}
	if value, ok := ru.mutation.RuleKey(); ok {
		_spec.SetField(rule.FieldRuleKey, field.TypeString, value)
	}
	if value, ok := ru.mutation.TemplateID(); ok {
		_spec.SetField(rule.FieldTemplateID, field.TypeString, value)
	}
	if ru.mutation.TemplateIDCleared() {
		_spec.ClearField(rule.FieldTemplateID, field.TypeString)
	}
	if value, ok := ru.mutation.NodeKey(); ok {
		_spec.SetField(rule.FieldNodeKey, field.TypeString, value)
	}
	if ru.mutation.NodeKeyCleared() {
		_spec.ClearField(rule.FieldNodeKey, field.TypeString)
	}
	if value, ok := ru.mutation.Conditions(); ok {
		_spec.SetField(rule.FieldConditions, field.TypeJSON, value)
	}
	if value, ok := ru.mutation.Actions(); ok {
		_spec.SetField(rule.FieldActions, field.TypeJSON, value)
	}
	if value, ok := ru.mutation.Priority(); ok {
		_spec.SetField(rule.FieldPriority, field.TypeInt, value)
	}
	if value, ok := ru.mutation.AddedPriority(); ok {
		_spec.AddField(rule.FieldPriority, field.TypeInt, value)
	}
	if value, ok := ru.mutation.IsEnabled(); ok {
		_spec.SetField(rule.FieldIsEnabled, field.TypeBool, value)
	}
	if value, ok := ru.mutation.EffectiveTime(); ok {
		_spec.SetField(rule.FieldEffectiveTime, field.TypeInt64, value)
	}
	if value, ok := ru.mutation.AddedEffectiveTime(); ok {
		_spec.AddField(rule.FieldEffectiveTime, field.TypeInt64, value)
	}
	if ru.mutation.EffectiveTimeCleared() {
		_spec.ClearField(rule.FieldEffectiveTime, field.TypeInt64)
	}
	if value, ok := ru.mutation.ExpireTime(); ok {
		_spec.SetField(rule.FieldExpireTime, field.TypeInt64, value)
	}
	if value, ok := ru.mutation.AddedExpireTime(); ok {
		_spec.AddField(rule.FieldExpireTime, field.TypeInt64, value)
	}
	if ru.mutation.ExpireTimeCleared() {
		_spec.ClearField(rule.FieldExpireTime, field.TypeInt64)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rule.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// RuleUpdateOne is the builder for updating a single Rule entity.
type RuleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RuleMutation
}

// SetName sets the "name" field.
func (ruo *RuleUpdateOne) SetName(s string) *RuleUpdateOne {
	ruo.mutation.SetName(s)
	return ruo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ruo *RuleUpdateOne) SetNillableName(s *string) *RuleUpdateOne {
	if s != nil {
		ruo.SetName(*s)
	}
	return ruo
}

// ClearName clears the value of the "name" field.
func (ruo *RuleUpdateOne) ClearName() *RuleUpdateOne {
	ruo.mutation.ClearName()
	return ruo
}

// SetCode sets the "code" field.
func (ruo *RuleUpdateOne) SetCode(s string) *RuleUpdateOne {
	ruo.mutation.SetCode(s)
	return ruo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (ruo *RuleUpdateOne) SetNillableCode(s *string) *RuleUpdateOne {
	if s != nil {
		ruo.SetCode(*s)
	}
	return ruo
}

// ClearCode clears the value of the "code" field.
func (ruo *RuleUpdateOne) ClearCode() *RuleUpdateOne {
	ruo.mutation.ClearCode()
	return ruo
}

// SetDescription sets the "description" field.
func (ruo *RuleUpdateOne) SetDescription(s string) *RuleUpdateOne {
	ruo.mutation.SetDescription(s)
	return ruo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ruo *RuleUpdateOne) SetNillableDescription(s *string) *RuleUpdateOne {
	if s != nil {
		ruo.SetDescription(*s)
	}
	return ruo
}

// ClearDescription clears the value of the "description" field.
func (ruo *RuleUpdateOne) ClearDescription() *RuleUpdateOne {
	ruo.mutation.ClearDescription()
	return ruo
}

// SetType sets the "type" field.
func (ruo *RuleUpdateOne) SetType(s string) *RuleUpdateOne {
	ruo.mutation.SetType(s)
	return ruo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ruo *RuleUpdateOne) SetNillableType(s *string) *RuleUpdateOne {
	if s != nil {
		ruo.SetType(*s)
	}
	return ruo
}

// ClearType clears the value of the "type" field.
func (ruo *RuleUpdateOne) ClearType() *RuleUpdateOne {
	ruo.mutation.ClearType()
	return ruo
}

// SetStatus sets the "status" field.
func (ruo *RuleUpdateOne) SetStatus(s string) *RuleUpdateOne {
	ruo.mutation.SetStatus(s)
	return ruo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ruo *RuleUpdateOne) SetNillableStatus(s *string) *RuleUpdateOne {
	if s != nil {
		ruo.SetStatus(*s)
	}
	return ruo
}

// ClearStatus clears the value of the "status" field.
func (ruo *RuleUpdateOne) ClearStatus() *RuleUpdateOne {
	ruo.mutation.ClearStatus()
	return ruo
}

// SetExtras sets the "extras" field.
func (ruo *RuleUpdateOne) SetExtras(m map[string]interface{}) *RuleUpdateOne {
	ruo.mutation.SetExtras(m)
	return ruo
}

// ClearExtras clears the value of the "extras" field.
func (ruo *RuleUpdateOne) ClearExtras() *RuleUpdateOne {
	ruo.mutation.ClearExtras()
	return ruo
}

// SetTenantID sets the "tenant_id" field.
func (ruo *RuleUpdateOne) SetTenantID(s string) *RuleUpdateOne {
	ruo.mutation.SetTenantID(s)
	return ruo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (ruo *RuleUpdateOne) SetNillableTenantID(s *string) *RuleUpdateOne {
	if s != nil {
		ruo.SetTenantID(*s)
	}
	return ruo
}

// ClearTenantID clears the value of the "tenant_id" field.
func (ruo *RuleUpdateOne) ClearTenantID() *RuleUpdateOne {
	ruo.mutation.ClearTenantID()
	return ruo
}

// SetCreatedBy sets the "created_by" field.
func (ruo *RuleUpdateOne) SetCreatedBy(s string) *RuleUpdateOne {
	ruo.mutation.SetCreatedBy(s)
	return ruo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (ruo *RuleUpdateOne) SetNillableCreatedBy(s *string) *RuleUpdateOne {
	if s != nil {
		ruo.SetCreatedBy(*s)
	}
	return ruo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (ruo *RuleUpdateOne) ClearCreatedBy() *RuleUpdateOne {
	ruo.mutation.ClearCreatedBy()
	return ruo
}

// SetUpdatedBy sets the "updated_by" field.
func (ruo *RuleUpdateOne) SetUpdatedBy(s string) *RuleUpdateOne {
	ruo.mutation.SetUpdatedBy(s)
	return ruo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ruo *RuleUpdateOne) SetNillableUpdatedBy(s *string) *RuleUpdateOne {
	if s != nil {
		ruo.SetUpdatedBy(*s)
	}
	return ruo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (ruo *RuleUpdateOne) ClearUpdatedBy() *RuleUpdateOne {
	ruo.mutation.ClearUpdatedBy()
	return ruo
}

// SetUpdatedAt sets the "updated_at" field.
func (ruo *RuleUpdateOne) SetUpdatedAt(i int64) *RuleUpdateOne {
	ruo.mutation.ResetUpdatedAt()
	ruo.mutation.SetUpdatedAt(i)
	return ruo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (ruo *RuleUpdateOne) AddUpdatedAt(i int64) *RuleUpdateOne {
	ruo.mutation.AddUpdatedAt(i)
	return ruo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (ruo *RuleUpdateOne) ClearUpdatedAt() *RuleUpdateOne {
	ruo.mutation.ClearUpdatedAt()
	return ruo
}

// SetRuleKey sets the "rule_key" field.
func (ruo *RuleUpdateOne) SetRuleKey(s string) *RuleUpdateOne {
	ruo.mutation.SetRuleKey(s)
	return ruo
}

// SetNillableRuleKey sets the "rule_key" field if the given value is not nil.
func (ruo *RuleUpdateOne) SetNillableRuleKey(s *string) *RuleUpdateOne {
	if s != nil {
		ruo.SetRuleKey(*s)
	}
	return ruo
}

// SetTemplateID sets the "template_id" field.
func (ruo *RuleUpdateOne) SetTemplateID(s string) *RuleUpdateOne {
	ruo.mutation.SetTemplateID(s)
	return ruo
}

// SetNillableTemplateID sets the "template_id" field if the given value is not nil.
func (ruo *RuleUpdateOne) SetNillableTemplateID(s *string) *RuleUpdateOne {
	if s != nil {
		ruo.SetTemplateID(*s)
	}
	return ruo
}

// ClearTemplateID clears the value of the "template_id" field.
func (ruo *RuleUpdateOne) ClearTemplateID() *RuleUpdateOne {
	ruo.mutation.ClearTemplateID()
	return ruo
}

// SetNodeKey sets the "node_key" field.
func (ruo *RuleUpdateOne) SetNodeKey(s string) *RuleUpdateOne {
	ruo.mutation.SetNodeKey(s)
	return ruo
}

// SetNillableNodeKey sets the "node_key" field if the given value is not nil.
func (ruo *RuleUpdateOne) SetNillableNodeKey(s *string) *RuleUpdateOne {
	if s != nil {
		ruo.SetNodeKey(*s)
	}
	return ruo
}

// ClearNodeKey clears the value of the "node_key" field.
func (ruo *RuleUpdateOne) ClearNodeKey() *RuleUpdateOne {
	ruo.mutation.ClearNodeKey()
	return ruo
}

// SetConditions sets the "conditions" field.
func (ruo *RuleUpdateOne) SetConditions(m map[string]interface{}) *RuleUpdateOne {
	ruo.mutation.SetConditions(m)
	return ruo
}

// SetActions sets the "actions" field.
func (ruo *RuleUpdateOne) SetActions(m map[string]interface{}) *RuleUpdateOne {
	ruo.mutation.SetActions(m)
	return ruo
}

// SetPriority sets the "priority" field.
func (ruo *RuleUpdateOne) SetPriority(i int) *RuleUpdateOne {
	ruo.mutation.ResetPriority()
	ruo.mutation.SetPriority(i)
	return ruo
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (ruo *RuleUpdateOne) SetNillablePriority(i *int) *RuleUpdateOne {
	if i != nil {
		ruo.SetPriority(*i)
	}
	return ruo
}

// AddPriority adds i to the "priority" field.
func (ruo *RuleUpdateOne) AddPriority(i int) *RuleUpdateOne {
	ruo.mutation.AddPriority(i)
	return ruo
}

// SetIsEnabled sets the "is_enabled" field.
func (ruo *RuleUpdateOne) SetIsEnabled(b bool) *RuleUpdateOne {
	ruo.mutation.SetIsEnabled(b)
	return ruo
}

// SetNillableIsEnabled sets the "is_enabled" field if the given value is not nil.
func (ruo *RuleUpdateOne) SetNillableIsEnabled(b *bool) *RuleUpdateOne {
	if b != nil {
		ruo.SetIsEnabled(*b)
	}
	return ruo
}

// SetEffectiveTime sets the "effective_time" field.
func (ruo *RuleUpdateOne) SetEffectiveTime(i int64) *RuleUpdateOne {
	ruo.mutation.ResetEffectiveTime()
	ruo.mutation.SetEffectiveTime(i)
	return ruo
}

// SetNillableEffectiveTime sets the "effective_time" field if the given value is not nil.
func (ruo *RuleUpdateOne) SetNillableEffectiveTime(i *int64) *RuleUpdateOne {
	if i != nil {
		ruo.SetEffectiveTime(*i)
	}
	return ruo
}

// AddEffectiveTime adds i to the "effective_time" field.
func (ruo *RuleUpdateOne) AddEffectiveTime(i int64) *RuleUpdateOne {
	ruo.mutation.AddEffectiveTime(i)
	return ruo
}

// ClearEffectiveTime clears the value of the "effective_time" field.
func (ruo *RuleUpdateOne) ClearEffectiveTime() *RuleUpdateOne {
	ruo.mutation.ClearEffectiveTime()
	return ruo
}

// SetExpireTime sets the "expire_time" field.
func (ruo *RuleUpdateOne) SetExpireTime(i int64) *RuleUpdateOne {
	ruo.mutation.ResetExpireTime()
	ruo.mutation.SetExpireTime(i)
	return ruo
}

// SetNillableExpireTime sets the "expire_time" field if the given value is not nil.
func (ruo *RuleUpdateOne) SetNillableExpireTime(i *int64) *RuleUpdateOne {
	if i != nil {
		ruo.SetExpireTime(*i)
	}
	return ruo
}

// AddExpireTime adds i to the "expire_time" field.
func (ruo *RuleUpdateOne) AddExpireTime(i int64) *RuleUpdateOne {
	ruo.mutation.AddExpireTime(i)
	return ruo
}

// ClearExpireTime clears the value of the "expire_time" field.
func (ruo *RuleUpdateOne) ClearExpireTime() *RuleUpdateOne {
	ruo.mutation.ClearExpireTime()
	return ruo
}

// Mutation returns the RuleMutation object of the builder.
func (ruo *RuleUpdateOne) Mutation() *RuleMutation {
	return ruo.mutation
}

// Where appends a list predicates to the RuleUpdate builder.
func (ruo *RuleUpdateOne) Where(ps ...predicate.Rule) *RuleUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RuleUpdateOne) Select(field string, fields ...string) *RuleUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Rule entity.
func (ruo *RuleUpdateOne) Save(ctx context.Context) (*Rule, error) {
	ruo.defaults()
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RuleUpdateOne) SaveX(ctx context.Context) *Rule {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RuleUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RuleUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ruo *RuleUpdateOne) defaults() {
	if _, ok := ruo.mutation.UpdatedAt(); !ok && !ruo.mutation.UpdatedAtCleared() {
		v := rule.UpdateDefaultUpdatedAt()
		ruo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruo *RuleUpdateOne) check() error {
	if v, ok := ruo.mutation.TenantID(); ok {
		if err := rule.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "Rule.tenant_id": %w`, err)}
		}
	}
	if v, ok := ruo.mutation.CreatedBy(); ok {
		if err := rule.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "Rule.created_by": %w`, err)}
		}
	}
	if v, ok := ruo.mutation.UpdatedBy(); ok {
		if err := rule.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "Rule.updated_by": %w`, err)}
		}
	}
	return nil
}

func (ruo *RuleUpdateOne) sqlSave(ctx context.Context) (_node *Rule, err error) {
	if err := ruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(rule.Table, rule.Columns, sqlgraph.NewFieldSpec(rule.FieldID, field.TypeString))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Rule.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, rule.FieldID)
		for _, f := range fields {
			if !rule.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != rule.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.Name(); ok {
		_spec.SetField(rule.FieldName, field.TypeString, value)
	}
	if ruo.mutation.NameCleared() {
		_spec.ClearField(rule.FieldName, field.TypeString)
	}
	if value, ok := ruo.mutation.Code(); ok {
		_spec.SetField(rule.FieldCode, field.TypeString, value)
	}
	if ruo.mutation.CodeCleared() {
		_spec.ClearField(rule.FieldCode, field.TypeString)
	}
	if value, ok := ruo.mutation.Description(); ok {
		_spec.SetField(rule.FieldDescription, field.TypeString, value)
	}
	if ruo.mutation.DescriptionCleared() {
		_spec.ClearField(rule.FieldDescription, field.TypeString)
	}
	if value, ok := ruo.mutation.GetType(); ok {
		_spec.SetField(rule.FieldType, field.TypeString, value)
	}
	if ruo.mutation.TypeCleared() {
		_spec.ClearField(rule.FieldType, field.TypeString)
	}
	if value, ok := ruo.mutation.Status(); ok {
		_spec.SetField(rule.FieldStatus, field.TypeString, value)
	}
	if ruo.mutation.StatusCleared() {
		_spec.ClearField(rule.FieldStatus, field.TypeString)
	}
	if value, ok := ruo.mutation.Extras(); ok {
		_spec.SetField(rule.FieldExtras, field.TypeJSON, value)
	}
	if ruo.mutation.ExtrasCleared() {
		_spec.ClearField(rule.FieldExtras, field.TypeJSON)
	}
	if value, ok := ruo.mutation.TenantID(); ok {
		_spec.SetField(rule.FieldTenantID, field.TypeString, value)
	}
	if ruo.mutation.TenantIDCleared() {
		_spec.ClearField(rule.FieldTenantID, field.TypeString)
	}
	if value, ok := ruo.mutation.CreatedBy(); ok {
		_spec.SetField(rule.FieldCreatedBy, field.TypeString, value)
	}
	if ruo.mutation.CreatedByCleared() {
		_spec.ClearField(rule.FieldCreatedBy, field.TypeString)
	}
	if value, ok := ruo.mutation.UpdatedBy(); ok {
		_spec.SetField(rule.FieldUpdatedBy, field.TypeString, value)
	}
	if ruo.mutation.UpdatedByCleared() {
		_spec.ClearField(rule.FieldUpdatedBy, field.TypeString)
	}
	if ruo.mutation.CreatedAtCleared() {
		_spec.ClearField(rule.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := ruo.mutation.UpdatedAt(); ok {
		_spec.SetField(rule.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := ruo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(rule.FieldUpdatedAt, field.TypeInt64, value)
	}
	if ruo.mutation.UpdatedAtCleared() {
		_spec.ClearField(rule.FieldUpdatedAt, field.TypeInt64)
	}
	if value, ok := ruo.mutation.RuleKey(); ok {
		_spec.SetField(rule.FieldRuleKey, field.TypeString, value)
	}
	if value, ok := ruo.mutation.TemplateID(); ok {
		_spec.SetField(rule.FieldTemplateID, field.TypeString, value)
	}
	if ruo.mutation.TemplateIDCleared() {
		_spec.ClearField(rule.FieldTemplateID, field.TypeString)
	}
	if value, ok := ruo.mutation.NodeKey(); ok {
		_spec.SetField(rule.FieldNodeKey, field.TypeString, value)
	}
	if ruo.mutation.NodeKeyCleared() {
		_spec.ClearField(rule.FieldNodeKey, field.TypeString)
	}
	if value, ok := ruo.mutation.Conditions(); ok {
		_spec.SetField(rule.FieldConditions, field.TypeJSON, value)
	}
	if value, ok := ruo.mutation.Actions(); ok {
		_spec.SetField(rule.FieldActions, field.TypeJSON, value)
	}
	if value, ok := ruo.mutation.Priority(); ok {
		_spec.SetField(rule.FieldPriority, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.AddedPriority(); ok {
		_spec.AddField(rule.FieldPriority, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.IsEnabled(); ok {
		_spec.SetField(rule.FieldIsEnabled, field.TypeBool, value)
	}
	if value, ok := ruo.mutation.EffectiveTime(); ok {
		_spec.SetField(rule.FieldEffectiveTime, field.TypeInt64, value)
	}
	if value, ok := ruo.mutation.AddedEffectiveTime(); ok {
		_spec.AddField(rule.FieldEffectiveTime, field.TypeInt64, value)
	}
	if ruo.mutation.EffectiveTimeCleared() {
		_spec.ClearField(rule.FieldEffectiveTime, field.TypeInt64)
	}
	if value, ok := ruo.mutation.ExpireTime(); ok {
		_spec.SetField(rule.FieldExpireTime, field.TypeInt64, value)
	}
	if value, ok := ruo.mutation.AddedExpireTime(); ok {
		_spec.AddField(rule.FieldExpireTime, field.TypeInt64, value)
	}
	if ruo.mutation.ExpireTimeCleared() {
		_spec.ClearField(rule.FieldExpireTime, field.TypeInt64)
	}
	_node = &Rule{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rule.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
