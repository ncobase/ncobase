// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"ncobase/core/workflow/data/ent/task"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Task is the model entity for the Task schema.
type Task struct {
	config `json:"-"`
	// ID of the ent.
	// primary key
	ID string `json:"id,omitempty"`
	// name
	Name string `json:"name,omitempty"`
	// description
	Description string `json:"description,omitempty"`
	// status: 0 activated, 1 unactivated, 2 disabled
	Status int `json:"status,omitempty"`
	// Process instance ID
	ProcessID string `json:"process_id,omitempty"`
	// Process template ID
	TemplateID string `json:"template_id,omitempty"`
	// Business document ID
	BusinessKey string `json:"business_key,omitempty"`
	// Unique identifier for the node
	NodeKey string `json:"node_key,omitempty"`
	// Node type
	NodeType string `json:"node_type,omitempty"`
	// Node configuration
	NodeConfig map[string]interface{} `json:"node_config,omitempty"`
	// Node rules
	NodeRules map[string]interface{} `json:"node_rules,omitempty"`
	// Node events
	NodeEvents map[string]interface{} `json:"node_events,omitempty"`
	// Task assignee
	Assignee string `json:"assignee,omitempty"`
	// Assignee's department
	AssigneeDept string `json:"assignee_dept,omitempty"`
	// Candidate assignees
	Candidates []interface{} `json:"candidates,omitempty"`
	// Delegated from user
	DelegatedFrom string `json:"delegated_from,omitempty"`
	// Delegation reason
	DelegatedReason string `json:"delegated_reason,omitempty"`
	// Whether task is delegated
	IsDelegated bool `json:"is_delegated,omitempty"`
	// Whether task is transferred
	IsTransferred bool `json:"is_transferred,omitempty"`
	// Start time
	StartTime time.Time `json:"start_time,omitempty"`
	// End time
	EndTime *time.Time `json:"end_time,omitempty"`
	// Due time
	DueTime *time.Time `json:"due_time,omitempty"`
	// Duration in seconds
	Duration int `json:"duration,omitempty"`
	// Priority level
	Priority int `json:"priority,omitempty"`
	// Whether timed out
	IsTimeout bool `json:"is_timeout,omitempty"`
	// Number of reminders sent
	ReminderCount int `json:"reminder_count,omitempty"`
	// Allow cancellation
	AllowCancel bool `json:"allow_cancel,omitempty"`
	// Allow urging
	AllowUrge bool `json:"allow_urge,omitempty"`
	// Allow delegation
	AllowDelegate bool `json:"allow_delegate,omitempty"`
	// Allow transfer
	AllowTransfer bool `json:"allow_transfer,omitempty"`
	// Whether draft is enabled
	IsDraftEnabled bool `json:"is_draft_enabled,omitempty"`
	// Whether auto start is enabled
	IsAutoStart bool `json:"is_auto_start,omitempty"`
	// Enable strict mode
	StrictMode bool `json:"strict_mode,omitempty"`
	// Extend properties
	Extras map[string]interface{} `json:"extras,omitempty"`
	// tenant id
	TenantID string `json:"tenant_id,omitempty"`
	// id of the creator
	CreatedBy string `json:"created_by,omitempty"`
	// id of the last updater
	UpdatedBy string `json:"updated_by,omitempty"`
	// created at
	CreatedAt int64 `json:"created_at,omitempty"`
	// updated at
	UpdatedAt int64 `json:"updated_at,omitempty"`
	// Task unique identifier
	TaskKey string `json:"task_key,omitempty"`
	// Processing action
	Action string `json:"action,omitempty"`
	// Processing comment
	Comment string `json:"comment,omitempty"`
	// Attachment information
	Attachments map[string]interface{} `json:"attachments,omitempty"`
	// Form data
	FormData map[string]interface{} `json:"form_data,omitempty"`
	// Task variables
	Variables map[string]interface{} `json:"variables,omitempty"`
	// Whether is resubmitted
	IsResubmit bool `json:"is_resubmit,omitempty"`
	// Claim time
	ClaimTime *time.Time `json:"claim_time,omitempty"`
	// Whether is urged
	IsUrged bool `json:"is_urged,omitempty"`
	// Number of urges
	UrgeCount    int `json:"urge_count,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Task) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case task.FieldNodeConfig, task.FieldNodeRules, task.FieldNodeEvents, task.FieldCandidates, task.FieldExtras, task.FieldAttachments, task.FieldFormData, task.FieldVariables:
			values[i] = new([]byte)
		case task.FieldIsDelegated, task.FieldIsTransferred, task.FieldIsTimeout, task.FieldAllowCancel, task.FieldAllowUrge, task.FieldAllowDelegate, task.FieldAllowTransfer, task.FieldIsDraftEnabled, task.FieldIsAutoStart, task.FieldStrictMode, task.FieldIsResubmit, task.FieldIsUrged:
			values[i] = new(sql.NullBool)
		case task.FieldStatus, task.FieldDuration, task.FieldPriority, task.FieldReminderCount, task.FieldCreatedAt, task.FieldUpdatedAt, task.FieldUrgeCount:
			values[i] = new(sql.NullInt64)
		case task.FieldID, task.FieldName, task.FieldDescription, task.FieldProcessID, task.FieldTemplateID, task.FieldBusinessKey, task.FieldNodeKey, task.FieldNodeType, task.FieldAssignee, task.FieldAssigneeDept, task.FieldDelegatedFrom, task.FieldDelegatedReason, task.FieldTenantID, task.FieldCreatedBy, task.FieldUpdatedBy, task.FieldTaskKey, task.FieldAction, task.FieldComment:
			values[i] = new(sql.NullString)
		case task.FieldStartTime, task.FieldEndTime, task.FieldDueTime, task.FieldClaimTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Task fields.
func (t *Task) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case task.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				t.ID = value.String
			}
		case task.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				t.Name = value.String
			}
		case task.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				t.Description = value.String
			}
		case task.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				t.Status = int(value.Int64)
			}
		case task.FieldProcessID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field process_id", values[i])
			} else if value.Valid {
				t.ProcessID = value.String
			}
		case task.FieldTemplateID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field template_id", values[i])
			} else if value.Valid {
				t.TemplateID = value.String
			}
		case task.FieldBusinessKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field business_key", values[i])
			} else if value.Valid {
				t.BusinessKey = value.String
			}
		case task.FieldNodeKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field node_key", values[i])
			} else if value.Valid {
				t.NodeKey = value.String
			}
		case task.FieldNodeType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field node_type", values[i])
			} else if value.Valid {
				t.NodeType = value.String
			}
		case task.FieldNodeConfig:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field node_config", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &t.NodeConfig); err != nil {
					return fmt.Errorf("unmarshal field node_config: %w", err)
				}
			}
		case task.FieldNodeRules:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field node_rules", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &t.NodeRules); err != nil {
					return fmt.Errorf("unmarshal field node_rules: %w", err)
				}
			}
		case task.FieldNodeEvents:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field node_events", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &t.NodeEvents); err != nil {
					return fmt.Errorf("unmarshal field node_events: %w", err)
				}
			}
		case task.FieldAssignee:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field assignee", values[i])
			} else if value.Valid {
				t.Assignee = value.String
			}
		case task.FieldAssigneeDept:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field assignee_dept", values[i])
			} else if value.Valid {
				t.AssigneeDept = value.String
			}
		case task.FieldCandidates:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field candidates", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &t.Candidates); err != nil {
					return fmt.Errorf("unmarshal field candidates: %w", err)
				}
			}
		case task.FieldDelegatedFrom:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field delegated_from", values[i])
			} else if value.Valid {
				t.DelegatedFrom = value.String
			}
		case task.FieldDelegatedReason:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field delegated_reason", values[i])
			} else if value.Valid {
				t.DelegatedReason = value.String
			}
		case task.FieldIsDelegated:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_delegated", values[i])
			} else if value.Valid {
				t.IsDelegated = value.Bool
			}
		case task.FieldIsTransferred:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_transferred", values[i])
			} else if value.Valid {
				t.IsTransferred = value.Bool
			}
		case task.FieldStartTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_time", values[i])
			} else if value.Valid {
				t.StartTime = value.Time
			}
		case task.FieldEndTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_time", values[i])
			} else if value.Valid {
				t.EndTime = new(time.Time)
				*t.EndTime = value.Time
			}
		case task.FieldDueTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field due_time", values[i])
			} else if value.Valid {
				t.DueTime = new(time.Time)
				*t.DueTime = value.Time
			}
		case task.FieldDuration:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field duration", values[i])
			} else if value.Valid {
				t.Duration = int(value.Int64)
			}
		case task.FieldPriority:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field priority", values[i])
			} else if value.Valid {
				t.Priority = int(value.Int64)
			}
		case task.FieldIsTimeout:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_timeout", values[i])
			} else if value.Valid {
				t.IsTimeout = value.Bool
			}
		case task.FieldReminderCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field reminder_count", values[i])
			} else if value.Valid {
				t.ReminderCount = int(value.Int64)
			}
		case task.FieldAllowCancel:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field allow_cancel", values[i])
			} else if value.Valid {
				t.AllowCancel = value.Bool
			}
		case task.FieldAllowUrge:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field allow_urge", values[i])
			} else if value.Valid {
				t.AllowUrge = value.Bool
			}
		case task.FieldAllowDelegate:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field allow_delegate", values[i])
			} else if value.Valid {
				t.AllowDelegate = value.Bool
			}
		case task.FieldAllowTransfer:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field allow_transfer", values[i])
			} else if value.Valid {
				t.AllowTransfer = value.Bool
			}
		case task.FieldIsDraftEnabled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_draft_enabled", values[i])
			} else if value.Valid {
				t.IsDraftEnabled = value.Bool
			}
		case task.FieldIsAutoStart:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_auto_start", values[i])
			} else if value.Valid {
				t.IsAutoStart = value.Bool
			}
		case task.FieldStrictMode:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field strict_mode", values[i])
			} else if value.Valid {
				t.StrictMode = value.Bool
			}
		case task.FieldExtras:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field extras", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &t.Extras); err != nil {
					return fmt.Errorf("unmarshal field extras: %w", err)
				}
			}
		case task.FieldTenantID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				t.TenantID = value.String
			}
		case task.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				t.CreatedBy = value.String
			}
		case task.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				t.UpdatedBy = value.String
			}
		case task.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				t.CreatedAt = value.Int64
			}
		case task.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				t.UpdatedAt = value.Int64
			}
		case task.FieldTaskKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field task_key", values[i])
			} else if value.Valid {
				t.TaskKey = value.String
			}
		case task.FieldAction:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field action", values[i])
			} else if value.Valid {
				t.Action = value.String
			}
		case task.FieldComment:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field comment", values[i])
			} else if value.Valid {
				t.Comment = value.String
			}
		case task.FieldAttachments:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field attachments", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &t.Attachments); err != nil {
					return fmt.Errorf("unmarshal field attachments: %w", err)
				}
			}
		case task.FieldFormData:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field form_data", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &t.FormData); err != nil {
					return fmt.Errorf("unmarshal field form_data: %w", err)
				}
			}
		case task.FieldVariables:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field variables", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &t.Variables); err != nil {
					return fmt.Errorf("unmarshal field variables: %w", err)
				}
			}
		case task.FieldIsResubmit:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_resubmit", values[i])
			} else if value.Valid {
				t.IsResubmit = value.Bool
			}
		case task.FieldClaimTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field claim_time", values[i])
			} else if value.Valid {
				t.ClaimTime = new(time.Time)
				*t.ClaimTime = value.Time
			}
		case task.FieldIsUrged:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_urged", values[i])
			} else if value.Valid {
				t.IsUrged = value.Bool
			}
		case task.FieldUrgeCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field urge_count", values[i])
			} else if value.Valid {
				t.UrgeCount = int(value.Int64)
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Task.
// This includes values selected through modifiers, order, etc.
func (t *Task) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// Update returns a builder for updating this Task.
// Note that you need to call Task.Unwrap() before calling this method if this Task
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Task) Update() *TaskUpdateOne {
	return NewTaskClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Task entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Task) Unwrap() *Task {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Task is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Task) String() string {
	var builder strings.Builder
	builder.WriteString("Task(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("name=")
	builder.WriteString(t.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(t.Description)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", t.Status))
	builder.WriteString(", ")
	builder.WriteString("process_id=")
	builder.WriteString(t.ProcessID)
	builder.WriteString(", ")
	builder.WriteString("template_id=")
	builder.WriteString(t.TemplateID)
	builder.WriteString(", ")
	builder.WriteString("business_key=")
	builder.WriteString(t.BusinessKey)
	builder.WriteString(", ")
	builder.WriteString("node_key=")
	builder.WriteString(t.NodeKey)
	builder.WriteString(", ")
	builder.WriteString("node_type=")
	builder.WriteString(t.NodeType)
	builder.WriteString(", ")
	builder.WriteString("node_config=")
	builder.WriteString(fmt.Sprintf("%v", t.NodeConfig))
	builder.WriteString(", ")
	builder.WriteString("node_rules=")
	builder.WriteString(fmt.Sprintf("%v", t.NodeRules))
	builder.WriteString(", ")
	builder.WriteString("node_events=")
	builder.WriteString(fmt.Sprintf("%v", t.NodeEvents))
	builder.WriteString(", ")
	builder.WriteString("assignee=")
	builder.WriteString(t.Assignee)
	builder.WriteString(", ")
	builder.WriteString("assignee_dept=")
	builder.WriteString(t.AssigneeDept)
	builder.WriteString(", ")
	builder.WriteString("candidates=")
	builder.WriteString(fmt.Sprintf("%v", t.Candidates))
	builder.WriteString(", ")
	builder.WriteString("delegated_from=")
	builder.WriteString(t.DelegatedFrom)
	builder.WriteString(", ")
	builder.WriteString("delegated_reason=")
	builder.WriteString(t.DelegatedReason)
	builder.WriteString(", ")
	builder.WriteString("is_delegated=")
	builder.WriteString(fmt.Sprintf("%v", t.IsDelegated))
	builder.WriteString(", ")
	builder.WriteString("is_transferred=")
	builder.WriteString(fmt.Sprintf("%v", t.IsTransferred))
	builder.WriteString(", ")
	builder.WriteString("start_time=")
	builder.WriteString(t.StartTime.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := t.EndTime; v != nil {
		builder.WriteString("end_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := t.DueTime; v != nil {
		builder.WriteString("due_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("duration=")
	builder.WriteString(fmt.Sprintf("%v", t.Duration))
	builder.WriteString(", ")
	builder.WriteString("priority=")
	builder.WriteString(fmt.Sprintf("%v", t.Priority))
	builder.WriteString(", ")
	builder.WriteString("is_timeout=")
	builder.WriteString(fmt.Sprintf("%v", t.IsTimeout))
	builder.WriteString(", ")
	builder.WriteString("reminder_count=")
	builder.WriteString(fmt.Sprintf("%v", t.ReminderCount))
	builder.WriteString(", ")
	builder.WriteString("allow_cancel=")
	builder.WriteString(fmt.Sprintf("%v", t.AllowCancel))
	builder.WriteString(", ")
	builder.WriteString("allow_urge=")
	builder.WriteString(fmt.Sprintf("%v", t.AllowUrge))
	builder.WriteString(", ")
	builder.WriteString("allow_delegate=")
	builder.WriteString(fmt.Sprintf("%v", t.AllowDelegate))
	builder.WriteString(", ")
	builder.WriteString("allow_transfer=")
	builder.WriteString(fmt.Sprintf("%v", t.AllowTransfer))
	builder.WriteString(", ")
	builder.WriteString("is_draft_enabled=")
	builder.WriteString(fmt.Sprintf("%v", t.IsDraftEnabled))
	builder.WriteString(", ")
	builder.WriteString("is_auto_start=")
	builder.WriteString(fmt.Sprintf("%v", t.IsAutoStart))
	builder.WriteString(", ")
	builder.WriteString("strict_mode=")
	builder.WriteString(fmt.Sprintf("%v", t.StrictMode))
	builder.WriteString(", ")
	builder.WriteString("extras=")
	builder.WriteString(fmt.Sprintf("%v", t.Extras))
	builder.WriteString(", ")
	builder.WriteString("tenant_id=")
	builder.WriteString(t.TenantID)
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(t.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(t.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", t.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", t.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("task_key=")
	builder.WriteString(t.TaskKey)
	builder.WriteString(", ")
	builder.WriteString("action=")
	builder.WriteString(t.Action)
	builder.WriteString(", ")
	builder.WriteString("comment=")
	builder.WriteString(t.Comment)
	builder.WriteString(", ")
	builder.WriteString("attachments=")
	builder.WriteString(fmt.Sprintf("%v", t.Attachments))
	builder.WriteString(", ")
	builder.WriteString("form_data=")
	builder.WriteString(fmt.Sprintf("%v", t.FormData))
	builder.WriteString(", ")
	builder.WriteString("variables=")
	builder.WriteString(fmt.Sprintf("%v", t.Variables))
	builder.WriteString(", ")
	builder.WriteString("is_resubmit=")
	builder.WriteString(fmt.Sprintf("%v", t.IsResubmit))
	builder.WriteString(", ")
	if v := t.ClaimTime; v != nil {
		builder.WriteString("claim_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("is_urged=")
	builder.WriteString(fmt.Sprintf("%v", t.IsUrged))
	builder.WriteString(", ")
	builder.WriteString("urge_count=")
	builder.WriteString(fmt.Sprintf("%v", t.UrgeCount))
	builder.WriteByte(')')
	return builder.String()
}

// Tasks is a parsable slice of Task.
type Tasks []*Task
