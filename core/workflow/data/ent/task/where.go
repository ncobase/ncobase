// Code generated by ent, DO NOT EDIT.

package task

import (
	"ncobase/core/workflow/data/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldName, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldDescription, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldStatus, v))
}

// ProcessID applies equality check predicate on the "process_id" field. It's identical to ProcessIDEQ.
func ProcessID(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldProcessID, v))
}

// TemplateID applies equality check predicate on the "template_id" field. It's identical to TemplateIDEQ.
func TemplateID(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldTemplateID, v))
}

// BusinessKey applies equality check predicate on the "business_key" field. It's identical to BusinessKeyEQ.
func BusinessKey(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldBusinessKey, v))
}

// NodeKey applies equality check predicate on the "node_key" field. It's identical to NodeKeyEQ.
func NodeKey(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldNodeKey, v))
}

// NodeType applies equality check predicate on the "node_type" field. It's identical to NodeTypeEQ.
func NodeType(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldNodeType, v))
}

// DelegatedFrom applies equality check predicate on the "delegated_from" field. It's identical to DelegatedFromEQ.
func DelegatedFrom(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldDelegatedFrom, v))
}

// DelegatedReason applies equality check predicate on the "delegated_reason" field. It's identical to DelegatedReasonEQ.
func DelegatedReason(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldDelegatedReason, v))
}

// IsDelegated applies equality check predicate on the "is_delegated" field. It's identical to IsDelegatedEQ.
func IsDelegated(v bool) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldIsDelegated, v))
}

// IsTransferred applies equality check predicate on the "is_transferred" field. It's identical to IsTransferredEQ.
func IsTransferred(v bool) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldIsTransferred, v))
}

// StartTime applies equality check predicate on the "start_time" field. It's identical to StartTimeEQ.
func StartTime(v int64) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldStartTime, v))
}

// EndTime applies equality check predicate on the "end_time" field. It's identical to EndTimeEQ.
func EndTime(v int64) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldEndTime, v))
}

// DueTime applies equality check predicate on the "due_time" field. It's identical to DueTimeEQ.
func DueTime(v int64) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldDueTime, v))
}

// Duration applies equality check predicate on the "duration" field. It's identical to DurationEQ.
func Duration(v int) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldDuration, v))
}

// Priority applies equality check predicate on the "priority" field. It's identical to PriorityEQ.
func Priority(v int) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldPriority, v))
}

// IsTimeout applies equality check predicate on the "is_timeout" field. It's identical to IsTimeoutEQ.
func IsTimeout(v bool) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldIsTimeout, v))
}

// ReminderCount applies equality check predicate on the "reminder_count" field. It's identical to ReminderCountEQ.
func ReminderCount(v int) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldReminderCount, v))
}

// AllowCancel applies equality check predicate on the "allow_cancel" field. It's identical to AllowCancelEQ.
func AllowCancel(v bool) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldAllowCancel, v))
}

// AllowUrge applies equality check predicate on the "allow_urge" field. It's identical to AllowUrgeEQ.
func AllowUrge(v bool) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldAllowUrge, v))
}

// AllowDelegate applies equality check predicate on the "allow_delegate" field. It's identical to AllowDelegateEQ.
func AllowDelegate(v bool) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldAllowDelegate, v))
}

// AllowTransfer applies equality check predicate on the "allow_transfer" field. It's identical to AllowTransferEQ.
func AllowTransfer(v bool) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldAllowTransfer, v))
}

// IsDraftEnabled applies equality check predicate on the "is_draft_enabled" field. It's identical to IsDraftEnabledEQ.
func IsDraftEnabled(v bool) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldIsDraftEnabled, v))
}

// IsAutoStart applies equality check predicate on the "is_auto_start" field. It's identical to IsAutoStartEQ.
func IsAutoStart(v bool) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldIsAutoStart, v))
}

// StrictMode applies equality check predicate on the "strict_mode" field. It's identical to StrictModeEQ.
func StrictMode(v bool) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldStrictMode, v))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldTenantID, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldCreatedBy, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldUpdatedBy, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v int64) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v int64) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldUpdatedAt, v))
}

// TaskKey applies equality check predicate on the "task_key" field. It's identical to TaskKeyEQ.
func TaskKey(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldTaskKey, v))
}

// ParentID applies equality check predicate on the "parent_id" field. It's identical to ParentIDEQ.
func ParentID(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldParentID, v))
}

// Action applies equality check predicate on the "action" field. It's identical to ActionEQ.
func Action(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldAction, v))
}

// Comment applies equality check predicate on the "comment" field. It's identical to CommentEQ.
func Comment(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldComment, v))
}

// IsResubmit applies equality check predicate on the "is_resubmit" field. It's identical to IsResubmitEQ.
func IsResubmit(v bool) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldIsResubmit, v))
}

// ClaimTime applies equality check predicate on the "claim_time" field. It's identical to ClaimTimeEQ.
func ClaimTime(v int64) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldClaimTime, v))
}

// IsUrged applies equality check predicate on the "is_urged" field. It's identical to IsUrgedEQ.
func IsUrged(v bool) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldIsUrged, v))
}

// UrgeCount applies equality check predicate on the "urge_count" field. It's identical to UrgeCountEQ.
func UrgeCount(v int) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldUrgeCount, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldName, v))
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldName))
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldName))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldName, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldDescription, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusIsNil applies the IsNil predicate on the "status" field.
func StatusIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldStatus))
}

// StatusNotNil applies the NotNil predicate on the "status" field.
func StatusNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldStatus))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldStatus, v))
}

// ProcessIDEQ applies the EQ predicate on the "process_id" field.
func ProcessIDEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldProcessID, v))
}

// ProcessIDNEQ applies the NEQ predicate on the "process_id" field.
func ProcessIDNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldProcessID, v))
}

// ProcessIDIn applies the In predicate on the "process_id" field.
func ProcessIDIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldProcessID, vs...))
}

// ProcessIDNotIn applies the NotIn predicate on the "process_id" field.
func ProcessIDNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldProcessID, vs...))
}

// ProcessIDGT applies the GT predicate on the "process_id" field.
func ProcessIDGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldProcessID, v))
}

// ProcessIDGTE applies the GTE predicate on the "process_id" field.
func ProcessIDGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldProcessID, v))
}

// ProcessIDLT applies the LT predicate on the "process_id" field.
func ProcessIDLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldProcessID, v))
}

// ProcessIDLTE applies the LTE predicate on the "process_id" field.
func ProcessIDLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldProcessID, v))
}

// ProcessIDContains applies the Contains predicate on the "process_id" field.
func ProcessIDContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldProcessID, v))
}

// ProcessIDHasPrefix applies the HasPrefix predicate on the "process_id" field.
func ProcessIDHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldProcessID, v))
}

// ProcessIDHasSuffix applies the HasSuffix predicate on the "process_id" field.
func ProcessIDHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldProcessID, v))
}

// ProcessIDEqualFold applies the EqualFold predicate on the "process_id" field.
func ProcessIDEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldProcessID, v))
}

// ProcessIDContainsFold applies the ContainsFold predicate on the "process_id" field.
func ProcessIDContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldProcessID, v))
}

// TemplateIDEQ applies the EQ predicate on the "template_id" field.
func TemplateIDEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldTemplateID, v))
}

// TemplateIDNEQ applies the NEQ predicate on the "template_id" field.
func TemplateIDNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldTemplateID, v))
}

// TemplateIDIn applies the In predicate on the "template_id" field.
func TemplateIDIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldTemplateID, vs...))
}

// TemplateIDNotIn applies the NotIn predicate on the "template_id" field.
func TemplateIDNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldTemplateID, vs...))
}

// TemplateIDGT applies the GT predicate on the "template_id" field.
func TemplateIDGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldTemplateID, v))
}

// TemplateIDGTE applies the GTE predicate on the "template_id" field.
func TemplateIDGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldTemplateID, v))
}

// TemplateIDLT applies the LT predicate on the "template_id" field.
func TemplateIDLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldTemplateID, v))
}

// TemplateIDLTE applies the LTE predicate on the "template_id" field.
func TemplateIDLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldTemplateID, v))
}

// TemplateIDContains applies the Contains predicate on the "template_id" field.
func TemplateIDContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldTemplateID, v))
}

// TemplateIDHasPrefix applies the HasPrefix predicate on the "template_id" field.
func TemplateIDHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldTemplateID, v))
}

// TemplateIDHasSuffix applies the HasSuffix predicate on the "template_id" field.
func TemplateIDHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldTemplateID, v))
}

// TemplateIDEqualFold applies the EqualFold predicate on the "template_id" field.
func TemplateIDEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldTemplateID, v))
}

// TemplateIDContainsFold applies the ContainsFold predicate on the "template_id" field.
func TemplateIDContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldTemplateID, v))
}

// BusinessKeyEQ applies the EQ predicate on the "business_key" field.
func BusinessKeyEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldBusinessKey, v))
}

// BusinessKeyNEQ applies the NEQ predicate on the "business_key" field.
func BusinessKeyNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldBusinessKey, v))
}

// BusinessKeyIn applies the In predicate on the "business_key" field.
func BusinessKeyIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldBusinessKey, vs...))
}

// BusinessKeyNotIn applies the NotIn predicate on the "business_key" field.
func BusinessKeyNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldBusinessKey, vs...))
}

// BusinessKeyGT applies the GT predicate on the "business_key" field.
func BusinessKeyGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldBusinessKey, v))
}

// BusinessKeyGTE applies the GTE predicate on the "business_key" field.
func BusinessKeyGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldBusinessKey, v))
}

// BusinessKeyLT applies the LT predicate on the "business_key" field.
func BusinessKeyLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldBusinessKey, v))
}

// BusinessKeyLTE applies the LTE predicate on the "business_key" field.
func BusinessKeyLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldBusinessKey, v))
}

// BusinessKeyContains applies the Contains predicate on the "business_key" field.
func BusinessKeyContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldBusinessKey, v))
}

// BusinessKeyHasPrefix applies the HasPrefix predicate on the "business_key" field.
func BusinessKeyHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldBusinessKey, v))
}

// BusinessKeyHasSuffix applies the HasSuffix predicate on the "business_key" field.
func BusinessKeyHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldBusinessKey, v))
}

// BusinessKeyEqualFold applies the EqualFold predicate on the "business_key" field.
func BusinessKeyEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldBusinessKey, v))
}

// BusinessKeyContainsFold applies the ContainsFold predicate on the "business_key" field.
func BusinessKeyContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldBusinessKey, v))
}

// NodeKeyEQ applies the EQ predicate on the "node_key" field.
func NodeKeyEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldNodeKey, v))
}

// NodeKeyNEQ applies the NEQ predicate on the "node_key" field.
func NodeKeyNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldNodeKey, v))
}

// NodeKeyIn applies the In predicate on the "node_key" field.
func NodeKeyIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldNodeKey, vs...))
}

// NodeKeyNotIn applies the NotIn predicate on the "node_key" field.
func NodeKeyNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldNodeKey, vs...))
}

// NodeKeyGT applies the GT predicate on the "node_key" field.
func NodeKeyGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldNodeKey, v))
}

// NodeKeyGTE applies the GTE predicate on the "node_key" field.
func NodeKeyGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldNodeKey, v))
}

// NodeKeyLT applies the LT predicate on the "node_key" field.
func NodeKeyLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldNodeKey, v))
}

// NodeKeyLTE applies the LTE predicate on the "node_key" field.
func NodeKeyLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldNodeKey, v))
}

// NodeKeyContains applies the Contains predicate on the "node_key" field.
func NodeKeyContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldNodeKey, v))
}

// NodeKeyHasPrefix applies the HasPrefix predicate on the "node_key" field.
func NodeKeyHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldNodeKey, v))
}

// NodeKeyHasSuffix applies the HasSuffix predicate on the "node_key" field.
func NodeKeyHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldNodeKey, v))
}

// NodeKeyEqualFold applies the EqualFold predicate on the "node_key" field.
func NodeKeyEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldNodeKey, v))
}

// NodeKeyContainsFold applies the ContainsFold predicate on the "node_key" field.
func NodeKeyContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldNodeKey, v))
}

// NodeTypeEQ applies the EQ predicate on the "node_type" field.
func NodeTypeEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldNodeType, v))
}

// NodeTypeNEQ applies the NEQ predicate on the "node_type" field.
func NodeTypeNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldNodeType, v))
}

// NodeTypeIn applies the In predicate on the "node_type" field.
func NodeTypeIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldNodeType, vs...))
}

// NodeTypeNotIn applies the NotIn predicate on the "node_type" field.
func NodeTypeNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldNodeType, vs...))
}

// NodeTypeGT applies the GT predicate on the "node_type" field.
func NodeTypeGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldNodeType, v))
}

// NodeTypeGTE applies the GTE predicate on the "node_type" field.
func NodeTypeGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldNodeType, v))
}

// NodeTypeLT applies the LT predicate on the "node_type" field.
func NodeTypeLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldNodeType, v))
}

// NodeTypeLTE applies the LTE predicate on the "node_type" field.
func NodeTypeLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldNodeType, v))
}

// NodeTypeContains applies the Contains predicate on the "node_type" field.
func NodeTypeContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldNodeType, v))
}

// NodeTypeHasPrefix applies the HasPrefix predicate on the "node_type" field.
func NodeTypeHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldNodeType, v))
}

// NodeTypeHasSuffix applies the HasSuffix predicate on the "node_type" field.
func NodeTypeHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldNodeType, v))
}

// NodeTypeEqualFold applies the EqualFold predicate on the "node_type" field.
func NodeTypeEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldNodeType, v))
}

// NodeTypeContainsFold applies the ContainsFold predicate on the "node_type" field.
func NodeTypeContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldNodeType, v))
}

// NodeConfigIsNil applies the IsNil predicate on the "node_config" field.
func NodeConfigIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldNodeConfig))
}

// NodeConfigNotNil applies the NotNil predicate on the "node_config" field.
func NodeConfigNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldNodeConfig))
}

// NodeRulesIsNil applies the IsNil predicate on the "node_rules" field.
func NodeRulesIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldNodeRules))
}

// NodeRulesNotNil applies the NotNil predicate on the "node_rules" field.
func NodeRulesNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldNodeRules))
}

// NodeEventsIsNil applies the IsNil predicate on the "node_events" field.
func NodeEventsIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldNodeEvents))
}

// NodeEventsNotNil applies the NotNil predicate on the "node_events" field.
func NodeEventsNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldNodeEvents))
}

// DelegatedFromEQ applies the EQ predicate on the "delegated_from" field.
func DelegatedFromEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldDelegatedFrom, v))
}

// DelegatedFromNEQ applies the NEQ predicate on the "delegated_from" field.
func DelegatedFromNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldDelegatedFrom, v))
}

// DelegatedFromIn applies the In predicate on the "delegated_from" field.
func DelegatedFromIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldDelegatedFrom, vs...))
}

// DelegatedFromNotIn applies the NotIn predicate on the "delegated_from" field.
func DelegatedFromNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldDelegatedFrom, vs...))
}

// DelegatedFromGT applies the GT predicate on the "delegated_from" field.
func DelegatedFromGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldDelegatedFrom, v))
}

// DelegatedFromGTE applies the GTE predicate on the "delegated_from" field.
func DelegatedFromGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldDelegatedFrom, v))
}

// DelegatedFromLT applies the LT predicate on the "delegated_from" field.
func DelegatedFromLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldDelegatedFrom, v))
}

// DelegatedFromLTE applies the LTE predicate on the "delegated_from" field.
func DelegatedFromLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldDelegatedFrom, v))
}

// DelegatedFromContains applies the Contains predicate on the "delegated_from" field.
func DelegatedFromContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldDelegatedFrom, v))
}

// DelegatedFromHasPrefix applies the HasPrefix predicate on the "delegated_from" field.
func DelegatedFromHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldDelegatedFrom, v))
}

// DelegatedFromHasSuffix applies the HasSuffix predicate on the "delegated_from" field.
func DelegatedFromHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldDelegatedFrom, v))
}

// DelegatedFromIsNil applies the IsNil predicate on the "delegated_from" field.
func DelegatedFromIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldDelegatedFrom))
}

// DelegatedFromNotNil applies the NotNil predicate on the "delegated_from" field.
func DelegatedFromNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldDelegatedFrom))
}

// DelegatedFromEqualFold applies the EqualFold predicate on the "delegated_from" field.
func DelegatedFromEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldDelegatedFrom, v))
}

// DelegatedFromContainsFold applies the ContainsFold predicate on the "delegated_from" field.
func DelegatedFromContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldDelegatedFrom, v))
}

// DelegatedReasonEQ applies the EQ predicate on the "delegated_reason" field.
func DelegatedReasonEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldDelegatedReason, v))
}

// DelegatedReasonNEQ applies the NEQ predicate on the "delegated_reason" field.
func DelegatedReasonNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldDelegatedReason, v))
}

// DelegatedReasonIn applies the In predicate on the "delegated_reason" field.
func DelegatedReasonIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldDelegatedReason, vs...))
}

// DelegatedReasonNotIn applies the NotIn predicate on the "delegated_reason" field.
func DelegatedReasonNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldDelegatedReason, vs...))
}

// DelegatedReasonGT applies the GT predicate on the "delegated_reason" field.
func DelegatedReasonGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldDelegatedReason, v))
}

// DelegatedReasonGTE applies the GTE predicate on the "delegated_reason" field.
func DelegatedReasonGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldDelegatedReason, v))
}

// DelegatedReasonLT applies the LT predicate on the "delegated_reason" field.
func DelegatedReasonLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldDelegatedReason, v))
}

// DelegatedReasonLTE applies the LTE predicate on the "delegated_reason" field.
func DelegatedReasonLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldDelegatedReason, v))
}

// DelegatedReasonContains applies the Contains predicate on the "delegated_reason" field.
func DelegatedReasonContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldDelegatedReason, v))
}

// DelegatedReasonHasPrefix applies the HasPrefix predicate on the "delegated_reason" field.
func DelegatedReasonHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldDelegatedReason, v))
}

// DelegatedReasonHasSuffix applies the HasSuffix predicate on the "delegated_reason" field.
func DelegatedReasonHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldDelegatedReason, v))
}

// DelegatedReasonIsNil applies the IsNil predicate on the "delegated_reason" field.
func DelegatedReasonIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldDelegatedReason))
}

// DelegatedReasonNotNil applies the NotNil predicate on the "delegated_reason" field.
func DelegatedReasonNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldDelegatedReason))
}

// DelegatedReasonEqualFold applies the EqualFold predicate on the "delegated_reason" field.
func DelegatedReasonEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldDelegatedReason, v))
}

// DelegatedReasonContainsFold applies the ContainsFold predicate on the "delegated_reason" field.
func DelegatedReasonContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldDelegatedReason, v))
}

// IsDelegatedEQ applies the EQ predicate on the "is_delegated" field.
func IsDelegatedEQ(v bool) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldIsDelegated, v))
}

// IsDelegatedNEQ applies the NEQ predicate on the "is_delegated" field.
func IsDelegatedNEQ(v bool) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldIsDelegated, v))
}

// IsTransferredEQ applies the EQ predicate on the "is_transferred" field.
func IsTransferredEQ(v bool) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldIsTransferred, v))
}

// IsTransferredNEQ applies the NEQ predicate on the "is_transferred" field.
func IsTransferredNEQ(v bool) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldIsTransferred, v))
}

// StartTimeEQ applies the EQ predicate on the "start_time" field.
func StartTimeEQ(v int64) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldStartTime, v))
}

// StartTimeNEQ applies the NEQ predicate on the "start_time" field.
func StartTimeNEQ(v int64) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldStartTime, v))
}

// StartTimeIn applies the In predicate on the "start_time" field.
func StartTimeIn(vs ...int64) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldStartTime, vs...))
}

// StartTimeNotIn applies the NotIn predicate on the "start_time" field.
func StartTimeNotIn(vs ...int64) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldStartTime, vs...))
}

// StartTimeGT applies the GT predicate on the "start_time" field.
func StartTimeGT(v int64) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldStartTime, v))
}

// StartTimeGTE applies the GTE predicate on the "start_time" field.
func StartTimeGTE(v int64) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldStartTime, v))
}

// StartTimeLT applies the LT predicate on the "start_time" field.
func StartTimeLT(v int64) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldStartTime, v))
}

// StartTimeLTE applies the LTE predicate on the "start_time" field.
func StartTimeLTE(v int64) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldStartTime, v))
}

// EndTimeEQ applies the EQ predicate on the "end_time" field.
func EndTimeEQ(v int64) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldEndTime, v))
}

// EndTimeNEQ applies the NEQ predicate on the "end_time" field.
func EndTimeNEQ(v int64) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldEndTime, v))
}

// EndTimeIn applies the In predicate on the "end_time" field.
func EndTimeIn(vs ...int64) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldEndTime, vs...))
}

// EndTimeNotIn applies the NotIn predicate on the "end_time" field.
func EndTimeNotIn(vs ...int64) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldEndTime, vs...))
}

// EndTimeGT applies the GT predicate on the "end_time" field.
func EndTimeGT(v int64) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldEndTime, v))
}

// EndTimeGTE applies the GTE predicate on the "end_time" field.
func EndTimeGTE(v int64) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldEndTime, v))
}

// EndTimeLT applies the LT predicate on the "end_time" field.
func EndTimeLT(v int64) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldEndTime, v))
}

// EndTimeLTE applies the LTE predicate on the "end_time" field.
func EndTimeLTE(v int64) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldEndTime, v))
}

// EndTimeIsNil applies the IsNil predicate on the "end_time" field.
func EndTimeIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldEndTime))
}

// EndTimeNotNil applies the NotNil predicate on the "end_time" field.
func EndTimeNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldEndTime))
}

// DueTimeEQ applies the EQ predicate on the "due_time" field.
func DueTimeEQ(v int64) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldDueTime, v))
}

// DueTimeNEQ applies the NEQ predicate on the "due_time" field.
func DueTimeNEQ(v int64) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldDueTime, v))
}

// DueTimeIn applies the In predicate on the "due_time" field.
func DueTimeIn(vs ...int64) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldDueTime, vs...))
}

// DueTimeNotIn applies the NotIn predicate on the "due_time" field.
func DueTimeNotIn(vs ...int64) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldDueTime, vs...))
}

// DueTimeGT applies the GT predicate on the "due_time" field.
func DueTimeGT(v int64) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldDueTime, v))
}

// DueTimeGTE applies the GTE predicate on the "due_time" field.
func DueTimeGTE(v int64) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldDueTime, v))
}

// DueTimeLT applies the LT predicate on the "due_time" field.
func DueTimeLT(v int64) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldDueTime, v))
}

// DueTimeLTE applies the LTE predicate on the "due_time" field.
func DueTimeLTE(v int64) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldDueTime, v))
}

// DueTimeIsNil applies the IsNil predicate on the "due_time" field.
func DueTimeIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldDueTime))
}

// DueTimeNotNil applies the NotNil predicate on the "due_time" field.
func DueTimeNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldDueTime))
}

// DurationEQ applies the EQ predicate on the "duration" field.
func DurationEQ(v int) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldDuration, v))
}

// DurationNEQ applies the NEQ predicate on the "duration" field.
func DurationNEQ(v int) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldDuration, v))
}

// DurationIn applies the In predicate on the "duration" field.
func DurationIn(vs ...int) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldDuration, vs...))
}

// DurationNotIn applies the NotIn predicate on the "duration" field.
func DurationNotIn(vs ...int) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldDuration, vs...))
}

// DurationGT applies the GT predicate on the "duration" field.
func DurationGT(v int) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldDuration, v))
}

// DurationGTE applies the GTE predicate on the "duration" field.
func DurationGTE(v int) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldDuration, v))
}

// DurationLT applies the LT predicate on the "duration" field.
func DurationLT(v int) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldDuration, v))
}

// DurationLTE applies the LTE predicate on the "duration" field.
func DurationLTE(v int) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldDuration, v))
}

// DurationIsNil applies the IsNil predicate on the "duration" field.
func DurationIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldDuration))
}

// DurationNotNil applies the NotNil predicate on the "duration" field.
func DurationNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldDuration))
}

// PriorityEQ applies the EQ predicate on the "priority" field.
func PriorityEQ(v int) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldPriority, v))
}

// PriorityNEQ applies the NEQ predicate on the "priority" field.
func PriorityNEQ(v int) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldPriority, v))
}

// PriorityIn applies the In predicate on the "priority" field.
func PriorityIn(vs ...int) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldPriority, vs...))
}

// PriorityNotIn applies the NotIn predicate on the "priority" field.
func PriorityNotIn(vs ...int) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldPriority, vs...))
}

// PriorityGT applies the GT predicate on the "priority" field.
func PriorityGT(v int) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldPriority, v))
}

// PriorityGTE applies the GTE predicate on the "priority" field.
func PriorityGTE(v int) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldPriority, v))
}

// PriorityLT applies the LT predicate on the "priority" field.
func PriorityLT(v int) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldPriority, v))
}

// PriorityLTE applies the LTE predicate on the "priority" field.
func PriorityLTE(v int) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldPriority, v))
}

// IsTimeoutEQ applies the EQ predicate on the "is_timeout" field.
func IsTimeoutEQ(v bool) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldIsTimeout, v))
}

// IsTimeoutNEQ applies the NEQ predicate on the "is_timeout" field.
func IsTimeoutNEQ(v bool) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldIsTimeout, v))
}

// ReminderCountEQ applies the EQ predicate on the "reminder_count" field.
func ReminderCountEQ(v int) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldReminderCount, v))
}

// ReminderCountNEQ applies the NEQ predicate on the "reminder_count" field.
func ReminderCountNEQ(v int) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldReminderCount, v))
}

// ReminderCountIn applies the In predicate on the "reminder_count" field.
func ReminderCountIn(vs ...int) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldReminderCount, vs...))
}

// ReminderCountNotIn applies the NotIn predicate on the "reminder_count" field.
func ReminderCountNotIn(vs ...int) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldReminderCount, vs...))
}

// ReminderCountGT applies the GT predicate on the "reminder_count" field.
func ReminderCountGT(v int) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldReminderCount, v))
}

// ReminderCountGTE applies the GTE predicate on the "reminder_count" field.
func ReminderCountGTE(v int) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldReminderCount, v))
}

// ReminderCountLT applies the LT predicate on the "reminder_count" field.
func ReminderCountLT(v int) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldReminderCount, v))
}

// ReminderCountLTE applies the LTE predicate on the "reminder_count" field.
func ReminderCountLTE(v int) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldReminderCount, v))
}

// AllowCancelEQ applies the EQ predicate on the "allow_cancel" field.
func AllowCancelEQ(v bool) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldAllowCancel, v))
}

// AllowCancelNEQ applies the NEQ predicate on the "allow_cancel" field.
func AllowCancelNEQ(v bool) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldAllowCancel, v))
}

// AllowUrgeEQ applies the EQ predicate on the "allow_urge" field.
func AllowUrgeEQ(v bool) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldAllowUrge, v))
}

// AllowUrgeNEQ applies the NEQ predicate on the "allow_urge" field.
func AllowUrgeNEQ(v bool) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldAllowUrge, v))
}

// AllowDelegateEQ applies the EQ predicate on the "allow_delegate" field.
func AllowDelegateEQ(v bool) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldAllowDelegate, v))
}

// AllowDelegateNEQ applies the NEQ predicate on the "allow_delegate" field.
func AllowDelegateNEQ(v bool) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldAllowDelegate, v))
}

// AllowTransferEQ applies the EQ predicate on the "allow_transfer" field.
func AllowTransferEQ(v bool) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldAllowTransfer, v))
}

// AllowTransferNEQ applies the NEQ predicate on the "allow_transfer" field.
func AllowTransferNEQ(v bool) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldAllowTransfer, v))
}

// IsDraftEnabledEQ applies the EQ predicate on the "is_draft_enabled" field.
func IsDraftEnabledEQ(v bool) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldIsDraftEnabled, v))
}

// IsDraftEnabledNEQ applies the NEQ predicate on the "is_draft_enabled" field.
func IsDraftEnabledNEQ(v bool) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldIsDraftEnabled, v))
}

// IsAutoStartEQ applies the EQ predicate on the "is_auto_start" field.
func IsAutoStartEQ(v bool) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldIsAutoStart, v))
}

// IsAutoStartNEQ applies the NEQ predicate on the "is_auto_start" field.
func IsAutoStartNEQ(v bool) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldIsAutoStart, v))
}

// StrictModeEQ applies the EQ predicate on the "strict_mode" field.
func StrictModeEQ(v bool) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldStrictMode, v))
}

// StrictModeNEQ applies the NEQ predicate on the "strict_mode" field.
func StrictModeNEQ(v bool) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldStrictMode, v))
}

// ExtrasIsNil applies the IsNil predicate on the "extras" field.
func ExtrasIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldExtras))
}

// ExtrasNotNil applies the NotNil predicate on the "extras" field.
func ExtrasNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldExtras))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldTenantID, vs...))
}

// TenantIDGT applies the GT predicate on the "tenant_id" field.
func TenantIDGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldTenantID, v))
}

// TenantIDGTE applies the GTE predicate on the "tenant_id" field.
func TenantIDGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldTenantID, v))
}

// TenantIDLT applies the LT predicate on the "tenant_id" field.
func TenantIDLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldTenantID, v))
}

// TenantIDLTE applies the LTE predicate on the "tenant_id" field.
func TenantIDLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldTenantID, v))
}

// TenantIDContains applies the Contains predicate on the "tenant_id" field.
func TenantIDContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldTenantID, v))
}

// TenantIDHasPrefix applies the HasPrefix predicate on the "tenant_id" field.
func TenantIDHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldTenantID, v))
}

// TenantIDHasSuffix applies the HasSuffix predicate on the "tenant_id" field.
func TenantIDHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldTenantID, v))
}

// TenantIDIsNil applies the IsNil predicate on the "tenant_id" field.
func TenantIDIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldTenantID))
}

// TenantIDNotNil applies the NotNil predicate on the "tenant_id" field.
func TenantIDNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldTenantID))
}

// TenantIDEqualFold applies the EqualFold predicate on the "tenant_id" field.
func TenantIDEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldTenantID, v))
}

// TenantIDContainsFold applies the ContainsFold predicate on the "tenant_id" field.
func TenantIDContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldTenantID, v))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldCreatedBy, v))
}

// CreatedByContains applies the Contains predicate on the "created_by" field.
func CreatedByContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldCreatedBy, v))
}

// CreatedByHasPrefix applies the HasPrefix predicate on the "created_by" field.
func CreatedByHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldCreatedBy, v))
}

// CreatedByHasSuffix applies the HasSuffix predicate on the "created_by" field.
func CreatedByHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldCreatedBy, v))
}

// CreatedByIsNil applies the IsNil predicate on the "created_by" field.
func CreatedByIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldCreatedBy))
}

// CreatedByNotNil applies the NotNil predicate on the "created_by" field.
func CreatedByNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldCreatedBy))
}

// CreatedByEqualFold applies the EqualFold predicate on the "created_by" field.
func CreatedByEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldCreatedBy, v))
}

// CreatedByContainsFold applies the ContainsFold predicate on the "created_by" field.
func CreatedByContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldCreatedBy, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldUpdatedBy, v))
}

// UpdatedByContains applies the Contains predicate on the "updated_by" field.
func UpdatedByContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldUpdatedBy, v))
}

// UpdatedByHasPrefix applies the HasPrefix predicate on the "updated_by" field.
func UpdatedByHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldUpdatedBy, v))
}

// UpdatedByHasSuffix applies the HasSuffix predicate on the "updated_by" field.
func UpdatedByHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldUpdatedBy, v))
}

// UpdatedByIsNil applies the IsNil predicate on the "updated_by" field.
func UpdatedByIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldUpdatedBy))
}

// UpdatedByNotNil applies the NotNil predicate on the "updated_by" field.
func UpdatedByNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldUpdatedBy))
}

// UpdatedByEqualFold applies the EqualFold predicate on the "updated_by" field.
func UpdatedByEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldUpdatedBy, v))
}

// UpdatedByContainsFold applies the ContainsFold predicate on the "updated_by" field.
func UpdatedByContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldUpdatedBy, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v int64) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v int64) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...int64) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...int64) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v int64) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v int64) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v int64) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v int64) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v int64) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v int64) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...int64) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...int64) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v int64) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v int64) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v int64) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v int64) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldUpdatedAt))
}

// TaskKeyEQ applies the EQ predicate on the "task_key" field.
func TaskKeyEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldTaskKey, v))
}

// TaskKeyNEQ applies the NEQ predicate on the "task_key" field.
func TaskKeyNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldTaskKey, v))
}

// TaskKeyIn applies the In predicate on the "task_key" field.
func TaskKeyIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldTaskKey, vs...))
}

// TaskKeyNotIn applies the NotIn predicate on the "task_key" field.
func TaskKeyNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldTaskKey, vs...))
}

// TaskKeyGT applies the GT predicate on the "task_key" field.
func TaskKeyGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldTaskKey, v))
}

// TaskKeyGTE applies the GTE predicate on the "task_key" field.
func TaskKeyGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldTaskKey, v))
}

// TaskKeyLT applies the LT predicate on the "task_key" field.
func TaskKeyLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldTaskKey, v))
}

// TaskKeyLTE applies the LTE predicate on the "task_key" field.
func TaskKeyLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldTaskKey, v))
}

// TaskKeyContains applies the Contains predicate on the "task_key" field.
func TaskKeyContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldTaskKey, v))
}

// TaskKeyHasPrefix applies the HasPrefix predicate on the "task_key" field.
func TaskKeyHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldTaskKey, v))
}

// TaskKeyHasSuffix applies the HasSuffix predicate on the "task_key" field.
func TaskKeyHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldTaskKey, v))
}

// TaskKeyEqualFold applies the EqualFold predicate on the "task_key" field.
func TaskKeyEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldTaskKey, v))
}

// TaskKeyContainsFold applies the ContainsFold predicate on the "task_key" field.
func TaskKeyContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldTaskKey, v))
}

// ParentIDEQ applies the EQ predicate on the "parent_id" field.
func ParentIDEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldParentID, v))
}

// ParentIDNEQ applies the NEQ predicate on the "parent_id" field.
func ParentIDNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldParentID, v))
}

// ParentIDIn applies the In predicate on the "parent_id" field.
func ParentIDIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldParentID, vs...))
}

// ParentIDNotIn applies the NotIn predicate on the "parent_id" field.
func ParentIDNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldParentID, vs...))
}

// ParentIDGT applies the GT predicate on the "parent_id" field.
func ParentIDGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldParentID, v))
}

// ParentIDGTE applies the GTE predicate on the "parent_id" field.
func ParentIDGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldParentID, v))
}

// ParentIDLT applies the LT predicate on the "parent_id" field.
func ParentIDLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldParentID, v))
}

// ParentIDLTE applies the LTE predicate on the "parent_id" field.
func ParentIDLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldParentID, v))
}

// ParentIDContains applies the Contains predicate on the "parent_id" field.
func ParentIDContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldParentID, v))
}

// ParentIDHasPrefix applies the HasPrefix predicate on the "parent_id" field.
func ParentIDHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldParentID, v))
}

// ParentIDHasSuffix applies the HasSuffix predicate on the "parent_id" field.
func ParentIDHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldParentID, v))
}

// ParentIDIsNil applies the IsNil predicate on the "parent_id" field.
func ParentIDIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldParentID))
}

// ParentIDNotNil applies the NotNil predicate on the "parent_id" field.
func ParentIDNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldParentID))
}

// ParentIDEqualFold applies the EqualFold predicate on the "parent_id" field.
func ParentIDEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldParentID, v))
}

// ParentIDContainsFold applies the ContainsFold predicate on the "parent_id" field.
func ParentIDContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldParentID, v))
}

// ActionEQ applies the EQ predicate on the "action" field.
func ActionEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldAction, v))
}

// ActionNEQ applies the NEQ predicate on the "action" field.
func ActionNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldAction, v))
}

// ActionIn applies the In predicate on the "action" field.
func ActionIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldAction, vs...))
}

// ActionNotIn applies the NotIn predicate on the "action" field.
func ActionNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldAction, vs...))
}

// ActionGT applies the GT predicate on the "action" field.
func ActionGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldAction, v))
}

// ActionGTE applies the GTE predicate on the "action" field.
func ActionGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldAction, v))
}

// ActionLT applies the LT predicate on the "action" field.
func ActionLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldAction, v))
}

// ActionLTE applies the LTE predicate on the "action" field.
func ActionLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldAction, v))
}

// ActionContains applies the Contains predicate on the "action" field.
func ActionContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldAction, v))
}

// ActionHasPrefix applies the HasPrefix predicate on the "action" field.
func ActionHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldAction, v))
}

// ActionHasSuffix applies the HasSuffix predicate on the "action" field.
func ActionHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldAction, v))
}

// ActionIsNil applies the IsNil predicate on the "action" field.
func ActionIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldAction))
}

// ActionNotNil applies the NotNil predicate on the "action" field.
func ActionNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldAction))
}

// ActionEqualFold applies the EqualFold predicate on the "action" field.
func ActionEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldAction, v))
}

// ActionContainsFold applies the ContainsFold predicate on the "action" field.
func ActionContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldAction, v))
}

// CommentEQ applies the EQ predicate on the "comment" field.
func CommentEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldComment, v))
}

// CommentNEQ applies the NEQ predicate on the "comment" field.
func CommentNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldComment, v))
}

// CommentIn applies the In predicate on the "comment" field.
func CommentIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldComment, vs...))
}

// CommentNotIn applies the NotIn predicate on the "comment" field.
func CommentNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldComment, vs...))
}

// CommentGT applies the GT predicate on the "comment" field.
func CommentGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldComment, v))
}

// CommentGTE applies the GTE predicate on the "comment" field.
func CommentGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldComment, v))
}

// CommentLT applies the LT predicate on the "comment" field.
func CommentLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldComment, v))
}

// CommentLTE applies the LTE predicate on the "comment" field.
func CommentLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldComment, v))
}

// CommentContains applies the Contains predicate on the "comment" field.
func CommentContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldComment, v))
}

// CommentHasPrefix applies the HasPrefix predicate on the "comment" field.
func CommentHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldComment, v))
}

// CommentHasSuffix applies the HasSuffix predicate on the "comment" field.
func CommentHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldComment, v))
}

// CommentIsNil applies the IsNil predicate on the "comment" field.
func CommentIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldComment))
}

// CommentNotNil applies the NotNil predicate on the "comment" field.
func CommentNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldComment))
}

// CommentEqualFold applies the EqualFold predicate on the "comment" field.
func CommentEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldComment, v))
}

// CommentContainsFold applies the ContainsFold predicate on the "comment" field.
func CommentContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldComment, v))
}

// AttachmentsIsNil applies the IsNil predicate on the "attachments" field.
func AttachmentsIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldAttachments))
}

// AttachmentsNotNil applies the NotNil predicate on the "attachments" field.
func AttachmentsNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldAttachments))
}

// FormDataIsNil applies the IsNil predicate on the "form_data" field.
func FormDataIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldFormData))
}

// FormDataNotNil applies the NotNil predicate on the "form_data" field.
func FormDataNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldFormData))
}

// VariablesIsNil applies the IsNil predicate on the "variables" field.
func VariablesIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldVariables))
}

// VariablesNotNil applies the NotNil predicate on the "variables" field.
func VariablesNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldVariables))
}

// IsResubmitEQ applies the EQ predicate on the "is_resubmit" field.
func IsResubmitEQ(v bool) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldIsResubmit, v))
}

// IsResubmitNEQ applies the NEQ predicate on the "is_resubmit" field.
func IsResubmitNEQ(v bool) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldIsResubmit, v))
}

// ClaimTimeEQ applies the EQ predicate on the "claim_time" field.
func ClaimTimeEQ(v int64) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldClaimTime, v))
}

// ClaimTimeNEQ applies the NEQ predicate on the "claim_time" field.
func ClaimTimeNEQ(v int64) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldClaimTime, v))
}

// ClaimTimeIn applies the In predicate on the "claim_time" field.
func ClaimTimeIn(vs ...int64) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldClaimTime, vs...))
}

// ClaimTimeNotIn applies the NotIn predicate on the "claim_time" field.
func ClaimTimeNotIn(vs ...int64) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldClaimTime, vs...))
}

// ClaimTimeGT applies the GT predicate on the "claim_time" field.
func ClaimTimeGT(v int64) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldClaimTime, v))
}

// ClaimTimeGTE applies the GTE predicate on the "claim_time" field.
func ClaimTimeGTE(v int64) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldClaimTime, v))
}

// ClaimTimeLT applies the LT predicate on the "claim_time" field.
func ClaimTimeLT(v int64) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldClaimTime, v))
}

// ClaimTimeLTE applies the LTE predicate on the "claim_time" field.
func ClaimTimeLTE(v int64) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldClaimTime, v))
}

// ClaimTimeIsNil applies the IsNil predicate on the "claim_time" field.
func ClaimTimeIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldClaimTime))
}

// ClaimTimeNotNil applies the NotNil predicate on the "claim_time" field.
func ClaimTimeNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldClaimTime))
}

// IsUrgedEQ applies the EQ predicate on the "is_urged" field.
func IsUrgedEQ(v bool) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldIsUrged, v))
}

// IsUrgedNEQ applies the NEQ predicate on the "is_urged" field.
func IsUrgedNEQ(v bool) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldIsUrged, v))
}

// UrgeCountEQ applies the EQ predicate on the "urge_count" field.
func UrgeCountEQ(v int) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldUrgeCount, v))
}

// UrgeCountNEQ applies the NEQ predicate on the "urge_count" field.
func UrgeCountNEQ(v int) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldUrgeCount, v))
}

// UrgeCountIn applies the In predicate on the "urge_count" field.
func UrgeCountIn(vs ...int) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldUrgeCount, vs...))
}

// UrgeCountNotIn applies the NotIn predicate on the "urge_count" field.
func UrgeCountNotIn(vs ...int) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldUrgeCount, vs...))
}

// UrgeCountGT applies the GT predicate on the "urge_count" field.
func UrgeCountGT(v int) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldUrgeCount, v))
}

// UrgeCountGTE applies the GTE predicate on the "urge_count" field.
func UrgeCountGTE(v int) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldUrgeCount, v))
}

// UrgeCountLT applies the LT predicate on the "urge_count" field.
func UrgeCountLT(v int) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldUrgeCount, v))
}

// UrgeCountLTE applies the LTE predicate on the "urge_count" field.
func UrgeCountLTE(v int) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldUrgeCount, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Task) predicate.Task {
	return predicate.Task(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Task) predicate.Task {
	return predicate.Task(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Task) predicate.Task {
	return predicate.Task(sql.NotPredicates(p))
}
