// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"ncobase/core/workflow/data/ent/template"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Template is the model entity for the Template schema.
type Template struct {
	config `json:"-"`
	// ID of the ent.
	// primary key
	ID string `json:"id,omitempty"`
	// name
	Name string `json:"name,omitempty"`
	// code
	Code string `json:"code,omitempty"`
	// description
	Description string `json:"description,omitempty"`
	// type
	Type string `json:"type,omitempty"`
	// Version
	Version string `json:"version,omitempty"`
	// Status, text status
	Status string `json:"status,omitempty"`
	// is disabled
	Disabled bool `json:"disabled,omitempty"`
	// Form type code
	FormCode string `json:"form_code,omitempty"`
	// Form version number
	FormVersion string `json:"form_version,omitempty"`
	// Form configuration
	FormConfig map[string]interface{} `json:"form_config,omitempty"`
	// Form permission settings
	FormPermissions map[string]interface{} `json:"form_permissions,omitempty"`
	// Field level permissions
	FieldPermissions map[string]interface{} `json:"field_permissions,omitempty"`
	// Unique identifier for the node
	NodeKey string `json:"node_key,omitempty"`
	// Node type
	NodeType string `json:"node_type,omitempty"`
	// Node configuration
	NodeConfig map[string]interface{} `json:"node_config,omitempty"`
	// Node rules
	NodeRules map[string]interface{} `json:"node_rules,omitempty"`
	// Node events
	NodeEvents map[string]interface{} `json:"node_events,omitempty"`
	// Business tags
	BusinessTags []string `json:"business_tags,omitempty"`
	// Module code
	ModuleCode string `json:"module_code,omitempty"`
	// Category
	Category string `json:"category,omitempty"`
	// Allow cancellation
	AllowCancel bool `json:"allow_cancel,omitempty"`
	// Allow urging
	AllowUrge bool `json:"allow_urge,omitempty"`
	// Allow delegation
	AllowDelegate bool `json:"allow_delegate,omitempty"`
	// Allow transfer
	AllowTransfer bool `json:"allow_transfer,omitempty"`
	// Whether draft is enabled
	IsDraftEnabled bool `json:"is_draft_enabled,omitempty"`
	// Whether auto start is enabled
	IsAutoStart bool `json:"is_auto_start,omitempty"`
	// Enable strict mode
	StrictMode bool `json:"strict_mode,omitempty"`
	// Users with view permission
	Viewers []string `json:"viewers,omitempty"`
	// Users with edit permission
	Editors []string `json:"editors,omitempty"`
	// Permission configurations
	PermissionConfigs map[string]interface{} `json:"permission_configs,omitempty"`
	// Role configurations
	RoleConfigs map[string]interface{} `json:"role_configs,omitempty"`
	// Visibility range
	VisibleRange map[string]interface{} `json:"visible_range,omitempty"`
	// Extend properties
	Extras map[string]interface{} `json:"extras,omitempty"`
	// tenant id
	TenantID string `json:"tenant_id,omitempty"`
	// id of the creator
	CreatedBy string `json:"created_by,omitempty"`
	// id of the last updater
	UpdatedBy string `json:"updated_by,omitempty"`
	// created at
	CreatedAt int64 `json:"created_at,omitempty"`
	// updated at
	UpdatedAt int64 `json:"updated_at,omitempty"`
	// Template unique identifier
	TemplateKey string `json:"template_key,omitempty"`
	// Process rules
	ProcessRules map[string]interface{} `json:"process_rules,omitempty"`
	// Trigger conditions
	TriggerConditions map[string]interface{} `json:"trigger_conditions,omitempty"`
	// Timeout configuration
	TimeoutConfig map[string]interface{} `json:"timeout_config,omitempty"`
	// Reminder configuration
	ReminderConfig map[string]interface{} `json:"reminder_config,omitempty"`
	// Source version
	SourceVersion string `json:"source_version,omitempty"`
	// Whether is latest version
	IsLatest bool `json:"is_latest,omitempty"`
	// Effective time
	EffectiveTime int64 `json:"effective_time,omitempty"`
	// Expire time
	ExpireTime   int64 `json:"expire_time,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Template) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case template.FieldFormConfig, template.FieldFormPermissions, template.FieldFieldPermissions, template.FieldNodeConfig, template.FieldNodeRules, template.FieldNodeEvents, template.FieldBusinessTags, template.FieldViewers, template.FieldEditors, template.FieldPermissionConfigs, template.FieldRoleConfigs, template.FieldVisibleRange, template.FieldExtras, template.FieldProcessRules, template.FieldTriggerConditions, template.FieldTimeoutConfig, template.FieldReminderConfig:
			values[i] = new([]byte)
		case template.FieldDisabled, template.FieldAllowCancel, template.FieldAllowUrge, template.FieldAllowDelegate, template.FieldAllowTransfer, template.FieldIsDraftEnabled, template.FieldIsAutoStart, template.FieldStrictMode, template.FieldIsLatest:
			values[i] = new(sql.NullBool)
		case template.FieldCreatedAt, template.FieldUpdatedAt, template.FieldEffectiveTime, template.FieldExpireTime:
			values[i] = new(sql.NullInt64)
		case template.FieldID, template.FieldName, template.FieldCode, template.FieldDescription, template.FieldType, template.FieldVersion, template.FieldStatus, template.FieldFormCode, template.FieldFormVersion, template.FieldNodeKey, template.FieldNodeType, template.FieldModuleCode, template.FieldCategory, template.FieldTenantID, template.FieldCreatedBy, template.FieldUpdatedBy, template.FieldTemplateKey, template.FieldSourceVersion:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Template fields.
func (t *Template) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case template.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				t.ID = value.String
			}
		case template.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				t.Name = value.String
			}
		case template.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				t.Code = value.String
			}
		case template.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				t.Description = value.String
			}
		case template.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				t.Type = value.String
			}
		case template.FieldVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				t.Version = value.String
			}
		case template.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				t.Status = value.String
			}
		case template.FieldDisabled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field disabled", values[i])
			} else if value.Valid {
				t.Disabled = value.Bool
			}
		case template.FieldFormCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field form_code", values[i])
			} else if value.Valid {
				t.FormCode = value.String
			}
		case template.FieldFormVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field form_version", values[i])
			} else if value.Valid {
				t.FormVersion = value.String
			}
		case template.FieldFormConfig:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field form_config", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &t.FormConfig); err != nil {
					return fmt.Errorf("unmarshal field form_config: %w", err)
				}
			}
		case template.FieldFormPermissions:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field form_permissions", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &t.FormPermissions); err != nil {
					return fmt.Errorf("unmarshal field form_permissions: %w", err)
				}
			}
		case template.FieldFieldPermissions:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field field_permissions", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &t.FieldPermissions); err != nil {
					return fmt.Errorf("unmarshal field field_permissions: %w", err)
				}
			}
		case template.FieldNodeKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field node_key", values[i])
			} else if value.Valid {
				t.NodeKey = value.String
			}
		case template.FieldNodeType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field node_type", values[i])
			} else if value.Valid {
				t.NodeType = value.String
			}
		case template.FieldNodeConfig:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field node_config", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &t.NodeConfig); err != nil {
					return fmt.Errorf("unmarshal field node_config: %w", err)
				}
			}
		case template.FieldNodeRules:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field node_rules", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &t.NodeRules); err != nil {
					return fmt.Errorf("unmarshal field node_rules: %w", err)
				}
			}
		case template.FieldNodeEvents:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field node_events", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &t.NodeEvents); err != nil {
					return fmt.Errorf("unmarshal field node_events: %w", err)
				}
			}
		case template.FieldBusinessTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field business_tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &t.BusinessTags); err != nil {
					return fmt.Errorf("unmarshal field business_tags: %w", err)
				}
			}
		case template.FieldModuleCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field module_code", values[i])
			} else if value.Valid {
				t.ModuleCode = value.String
			}
		case template.FieldCategory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field category", values[i])
			} else if value.Valid {
				t.Category = value.String
			}
		case template.FieldAllowCancel:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field allow_cancel", values[i])
			} else if value.Valid {
				t.AllowCancel = value.Bool
			}
		case template.FieldAllowUrge:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field allow_urge", values[i])
			} else if value.Valid {
				t.AllowUrge = value.Bool
			}
		case template.FieldAllowDelegate:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field allow_delegate", values[i])
			} else if value.Valid {
				t.AllowDelegate = value.Bool
			}
		case template.FieldAllowTransfer:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field allow_transfer", values[i])
			} else if value.Valid {
				t.AllowTransfer = value.Bool
			}
		case template.FieldIsDraftEnabled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_draft_enabled", values[i])
			} else if value.Valid {
				t.IsDraftEnabled = value.Bool
			}
		case template.FieldIsAutoStart:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_auto_start", values[i])
			} else if value.Valid {
				t.IsAutoStart = value.Bool
			}
		case template.FieldStrictMode:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field strict_mode", values[i])
			} else if value.Valid {
				t.StrictMode = value.Bool
			}
		case template.FieldViewers:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field viewers", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &t.Viewers); err != nil {
					return fmt.Errorf("unmarshal field viewers: %w", err)
				}
			}
		case template.FieldEditors:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field editors", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &t.Editors); err != nil {
					return fmt.Errorf("unmarshal field editors: %w", err)
				}
			}
		case template.FieldPermissionConfigs:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field permission_configs", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &t.PermissionConfigs); err != nil {
					return fmt.Errorf("unmarshal field permission_configs: %w", err)
				}
			}
		case template.FieldRoleConfigs:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field role_configs", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &t.RoleConfigs); err != nil {
					return fmt.Errorf("unmarshal field role_configs: %w", err)
				}
			}
		case template.FieldVisibleRange:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field visible_range", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &t.VisibleRange); err != nil {
					return fmt.Errorf("unmarshal field visible_range: %w", err)
				}
			}
		case template.FieldExtras:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field extras", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &t.Extras); err != nil {
					return fmt.Errorf("unmarshal field extras: %w", err)
				}
			}
		case template.FieldTenantID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				t.TenantID = value.String
			}
		case template.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				t.CreatedBy = value.String
			}
		case template.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				t.UpdatedBy = value.String
			}
		case template.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				t.CreatedAt = value.Int64
			}
		case template.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				t.UpdatedAt = value.Int64
			}
		case template.FieldTemplateKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field template_key", values[i])
			} else if value.Valid {
				t.TemplateKey = value.String
			}
		case template.FieldProcessRules:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field process_rules", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &t.ProcessRules); err != nil {
					return fmt.Errorf("unmarshal field process_rules: %w", err)
				}
			}
		case template.FieldTriggerConditions:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field trigger_conditions", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &t.TriggerConditions); err != nil {
					return fmt.Errorf("unmarshal field trigger_conditions: %w", err)
				}
			}
		case template.FieldTimeoutConfig:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field timeout_config", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &t.TimeoutConfig); err != nil {
					return fmt.Errorf("unmarshal field timeout_config: %w", err)
				}
			}
		case template.FieldReminderConfig:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field reminder_config", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &t.ReminderConfig); err != nil {
					return fmt.Errorf("unmarshal field reminder_config: %w", err)
				}
			}
		case template.FieldSourceVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field source_version", values[i])
			} else if value.Valid {
				t.SourceVersion = value.String
			}
		case template.FieldIsLatest:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_latest", values[i])
			} else if value.Valid {
				t.IsLatest = value.Bool
			}
		case template.FieldEffectiveTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field effective_time", values[i])
			} else if value.Valid {
				t.EffectiveTime = value.Int64
			}
		case template.FieldExpireTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field expire_time", values[i])
			} else if value.Valid {
				t.ExpireTime = value.Int64
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Template.
// This includes values selected through modifiers, order, etc.
func (t *Template) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// Update returns a builder for updating this Template.
// Note that you need to call Template.Unwrap() before calling this method if this Template
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Template) Update() *TemplateUpdateOne {
	return NewTemplateClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Template entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Template) Unwrap() *Template {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Template is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Template) String() string {
	var builder strings.Builder
	builder.WriteString("Template(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("name=")
	builder.WriteString(t.Name)
	builder.WriteString(", ")
	builder.WriteString("code=")
	builder.WriteString(t.Code)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(t.Description)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(t.Type)
	builder.WriteString(", ")
	builder.WriteString("version=")
	builder.WriteString(t.Version)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(t.Status)
	builder.WriteString(", ")
	builder.WriteString("disabled=")
	builder.WriteString(fmt.Sprintf("%v", t.Disabled))
	builder.WriteString(", ")
	builder.WriteString("form_code=")
	builder.WriteString(t.FormCode)
	builder.WriteString(", ")
	builder.WriteString("form_version=")
	builder.WriteString(t.FormVersion)
	builder.WriteString(", ")
	builder.WriteString("form_config=")
	builder.WriteString(fmt.Sprintf("%v", t.FormConfig))
	builder.WriteString(", ")
	builder.WriteString("form_permissions=")
	builder.WriteString(fmt.Sprintf("%v", t.FormPermissions))
	builder.WriteString(", ")
	builder.WriteString("field_permissions=")
	builder.WriteString(fmt.Sprintf("%v", t.FieldPermissions))
	builder.WriteString(", ")
	builder.WriteString("node_key=")
	builder.WriteString(t.NodeKey)
	builder.WriteString(", ")
	builder.WriteString("node_type=")
	builder.WriteString(t.NodeType)
	builder.WriteString(", ")
	builder.WriteString("node_config=")
	builder.WriteString(fmt.Sprintf("%v", t.NodeConfig))
	builder.WriteString(", ")
	builder.WriteString("node_rules=")
	builder.WriteString(fmt.Sprintf("%v", t.NodeRules))
	builder.WriteString(", ")
	builder.WriteString("node_events=")
	builder.WriteString(fmt.Sprintf("%v", t.NodeEvents))
	builder.WriteString(", ")
	builder.WriteString("business_tags=")
	builder.WriteString(fmt.Sprintf("%v", t.BusinessTags))
	builder.WriteString(", ")
	builder.WriteString("module_code=")
	builder.WriteString(t.ModuleCode)
	builder.WriteString(", ")
	builder.WriteString("category=")
	builder.WriteString(t.Category)
	builder.WriteString(", ")
	builder.WriteString("allow_cancel=")
	builder.WriteString(fmt.Sprintf("%v", t.AllowCancel))
	builder.WriteString(", ")
	builder.WriteString("allow_urge=")
	builder.WriteString(fmt.Sprintf("%v", t.AllowUrge))
	builder.WriteString(", ")
	builder.WriteString("allow_delegate=")
	builder.WriteString(fmt.Sprintf("%v", t.AllowDelegate))
	builder.WriteString(", ")
	builder.WriteString("allow_transfer=")
	builder.WriteString(fmt.Sprintf("%v", t.AllowTransfer))
	builder.WriteString(", ")
	builder.WriteString("is_draft_enabled=")
	builder.WriteString(fmt.Sprintf("%v", t.IsDraftEnabled))
	builder.WriteString(", ")
	builder.WriteString("is_auto_start=")
	builder.WriteString(fmt.Sprintf("%v", t.IsAutoStart))
	builder.WriteString(", ")
	builder.WriteString("strict_mode=")
	builder.WriteString(fmt.Sprintf("%v", t.StrictMode))
	builder.WriteString(", ")
	builder.WriteString("viewers=")
	builder.WriteString(fmt.Sprintf("%v", t.Viewers))
	builder.WriteString(", ")
	builder.WriteString("editors=")
	builder.WriteString(fmt.Sprintf("%v", t.Editors))
	builder.WriteString(", ")
	builder.WriteString("permission_configs=")
	builder.WriteString(fmt.Sprintf("%v", t.PermissionConfigs))
	builder.WriteString(", ")
	builder.WriteString("role_configs=")
	builder.WriteString(fmt.Sprintf("%v", t.RoleConfigs))
	builder.WriteString(", ")
	builder.WriteString("visible_range=")
	builder.WriteString(fmt.Sprintf("%v", t.VisibleRange))
	builder.WriteString(", ")
	builder.WriteString("extras=")
	builder.WriteString(fmt.Sprintf("%v", t.Extras))
	builder.WriteString(", ")
	builder.WriteString("tenant_id=")
	builder.WriteString(t.TenantID)
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(t.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(t.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", t.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", t.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("template_key=")
	builder.WriteString(t.TemplateKey)
	builder.WriteString(", ")
	builder.WriteString("process_rules=")
	builder.WriteString(fmt.Sprintf("%v", t.ProcessRules))
	builder.WriteString(", ")
	builder.WriteString("trigger_conditions=")
	builder.WriteString(fmt.Sprintf("%v", t.TriggerConditions))
	builder.WriteString(", ")
	builder.WriteString("timeout_config=")
	builder.WriteString(fmt.Sprintf("%v", t.TimeoutConfig))
	builder.WriteString(", ")
	builder.WriteString("reminder_config=")
	builder.WriteString(fmt.Sprintf("%v", t.ReminderConfig))
	builder.WriteString(", ")
	builder.WriteString("source_version=")
	builder.WriteString(t.SourceVersion)
	builder.WriteString(", ")
	builder.WriteString("is_latest=")
	builder.WriteString(fmt.Sprintf("%v", t.IsLatest))
	builder.WriteString(", ")
	builder.WriteString("effective_time=")
	builder.WriteString(fmt.Sprintf("%v", t.EffectiveTime))
	builder.WriteString(", ")
	builder.WriteString("expire_time=")
	builder.WriteString(fmt.Sprintf("%v", t.ExpireTime))
	builder.WriteByte(')')
	return builder.String()
}

// Templates is a parsable slice of Template.
type Templates []*Template
