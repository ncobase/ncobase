// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/core/workflow/data/ent/predicate"
	"ncobase/core/workflow/data/ent/template"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// TemplateUpdate is the builder for updating Template entities.
type TemplateUpdate struct {
	config
	hooks    []Hook
	mutation *TemplateMutation
}

// Where appends a list predicates to the TemplateUpdate builder.
func (tu *TemplateUpdate) Where(ps ...predicate.Template) *TemplateUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetName sets the "name" field.
func (tu *TemplateUpdate) SetName(s string) *TemplateUpdate {
	tu.mutation.SetName(s)
	return tu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tu *TemplateUpdate) SetNillableName(s *string) *TemplateUpdate {
	if s != nil {
		tu.SetName(*s)
	}
	return tu
}

// ClearName clears the value of the "name" field.
func (tu *TemplateUpdate) ClearName() *TemplateUpdate {
	tu.mutation.ClearName()
	return tu
}

// SetCode sets the "code" field.
func (tu *TemplateUpdate) SetCode(s string) *TemplateUpdate {
	tu.mutation.SetCode(s)
	return tu
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (tu *TemplateUpdate) SetNillableCode(s *string) *TemplateUpdate {
	if s != nil {
		tu.SetCode(*s)
	}
	return tu
}

// ClearCode clears the value of the "code" field.
func (tu *TemplateUpdate) ClearCode() *TemplateUpdate {
	tu.mutation.ClearCode()
	return tu
}

// SetDescription sets the "description" field.
func (tu *TemplateUpdate) SetDescription(s string) *TemplateUpdate {
	tu.mutation.SetDescription(s)
	return tu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tu *TemplateUpdate) SetNillableDescription(s *string) *TemplateUpdate {
	if s != nil {
		tu.SetDescription(*s)
	}
	return tu
}

// ClearDescription clears the value of the "description" field.
func (tu *TemplateUpdate) ClearDescription() *TemplateUpdate {
	tu.mutation.ClearDescription()
	return tu
}

// SetType sets the "type" field.
func (tu *TemplateUpdate) SetType(s string) *TemplateUpdate {
	tu.mutation.SetType(s)
	return tu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (tu *TemplateUpdate) SetNillableType(s *string) *TemplateUpdate {
	if s != nil {
		tu.SetType(*s)
	}
	return tu
}

// ClearType clears the value of the "type" field.
func (tu *TemplateUpdate) ClearType() *TemplateUpdate {
	tu.mutation.ClearType()
	return tu
}

// SetVersion sets the "version" field.
func (tu *TemplateUpdate) SetVersion(s string) *TemplateUpdate {
	tu.mutation.SetVersion(s)
	return tu
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (tu *TemplateUpdate) SetNillableVersion(s *string) *TemplateUpdate {
	if s != nil {
		tu.SetVersion(*s)
	}
	return tu
}

// ClearVersion clears the value of the "version" field.
func (tu *TemplateUpdate) ClearVersion() *TemplateUpdate {
	tu.mutation.ClearVersion()
	return tu
}

// SetStatus sets the "status" field.
func (tu *TemplateUpdate) SetStatus(i int) *TemplateUpdate {
	tu.mutation.ResetStatus()
	tu.mutation.SetStatus(i)
	return tu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tu *TemplateUpdate) SetNillableStatus(i *int) *TemplateUpdate {
	if i != nil {
		tu.SetStatus(*i)
	}
	return tu
}

// AddStatus adds i to the "status" field.
func (tu *TemplateUpdate) AddStatus(i int) *TemplateUpdate {
	tu.mutation.AddStatus(i)
	return tu
}

// SetDisabled sets the "disabled" field.
func (tu *TemplateUpdate) SetDisabled(b bool) *TemplateUpdate {
	tu.mutation.SetDisabled(b)
	return tu
}

// SetNillableDisabled sets the "disabled" field if the given value is not nil.
func (tu *TemplateUpdate) SetNillableDisabled(b *bool) *TemplateUpdate {
	if b != nil {
		tu.SetDisabled(*b)
	}
	return tu
}

// ClearDisabled clears the value of the "disabled" field.
func (tu *TemplateUpdate) ClearDisabled() *TemplateUpdate {
	tu.mutation.ClearDisabled()
	return tu
}

// SetFormCode sets the "form_code" field.
func (tu *TemplateUpdate) SetFormCode(s string) *TemplateUpdate {
	tu.mutation.SetFormCode(s)
	return tu
}

// SetNillableFormCode sets the "form_code" field if the given value is not nil.
func (tu *TemplateUpdate) SetNillableFormCode(s *string) *TemplateUpdate {
	if s != nil {
		tu.SetFormCode(*s)
	}
	return tu
}

// SetFormVersion sets the "form_version" field.
func (tu *TemplateUpdate) SetFormVersion(s string) *TemplateUpdate {
	tu.mutation.SetFormVersion(s)
	return tu
}

// SetNillableFormVersion sets the "form_version" field if the given value is not nil.
func (tu *TemplateUpdate) SetNillableFormVersion(s *string) *TemplateUpdate {
	if s != nil {
		tu.SetFormVersion(*s)
	}
	return tu
}

// ClearFormVersion clears the value of the "form_version" field.
func (tu *TemplateUpdate) ClearFormVersion() *TemplateUpdate {
	tu.mutation.ClearFormVersion()
	return tu
}

// SetFormConfig sets the "form_config" field.
func (tu *TemplateUpdate) SetFormConfig(m map[string]interface{}) *TemplateUpdate {
	tu.mutation.SetFormConfig(m)
	return tu
}

// ClearFormConfig clears the value of the "form_config" field.
func (tu *TemplateUpdate) ClearFormConfig() *TemplateUpdate {
	tu.mutation.ClearFormConfig()
	return tu
}

// SetFormPermissions sets the "form_permissions" field.
func (tu *TemplateUpdate) SetFormPermissions(m map[string]interface{}) *TemplateUpdate {
	tu.mutation.SetFormPermissions(m)
	return tu
}

// ClearFormPermissions clears the value of the "form_permissions" field.
func (tu *TemplateUpdate) ClearFormPermissions() *TemplateUpdate {
	tu.mutation.ClearFormPermissions()
	return tu
}

// SetFieldPermissions sets the "field_permissions" field.
func (tu *TemplateUpdate) SetFieldPermissions(m map[string]interface{}) *TemplateUpdate {
	tu.mutation.SetFieldPermissions(m)
	return tu
}

// ClearFieldPermissions clears the value of the "field_permissions" field.
func (tu *TemplateUpdate) ClearFieldPermissions() *TemplateUpdate {
	tu.mutation.ClearFieldPermissions()
	return tu
}

// SetNodeKey sets the "node_key" field.
func (tu *TemplateUpdate) SetNodeKey(s string) *TemplateUpdate {
	tu.mutation.SetNodeKey(s)
	return tu
}

// SetNillableNodeKey sets the "node_key" field if the given value is not nil.
func (tu *TemplateUpdate) SetNillableNodeKey(s *string) *TemplateUpdate {
	if s != nil {
		tu.SetNodeKey(*s)
	}
	return tu
}

// SetNodeType sets the "node_type" field.
func (tu *TemplateUpdate) SetNodeType(s string) *TemplateUpdate {
	tu.mutation.SetNodeType(s)
	return tu
}

// SetNillableNodeType sets the "node_type" field if the given value is not nil.
func (tu *TemplateUpdate) SetNillableNodeType(s *string) *TemplateUpdate {
	if s != nil {
		tu.SetNodeType(*s)
	}
	return tu
}

// SetNodeConfig sets the "node_config" field.
func (tu *TemplateUpdate) SetNodeConfig(m map[string]interface{}) *TemplateUpdate {
	tu.mutation.SetNodeConfig(m)
	return tu
}

// ClearNodeConfig clears the value of the "node_config" field.
func (tu *TemplateUpdate) ClearNodeConfig() *TemplateUpdate {
	tu.mutation.ClearNodeConfig()
	return tu
}

// SetNodeRules sets the "node_rules" field.
func (tu *TemplateUpdate) SetNodeRules(m map[string]interface{}) *TemplateUpdate {
	tu.mutation.SetNodeRules(m)
	return tu
}

// ClearNodeRules clears the value of the "node_rules" field.
func (tu *TemplateUpdate) ClearNodeRules() *TemplateUpdate {
	tu.mutation.ClearNodeRules()
	return tu
}

// SetNodeEvents sets the "node_events" field.
func (tu *TemplateUpdate) SetNodeEvents(m map[string]interface{}) *TemplateUpdate {
	tu.mutation.SetNodeEvents(m)
	return tu
}

// ClearNodeEvents clears the value of the "node_events" field.
func (tu *TemplateUpdate) ClearNodeEvents() *TemplateUpdate {
	tu.mutation.ClearNodeEvents()
	return tu
}

// SetBusinessTags sets the "business_tags" field.
func (tu *TemplateUpdate) SetBusinessTags(i []interface{}) *TemplateUpdate {
	tu.mutation.SetBusinessTags(i)
	return tu
}

// AppendBusinessTags appends i to the "business_tags" field.
func (tu *TemplateUpdate) AppendBusinessTags(i []interface{}) *TemplateUpdate {
	tu.mutation.AppendBusinessTags(i)
	return tu
}

// ClearBusinessTags clears the value of the "business_tags" field.
func (tu *TemplateUpdate) ClearBusinessTags() *TemplateUpdate {
	tu.mutation.ClearBusinessTags()
	return tu
}

// SetModuleCode sets the "module_code" field.
func (tu *TemplateUpdate) SetModuleCode(s string) *TemplateUpdate {
	tu.mutation.SetModuleCode(s)
	return tu
}

// SetNillableModuleCode sets the "module_code" field if the given value is not nil.
func (tu *TemplateUpdate) SetNillableModuleCode(s *string) *TemplateUpdate {
	if s != nil {
		tu.SetModuleCode(*s)
	}
	return tu
}

// SetCategory sets the "category" field.
func (tu *TemplateUpdate) SetCategory(s string) *TemplateUpdate {
	tu.mutation.SetCategory(s)
	return tu
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (tu *TemplateUpdate) SetNillableCategory(s *string) *TemplateUpdate {
	if s != nil {
		tu.SetCategory(*s)
	}
	return tu
}

// ClearCategory clears the value of the "category" field.
func (tu *TemplateUpdate) ClearCategory() *TemplateUpdate {
	tu.mutation.ClearCategory()
	return tu
}

// SetAllowCancel sets the "allow_cancel" field.
func (tu *TemplateUpdate) SetAllowCancel(b bool) *TemplateUpdate {
	tu.mutation.SetAllowCancel(b)
	return tu
}

// SetNillableAllowCancel sets the "allow_cancel" field if the given value is not nil.
func (tu *TemplateUpdate) SetNillableAllowCancel(b *bool) *TemplateUpdate {
	if b != nil {
		tu.SetAllowCancel(*b)
	}
	return tu
}

// SetAllowUrge sets the "allow_urge" field.
func (tu *TemplateUpdate) SetAllowUrge(b bool) *TemplateUpdate {
	tu.mutation.SetAllowUrge(b)
	return tu
}

// SetNillableAllowUrge sets the "allow_urge" field if the given value is not nil.
func (tu *TemplateUpdate) SetNillableAllowUrge(b *bool) *TemplateUpdate {
	if b != nil {
		tu.SetAllowUrge(*b)
	}
	return tu
}

// SetAllowDelegate sets the "allow_delegate" field.
func (tu *TemplateUpdate) SetAllowDelegate(b bool) *TemplateUpdate {
	tu.mutation.SetAllowDelegate(b)
	return tu
}

// SetNillableAllowDelegate sets the "allow_delegate" field if the given value is not nil.
func (tu *TemplateUpdate) SetNillableAllowDelegate(b *bool) *TemplateUpdate {
	if b != nil {
		tu.SetAllowDelegate(*b)
	}
	return tu
}

// SetAllowTransfer sets the "allow_transfer" field.
func (tu *TemplateUpdate) SetAllowTransfer(b bool) *TemplateUpdate {
	tu.mutation.SetAllowTransfer(b)
	return tu
}

// SetNillableAllowTransfer sets the "allow_transfer" field if the given value is not nil.
func (tu *TemplateUpdate) SetNillableAllowTransfer(b *bool) *TemplateUpdate {
	if b != nil {
		tu.SetAllowTransfer(*b)
	}
	return tu
}

// SetIsDraftEnabled sets the "is_draft_enabled" field.
func (tu *TemplateUpdate) SetIsDraftEnabled(b bool) *TemplateUpdate {
	tu.mutation.SetIsDraftEnabled(b)
	return tu
}

// SetNillableIsDraftEnabled sets the "is_draft_enabled" field if the given value is not nil.
func (tu *TemplateUpdate) SetNillableIsDraftEnabled(b *bool) *TemplateUpdate {
	if b != nil {
		tu.SetIsDraftEnabled(*b)
	}
	return tu
}

// SetIsAutoStart sets the "is_auto_start" field.
func (tu *TemplateUpdate) SetIsAutoStart(b bool) *TemplateUpdate {
	tu.mutation.SetIsAutoStart(b)
	return tu
}

// SetNillableIsAutoStart sets the "is_auto_start" field if the given value is not nil.
func (tu *TemplateUpdate) SetNillableIsAutoStart(b *bool) *TemplateUpdate {
	if b != nil {
		tu.SetIsAutoStart(*b)
	}
	return tu
}

// SetStrictMode sets the "strict_mode" field.
func (tu *TemplateUpdate) SetStrictMode(b bool) *TemplateUpdate {
	tu.mutation.SetStrictMode(b)
	return tu
}

// SetNillableStrictMode sets the "strict_mode" field if the given value is not nil.
func (tu *TemplateUpdate) SetNillableStrictMode(b *bool) *TemplateUpdate {
	if b != nil {
		tu.SetStrictMode(*b)
	}
	return tu
}

// SetViewers sets the "viewers" field.
func (tu *TemplateUpdate) SetViewers(i []interface{}) *TemplateUpdate {
	tu.mutation.SetViewers(i)
	return tu
}

// AppendViewers appends i to the "viewers" field.
func (tu *TemplateUpdate) AppendViewers(i []interface{}) *TemplateUpdate {
	tu.mutation.AppendViewers(i)
	return tu
}

// ClearViewers clears the value of the "viewers" field.
func (tu *TemplateUpdate) ClearViewers() *TemplateUpdate {
	tu.mutation.ClearViewers()
	return tu
}

// SetEditors sets the "editors" field.
func (tu *TemplateUpdate) SetEditors(i []interface{}) *TemplateUpdate {
	tu.mutation.SetEditors(i)
	return tu
}

// AppendEditors appends i to the "editors" field.
func (tu *TemplateUpdate) AppendEditors(i []interface{}) *TemplateUpdate {
	tu.mutation.AppendEditors(i)
	return tu
}

// ClearEditors clears the value of the "editors" field.
func (tu *TemplateUpdate) ClearEditors() *TemplateUpdate {
	tu.mutation.ClearEditors()
	return tu
}

// SetPermissionConfigs sets the "permission_configs" field.
func (tu *TemplateUpdate) SetPermissionConfigs(m map[string]interface{}) *TemplateUpdate {
	tu.mutation.SetPermissionConfigs(m)
	return tu
}

// ClearPermissionConfigs clears the value of the "permission_configs" field.
func (tu *TemplateUpdate) ClearPermissionConfigs() *TemplateUpdate {
	tu.mutation.ClearPermissionConfigs()
	return tu
}

// SetRoleConfigs sets the "role_configs" field.
func (tu *TemplateUpdate) SetRoleConfigs(m map[string]interface{}) *TemplateUpdate {
	tu.mutation.SetRoleConfigs(m)
	return tu
}

// ClearRoleConfigs clears the value of the "role_configs" field.
func (tu *TemplateUpdate) ClearRoleConfigs() *TemplateUpdate {
	tu.mutation.ClearRoleConfigs()
	return tu
}

// SetVisibleRange sets the "visible_range" field.
func (tu *TemplateUpdate) SetVisibleRange(m map[string]interface{}) *TemplateUpdate {
	tu.mutation.SetVisibleRange(m)
	return tu
}

// ClearVisibleRange clears the value of the "visible_range" field.
func (tu *TemplateUpdate) ClearVisibleRange() *TemplateUpdate {
	tu.mutation.ClearVisibleRange()
	return tu
}

// SetExtras sets the "extras" field.
func (tu *TemplateUpdate) SetExtras(m map[string]interface{}) *TemplateUpdate {
	tu.mutation.SetExtras(m)
	return tu
}

// ClearExtras clears the value of the "extras" field.
func (tu *TemplateUpdate) ClearExtras() *TemplateUpdate {
	tu.mutation.ClearExtras()
	return tu
}

// SetTenantID sets the "tenant_id" field.
func (tu *TemplateUpdate) SetTenantID(s string) *TemplateUpdate {
	tu.mutation.SetTenantID(s)
	return tu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (tu *TemplateUpdate) SetNillableTenantID(s *string) *TemplateUpdate {
	if s != nil {
		tu.SetTenantID(*s)
	}
	return tu
}

// ClearTenantID clears the value of the "tenant_id" field.
func (tu *TemplateUpdate) ClearTenantID() *TemplateUpdate {
	tu.mutation.ClearTenantID()
	return tu
}

// SetCreatedBy sets the "created_by" field.
func (tu *TemplateUpdate) SetCreatedBy(s string) *TemplateUpdate {
	tu.mutation.SetCreatedBy(s)
	return tu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (tu *TemplateUpdate) SetNillableCreatedBy(s *string) *TemplateUpdate {
	if s != nil {
		tu.SetCreatedBy(*s)
	}
	return tu
}

// ClearCreatedBy clears the value of the "created_by" field.
func (tu *TemplateUpdate) ClearCreatedBy() *TemplateUpdate {
	tu.mutation.ClearCreatedBy()
	return tu
}

// SetUpdatedBy sets the "updated_by" field.
func (tu *TemplateUpdate) SetUpdatedBy(s string) *TemplateUpdate {
	tu.mutation.SetUpdatedBy(s)
	return tu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (tu *TemplateUpdate) SetNillableUpdatedBy(s *string) *TemplateUpdate {
	if s != nil {
		tu.SetUpdatedBy(*s)
	}
	return tu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (tu *TemplateUpdate) ClearUpdatedBy() *TemplateUpdate {
	tu.mutation.ClearUpdatedBy()
	return tu
}

// SetUpdatedAt sets the "updated_at" field.
func (tu *TemplateUpdate) SetUpdatedAt(i int64) *TemplateUpdate {
	tu.mutation.ResetUpdatedAt()
	tu.mutation.SetUpdatedAt(i)
	return tu
}

// AddUpdatedAt adds i to the "updated_at" field.
func (tu *TemplateUpdate) AddUpdatedAt(i int64) *TemplateUpdate {
	tu.mutation.AddUpdatedAt(i)
	return tu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tu *TemplateUpdate) ClearUpdatedAt() *TemplateUpdate {
	tu.mutation.ClearUpdatedAt()
	return tu
}

// SetTemplateKey sets the "template_key" field.
func (tu *TemplateUpdate) SetTemplateKey(s string) *TemplateUpdate {
	tu.mutation.SetTemplateKey(s)
	return tu
}

// SetNillableTemplateKey sets the "template_key" field if the given value is not nil.
func (tu *TemplateUpdate) SetNillableTemplateKey(s *string) *TemplateUpdate {
	if s != nil {
		tu.SetTemplateKey(*s)
	}
	return tu
}

// SetProcessRules sets the "process_rules" field.
func (tu *TemplateUpdate) SetProcessRules(m map[string]interface{}) *TemplateUpdate {
	tu.mutation.SetProcessRules(m)
	return tu
}

// ClearProcessRules clears the value of the "process_rules" field.
func (tu *TemplateUpdate) ClearProcessRules() *TemplateUpdate {
	tu.mutation.ClearProcessRules()
	return tu
}

// SetTriggerConditions sets the "trigger_conditions" field.
func (tu *TemplateUpdate) SetTriggerConditions(m map[string]interface{}) *TemplateUpdate {
	tu.mutation.SetTriggerConditions(m)
	return tu
}

// ClearTriggerConditions clears the value of the "trigger_conditions" field.
func (tu *TemplateUpdate) ClearTriggerConditions() *TemplateUpdate {
	tu.mutation.ClearTriggerConditions()
	return tu
}

// SetTimeoutConfig sets the "timeout_config" field.
func (tu *TemplateUpdate) SetTimeoutConfig(m map[string]interface{}) *TemplateUpdate {
	tu.mutation.SetTimeoutConfig(m)
	return tu
}

// ClearTimeoutConfig clears the value of the "timeout_config" field.
func (tu *TemplateUpdate) ClearTimeoutConfig() *TemplateUpdate {
	tu.mutation.ClearTimeoutConfig()
	return tu
}

// SetReminderConfig sets the "reminder_config" field.
func (tu *TemplateUpdate) SetReminderConfig(m map[string]interface{}) *TemplateUpdate {
	tu.mutation.SetReminderConfig(m)
	return tu
}

// ClearReminderConfig clears the value of the "reminder_config" field.
func (tu *TemplateUpdate) ClearReminderConfig() *TemplateUpdate {
	tu.mutation.ClearReminderConfig()
	return tu
}

// SetSourceVersion sets the "source_version" field.
func (tu *TemplateUpdate) SetSourceVersion(s string) *TemplateUpdate {
	tu.mutation.SetSourceVersion(s)
	return tu
}

// SetNillableSourceVersion sets the "source_version" field if the given value is not nil.
func (tu *TemplateUpdate) SetNillableSourceVersion(s *string) *TemplateUpdate {
	if s != nil {
		tu.SetSourceVersion(*s)
	}
	return tu
}

// ClearSourceVersion clears the value of the "source_version" field.
func (tu *TemplateUpdate) ClearSourceVersion() *TemplateUpdate {
	tu.mutation.ClearSourceVersion()
	return tu
}

// SetIsLatest sets the "is_latest" field.
func (tu *TemplateUpdate) SetIsLatest(b bool) *TemplateUpdate {
	tu.mutation.SetIsLatest(b)
	return tu
}

// SetNillableIsLatest sets the "is_latest" field if the given value is not nil.
func (tu *TemplateUpdate) SetNillableIsLatest(b *bool) *TemplateUpdate {
	if b != nil {
		tu.SetIsLatest(*b)
	}
	return tu
}

// SetEffectiveTime sets the "effective_time" field.
func (tu *TemplateUpdate) SetEffectiveTime(t time.Time) *TemplateUpdate {
	tu.mutation.SetEffectiveTime(t)
	return tu
}

// SetNillableEffectiveTime sets the "effective_time" field if the given value is not nil.
func (tu *TemplateUpdate) SetNillableEffectiveTime(t *time.Time) *TemplateUpdate {
	if t != nil {
		tu.SetEffectiveTime(*t)
	}
	return tu
}

// ClearEffectiveTime clears the value of the "effective_time" field.
func (tu *TemplateUpdate) ClearEffectiveTime() *TemplateUpdate {
	tu.mutation.ClearEffectiveTime()
	return tu
}

// SetExpireTime sets the "expire_time" field.
func (tu *TemplateUpdate) SetExpireTime(t time.Time) *TemplateUpdate {
	tu.mutation.SetExpireTime(t)
	return tu
}

// SetNillableExpireTime sets the "expire_time" field if the given value is not nil.
func (tu *TemplateUpdate) SetNillableExpireTime(t *time.Time) *TemplateUpdate {
	if t != nil {
		tu.SetExpireTime(*t)
	}
	return tu
}

// ClearExpireTime clears the value of the "expire_time" field.
func (tu *TemplateUpdate) ClearExpireTime() *TemplateUpdate {
	tu.mutation.ClearExpireTime()
	return tu
}

// Mutation returns the TemplateMutation object of the builder.
func (tu *TemplateUpdate) Mutation() *TemplateMutation {
	return tu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TemplateUpdate) Save(ctx context.Context) (int, error) {
	tu.defaults()
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TemplateUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TemplateUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TemplateUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tu *TemplateUpdate) defaults() {
	if _, ok := tu.mutation.UpdatedAt(); !ok && !tu.mutation.UpdatedAtCleared() {
		v := template.UpdateDefaultUpdatedAt()
		tu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *TemplateUpdate) check() error {
	if v, ok := tu.mutation.TenantID(); ok {
		if err := template.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "Template.tenant_id": %w`, err)}
		}
	}
	if v, ok := tu.mutation.CreatedBy(); ok {
		if err := template.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "Template.created_by": %w`, err)}
		}
	}
	if v, ok := tu.mutation.UpdatedBy(); ok {
		if err := template.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "Template.updated_by": %w`, err)}
		}
	}
	return nil
}

func (tu *TemplateUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(template.Table, template.Columns, sqlgraph.NewFieldSpec(template.FieldID, field.TypeString))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.Name(); ok {
		_spec.SetField(template.FieldName, field.TypeString, value)
	}
	if tu.mutation.NameCleared() {
		_spec.ClearField(template.FieldName, field.TypeString)
	}
	if value, ok := tu.mutation.Code(); ok {
		_spec.SetField(template.FieldCode, field.TypeString, value)
	}
	if tu.mutation.CodeCleared() {
		_spec.ClearField(template.FieldCode, field.TypeString)
	}
	if value, ok := tu.mutation.Description(); ok {
		_spec.SetField(template.FieldDescription, field.TypeString, value)
	}
	if tu.mutation.DescriptionCleared() {
		_spec.ClearField(template.FieldDescription, field.TypeString)
	}
	if value, ok := tu.mutation.GetType(); ok {
		_spec.SetField(template.FieldType, field.TypeString, value)
	}
	if tu.mutation.TypeCleared() {
		_spec.ClearField(template.FieldType, field.TypeString)
	}
	if value, ok := tu.mutation.Version(); ok {
		_spec.SetField(template.FieldVersion, field.TypeString, value)
	}
	if tu.mutation.VersionCleared() {
		_spec.ClearField(template.FieldVersion, field.TypeString)
	}
	if value, ok := tu.mutation.Status(); ok {
		_spec.SetField(template.FieldStatus, field.TypeInt, value)
	}
	if value, ok := tu.mutation.AddedStatus(); ok {
		_spec.AddField(template.FieldStatus, field.TypeInt, value)
	}
	if value, ok := tu.mutation.Disabled(); ok {
		_spec.SetField(template.FieldDisabled, field.TypeBool, value)
	}
	if tu.mutation.DisabledCleared() {
		_spec.ClearField(template.FieldDisabled, field.TypeBool)
	}
	if value, ok := tu.mutation.FormCode(); ok {
		_spec.SetField(template.FieldFormCode, field.TypeString, value)
	}
	if value, ok := tu.mutation.FormVersion(); ok {
		_spec.SetField(template.FieldFormVersion, field.TypeString, value)
	}
	if tu.mutation.FormVersionCleared() {
		_spec.ClearField(template.FieldFormVersion, field.TypeString)
	}
	if value, ok := tu.mutation.FormConfig(); ok {
		_spec.SetField(template.FieldFormConfig, field.TypeJSON, value)
	}
	if tu.mutation.FormConfigCleared() {
		_spec.ClearField(template.FieldFormConfig, field.TypeJSON)
	}
	if value, ok := tu.mutation.FormPermissions(); ok {
		_spec.SetField(template.FieldFormPermissions, field.TypeJSON, value)
	}
	if tu.mutation.FormPermissionsCleared() {
		_spec.ClearField(template.FieldFormPermissions, field.TypeJSON)
	}
	if value, ok := tu.mutation.FieldPermissions(); ok {
		_spec.SetField(template.FieldFieldPermissions, field.TypeJSON, value)
	}
	if tu.mutation.FieldPermissionsCleared() {
		_spec.ClearField(template.FieldFieldPermissions, field.TypeJSON)
	}
	if value, ok := tu.mutation.NodeKey(); ok {
		_spec.SetField(template.FieldNodeKey, field.TypeString, value)
	}
	if value, ok := tu.mutation.NodeType(); ok {
		_spec.SetField(template.FieldNodeType, field.TypeString, value)
	}
	if value, ok := tu.mutation.NodeConfig(); ok {
		_spec.SetField(template.FieldNodeConfig, field.TypeJSON, value)
	}
	if tu.mutation.NodeConfigCleared() {
		_spec.ClearField(template.FieldNodeConfig, field.TypeJSON)
	}
	if value, ok := tu.mutation.NodeRules(); ok {
		_spec.SetField(template.FieldNodeRules, field.TypeJSON, value)
	}
	if tu.mutation.NodeRulesCleared() {
		_spec.ClearField(template.FieldNodeRules, field.TypeJSON)
	}
	if value, ok := tu.mutation.NodeEvents(); ok {
		_spec.SetField(template.FieldNodeEvents, field.TypeJSON, value)
	}
	if tu.mutation.NodeEventsCleared() {
		_spec.ClearField(template.FieldNodeEvents, field.TypeJSON)
	}
	if value, ok := tu.mutation.BusinessTags(); ok {
		_spec.SetField(template.FieldBusinessTags, field.TypeJSON, value)
	}
	if value, ok := tu.mutation.AppendedBusinessTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, template.FieldBusinessTags, value)
		})
	}
	if tu.mutation.BusinessTagsCleared() {
		_spec.ClearField(template.FieldBusinessTags, field.TypeJSON)
	}
	if value, ok := tu.mutation.ModuleCode(); ok {
		_spec.SetField(template.FieldModuleCode, field.TypeString, value)
	}
	if value, ok := tu.mutation.Category(); ok {
		_spec.SetField(template.FieldCategory, field.TypeString, value)
	}
	if tu.mutation.CategoryCleared() {
		_spec.ClearField(template.FieldCategory, field.TypeString)
	}
	if value, ok := tu.mutation.AllowCancel(); ok {
		_spec.SetField(template.FieldAllowCancel, field.TypeBool, value)
	}
	if value, ok := tu.mutation.AllowUrge(); ok {
		_spec.SetField(template.FieldAllowUrge, field.TypeBool, value)
	}
	if value, ok := tu.mutation.AllowDelegate(); ok {
		_spec.SetField(template.FieldAllowDelegate, field.TypeBool, value)
	}
	if value, ok := tu.mutation.AllowTransfer(); ok {
		_spec.SetField(template.FieldAllowTransfer, field.TypeBool, value)
	}
	if value, ok := tu.mutation.IsDraftEnabled(); ok {
		_spec.SetField(template.FieldIsDraftEnabled, field.TypeBool, value)
	}
	if value, ok := tu.mutation.IsAutoStart(); ok {
		_spec.SetField(template.FieldIsAutoStart, field.TypeBool, value)
	}
	if value, ok := tu.mutation.StrictMode(); ok {
		_spec.SetField(template.FieldStrictMode, field.TypeBool, value)
	}
	if value, ok := tu.mutation.Viewers(); ok {
		_spec.SetField(template.FieldViewers, field.TypeJSON, value)
	}
	if value, ok := tu.mutation.AppendedViewers(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, template.FieldViewers, value)
		})
	}
	if tu.mutation.ViewersCleared() {
		_spec.ClearField(template.FieldViewers, field.TypeJSON)
	}
	if value, ok := tu.mutation.Editors(); ok {
		_spec.SetField(template.FieldEditors, field.TypeJSON, value)
	}
	if value, ok := tu.mutation.AppendedEditors(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, template.FieldEditors, value)
		})
	}
	if tu.mutation.EditorsCleared() {
		_spec.ClearField(template.FieldEditors, field.TypeJSON)
	}
	if value, ok := tu.mutation.PermissionConfigs(); ok {
		_spec.SetField(template.FieldPermissionConfigs, field.TypeJSON, value)
	}
	if tu.mutation.PermissionConfigsCleared() {
		_spec.ClearField(template.FieldPermissionConfigs, field.TypeJSON)
	}
	if value, ok := tu.mutation.RoleConfigs(); ok {
		_spec.SetField(template.FieldRoleConfigs, field.TypeJSON, value)
	}
	if tu.mutation.RoleConfigsCleared() {
		_spec.ClearField(template.FieldRoleConfigs, field.TypeJSON)
	}
	if value, ok := tu.mutation.VisibleRange(); ok {
		_spec.SetField(template.FieldVisibleRange, field.TypeJSON, value)
	}
	if tu.mutation.VisibleRangeCleared() {
		_spec.ClearField(template.FieldVisibleRange, field.TypeJSON)
	}
	if value, ok := tu.mutation.Extras(); ok {
		_spec.SetField(template.FieldExtras, field.TypeJSON, value)
	}
	if tu.mutation.ExtrasCleared() {
		_spec.ClearField(template.FieldExtras, field.TypeJSON)
	}
	if value, ok := tu.mutation.TenantID(); ok {
		_spec.SetField(template.FieldTenantID, field.TypeString, value)
	}
	if tu.mutation.TenantIDCleared() {
		_spec.ClearField(template.FieldTenantID, field.TypeString)
	}
	if value, ok := tu.mutation.CreatedBy(); ok {
		_spec.SetField(template.FieldCreatedBy, field.TypeString, value)
	}
	if tu.mutation.CreatedByCleared() {
		_spec.ClearField(template.FieldCreatedBy, field.TypeString)
	}
	if value, ok := tu.mutation.UpdatedBy(); ok {
		_spec.SetField(template.FieldUpdatedBy, field.TypeString, value)
	}
	if tu.mutation.UpdatedByCleared() {
		_spec.ClearField(template.FieldUpdatedBy, field.TypeString)
	}
	if tu.mutation.CreatedAtCleared() {
		_spec.ClearField(template.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := tu.mutation.UpdatedAt(); ok {
		_spec.SetField(template.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := tu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(template.FieldUpdatedAt, field.TypeInt64, value)
	}
	if tu.mutation.UpdatedAtCleared() {
		_spec.ClearField(template.FieldUpdatedAt, field.TypeInt64)
	}
	if value, ok := tu.mutation.TemplateKey(); ok {
		_spec.SetField(template.FieldTemplateKey, field.TypeString, value)
	}
	if value, ok := tu.mutation.ProcessRules(); ok {
		_spec.SetField(template.FieldProcessRules, field.TypeJSON, value)
	}
	if tu.mutation.ProcessRulesCleared() {
		_spec.ClearField(template.FieldProcessRules, field.TypeJSON)
	}
	if value, ok := tu.mutation.TriggerConditions(); ok {
		_spec.SetField(template.FieldTriggerConditions, field.TypeJSON, value)
	}
	if tu.mutation.TriggerConditionsCleared() {
		_spec.ClearField(template.FieldTriggerConditions, field.TypeJSON)
	}
	if value, ok := tu.mutation.TimeoutConfig(); ok {
		_spec.SetField(template.FieldTimeoutConfig, field.TypeJSON, value)
	}
	if tu.mutation.TimeoutConfigCleared() {
		_spec.ClearField(template.FieldTimeoutConfig, field.TypeJSON)
	}
	if value, ok := tu.mutation.ReminderConfig(); ok {
		_spec.SetField(template.FieldReminderConfig, field.TypeJSON, value)
	}
	if tu.mutation.ReminderConfigCleared() {
		_spec.ClearField(template.FieldReminderConfig, field.TypeJSON)
	}
	if value, ok := tu.mutation.SourceVersion(); ok {
		_spec.SetField(template.FieldSourceVersion, field.TypeString, value)
	}
	if tu.mutation.SourceVersionCleared() {
		_spec.ClearField(template.FieldSourceVersion, field.TypeString)
	}
	if value, ok := tu.mutation.IsLatest(); ok {
		_spec.SetField(template.FieldIsLatest, field.TypeBool, value)
	}
	if value, ok := tu.mutation.EffectiveTime(); ok {
		_spec.SetField(template.FieldEffectiveTime, field.TypeTime, value)
	}
	if tu.mutation.EffectiveTimeCleared() {
		_spec.ClearField(template.FieldEffectiveTime, field.TypeTime)
	}
	if value, ok := tu.mutation.ExpireTime(); ok {
		_spec.SetField(template.FieldExpireTime, field.TypeTime, value)
	}
	if tu.mutation.ExpireTimeCleared() {
		_spec.ClearField(template.FieldExpireTime, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{template.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TemplateUpdateOne is the builder for updating a single Template entity.
type TemplateUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TemplateMutation
}

// SetName sets the "name" field.
func (tuo *TemplateUpdateOne) SetName(s string) *TemplateUpdateOne {
	tuo.mutation.SetName(s)
	return tuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tuo *TemplateUpdateOne) SetNillableName(s *string) *TemplateUpdateOne {
	if s != nil {
		tuo.SetName(*s)
	}
	return tuo
}

// ClearName clears the value of the "name" field.
func (tuo *TemplateUpdateOne) ClearName() *TemplateUpdateOne {
	tuo.mutation.ClearName()
	return tuo
}

// SetCode sets the "code" field.
func (tuo *TemplateUpdateOne) SetCode(s string) *TemplateUpdateOne {
	tuo.mutation.SetCode(s)
	return tuo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (tuo *TemplateUpdateOne) SetNillableCode(s *string) *TemplateUpdateOne {
	if s != nil {
		tuo.SetCode(*s)
	}
	return tuo
}

// ClearCode clears the value of the "code" field.
func (tuo *TemplateUpdateOne) ClearCode() *TemplateUpdateOne {
	tuo.mutation.ClearCode()
	return tuo
}

// SetDescription sets the "description" field.
func (tuo *TemplateUpdateOne) SetDescription(s string) *TemplateUpdateOne {
	tuo.mutation.SetDescription(s)
	return tuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tuo *TemplateUpdateOne) SetNillableDescription(s *string) *TemplateUpdateOne {
	if s != nil {
		tuo.SetDescription(*s)
	}
	return tuo
}

// ClearDescription clears the value of the "description" field.
func (tuo *TemplateUpdateOne) ClearDescription() *TemplateUpdateOne {
	tuo.mutation.ClearDescription()
	return tuo
}

// SetType sets the "type" field.
func (tuo *TemplateUpdateOne) SetType(s string) *TemplateUpdateOne {
	tuo.mutation.SetType(s)
	return tuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (tuo *TemplateUpdateOne) SetNillableType(s *string) *TemplateUpdateOne {
	if s != nil {
		tuo.SetType(*s)
	}
	return tuo
}

// ClearType clears the value of the "type" field.
func (tuo *TemplateUpdateOne) ClearType() *TemplateUpdateOne {
	tuo.mutation.ClearType()
	return tuo
}

// SetVersion sets the "version" field.
func (tuo *TemplateUpdateOne) SetVersion(s string) *TemplateUpdateOne {
	tuo.mutation.SetVersion(s)
	return tuo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (tuo *TemplateUpdateOne) SetNillableVersion(s *string) *TemplateUpdateOne {
	if s != nil {
		tuo.SetVersion(*s)
	}
	return tuo
}

// ClearVersion clears the value of the "version" field.
func (tuo *TemplateUpdateOne) ClearVersion() *TemplateUpdateOne {
	tuo.mutation.ClearVersion()
	return tuo
}

// SetStatus sets the "status" field.
func (tuo *TemplateUpdateOne) SetStatus(i int) *TemplateUpdateOne {
	tuo.mutation.ResetStatus()
	tuo.mutation.SetStatus(i)
	return tuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tuo *TemplateUpdateOne) SetNillableStatus(i *int) *TemplateUpdateOne {
	if i != nil {
		tuo.SetStatus(*i)
	}
	return tuo
}

// AddStatus adds i to the "status" field.
func (tuo *TemplateUpdateOne) AddStatus(i int) *TemplateUpdateOne {
	tuo.mutation.AddStatus(i)
	return tuo
}

// SetDisabled sets the "disabled" field.
func (tuo *TemplateUpdateOne) SetDisabled(b bool) *TemplateUpdateOne {
	tuo.mutation.SetDisabled(b)
	return tuo
}

// SetNillableDisabled sets the "disabled" field if the given value is not nil.
func (tuo *TemplateUpdateOne) SetNillableDisabled(b *bool) *TemplateUpdateOne {
	if b != nil {
		tuo.SetDisabled(*b)
	}
	return tuo
}

// ClearDisabled clears the value of the "disabled" field.
func (tuo *TemplateUpdateOne) ClearDisabled() *TemplateUpdateOne {
	tuo.mutation.ClearDisabled()
	return tuo
}

// SetFormCode sets the "form_code" field.
func (tuo *TemplateUpdateOne) SetFormCode(s string) *TemplateUpdateOne {
	tuo.mutation.SetFormCode(s)
	return tuo
}

// SetNillableFormCode sets the "form_code" field if the given value is not nil.
func (tuo *TemplateUpdateOne) SetNillableFormCode(s *string) *TemplateUpdateOne {
	if s != nil {
		tuo.SetFormCode(*s)
	}
	return tuo
}

// SetFormVersion sets the "form_version" field.
func (tuo *TemplateUpdateOne) SetFormVersion(s string) *TemplateUpdateOne {
	tuo.mutation.SetFormVersion(s)
	return tuo
}

// SetNillableFormVersion sets the "form_version" field if the given value is not nil.
func (tuo *TemplateUpdateOne) SetNillableFormVersion(s *string) *TemplateUpdateOne {
	if s != nil {
		tuo.SetFormVersion(*s)
	}
	return tuo
}

// ClearFormVersion clears the value of the "form_version" field.
func (tuo *TemplateUpdateOne) ClearFormVersion() *TemplateUpdateOne {
	tuo.mutation.ClearFormVersion()
	return tuo
}

// SetFormConfig sets the "form_config" field.
func (tuo *TemplateUpdateOne) SetFormConfig(m map[string]interface{}) *TemplateUpdateOne {
	tuo.mutation.SetFormConfig(m)
	return tuo
}

// ClearFormConfig clears the value of the "form_config" field.
func (tuo *TemplateUpdateOne) ClearFormConfig() *TemplateUpdateOne {
	tuo.mutation.ClearFormConfig()
	return tuo
}

// SetFormPermissions sets the "form_permissions" field.
func (tuo *TemplateUpdateOne) SetFormPermissions(m map[string]interface{}) *TemplateUpdateOne {
	tuo.mutation.SetFormPermissions(m)
	return tuo
}

// ClearFormPermissions clears the value of the "form_permissions" field.
func (tuo *TemplateUpdateOne) ClearFormPermissions() *TemplateUpdateOne {
	tuo.mutation.ClearFormPermissions()
	return tuo
}

// SetFieldPermissions sets the "field_permissions" field.
func (tuo *TemplateUpdateOne) SetFieldPermissions(m map[string]interface{}) *TemplateUpdateOne {
	tuo.mutation.SetFieldPermissions(m)
	return tuo
}

// ClearFieldPermissions clears the value of the "field_permissions" field.
func (tuo *TemplateUpdateOne) ClearFieldPermissions() *TemplateUpdateOne {
	tuo.mutation.ClearFieldPermissions()
	return tuo
}

// SetNodeKey sets the "node_key" field.
func (tuo *TemplateUpdateOne) SetNodeKey(s string) *TemplateUpdateOne {
	tuo.mutation.SetNodeKey(s)
	return tuo
}

// SetNillableNodeKey sets the "node_key" field if the given value is not nil.
func (tuo *TemplateUpdateOne) SetNillableNodeKey(s *string) *TemplateUpdateOne {
	if s != nil {
		tuo.SetNodeKey(*s)
	}
	return tuo
}

// SetNodeType sets the "node_type" field.
func (tuo *TemplateUpdateOne) SetNodeType(s string) *TemplateUpdateOne {
	tuo.mutation.SetNodeType(s)
	return tuo
}

// SetNillableNodeType sets the "node_type" field if the given value is not nil.
func (tuo *TemplateUpdateOne) SetNillableNodeType(s *string) *TemplateUpdateOne {
	if s != nil {
		tuo.SetNodeType(*s)
	}
	return tuo
}

// SetNodeConfig sets the "node_config" field.
func (tuo *TemplateUpdateOne) SetNodeConfig(m map[string]interface{}) *TemplateUpdateOne {
	tuo.mutation.SetNodeConfig(m)
	return tuo
}

// ClearNodeConfig clears the value of the "node_config" field.
func (tuo *TemplateUpdateOne) ClearNodeConfig() *TemplateUpdateOne {
	tuo.mutation.ClearNodeConfig()
	return tuo
}

// SetNodeRules sets the "node_rules" field.
func (tuo *TemplateUpdateOne) SetNodeRules(m map[string]interface{}) *TemplateUpdateOne {
	tuo.mutation.SetNodeRules(m)
	return tuo
}

// ClearNodeRules clears the value of the "node_rules" field.
func (tuo *TemplateUpdateOne) ClearNodeRules() *TemplateUpdateOne {
	tuo.mutation.ClearNodeRules()
	return tuo
}

// SetNodeEvents sets the "node_events" field.
func (tuo *TemplateUpdateOne) SetNodeEvents(m map[string]interface{}) *TemplateUpdateOne {
	tuo.mutation.SetNodeEvents(m)
	return tuo
}

// ClearNodeEvents clears the value of the "node_events" field.
func (tuo *TemplateUpdateOne) ClearNodeEvents() *TemplateUpdateOne {
	tuo.mutation.ClearNodeEvents()
	return tuo
}

// SetBusinessTags sets the "business_tags" field.
func (tuo *TemplateUpdateOne) SetBusinessTags(i []interface{}) *TemplateUpdateOne {
	tuo.mutation.SetBusinessTags(i)
	return tuo
}

// AppendBusinessTags appends i to the "business_tags" field.
func (tuo *TemplateUpdateOne) AppendBusinessTags(i []interface{}) *TemplateUpdateOne {
	tuo.mutation.AppendBusinessTags(i)
	return tuo
}

// ClearBusinessTags clears the value of the "business_tags" field.
func (tuo *TemplateUpdateOne) ClearBusinessTags() *TemplateUpdateOne {
	tuo.mutation.ClearBusinessTags()
	return tuo
}

// SetModuleCode sets the "module_code" field.
func (tuo *TemplateUpdateOne) SetModuleCode(s string) *TemplateUpdateOne {
	tuo.mutation.SetModuleCode(s)
	return tuo
}

// SetNillableModuleCode sets the "module_code" field if the given value is not nil.
func (tuo *TemplateUpdateOne) SetNillableModuleCode(s *string) *TemplateUpdateOne {
	if s != nil {
		tuo.SetModuleCode(*s)
	}
	return tuo
}

// SetCategory sets the "category" field.
func (tuo *TemplateUpdateOne) SetCategory(s string) *TemplateUpdateOne {
	tuo.mutation.SetCategory(s)
	return tuo
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (tuo *TemplateUpdateOne) SetNillableCategory(s *string) *TemplateUpdateOne {
	if s != nil {
		tuo.SetCategory(*s)
	}
	return tuo
}

// ClearCategory clears the value of the "category" field.
func (tuo *TemplateUpdateOne) ClearCategory() *TemplateUpdateOne {
	tuo.mutation.ClearCategory()
	return tuo
}

// SetAllowCancel sets the "allow_cancel" field.
func (tuo *TemplateUpdateOne) SetAllowCancel(b bool) *TemplateUpdateOne {
	tuo.mutation.SetAllowCancel(b)
	return tuo
}

// SetNillableAllowCancel sets the "allow_cancel" field if the given value is not nil.
func (tuo *TemplateUpdateOne) SetNillableAllowCancel(b *bool) *TemplateUpdateOne {
	if b != nil {
		tuo.SetAllowCancel(*b)
	}
	return tuo
}

// SetAllowUrge sets the "allow_urge" field.
func (tuo *TemplateUpdateOne) SetAllowUrge(b bool) *TemplateUpdateOne {
	tuo.mutation.SetAllowUrge(b)
	return tuo
}

// SetNillableAllowUrge sets the "allow_urge" field if the given value is not nil.
func (tuo *TemplateUpdateOne) SetNillableAllowUrge(b *bool) *TemplateUpdateOne {
	if b != nil {
		tuo.SetAllowUrge(*b)
	}
	return tuo
}

// SetAllowDelegate sets the "allow_delegate" field.
func (tuo *TemplateUpdateOne) SetAllowDelegate(b bool) *TemplateUpdateOne {
	tuo.mutation.SetAllowDelegate(b)
	return tuo
}

// SetNillableAllowDelegate sets the "allow_delegate" field if the given value is not nil.
func (tuo *TemplateUpdateOne) SetNillableAllowDelegate(b *bool) *TemplateUpdateOne {
	if b != nil {
		tuo.SetAllowDelegate(*b)
	}
	return tuo
}

// SetAllowTransfer sets the "allow_transfer" field.
func (tuo *TemplateUpdateOne) SetAllowTransfer(b bool) *TemplateUpdateOne {
	tuo.mutation.SetAllowTransfer(b)
	return tuo
}

// SetNillableAllowTransfer sets the "allow_transfer" field if the given value is not nil.
func (tuo *TemplateUpdateOne) SetNillableAllowTransfer(b *bool) *TemplateUpdateOne {
	if b != nil {
		tuo.SetAllowTransfer(*b)
	}
	return tuo
}

// SetIsDraftEnabled sets the "is_draft_enabled" field.
func (tuo *TemplateUpdateOne) SetIsDraftEnabled(b bool) *TemplateUpdateOne {
	tuo.mutation.SetIsDraftEnabled(b)
	return tuo
}

// SetNillableIsDraftEnabled sets the "is_draft_enabled" field if the given value is not nil.
func (tuo *TemplateUpdateOne) SetNillableIsDraftEnabled(b *bool) *TemplateUpdateOne {
	if b != nil {
		tuo.SetIsDraftEnabled(*b)
	}
	return tuo
}

// SetIsAutoStart sets the "is_auto_start" field.
func (tuo *TemplateUpdateOne) SetIsAutoStart(b bool) *TemplateUpdateOne {
	tuo.mutation.SetIsAutoStart(b)
	return tuo
}

// SetNillableIsAutoStart sets the "is_auto_start" field if the given value is not nil.
func (tuo *TemplateUpdateOne) SetNillableIsAutoStart(b *bool) *TemplateUpdateOne {
	if b != nil {
		tuo.SetIsAutoStart(*b)
	}
	return tuo
}

// SetStrictMode sets the "strict_mode" field.
func (tuo *TemplateUpdateOne) SetStrictMode(b bool) *TemplateUpdateOne {
	tuo.mutation.SetStrictMode(b)
	return tuo
}

// SetNillableStrictMode sets the "strict_mode" field if the given value is not nil.
func (tuo *TemplateUpdateOne) SetNillableStrictMode(b *bool) *TemplateUpdateOne {
	if b != nil {
		tuo.SetStrictMode(*b)
	}
	return tuo
}

// SetViewers sets the "viewers" field.
func (tuo *TemplateUpdateOne) SetViewers(i []interface{}) *TemplateUpdateOne {
	tuo.mutation.SetViewers(i)
	return tuo
}

// AppendViewers appends i to the "viewers" field.
func (tuo *TemplateUpdateOne) AppendViewers(i []interface{}) *TemplateUpdateOne {
	tuo.mutation.AppendViewers(i)
	return tuo
}

// ClearViewers clears the value of the "viewers" field.
func (tuo *TemplateUpdateOne) ClearViewers() *TemplateUpdateOne {
	tuo.mutation.ClearViewers()
	return tuo
}

// SetEditors sets the "editors" field.
func (tuo *TemplateUpdateOne) SetEditors(i []interface{}) *TemplateUpdateOne {
	tuo.mutation.SetEditors(i)
	return tuo
}

// AppendEditors appends i to the "editors" field.
func (tuo *TemplateUpdateOne) AppendEditors(i []interface{}) *TemplateUpdateOne {
	tuo.mutation.AppendEditors(i)
	return tuo
}

// ClearEditors clears the value of the "editors" field.
func (tuo *TemplateUpdateOne) ClearEditors() *TemplateUpdateOne {
	tuo.mutation.ClearEditors()
	return tuo
}

// SetPermissionConfigs sets the "permission_configs" field.
func (tuo *TemplateUpdateOne) SetPermissionConfigs(m map[string]interface{}) *TemplateUpdateOne {
	tuo.mutation.SetPermissionConfigs(m)
	return tuo
}

// ClearPermissionConfigs clears the value of the "permission_configs" field.
func (tuo *TemplateUpdateOne) ClearPermissionConfigs() *TemplateUpdateOne {
	tuo.mutation.ClearPermissionConfigs()
	return tuo
}

// SetRoleConfigs sets the "role_configs" field.
func (tuo *TemplateUpdateOne) SetRoleConfigs(m map[string]interface{}) *TemplateUpdateOne {
	tuo.mutation.SetRoleConfigs(m)
	return tuo
}

// ClearRoleConfigs clears the value of the "role_configs" field.
func (tuo *TemplateUpdateOne) ClearRoleConfigs() *TemplateUpdateOne {
	tuo.mutation.ClearRoleConfigs()
	return tuo
}

// SetVisibleRange sets the "visible_range" field.
func (tuo *TemplateUpdateOne) SetVisibleRange(m map[string]interface{}) *TemplateUpdateOne {
	tuo.mutation.SetVisibleRange(m)
	return tuo
}

// ClearVisibleRange clears the value of the "visible_range" field.
func (tuo *TemplateUpdateOne) ClearVisibleRange() *TemplateUpdateOne {
	tuo.mutation.ClearVisibleRange()
	return tuo
}

// SetExtras sets the "extras" field.
func (tuo *TemplateUpdateOne) SetExtras(m map[string]interface{}) *TemplateUpdateOne {
	tuo.mutation.SetExtras(m)
	return tuo
}

// ClearExtras clears the value of the "extras" field.
func (tuo *TemplateUpdateOne) ClearExtras() *TemplateUpdateOne {
	tuo.mutation.ClearExtras()
	return tuo
}

// SetTenantID sets the "tenant_id" field.
func (tuo *TemplateUpdateOne) SetTenantID(s string) *TemplateUpdateOne {
	tuo.mutation.SetTenantID(s)
	return tuo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (tuo *TemplateUpdateOne) SetNillableTenantID(s *string) *TemplateUpdateOne {
	if s != nil {
		tuo.SetTenantID(*s)
	}
	return tuo
}

// ClearTenantID clears the value of the "tenant_id" field.
func (tuo *TemplateUpdateOne) ClearTenantID() *TemplateUpdateOne {
	tuo.mutation.ClearTenantID()
	return tuo
}

// SetCreatedBy sets the "created_by" field.
func (tuo *TemplateUpdateOne) SetCreatedBy(s string) *TemplateUpdateOne {
	tuo.mutation.SetCreatedBy(s)
	return tuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (tuo *TemplateUpdateOne) SetNillableCreatedBy(s *string) *TemplateUpdateOne {
	if s != nil {
		tuo.SetCreatedBy(*s)
	}
	return tuo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (tuo *TemplateUpdateOne) ClearCreatedBy() *TemplateUpdateOne {
	tuo.mutation.ClearCreatedBy()
	return tuo
}

// SetUpdatedBy sets the "updated_by" field.
func (tuo *TemplateUpdateOne) SetUpdatedBy(s string) *TemplateUpdateOne {
	tuo.mutation.SetUpdatedBy(s)
	return tuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (tuo *TemplateUpdateOne) SetNillableUpdatedBy(s *string) *TemplateUpdateOne {
	if s != nil {
		tuo.SetUpdatedBy(*s)
	}
	return tuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (tuo *TemplateUpdateOne) ClearUpdatedBy() *TemplateUpdateOne {
	tuo.mutation.ClearUpdatedBy()
	return tuo
}

// SetUpdatedAt sets the "updated_at" field.
func (tuo *TemplateUpdateOne) SetUpdatedAt(i int64) *TemplateUpdateOne {
	tuo.mutation.ResetUpdatedAt()
	tuo.mutation.SetUpdatedAt(i)
	return tuo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (tuo *TemplateUpdateOne) AddUpdatedAt(i int64) *TemplateUpdateOne {
	tuo.mutation.AddUpdatedAt(i)
	return tuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tuo *TemplateUpdateOne) ClearUpdatedAt() *TemplateUpdateOne {
	tuo.mutation.ClearUpdatedAt()
	return tuo
}

// SetTemplateKey sets the "template_key" field.
func (tuo *TemplateUpdateOne) SetTemplateKey(s string) *TemplateUpdateOne {
	tuo.mutation.SetTemplateKey(s)
	return tuo
}

// SetNillableTemplateKey sets the "template_key" field if the given value is not nil.
func (tuo *TemplateUpdateOne) SetNillableTemplateKey(s *string) *TemplateUpdateOne {
	if s != nil {
		tuo.SetTemplateKey(*s)
	}
	return tuo
}

// SetProcessRules sets the "process_rules" field.
func (tuo *TemplateUpdateOne) SetProcessRules(m map[string]interface{}) *TemplateUpdateOne {
	tuo.mutation.SetProcessRules(m)
	return tuo
}

// ClearProcessRules clears the value of the "process_rules" field.
func (tuo *TemplateUpdateOne) ClearProcessRules() *TemplateUpdateOne {
	tuo.mutation.ClearProcessRules()
	return tuo
}

// SetTriggerConditions sets the "trigger_conditions" field.
func (tuo *TemplateUpdateOne) SetTriggerConditions(m map[string]interface{}) *TemplateUpdateOne {
	tuo.mutation.SetTriggerConditions(m)
	return tuo
}

// ClearTriggerConditions clears the value of the "trigger_conditions" field.
func (tuo *TemplateUpdateOne) ClearTriggerConditions() *TemplateUpdateOne {
	tuo.mutation.ClearTriggerConditions()
	return tuo
}

// SetTimeoutConfig sets the "timeout_config" field.
func (tuo *TemplateUpdateOne) SetTimeoutConfig(m map[string]interface{}) *TemplateUpdateOne {
	tuo.mutation.SetTimeoutConfig(m)
	return tuo
}

// ClearTimeoutConfig clears the value of the "timeout_config" field.
func (tuo *TemplateUpdateOne) ClearTimeoutConfig() *TemplateUpdateOne {
	tuo.mutation.ClearTimeoutConfig()
	return tuo
}

// SetReminderConfig sets the "reminder_config" field.
func (tuo *TemplateUpdateOne) SetReminderConfig(m map[string]interface{}) *TemplateUpdateOne {
	tuo.mutation.SetReminderConfig(m)
	return tuo
}

// ClearReminderConfig clears the value of the "reminder_config" field.
func (tuo *TemplateUpdateOne) ClearReminderConfig() *TemplateUpdateOne {
	tuo.mutation.ClearReminderConfig()
	return tuo
}

// SetSourceVersion sets the "source_version" field.
func (tuo *TemplateUpdateOne) SetSourceVersion(s string) *TemplateUpdateOne {
	tuo.mutation.SetSourceVersion(s)
	return tuo
}

// SetNillableSourceVersion sets the "source_version" field if the given value is not nil.
func (tuo *TemplateUpdateOne) SetNillableSourceVersion(s *string) *TemplateUpdateOne {
	if s != nil {
		tuo.SetSourceVersion(*s)
	}
	return tuo
}

// ClearSourceVersion clears the value of the "source_version" field.
func (tuo *TemplateUpdateOne) ClearSourceVersion() *TemplateUpdateOne {
	tuo.mutation.ClearSourceVersion()
	return tuo
}

// SetIsLatest sets the "is_latest" field.
func (tuo *TemplateUpdateOne) SetIsLatest(b bool) *TemplateUpdateOne {
	tuo.mutation.SetIsLatest(b)
	return tuo
}

// SetNillableIsLatest sets the "is_latest" field if the given value is not nil.
func (tuo *TemplateUpdateOne) SetNillableIsLatest(b *bool) *TemplateUpdateOne {
	if b != nil {
		tuo.SetIsLatest(*b)
	}
	return tuo
}

// SetEffectiveTime sets the "effective_time" field.
func (tuo *TemplateUpdateOne) SetEffectiveTime(t time.Time) *TemplateUpdateOne {
	tuo.mutation.SetEffectiveTime(t)
	return tuo
}

// SetNillableEffectiveTime sets the "effective_time" field if the given value is not nil.
func (tuo *TemplateUpdateOne) SetNillableEffectiveTime(t *time.Time) *TemplateUpdateOne {
	if t != nil {
		tuo.SetEffectiveTime(*t)
	}
	return tuo
}

// ClearEffectiveTime clears the value of the "effective_time" field.
func (tuo *TemplateUpdateOne) ClearEffectiveTime() *TemplateUpdateOne {
	tuo.mutation.ClearEffectiveTime()
	return tuo
}

// SetExpireTime sets the "expire_time" field.
func (tuo *TemplateUpdateOne) SetExpireTime(t time.Time) *TemplateUpdateOne {
	tuo.mutation.SetExpireTime(t)
	return tuo
}

// SetNillableExpireTime sets the "expire_time" field if the given value is not nil.
func (tuo *TemplateUpdateOne) SetNillableExpireTime(t *time.Time) *TemplateUpdateOne {
	if t != nil {
		tuo.SetExpireTime(*t)
	}
	return tuo
}

// ClearExpireTime clears the value of the "expire_time" field.
func (tuo *TemplateUpdateOne) ClearExpireTime() *TemplateUpdateOne {
	tuo.mutation.ClearExpireTime()
	return tuo
}

// Mutation returns the TemplateMutation object of the builder.
func (tuo *TemplateUpdateOne) Mutation() *TemplateMutation {
	return tuo.mutation
}

// Where appends a list predicates to the TemplateUpdate builder.
func (tuo *TemplateUpdateOne) Where(ps ...predicate.Template) *TemplateUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TemplateUpdateOne) Select(field string, fields ...string) *TemplateUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Template entity.
func (tuo *TemplateUpdateOne) Save(ctx context.Context) (*Template, error) {
	tuo.defaults()
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TemplateUpdateOne) SaveX(ctx context.Context) *Template {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TemplateUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TemplateUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tuo *TemplateUpdateOne) defaults() {
	if _, ok := tuo.mutation.UpdatedAt(); !ok && !tuo.mutation.UpdatedAtCleared() {
		v := template.UpdateDefaultUpdatedAt()
		tuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TemplateUpdateOne) check() error {
	if v, ok := tuo.mutation.TenantID(); ok {
		if err := template.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "Template.tenant_id": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.CreatedBy(); ok {
		if err := template.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "Template.created_by": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.UpdatedBy(); ok {
		if err := template.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "Template.updated_by": %w`, err)}
		}
	}
	return nil
}

func (tuo *TemplateUpdateOne) sqlSave(ctx context.Context) (_node *Template, err error) {
	if err := tuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(template.Table, template.Columns, sqlgraph.NewFieldSpec(template.FieldID, field.TypeString))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Template.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, template.FieldID)
		for _, f := range fields {
			if !template.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != template.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.Name(); ok {
		_spec.SetField(template.FieldName, field.TypeString, value)
	}
	if tuo.mutation.NameCleared() {
		_spec.ClearField(template.FieldName, field.TypeString)
	}
	if value, ok := tuo.mutation.Code(); ok {
		_spec.SetField(template.FieldCode, field.TypeString, value)
	}
	if tuo.mutation.CodeCleared() {
		_spec.ClearField(template.FieldCode, field.TypeString)
	}
	if value, ok := tuo.mutation.Description(); ok {
		_spec.SetField(template.FieldDescription, field.TypeString, value)
	}
	if tuo.mutation.DescriptionCleared() {
		_spec.ClearField(template.FieldDescription, field.TypeString)
	}
	if value, ok := tuo.mutation.GetType(); ok {
		_spec.SetField(template.FieldType, field.TypeString, value)
	}
	if tuo.mutation.TypeCleared() {
		_spec.ClearField(template.FieldType, field.TypeString)
	}
	if value, ok := tuo.mutation.Version(); ok {
		_spec.SetField(template.FieldVersion, field.TypeString, value)
	}
	if tuo.mutation.VersionCleared() {
		_spec.ClearField(template.FieldVersion, field.TypeString)
	}
	if value, ok := tuo.mutation.Status(); ok {
		_spec.SetField(template.FieldStatus, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.AddedStatus(); ok {
		_spec.AddField(template.FieldStatus, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.Disabled(); ok {
		_spec.SetField(template.FieldDisabled, field.TypeBool, value)
	}
	if tuo.mutation.DisabledCleared() {
		_spec.ClearField(template.FieldDisabled, field.TypeBool)
	}
	if value, ok := tuo.mutation.FormCode(); ok {
		_spec.SetField(template.FieldFormCode, field.TypeString, value)
	}
	if value, ok := tuo.mutation.FormVersion(); ok {
		_spec.SetField(template.FieldFormVersion, field.TypeString, value)
	}
	if tuo.mutation.FormVersionCleared() {
		_spec.ClearField(template.FieldFormVersion, field.TypeString)
	}
	if value, ok := tuo.mutation.FormConfig(); ok {
		_spec.SetField(template.FieldFormConfig, field.TypeJSON, value)
	}
	if tuo.mutation.FormConfigCleared() {
		_spec.ClearField(template.FieldFormConfig, field.TypeJSON)
	}
	if value, ok := tuo.mutation.FormPermissions(); ok {
		_spec.SetField(template.FieldFormPermissions, field.TypeJSON, value)
	}
	if tuo.mutation.FormPermissionsCleared() {
		_spec.ClearField(template.FieldFormPermissions, field.TypeJSON)
	}
	if value, ok := tuo.mutation.FieldPermissions(); ok {
		_spec.SetField(template.FieldFieldPermissions, field.TypeJSON, value)
	}
	if tuo.mutation.FieldPermissionsCleared() {
		_spec.ClearField(template.FieldFieldPermissions, field.TypeJSON)
	}
	if value, ok := tuo.mutation.NodeKey(); ok {
		_spec.SetField(template.FieldNodeKey, field.TypeString, value)
	}
	if value, ok := tuo.mutation.NodeType(); ok {
		_spec.SetField(template.FieldNodeType, field.TypeString, value)
	}
	if value, ok := tuo.mutation.NodeConfig(); ok {
		_spec.SetField(template.FieldNodeConfig, field.TypeJSON, value)
	}
	if tuo.mutation.NodeConfigCleared() {
		_spec.ClearField(template.FieldNodeConfig, field.TypeJSON)
	}
	if value, ok := tuo.mutation.NodeRules(); ok {
		_spec.SetField(template.FieldNodeRules, field.TypeJSON, value)
	}
	if tuo.mutation.NodeRulesCleared() {
		_spec.ClearField(template.FieldNodeRules, field.TypeJSON)
	}
	if value, ok := tuo.mutation.NodeEvents(); ok {
		_spec.SetField(template.FieldNodeEvents, field.TypeJSON, value)
	}
	if tuo.mutation.NodeEventsCleared() {
		_spec.ClearField(template.FieldNodeEvents, field.TypeJSON)
	}
	if value, ok := tuo.mutation.BusinessTags(); ok {
		_spec.SetField(template.FieldBusinessTags, field.TypeJSON, value)
	}
	if value, ok := tuo.mutation.AppendedBusinessTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, template.FieldBusinessTags, value)
		})
	}
	if tuo.mutation.BusinessTagsCleared() {
		_spec.ClearField(template.FieldBusinessTags, field.TypeJSON)
	}
	if value, ok := tuo.mutation.ModuleCode(); ok {
		_spec.SetField(template.FieldModuleCode, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Category(); ok {
		_spec.SetField(template.FieldCategory, field.TypeString, value)
	}
	if tuo.mutation.CategoryCleared() {
		_spec.ClearField(template.FieldCategory, field.TypeString)
	}
	if value, ok := tuo.mutation.AllowCancel(); ok {
		_spec.SetField(template.FieldAllowCancel, field.TypeBool, value)
	}
	if value, ok := tuo.mutation.AllowUrge(); ok {
		_spec.SetField(template.FieldAllowUrge, field.TypeBool, value)
	}
	if value, ok := tuo.mutation.AllowDelegate(); ok {
		_spec.SetField(template.FieldAllowDelegate, field.TypeBool, value)
	}
	if value, ok := tuo.mutation.AllowTransfer(); ok {
		_spec.SetField(template.FieldAllowTransfer, field.TypeBool, value)
	}
	if value, ok := tuo.mutation.IsDraftEnabled(); ok {
		_spec.SetField(template.FieldIsDraftEnabled, field.TypeBool, value)
	}
	if value, ok := tuo.mutation.IsAutoStart(); ok {
		_spec.SetField(template.FieldIsAutoStart, field.TypeBool, value)
	}
	if value, ok := tuo.mutation.StrictMode(); ok {
		_spec.SetField(template.FieldStrictMode, field.TypeBool, value)
	}
	if value, ok := tuo.mutation.Viewers(); ok {
		_spec.SetField(template.FieldViewers, field.TypeJSON, value)
	}
	if value, ok := tuo.mutation.AppendedViewers(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, template.FieldViewers, value)
		})
	}
	if tuo.mutation.ViewersCleared() {
		_spec.ClearField(template.FieldViewers, field.TypeJSON)
	}
	if value, ok := tuo.mutation.Editors(); ok {
		_spec.SetField(template.FieldEditors, field.TypeJSON, value)
	}
	if value, ok := tuo.mutation.AppendedEditors(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, template.FieldEditors, value)
		})
	}
	if tuo.mutation.EditorsCleared() {
		_spec.ClearField(template.FieldEditors, field.TypeJSON)
	}
	if value, ok := tuo.mutation.PermissionConfigs(); ok {
		_spec.SetField(template.FieldPermissionConfigs, field.TypeJSON, value)
	}
	if tuo.mutation.PermissionConfigsCleared() {
		_spec.ClearField(template.FieldPermissionConfigs, field.TypeJSON)
	}
	if value, ok := tuo.mutation.RoleConfigs(); ok {
		_spec.SetField(template.FieldRoleConfigs, field.TypeJSON, value)
	}
	if tuo.mutation.RoleConfigsCleared() {
		_spec.ClearField(template.FieldRoleConfigs, field.TypeJSON)
	}
	if value, ok := tuo.mutation.VisibleRange(); ok {
		_spec.SetField(template.FieldVisibleRange, field.TypeJSON, value)
	}
	if tuo.mutation.VisibleRangeCleared() {
		_spec.ClearField(template.FieldVisibleRange, field.TypeJSON)
	}
	if value, ok := tuo.mutation.Extras(); ok {
		_spec.SetField(template.FieldExtras, field.TypeJSON, value)
	}
	if tuo.mutation.ExtrasCleared() {
		_spec.ClearField(template.FieldExtras, field.TypeJSON)
	}
	if value, ok := tuo.mutation.TenantID(); ok {
		_spec.SetField(template.FieldTenantID, field.TypeString, value)
	}
	if tuo.mutation.TenantIDCleared() {
		_spec.ClearField(template.FieldTenantID, field.TypeString)
	}
	if value, ok := tuo.mutation.CreatedBy(); ok {
		_spec.SetField(template.FieldCreatedBy, field.TypeString, value)
	}
	if tuo.mutation.CreatedByCleared() {
		_spec.ClearField(template.FieldCreatedBy, field.TypeString)
	}
	if value, ok := tuo.mutation.UpdatedBy(); ok {
		_spec.SetField(template.FieldUpdatedBy, field.TypeString, value)
	}
	if tuo.mutation.UpdatedByCleared() {
		_spec.ClearField(template.FieldUpdatedBy, field.TypeString)
	}
	if tuo.mutation.CreatedAtCleared() {
		_spec.ClearField(template.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := tuo.mutation.UpdatedAt(); ok {
		_spec.SetField(template.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := tuo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(template.FieldUpdatedAt, field.TypeInt64, value)
	}
	if tuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(template.FieldUpdatedAt, field.TypeInt64)
	}
	if value, ok := tuo.mutation.TemplateKey(); ok {
		_spec.SetField(template.FieldTemplateKey, field.TypeString, value)
	}
	if value, ok := tuo.mutation.ProcessRules(); ok {
		_spec.SetField(template.FieldProcessRules, field.TypeJSON, value)
	}
	if tuo.mutation.ProcessRulesCleared() {
		_spec.ClearField(template.FieldProcessRules, field.TypeJSON)
	}
	if value, ok := tuo.mutation.TriggerConditions(); ok {
		_spec.SetField(template.FieldTriggerConditions, field.TypeJSON, value)
	}
	if tuo.mutation.TriggerConditionsCleared() {
		_spec.ClearField(template.FieldTriggerConditions, field.TypeJSON)
	}
	if value, ok := tuo.mutation.TimeoutConfig(); ok {
		_spec.SetField(template.FieldTimeoutConfig, field.TypeJSON, value)
	}
	if tuo.mutation.TimeoutConfigCleared() {
		_spec.ClearField(template.FieldTimeoutConfig, field.TypeJSON)
	}
	if value, ok := tuo.mutation.ReminderConfig(); ok {
		_spec.SetField(template.FieldReminderConfig, field.TypeJSON, value)
	}
	if tuo.mutation.ReminderConfigCleared() {
		_spec.ClearField(template.FieldReminderConfig, field.TypeJSON)
	}
	if value, ok := tuo.mutation.SourceVersion(); ok {
		_spec.SetField(template.FieldSourceVersion, field.TypeString, value)
	}
	if tuo.mutation.SourceVersionCleared() {
		_spec.ClearField(template.FieldSourceVersion, field.TypeString)
	}
	if value, ok := tuo.mutation.IsLatest(); ok {
		_spec.SetField(template.FieldIsLatest, field.TypeBool, value)
	}
	if value, ok := tuo.mutation.EffectiveTime(); ok {
		_spec.SetField(template.FieldEffectiveTime, field.TypeTime, value)
	}
	if tuo.mutation.EffectiveTimeCleared() {
		_spec.ClearField(template.FieldEffectiveTime, field.TypeTime)
	}
	if value, ok := tuo.mutation.ExpireTime(); ok {
		_spec.SetField(template.FieldExpireTime, field.TypeTime, value)
	}
	if tuo.mutation.ExpireTimeCleared() {
		_spec.ClearField(template.FieldExpireTime, field.TypeTime)
	}
	_node = &Template{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{template.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
