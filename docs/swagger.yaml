definitions:
  resp.Exception:
    properties:
      code:
        description: Business code
        type: integer
      data:
        description: Response data
      errors:
        description: Validation errors
      message:
        description: Message
        type: string
      status:
        description: HTTP status
        type: integer
    type: object
  structs.Captcha:
    properties:
      id:
        type: string
      solution:
        type: string
    required:
    - id
    - solution
    type: object
  structs.CasbinRuleBody:
    properties:
      p_type:
        type: string
      v0:
        type: string
      v1:
        type: string
      v2:
        type: string
      v3:
        type: string
      v4:
        type: string
      v5:
        type: string
    required:
    - p_type
    - v0
    - v1
    - v2
    type: object
  structs.CreateDomainBody:
    properties:
      copyright:
        type: string
      created_by:
        type: string
      description:
        type: string
      disabled:
        type: boolean
      extras:
        $ref: '#/definitions/types.JSON'
      keywords:
        items:
          type: string
        type: array
      logo:
        type: string
      logo_alt:
        type: string
      name:
        type: string
      order:
        type: integer
      title:
        type: string
      url:
        type: string
    type: object
  structs.LoginBody:
    properties:
      captcha:
        $ref: '#/definitions/structs.Captcha'
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  structs.OAuthRegisterBody:
    properties:
      display_name:
        type: string
      domain:
        type: string
      phone:
        type: string
      register_token:
        type: string
      short_bio:
        type: string
      username:
        type: string
    required:
    - display_name
    - username
    type: object
  structs.ReadAsset:
    properties:
      bucket:
        type: string
      created_at:
        type: string
      created_by:
        type: string
      domain_id:
        type: string
      endpoint:
        type: string
      extras:
        $ref: '#/definitions/types.JSON'
      id:
        type: string
      name:
        type: string
      object_id:
        type: string
      path:
        type: string
      size:
        type: integer
      storage:
        type: string
      type:
        type: string
      updated_at:
        type: string
      updated_by:
        type: string
    type: object
  structs.ReadDomain:
    properties:
      copyright:
        type: string
      created_at:
        type: string
      created_by:
        type: string
      description:
        type: string
      disabled:
        type: boolean
      extras:
        $ref: '#/definitions/types.JSON'
      id:
        type: string
      keywords:
        items:
          type: string
        type: array
      logo:
        type: string
      logo_alt:
        type: string
      name:
        type: string
      order:
        type: integer
      title:
        type: string
      updated_at:
        type: string
      url:
        type: string
      user:
        $ref: '#/definitions/structs.User'
    type: object
  structs.RegisterBody:
    properties:
      display_name:
        type: string
      domain:
        type: string
      phone:
        type: string
      register_token:
        type: string
      short_bio:
        type: string
      username:
        type: string
    required:
    - display_name
    - register_token
    - username
    type: object
  structs.SendCodeBody:
    properties:
      email:
        type: string
      phone:
        type: string
    type: object
  structs.UpdateAssetBody:
    properties:
      bucket:
        type: string
      created_at:
        type: string
      created_by:
        type: string
      domain_id:
        type: string
      endpoint:
        type: string
      extras:
        $ref: '#/definitions/types.JSON'
      id:
        type: string
      name:
        type: string
      object_id:
        type: string
      path:
        type: string
      size:
        type: integer
      storage:
        type: string
      type:
        type: string
      updated_at:
        type: string
      updated_by:
        type: string
    type: object
  structs.UpdateDomainBody:
    properties:
      copyright:
        type: string
      created_by:
        type: string
      description:
        type: string
      disabled:
        type: boolean
      extras:
        $ref: '#/definitions/types.JSON'
      id:
        type: string
      keywords:
        items:
          type: string
        type: array
      logo:
        type: string
      logo_alt:
        type: string
      name:
        type: string
      order:
        type: integer
      title:
        type: string
      url:
        type: string
    type: object
  structs.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: string
      is_admin:
        type: boolean
      is_certified:
        type: boolean
      phone:
        type: string
      profile:
        $ref: '#/definitions/structs.UserProfile'
      updated_at:
        type: string
      username:
        type: string
    type: object
  structs.UserProfile:
    properties:
      about:
        type: string
      display_name:
        type: string
      id:
        type: string
      links:
        items:
          $ref: '#/definitions/types.JSON'
        type: array
      short_bio:
        type: string
      thumbnail:
        type: string
    type: object
  structs.UserRequestBody:
    properties:
      about:
        type: string
      display_name:
        type: string
      email:
        type: string
      new_password:
        type: string
      old_password:
        type: string
      phone:
        type: string
      profile_links:
        items:
          type: string
        type: array
      register_token:
        type: string
      short_bio:
        type: string
      thumbnail:
        type: string
      user_id:
        type: string
      username:
        type: string
    type: object
  types.JSON:
    additionalProperties: {}
    type: object
info:
  contact: {}
  description: Next-Gen Modular Framework
  title: Ncobase
  version: 0.1.0
paths:
  /health:
    get:
      description: Check the health status of the service.
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/resp.Exception'
      summary: Health status
      tags:
      - root
  /v1/account:
    get:
      description: Retrieve information about the current user.
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.User'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/resp.Exception'
      security:
      - Bearer: []
      summary: Get current user
      tags:
      - account
  /v1/account/domain:
    get:
      description: Retrieve the domain associated with the current user.
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadDomain'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/resp.Exception'
      security:
      - Bearer: []
      summary: Get current user domain
      tags:
      - account
  /v1/account/password:
    put:
      consumes:
      - application/json
      description: Update the password of the current user.
      parameters:
      - description: UserRequestBody object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/structs.UserRequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/resp.Exception'
      security:
      - Bearer: []
      summary: Update user password
      tags:
      - account
  /v1/assets:
    get:
      description: List assets based on specified parameters.
      parameters:
      - in: query
        name: cursor
        type: string
      - in: query
        name: domain_id
        required: true
        type: string
      - description: validate:"gte=1,lte=100"
        in: query
        name: limit
        type: integer
      - in: query
        name: object_id
        required: true
        type: string
      - in: query
        name: storage
        type: string
      - in: query
        name: type
        type: string
      - in: query
        name: user_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/structs.ReadAsset'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/resp.Exception'
      summary: List assets
      tags:
      - assets
    post:
      consumes:
      - multipart/form-data
      description: Create one or multiple assets.
      parameters:
      - description: File to upload
        in: formData
        name: file
        required: true
        type: file
      - description: Object ID associated with the asset
        in: formData
        name: object_id
        type: string
      - description: Domain ID associated with the asset
        in: formData
        name: domain_id
        type: string
      - description: Additional properties associated with the asset (JSON format)
        in: formData
        name: extras
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadAsset'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/resp.Exception'
      security:
      - Bearer: []
      summary: Create assets
      tags:
      - assets
  /v1/assets/{slug}:
    delete:
      description: Delete a specific asset.
      parameters:
      - description: Slug of the asset to delete
        in: path
        name: slug
        required: true
        type: string
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadAsset'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/resp.Exception'
      security:
      - Bearer: []
      summary: Delete asset
      tags:
      - assets
    get:
      description: Get details of a specific asset.
      parameters:
      - description: Slug of the asset to retrieve
        in: path
        name: slug
        required: true
        type: string
      - description: Type of retrieval ('download' or 'stream')
        in: query
        name: type
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadAsset'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/resp.Exception'
      summary: Get asset
      tags:
      - assets
    put:
      consumes:
      - multipart/form-data
      description: Update an existing asset.
      parameters:
      - description: Slug of the asset to update
        in: path
        name: slug
        required: true
        type: string
      - description: Asset details
        in: body
        name: asset
        required: true
        schema:
          $ref: '#/definitions/structs.UpdateAssetBody'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadAsset'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/resp.Exception'
      security:
      - Bearer: []
      summary: Update asset
      tags:
      - assets
  /v1/authorize/{code}:
    get:
      consumes:
      - application/json
      description: Verify the provided code.
      parameters:
      - description: Verification code
        in: path
        name: code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
            - $ref: '#/definitions/types.JSON'
            - properties:
                access_token:
                  type: string
                email:
                  type: string
                id:
                  type: string
                register_token:
                  type: string
              type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/resp.Exception'
      summary: Verify code
      tags:
      - authorization
      - authentication
  /v1/authorize/send:
    post:
      consumes:
      - application/json
      description: Send a verification code to the specified destination.
      parameters:
      - description: SendCodeBody object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/structs.SendCodeBody'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
            - $ref: '#/definitions/types.JSON'
            - properties:
                registered:
                  type: boolean
              type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/resp.Exception'
      summary: Send verification code
      tags:
      - authorization
  /v1/captcha/{captcha_id}:
    get:
      description: Stream a captcha image.
      parameters:
      - description: Captcha ID With Extension (png, wav)
        in: path
        name: captcha_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: file
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/resp.Exception'
      summary: Stream captcha
      tags:
      - authentication
  /v1/captcha/generate:
    get:
      description: Generate a captcha image.
      parameters:
      - description: Captcha type
        enum:
        - png
        - wav
        in: query
        name: type
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
            - $ref: '#/definitions/types.JSON'
            - properties:
                id:
                  type: string
                url:
                  type: string
              type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/resp.Exception'
      summary: Generate captcha
      tags:
      - authentication
  /v1/captcha/validate:
    post:
      consumes:
      - application/json
      description: Validate a captcha code.
      parameters:
      - description: Captcha object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/structs.Captcha'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
            - $ref: '#/definitions/types.JSON'
            - properties:
                message:
                  type: string
              type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/resp.Exception'
      summary: Validate captcha
      tags:
      - authentication
  /v1/domains:
    get:
      description: Retrieve a list of domains.
      parameters:
      - in: query
        name: cursor
        type: string
      - in: query
        name: limit
        type: integer
      - in: query
        name: user
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/structs.ReadDomain'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/resp.Exception'
      security:
      - Bearer: []
      summary: List domains
      tags:
      - domain
    post:
      consumes:
      - application/json
      description: Create a new domain.
      parameters:
      - description: CreateDomainBody object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/structs.CreateDomainBody'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadDomain'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/resp.Exception'
      security:
      - Bearer: []
      summary: Create domain
      tags:
      - domain
    put:
      consumes:
      - application/json
      description: Update the domain information.
      parameters:
      - description: Domain ID
        in: path
        name: slug
        required: true
        type: string
      - description: UpdateDomainBody object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/structs.UpdateDomainBody'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadDomain'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/resp.Exception'
      security:
      - Bearer: []
      summary: Update domain
      tags:
      - domain
  /v1/domains/{slug}:
    delete:
      description: Delete a specific domain.
      parameters:
      - description: Domain ID
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/resp.Exception'
      security:
      - Bearer: []
      summary: Delete domain
      tags:
      - domain
    get:
      description: Retrieve information about a specific domain.
      parameters:
      - description: Domain ID
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadDomain'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/resp.Exception'
      security:
      - Bearer: []
      summary: Get domain
      tags:
      - domain
  /v1/domains/{slug}/assets:
    get:
      description: Retrieve a list of assets associated with a specific domain.
      parameters:
      - description: Domain ID
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/resp.Exception'
      security:
      - Bearer: []
      summary: List domain assets
      tags:
      - domain
  /v1/domains/{slug}/groups:
    get:
      description: Retrieve a list of groups associated with a specific domain.
      parameters:
      - description: Domain ID
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/resp.Exception'
      security:
      - Bearer: []
      summary: List domain groups
      tags:
      - domain
  /v1/domains/{slug}/menu:
    get:
      description: Retrieve the menu associated with a specific domain.
      parameters:
      - description: Domain ID
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/resp.Exception'
      security:
      - Bearer: []
      summary: Get domain menu
      tags:
      - domain
  /v1/domains/{slug}/setting:
    get:
      description: Retrieve the settings associated with a specific domain.
      parameters:
      - description: Domain ID
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/resp.Exception'
      security:
      - Bearer: []
      summary: Get domain setting
      tags:
      - domain
  /v1/domains/{slug}/users:
    get:
      description: Retrieve a list of users associated with a specific domain.
      parameters:
      - description: Domain ID
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/resp.Exception'
      security:
      - Bearer: []
      summary: List domain users
      tags:
      - domain
  /v1/login:
    post:
      consumes:
      - application/json
      description: Log in a user.
      parameters:
      - description: LoginBody object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/structs.LoginBody'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
            - $ref: '#/definitions/types.JSON'
            - properties:
                access_token:
                  type: string
                id:
                  type: string
              type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/resp.Exception'
      summary: Login
      tags:
      - authentication
  /v1/logout:
    post:
      description: Logout the current user.
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/resp.Exception'
      security:
      - Bearer: []
      summary: Logout
      tags:
      - authentication
  /v1/oauth/{provider}/redirect:
    get:
      description: Redirect to OAuth provider for authentication.
      parameters:
      - description: OAuth provider
        in: path
        name: provider
        required: true
        type: string
      - description: Next URL after authentication
        in: query
        name: next
        type: string
      responses:
        "302":
          description: redirect
          schema:
            $ref: '#/definitions/resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/resp.Exception'
      summary: OAuth redirect
      tags:
      - oauth
  /v1/oauth/callback:
    get:
      description: Handle callback from OAuth provider.
      responses:
        "302":
          description: redirect
          schema:
            $ref: '#/definitions/resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/resp.Exception'
      summary: OAuth callback
      tags:
      - oauth
  /v1/oauth/facebook/callback:
    get:
      description: Handle callback from Facebook OAuth provider.
      parameters:
      - description: Authorization code
        in: query
        name: code
        required: true
        type: string
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/resp.Exception'
        "401":
          description: unauthorized
          schema:
            $ref: '#/definitions/resp.Exception'
      summary: Facebook OAuth callback
      tags:
      - oauth
  /v1/oauth/github/callback:
    get:
      description: Handle callback from GitHub OAuth provider.
      parameters:
      - description: Authorization code
        in: query
        name: code
        required: true
        type: string
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/resp.Exception'
        "401":
          description: unauthorized
          schema:
            $ref: '#/definitions/resp.Exception'
      summary: GitHub OAuth callback
      tags:
      - oauth
  /v1/oauth/profile:
    get:
      description: Retrieve profile information from OAuth provider.
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/resp.Exception'
      summary: Get OAuth profile
      tags:
      - oauth
  /v1/oauth/register:
    post:
      consumes:
      - application/json
      description: Register a user using OAuth.
      parameters:
      - description: OAuthRegisterBody object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/structs.OAuthRegisterBody'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/resp.Exception'
      summary: OAuth register
      tags:
      - oauth
  /v1/pols:
    get:
      description: Retrieve a list of Casbin rules.
      parameters:
      - in: query
        name: limit
        type: integer
      - in: query
        name: offset
        type: integer
      - in: query
        name: p_type
        type: string
      - in: query
        name: v0
        type: string
      - in: query
        name: v1
        type: string
      - in: query
        name: v2
        type: string
      - in: query
        name: v3
        type: string
      - in: query
        name: v4
        type: string
      - in: query
        name: v5
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/structs.CasbinRuleBody'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/resp.Exception'
      security:
      - Bearer: []
      summary: List Casbin rules
      tags:
      - casbin
    post:
      consumes:
      - application/json
      description: Create a new Casbin rule.
      parameters:
      - description: CasbinRuleBody object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/structs.CasbinRuleBody'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.CasbinRuleBody'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/resp.Exception'
      security:
      - Bearer: []
      summary: Create Casbin rule
      tags:
      - casbin
  /v1/pols/{id}:
    delete:
      description: Delete an existing Casbin rule.
      parameters:
      - description: Casbin rule ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/resp.Exception'
      security:
      - Bearer: []
      summary: Delete Casbin rule
      tags:
      - casbin
    get:
      description: Retrieve details of a Casbin rule.
      parameters:
      - description: Casbin rule ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.CasbinRuleBody'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/resp.Exception'
      security:
      - Bearer: []
      summary: Get Casbin rule
      tags:
      - casbin
    put:
      consumes:
      - application/json
      description: Update an existing Casbin rule, either fully or partially.
      parameters:
      - description: Casbin rule ID
        in: path
        name: id
        required: true
        type: string
      - description: CasbinRuleBody object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/structs.CasbinRuleBody'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.CasbinRuleBody'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/resp.Exception'
      security:
      - Bearer: []
      summary: Update Casbin rule
      tags:
      - casbin
  /v1/register:
    post:
      consumes:
      - application/json
      description: Register a new user.
      parameters:
      - description: RegisterBody object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/structs.RegisterBody'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
            - $ref: '#/definitions/types.JSON'
            - properties:
                access_token:
                  type: string
                id:
                  type: string
              type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/resp.Exception'
      summary: Register
      tags:
      - authentication
  /v1/users/{username}:
    get:
      description: Retrieve information about a specific user.
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.User'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/resp.Exception'
      summary: Get user
      tags:
      - user
  /v1/users/{username}/domain:
    get:
      description: Retrieve the domain associated with the specified user.
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadDomain'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/resp.Exception'
      security:
      - Bearer: []
      summary: Get user owned domain
      tags:
      - user
securityDefinitions:
  Bearer:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
