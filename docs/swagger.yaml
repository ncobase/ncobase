definitions:
  ncobase_common_resp.Exception:
    properties:
      code:
        description: Business code
        type: integer
      data:
        description: Response data
      errors:
        description: Validation errors
      message:
        description: Message
        type: string
      status:
        description: HTTP status
        type: integer
    type: object
  ncobase_common_types.JSON:
    additionalProperties: {}
    type: object
  structs.AccountMeshes:
    properties:
      groups:
        items:
          $ref: '#/definitions/structs.ReadGroup'
        type: array
      profile:
        $ref: '#/definitions/structs.ReadUserProfile'
      roles:
        items:
          $ref: '#/definitions/structs.ReadRole'
        type: array
      tenants:
        items:
          $ref: '#/definitions/structs.ReadTenant'
        type: array
      user:
        $ref: '#/definitions/structs.ReadUser'
    type: object
  structs.Captcha:
    properties:
      id:
        type: string
      solution:
        type: string
    required:
    - id
    - solution
    type: object
  structs.CasbinRuleBody:
    properties:
      created_by:
        type: string
      p_type:
        type: string
      updated_by:
        type: string
      v0:
        type: string
      v1:
        type: string
      v2:
        type: string
      v3:
        type: string
      v4:
        type: string
      v5:
        type: string
    required:
    - p_type
    - v0
    - v1
    - v2
    type: object
  structs.CreatePermissionBody:
    properties:
      action:
        type: string
      created_by:
        type: string
      default:
        type: boolean
      description:
        type: string
      disabled:
        type: boolean
      extras:
        $ref: '#/definitions/ncobase_common_types.JSON'
      name:
        type: string
      subject:
        type: string
      updated_by:
        type: string
    type: object
  structs.CreateRoleBody:
    properties:
      created_by:
        type: string
      description:
        type: string
      disabled:
        type: boolean
      extras:
        $ref: '#/definitions/ncobase_common_types.JSON'
      name:
        type: string
      slug:
        type: string
      updated_by:
        type: string
    type: object
  structs.CreateTaxonomyBody:
    properties:
      color:
        type: string
      cover:
        type: string
      created_by:
        type: string
      description:
        type: string
      extras:
        $ref: '#/definitions/ncobase_common_types.JSON'
      icon:
        type: string
      keywords:
        type: string
      name:
        type: string
      parent_id:
        type: string
      slug:
        type: string
      status:
        type: integer
      tenant_id:
        type: string
      thumbnail:
        type: string
      type:
        type: string
      updated_by:
        type: string
      url:
        type: string
    type: object
  structs.CreateTenantBody:
    properties:
      copyright:
        type: string
      created_by:
        type: string
      description:
        type: string
      disabled:
        type: boolean
      expired_at:
        type: integer
      extras:
        $ref: '#/definitions/ncobase_common_types.JSON'
      keywords:
        type: string
      logo:
        type: string
      logo_alt:
        type: string
      name:
        type: string
      order:
        type: integer
      slug:
        type: string
      title:
        type: string
      type:
        type: string
      updated_by:
        type: string
      url:
        type: string
    type: object
  structs.CreateTopicBody:
    properties:
      content:
        type: string
      created_by:
        type: string
      markdown:
        type: boolean
      name:
        type: string
      private:
        type: boolean
      released:
        type: integer
      slug:
        type: string
      status:
        type: integer
      taxonomy_id:
        type: string
      temp:
        type: boolean
      tenant_id:
        type: string
      thumbnail:
        type: string
      title:
        type: string
      updated_by:
        type: string
    type: object
  structs.GroupBody:
    properties:
      created_by:
        type: string
      description:
        type: string
      disabled:
        type: boolean
      extras:
        $ref: '#/definitions/ncobase_common_types.JSON'
      leader:
        $ref: '#/definitions/ncobase_common_types.JSON'
      name:
        type: string
      parent_id:
        type: string
      slug:
        type: string
      tenant_id:
        type: string
      updated_by:
        type: string
    type: object
  structs.LoginBody:
    properties:
      captcha:
        $ref: '#/definitions/structs.Captcha'
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  structs.MenuBody:
    properties:
      created_by:
        type: string
      disabled:
        type: boolean
      extras:
        $ref: '#/definitions/ncobase_common_types.JSON'
      hidden:
        type: boolean
      icon:
        type: string
      label:
        type: string
      name:
        type: string
      order:
        type: integer
      parent_id:
        type: string
      path:
        type: string
      perms:
        type: string
      slug:
        type: string
      target:
        type: string
      tenant_id:
        type: string
      type:
        type: string
      updated_by:
        type: string
    type: object
  structs.ReadAsset:
    properties:
      bucket:
        type: string
      created_at:
        type: integer
      created_by:
        type: string
      endpoint:
        type: string
      extras:
        $ref: '#/definitions/ncobase_common_types.JSON'
      id:
        type: string
      name:
        type: string
      object_id:
        type: string
      path:
        type: string
      size:
        type: integer
      storage:
        type: string
      tenant_id:
        type: string
      type:
        type: string
      updated_at:
        type: integer
      updated_by:
        type: string
    type: object
  structs.ReadCasbinRule:
    properties:
      created_at:
        type: integer
      created_by:
        type: string
      id:
        type: string
      p_type:
        type: string
      updated_at:
        type: integer
      updated_by:
        type: string
      v0:
        type: string
      v1:
        type: string
      v2:
        type: string
      v3:
        type: string
      v4:
        type: string
      v5:
        type: string
    type: object
  structs.ReadGroup:
    properties:
      children:
        items: {}
        type: array
      created_at:
        type: integer
      created_by:
        type: string
      description:
        type: string
      disabled:
        type: boolean
      extras:
        $ref: '#/definitions/ncobase_common_types.JSON'
      id:
        type: string
      leader:
        $ref: '#/definitions/ncobase_common_types.JSON'
      name:
        type: string
      parent_id:
        type: string
      slug:
        type: string
      tenant_id:
        type: string
      updated_at:
        type: integer
      updated_by:
        type: string
    type: object
  structs.ReadMenu:
    properties:
      children:
        items: {}
        type: array
      created_at:
        type: integer
      created_by:
        type: string
      disabled:
        type: boolean
      extras:
        $ref: '#/definitions/ncobase_common_types.JSON'
      hidden:
        type: boolean
      icon:
        type: string
      id:
        type: string
      label:
        type: string
      name:
        type: string
      order:
        type: integer
      parent_id:
        type: string
      path:
        type: string
      perms:
        type: string
      slug:
        type: string
      target:
        type: string
      tenant_id:
        type: string
      type:
        type: string
      updated_at:
        type: integer
      updated_by:
        type: string
    type: object
  structs.ReadPermission:
    properties:
      action:
        type: string
      created_at:
        type: integer
      created_by:
        type: string
      default:
        type: boolean
      description:
        type: string
      disabled:
        type: boolean
      extras:
        $ref: '#/definitions/ncobase_common_types.JSON'
      id:
        type: string
      name:
        type: string
      subject:
        type: string
      updated_at:
        type: integer
      updated_by:
        type: string
    type: object
  structs.ReadRole:
    properties:
      created_at:
        type: integer
      created_by:
        type: string
      description:
        type: string
      disabled:
        type: boolean
      extras:
        $ref: '#/definitions/ncobase_common_types.JSON'
      id:
        type: string
      name:
        type: string
      slug:
        type: string
      updated_at:
        type: integer
      updated_by:
        type: string
    type: object
  structs.ReadTaxonomy:
    properties:
      children:
        items: {}
        type: array
      color:
        type: string
      cover:
        type: string
      created_at:
        type: integer
      created_by:
        type: string
      description:
        type: string
      extras:
        $ref: '#/definitions/ncobase_common_types.JSON'
      icon:
        type: string
      id:
        type: string
      keywords:
        type: string
      name:
        type: string
      parent_id:
        type: string
      slug:
        type: string
      status:
        type: integer
      tenant_id:
        type: string
      thumbnail:
        type: string
      type:
        type: string
      updated_at:
        type: integer
      updated_by:
        type: string
      url:
        type: string
    type: object
  structs.ReadTenant:
    properties:
      copyright:
        type: string
      created_at:
        type: integer
      created_by:
        type: string
      description:
        type: string
      disabled:
        type: boolean
      expired_at:
        type: integer
      extras:
        $ref: '#/definitions/ncobase_common_types.JSON'
      id:
        type: string
      keywords:
        type: string
      logo:
        type: string
      logo_alt:
        type: string
      name:
        type: string
      order:
        type: integer
      slug:
        type: string
      title:
        type: string
      type:
        type: string
      updated_at:
        type: integer
      updated_by:
        type: string
      url:
        type: string
    type: object
  structs.ReadTopic:
    properties:
      content:
        type: string
      created_at:
        type: integer
      created_by:
        type: string
      id:
        type: string
      markdown:
        type: boolean
      name:
        type: string
      private:
        type: boolean
      released:
        type: integer
      slug:
        type: string
      status:
        type: integer
      taxonomy_id:
        type: string
      temp:
        type: boolean
      tenant_id:
        type: string
      thumbnail:
        type: string
      title:
        type: string
      updated_at:
        type: integer
      updated_by:
        type: string
    type: object
  structs.ReadUser:
    properties:
      created_at:
        type: integer
      email:
        type: string
      extras:
        $ref: '#/definitions/ncobase_common_types.JSON'
      id:
        type: string
      is_admin:
        type: boolean
      is_certified:
        type: boolean
      phone:
        type: string
      status:
        type: integer
      updated_at:
        type: integer
      username:
        type: string
    type: object
  structs.ReadUserProfile:
    properties:
      about:
        type: string
      display_name:
        type: string
      extras:
        $ref: '#/definitions/ncobase_common_types.JSON'
      links:
        items:
          $ref: '#/definitions/ncobase_common_types.JSON'
        type: array
      short_bio:
        type: string
      thumbnail:
        type: string
    type: object
  structs.RegisterBody:
    properties:
      display_name:
        type: string
      phone:
        type: string
      register_token:
        type: string
      short_bio:
        type: string
      tenant:
        type: string
      username:
        type: string
    required:
    - display_name
    - register_token
    - username
    type: object
  structs.SendCodeBody:
    properties:
      email:
        type: string
      phone:
        type: string
    type: object
  structs.UpdateAssetBody:
    properties:
      bucket:
        type: string
      created_by:
        type: string
      endpoint:
        type: string
      extras:
        $ref: '#/definitions/ncobase_common_types.JSON'
      id:
        type: string
      name:
        type: string
      object_id:
        type: string
      path:
        type: string
      size:
        type: integer
      storage:
        type: string
      tenant_id:
        type: string
      type:
        type: string
      updated_by:
        type: string
    type: object
  structs.UpdateGroupBody:
    properties:
      created_by:
        type: string
      description:
        type: string
      disabled:
        type: boolean
      extras:
        $ref: '#/definitions/ncobase_common_types.JSON'
      id:
        type: string
      leader:
        $ref: '#/definitions/ncobase_common_types.JSON'
      name:
        type: string
      parent_id:
        type: string
      slug:
        type: string
      tenant_id:
        type: string
      updated_by:
        type: string
    type: object
  structs.UpdateMenuBody:
    properties:
      created_by:
        type: string
      disabled:
        type: boolean
      extras:
        $ref: '#/definitions/ncobase_common_types.JSON'
      hidden:
        type: boolean
      icon:
        type: string
      id:
        type: string
      label:
        type: string
      name:
        type: string
      order:
        type: integer
      parent_id:
        type: string
      path:
        type: string
      perms:
        type: string
      slug:
        type: string
      target:
        type: string
      tenant_id:
        type: string
      type:
        type: string
      updated_by:
        type: string
    type: object
  structs.UpdateTaxonomyBody:
    properties:
      color:
        type: string
      cover:
        type: string
      created_by:
        type: string
      description:
        type: string
      extras:
        $ref: '#/definitions/ncobase_common_types.JSON'
      icon:
        type: string
      id:
        type: string
      keywords:
        type: string
      name:
        type: string
      parent_id:
        type: string
      slug:
        type: string
      status:
        type: integer
      tenant_id:
        type: string
      thumbnail:
        type: string
      type:
        type: string
      updated_by:
        type: string
      url:
        type: string
    type: object
  structs.UpdateTenantBody:
    properties:
      copyright:
        type: string
      created_by:
        type: string
      description:
        type: string
      disabled:
        type: boolean
      expired_at:
        type: integer
      extras:
        $ref: '#/definitions/ncobase_common_types.JSON'
      id:
        type: string
      keywords:
        type: string
      logo:
        type: string
      logo_alt:
        type: string
      name:
        type: string
      order:
        type: integer
      slug:
        type: string
      title:
        type: string
      type:
        type: string
      updated_by:
        type: string
      url:
        type: string
    type: object
  structs.UpdateTopicBody:
    properties:
      content:
        type: string
      created_by:
        type: string
      id:
        type: string
      markdown:
        type: boolean
      name:
        type: string
      private:
        type: boolean
      released:
        type: integer
      slug:
        type: string
      status:
        type: integer
      taxonomy_id:
        type: string
      temp:
        type: boolean
      tenant_id:
        type: string
      thumbnail:
        type: string
      title:
        type: string
      updated_by:
        type: string
    type: object
  structs.UserPassword:
    properties:
      confirm:
        type: string
      new_password:
        type: string
      old_password:
        type: string
      user:
        type: string
    required:
    - confirm
    - new_password
    - user
    type: object
info:
  contact: {}
  description: Next-Gen Plug-in Framework
  title: Ncobase
  version: 0.1.0
paths:
  /v1/account:
    get:
      description: Retrieve information about the current user.
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.AccountMeshes'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Get current user
      tags:
      - account
  /v1/account/password:
    put:
      consumes:
      - application/json
      description: Update the password of the current user.
      parameters:
      - description: UserPassword object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/structs.UserPassword'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Update user password
      tags:
      - account
  /v1/account/tenant:
    get:
      description: Retrieve the tenant associated with the current user.
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadTenant'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Get current user tenant
      tags:
      - account
  /v1/account/tenants:
    get:
      description: Retrieve the tenant associated with the current user.
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadTenant'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Get current user tenants
      tags:
      - account
  /v1/assets:
    get:
      description: List assets based on specified parameters.
      parameters:
      - in: query
        name: cursor
        type: string
      - in: query
        name: direction
        type: string
      - in: query
        name: limit
        type: integer
      - in: query
        name: object
        required: true
        type: string
      - in: query
        name: storage
        type: string
      - in: query
        name: tenant
        required: true
        type: string
      - in: query
        name: type
        type: string
      - in: query
        name: user
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/structs.ReadAsset'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      summary: List assets
      tags:
      - assets
    post:
      consumes:
      - multipart/form-data
      description: Create one or multiple assets.
      parameters:
      - description: File to upload
        in: formData
        name: file
        required: true
        type: file
      - description: Object ID associated with the asset
        in: formData
        name: object_id
        type: string
      - description: Tenant ID associated with the asset
        in: formData
        name: tenant_id
        type: string
      - description: Additional properties associated with the asset (JSON format)
        in: formData
        name: extras
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadAsset'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Create assets
      tags:
      - assets
  /v1/assets/{slug}:
    delete:
      description: Delete a specific asset.
      parameters:
      - description: Slug of the asset to delete
        in: path
        name: slug
        required: true
        type: string
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadAsset'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Delete asset
      tags:
      - assets
    get:
      description: Get details of a specific asset.
      parameters:
      - description: Slug of the asset to retrieve
        in: path
        name: slug
        required: true
        type: string
      - description: Type of retrieval ('download' or 'stream')
        in: query
        name: type
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadAsset'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      summary: Get asset
      tags:
      - assets
    put:
      consumes:
      - multipart/form-data
      description: Update an existing asset.
      parameters:
      - description: Slug of the asset to update
        in: path
        name: slug
        required: true
        type: string
      - description: Asset details
        in: body
        name: asset
        required: true
        schema:
          $ref: '#/definitions/structs.UpdateAssetBody'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadAsset'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Update asset
      tags:
      - assets
  /v1/authorize/{code}:
    get:
      consumes:
      - application/json
      description: Verify the provided code.
      parameters:
      - description: Verification code
        in: path
        name: code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            additionalProperties:
              properties:
                access_token:
                  type: string
                email:
                  type: string
                id:
                  type: string
                register_token:
                  type: string
              type: object
            type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      summary: Verify code
      tags:
      - authorization
      - authentication
  /v1/authorize/send:
    post:
      consumes:
      - application/json
      description: Send a verification code to the specified destination.
      parameters:
      - description: SendCodeBody object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/structs.SendCodeBody'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            additionalProperties:
              properties:
                registered:
                  type: boolean
              type: object
            type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      summary: Send verification code
      tags:
      - authorization
  /v1/captcha/{captcha_id}:
    get:
      description: Stream a captcha image.
      parameters:
      - description: Captcha ID With Extension (png, wav)
        in: path
        name: captcha_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: file
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      summary: Stream captcha
      tags:
      - authentication
  /v1/captcha/generate:
    get:
      description: Generate a captcha image.
      parameters:
      - description: Captcha type
        enum:
        - png
        - wav
        in: query
        name: type
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            additionalProperties:
              properties:
                id:
                  type: string
                url:
                  type: string
              type: object
            type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      summary: Generate captcha
      tags:
      - authentication
  /v1/captcha/validate:
    post:
      consumes:
      - application/json
      description: Validate a captcha code.
      parameters:
      - description: Captcha object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/structs.Captcha'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            additionalProperties:
              properties:
                message:
                  type: string
              type: object
            type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      summary: Validate captcha
      tags:
      - authentication
  /v1/groups:
    get:
      description: Retrieve a list or tree structure of groups.
      parameters:
      - in: query
        name: children
        type: boolean
      - in: query
        name: cursor
        type: string
      - in: query
        name: direction
        type: string
      - in: query
        name: limit
        type: integer
      - in: query
        name: parent
        type: string
      - in: query
        name: tenant
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/structs.ReadGroup'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: List groups
      tags:
      - group
    post:
      consumes:
      - application/json
      description: Create a new group.
      parameters:
      - description: GroupBody object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/structs.GroupBody'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadGroup'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Create group
      tags:
      - group
    put:
      consumes:
      - application/json
      description: Update an existing group.
      parameters:
      - description: UpdateGroupBody object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/structs.UpdateGroupBody'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadGroup'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Update group
      tags:
      - group
  /v1/groups/{slug}:
    delete:
      description: Delete a group by ID or slug.
      parameters:
      - description: Group ID or slug
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Delete group
      tags:
      - group
    get:
      description: Retrieve a group by ID or slug.
      parameters:
      - description: Group ID or slug
        in: path
        name: slug
        required: true
        type: string
      - in: query
        name: children
        type: boolean
      - in: query
        name: group
        type: string
      - in: query
        name: parent
        type: string
      - in: query
        name: tenant
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadGroup'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Get group
      tags:
      - group
  /v1/login:
    post:
      consumes:
      - application/json
      description: Log in a user.
      parameters:
      - description: LoginBody object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/structs.LoginBody'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            additionalProperties:
              properties:
                access_token:
                  type: string
                id:
                  type: string
              type: object
            type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      summary: Login
      tags:
      - authentication
  /v1/logout:
    post:
      description: Logout the current user.
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Logout
      tags:
      - authentication
  /v1/menus:
    get:
      description: Retrieve a list or tree structure of menus.
      parameters:
      - in: query
        name: children
        type: boolean
      - in: query
        name: cursor
        type: string
      - in: query
        name: direction
        type: string
      - in: query
        name: limit
        type: integer
      - in: query
        name: parent
        type: string
      - in: query
        name: perms
        type: string
      - in: query
        name: tenant
        type: string
      - in: query
        name: type
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/structs.ReadMenu'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: List menus
      tags:
      - menu
    post:
      consumes:
      - application/json
      description: Create a new menu.
      parameters:
      - description: MenuBody object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/structs.MenuBody'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadMenu'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Create menu
      tags:
      - menu
    put:
      consumes:
      - application/json
      description: Update an existing menu.
      parameters:
      - description: UpdateMenuBody object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/structs.UpdateMenuBody'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadMenu'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Update menu
      tags:
      - menu
  /v1/menus/{slug}:
    delete:
      description: Delete a menu by ID or slug.
      parameters:
      - description: Menu ID or slug
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Delete menu
      tags:
      - menu
    get:
      description: Retrieve a menu by ID or slug.
      parameters:
      - description: Menu ID or slug
        in: path
        name: slug
        required: true
        type: string
      - in: query
        name: children
        type: boolean
      - in: query
        name: menu
        type: string
      - in: query
        name: parent
        type: string
      - in: query
        name: tenant
        type: string
      - in: query
        name: type
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadMenu'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Get menu
      tags:
      - menu
  /v1/permissions:
    get:
      description: Retrieve a list of permissions based on the provided query parameters
      parameters:
      - in: query
        name: cursor
        type: string
      - in: query
        name: direction
        type: string
      - in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/structs.ReadPermission'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: List all permissions
      tags:
      - permissions
    post:
      consumes:
      - application/json
      description: Create a new permission with the provided data
      parameters:
      - description: Permission data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/structs.CreatePermissionBody'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadPermission'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Create a new permission
      tags:
      - permissions
  /v1/permissions/{slug}:
    delete:
      description: Delete a permission by its slug or ID
      parameters:
      - description: Permission slug or ID
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadPermission'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Delete a permission by slug or ID
      tags:
      - permissions
    get:
      description: Retrieve a permission by its slug or ID
      parameters:
      - description: Permission slug or ID
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadPermission'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Get a permission by slug or ID
      tags:
      - permissions
    put:
      consumes:
      - application/json
      description: Update an existing permission with the provided data
      parameters:
      - description: Permission slug or ID
        in: path
        name: slug
        required: true
        type: string
      - description: Permission data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ncobase_common_types.JSON'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadPermission'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Update an existing permission
      tags:
      - permissions
  /v1/policies:
    get:
      description: Retrieve a list of Casbin rules.
      parameters:
      - in: query
        name: cursor
        type: string
      - in: query
        name: direction
        type: string
      - in: query
        name: limit
        type: integer
      - in: query
        name: p_type
        type: string
      - in: query
        name: v0
        type: string
      - in: query
        name: v1
        type: string
      - in: query
        name: v2
        type: string
      - in: query
        name: v3
        type: string
      - in: query
        name: v4
        type: string
      - in: query
        name: v5
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/structs.CasbinRuleBody'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: List Casbin rules
      tags:
      - casbin
    post:
      consumes:
      - application/json
      description: Create a new Casbin rule.
      parameters:
      - description: CasbinRuleBody object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/structs.CasbinRuleBody'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadCasbinRule'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Create Casbin rule
      tags:
      - casbin
  /v1/policies/{id}:
    delete:
      description: Delete an existing Casbin rule.
      parameters:
      - description: Casbin rule ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Delete Casbin rule
      tags:
      - casbin
    get:
      description: Retrieve details of a Casbin rule.
      parameters:
      - description: Casbin rule ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadCasbinRule'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Get Casbin rule
      tags:
      - casbin
    put:
      consumes:
      - application/json
      description: Update an existing Casbin rule, either fully or partially.
      parameters:
      - description: Casbin rule ID
        in: path
        name: id
        required: true
        type: string
      - description: CasbinRuleBody object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/structs.CasbinRuleBody'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadCasbinRule'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Update Casbin rule
      tags:
      - casbin
  /v1/register:
    post:
      consumes:
      - application/json
      description: Register a new user.
      parameters:
      - description: RegisterBody object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/structs.RegisterBody'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            additionalProperties:
              properties:
                access_token:
                  type: string
                id:
                  type: string
              type: object
            type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      summary: Register
      tags:
      - authentication
  /v1/roles:
    get:
      description: Retrieve a list of roles based on the provided query parameters
      parameters:
      - in: query
        name: cursor
        type: string
      - in: query
        name: direction
        type: string
      - in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/structs.ReadRole'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: List all roles
      tags:
      - roles
    post:
      consumes:
      - application/json
      description: Create a new role with the provided data
      parameters:
      - description: Role data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/structs.CreateRoleBody'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadRole'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Create a new role
      tags:
      - roles
  /v1/roles/{slug}:
    delete:
      description: Delete a role by its slug or ID
      parameters:
      - description: Role slug or ID
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadRole'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Delete a role by slug or ID
      tags:
      - roles
    get:
      description: Retrieve a role by its slug or ID
      parameters:
      - description: Role slug or ID
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadRole'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Get a role by slug or ID
      tags:
      - roles
    put:
      consumes:
      - application/json
      description: Update an existing role with the provided data
      parameters:
      - description: Role slug or ID
        in: path
        name: slug
        required: true
        type: string
      - description: Role data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ncobase_common_types.JSON'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadRole'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Update an existing role
      tags:
      - roles
  /v1/roles/{slug}/permissions:
    get:
      description: Retrieve a list of permissions associated with a role by its ID
      parameters:
      - description: Role ID
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/structs.ReadPermission'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: List permissions for a role
      tags:
      - roles
  /v1/taxonomies:
    get:
      description: Retrieve a list of taxonomies.
      parameters:
      - in: query
        name: children
        type: boolean
      - in: query
        name: cursor
        type: string
      - in: query
        name: direction
        type: string
      - in: query
        name: limit
        type: integer
      - in: query
        name: parent
        type: string
      - in: query
        name: tenant
        type: string
      - in: query
        name: type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/structs.ReadTaxonomy'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      summary: List taxonomies
      tags:
      - taxonomy
    post:
      consumes:
      - application/json
      description: Create a new taxonomy.
      parameters:
      - description: CreateTaxonomyBody object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/structs.CreateTaxonomyBody'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadTaxonomy'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Create taxonomy
      tags:
      - taxonomy
  /v1/taxonomies/{slug}:
    delete:
      description: Delete an existing taxonomy.
      parameters:
      - description: Taxonomy slug
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Delete taxonomy
      tags:
      - taxonomy
    get:
      description: Retrieve details of a taxonomy.
      parameters:
      - description: Taxonomy slug
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadTaxonomy'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      summary: Get taxonomy
      tags:
      - taxonomy
    put:
      consumes:
      - application/json
      description: Update an existing taxonomy.
      parameters:
      - description: Taxonomy slug
        in: path
        name: slug
        required: true
        type: string
      - description: UpdateTaxonomyBody object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/structs.UpdateTaxonomyBody'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadTaxonomy'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Update taxonomy
      tags:
      - taxonomy
  /v1/tenants:
    get:
      description: Retrieve a list of tenants.
      parameters:
      - in: query
        name: cursor
        type: string
      - in: query
        name: direction
        type: string
      - in: query
        name: limit
        type: integer
      - in: query
        name: user
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/structs.ReadTenant'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: List tenants
      tags:
      - tenant
    post:
      consumes:
      - application/json
      description: Create a new tenant.
      parameters:
      - description: CreateTenantBody object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/structs.CreateTenantBody'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadTenant'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Create tenant
      tags:
      - tenant
    put:
      consumes:
      - application/json
      description: Update the tenant information.
      parameters:
      - description: Tenant ID
        in: path
        name: slug
        required: true
        type: string
      - description: UpdateTenantBody object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/structs.UpdateTenantBody'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadTenant'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Update tenant
      tags:
      - tenant
  /v1/tenants/{slug}:
    delete:
      description: Delete a specific tenant.
      parameters:
      - description: Tenant ID
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Delete tenant
      tags:
      - tenant
    get:
      description: Retrieve information about a specific tenant.
      parameters:
      - description: Tenant ID
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadTenant'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Get tenant
      tags:
      - tenant
  /v1/tenants/{slug}/assets:
    get:
      description: Retrieve a list of assets associated with a specific tenant.
      parameters:
      - description: Tenant ID
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: List tenant assets
      tags:
      - tenant
  /v1/tenants/{slug}/groups:
    get:
      description: Retrieve a list of groups associated with a specific tenant.
      parameters:
      - description: Tenant ID
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: List tenant groups
      tags:
      - tenant
  /v1/tenants/{slug}/menu:
    get:
      description: Retrieve the menu associated with a specific tenant.
      parameters:
      - description: Tenant ID
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Get tenant menu
      tags:
      - tenant
  /v1/tenants/{slug}/roles:
    get:
      description: Retrieve a list of roles associated with a specific tenant.
      parameters:
      - description: Tenant ID
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: List tenant roles
      tags:
      - tenant
  /v1/tenants/{slug}/setting:
    get:
      description: Retrieve the settings associated with a specific tenant.
      parameters:
      - description: Tenant ID
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Get tenant setting
      tags:
      - tenant
  /v1/tenants/{slug}/settings:
    get:
      description: Retrieve a list of settings associated with a specific tenant.
      parameters:
      - description: Tenant ID
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: List tenant settings
      tags:
      - tenant
  /v1/tenants/{slug}/users:
    get:
      description: Retrieve a list of users associated with a specific tenant.
      parameters:
      - description: Tenant ID
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: List tenant users
      tags:
      - tenant
  /v1/topics:
    get:
      description: Retrieve a list of topics.
      parameters:
      - in: query
        name: cursor
        type: string
      - in: query
        name: direction
        type: string
      - in: query
        name: limit
        type: integer
      - in: query
        name: taxonomy
        type: string
      - in: query
        name: tenant
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/structs.ReadTopic'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      summary: List topics
      tags:
      - topic
    post:
      consumes:
      - application/json
      description: Create a new topic.
      parameters:
      - description: CreateTopicBody object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/structs.CreateTopicBody'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadTopic'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Create topic
      tags:
      - topic
  /v1/topics/{slug}:
    delete:
      description: Delete an existing topic.
      parameters:
      - description: Topic slug
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Delete topic
      tags:
      - topic
    get:
      description: Retrieve details of a topic.
      parameters:
      - description: Topic slug
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadTopic'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      summary: Get topic
      tags:
      - topic
    put:
      consumes:
      - application/json
      description: Update an existing topic, either fully or partially.
      parameters:
      - description: Topic slug
        in: path
        name: slug
        required: true
        type: string
      - description: UpdateTopicBody object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/structs.UpdateTopicBody'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadTopic'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Update topic
      tags:
      - topic
  /v1/users/{username}:
    get:
      description: Retrieve information about a specific user.
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadUser'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      summary: Get user
      tags:
      - user
  /v1/users/{username}/tenant:
    get:
      description: Retrieve the tenant associated with the specified user.
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadTenant'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Get user owned tenant
      tags:
      - user
securityDefinitions:
  Bearer:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
