{
  "swagger": "2.0",
  "info": {
    "description": "Base Development Framework",
    "title": "Ncobase",
    "contact": {},
    "version": "0.1.0"
  },
  "paths": {
    "/account": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Retrieve information about the current user.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "auth"
        ],
        "summary": "Get current user",
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_auth_structs.AccountMeshes"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/account/password": {
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Update the password of the current user.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "auth"
        ],
        "summary": "Update user password",
        "parameters": [
          {
            "description": "UserPassword object",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ncobase_auth_structs.UserPassword"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/account/space": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Retrieve the space associated with the current user.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "auth"
        ],
        "summary": "Get current user space",
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_auth_structs.ReadSpace"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/account/spaces": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Retrieve the space associated with the current user.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "auth"
        ],
        "summary": "Get current user spaces",
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_auth_structs.ReadSpace"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/authorize/send": {
      "post": {
        "description": "Send a verification code to the specified destination.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "auth"
        ],
        "summary": "Send verification code",
        "parameters": [
          {
            "description": "SendCodeBody object",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ncobase_auth_structs.SendCodeBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "allOf": [
                  {},
                  {
                    "type": "object",
                    "properties": {
                      "registered": {
                        "type": "boolean"
                      }
                    }
                  }
                ]
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/authorize/{code}": {
      "get": {
        "description": "Verify the provided code.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "auth"
        ],
        "summary": "Verify code",
        "parameters": [
          {
            "type": "string",
            "description": "Verification code",
            "name": "code",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "allOf": [
                  {},
                  {
                    "type": "object",
                    "properties": {
                      "access_token": {
                        "type": "string"
                      },
                      "email": {
                        "type": "string"
                      },
                      "id": {
                        "type": "string"
                      },
                      "register_token": {
                        "type": "string"
                      }
                    }
                  }
                ]
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/captcha/generate": {
      "get": {
        "description": "Generate a captcha image.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "auth"
        ],
        "summary": "Generate captcha",
        "parameters": [
          {
            "enum": [
              "png",
              "wav"
            ],
            "type": "string",
            "description": "Captcha type",
            "name": "type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "allOf": [
                  {},
                  {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "url": {
                        "type": "string"
                      }
                    }
                  }
                ]
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/captcha/validate": {
      "post": {
        "description": "Validate a captcha code.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "auth"
        ],
        "summary": "Validate captcha",
        "parameters": [
          {
            "description": "Captcha object",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ncobase_auth_structs.Captcha"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "allOf": [
                  {},
                  {
                    "type": "object",
                    "properties": {
                      "message": {
                        "type": "string"
                      }
                    }
                  }
                ]
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/captcha/{captcha_id}": {
      "get": {
        "description": "Stream a captcha image.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "auth"
        ],
        "summary": "Stream captcha",
        "parameters": [
          {
            "type": "string",
            "description": "Captcha ID With Extension (png, wav)",
            "name": "captcha_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "file"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/cms/channels": {
      "get": {
        "description": "Retrieve a list of distribution channels.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "cms"
        ],
        "summary": "List channels",
        "parameters": [
          {
            "type": "string",
            "name": "cursor",
            "in": "query"
          },
          {
            "type": "string",
            "name": "direction",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "status",
            "in": "query"
          },
          {
            "type": "string",
            "name": "space",
            "in": "query"
          },
          {
            "type": "string",
            "name": "type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ncobase_content_structs.ReadChannel"
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Create a new distribution channel.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "cms"
        ],
        "summary": "Create channel",
        "parameters": [
          {
            "description": "CreateChannelBody object",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ncobase_content_structs.CreateChannelBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_content_structs.ReadChannel"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/cms/channels/{slug}": {
      "get": {
        "description": "Retrieve details of a distribution channel.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "cms"
        ],
        "summary": "Get channel",
        "parameters": [
          {
            "type": "string",
            "description": "Channel slug",
            "name": "slug",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_content_structs.ReadChannel"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Update an existing distribution channel.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "cms"
        ],
        "summary": "Update channel",
        "parameters": [
          {
            "type": "string",
            "description": "Channel slug",
            "name": "slug",
            "in": "path",
            "required": true
          },
          {
            "description": "UpdateChannelBody object",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ncobase_content_structs.UpdateChannelBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_content_structs.ReadChannel"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Delete an existing distribution channel.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "cms"
        ],
        "summary": "Delete channel",
        "parameters": [
          {
            "type": "string",
            "description": "Channel slug",
            "name": "slug",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/cms/distributions": {
      "get": {
        "description": "Retrieve a list of content distributions.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "cms"
        ],
        "summary": "List distributions",
        "parameters": [
          {
            "type": "string",
            "name": "channel_id",
            "in": "query"
          },
          {
            "type": "string",
            "name": "cursor",
            "in": "query"
          },
          {
            "type": "string",
            "name": "direction",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "status",
            "in": "query"
          },
          {
            "type": "string",
            "name": "space",
            "in": "query"
          },
          {
            "type": "string",
            "name": "topic_id",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "with_channel",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "with_topic",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ncobase_content_structs.ReadDistribution"
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Create a new content distribution.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "cms"
        ],
        "summary": "Create distribution",
        "parameters": [
          {
            "description": "CreateDistributionBody object",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ncobase_content_structs.CreateDistributionBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_content_structs.ReadDistribution"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/cms/distributions/{id}": {
      "get": {
        "description": "Retrieve details of a content distribution.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "cms"
        ],
        "summary": "Get distribution",
        "parameters": [
          {
            "type": "string",
            "description": "Distribution ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_content_structs.ReadDistribution"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Update an existing content distribution.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "cms"
        ],
        "summary": "Update distribution",
        "parameters": [
          {
            "type": "string",
            "description": "Distribution ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "UpdateDistributionBody object",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ncobase_content_structs.UpdateDistributionBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_content_structs.ReadDistribution"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Delete an existing content distribution.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "cms"
        ],
        "summary": "Delete distribution",
        "parameters": [
          {
            "type": "string",
            "description": "Distribution ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/cms/distributions/{id}/cancel": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Cancel a scheduled content distribution.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "cms"
        ],
        "summary": "Cancel distribution",
        "parameters": [
          {
            "type": "string",
            "description": "Distribution ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Reason for cancellation",
            "name": "reason",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_content_structs.ReadDistribution"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/cms/distributions/{id}/publish": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Publish a content distribution immediately.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "cms"
        ],
        "summary": "Publish distribution",
        "parameters": [
          {
            "type": "string",
            "description": "Distribution ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_content_structs.ReadDistribution"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/cms/media": {
      "get": {
        "description": "Retrieve a list of media resources.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "cms"
        ],
        "summary": "List media",
        "parameters": [
          {
            "type": "string",
            "name": "cursor",
            "in": "query"
          },
          {
            "type": "string",
            "name": "direction",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "name": "search",
            "in": "query"
          },
          {
            "type": "string",
            "name": "space",
            "in": "query"
          },
          {
            "type": "string",
            "name": "type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ncobase_content_structs.ReadMedia"
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Create a new media resource.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "cms"
        ],
        "summary": "Create media",
        "parameters": [
          {
            "description": "CreateMediaBody object",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ncobase_content_structs.CreateMediaBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_content_structs.ReadMedia"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/cms/media/{id}": {
      "get": {
        "description": "Retrieve details of a media resource.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "cms"
        ],
        "summary": "Get media",
        "parameters": [
          {
            "type": "string",
            "description": "Media ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_content_structs.ReadMedia"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Update an existing media resource.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "cms"
        ],
        "summary": "Update media",
        "parameters": [
          {
            "type": "string",
            "description": "Media ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "UpdateMediaBody object",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ncobase_content_structs.UpdateMediaBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_content_structs.ReadMedia"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Delete an existing media resource.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "cms"
        ],
        "summary": "Delete media",
        "parameters": [
          {
            "type": "string",
            "description": "Media ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/cms/taxonomies": {
      "get": {
        "description": "Retrieve a list of taxonomies.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "cms"
        ],
        "summary": "List taxonomies",
        "parameters": [
          {
            "type": "boolean",
            "name": "children",
            "in": "query"
          },
          {
            "type": "string",
            "name": "cursor",
            "in": "query"
          },
          {
            "type": "string",
            "name": "direction",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "name": "parent",
            "in": "query"
          },
          {
            "type": "string",
            "name": "sort_by",
            "in": "query"
          },
          {
            "type": "string",
            "name": "space",
            "in": "query"
          },
          {
            "type": "string",
            "name": "type",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ncobase_content_structs.ReadTaxonomy"
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Create a new taxonomy.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "cms"
        ],
        "summary": "Create taxonomy",
        "parameters": [
          {
            "description": "CreateTaxonomyBody object",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ncobase_content_structs.CreateTaxonomyBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_content_structs.ReadTaxonomy"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/cms/taxonomies/{slug}": {
      "get": {
        "description": "Retrieve details of a taxonomy.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "cms"
        ],
        "summary": "Get taxonomy",
        "parameters": [
          {
            "type": "string",
            "description": "Taxonomy slug",
            "name": "slug",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_content_structs.ReadTaxonomy"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Update an existing taxonomy.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "cms"
        ],
        "summary": "Update taxonomy",
        "parameters": [
          {
            "type": "string",
            "description": "Taxonomy slug",
            "name": "slug",
            "in": "path",
            "required": true
          },
          {
            "description": "UpdateTaxonomyBody object",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ncobase_content_structs.UpdateTaxonomyBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_content_structs.ReadTaxonomy"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Delete an existing taxonomy.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "cms"
        ],
        "summary": "Delete taxonomy",
        "parameters": [
          {
            "type": "string",
            "description": "Taxonomy slug",
            "name": "slug",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/cms/topic-media": {
      "get": {
        "description": "Retrieve a list of topic media relations.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "cms"
        ],
        "summary": "List topic media relations",
        "parameters": [
          {
            "type": "string",
            "name": "cursor",
            "in": "query"
          },
          {
            "type": "string",
            "name": "direction",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "name": "media_id",
            "in": "query"
          },
          {
            "type": "string",
            "name": "topic_id",
            "in": "query"
          },
          {
            "type": "string",
            "name": "type",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "with_media",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ncobase_content_structs.ReadTopicMedia"
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Create a new relation between a topic and a media resource.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "cms"
        ],
        "summary": "Create topic media relation",
        "parameters": [
          {
            "description": "CreateTopicMediaBody object",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ncobase_content_structs.CreateTopicMediaBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_content_structs.ReadTopicMedia"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/cms/topic-media/by-topic-and-media": {
      "get": {
        "description": "Retrieve a topic media relation by topic ID and media ID.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "cms"
        ],
        "summary": "Get by topic and media",
        "parameters": [
          {
            "type": "string",
            "description": "Topic ID",
            "name": "topicId",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Media ID",
            "name": "mediaId",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_content_structs.ReadTopicMedia"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/cms/topic-media/by-topic/{topicId}": {
      "get": {
        "description": "Retrieve all media relations for a specific topic.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "cms"
        ],
        "summary": "List by topic",
        "parameters": [
          {
            "type": "string",
            "description": "Topic ID",
            "name": "topicId",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "featured",
              "gallery",
              "attachment"
            ],
            "type": "string",
            "description": "Media Type",
            "name": "type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ncobase_content_structs.ReadTopicMedia"
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/cms/topic-media/{id}": {
      "get": {
        "description": "Retrieve details of a topic media relation.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "cms"
        ],
        "summary": "Get topic media relation",
        "parameters": [
          {
            "type": "string",
            "description": "Topic Media ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_content_structs.ReadTopicMedia"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Update an existing relation between a topic and media.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "cms"
        ],
        "summary": "Update topic media relation",
        "parameters": [
          {
            "type": "string",
            "description": "Topic Media ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Update parameters",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_content_structs.ReadTopicMedia"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Delete an existing topic media relation.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "cms"
        ],
        "summary": "Delete topic media relation",
        "parameters": [
          {
            "type": "string",
            "description": "Topic Media ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/cms/topics": {
      "get": {
        "description": "Retrieve a list of topics.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "cms"
        ],
        "summary": "List topics",
        "parameters": [
          {
            "type": "string",
            "name": "cursor",
            "in": "query"
          },
          {
            "type": "string",
            "name": "direction",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "name": "taxonomy",
            "in": "query"
          },
          {
            "type": "string",
            "name": "space",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ncobase_content_structs.ReadTopic"
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Create a new topic.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "cms"
        ],
        "summary": "Create topic",
        "parameters": [
          {
            "description": "CreateTopicBody object",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ncobase_content_structs.CreateTopicBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_content_structs.ReadTopic"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/cms/topics/{slug}": {
      "get": {
        "description": "Retrieve details of a topic.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "cms"
        ],
        "summary": "Get topic",
        "parameters": [
          {
            "type": "string",
            "description": "Topic slug",
            "name": "slug",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_content_structs.ReadTopic"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Update an existing topic, either fully or partially.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "cms"
        ],
        "summary": "Update topic",
        "parameters": [
          {
            "type": "string",
            "description": "Topic slug",
            "name": "slug",
            "in": "path",
            "required": true
          },
          {
            "description": "UpdateTopicBody object",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ncobase_content_structs.UpdateTopicBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_content_structs.ReadTopic"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Delete an existing topic.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "cms"
        ],
        "summary": "Delete topic",
        "parameters": [
          {
            "type": "string",
            "description": "Topic slug",
            "name": "slug",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/flow/delegations": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "List delegation rules",
        "produces": [
          "application/json"
        ],
        "tags": [
          "flow"
        ],
        "summary": "List delegations",
        "parameters": [
          {
            "type": "string",
            "name": "cursor",
            "in": "query"
          },
          {
            "type": "string",
            "name": "delegator_id",
            "in": "query"
          },
          {
            "type": "string",
            "name": "direction",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "is_enabled",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "name": "node_type",
            "in": "query"
          },
          {
            "type": "string",
            "name": "status",
            "in": "query"
          },
          {
            "type": "string",
            "name": "template_id",
            "in": "query"
          },
          {
            "type": "string",
            "name": "space",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ncobase_workflow_structs.ReadDelegation"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Create a new delegation rule",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "flow"
        ],
        "summary": "Create delegation",
        "parameters": [
          {
            "description": "Delegation creation body",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ncobase_workflow_structs.DelegationBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ncobase_workflow_structs.ReadDelegation"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/flow/delegations/{id}": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Get delegation rule details",
        "produces": [
          "application/json"
        ],
        "tags": [
          "flow"
        ],
        "summary": "Get delegation",
        "parameters": [
          {
            "type": "string",
            "description": "Delegation ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ncobase_workflow_structs.ReadDelegation"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Update delegation rule details",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "flow"
        ],
        "summary": "Update delegation",
        "parameters": [
          {
            "type": "string",
            "description": "Delegation ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Delegation update body",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ncobase_workflow_structs.UpdateDelegationBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ncobase_workflow_structs.ReadDelegation"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Delete a delegation rule",
        "produces": [
          "application/json"
        ],
        "tags": [
          "flow"
        ],
        "summary": "Delete delegation",
        "parameters": [
          {
            "type": "string",
            "description": "Delegation ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/flow/delegations/{id}/disable": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Disable a delegation rule",
        "produces": [
          "application/json"
        ],
        "tags": [
          "flow"
        ],
        "summary": "Disable delegation",
        "parameters": [
          {
            "type": "string",
            "description": "Delegation ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/flow/delegations/{id}/enable": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Enable a delegation rule",
        "produces": [
          "application/json"
        ],
        "tags": [
          "flow"
        ],
        "summary": "Enable delegation",
        "parameters": [
          {
            "type": "string",
            "description": "Delegation ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/flow/histories": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "List history records",
        "produces": [
          "application/json"
        ],
        "tags": [
          "flow"
        ],
        "summary": "List histories",
        "parameters": [
          {
            "type": "string",
            "name": "cursor",
            "in": "query"
          },
          {
            "type": "string",
            "name": "direction",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "name": "node_id",
            "in": "query"
          },
          {
            "type": "string",
            "name": "operator",
            "in": "query"
          },
          {
            "type": "string",
            "name": "process_id",
            "in": "query"
          },
          {
            "type": "string",
            "name": "sort_by",
            "in": "query"
          },
          {
            "type": "string",
            "name": "task_id",
            "in": "query"
          },
          {
            "type": "string",
            "name": "space",
            "in": "query"
          },
          {
            "type": "string",
            "name": "type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ncobase_workflow_structs.ReadHistory"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Create a new history record",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "flow"
        ],
        "summary": "Create history",
        "parameters": [
          {
            "description": "History creation body",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ncobase_workflow_structs.HistoryBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ncobase_workflow_structs.ReadHistory"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/flow/histories/{id}": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Get history record details",
        "produces": [
          "application/json"
        ],
        "tags": [
          "flow"
        ],
        "summary": "Get history",
        "parameters": [
          {
            "type": "string",
            "description": "History ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ncobase_workflow_structs.ReadHistory"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/flow/nodes": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "List workflow nodes",
        "produces": [
          "application/json"
        ],
        "tags": [
          "flow"
        ],
        "summary": "List nodes",
        "parameters": [
          {
            "type": "string",
            "name": "cursor",
            "in": "query"
          },
          {
            "type": "string",
            "name": "direction",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "name": "process_id",
            "in": "query"
          },
          {
            "type": "string",
            "name": "sort_by",
            "in": "query"
          },
          {
            "type": "string",
            "name": "status",
            "in": "query"
          },
          {
            "type": "string",
            "name": "space",
            "in": "query"
          },
          {
            "type": "string",
            "name": "type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ncobase_workflow_structs.ReadNode"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Create a new workflow node",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "flow"
        ],
        "summary": "Create node",
        "parameters": [
          {
            "description": "Node creation body",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ncobase_workflow_structs.NodeBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ncobase_workflow_structs.ReadNode"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/flow/nodes/{id}": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Get workflow node details",
        "produces": [
          "application/json"
        ],
        "tags": [
          "flow"
        ],
        "summary": "Get node",
        "parameters": [
          {
            "type": "string",
            "description": "Node Key",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ncobase_workflow_structs.ReadNode"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Update workflow node details",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "flow"
        ],
        "summary": "Update node",
        "parameters": [
          {
            "type": "string",
            "description": "Node ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Node update body",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ncobase_workflow_structs.UpdateNodeBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ncobase_workflow_structs.ReadNode"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Delete a workflow node",
        "produces": [
          "application/json"
        ],
        "tags": [
          "flow"
        ],
        "summary": "Delete node",
        "parameters": [
          {
            "type": "string",
            "description": "Node Key",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/flow/nodes/{id}/rules": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Get all rules associated with a node",
        "produces": [
          "application/json"
        ],
        "tags": [
          "flow"
        ],
        "summary": "Get node rules",
        "parameters": [
          {
            "type": "string",
            "description": "Node Key",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ncobase_workflow_structs.ReadRule"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/flow/nodes/{id}/status": {
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Update workflow node status",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "flow"
        ],
        "summary": "Update node status",
        "parameters": [
          {
            "type": "string",
            "description": "Node ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "New Status",
            "name": "status",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/flow/nodes/{id}/tasks": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Get all tasks associated with a node",
        "produces": [
          "application/json"
        ],
        "tags": [
          "flow"
        ],
        "summary": "Get node tasks",
        "parameters": [
          {
            "type": "string",
            "description": "Node Key",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ncobase_workflow_structs.ReadTask"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/flow/nodes/{id}/validate": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Validate configuration of a workflow node",
        "produces": [
          "application/json"
        ],
        "tags": [
          "flow"
        ],
        "summary": "Validate node config",
        "parameters": [
          {
            "type": "string",
            "description": "Node ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/flow/operators/{operator}/histories": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Get complete history of operations by an operator",
        "produces": [
          "application/json"
        ],
        "tags": [
          "flow"
        ],
        "summary": "Get operator history",
        "parameters": [
          {
            "type": "string",
            "description": "Operator ID",
            "name": "operator",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ncobase_workflow_structs.ReadHistory"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/flow/process-designs": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "List process designs",
        "produces": [
          "application/json"
        ],
        "tags": [
          "flow"
        ],
        "summary": "List process designs",
        "parameters": [
          {
            "type": "string",
            "name": "cursor",
            "in": "query"
          },
          {
            "type": "string",
            "name": "direction",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "is_draft",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "name": "template_id",
            "in": "query"
          },
          {
            "type": "string",
            "name": "space",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ncobase_workflow_structs.ReadProcessDesign"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Create a new process design",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "flow"
        ],
        "summary": "Create process design",
        "parameters": [
          {
            "description": "Process design creation body",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ncobase_workflow_structs.ProcessDesignBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ncobase_workflow_structs.ReadProcessDesign"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/flow/process-designs/validate": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Validate process design structure and rules",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "flow"
        ],
        "summary": "Validate design",
        "parameters": [
          {
            "description": "Process design data",
            "name": "design",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/flow/process-designs/{id}": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Get process design details",
        "produces": [
          "application/json"
        ],
        "tags": [
          "flow"
        ],
        "summary": "Get process design",
        "parameters": [
          {
            "type": "string",
            "description": "Process Design ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ncobase_workflow_structs.ReadProcessDesign"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Update process design details",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "flow"
        ],
        "summary": "Update process design",
        "parameters": [
          {
            "type": "string",
            "description": "Process Design ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Process design update body",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ncobase_workflow_structs.UpdateProcessDesignBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ncobase_workflow_structs.ReadProcessDesign"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Delete a process design",
        "produces": [
          "application/json"
        ],
        "tags": [
          "flow"
        ],
        "summary": "Delete process design",
        "parameters": [
          {
            "type": "string",
            "description": "Process Design ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/flow/process-designs/{id}/drafts": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Save process design as draft",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "flow"
        ],
        "summary": "Save design draft",
        "parameters": [
          {
            "type": "string",
            "description": "Process Design ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Process design data",
            "name": "design",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/flow/process-designs/{id}/export": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Export process design to file",
        "produces": [
          "application/octet-stream"
        ],
        "tags": [
          "flow"
        ],
        "summary": "Export design",
        "parameters": [
          {
            "type": "string",
            "description": "Process Design ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "file"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/flow/process-designs/{id}/publish": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Publish process design draft as official version",
        "produces": [
          "application/json"
        ],
        "tags": [
          "flow"
        ],
        "summary": "Publish design draft",
        "parameters": [
          {
            "type": "string",
            "description": "Process Design ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/flow/processes": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "List process instances",
        "produces": [
          "application/json"
        ],
        "tags": [
          "flow"
        ],
        "summary": "List processes",
        "parameters": [
          {
            "type": "string",
            "name": "cursor",
            "in": "query"
          },
          {
            "type": "string",
            "name": "direction",
            "in": "query"
          },
          {
            "type": "string",
            "name": "initiator",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "priority",
            "in": "query"
          },
          {
            "type": "string",
            "name": "sort_by",
            "in": "query"
          },
          {
            "type": "string",
            "name": "status",
            "in": "query"
          },
          {
            "type": "string",
            "name": "space",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ncobase_workflow_structs.ReadProcess"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Create a new process instance",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "flow"
        ],
        "summary": "Create process",
        "parameters": [
          {
            "description": "Process creation body",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ncobase_workflow_structs.ProcessBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ncobase_workflow_structs.ReadProcess"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/flow/processes/start": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Start a new process instance",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "flow"
        ],
        "summary": "Start process",
        "parameters": [
          {
            "description": "Process start request",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ncobase_workflow_structs.StartProcessRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ncobase_workflow_structs.StartProcessResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/flow/processes/{id}": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Get process instance details",
        "produces": [
          "application/json"
        ],
        "tags": [
          "flow"
        ],
        "summary": "Get process",
        "parameters": [
          {
            "type": "string",
            "description": "Process Key",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ncobase_workflow_structs.ReadProcess"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Update process instance details",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "flow"
        ],
        "summary": "Update process",
        "parameters": [
          {
            "type": "string",
            "description": "Process ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Process update body",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ncobase_workflow_structs.UpdateProcessBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ncobase_workflow_structs.ReadProcess"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Delete process instance",
        "produces": [
          "application/json"
        ],
        "tags": [
          "flow"
        ],
        "summary": "Delete process",
        "parameters": [
          {
            "type": "string",
            "description": "Process Key",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/flow/processes/{id}/complete": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Complete a process instance",
        "produces": [
          "application/json"
        ],
        "tags": [
          "flow"
        ],
        "summary": "Complete process",
        "parameters": [
          {
            "type": "string",
            "description": "Process ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/flow/processes/{id}/resume": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Resume a suspended process instance",
        "produces": [
          "application/json"
        ],
        "tags": [
          "flow"
        ],
        "summary": "Resume process",
        "parameters": [
          {
            "type": "string",
            "description": "Process ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/flow/processes/{id}/suspend": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Suspend a process instance",
        "produces": [
          "application/json"
        ],
        "tags": [
          "flow"
        ],
        "summary": "Suspend process",
        "parameters": [
          {
            "type": "string",
            "description": "Process ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Suspension reason",
            "name": "reason",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/flow/processes/{id}/terminate": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Terminate a process instance",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "flow"
        ],
        "summary": "Terminate process",
        "parameters": [
          {
            "type": "string",
            "description": "Process ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Process termination request",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ncobase_workflow_structs.TerminateProcessRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/flow/processes/{process_id}/evaluate-rules": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Evaluate rules for a process instance",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "flow"
        ],
        "summary": "Evaluate rules",
        "parameters": [
          {
            "type": "string",
            "description": "Process ID",
            "name": "process_id",
            "in": "path",
            "required": true
          },
          {
            "description": "Data for rule evaluation",
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/flow/processes/{process_id}/histories": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Get complete history of a process instance",
        "produces": [
          "application/json"
        ],
        "tags": [
          "flow"
        ],
        "summary": "Get process history",
        "parameters": [
          {
            "type": "string",
            "description": "Process ID",
            "name": "process_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ncobase_workflow_structs.ReadHistory"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/flow/processes/{process_id}/nodes": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Get all nodes of a process instance",
        "produces": [
          "application/json"
        ],
        "tags": [
          "flow"
        ],
        "summary": "Get process nodes",
        "parameters": [
          {
            "type": "string",
            "description": "Process ID",
            "name": "process_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ncobase_workflow_structs.ReadNode"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/flow/rules": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "List workflow rules",
        "produces": [
          "application/json"
        ],
        "tags": [
          "flow"
        ],
        "summary": "List rules",
        "parameters": [
          {
            "type": "string",
            "name": "cursor",
            "in": "query"
          },
          {
            "type": "string",
            "name": "direction",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "is_enabled",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "name": "node_key",
            "in": "query"
          },
          {
            "type": "string",
            "name": "status",
            "in": "query"
          },
          {
            "type": "string",
            "name": "template_id",
            "in": "query"
          },
          {
            "type": "string",
            "name": "space",
            "in": "query"
          },
          {
            "type": "string",
            "name": "type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ncobase_workflow_structs.ReadRule"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Create a new workflow rule",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "flow"
        ],
        "summary": "Create rule",
        "parameters": [
          {
            "description": "Rule creation body",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ncobase_workflow_structs.RuleBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ncobase_workflow_structs.ReadRule"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/flow/rules/active": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Get active rules for template or node",
        "produces": [
          "application/json"
        ],
        "tags": [
          "flow"
        ],
        "summary": "Get active rules",
        "parameters": [
          {
            "type": "string",
            "description": "Template ID",
            "name": "template_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Node Key",
            "name": "node_key",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ncobase_workflow_structs.ReadRule"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/flow/rules/{id}": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Get workflow rule details",
        "produces": [
          "application/json"
        ],
        "tags": [
          "flow"
        ],
        "summary": "Get rule",
        "parameters": [
          {
            "type": "string",
            "description": "Rule Key",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ncobase_workflow_structs.ReadRule"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Update workflow rule details",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "flow"
        ],
        "summary": "Update rule",
        "parameters": [
          {
            "type": "string",
            "description": "Rule ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Rule update body",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ncobase_workflow_structs.UpdateRuleBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ncobase_workflow_structs.ReadRule"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Delete a workflow rule",
        "produces": [
          "application/json"
        ],
        "tags": [
          "flow"
        ],
        "summary": "Delete rule",
        "parameters": [
          {
            "type": "string",
            "description": "Rule ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/flow/rules/{id}/disable": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Disable a workflow rule",
        "produces": [
          "application/json"
        ],
        "tags": [
          "flow"
        ],
        "summary": "Disable rule",
        "parameters": [
          {
            "type": "string",
            "description": "Rule ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/flow/rules/{id}/enable": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Enable a workflow rule",
        "produces": [
          "application/json"
        ],
        "tags": [
          "flow"
        ],
        "summary": "Enable rule",
        "parameters": [
          {
            "type": "string",
            "description": "Rule ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/flow/rules/{id}/validate": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Validate a workflow rule",
        "produces": [
          "application/json"
        ],
        "tags": [
          "flow"
        ],
        "summary": "Validate rule",
        "parameters": [
          {
            "type": "string",
            "description": "Rule ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/flow/tasks": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "List tasks",
        "produces": [
          "application/json"
        ],
        "tags": [
          "flow"
        ],
        "summary": "List tasks",
        "parameters": [
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "name": "assignees",
            "in": "query"
          },
          {
            "type": "string",
            "name": "cursor",
            "in": "query"
          },
          {
            "type": "string",
            "name": "direction",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "is_timeout",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "name": "node_key",
            "in": "query"
          },
          {
            "type": "string",
            "name": "node_type",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "priority",
            "in": "query"
          },
          {
            "type": "string",
            "name": "process_id",
            "in": "query"
          },
          {
            "type": "string",
            "name": "sort_by",
            "in": "query"
          },
          {
            "type": "string",
            "name": "status",
            "in": "query"
          },
          {
            "type": "string",
            "name": "space",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ncobase_workflow_structs.ReadTask"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Create a new task",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "flow"
        ],
        "summary": "Create task",
        "parameters": [
          {
            "description": "Task creation body",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ncobase_workflow_structs.TaskBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ncobase_workflow_structs.ReadTask"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/flow/tasks/{id}": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Get task details",
        "produces": [
          "application/json"
        ],
        "tags": [
          "flow"
        ],
        "summary": "Get task",
        "parameters": [
          {
            "type": "string",
            "description": "Task ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ncobase_workflow_structs.ReadTask"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Update task details",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "flow"
        ],
        "summary": "Update task",
        "parameters": [
          {
            "type": "string",
            "description": "Task ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Task update body",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ncobase_workflow_structs.UpdateTaskBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ncobase_workflow_structs.ReadTask"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Delete a task",
        "produces": [
          "application/json"
        ],
        "tags": [
          "flow"
        ],
        "summary": "Delete task",
        "parameters": [
          {
            "type": "string",
            "description": "Task ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/flow/tasks/{id}/claim": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Claim an unassigned task",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "flow"
        ],
        "summary": "Claim task",
        "parameters": [
          {
            "type": "string",
            "description": "Task ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Task assignees",
            "name": "assignees",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/flow/tasks/{id}/complete": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Complete a task",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "flow"
        ],
        "summary": "Complete task",
        "parameters": [
          {
            "type": "string",
            "description": "Task ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Task completion request",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ncobase_workflow_structs.CompleteTaskRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ncobase_workflow_structs.CompleteTaskResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/flow/tasks/{id}/delegate": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Delegate a task to another user",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "flow"
        ],
        "summary": "Delegate task",
        "parameters": [
          {
            "type": "string",
            "description": "Task ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Task delegation request",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ncobase_workflow_structs.DelegateTaskRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/flow/tasks/{id}/transfer": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Transfer a task to another user",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "flow"
        ],
        "summary": "Transfer task",
        "parameters": [
          {
            "type": "string",
            "description": "Task ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Task transfer request",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ncobase_workflow_structs.TransferTaskRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/flow/tasks/{id}/urge": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Send urge request for a task",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "flow"
        ],
        "summary": "Urge task",
        "parameters": [
          {
            "type": "string",
            "description": "Task ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Task urge request",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ncobase_workflow_structs.UrgeTaskRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/flow/tasks/{id}/withdraw": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Withdraw a completed task",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "flow"
        ],
        "summary": "Withdraw task",
        "parameters": [
          {
            "type": "string",
            "description": "Task ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Task withdrawal request",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ncobase_workflow_structs.WithdrawTaskRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/flow/tasks/{task_id}/check-delegation": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Check if task can be delegated to user",
        "produces": [
          "application/json"
        ],
        "tags": [
          "flow"
        ],
        "summary": "Check delegation",
        "parameters": [
          {
            "type": "string",
            "description": "Task ID",
            "name": "task_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Assignee ID",
            "name": "assignee_id",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Delegatee ID if delegation exists",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/flow/tasks/{task_id}/histories": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Get complete history of a task",
        "produces": [
          "application/json"
        ],
        "tags": [
          "flow"
        ],
        "summary": "Get task history",
        "parameters": [
          {
            "type": "string",
            "description": "Task ID",
            "name": "task_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ncobase_workflow_structs.ReadHistory"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/flow/templates": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "List workflow templates",
        "produces": [
          "application/json"
        ],
        "tags": [
          "flow"
        ],
        "summary": "List templates",
        "parameters": [
          {
            "type": "string",
            "name": "category",
            "in": "query"
          },
          {
            "type": "string",
            "name": "code",
            "in": "query"
          },
          {
            "type": "string",
            "name": "cursor",
            "in": "query"
          },
          {
            "type": "string",
            "name": "direction",
            "in": "query"
          },
          {
            "type": "string",
            "name": "form_code",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "is_latest",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "name": "module_code",
            "in": "query"
          },
          {
            "type": "string",
            "name": "sort_by",
            "in": "query"
          },
          {
            "type": "string",
            "name": "status",
            "in": "query"
          },
          {
            "type": "string",
            "name": "space",
            "in": "query"
          },
          {
            "type": "string",
            "name": "type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ncobase_workflow_structs.ReadTemplate"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Create a new workflow template",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "flow"
        ],
        "summary": "Create template",
        "parameters": [
          {
            "description": "Template creation body",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ncobase_workflow_structs.TemplateBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ncobase_workflow_structs.ReadTemplate"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/flow/templates/{id}": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Get workflow template details",
        "produces": [
          "application/json"
        ],
        "tags": [
          "flow"
        ],
        "summary": "Get template",
        "parameters": [
          {
            "type": "string",
            "description": "Template ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ncobase_workflow_structs.ReadTemplate"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Update workflow template details",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "flow"
        ],
        "summary": "Update template",
        "parameters": [
          {
            "type": "string",
            "description": "Template ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Template update body",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ncobase_workflow_structs.UpdateTemplateBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ncobase_workflow_structs.ReadTemplate"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Delete a workflow template",
        "produces": [
          "application/json"
        ],
        "tags": [
          "flow"
        ],
        "summary": "Delete template",
        "parameters": [
          {
            "type": "string",
            "description": "Template ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/flow/templates/{id}/designs": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Get process designs associated with a template",
        "produces": [
          "application/json"
        ],
        "tags": [
          "flow"
        ],
        "summary": "Get template designs",
        "parameters": [
          {
            "type": "string",
            "description": "Template ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ncobase_workflow_structs.ReadProcessDesign"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/flow/templates/{id}/disable": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Disable a workflow template",
        "produces": [
          "application/json"
        ],
        "tags": [
          "flow"
        ],
        "summary": "Disable template",
        "parameters": [
          {
            "type": "string",
            "description": "Template ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/flow/templates/{id}/enable": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Enable a workflow template",
        "produces": [
          "application/json"
        ],
        "tags": [
          "flow"
        ],
        "summary": "Enable template",
        "parameters": [
          {
            "type": "string",
            "description": "Template ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/flow/templates/{id}/rules": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Get rules associated with a template",
        "produces": [
          "application/json"
        ],
        "tags": [
          "flow"
        ],
        "summary": "Get template rules",
        "parameters": [
          {
            "type": "string",
            "description": "Template ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ncobase_workflow_structs.ReadRule"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/flow/templates/{id}/validate": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Validate a workflow template",
        "produces": [
          "application/json"
        ],
        "tags": [
          "flow"
        ],
        "summary": "Validate template",
        "parameters": [
          {
            "type": "string",
            "description": "Template ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/flow/templates/{id}/versions": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Create a new version of existing template",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "flow"
        ],
        "summary": "Create template version",
        "parameters": [
          {
            "type": "string",
            "description": "Template ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "New Version",
            "name": "version",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ncobase_workflow_structs.ReadTemplate"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/flow/templates/{id}/versions/latest": {
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Set a template version as the latest version",
        "produces": [
          "application/json"
        ],
        "tags": [
          "flow"
        ],
        "summary": "Set latest version",
        "parameters": [
          {
            "type": "string",
            "description": "Template ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/flow/templates/{template_id}/designs/import": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Import process design from file",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "flow"
        ],
        "summary": "Import design",
        "parameters": [
          {
            "type": "string",
            "description": "Template ID",
            "name": "template_id",
            "in": "path",
            "required": true
          },
          {
            "type": "file",
            "description": "Process design file",
            "name": "file",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/flow/users/{user_id}/delegations": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Get active delegations for a user",
        "produces": [
          "application/json"
        ],
        "tags": [
          "flow"
        ],
        "summary": "Get active delegations",
        "parameters": [
          {
            "type": "string",
            "description": "User ID",
            "name": "user_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ncobase_workflow_structs.ReadDelegation"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/login": {
      "post": {
        "description": "Log in a user.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "auth"
        ],
        "summary": "Login",
        "parameters": [
          {
            "description": "LoginBody object",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ncobase_auth_structs.LoginBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "allOf": [
                  {},
                  {
                    "type": "object",
                    "properties": {
                      "access_token": {
                        "type": "string"
                      },
                      "id": {
                        "type": "string"
                      }
                    }
                  }
                ]
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/logout": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Logout the current user.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "auth"
        ],
        "summary": "Logout",
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/org/orgs": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Retrieve a list or tree structure of orgs.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "org"
        ],
        "summary": "List orgs",
        "parameters": [
          {
            "type": "boolean",
            "name": "children",
            "in": "query"
          },
          {
            "type": "string",
            "name": "cursor",
            "in": "query"
          },
          {
            "type": "string",
            "name": "direction",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "name": "parent",
            "in": "query"
          },
          {
            "type": "string",
            "name": "sort_by",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ncobase_space_structs.ReadOrganization"
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Update an existing group.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "org"
        ],
        "summary": "Update group",
        "parameters": [
          {
            "description": "UpdateGroupBody object",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ncobase_space_structs.UpdateGroupBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_space_structs.ReadOrganization"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Create a new group.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "org"
        ],
        "summary": "Create group",
        "parameters": [
          {
            "description": "GroupBody object",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ncobase_space_structs.GroupBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_space_structs.ReadOrganization"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/org/orgs/{orgId}": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Retrieve a organization by ID or slug.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "org"
        ],
        "summary": "Get group",
        "parameters": [
          {
            "type": "string",
            "description": "Organization ID or slug",
            "name": "orgId",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "name": "children",
            "in": "query"
          },
          {
            "type": "string",
            "name": "group",
            "in": "query"
          },
          {
            "type": "string",
            "name": "parent",
            "in": "query"
          },
          {
            "type": "string",
            "name": "sort_by",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_space_structs.ReadOrganization"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Delete a organization by ID or slug.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "org"
        ],
        "summary": "Delete group",
        "parameters": [
          {
            "type": "string",
            "description": "Organization ID or slug",
            "name": "orgId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/org/orgs/{orgId}/members": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Get all members of a specific group",
        "produces": [
          "application/json"
        ],
        "tags": [
          "org"
        ],
        "summary": "Get group members",
        "parameters": [
          {
            "type": "string",
            "description": "Organization ID or Slug",
            "name": "orgId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ncobase_space_structs.GroupMember"
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Add a user to a organization with a specified role",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "org"
        ],
        "summary": "Add member to group",
        "parameters": [
          {
            "type": "string",
            "description": "Organization ID or Slug",
            "name": "orgId",
            "in": "path",
            "required": true
          },
          {
            "description": "User details to add",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ncobase_space_structs.AddMemberRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_space_structs.GroupMember"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/org/orgs/{orgId}/members/{userId}": {
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Update a member's role in a organization",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "org"
        ],
        "summary": "Update group member",
        "parameters": [
          {
            "type": "string",
            "description": "Organization ID or Slug",
            "name": "orgId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "description": "Role update",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ncobase_space_structs.UpdateMemberRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_space_structs.GroupMember"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Remove a user from a organization",
        "produces": [
          "application/json"
        ],
        "tags": [
          "org"
        ],
        "summary": "Remove group member",
        "parameters": [
          {
            "type": "string",
            "description": "Organization ID or Slug",
            "name": "orgId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/org/orgs/{orgId}/members/{userId}/check": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Check if a user is a member of a organization",
        "produces": [
          "application/json"
        ],
        "tags": [
          "org"
        ],
        "summary": "Check if user is a member",
        "parameters": [
          {
            "type": "string",
            "description": "Organization ID or Slug",
            "name": "orgId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "boolean"
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/org/orgs/{orgId}/members/{userId}/is-owner": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Check if a user has owner role in a organization",
        "produces": [
          "application/json"
        ],
        "tags": [
          "org"
        ],
        "summary": "Check if user is an owner",
        "parameters": [
          {
            "type": "string",
            "description": "Organization ID or Slug",
            "name": "orgId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "boolean"
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/org/orgs/{orgId}/members/{userId}/role": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Get a user's role in a organization",
        "produces": [
          "application/json"
        ],
        "tags": [
          "org"
        ],
        "summary": "Get user role",
        "parameters": [
          {
            "type": "string",
            "description": "Organization ID or Slug",
            "name": "orgId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/pay/channels": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Get a paginated list of payment channels",
        "produces": [
          "application/json"
        ],
        "tags": [
          "payment",
          "channels"
        ],
        "summary": "List payment channels",
        "parameters": [
          {
            "type": "string",
            "description": "Filter by provider",
            "name": "provider",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filter by status",
            "name": "status",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filter by space ID",
            "name": "space_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Cursor for pagination",
            "name": "cursor",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 20,
            "description": "Page size",
            "name": "page_size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ncobase_payment_structs.Channel"
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "500": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Create a new payment channel",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "payment",
          "channels"
        ],
        "summary": "Create payment channel",
        "parameters": [
          {
            "description": "Channel data",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ncobase_payment_structs.CreateChannelInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/definitions/ncobase_payment_structs.Channel"
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "500": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/pay/channels/{id}": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Get a payment channel by ID",
        "produces": [
          "application/json"
        ],
        "tags": [
          "payment",
          "channels"
        ],
        "summary": "Get payment channel",
        "parameters": [
          {
            "type": "string",
            "description": "Channel ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/definitions/ncobase_payment_structs.Channel"
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "500": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Update an existing payment channel",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "payment",
          "channels"
        ],
        "summary": "Update payment channel",
        "parameters": [
          {
            "type": "string",
            "description": "Channel ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Updates",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ncobase_payment_structs.UpdateChannelInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/definitions/ncobase_payment_structs.Channel"
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "500": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Delete a payment channel by ID",
        "produces": [
          "application/json"
        ],
        "tags": [
          "payment",
          "channels"
        ],
        "summary": "Delete payment channel",
        "parameters": [
          {
            "type": "string",
            "description": "Channel ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object"
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "500": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/pay/channels/{id}/status": {
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Change the status of a payment channel",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "payment",
          "channels"
        ],
        "summary": "Change channel status",
        "parameters": [
          {
            "type": "string",
            "description": "Channel ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Status data",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/definitions/ncobase_payment_structs.Channel"
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "500": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/pay/logs": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Get a paginated list of payment logs",
        "produces": [
          "application/json"
        ],
        "tags": [
          "payment",
          "logs"
        ],
        "summary": "List payment logs",
        "parameters": [
          {
            "type": "string",
            "description": "Filter by order ID",
            "name": "order_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filter by channel ID",
            "name": "channel_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filter by log type",
            "name": "type",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Filter by has error",
            "name": "has_error",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Filter by start date (Unix timestamp)",
            "name": "start_date",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Filter by end date (Unix timestamp)",
            "name": "end_date",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filter by user ID",
            "name": "user_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Cursor for pagination",
            "name": "cursor",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 20,
            "description": "Page size",
            "name": "page_size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ncobase_payment_structs.Log"
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "500": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/pay/logs/order/{orderId}": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Get payment logs for a specific order",
        "produces": [
          "application/json"
        ],
        "tags": [
          "payment",
          "logs"
        ],
        "summary": "Get logs by order",
        "parameters": [
          {
            "type": "string",
            "description": "Order ID",
            "name": "orderId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "default": 1,
            "description": "Page number",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 20,
            "description": "Page size",
            "name": "page_size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ncobase_payment_structs.Log"
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "500": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/pay/logs/{id}": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Get a payment log by ID",
        "produces": [
          "application/json"
        ],
        "tags": [
          "payment",
          "logs"
        ],
        "summary": "Get payment log",
        "parameters": [
          {
            "type": "string",
            "description": "Log ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/definitions/ncobase_payment_structs.Log"
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "500": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/pay/orders": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Get a paginated list of payment orders",
        "produces": [
          "application/json"
        ],
        "tags": [
          "payment",
          "orders"
        ],
        "summary": "List payment orders",
        "parameters": [
          {
            "type": "string",
            "description": "Filter by status",
            "name": "status",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filter by type",
            "name": "type",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filter by channel ID",
            "name": "channel_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filter by user ID",
            "name": "user_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filter by space ID",
            "name": "space_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filter by product ID",
            "name": "product_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filter by subscription ID",
            "name": "subscription_id",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Filter by start date (Unix timestamp)",
            "name": "start_date",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Filter by end date (Unix timestamp)",
            "name": "end_date",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Cursor for pagination",
            "name": "cursor",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 20,
            "description": "Page size",
            "name": "page_size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ncobase_payment_structs.Order"
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "500": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Create a new payment order",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "payment",
          "orders"
        ],
        "summary": "Create payment order",
        "parameters": [
          {
            "description": "Order data",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ncobase_payment_structs.CreateOrderInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/definitions/ncobase_payment_structs.Order"
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "500": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/pay/orders/number/{orderNumber}": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Get a payment order by order number",
        "produces": [
          "application/json"
        ],
        "tags": [
          "payment",
          "orders"
        ],
        "summary": "Get order by number",
        "parameters": [
          {
            "type": "string",
            "description": "Order Number",
            "name": "orderNumber",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/definitions/ncobase_payment_structs.Order"
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "500": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/pay/orders/{id}": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Get a payment order by ID",
        "produces": [
          "application/json"
        ],
        "tags": [
          "payment",
          "orders"
        ],
        "summary": "Get payment order",
        "parameters": [
          {
            "type": "string",
            "description": "Order ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/definitions/ncobase_payment_structs.Order"
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "500": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/pay/orders/{id}/payment-url": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Generate a payment URL for a payment order",
        "produces": [
          "application/json"
        ],
        "tags": [
          "payment",
          "orders"
        ],
        "summary": "Generate payment URL",
        "parameters": [
          {
            "type": "string",
            "description": "Order ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "additionalProperties": true
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "500": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/pay/orders/{id}/refund": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Request a refund for a payment",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "payment",
          "orders"
        ],
        "summary": "Refund payment",
        "parameters": [
          {
            "type": "string",
            "description": "Order ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Refund data",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ncobase_payment_structs.RefundOrderInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/definitions/ncobase_payment_structs.Order"
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "500": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/pay/orders/{id}/verify": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Verify a payment with the payment provider",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "payment",
          "orders"
        ],
        "summary": "Verify payment",
        "parameters": [
          {
            "type": "string",
            "description": "Order ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Verification data",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/definitions/ncobase_payment_structs.Order"
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "500": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/pay/products": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Get a paginated list of products",
        "produces": [
          "application/json"
        ],
        "tags": [
          "payment",
          "products"
        ],
        "summary": "List products",
        "parameters": [
          {
            "type": "string",
            "description": "Filter by status",
            "name": "status",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filter by pricing type",
            "name": "pricing_type",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filter by space ID",
            "name": "space_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Cursor for pagination",
            "name": "cursor",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 20,
            "description": "Page size",
            "name": "page_size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ncobase_payment_structs.Product"
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "500": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Create a new product",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "payment",
          "products"
        ],
        "summary": "Create product",
        "parameters": [
          {
            "description": "Product data",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ncobase_payment_structs.CreateProductInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/definitions/ncobase_payment_structs.Product"
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "500": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/pay/products/{id}": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Get a product by ID",
        "produces": [
          "application/json"
        ],
        "tags": [
          "payment",
          "products"
        ],
        "summary": "Get product",
        "parameters": [
          {
            "type": "string",
            "description": "Product ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/definitions/ncobase_payment_structs.Product"
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "500": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Update an existing product",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "payment",
          "products"
        ],
        "summary": "Update product",
        "parameters": [
          {
            "type": "string",
            "description": "Product ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Updates",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ncobase_payment_structs.UpdateProductInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/definitions/ncobase_payment_structs.Product"
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "500": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Delete a product by ID",
        "produces": [
          "application/json"
        ],
        "tags": [
          "payment",
          "products"
        ],
        "summary": "Delete product",
        "parameters": [
          {
            "type": "string",
            "description": "Product ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object"
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "500": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/pay/providers": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Get a list of all available payment providers",
        "produces": [
          "application/json"
        ],
        "tags": [
          "payment"
        ],
        "summary": "List payment providers",
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                },
                {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "additionalProperties": true
                      }
                    }
                  }
                }
              ]
            }
          },
          "500": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/pay/stats": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Get payment statistics and metrics",
        "produces": [
          "application/json"
        ],
        "tags": [
          "payment"
        ],
        "summary": "Get payment statistics",
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "additionalProperties": true
                    }
                  }
                }
              ]
            }
          },
          "500": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/pay/subscriptions": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Get a paginated list of subscriptions",
        "produces": [
          "application/json"
        ],
        "tags": [
          "payment",
          "subscriptions"
        ],
        "summary": "List subscriptions",
        "parameters": [
          {
            "type": "string",
            "description": "Filter by status",
            "name": "status",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filter by user ID",
            "name": "user_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filter by space ID",
            "name": "space_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filter by product ID",
            "name": "product_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filter by channel ID",
            "name": "channel_id",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Filter by active status",
            "name": "active",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Cursor for pagination",
            "name": "cursor",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 20,
            "description": "Page size",
            "name": "page_size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ncobase_payment_structs.Subscription"
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "500": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Create a new subscription",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "payment",
          "subscriptions"
        ],
        "summary": "Create subscription",
        "parameters": [
          {
            "description": "Subscription data",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ncobase_payment_structs.CreateSubscriptionInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/definitions/ncobase_payment_structs.Subscription"
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "500": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/pay/subscriptions/user/{userId}": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Get subscriptions for a specific user",
        "produces": [
          "application/json"
        ],
        "tags": [
          "payment",
          "subscriptions"
        ],
        "summary": "Get user subscriptions",
        "parameters": [
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Filter by status",
            "name": "status",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Filter by active status",
            "name": "active",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 1,
            "description": "Page number",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 20,
            "description": "Page size",
            "name": "page_size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ncobase_payment_structs.Subscription"
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "500": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/pay/subscriptions/{id}": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Get a subscription by ID",
        "produces": [
          "application/json"
        ],
        "tags": [
          "payment",
          "subscriptions"
        ],
        "summary": "Get subscription",
        "parameters": [
          {
            "type": "string",
            "description": "Subscription ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/definitions/ncobase_payment_structs.Subscription"
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "500": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Update an existing subscription",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "payment",
          "subscriptions"
        ],
        "summary": "Update subscription",
        "parameters": [
          {
            "type": "string",
            "description": "Subscription ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Updates",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/definitions/ncobase_payment_structs.Subscription"
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "500": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/pay/subscriptions/{id}/cancel": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Cancel an existing subscription",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "payment",
          "subscriptions"
        ],
        "summary": "Cancel subscription",
        "parameters": [
          {
            "type": "string",
            "description": "Subscription ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Cancel options",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ncobase_payment_structs.CancelSubscriptionInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/definitions/ncobase_payment_structs.Subscription"
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "500": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/pay/webhooks/{channel}": {
      "post": {
        "description": "Process webhook notifications from payment providers",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "payment"
        ],
        "summary": "Process payment webhook",
        "parameters": [
          {
            "type": "string",
            "description": "Payment channel ID",
            "name": "channel",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "500": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/plug/counters": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Retrieve a list or tree structure of counters.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "plug"
        ],
        "summary": "List counters",
        "parameters": [
          {
            "type": "string",
            "name": "cursor",
            "in": "query"
          },
          {
            "type": "string",
            "name": "direction",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "disabled",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "name": "space",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ncobase_counter_structs.ReadCounter"
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Update an existing counter.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "plug"
        ],
        "summary": "Update counter",
        "parameters": [
          {
            "description": "UpdateCounterBody object",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ncobase_counter_structs.UpdateCounterBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_counter_structs.ReadCounter"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Create a new counter.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "plug"
        ],
        "summary": "Create counter",
        "parameters": [
          {
            "description": "CounterBody object",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ncobase_counter_structs.CounterBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_counter_structs.ReadCounter"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/plug/counters/{id}": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Retrieve a counter by ID.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "plug"
        ],
        "summary": "Get counter",
        "parameters": [
          {
            "type": "string",
            "description": "Counter ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_counter_structs.ReadCounter"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Delete a counter by ID.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "plug"
        ],
        "summary": "Delete counter",
        "parameters": [
          {
            "type": "string",
            "description": "Counter ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/refresh": {
      "post": {
        "description": "Refresh the current user's access token.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "auth"
        ],
        "summary": "RefreshToken token",
        "parameters": [
          {
            "description": "Refresh token",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ncobase_auth_structs.RefreshTokenBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "allOf": [
                  {},
                  {
                    "type": "object",
                    "properties": {
                      "access_token": {
                        "type": "string"
                      },
                      "id": {
                        "type": "string"
                      },
                      "refresh_token": {
                        "type": "string"
                      }
                    }
                  }
                ]
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/register": {
      "post": {
        "description": "Register a new user.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "auth"
        ],
        "summary": "Register",
        "parameters": [
          {
            "description": "RegisterBody object",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ncobase_auth_structs.RegisterBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "allOf": [
                  {},
                  {
                    "type": "object",
                    "properties": {
                      "access_token": {
                        "type": "string"
                      },
                      "id": {
                        "type": "string"
                      }
                    }
                  }
                ]
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/res": {
      "get": {
        "description": "List files based on specified parameters.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "res"
        ],
        "summary": "List files",
        "parameters": [
          {
            "enum": [
              "public",
              "private",
              "shared"
            ],
            "type": "string",
            "x-enum-comments": {
              "AccessLevelPrivate": "Only accessible to owner",
              "AccessLevelPublic": "Accessible to anyone",
              "AccessLevelShared": "Shared with specific users/orgs"
            },
            "x-enum-varnames": [
              "AccessLevelPublic",
              "AccessLevelPrivate",
              "AccessLevelShared"
            ],
            "name": "access_level",
            "in": "query"
          },
          {
            "enum": [
              "image",
              "document",
              "video",
              "audio",
              "archive",
              "other"
            ],
            "type": "string",
            "x-enum-varnames": [
              "FileCategoryImage",
              "FileCategoryDocument",
              "FileCategoryVideo",
              "FileCategoryAudio",
              "FileCategoryArchive",
              "FileCategoryOther"
            ],
            "name": "category",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "created_after",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "created_before",
            "in": "query"
          },
          {
            "type": "string",
            "name": "cursor",
            "in": "query"
          },
          {
            "type": "string",
            "name": "direction",
            "in": "query"
          },
          {
            "type": "string",
            "name": "folder_path",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "is_public",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "name": "object",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Full-text search",
            "name": "q",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "size_max",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "size_min",
            "in": "query"
          },
          {
            "type": "string",
            "name": "storage",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Comma-separated tags",
            "name": "tags",
            "in": "query"
          },
          {
            "type": "string",
            "name": "space",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "name": "type",
            "in": "query"
          },
          {
            "type": "string",
            "name": "user",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ncobase_resource_structs.ReadFile"
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Create one or multiple files.",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "res"
        ],
        "summary": "Create files",
        "parameters": [
          {
            "type": "file",
            "description": "File to upload",
            "name": "file",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "description": "Object ID associated with the file",
            "name": "object_id",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "Space ID associated with the file",
            "name": "space_id",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "Additional properties associated with the file (JSON format)",
            "name": "extras",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_resource_structs.ReadFile"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/res/batch/process": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Process multiple files in a batch",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "res"
        ],
        "summary": "Batch process",
        "parameters": [
          {
            "description": "Processing parameters",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ncobase_resource_structs.ReadFile"
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/res/batch/upload": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Upload multiple files in a batch",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "res"
        ],
        "summary": "Batch upload",
        "parameters": [
          {
            "type": "file",
            "description": "Files to upload",
            "name": "files",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "description": "Space ID",
            "name": "space_id",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "description": "Object ID",
            "name": "object_id",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "description": "Virtual folder path",
            "name": "folder_path",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "Access level",
            "name": "access_level",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "Comma-separated tags",
            "name": "tags",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "Additional metadata (JSON)",
            "name": "extras",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_resource_structs.BatchUploadResult"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/res/categories": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "List all available file categories",
        "produces": [
          "application/json"
        ],
        "tags": [
          "res"
        ],
        "summary": "List file categories",
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/res/quotas": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Get the storage quota for a space",
        "produces": [
          "application/json"
        ],
        "tags": [
          "res"
        ],
        "summary": "Get storage quota",
        "parameters": [
          {
            "type": "string",
            "description": "Space ID",
            "name": "space_id",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "integer"
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Set the storage quota for a space",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "res"
        ],
        "summary": "Set storage quota",
        "parameters": [
          {
            "description": "Quota information",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "integer"
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/res/quotas/usage": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Get the current storage usage for a space",
        "produces": [
          "application/json"
        ],
        "tags": [
          "res"
        ],
        "summary": "Get storage usage",
        "parameters": [
          {
            "type": "string",
            "description": "Space ID",
            "name": "space_id",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/res/search": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Search files by various criteria",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "res"
        ],
        "summary": "Search files",
        "parameters": [
          {
            "type": "string",
            "description": "Space ID",
            "name": "space",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Search query",
            "name": "q",
            "in": "query"
          },
          {
            "type": "string",
            "description": "File category",
            "name": "category",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Comma-separated tags",
            "name": "tags",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Folder path",
            "name": "folder_path",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Public flag",
            "name": "is_public",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ncobase_resource_structs.ReadFile"
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/res/stats": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Get storage usage statistics for a space",
        "produces": [
          "application/json"
        ],
        "tags": [
          "res"
        ],
        "summary": "Get storage statistics",
        "parameters": [
          {
            "type": "string",
            "description": "Space ID",
            "name": "space_id",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/res/tags": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "List all tags used in files for a space",
        "produces": [
          "application/json"
        ],
        "tags": [
          "res"
        ],
        "summary": "List file tags",
        "parameters": [
          {
            "type": "string",
            "description": "Space ID",
            "name": "space_id",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/res/{slug}": {
      "get": {
        "description": "Get details of a specific file.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "res"
        ],
        "summary": "Get file",
        "parameters": [
          {
            "type": "string",
            "description": "Slug of the file to retrieve",
            "name": "slug",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Type of retrieval ('download' or 'stream')",
            "name": "type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_resource_structs.ReadFile"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Update an existing file.",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "res"
        ],
        "summary": "Update file",
        "parameters": [
          {
            "type": "string",
            "description": "Slug of the file to update",
            "name": "slug",
            "in": "path",
            "required": true
          },
          {
            "description": "File details",
            "name": "file",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ncobase_resource_structs.UpdateFileBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_resource_structs.ReadFile"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Delete a specific file.",
        "tags": [
          "res"
        ],
        "summary": "Delete file",
        "parameters": [
          {
            "type": "string",
            "description": "Slug of the file to delete",
            "name": "slug",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_resource_structs.ReadFile"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/res/{slug}/access": {
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Set the access level for an file",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "res"
        ],
        "summary": "Set access level",
        "parameters": [
          {
            "type": "string",
            "description": "File slug",
            "name": "slug",
            "in": "path",
            "required": true
          },
          {
            "description": "Access level",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_resource_structs.ReadFile"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/res/{slug}/share": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Generate a shareable URL for an file",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "res"
        ],
        "summary": "Generate share URL",
        "parameters": [
          {
            "type": "string",
            "description": "File slug",
            "name": "slug",
            "in": "path",
            "required": true
          },
          {
            "description": "Expiration time in hours",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "integer"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/res/{slug}/thumbnail": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Create a thumbnail for an image file",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "res"
        ],
        "summary": "Create thumbnail",
        "parameters": [
          {
            "type": "string",
            "description": "File slug",
            "name": "slug",
            "in": "path",
            "required": true
          },
          {
            "description": "Processing options",
            "name": "options",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ncobase_resource_structs.ProcessingOptions"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_resource_structs.ReadFile"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/res/{slug}/versions": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Get all versions of an file",
        "produces": [
          "application/json"
        ],
        "tags": [
          "res"
        ],
        "summary": "Get file versions",
        "parameters": [
          {
            "type": "string",
            "description": "File slug",
            "name": "slug",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ncobase_resource_structs.ReadFile"
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Create a new version of an existing file",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "res"
        ],
        "summary": "Create file version",
        "parameters": [
          {
            "type": "string",
            "description": "File slug",
            "name": "slug",
            "in": "path",
            "required": true
          },
          {
            "type": "file",
            "description": "New version file",
            "name": "file",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_resource_structs.ReadFile"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/rt/channels": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Retrieve a list of channels based on the provided query parameters",
        "produces": [
          "application/json"
        ],
        "tags": [
          "rt"
        ],
        "summary": "List all channels",
        "parameters": [
          {
            "type": "string",
            "name": "cursor",
            "in": "query"
          },
          {
            "type": "string",
            "name": "direction",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "status",
            "in": "query"
          },
          {
            "type": "string",
            "name": "type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ncobase_realtime_structs.ReadChannel"
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Create a new channel",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "rt"
        ],
        "summary": "Create a new channel",
        "parameters": [
          {
            "description": "Channel data",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ncobase_realtime_structs.CreateChannel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_realtime_structs.ReadChannel"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/rt/channels/user": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Get channels of a user",
        "produces": [
          "application/json"
        ],
        "tags": [
          "rt"
        ],
        "summary": "Get channels of a user",
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ncobase_realtime_structs.ReadChannel"
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/rt/channels/{id}": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Get a channel by ID",
        "produces": [
          "application/json"
        ],
        "tags": [
          "rt"
        ],
        "summary": "Get a channel by ID",
        "parameters": [
          {
            "type": "string",
            "description": "Channel ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_realtime_structs.ReadChannel"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Update a channel",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "rt"
        ],
        "summary": "Update a channel",
        "parameters": [
          {
            "type": "string",
            "description": "Channel ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Channel data",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ncobase_realtime_structs.UpdateChannel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_realtime_structs.ReadChannel"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Delete a channel",
        "produces": [
          "application/json"
        ],
        "tags": [
          "rt"
        ],
        "summary": "Delete a channel",
        "parameters": [
          {
            "type": "string",
            "description": "Channel ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_realtime_structs.ReadChannel"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/rt/channels/{id}/subscribe": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Subscribe to a channel",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "rt"
        ],
        "summary": "Subscribe to a channel",
        "parameters": [
          {
            "type": "string",
            "description": "Channel ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Subscription data",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ncobase_realtime_structs.CreateSubscription"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_realtime_structs.ReadSubscription"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/rt/channels/{id}/subscribers": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Get subscribers of a channel",
        "produces": [
          "application/json"
        ],
        "tags": [
          "rt"
        ],
        "summary": "Get subscribers of a channel",
        "parameters": [
          {
            "type": "string",
            "description": "Channel ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ncobase_realtime_structs.ReadUser"
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/rt/channels/{id}/unsubscribe": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Unsubscribe from a channel",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "rt"
        ],
        "summary": "Unsubscribe from a channel",
        "parameters": [
          {
            "type": "string",
            "description": "Channel ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "allOf": [
                  {},
                  {
                    "type": "object",
                    "properties": {
                      "message": {
                        "type": "string"
                      }
                    }
                  }
                ]
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/rt/events": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Retrieve a list of events based on the provided query parameters",
        "produces": [
          "application/json"
        ],
        "tags": [
          "rt"
        ],
        "summary": "List all events",
        "parameters": [
          {
            "type": "string",
            "name": "channel_id",
            "in": "query"
          },
          {
            "type": "string",
            "name": "cursor",
            "in": "query"
          },
          {
            "type": "string",
            "name": "direction",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "collectionFormat": "csv",
            "name": "time_range",
            "in": "query"
          },
          {
            "type": "string",
            "name": "type",
            "in": "query"
          },
          {
            "type": "string",
            "name": "user_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ncobase_realtime_structs.ReadEvent"
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/rt/events/history": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Get event history",
        "produces": [
          "application/json"
        ],
        "tags": [
          "rt"
        ],
        "summary": "Get event history",
        "parameters": [
          {
            "type": "string",
            "description": "Channel ID",
            "name": "channel_id",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Event type",
            "name": "type",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ncobase_realtime_structs.ReadEvent"
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/rt/events/publish": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Publish a new event",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "rt"
        ],
        "summary": "Publish a new event",
        "parameters": [
          {
            "description": "Event data",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ncobase_realtime_structs.CreateEvent"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_realtime_structs.ReadEvent"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/rt/events/{id}": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Get an event by ID",
        "produces": [
          "application/json"
        ],
        "tags": [
          "rt"
        ],
        "summary": "Get an event by ID",
        "parameters": [
          {
            "type": "string",
            "description": "Event ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_realtime_structs.ReadEvent"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Delete an event",
        "produces": [
          "application/json"
        ],
        "tags": [
          "rt"
        ],
        "summary": "Delete an event",
        "parameters": [
          {
            "type": "string",
            "description": "Event ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_realtime_structs.ReadEvent"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/rt/notifications": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Retrieve a list of notifications based on the provided query parameters",
        "produces": [
          "application/json"
        ],
        "tags": [
          "rt"
        ],
        "summary": "List all notifications",
        "parameters": [
          {
            "type": "string",
            "name": "channel_id",
            "in": "query"
          },
          {
            "type": "string",
            "name": "cursor",
            "in": "query"
          },
          {
            "type": "string",
            "name": "direction",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "status",
            "in": "query"
          },
          {
            "type": "string",
            "name": "user_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ncobase_realtime_structs.ReadNotification"
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Create a new notification",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "rt"
        ],
        "summary": "Create a new notification",
        "parameters": [
          {
            "description": "Notification data",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ncobase_realtime_structs.CreateNotification"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_realtime_structs.ReadNotification"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/rt/notifications/read-all": {
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Mark all notifications as read",
        "produces": [
          "application/json"
        ],
        "tags": [
          "rt"
        ],
        "summary": "Mark all notifications as read",
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "allOf": [
                  {},
                  {
                    "type": "object",
                    "properties": {
                      "message": {
                        "type": "string"
                      }
                    }
                  }
                ]
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/rt/notifications/unread-all": {
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Mark all notifications as unread",
        "produces": [
          "application/json"
        ],
        "tags": [
          "rt"
        ],
        "summary": "Mark all notifications as unread",
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "allOf": [
                  {},
                  {
                    "type": "object",
                    "properties": {
                      "message": {
                        "type": "string"
                      }
                    }
                  }
                ]
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/rt/notifications/{id}": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Get a notification by ID",
        "produces": [
          "application/json"
        ],
        "tags": [
          "rt"
        ],
        "summary": "Get a notification by ID",
        "parameters": [
          {
            "type": "string",
            "description": "Notification ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_realtime_structs.ReadNotification"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Update a notification",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "rt"
        ],
        "summary": "Update a notification",
        "parameters": [
          {
            "type": "string",
            "description": "Notification ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Notification data",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ncobase_realtime_structs.UpdateNotification"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_realtime_structs.ReadNotification"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Delete a notification",
        "produces": [
          "application/json"
        ],
        "tags": [
          "rt"
        ],
        "summary": "Delete a notification",
        "parameters": [
          {
            "type": "string",
            "description": "Notification ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_realtime_structs.ReadNotification"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/rt/notifications/{id}/read": {
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Mark a notification as read",
        "produces": [
          "application/json"
        ],
        "tags": [
          "rt"
        ],
        "summary": "Mark a notification as read",
        "parameters": [
          {
            "type": "string",
            "description": "Notification ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_realtime_structs.ReadNotification"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/rt/notifications/{id}/unread": {
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Mark a notification as unread",
        "produces": [
          "application/json"
        ],
        "tags": [
          "rt"
        ],
        "summary": "Mark a notification as unread",
        "parameters": [
          {
            "type": "string",
            "description": "Notification ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_realtime_structs.ReadNotification"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/rt/ws": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Handles WebSocket connection",
        "tags": [
          "rt"
        ],
        "summary": "Handle WebSocket connection",
        "responses": {}
      }
    },
    "/sessions": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "List all sessions for the current user",
        "produces": [
          "application/json"
        ],
        "tags": [
          "auth"
        ],
        "summary": "List user sessions",
        "parameters": [
          {
            "type": "string",
            "description": "Cursor for pagination",
            "name": "cursor",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Number of items to return",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Direction of pagination",
            "name": "direction",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Filter by active status",
            "name": "is_active",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ncobase_auth_structs.ReadSession"
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/sessions/deactivate-all": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Deactivate all sessions for the current user (logout from all devices)",
        "produces": [
          "application/json"
        ],
        "tags": [
          "auth"
        ],
        "summary": "Deactivate all sessions",
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/sessions/{session_id}": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Retrieve a specific session by ID",
        "produces": [
          "application/json"
        ],
        "tags": [
          "auth"
        ],
        "summary": "Get session",
        "parameters": [
          {
            "type": "string",
            "description": "Session ID",
            "name": "session_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_auth_structs.ReadSession"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Delete a specific session (logout from device)",
        "produces": [
          "application/json"
        ],
        "tags": [
          "auth"
        ],
        "summary": "Delete session",
        "parameters": [
          {
            "type": "string",
            "description": "Session ID",
            "name": "session_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/sys/activities": {
      "get": {
        "description": "Lists activities.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Activity"
        ],
        "summary": "List activities",
        "parameters": [
          {
            "type": "string",
            "description": "Cursor for pagination",
            "name": "cursor",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Direction for pagination (default: forward)",
            "name": "direction",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Number of activities to retrieve (default: 20, max: 100)",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Number of activities to skip (default: 0)",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Unix timestamp to filter activities created after (default: 0)",
            "name": "from_date",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Unix timestamp to filter activities created before (default: 0)",
            "name": "to_date",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ncobase_access_structs.ActivityDocument"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/gin.H"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/gin.H"
            }
          }
        }
      }
    },
    "/sys/activity": {
      "post": {
        "description": "Logs a new activity.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Activity"
        ],
        "summary": "Log a new activity",
        "parameters": [
          {
            "description": "Activity details",
            "name": "activity",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ncobase_access_structs.CreateActivityRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ncobase_access_structs.Activity"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/gin.H"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/gin.H"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/gin.H"
            }
          }
        }
      }
    },
    "/sys/activity/search": {
      "get": {
        "description": "Performs full-text search on activities.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Activity"
        ],
        "summary": "Perform full-text search on activities",
        "parameters": [
          {
            "type": "string",
            "description": "Search query",
            "name": "query",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Unix timestamp to filter activities created after (default: 0)",
            "name": "from",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Number of activities to retrieve (default: 10, max: 100)",
            "name": "size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ncobase_access_structs.ActivityDocument"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/gin.H"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/gin.H"
            }
          }
        }
      }
    },
    "/sys/activity/user/{username}": {
      "get": {
        "description": "Retrieves activities for a specific user.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Activity"
        ],
        "summary": "Retrieve activities for a specific user",
        "parameters": [
          {
            "type": "string",
            "description": "Username of the user",
            "name": "username",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Number of activities to retrieve (default: 10, max: 100)",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Number of activities to skip (default: 0)",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Unix timestamp to filter activities created after (default: 0)",
            "name": "from_date",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Unix timestamp to filter activities created before (default: 0)",
            "name": "to_date",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ncobase_access_structs.ActivityDocument"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/gin.H"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/gin.H"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/gin.H"
            }
          }
        }
      }
    },
    "/sys/activity/{id}": {
      "get": {
        "description": "Retrieves an activity by its ID.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Activity"
        ],
        "summary": "Retrieve an activity by ID",
        "parameters": [
          {
            "type": "string",
            "description": "Activity ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ncobase_access_structs.Activity"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/gin.H"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/gin.H"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/gin.H"
            }
          }
        }
      }
    },
    "/sys/dictionaries/batch": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Retrieve multiple dictionaries by their slugs.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Batch get dictionaries",
        "parameters": [
          {
            "description": "Array of dictionary slugs",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/ncobase_system_structs.ReadDictionary"
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/sys/dictionaries/options/{slug}": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Retrieve dictionary options formatted for frontend select components.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Get dictionary enum options",
        "parameters": [
          {
            "type": "string",
            "description": "Dictionary slug",
            "name": "slug",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "additionalProperties": true
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/sys/dictionaries/slug/{slug}": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Retrieve a dictionary by its slug.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Get dictionary by slug",
        "parameters": [
          {
            "type": "string",
            "description": "Dictionary slug",
            "name": "slug",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_system_structs.ReadDictionary"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/sys/dictionaries/validate/{slug}": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Check if a value exists in a dictionary enum.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Validate enum value",
        "parameters": [
          {
            "type": "string",
            "description": "Dictionary slug",
            "name": "slug",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Value to validate",
            "name": "value",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "boolean"
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/sys/dictionarys": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Retrieve a list or tree structure of dictionarys.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "List dictionarys",
        "parameters": [
          {
            "type": "string",
            "name": "cursor",
            "in": "query"
          },
          {
            "type": "string",
            "name": "direction",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "name": "type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ncobase_system_structs.ReadDictionary"
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Update an existing dictionary.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Update dictionary",
        "parameters": [
          {
            "description": "UpdateDictionaryBody object",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ncobase_system_structs.UpdateDictionaryBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_system_structs.ReadDictionary"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Create a new dictionary.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Create dictionary",
        "parameters": [
          {
            "description": "DictionaryBody object",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ncobase_system_structs.DictionaryBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_system_structs.ReadDictionary"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/sys/dictionarys/{slug}": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Retrieve a dictionary by ID or slug.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Get dictionary",
        "parameters": [
          {
            "type": "string",
            "description": "Dictionary ID or slug",
            "name": "slug",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "dictionary",
            "in": "query"
          },
          {
            "type": "string",
            "name": "type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_system_structs.ReadDictionary"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Delete a dictionary by ID or slug.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Delete dictionary",
        "parameters": [
          {
            "type": "string",
            "description": "Dictionary ID or slug",
            "name": "slug",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/sys/employees": {
      "get": {
        "description": "List employees with filtering and pagination",
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "List employees",
        "parameters": [
          {
            "type": "string",
            "description": "Space ID",
            "name": "space_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Department",
            "name": "department",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Employee status",
            "name": "status",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Employment type",
            "name": "employment_type",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Manager ID",
            "name": "manager_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Cursor for pagination",
            "name": "cursor",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Number of items to return",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Direction of pagination",
            "name": "direction",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ncobase_user_structs.ReadEmployee"
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "post": {
        "description": "Create a new employee record",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Create employee",
        "parameters": [
          {
            "description": "Employee information",
            "name": "employee",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ncobase_user_structs.CreateEmployeeBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_user_structs.ReadEmployee"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/sys/employees/department/{department}": {
      "get": {
        "description": "Retrieve all employees in a specific department",
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Get employees by department",
        "parameters": [
          {
            "type": "string",
            "description": "Department name",
            "name": "department",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ncobase_user_structs.ReadEmployee"
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/sys/employees/manager/{manager_id}": {
      "get": {
        "description": "Retrieve all employees under a specific manager",
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Get employees by manager",
        "parameters": [
          {
            "type": "string",
            "description": "Manager ID",
            "name": "manager_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ncobase_user_structs.ReadEmployee"
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/sys/employees/{user_id}": {
      "get": {
        "description": "Retrieve an employee record by user ID",
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Get employee",
        "parameters": [
          {
            "type": "string",
            "description": "User ID",
            "name": "user_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_user_structs.ReadEmployee"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "put": {
        "description": "Update an existing employee record",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Update employee",
        "parameters": [
          {
            "type": "string",
            "description": "User ID",
            "name": "user_id",
            "in": "path",
            "required": true
          },
          {
            "description": "Employee information to update",
            "name": "employee",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ncobase_user_structs.UpdateEmployeeBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_user_structs.ReadEmployee"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "delete": {
        "description": "Delete an employee record",
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Delete employee",
        "parameters": [
          {
            "type": "string",
            "description": "User ID",
            "name": "user_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/sys/orgs/{orgId}/spaces": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Get all spaces that have a specific group",
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Get group spaces",
        "parameters": [
          {
            "type": "string",
            "description": "Organization ID",
            "name": "orgId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/sys/menus": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Retrieve a list or tree structure of menus.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "List menus",
        "parameters": [
          {
            "type": "boolean",
            "name": "children",
            "in": "query"
          },
          {
            "type": "string",
            "name": "cursor",
            "in": "query"
          },
          {
            "type": "string",
            "name": "direction",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "name": "parent",
            "in": "query"
          },
          {
            "type": "string",
            "name": "perms",
            "in": "query"
          },
          {
            "type": "string",
            "name": "sort_by",
            "in": "query"
          },
          {
            "type": "string",
            "name": "type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ncobase_system_structs.ReadMenu"
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Update an existing menu.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Update menu",
        "parameters": [
          {
            "description": "UpdateMenuBody object",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ncobase_system_structs.UpdateMenuBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_system_structs.ReadMenu"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Create a new menu.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Create menu",
        "parameters": [
          {
            "description": "MenuBody object",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ncobase_system_structs.MenuBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_system_structs.ReadMenu"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/sys/menus/authorized/{user_id}": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Retrieve menus that a user is authorized to access.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Get user authorized menus",
        "parameters": [
          {
            "type": "string",
            "description": "User ID",
            "name": "user_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ncobase_system_structs.ReadMenu"
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/sys/menus/navigation": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Retrieve the system navigation menu orgs organized by type.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Get navigation menus",
        "parameters": [
          {
            "type": "string",
            "default": "order",
            "description": "Sort by field (order, created_at, name)",
            "name": "sort_by",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_system_structs.NavigationMenus"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/sys/menus/reorder": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Reorder a set of sibling menus.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Reorder menus",
        "parameters": [
          {
            "description": "Array of menu IDs in desired order",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/sys/menus/slug/{slug}": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Retrieve a menu by its slug.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Get menu by slug",
        "parameters": [
          {
            "type": "string",
            "description": "Menu slug",
            "name": "slug",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_system_structs.ReadMenu"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/sys/menus/tree": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Retrieve the menu tree structure.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Get menu tree",
        "parameters": [
          {
            "type": "boolean",
            "name": "children",
            "in": "query"
          },
          {
            "type": "string",
            "name": "menu",
            "in": "query"
          },
          {
            "type": "string",
            "name": "parent",
            "in": "query"
          },
          {
            "type": "string",
            "name": "sort_by",
            "in": "query"
          },
          {
            "type": "string",
            "name": "type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ncobase_system_structs.ReadMenu"
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/sys/menus/{id}/move": {
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Move a menu to a new parent and/or change its order.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Move menu",
        "parameters": [
          {
            "type": "string",
            "description": "Menu ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "MoveMenuParams object",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_system_structs.ReadMenu"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/sys/menus/{id}/{action}": {
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Toggle menu status with specified action.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Toggle menu status",
        "parameters": [
          {
            "type": "string",
            "description": "Menu ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Action (enable/disable/show/hide)",
            "name": "action",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_system_structs.ReadMenu"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/sys/menus/{slug}": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Retrieve a menu by ID or slug.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Get menu",
        "parameters": [
          {
            "type": "string",
            "description": "Menu ID or slug",
            "name": "slug",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "name": "children",
            "in": "query"
          },
          {
            "type": "string",
            "name": "menu",
            "in": "query"
          },
          {
            "type": "string",
            "name": "parent",
            "in": "query"
          },
          {
            "type": "string",
            "name": "sort_by",
            "in": "query"
          },
          {
            "type": "string",
            "name": "type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_system_structs.ReadMenu"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Delete a menu by ID or slug.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Delete menu",
        "parameters": [
          {
            "type": "string",
            "description": "Menu ID or slug",
            "name": "slug",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/sys/options": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Retrieve a list of options.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "List options",
        "parameters": [
          {
            "type": "boolean",
            "name": "autoload",
            "in": "query"
          },
          {
            "type": "string",
            "name": "cursor",
            "in": "query"
          },
          {
            "type": "string",
            "name": "direction",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "name": "prefix",
            "in": "query"
          },
          {
            "type": "string",
            "name": "sort_by",
            "in": "query"
          },
          {
            "type": "string",
            "name": "type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ncobase_system_structs.ReadOption"
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Update an existing option.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Update option",
        "parameters": [
          {
            "description": "UpdateOptionBody object",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ncobase_system_structs.UpdateOptionBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_system_structs.ReadOption"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Create a new option.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Create option",
        "parameters": [
          {
            "description": "OptionBody object",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ncobase_system_structs.OptionBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_system_structs.ReadOption"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/sys/options/batch": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Retrieve multiple options by their names.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Batch get options",
        "parameters": [
          {
            "description": "Array of option names",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/ncobase_system_structs.ReadOption"
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/sys/options/name/{name}": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Retrieve an option by its name.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Get option by name",
        "parameters": [
          {
            "type": "string",
            "description": "Option name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_system_structs.ReadOption"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/sys/options/prefix": {
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Delete options matching a prefix pattern.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Delete options by prefix",
        "parameters": [
          {
            "type": "string",
            "description": "Name prefix pattern",
            "name": "prefix",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/sys/options/type/{type}": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Retrieve options by their type.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Get options by type",
        "parameters": [
          {
            "type": "string",
            "description": "Option type",
            "name": "type",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ncobase_system_structs.ReadOption"
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/sys/options/{option}": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Retrieve an option by ID or name.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Get option",
        "parameters": [
          {
            "type": "string",
            "description": "Option ID or name",
            "name": "option",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "option",
            "in": "query"
          },
          {
            "type": "string",
            "name": "sort_by",
            "in": "query"
          },
          {
            "type": "string",
            "name": "type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_system_structs.ReadOption"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Delete an option by ID or name.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Delete option",
        "parameters": [
          {
            "type": "string",
            "description": "Option ID or name",
            "name": "option",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/sys/permissions": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Retrieve a list of permissions based on the provided query parameters",
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "List all permissions",
        "parameters": [
          {
            "type": "string",
            "name": "cursor",
            "in": "query"
          },
          {
            "type": "string",
            "name": "direction",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ncobase_access_structs.ReadPermission"
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Create a new permission with the provided data",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Create a new permission",
        "parameters": [
          {
            "description": "Permission data",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ncobase_access_structs.CreatePermissionBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_access_structs.ReadPermission"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/sys/permissions/{slug}": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Retrieve a permission by its slug or ID",
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Get a permission by slug or ID",
        "parameters": [
          {
            "type": "string",
            "description": "Permission slug or ID",
            "name": "slug",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_access_structs.ReadPermission"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Update an existing permission with the provided data",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Update an existing permission",
        "parameters": [
          {
            "type": "string",
            "description": "Permission slug or ID",
            "name": "slug",
            "in": "path",
            "required": true
          },
          {
            "description": "Permission data",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_access_structs.ReadPermission"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Delete a permission by its slug or ID",
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Delete a permission by slug or ID",
        "parameters": [
          {
            "type": "string",
            "description": "Permission slug or ID",
            "name": "slug",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_access_structs.ReadPermission"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/sys/policies": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Retrieve a list of Casbin rules.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "List Casbin rules",
        "parameters": [
          {
            "type": "string",
            "name": "cursor",
            "in": "query"
          },
          {
            "type": "string",
            "name": "direction",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "name": "p_type",
            "in": "query"
          },
          {
            "type": "string",
            "name": "v0",
            "in": "query"
          },
          {
            "type": "string",
            "name": "v1",
            "in": "query"
          },
          {
            "type": "string",
            "name": "v2",
            "in": "query"
          },
          {
            "type": "string",
            "name": "v3",
            "in": "query"
          },
          {
            "type": "string",
            "name": "v4",
            "in": "query"
          },
          {
            "type": "string",
            "name": "v5",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ncobase_access_structs.CasbinRuleBody"
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Create a new Casbin rule.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Create Casbin rule",
        "parameters": [
          {
            "description": "CasbinRuleBody object",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ncobase_access_structs.CasbinRuleBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_access_structs.ReadCasbinRule"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/sys/policies/{id}": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Retrieve details of a Casbin rule.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Get Casbin rule",
        "parameters": [
          {
            "type": "string",
            "description": "Casbin rule ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_access_structs.ReadCasbinRule"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Update an existing Casbin rule, either fully or partially.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Update Casbin rule",
        "parameters": [
          {
            "type": "string",
            "description": "Casbin rule ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "CasbinRuleBody object",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ncobase_access_structs.CasbinRuleBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_access_structs.ReadCasbinRule"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Delete an existing Casbin rule.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Delete Casbin rule",
        "parameters": [
          {
            "type": "string",
            "description": "Casbin rule ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/sys/roles": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Retrieve a list of roles based on the provided query parameters",
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "List all roles",
        "parameters": [
          {
            "type": "string",
            "name": "cursor",
            "in": "query"
          },
          {
            "type": "string",
            "name": "direction",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ncobase_access_structs.ReadRole"
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Create a new role with the provided data",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Create a new role",
        "parameters": [
          {
            "description": "Role data",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ncobase_access_structs.CreateRoleBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_access_structs.ReadRole"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/sys/roles/{slug}": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Retrieve a role by its slug or ID",
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Get a role by slug or ID",
        "parameters": [
          {
            "type": "string",
            "description": "Role slug or ID",
            "name": "slug",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_access_structs.ReadRole"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Update an existing role with the provided data",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Update an existing role",
        "parameters": [
          {
            "type": "string",
            "description": "Role slug or ID",
            "name": "slug",
            "in": "path",
            "required": true
          },
          {
            "description": "Role data",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_access_structs.ReadRole"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Delete a role by its slug or ID",
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Delete a role by slug or ID",
        "parameters": [
          {
            "type": "string",
            "description": "Role slug or ID",
            "name": "slug",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_access_structs.ReadRole"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/sys/roles/{slug}/permissions": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Retrieve a list of permissions associated with a role by its ID",
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "List permissions for a role",
        "parameters": [
          {
            "type": "string",
            "description": "Role ID",
            "name": "slug",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/sys/spaces": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Retrieve a list of spaces.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "List spaces",
        "parameters": [
          {
            "type": "string",
            "name": "cursor",
            "in": "query"
          },
          {
            "type": "string",
            "name": "direction",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "name": "user",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ncobase_space_structs.ReadSpace"
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Update the space information.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Update space",
        "parameters": [
          {
            "type": "string",
            "description": "Space ID",
            "name": "slug",
            "in": "path",
            "required": true
          },
          {
            "description": "UpdateSpaceBody object",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ncobase_space_structs.UpdateSpaceBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_space_structs.ReadSpace"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Create a new space.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Create space",
        "parameters": [
          {
            "description": "CreateSpaceBody object",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ncobase_space_structs.CreateSpaceBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_space_structs.ReadSpace"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/sys/spaces/billing": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Retrieve a list of space billing records",
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "List space billing",
        "parameters": [
          {
            "enum": [
              "monthly",
              "yearly",
              "one_time",
              "usage_based"
            ],
            "type": "string",
            "x-enum-varnames": [
              "PeriodMonthly",
              "PeriodYearly",
              "PeriodOneTime",
              "PeriodUsage"
            ],
            "name": "billing_period",
            "in": "query"
          },
          {
            "type": "string",
            "name": "cursor",
            "in": "query"
          },
          {
            "type": "string",
            "name": "direction",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "from_date",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "is_overdue",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "limit",
            "in": "query"
          },
          {
            "enum": [
              "pending",
              "paid",
              "overdue",
              "cancelled",
              "refunded"
            ],
            "type": "string",
            "x-enum-varnames": [
              "StatusPending",
              "StatusPaid",
              "StatusOverdue",
              "StatusCancelled",
              "StatusRefunded"
            ],
            "name": "status",
            "in": "query"
          },
          {
            "type": "string",
            "name": "space_id",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "to_date",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ncobase_space_structs.ReadSpaceBilling"
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Create a new space billing record",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Create space billing",
        "parameters": [
          {
            "description": "Billing record",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ncobase_space_structs.CreateSpaceBillingBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_space_structs.ReadSpaceBilling"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/sys/spaces/billing/payment": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Process payment for a billing record",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Process payment",
        "parameters": [
          {
            "description": "Payment request",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ncobase_space_structs.PaymentRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/sys/spaces/billing/{id}": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Retrieve a space billing record by ID",
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Get space billing",
        "parameters": [
          {
            "type": "string",
            "description": "Billing ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_space_structs.ReadSpaceBilling"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Update an existing space billing record",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Update space billing",
        "parameters": [
          {
            "type": "string",
            "description": "Billing ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Update data",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_space_structs.ReadSpaceBilling"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Delete a space billing record",
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Delete space billing",
        "parameters": [
          {
            "type": "string",
            "description": "Billing ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/sys/spaces/quotas": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Retrieve a list of space quotas",
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "List space quotas",
        "parameters": [
          {
            "type": "string",
            "name": "cursor",
            "in": "query"
          },
          {
            "type": "string",
            "name": "direction",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "enabled",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "limit",
            "in": "query"
          },
          {
            "enum": [
              "users",
              "storage",
              "api_calls",
              "projects",
              "custom"
            ],
            "type": "string",
            "x-enum-varnames": [
              "QuotaTypeUser",
              "QuotaTypeStorage",
              "QuotaTypeAPI",
              "QuotaTypeProject",
              "QuotaTypeCustom"
            ],
            "name": "quota_type",
            "in": "query"
          },
          {
            "type": "string",
            "name": "space_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ncobase_space_structs.ReadSpaceQuota"
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Create a new space quota configuration",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Create space quota",
        "parameters": [
          {
            "description": "Quota configuration",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ncobase_space_structs.CreateSpaceQuotaBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_space_structs.ReadSpaceQuota"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/sys/spaces/quotas/check": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Check if space can use additional quota",
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Check quota limit",
        "parameters": [
          {
            "type": "string",
            "description": "Space ID",
            "name": "spaceId",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Quota Type",
            "name": "quota_type",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "description": "Requested Amount",
            "name": "amount",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "boolean"
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/sys/spaces/quotas/usage": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Update the current usage of a quota",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Update quota usage",
        "parameters": [
          {
            "description": "Usage update request",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ncobase_space_structs.QuotaUsageRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/sys/spaces/quotas/{id}": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Retrieve a space quota by ID",
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Get space quota",
        "parameters": [
          {
            "type": "string",
            "description": "Quota ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_space_structs.ReadSpaceQuota"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Update an existing space quota configuration",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Update space quota",
        "parameters": [
          {
            "type": "string",
            "description": "Quota ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Update data",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_space_structs.ReadSpaceQuota"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Delete a space quota configuration",
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Delete space quota",
        "parameters": [
          {
            "type": "string",
            "description": "Quota ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/sys/spaces/settings": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Retrieve a list of space settings",
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "List space settings",
        "parameters": [
          {
            "type": "string",
            "name": "category",
            "in": "query"
          },
          {
            "type": "string",
            "name": "cursor",
            "in": "query"
          },
          {
            "type": "string",
            "name": "direction",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "is_public",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "is_required",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "limit",
            "in": "query"
          },
          {
            "enum": [
              "system",
              "space",
              "user",
              "feature"
            ],
            "type": "string",
            "x-enum-varnames": [
              "ScopeSystem",
              "Scope",
              "ScopeUser",
              "ScopeFeature"
            ],
            "name": "scope",
            "in": "query"
          },
          {
            "type": "string",
            "name": "space_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ncobase_space_structs.ReadSpaceSetting"
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Create a new space setting configuration",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Create space setting",
        "parameters": [
          {
            "description": "Setting configuration",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ncobase_space_structs.CreateSpaceSettingBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_space_structs.ReadSpaceSetting"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/sys/spaces/settings/bulk": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Update multiple space settings at once",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Bulk update space settings",
        "parameters": [
          {
            "description": "Bulk update request",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ncobase_space_structs.BulkUpdateSettingsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/sys/spaces/settings/{id}": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Retrieve a space setting by ID",
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Get space setting",
        "parameters": [
          {
            "type": "string",
            "description": "Setting ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_space_structs.ReadSpaceSetting"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Update an existing space setting configuration",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Update space setting",
        "parameters": [
          {
            "type": "string",
            "description": "Setting ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Update data",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_space_structs.ReadSpaceSetting"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Delete a space setting configuration",
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Delete space setting",
        "parameters": [
          {
            "type": "string",
            "description": "Setting ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/sys/spaces/{spaceId}": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Retrieve information about a specific space.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Get space",
        "parameters": [
          {
            "type": "string",
            "description": "Space ID",
            "name": "spaceId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_space_structs.ReadSpace"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Delete a specific space.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Delete space",
        "parameters": [
          {
            "type": "string",
            "description": "Space ID",
            "name": "spaceId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/sys/spaces/{spaceId}/attachments": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Retrieve a list of attachments associated",
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "List space attachments",
        "parameters": [
          {
            "type": "string",
            "description": "Space ID",
            "name": "spaceId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/sys/spaces/{spaceId}/billing/invoice": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Generate a new invoice for a space",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Generate invoice",
        "parameters": [
          {
            "type": "string",
            "description": "Space ID",
            "name": "spaceId",
            "in": "path",
            "required": true
          },
          {
            "description": "Invoice generation request",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_space_structs.ReadSpaceBilling"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/sys/spaces/{spaceId}/billing/overdue": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Retrieve overdue billing records for a space",
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Get overdue billing",
        "parameters": [
          {
            "type": "string",
            "description": "Space ID",
            "name": "spaceId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ncobase_space_structs.ReadSpaceBilling"
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/sys/spaces/{spaceId}/billing/summary": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Retrieve billing summary for a space",
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Get billing summary",
        "parameters": [
          {
            "type": "string",
            "description": "Space ID",
            "name": "spaceId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_space_structs.BillingSummary"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/sys/spaces/{spaceId}/dictionaries": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Get all dictionaries for a space",
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Get space dictionaries",
        "parameters": [
          {
            "type": "string",
            "description": "Space ID",
            "name": "spaceId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Add a dictionary to a space",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Add dictionary to space",
        "parameters": [
          {
            "type": "string",
            "description": "Space ID",
            "name": "spaceId",
            "in": "path",
            "required": true
          },
          {
            "description": "AddDictionaryToSpaceRequest object",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ncobase_space_structs.AddDictionaryToSpaceRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_space_structs.SpaceDictionary"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/sys/spaces/{spaceId}/dictionaries/{dictionaryId}": {
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Remove a dictionary from a space",
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Remove dictionary from space",
        "parameters": [
          {
            "type": "string",
            "description": "Space ID",
            "name": "spaceId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Dictionary ID",
            "name": "dictionaryId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/sys/spaces/{spaceId}/dictionaries/{dictionaryId}/check": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Check if a dictionary belongs to a space",
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Check dictionary in space",
        "parameters": [
          {
            "type": "string",
            "description": "Space ID",
            "name": "spaceId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Dictionary ID",
            "name": "dictionaryId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "boolean"
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/sys/spaces/{spaceId}/orgs": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Get all orgs belonging to a specific space",
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Get space orgs",
        "parameters": [
          {
            "type": "string",
            "description": "Space ID",
            "name": "spaceId",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "name": "children",
            "in": "query"
          },
          {
            "type": "string",
            "name": "cursor",
            "in": "query"
          },
          {
            "type": "string",
            "name": "direction",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "name": "parent",
            "in": "query"
          },
          {
            "type": "string",
            "name": "sort_by",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ncobase_space_structs.ReadOrganization"
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Add a organization to a specific space",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Add group to space",
        "parameters": [
          {
            "type": "string",
            "description": "Space ID",
            "name": "spaceId",
            "in": "path",
            "required": true
          },
          {
            "description": "AddSpaceOrganizationRequest object",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ncobase_space_structs.AddSpaceOrganizationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_space_structs.SpaceOrganizationRelation"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/sys/spaces/{spaceId}/orgs/{orgId}": {
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Remove a organization from a specific space",
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Remove group from space",
        "parameters": [
          {
            "type": "string",
            "description": "Space ID",
            "name": "spaceId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Organization ID",
            "name": "orgId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/sys/spaces/{spaceId}/orgs/{orgId}/check": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Check if a organization belongs to a specific space",
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Check if group is in space",
        "parameters": [
          {
            "type": "string",
            "description": "Space ID",
            "name": "spaceId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Organization ID",
            "name": "orgId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "boolean"
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/sys/spaces/{spaceId}/menu": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Retrieve the menu associated",
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Get space menu",
        "parameters": [
          {
            "type": "string",
            "description": "Space ID",
            "name": "spaceId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/sys/spaces/{spaceId}/menus": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Get all menus for a space",
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Get space menus",
        "parameters": [
          {
            "type": "string",
            "description": "Space ID",
            "name": "spaceId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Add a menu to a space",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Add menu to space",
        "parameters": [
          {
            "type": "string",
            "description": "Space ID",
            "name": "spaceId",
            "in": "path",
            "required": true
          },
          {
            "description": "AddMenuToSpaceRequest object",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ncobase_space_structs.AddMenuToSpaceRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_space_structs.SpaceMenu"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/sys/spaces/{spaceId}/menus/{menuId}": {
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Remove a menu from a space",
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Remove menu from space",
        "parameters": [
          {
            "type": "string",
            "description": "Space ID",
            "name": "spaceId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Menu ID",
            "name": "menuId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/sys/spaces/{spaceId}/menus/{menuId}/check": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Check if a menu belongs to a space",
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Check menu in space",
        "parameters": [
          {
            "type": "string",
            "description": "Space ID",
            "name": "spaceId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Menu ID",
            "name": "menuId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "boolean"
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/sys/spaces/{spaceId}/options": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Get all options for a space",
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Get space option",
        "parameters": [
          {
            "type": "string",
            "description": "Space ID",
            "name": "spaceId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Add options to a space",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Add options to space",
        "parameters": [
          {
            "type": "string",
            "description": "Space ID",
            "name": "spaceId",
            "in": "path",
            "required": true
          },
          {
            "description": "AddOptionsToSpaceRequest object",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ncobase_space_structs.AddOptionsToSpaceRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_space_structs.SpaceOption"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/sys/spaces/{spaceId}/options/{optionsId}": {
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Remove options from a space",
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Remove options from space",
        "parameters": [
          {
            "type": "string",
            "description": "Space ID",
            "name": "spaceId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Options ID",
            "name": "optionsId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/sys/spaces/{spaceId}/options/{optionsId}/check": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Check if options belong to a space",
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Check options in space",
        "parameters": [
          {
            "type": "string",
            "description": "Space ID",
            "name": "spaceId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Options ID",
            "name": "optionsId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "boolean"
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/sys/spaces/{spaceId}/quotas": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Retrieve all quotas for a space",
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Get space quota summary",
        "parameters": [
          {
            "type": "string",
            "description": "Space ID",
            "name": "spaceId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ncobase_space_structs.ReadSpaceQuota"
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/sys/spaces/{spaceId}/roles": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Retrieve a list of roles associated",
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "List space roles",
        "parameters": [
          {
            "type": "string",
            "description": "Space ID",
            "name": "spaceId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/sys/spaces/{spaceId}/roles/{roleId}/users": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Get all users that have a specific role in a space",
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Get space users by role",
        "parameters": [
          {
            "type": "string",
            "description": "Space ID",
            "name": "spaceId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Role ID",
            "name": "roleId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_space_structs.SpaceRoleUsersResponse"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/sys/spaces/{spaceId}/setting": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Retrieve the settings associated",
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Get space setting",
        "parameters": [
          {
            "type": "string",
            "description": "Space ID",
            "name": "spaceId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/sys/spaces/{spaceId}/settings": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Retrieve all settings for a specific space",
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Get all space settings",
        "parameters": [
          {
            "type": "string",
            "description": "Space ID",
            "name": "spaceId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/sys/spaces/{spaceId}/settings/public": {
      "get": {
        "description": "Retrieve public settings for a specific space",
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Get public space settings",
        "parameters": [
          {
            "type": "string",
            "description": "Space ID",
            "name": "spaceId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/sys/spaces/{spaceId}/settings/{key}": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Retrieve a specific setting for a space",
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Get specific space setting",
        "parameters": [
          {
            "type": "string",
            "description": "Space ID",
            "name": "spaceId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Setting Key",
            "name": "key",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Set a specific setting for a space",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Set space setting",
        "parameters": [
          {
            "type": "string",
            "description": "Space ID",
            "name": "spaceId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Setting Key",
            "name": "key",
            "in": "path",
            "required": true
          },
          {
            "description": "Setting value",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/sys/spaces/{spaceId}/users": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "List all users in a space with their roles",
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "List space users",
        "parameters": [
          {
            "type": "string",
            "description": "Space ID",
            "name": "spaceId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "cursor",
            "in": "query"
          },
          {
            "type": "string",
            "name": "direction",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "name": "role_id",
            "in": "query"
          },
          {
            "type": "string",
            "name": "sort_by",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_space_structs.SpaceUsersListResponse"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/sys/spaces/{spaceId}/users/roles": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Add a user to a space",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Add user to space role",
        "parameters": [
          {
            "type": "string",
            "description": "Space ID",
            "name": "spaceId",
            "in": "path",
            "required": true
          },
          {
            "description": "AddUserToSpaceRoleRequest object",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ncobase_space_structs.AddUserToSpaceRoleRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_space_structs.UserSpaceRoleResponse"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/sys/spaces/{spaceId}/users/roles/bulk": {
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Bulk update multiple user space roles",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Bulk update user space roles",
        "parameters": [
          {
            "type": "string",
            "description": "Space ID",
            "name": "spaceId",
            "in": "path",
            "required": true
          },
          {
            "description": "BulkUpdateUserSpaceRolesRequest object",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ncobase_space_structs.BulkUpdateUserSpaceRolesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_space_structs.BulkUpdateResponse"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/sys/spaces/{spaceId}/users/{userId}/roles": {
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Update a user's role in a space",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Update user space role",
        "parameters": [
          {
            "type": "string",
            "description": "Space ID",
            "name": "spaceId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "description": "UpdateUserSpaceRoleRequest object",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ncobase_space_structs.UpdateUserSpaceRoleRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_space_structs.UserSpaceRoleResponse"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/sys/spaces/{spaceId}/users/{userId}/roles/{roleId}": {
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Remove a user from a specific role in a space",
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Remove user from space role",
        "parameters": [
          {
            "type": "string",
            "description": "Space ID",
            "name": "spaceId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Role ID",
            "name": "roleId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/sys/spaces/{spaceId}/users/{username}/roles": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Get all roles a user has in a specific space",
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Get user space roles",
        "parameters": [
          {
            "type": "string",
            "description": "Space ID",
            "name": "spaceId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID or username",
            "name": "username",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_space_structs.UserSpaceRolesResponse"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/sys/spaces/{spaceId}/users/{username}/roles/{roleId}/check": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Check if a user has a specific role in a space",
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Check user space role",
        "parameters": [
          {
            "type": "string",
            "description": "Space ID",
            "name": "spaceId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "User ID or username",
            "name": "username",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Role ID",
            "name": "roleId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "boolean"
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/sys/users": {
      "get": {
        "description": "List all users.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "List users",
        "parameters": [
          {
            "type": "string",
            "description": "Cursor for pagination",
            "name": "cursor",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Number of items to return",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Direction of pagination (forward or backward)",
            "name": "direction",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ncobase_user_structs.ReadUser"
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "post": {
        "description": "Create a new user.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Create user",
        "parameters": [
          {
            "description": "User information",
            "name": "user",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ncobase_user_structs.UserBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_user_structs.ReadUser"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/sys/users/api-keys": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Generate a new API key for the current user",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Generate API key",
        "parameters": [
          {
            "description": "API key request",
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ncobase_user_structs.CreateApiKeyRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_user_structs.ApiKey"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/sys/users/api-keys/{id}": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Retrieve an API key by its ID",
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Get API key",
        "parameters": [
          {
            "type": "string",
            "description": "API key ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_user_structs.ApiKey"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Delete an API key by its ID",
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Delete API key",
        "parameters": [
          {
            "type": "string",
            "description": "API key ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/sys/users/by-email/{email}": {
      "get": {
        "description": "Retrieve information about a specific user by email.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Get user by email",
        "parameters": [
          {
            "type": "string",
            "description": "Email",
            "name": "email",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_user_structs.ReadUser"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/sys/users/by-username/{username}": {
      "get": {
        "description": "Retrieve information about a specific user by username.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Get user by username",
        "parameters": [
          {
            "type": "string",
            "description": "Username",
            "name": "username",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_user_structs.ReadUser"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/sys/users/filter": {
      "get": {
        "description": "Filter users by search query, role, and status.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Filter users",
        "parameters": [
          {
            "type": "string",
            "description": "Search query for name, email or username",
            "name": "search",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Role filter",
            "name": "role",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Status filter",
            "name": "status",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sort by field",
            "name": "sortBy",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ncobase_user_structs.ReadUser"
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/sys/users/me": {
      "get": {
        "description": "Retrieve information about the current authenticated user.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Get current user",
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_user_structs.ReadUser"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/sys/users/me/api-keys": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Retrieve all API keys for the current user",
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Get my API keys",
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ncobase_user_structs.ApiKey"
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/sys/users/reset-password": {
      "post": {
        "description": "Request a password reset link to be sent to the user's email.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Reset user password",
        "parameters": [
          {
            "description": "Password reset request",
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ncobase_user_structs.PasswordResetRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/sys/users/{username}": {
      "get": {
        "description": "Retrieve information about a specific user.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Get user",
        "parameters": [
          {
            "type": "string",
            "description": "Username",
            "name": "username",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_user_structs.ReadUser"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "put": {
        "description": "Update an existing user.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Update user",
        "parameters": [
          {
            "type": "string",
            "description": "Username",
            "name": "username",
            "in": "path",
            "required": true
          },
          {
            "description": "User information to update",
            "name": "user",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_user_structs.ReadUser"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "delete": {
        "description": "Delete an existing user.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Delete user",
        "parameters": [
          {
            "type": "string",
            "description": "Username",
            "name": "username",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/sys/users/{username}/api-keys": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Retrieve all API keys for a specific user",
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Get user API keys",
        "parameters": [
          {
            "type": "string",
            "description": "Username",
            "name": "username",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ncobase_user_structs.ApiKey"
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/sys/users/{username}/meshes": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Retrieve aggregated user information",
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Get user meshes",
        "parameters": [
          {
            "type": "string",
            "description": "Username",
            "name": "username",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "description": "Include API keys",
            "name": "include_api_keys",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_user_structs.UserMeshes"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Update aggregated user information",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Update user meshes",
        "parameters": [
          {
            "type": "string",
            "description": "Username",
            "name": "username",
            "in": "path",
            "required": true
          },
          {
            "description": "User meshes data",
            "name": "meshes",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ncobase_user_structs.UserMeshes"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_user_structs.UserMeshes"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/sys/users/{username}/password": {
      "put": {
        "description": "Update an existing user's password.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Update user password",
        "parameters": [
          {
            "type": "string",
            "description": "Username",
            "name": "username",
            "in": "path",
            "required": true
          },
          {
            "description": "Password information",
            "name": "password",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ncobase_user_structs.UserPassword"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/sys/users/{username}/profile": {
      "get": {
        "description": "Retrieve information about a specific user profile.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Get user profile",
        "parameters": [
          {
            "type": "string",
            "description": "Username",
            "name": "username",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "put": {
        "description": "Update an existing user profile.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Update user profile",
        "parameters": [
          {
            "type": "string",
            "description": "Username",
            "name": "username",
            "in": "path",
            "required": true
          },
          {
            "description": "User profile information to update",
            "name": "user_profile",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/sys/users/{username}/status": {
      "patch": {
        "description": "Update a user's status (active, inactive, pending).",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Update user status",
        "parameters": [
          {
            "type": "string",
            "description": "Username",
            "name": "username",
            "in": "path",
            "required": true
          },
          {
            "description": "Status information",
            "name": "status",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "integer"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_user_structs.ReadUser"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/sys/users/{username}/space": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Retrieve the space associated with the specified user.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "sys"
        ],
        "summary": "Get user owned space",
        "parameters": [
          {
            "type": "string",
            "description": "Username",
            "name": "username",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_space_structs.ReadSpace"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/tbp/endpoints": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Retrieve a list of endpoints based on the provided query parameters",
        "produces": [
          "application/json"
        ],
        "tags": [
          "proxy"
        ],
        "summary": "List all endpoints",
        "parameters": [
          {
            "type": "string",
            "name": "cursor",
            "in": "query"
          },
          {
            "type": "string",
            "name": "direction",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "disabled",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "name": "name",
            "in": "query"
          },
          {
            "type": "string",
            "name": "protocol",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ncobase_proxy_structs.ReadEndpoint"
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Create a new third-party API endpoint",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "proxy"
        ],
        "summary": "Create API endpoint",
        "parameters": [
          {
            "description": "Endpoint data",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ncobase_proxy_structs.CreateEndpointBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_proxy_structs.ReadEndpoint"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/tbp/endpoints/{id}": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Retrieve an endpoint by its ID",
        "produces": [
          "application/json"
        ],
        "tags": [
          "proxy"
        ],
        "summary": "Get an endpoint by ID",
        "parameters": [
          {
            "type": "string",
            "description": "Endpoint ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_proxy_structs.ReadEndpoint"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Update an existing endpoint with the provided data",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "proxy"
        ],
        "summary": "Update an existing endpoint",
        "parameters": [
          {
            "type": "string",
            "description": "Endpoint ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Endpoint data",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_proxy_structs.ReadEndpoint"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Delete an endpoint by its ID",
        "produces": [
          "application/json"
        ],
        "tags": [
          "proxy"
        ],
        "summary": "Delete an endpoint by ID",
        "parameters": [
          {
            "type": "string",
            "description": "Endpoint ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/tbp/routes": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Retrieve a list of routes based on the provided query parameters",
        "produces": [
          "application/json"
        ],
        "tags": [
          "proxy"
        ],
        "summary": "List all routes",
        "parameters": [
          {
            "type": "string",
            "name": "cursor",
            "in": "query"
          },
          {
            "type": "string",
            "name": "direction",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "disabled",
            "in": "query"
          },
          {
            "type": "string",
            "name": "endpoint_id",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "name": "method",
            "in": "query"
          },
          {
            "type": "string",
            "name": "name",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ncobase_proxy_structs.ReadRoute"
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Create a new proxy route for a third-party API endpoint",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "proxy"
        ],
        "summary": "Create API route",
        "parameters": [
          {
            "description": "Route data",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ncobase_proxy_structs.CreateRouteBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_proxy_structs.ReadRoute"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/tbp/routes/{id}": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Retrieve a route by its ID",
        "produces": [
          "application/json"
        ],
        "tags": [
          "proxy"
        ],
        "summary": "Get a route by ID",
        "parameters": [
          {
            "type": "string",
            "description": "Route ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_proxy_structs.ReadRoute"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Update an existing route with the provided data",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "proxy"
        ],
        "summary": "Update an existing route",
        "parameters": [
          {
            "type": "string",
            "description": "Route ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Route data",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_proxy_structs.ReadRoute"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Delete a route by its ID",
        "produces": [
          "application/json"
        ],
        "tags": [
          "proxy"
        ],
        "summary": "Delete a route by ID",
        "parameters": [
          {
            "type": "string",
            "description": "Route ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/tbp/transformers": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Retrieve a list of transformers based on the provided query parameters",
        "produces": [
          "application/json"
        ],
        "tags": [
          "proxy"
        ],
        "summary": "List all transformers",
        "parameters": [
          {
            "type": "string",
            "name": "content_type",
            "in": "query"
          },
          {
            "type": "string",
            "name": "cursor",
            "in": "query"
          },
          {
            "type": "string",
            "name": "direction",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "disabled",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "name": "name",
            "in": "query"
          },
          {
            "type": "string",
            "name": "type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ncobase_proxy_structs.ReadTransformer"
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Create a new data transformer for API requests/responses",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "proxy"
        ],
        "summary": "Create data transformer",
        "parameters": [
          {
            "description": "Transformer data",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ncobase_proxy_structs.CreateTransformerBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_proxy_structs.ReadTransformer"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/tbp/transformers/{id}": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Retrieve a transformer by its ID",
        "produces": [
          "application/json"
        ],
        "tags": [
          "proxy"
        ],
        "summary": "Get a transformer by ID",
        "parameters": [
          {
            "type": "string",
            "description": "Transformer ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_proxy_structs.ReadTransformer"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Update an existing transformer with the provided data",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "proxy"
        ],
        "summary": "Update an existing transformer",
        "parameters": [
          {
            "type": "string",
            "description": "Transformer ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Transformer data",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ncobase_proxy_structs.ReadTransformer"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Delete a transformer by its ID",
        "produces": [
          "application/json"
        ],
        "tags": [
          "proxy"
        ],
        "summary": "Delete a transformer by ID",
        "parameters": [
          {
            "type": "string",
            "description": "Transformer ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    },
    "/token-status": {
      "get": {
        "description": "Get the current token status.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "auth"
        ],
        "summary": "Token status",
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "allOf": [
                  {},
                  {
                    "type": "object",
                    "properties": {
                      "is_authenticated": {
                        "type": "boolean"
                      }
                    }
                  }
                ]
              }
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "gin.H": {
      "type": "object",
      "additionalProperties": {}
    },
    "github_com_ncobase_ncore_net_resp.Exception": {
      "type": "object",
      "properties": {
        "code": {
          "description": "Business code",
          "type": "integer"
        },
        "data": {
          "description": "Response data"
        },
        "errors": {
          "description": "Validation errors"
        },
        "message": {
          "description": "Message",
          "type": "string"
        },
        "status": {
          "description": "HTTP status",
          "type": "integer"
        }
      }
    },
    "github_com_ncobase_ncore_types.JSON": {
      "type": "object",
      "additionalProperties": {}
    },
    "ncobase_access_structs.Activity": {
      "type": "object",
      "properties": {
        "created_at": {
          "type": "integer"
        },
        "details": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "timestamp": {
          "type": "integer"
        },
        "type": {
          "type": "string"
        },
        "updated_at": {
          "type": "integer"
        },
        "user_id": {
          "type": "string"
        }
      }
    },
    "ncobase_access_structs.ActivityDocument": {
      "type": "object",
      "properties": {
        "created_at": {
          "type": "integer"
        },
        "details": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "type": {
          "type": "string"
        },
        "updated_at": {
          "type": "integer"
        },
        "user_id": {
          "type": "string"
        }
      }
    },
    "ncobase_access_structs.CasbinRuleBody": {
      "type": "object",
      "required": [
        "p_type",
        "v0",
        "v1",
        "v2"
      ],
      "properties": {
        "created_by": {
          "type": "string"
        },
        "p_type": {
          "type": "string"
        },
        "updated_by": {
          "type": "string"
        },
        "v0": {
          "type": "string"
        },
        "v1": {
          "type": "string"
        },
        "v2": {
          "type": "string"
        },
        "v3": {
          "type": "string"
        },
        "v4": {
          "type": "string"
        },
        "v5": {
          "type": "string"
        }
      }
    },
    "ncobase_access_structs.CreateActivityRequest": {
      "type": "object",
      "required": [
        "details",
        "type"
      ],
      "properties": {
        "details": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "ncobase_access_structs.CreatePermissionBody": {
      "type": "object",
      "properties": {
        "action": {
          "type": "string"
        },
        "created_by": {
          "type": "string"
        },
        "default": {
          "type": "boolean"
        },
        "description": {
          "type": "string"
        },
        "disabled": {
          "type": "boolean"
        },
        "extras": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "name": {
          "type": "string"
        },
        "subject": {
          "type": "string"
        },
        "updated_by": {
          "type": "string"
        }
      }
    },
    "ncobase_access_structs.CreateRoleBody": {
      "type": "object",
      "properties": {
        "created_by": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "disabled": {
          "type": "boolean"
        },
        "extras": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "name": {
          "type": "string"
        },
        "slug": {
          "type": "string"
        },
        "updated_by": {
          "type": "string"
        }
      }
    },
    "ncobase_access_structs.ReadCasbinRule": {
      "type": "object",
      "properties": {
        "created_at": {
          "type": "integer"
        },
        "created_by": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "p_type": {
          "type": "string"
        },
        "updated_at": {
          "type": "integer"
        },
        "updated_by": {
          "type": "string"
        },
        "v0": {
          "type": "string"
        },
        "v1": {
          "type": "string"
        },
        "v2": {
          "type": "string"
        },
        "v3": {
          "type": "string"
        },
        "v4": {
          "type": "string"
        },
        "v5": {
          "type": "string"
        }
      }
    },
    "ncobase_access_structs.ReadPermission": {
      "type": "object",
      "properties": {
        "action": {
          "type": "string"
        },
        "created_at": {
          "type": "integer"
        },
        "created_by": {
          "type": "string"
        },
        "default": {
          "type": "boolean"
        },
        "description": {
          "type": "string"
        },
        "disabled": {
          "type": "boolean"
        },
        "extras": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "subject": {
          "type": "string"
        },
        "updated_at": {
          "type": "integer"
        },
        "updated_by": {
          "type": "string"
        }
      }
    },
    "ncobase_access_structs.ReadRole": {
      "type": "object",
      "properties": {
        "created_at": {
          "type": "integer"
        },
        "created_by": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "disabled": {
          "type": "boolean"
        },
        "extras": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "slug": {
          "type": "string"
        },
        "updated_at": {
          "type": "integer"
        },
        "updated_by": {
          "type": "string"
        }
      }
    },
    "ncobase_auth_structs.AccountMeshes": {
      "type": "object",
      "properties": {
        "orgs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ncobase_space_structs.ReadOrganization"
          }
        },
        "is_admin": {
          "type": "boolean"
        },
        "permissions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "profile": {
          "$ref": "#/definitions/ncobase_user_structs.ReadUserProfile"
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "space_id": {
          "type": "string"
        },
        "spaces": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ncobase_space_structs.ReadSpace"
          }
        },
        "user": {
          "$ref": "#/definitions/ncobase_user_structs.ReadUser"
        }
      }
    },
    "ncobase_auth_structs.Captcha": {
      "type": "object",
      "required": [
        "id",
        "solution"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "solution": {
          "type": "string"
        }
      }
    },
    "ncobase_auth_structs.LoginBody": {
      "type": "object",
      "required": [
        "password",
        "username"
      ],
      "properties": {
        "captcha": {
          "$ref": "#/definitions/ncobase_auth_structs.Captcha"
        },
        "password": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "ncobase_auth_structs.ReadSession": {
      "type": "object",
      "properties": {
        "created_at": {
          "type": "integer"
        },
        "device_info": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "expires_at": {
          "type": "integer"
        },
        "id": {
          "type": "string"
        },
        "ip_address": {
          "type": "string"
        },
        "is_active": {
          "type": "boolean"
        },
        "last_access_at": {
          "type": "integer"
        },
        "location": {
          "type": "string"
        },
        "login_method": {
          "type": "string"
        },
        "token_id": {
          "type": "string"
        },
        "updated_at": {
          "type": "integer"
        },
        "user_agent": {
          "type": "string"
        },
        "user_id": {
          "type": "string"
        }
      }
    },
    "ncobase_auth_structs.ReadSpace": {
      "type": "object",
      "properties": {
        "copyright": {
          "type": "string"
        },
        "created_at": {
          "type": "integer"
        },
        "created_by": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "disabled": {
          "type": "boolean"
        },
        "expired_at": {
          "type": "integer"
        },
        "extras": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "id": {
          "type": "string"
        },
        "keywords": {
          "type": "string"
        },
        "logo": {
          "type": "string"
        },
        "logo_alt": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "order": {
          "type": "integer"
        },
        "slug": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "updated_at": {
          "type": "integer"
        },
        "updated_by": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "ncobase_auth_structs.RefreshTokenBody": {
      "type": "object",
      "required": [
        "refresh_token"
      ],
      "properties": {
        "refresh_token": {
          "type": "string"
        }
      }
    },
    "ncobase_auth_structs.RegisterBody": {
      "type": "object",
      "required": [
        "display_name",
        "register_token",
        "username"
      ],
      "properties": {
        "display_name": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "register_token": {
          "type": "string"
        },
        "short_bio": {
          "type": "string"
        },
        "space": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "ncobase_auth_structs.SendCodeBody": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        }
      }
    },
    "ncobase_auth_structs.UserPassword": {
      "type": "object",
      "required": [
        "confirm",
        "new_password",
        "user"
      ],
      "properties": {
        "confirm": {
          "type": "string"
        },
        "new_password": {
          "type": "string"
        },
        "old_password": {
          "type": "string"
        },
        "user": {
          "type": "string"
        }
      }
    },
    "ncobase_content_structs.CreateChannelBody": {
      "type": "object",
      "properties": {
        "allowed_types": {
          "description": "article, video, image, audio, mixed",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "auto_publish": {
          "type": "boolean"
        },
        "config": {
          "description": "API keys, secrets, endpoints, etc.",
          "allOf": [
            {
              "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
            }
          ]
        },
        "created_by": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "icon": {
          "type": "string"
        },
        "logo": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "require_review": {
          "type": "boolean"
        },
        "slug": {
          "type": "string"
        },
        "status": {
          "description": "0: active, 1: inactive",
          "type": "integer"
        },
        "space_id": {
          "type": "string"
        },
        "type": {
          "description": "website, wechat, douyin, tiktok, xiaohongshu, twitter, facebook, custom",
          "type": "string"
        },
        "updated_by": {
          "type": "string"
        },
        "webhook_url": {
          "type": "string"
        }
      }
    },
    "ncobase_content_structs.CreateDistributionBody": {
      "type": "object",
      "properties": {
        "channel_id": {
          "type": "string"
        },
        "created_by": {
          "type": "string"
        },
        "custom_data": {
          "description": "Custom data for the distribution",
          "allOf": [
            {
              "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
            }
          ]
        },
        "error_details": {
          "description": "Error details if distribution failed",
          "type": "string"
        },
        "external_id": {
          "description": "ID on the external platform",
          "type": "string"
        },
        "external_url": {
          "description": "URL on the external platform",
          "type": "string"
        },
        "meta_data": {
          "description": "Platform-specific data",
          "allOf": [
            {
              "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
            }
          ]
        },
        "published_at": {
          "type": "integer"
        },
        "scheduled_at": {
          "type": "integer"
        },
        "status": {
          "description": "0: draft, 1: scheduled, 2: published, 3: failed, 4: cancelled",
          "type": "integer"
        },
        "space_id": {
          "type": "string"
        },
        "topic_id": {
          "type": "string"
        },
        "updated_by": {
          "type": "string"
        }
      }
    },
    "ncobase_content_structs.CreateMediaBody": {
      "type": "object",
      "properties": {
        "alt": {
          "type": "string"
        },
        "created_by": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "duration": {
          "type": "number"
        },
        "height": {
          "type": "integer"
        },
        "metadata": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "mime_type": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "size": {
          "type": "integer"
        },
        "space_id": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "type": {
          "description": "image, video, audio, file",
          "type": "string"
        },
        "updated_by": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "width": {
          "type": "integer"
        }
      }
    },
    "ncobase_content_structs.CreateTaxonomyBody": {
      "type": "object",
      "properties": {
        "color": {
          "type": "string"
        },
        "cover": {
          "type": "string"
        },
        "created_by": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "extras": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "icon": {
          "type": "string"
        },
        "keywords": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "parent_id": {
          "type": "string"
        },
        "slug": {
          "type": "string"
        },
        "status": {
          "type": "integer"
        },
        "space_id": {
          "type": "string"
        },
        "thumbnail": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "updated_by": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "ncobase_content_structs.CreateTopicBody": {
      "type": "object",
      "properties": {
        "content": {
          "type": "string"
        },
        "content_type": {
          "description": "article, video, etc.",
          "type": "string"
        },
        "created_by": {
          "type": "string"
        },
        "excerpt": {
          "type": "string"
        },
        "excerpt_auto": {
          "type": "boolean"
        },
        "featured_media": {
          "type": "string"
        },
        "markdown": {
          "type": "boolean"
        },
        "metadata": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "name": {
          "type": "string"
        },
        "private": {
          "type": "boolean"
        },
        "released": {
          "type": "integer"
        },
        "seo_description": {
          "type": "string"
        },
        "seo_keywords": {
          "type": "string"
        },
        "seo_title": {
          "type": "string"
        },
        "slug": {
          "type": "string"
        },
        "status": {
          "type": "integer"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "taxonomy_id": {
          "type": "string"
        },
        "temp": {
          "type": "boolean"
        },
        "space_id": {
          "type": "string"
        },
        "thumbnail": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "updated_by": {
          "type": "string"
        },
        "version": {
          "type": "integer"
        }
      }
    },
    "ncobase_content_structs.CreateTopicMediaBody": {
      "type": "object",
      "properties": {
        "created_by": {
          "type": "string"
        },
        "media_id": {
          "type": "string"
        },
        "order": {
          "type": "integer"
        },
        "topic_id": {
          "type": "string"
        },
        "type": {
          "description": "featured, gallery, attachment, etc.",
          "type": "string"
        }
      }
    },
    "ncobase_content_structs.ReadChannel": {
      "type": "object",
      "properties": {
        "allowed_types": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "auto_publish": {
          "type": "boolean"
        },
        "config": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "created_at": {
          "type": "integer"
        },
        "created_by": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "icon": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "logo": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "require_review": {
          "type": "boolean"
        },
        "slug": {
          "type": "string"
        },
        "status": {
          "type": "integer"
        },
        "space_id": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "updated_at": {
          "type": "integer"
        },
        "updated_by": {
          "type": "string"
        },
        "webhook_url": {
          "type": "string"
        }
      }
    },
    "ncobase_content_structs.ReadDistribution": {
      "type": "object",
      "properties": {
        "channel": {
          "$ref": "#/definitions/ncobase_content_structs.ReadChannel"
        },
        "channel_id": {
          "type": "string"
        },
        "created_at": {
          "type": "integer"
        },
        "created_by": {
          "type": "string"
        },
        "custom_data": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "error_details": {
          "type": "string"
        },
        "external_id": {
          "type": "string"
        },
        "external_url": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "meta_data": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "published_at": {
          "type": "integer"
        },
        "scheduled_at": {
          "type": "integer"
        },
        "status": {
          "type": "integer"
        },
        "space_id": {
          "type": "string"
        },
        "topic": {
          "$ref": "#/definitions/ncobase_content_structs.ReadTopic"
        },
        "topic_id": {
          "type": "string"
        },
        "updated_at": {
          "type": "integer"
        },
        "updated_by": {
          "type": "string"
        }
      }
    },
    "ncobase_content_structs.ReadMedia": {
      "type": "object",
      "properties": {
        "alt": {
          "type": "string"
        },
        "created_at": {
          "type": "integer"
        },
        "created_by": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "duration": {
          "type": "number"
        },
        "height": {
          "type": "integer"
        },
        "id": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "mime_type": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "size": {
          "type": "integer"
        },
        "space_id": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "updated_at": {
          "type": "integer"
        },
        "updated_by": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "width": {
          "type": "integer"
        }
      }
    },
    "ncobase_content_structs.ReadTaxonomy": {
      "type": "object",
      "properties": {
        "children": {
          "type": "array",
          "items": {}
        },
        "color": {
          "type": "string"
        },
        "cover": {
          "type": "string"
        },
        "created_at": {
          "type": "integer"
        },
        "created_by": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "extras": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "icon": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "keywords": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "parent_id": {
          "type": "string"
        },
        "slug": {
          "type": "string"
        },
        "status": {
          "type": "integer"
        },
        "space_id": {
          "type": "string"
        },
        "thumbnail": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "updated_at": {
          "type": "integer"
        },
        "updated_by": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "ncobase_content_structs.ReadTopic": {
      "type": "object",
      "properties": {
        "content": {
          "type": "string"
        },
        "content_type": {
          "type": "string"
        },
        "created_at": {
          "type": "integer"
        },
        "created_by": {
          "type": "string"
        },
        "excerpt": {
          "type": "string"
        },
        "excerpt_auto": {
          "type": "boolean"
        },
        "featured_media": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "markdown": {
          "type": "boolean"
        },
        "media": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ncobase_content_structs.ReadMedia"
          }
        },
        "metadata": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "name": {
          "type": "string"
        },
        "private": {
          "type": "boolean"
        },
        "released": {
          "type": "integer"
        },
        "seo_description": {
          "type": "string"
        },
        "seo_keywords": {
          "type": "string"
        },
        "seo_title": {
          "type": "string"
        },
        "slug": {
          "type": "string"
        },
        "status": {
          "type": "integer"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "taxonomy": {
          "$ref": "#/definitions/ncobase_content_structs.ReadTaxonomy"
        },
        "taxonomy_id": {
          "type": "string"
        },
        "temp": {
          "type": "boolean"
        },
        "space_id": {
          "type": "string"
        },
        "thumbnail": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "updated_at": {
          "type": "integer"
        },
        "updated_by": {
          "type": "string"
        },
        "version": {
          "type": "integer"
        }
      }
    },
    "ncobase_content_structs.ReadTopicMedia": {
      "type": "object",
      "properties": {
        "created_at": {
          "type": "integer"
        },
        "created_by": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "media": {
          "$ref": "#/definitions/ncobase_content_structs.ReadMedia"
        },
        "media_id": {
          "type": "string"
        },
        "order": {
          "type": "integer"
        },
        "topic_id": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "updated_at": {
          "type": "integer"
        },
        "updated_by": {
          "type": "string"
        }
      }
    },
    "ncobase_content_structs.UpdateChannelBody": {
      "type": "object",
      "properties": {
        "allowed_types": {
          "description": "article, video, image, audio, mixed",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "auto_publish": {
          "type": "boolean"
        },
        "config": {
          "description": "API keys, secrets, endpoints, etc.",
          "allOf": [
            {
              "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
            }
          ]
        },
        "created_by": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "icon": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "logo": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "require_review": {
          "type": "boolean"
        },
        "slug": {
          "type": "string"
        },
        "status": {
          "description": "0: active, 1: inactive",
          "type": "integer"
        },
        "space_id": {
          "type": "string"
        },
        "type": {
          "description": "website, wechat, douyin, tiktok, xiaohongshu, twitter, facebook, custom",
          "type": "string"
        },
        "updated_by": {
          "type": "string"
        },
        "webhook_url": {
          "type": "string"
        }
      }
    },
    "ncobase_content_structs.UpdateDistributionBody": {
      "type": "object",
      "properties": {
        "channel_id": {
          "type": "string"
        },
        "created_by": {
          "type": "string"
        },
        "custom_data": {
          "description": "Custom data for the distribution",
          "allOf": [
            {
              "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
            }
          ]
        },
        "error_details": {
          "description": "Error details if distribution failed",
          "type": "string"
        },
        "external_id": {
          "description": "ID on the external platform",
          "type": "string"
        },
        "external_url": {
          "description": "URL on the external platform",
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "meta_data": {
          "description": "Platform-specific data",
          "allOf": [
            {
              "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
            }
          ]
        },
        "published_at": {
          "type": "integer"
        },
        "scheduled_at": {
          "type": "integer"
        },
        "status": {
          "description": "0: draft, 1: scheduled, 2: published, 3: failed, 4: cancelled",
          "type": "integer"
        },
        "space_id": {
          "type": "string"
        },
        "topic_id": {
          "type": "string"
        },
        "updated_by": {
          "type": "string"
        }
      }
    },
    "ncobase_content_structs.UpdateMediaBody": {
      "type": "object",
      "properties": {
        "alt": {
          "type": "string"
        },
        "created_by": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "duration": {
          "type": "number"
        },
        "height": {
          "type": "integer"
        },
        "id": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "mime_type": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "size": {
          "type": "integer"
        },
        "space_id": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "type": {
          "description": "image, video, audio, file",
          "type": "string"
        },
        "updated_by": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "width": {
          "type": "integer"
        }
      }
    },
    "ncobase_content_structs.UpdateTaxonomyBody": {
      "type": "object",
      "properties": {
        "color": {
          "type": "string"
        },
        "cover": {
          "type": "string"
        },
        "created_by": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "extras": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "icon": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "keywords": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "parent_id": {
          "type": "string"
        },
        "slug": {
          "type": "string"
        },
        "status": {
          "type": "integer"
        },
        "space_id": {
          "type": "string"
        },
        "thumbnail": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "updated_by": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "ncobase_content_structs.UpdateTopicBody": {
      "type": "object",
      "properties": {
        "content": {
          "type": "string"
        },
        "content_type": {
          "description": "article, video, etc.",
          "type": "string"
        },
        "created_by": {
          "type": "string"
        },
        "excerpt": {
          "type": "string"
        },
        "excerpt_auto": {
          "type": "boolean"
        },
        "featured_media": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "markdown": {
          "type": "boolean"
        },
        "metadata": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "name": {
          "type": "string"
        },
        "private": {
          "type": "boolean"
        },
        "released": {
          "type": "integer"
        },
        "seo_description": {
          "type": "string"
        },
        "seo_keywords": {
          "type": "string"
        },
        "seo_title": {
          "type": "string"
        },
        "slug": {
          "type": "string"
        },
        "status": {
          "type": "integer"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "taxonomy_id": {
          "type": "string"
        },
        "temp": {
          "type": "boolean"
        },
        "space_id": {
          "type": "string"
        },
        "thumbnail": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "updated_by": {
          "type": "string"
        },
        "version": {
          "type": "integer"
        }
      }
    },
    "ncobase_counter_structs.CounterBody": {
      "type": "object",
      "properties": {
        "created_by": {
          "type": "string"
        },
        "current_value": {
          "type": "integer"
        },
        "date_format": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "disabled": {
          "type": "boolean"
        },
        "identifier": {
          "type": "string"
        },
        "increment_step": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "prefix": {
          "type": "string"
        },
        "start_value": {
          "type": "integer"
        },
        "suffix": {
          "type": "string"
        },
        "space_id": {
          "type": "string"
        },
        "updated_by": {
          "type": "string"
        }
      }
    },
    "ncobase_counter_structs.ReadCounter": {
      "type": "object",
      "properties": {
        "created_at": {
          "type": "integer"
        },
        "created_by": {
          "type": "string"
        },
        "current_value": {
          "type": "integer"
        },
        "date_format": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "disabled": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "identifier": {
          "type": "string"
        },
        "increment_step": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "prefix": {
          "type": "string"
        },
        "start_value": {
          "type": "integer"
        },
        "suffix": {
          "type": "string"
        },
        "space_id": {
          "type": "string"
        },
        "updated_at": {
          "type": "integer"
        },
        "updated_by": {
          "type": "string"
        }
      }
    },
    "ncobase_counter_structs.UpdateCounterBody": {
      "type": "object",
      "properties": {
        "created_by": {
          "type": "string"
        },
        "current_value": {
          "type": "integer"
        },
        "date_format": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "disabled": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "identifier": {
          "type": "string"
        },
        "increment_step": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "prefix": {
          "type": "string"
        },
        "start_value": {
          "type": "integer"
        },
        "suffix": {
          "type": "string"
        },
        "space_id": {
          "type": "string"
        },
        "updated_by": {
          "type": "string"
        }
      }
    },
    "ncobase_payment_structs.BillingInterval": {
      "type": "string",
      "enum": [
        "daily",
        "weekly",
        "monthly",
        "yearly"
      ],
      "x-enum-varnames": [
        "BillingIntervalDaily",
        "BillingIntervalWeekly",
        "BillingIntervalMonthly",
        "BillingIntervalYearly"
      ]
    },
    "ncobase_payment_structs.CancelSubscriptionInput": {
      "type": "object",
      "properties": {
        "immediate": {
          "type": "boolean"
        },
        "reason": {
          "type": "string"
        }
      }
    },
    "ncobase_payment_structs.Channel": {
      "type": "object",
      "properties": {
        "config": {
          "$ref": "#/definitions/ncobase_payment_structs.ProviderConfig"
        },
        "created_at": {
          "type": "integer"
        },
        "id": {
          "type": "string"
        },
        "is_default": {
          "type": "boolean"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {}
        },
        "name": {
          "type": "string"
        },
        "provider": {
          "$ref": "#/definitions/ncobase_payment_structs.PaymentProvider"
        },
        "status": {
          "$ref": "#/definitions/ncobase_payment_structs.ChannelStatus"
        },
        "supported_types": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ncobase_payment_structs.PaymentType"
          }
        },
        "space_id": {
          "type": "string"
        },
        "updated_at": {
          "type": "integer"
        }
      }
    },
    "ncobase_payment_structs.ChannelStatus": {
      "type": "string",
      "enum": [
        "active",
        "disabled",
        "testing"
      ],
      "x-enum-varnames": [
        "ChannelStatusActive",
        "ChannelStatusDisabled",
        "ChannelStatusTesting"
      ]
    },
    "ncobase_payment_structs.CreateChannelInput": {
      "type": "object",
      "required": [
        "config",
        "name",
        "provider",
        "status",
        "supported_types"
      ],
      "properties": {
        "config": {
          "$ref": "#/definitions/ncobase_payment_structs.ProviderConfig"
        },
        "is_default": {
          "type": "boolean"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {}
        },
        "name": {
          "type": "string"
        },
        "provider": {
          "$ref": "#/definitions/ncobase_payment_structs.PaymentProvider"
        },
        "status": {
          "$ref": "#/definitions/ncobase_payment_structs.ChannelStatus"
        },
        "supported_types": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ncobase_payment_structs.PaymentType"
          }
        },
        "space_id": {
          "type": "string"
        }
      }
    },
    "ncobase_payment_structs.CreateOrderInput": {
      "type": "object",
      "properties": {
        "amount": {
          "type": "number"
        },
        "channel_id": {
          "type": "string"
        },
        "currency": {
          "$ref": "#/definitions/ncobase_payment_structs.CurrencyCode"
        },
        "description": {
          "type": "string"
        },
        "expires_at": {
          "type": "string"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {}
        },
        "order_number": {
          "type": "string"
        },
        "paid_at": {
          "type": "string"
        },
        "product_id": {
          "type": "string"
        },
        "provider_ref": {
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/ncobase_payment_structs.PaymentStatus"
        },
        "subscription_id": {
          "type": "string"
        },
        "space_id": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/ncobase_payment_structs.PaymentType"
        },
        "user_id": {
          "type": "string"
        }
      }
    },
    "ncobase_payment_structs.CreateProductInput": {
      "type": "object",
      "required": [
        "currency",
        "description",
        "name",
        "price",
        "pricing_type",
        "status"
      ],
      "properties": {
        "billing_interval": {
          "$ref": "#/definitions/ncobase_payment_structs.BillingInterval"
        },
        "currency": {
          "$ref": "#/definitions/ncobase_payment_structs.CurrencyCode"
        },
        "description": {
          "type": "string"
        },
        "features": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {}
        },
        "name": {
          "type": "string"
        },
        "price": {
          "type": "number"
        },
        "pricing_type": {
          "$ref": "#/definitions/ncobase_payment_structs.PricingType"
        },
        "status": {
          "$ref": "#/definitions/ncobase_payment_structs.ProductStatus"
        },
        "space_id": {
          "type": "string"
        },
        "trial_days": {
          "type": "integer"
        }
      }
    },
    "ncobase_payment_structs.CreateSubscriptionInput": {
      "type": "object",
      "required": [
        "channel_id",
        "product_id",
        "user_id"
      ],
      "properties": {
        "channel_id": {
          "type": "string"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {}
        },
        "product_id": {
          "type": "string"
        },
        "space_id": {
          "type": "string"
        },
        "trial_days": {
          "type": "integer"
        },
        "user_id": {
          "type": "string"
        }
      }
    },
    "ncobase_payment_structs.CurrencyCode": {
      "type": "string",
      "enum": [
        "USD",
        "EUR",
        "GBP",
        "CNY",
        "JPY"
      ],
      "x-enum-varnames": [
        "CurrencyUSD",
        "CurrencyEUR",
        "CurrencyGBP",
        "CurrencyCNY",
        "CurrencyJPY"
      ]
    },
    "ncobase_payment_structs.Log": {
      "type": "object",
      "properties": {
        "channel_id": {
          "type": "string"
        },
        "created_at": {
          "type": "integer"
        },
        "error": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "ip": {
          "type": "string"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {}
        },
        "order_id": {
          "type": "string"
        },
        "request_data": {
          "type": "string"
        },
        "response_data": {
          "type": "string"
        },
        "status_after": {
          "$ref": "#/definitions/ncobase_payment_structs.PaymentStatus"
        },
        "status_before": {
          "$ref": "#/definitions/ncobase_payment_structs.PaymentStatus"
        },
        "type": {
          "$ref": "#/definitions/ncobase_payment_structs.LogType"
        },
        "updated_at": {
          "type": "integer"
        },
        "user_agent": {
          "type": "string"
        },
        "user_id": {
          "type": "string"
        }
      }
    },
    "ncobase_payment_structs.LogType": {
      "type": "string",
      "enum": [
        "create",
        "update",
        "verify",
        "callback",
        "notify",
        "refund",
        "error"
      ],
      "x-enum-varnames": [
        "LogTypeCreate",
        "LogTypeUpdate",
        "LogTypeVerify",
        "LogTypeCallback",
        "LogTypeNotify",
        "LogTypeRefund",
        "LogTypeError"
      ]
    },
    "ncobase_payment_structs.Order": {
      "type": "object",
      "properties": {
        "amount": {
          "type": "number"
        },
        "channel_id": {
          "type": "string"
        },
        "created_at": {
          "type": "integer"
        },
        "currency": {
          "$ref": "#/definitions/ncobase_payment_structs.CurrencyCode"
        },
        "description": {
          "type": "string"
        },
        "expires_at": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {}
        },
        "order_number": {
          "type": "string"
        },
        "paid_at": {
          "type": "string"
        },
        "product_id": {
          "type": "string"
        },
        "provider_ref": {
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/ncobase_payment_structs.PaymentStatus"
        },
        "subscription_id": {
          "type": "string"
        },
        "space_id": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/ncobase_payment_structs.PaymentType"
        },
        "updated_at": {
          "type": "integer"
        },
        "user_id": {
          "type": "string"
        }
      }
    },
    "ncobase_payment_structs.PaymentProvider": {
      "type": "string",
      "enum": [
        "stripe",
        "paypal",
        "alipay",
        "wechatpay"
      ],
      "x-enum-varnames": [
        "PaymentProviderStripe",
        "PaymentProviderPayPal",
        "PaymentProviderAlipay",
        "PaymentProviderWeChatPay"
      ]
    },
    "ncobase_payment_structs.PaymentStatus": {
      "type": "string",
      "enum": [
        "pending",
        "completed",
        "failed",
        "refunded",
        "cancelled"
      ],
      "x-enum-varnames": [
        "PaymentStatusPending",
        "PaymentStatusCompleted",
        "PaymentStatusFailed",
        "PaymentStatusRefunded",
        "PaymentStatusCancelled"
      ]
    },
    "ncobase_payment_structs.PaymentType": {
      "type": "string",
      "enum": [
        "one_time",
        "subscription",
        "recurring"
      ],
      "x-enum-varnames": [
        "PaymentTypeOneTime",
        "PaymentTypeSubscription",
        "PaymentTypeRecurring"
      ]
    },
    "ncobase_payment_structs.PricingType": {
      "type": "string",
      "enum": [
        "one_time",
        "recurring",
        "usage_based",
        "tiered_usage"
      ],
      "x-enum-varnames": [
        "PricingTypeOneTime",
        "PricingTypeRecurring",
        "PricingTypeUsageBased",
        "PricingTypeTieredUsage"
      ]
    },
    "ncobase_payment_structs.Product": {
      "type": "object",
      "properties": {
        "billing_interval": {
          "$ref": "#/definitions/ncobase_payment_structs.BillingInterval"
        },
        "created_at": {
          "type": "integer"
        },
        "currency": {
          "$ref": "#/definitions/ncobase_payment_structs.CurrencyCode"
        },
        "description": {
          "type": "string"
        },
        "features": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "id": {
          "type": "string"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {}
        },
        "name": {
          "type": "string"
        },
        "price": {
          "type": "number"
        },
        "pricing_type": {
          "$ref": "#/definitions/ncobase_payment_structs.PricingType"
        },
        "status": {
          "$ref": "#/definitions/ncobase_payment_structs.ProductStatus"
        },
        "space_id": {
          "type": "string"
        },
        "trial_days": {
          "type": "integer"
        },
        "updated_at": {
          "type": "integer"
        }
      }
    },
    "ncobase_payment_structs.ProductStatus": {
      "type": "string",
      "enum": [
        "active",
        "disabled",
        "draft"
      ],
      "x-enum-varnames": [
        "ProductStatusActive",
        "ProductStatusDisabled",
        "ProductStatusDraft"
      ]
    },
    "ncobase_payment_structs.ProviderConfig": {
      "type": "object",
      "additionalProperties": {}
    },
    "ncobase_payment_structs.RefundOrderInput": {
      "type": "object",
      "properties": {
        "amount": {
          "type": "number",
          "minimum": 0
        },
        "reason": {
          "type": "string"
        }
      }
    },
    "ncobase_payment_structs.Subscription": {
      "type": "object",
      "properties": {
        "cancel_at": {
          "type": "string"
        },
        "cancelled_at": {
          "type": "string"
        },
        "channel_id": {
          "type": "string"
        },
        "created_at": {
          "type": "integer"
        },
        "current_period_end": {
          "type": "string"
        },
        "current_period_start": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {}
        },
        "product_id": {
          "type": "string"
        },
        "provider_ref": {
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/ncobase_payment_structs.SubscriptionStatus"
        },
        "space_id": {
          "type": "string"
        },
        "trial_end": {
          "type": "string"
        },
        "trial_start": {
          "type": "string"
        },
        "updated_at": {
          "type": "integer"
        },
        "user_id": {
          "type": "string"
        }
      }
    },
    "ncobase_payment_structs.SubscriptionStatus": {
      "type": "string",
      "enum": [
        "active",
        "trialing",
        "cancelled",
        "expired",
        "past_due"
      ],
      "x-enum-varnames": [
        "SubscriptionStatusActive",
        "SubscriptionStatusTrialing",
        "SubscriptionStatusCancelled",
        "SubscriptionStatusExpired",
        "SubscriptionStatusPastDue"
      ]
    },
    "ncobase_payment_structs.UpdateChannelInput": {
      "type": "object",
      "properties": {
        "config": {
          "$ref": "#/definitions/ncobase_payment_structs.ProviderConfig"
        },
        "id": {
          "type": "string"
        },
        "is_default": {
          "type": "boolean"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {}
        },
        "name": {
          "type": "string"
        },
        "provider": {
          "$ref": "#/definitions/ncobase_payment_structs.PaymentProvider"
        },
        "status": {
          "$ref": "#/definitions/ncobase_payment_structs.ChannelStatus"
        },
        "supported_types": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ncobase_payment_structs.PaymentType"
          }
        },
        "space_id": {
          "type": "string"
        }
      }
    },
    "ncobase_payment_structs.UpdateProductInput": {
      "type": "object",
      "properties": {
        "billing_interval": {
          "$ref": "#/definitions/ncobase_payment_structs.BillingInterval"
        },
        "description": {
          "type": "string"
        },
        "features": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "id": {
          "type": "string"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {}
        },
        "name": {
          "type": "string"
        },
        "price": {
          "type": "number"
        },
        "status": {
          "$ref": "#/definitions/ncobase_payment_structs.ProductStatus"
        },
        "trial_days": {
          "type": "integer"
        }
      }
    },
    "ncobase_proxy_structs.CreateEndpointBody": {
      "type": "object",
      "required": [
        "base_url",
        "name"
      ],
      "properties": {
        "auth_config": {
          "type": "string"
        },
        "auth_type": {
          "type": "string",
          "enum": [
            "None",
            "Basic",
            "Bearer",
            "OAuth",
            "ApiKey"
          ]
        },
        "base_url": {
          "type": "string"
        },
        "created_by": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "disabled": {
          "type": "boolean"
        },
        "extras": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "log_requests": {
          "type": "boolean"
        },
        "log_responses": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "protocol": {
          "type": "string",
          "enum": [
            "HTTP",
            "HTTPS",
            "WS",
            "WSS",
            "TCP",
            "UDP"
          ]
        },
        "retry_count": {
          "type": "integer"
        },
        "timeout": {
          "type": "integer"
        },
        "updated_by": {
          "type": "string"
        },
        "use_circuit_breaker": {
          "type": "boolean"
        },
        "validate_ssl": {
          "type": "boolean"
        }
      }
    },
    "ncobase_proxy_structs.CreateRouteBody": {
      "type": "object",
      "required": [
        "endpoint_id",
        "method",
        "name",
        "path_pattern",
        "target_path"
      ],
      "properties": {
        "cache_enabled": {
          "type": "boolean"
        },
        "cache_ttl": {
          "type": "integer"
        },
        "created_by": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "disabled": {
          "type": "boolean"
        },
        "endpoint_id": {
          "type": "string"
        },
        "extras": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "input_transformer_id": {
          "type": "string"
        },
        "method": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "output_transformer_id": {
          "type": "string"
        },
        "path_pattern": {
          "type": "string"
        },
        "rate_limit": {
          "type": "string"
        },
        "strip_auth_header": {
          "type": "boolean"
        },
        "target_path": {
          "type": "string"
        },
        "updated_by": {
          "type": "string"
        }
      }
    },
    "ncobase_proxy_structs.CreateTransformerBody": {
      "type": "object",
      "required": [
        "content",
        "content_type",
        "name",
        "type"
      ],
      "properties": {
        "content": {
          "type": "string"
        },
        "content_type": {
          "type": "string"
        },
        "created_by": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "disabled": {
          "type": "boolean"
        },
        "extras": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "template",
            "script",
            "mapping"
          ]
        },
        "updated_by": {
          "type": "string"
        }
      }
    },
    "ncobase_proxy_structs.ReadEndpoint": {
      "type": "object",
      "properties": {
        "auth_config": {
          "type": "string"
        },
        "auth_type": {
          "type": "string"
        },
        "base_url": {
          "type": "string"
        },
        "created_at": {
          "type": "integer"
        },
        "created_by": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "disabled": {
          "type": "boolean"
        },
        "extras": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "id": {
          "type": "string"
        },
        "log_requests": {
          "type": "boolean"
        },
        "log_responses": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "protocol": {
          "type": "string"
        },
        "retry_count": {
          "type": "integer"
        },
        "timeout": {
          "type": "integer"
        },
        "updated_at": {
          "type": "integer"
        },
        "updated_by": {
          "type": "string"
        },
        "use_circuit_breaker": {
          "type": "boolean"
        },
        "validate_ssl": {
          "type": "boolean"
        }
      }
    },
    "ncobase_proxy_structs.ReadRoute": {
      "type": "object",
      "properties": {
        "cache_enabled": {
          "type": "boolean"
        },
        "cache_ttl": {
          "type": "integer"
        },
        "created_at": {
          "type": "integer"
        },
        "created_by": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "disabled": {
          "type": "boolean"
        },
        "endpoint_id": {
          "type": "string"
        },
        "extras": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "id": {
          "type": "string"
        },
        "input_transformer_id": {
          "type": "string"
        },
        "method": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "output_transformer_id": {
          "type": "string"
        },
        "path_pattern": {
          "type": "string"
        },
        "rate_limit": {
          "type": "string"
        },
        "strip_auth_header": {
          "type": "boolean"
        },
        "target_path": {
          "type": "string"
        },
        "updated_at": {
          "type": "integer"
        },
        "updated_by": {
          "type": "string"
        }
      }
    },
    "ncobase_proxy_structs.ReadTransformer": {
      "type": "object",
      "properties": {
        "content": {
          "type": "string"
        },
        "content_type": {
          "type": "string"
        },
        "created_at": {
          "type": "integer"
        },
        "created_by": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "disabled": {
          "type": "boolean"
        },
        "extras": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "updated_at": {
          "type": "integer"
        },
        "updated_by": {
          "type": "string"
        }
      }
    },
    "ncobase_realtime_structs.ChannelBody": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "extras": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "name": {
          "type": "string"
        },
        "status": {
          "description": "0: disabled, 1: enabled",
          "type": "integer"
        },
        "type": {
          "description": "public/private/direct",
          "type": "string"
        }
      }
    },
    "ncobase_realtime_structs.CreateChannel": {
      "type": "object",
      "properties": {
        "channel": {
          "$ref": "#/definitions/ncobase_realtime_structs.ChannelBody"
        }
      }
    },
    "ncobase_realtime_structs.CreateEvent": {
      "type": "object",
      "properties": {
        "event": {
          "$ref": "#/definitions/ncobase_realtime_structs.EventBody"
        }
      }
    },
    "ncobase_realtime_structs.CreateNotification": {
      "type": "object",
      "properties": {
        "notification": {
          "$ref": "#/definitions/ncobase_realtime_structs.NotificationBody"
        }
      }
    },
    "ncobase_realtime_structs.CreateSubscription": {
      "type": "object",
      "properties": {
        "subscription": {
          "$ref": "#/definitions/ncobase_realtime_structs.SubscriptionBody"
        }
      }
    },
    "ncobase_realtime_structs.EventBody": {
      "type": "object",
      "properties": {
        "channel_id": {
          "type": "string"
        },
        "payload": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "type": {
          "type": "string"
        },
        "user_id": {
          "type": "string"
        }
      }
    },
    "ncobase_realtime_structs.NotificationBody": {
      "type": "object",
      "properties": {
        "channel_id": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
          }
        },
        "status": {
          "type": "integer"
        },
        "title": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "user_id": {
          "type": "string"
        }
      }
    },
    "ncobase_realtime_structs.ReadChannel": {
      "type": "object",
      "properties": {
        "created_at": {
          "type": "integer"
        },
        "description": {
          "type": "string"
        },
        "extras": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "status": {
          "type": "integer"
        },
        "type": {
          "type": "string"
        },
        "updated_at": {
          "type": "integer"
        }
      }
    },
    "ncobase_realtime_structs.ReadEvent": {
      "type": "object",
      "properties": {
        "channel_id": {
          "type": "string"
        },
        "created_at": {
          "type": "integer"
        },
        "id": {
          "type": "string"
        },
        "payload": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "type": {
          "type": "string"
        },
        "user_id": {
          "type": "string"
        }
      }
    },
    "ncobase_realtime_structs.ReadNotification": {
      "type": "object",
      "properties": {
        "channel_id": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "created_at": {
          "type": "integer"
        },
        "id": {
          "type": "string"
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
          }
        },
        "status": {
          "type": "integer"
        },
        "title": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "updated_at": {
          "type": "integer"
        },
        "user_id": {
          "type": "string"
        }
      }
    },
    "ncobase_realtime_structs.ReadSubscription": {
      "type": "object",
      "properties": {
        "channel_id": {
          "type": "string"
        },
        "created_at": {
          "type": "integer"
        },
        "id": {
          "type": "string"
        },
        "status": {
          "type": "integer"
        },
        "updated_at": {
          "type": "integer"
        },
        "user_id": {
          "type": "string"
        }
      }
    },
    "ncobase_realtime_structs.ReadUser": {
      "type": "object",
      "properties": {
        "created_at": {
          "type": "integer"
        },
        "email": {
          "type": "string"
        },
        "extras": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "id": {
          "type": "string"
        },
        "is_admin": {
          "type": "boolean"
        },
        "is_certified": {
          "type": "boolean"
        },
        "phone": {
          "type": "string"
        },
        "status": {
          "type": "integer"
        },
        "updated_at": {
          "type": "integer"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "ncobase_realtime_structs.SubscriptionBody": {
      "type": "object",
      "properties": {
        "channel_id": {
          "type": "string"
        },
        "status": {
          "description": "0: disabled, 1: enabled",
          "type": "integer"
        },
        "user_id": {
          "type": "string"
        }
      }
    },
    "ncobase_realtime_structs.UpdateChannel": {
      "type": "object",
      "properties": {
        "channel": {
          "$ref": "#/definitions/ncobase_realtime_structs.ChannelBody"
        },
        "id": {
          "type": "string"
        }
      }
    },
    "ncobase_realtime_structs.UpdateNotification": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "notification": {
          "$ref": "#/definitions/ncobase_realtime_structs.NotificationBody"
        }
      }
    },
    "ncobase_resource_structs.AccessLevel": {
      "type": "string",
      "enum": [
        "public",
        "private",
        "shared"
      ],
      "x-enum-comments": {
        "AccessLevelPrivate": "Only accessible to owner",
        "AccessLevelPublic": "Accessible to anyone",
        "AccessLevelShared": "Shared with specific users/orgs"
      },
      "x-enum-varnames": [
        "AccessLevelPublic",
        "AccessLevelPrivate",
        "AccessLevelShared"
      ]
    },
    "ncobase_resource_structs.BatchUploadResult": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "failed_files": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "failure_count": {
          "type": "integer"
        },
        "files": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ncobase_resource_structs.ReadFile"
          }
        },
        "operation_id": {
          "type": "string"
        },
        "success_count": {
          "type": "integer"
        },
        "total_files": {
          "type": "integer"
        }
      }
    },
    "ncobase_resource_structs.FileCategory": {
      "type": "string",
      "enum": [
        "image",
        "document",
        "video",
        "audio",
        "archive",
        "other"
      ],
      "x-enum-varnames": [
        "FileCategoryImage",
        "FileCategoryDocument",
        "FileCategoryVideo",
        "FileCategoryAudio",
        "FileCategoryArchive",
        "FileCategoryOther"
      ]
    },
    "ncobase_resource_structs.FileMetadata": {
      "type": "object",
      "properties": {
        "author": {
          "description": "Content author",
          "type": "string"
        },
        "category": {
          "description": "File category",
          "allOf": [
            {
              "$ref": "#/definitions/ncobase_resource_structs.FileCategory"
            }
          ]
        },
        "creation_date": {
          "description": "Original file creation date",
          "type": "string"
        },
        "custom_fields": {
          "description": "User-defined metadata",
          "type": "object",
          "additionalProperties": {}
        },
        "description": {
          "description": "Content description",
          "type": "string"
        },
        "duration": {
          "description": "For audio/video in seconds",
          "type": "number"
        },
        "height": {
          "description": "For images",
          "type": "integer"
        },
        "keywords": {
          "description": "Content keywords",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "modified_date": {
          "description": "Last modification date",
          "type": "string"
        },
        "title": {
          "description": "Content title",
          "type": "string"
        },
        "width": {
          "description": "For images",
          "type": "integer"
        }
      }
    },
    "ncobase_resource_structs.ProcessingOptions": {
      "type": "object",
      "properties": {
        "compress_image": {
          "type": "boolean"
        },
        "compression_quality": {
          "description": "1-100",
          "type": "integer"
        },
        "convert_format": {
          "description": "Target format",
          "type": "string"
        },
        "create_thumbnail": {
          "type": "boolean"
        },
        "max_height": {
          "type": "integer"
        },
        "max_width": {
          "type": "integer"
        },
        "resize_image": {
          "type": "boolean"
        }
      }
    },
    "ncobase_resource_structs.ReadFile": {
      "type": "object",
      "properties": {
        "access_level": {
          "$ref": "#/definitions/ncobase_resource_structs.AccessLevel"
        },
        "bucket": {
          "type": "string"
        },
        "created_at": {
          "type": "integer"
        },
        "created_by": {
          "type": "string"
        },
        "download_url": {
          "type": "string"
        },
        "endpoint": {
          "type": "string"
        },
        "expires_at": {
          "type": "integer"
        },
        "extras": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "folder_path": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "is_expired": {
          "type": "boolean"
        },
        "is_public": {
          "type": "boolean"
        },
        "metadata": {
          "$ref": "#/definitions/ncobase_resource_structs.FileMetadata"
        },
        "name": {
          "type": "string"
        },
        "object_id": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "size": {
          "type": "integer"
        },
        "storage": {
          "type": "string"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "space_id": {
          "type": "string"
        },
        "thumbnail_url": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "updated_at": {
          "type": "integer"
        },
        "updated_by": {
          "type": "string"
        },
        "versions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ncobase_resource_structs.UpdateFileBody": {
      "type": "object",
      "properties": {
        "access_level": {
          "description": "Access level",
          "allOf": [
            {
              "$ref": "#/definitions/ncobase_resource_structs.AccessLevel"
            }
          ]
        },
        "bucket": {
          "type": "string"
        },
        "created_by": {
          "type": "string"
        },
        "endpoint": {
          "type": "string"
        },
        "expires_at": {
          "description": "Expiration timestamp",
          "type": "integer"
        },
        "extras": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "folder_path": {
          "description": "Virtual folder path",
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "is_public": {
          "description": "Publicly accessible flag",
          "type": "boolean"
        },
        "metadata": {
          "description": "metadata",
          "allOf": [
            {
              "$ref": "#/definitions/ncobase_resource_structs.FileMetadata"
            }
          ]
        },
        "name": {
          "type": "string"
        },
        "object_id": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "processing_options": {
          "description": "Processing options",
          "allOf": [
            {
              "$ref": "#/definitions/ncobase_resource_structs.ProcessingOptions"
            }
          ]
        },
        "size": {
          "type": "integer"
        },
        "storage": {
          "type": "string"
        },
        "tags": {
          "description": "Tags for categorization",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "space_id": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "updated_by": {
          "type": "string"
        },
        "versions": {
          "description": "Previous versions IDs",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ncobase_space_structs.AddMemberRequest": {
      "type": "object",
      "required": [
        "role",
        "user_id"
      ],
      "properties": {
        "role": {
          "$ref": "#/definitions/ncobase_space_structs.UserRole"
        },
        "user_id": {
          "type": "string"
        }
      }
    },
    "ncobase_space_structs.GroupBody": {
      "type": "object",
      "properties": {
        "created_by": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "disabled": {
          "type": "boolean"
        },
        "extras": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "leader": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "name": {
          "type": "string"
        },
        "parent_id": {
          "type": "string"
        },
        "slug": {
          "type": "string"
        },
        "updated_by": {
          "type": "string"
        }
      }
    },
    "ncobase_space_structs.GroupMember": {
      "type": "object",
      "properties": {
        "added_at": {
          "type": "integer"
        },
        "avatar": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "last_login": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "role": {
          "$ref": "#/definitions/ncobase_space_structs.UserRole"
        },
        "user_id": {
          "type": "string"
        }
      }
    },
    "ncobase_space_structs.ReadOrganization": {
      "type": "object",
      "properties": {
        "children": {
          "type": "array",
          "items": {}
        },
        "created_at": {
          "type": "integer"
        },
        "created_by": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "disabled": {
          "type": "boolean"
        },
        "extras": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "id": {
          "type": "string"
        },
        "leader": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "name": {
          "type": "string"
        },
        "parent_id": {
          "type": "string"
        },
        "slug": {
          "type": "string"
        },
        "updated_at": {
          "type": "integer"
        },
        "updated_by": {
          "type": "string"
        }
      }
    },
    "ncobase_space_structs.UpdateGroupBody": {
      "type": "object",
      "properties": {
        "created_by": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "disabled": {
          "type": "boolean"
        },
        "extras": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "id": {
          "type": "string"
        },
        "leader": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "name": {
          "type": "string"
        },
        "parent_id": {
          "type": "string"
        },
        "slug": {
          "type": "string"
        },
        "updated_by": {
          "type": "string"
        }
      }
    },
    "ncobase_space_structs.UpdateMemberRequest": {
      "type": "object",
      "required": [
        "role"
      ],
      "properties": {
        "role": {
          "$ref": "#/definitions/ncobase_space_structs.UserRole"
        }
      }
    },
    "ncobase_space_structs.UserRole": {
      "type": "string",
      "enum": [
        "owner",
        "admin",
        "editor",
        "viewer",
        "member"
      ],
      "x-enum-varnames": [
        "RoleOwner",
        "RoleAdmin",
        "RoleEditor",
        "RoleViewer",
        "RoleMember"
      ]
    },
    "ncobase_system_structs.DictionaryBody": {
      "type": "object",
      "properties": {
        "created_by": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "slug": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "updated_by": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "ncobase_system_structs.MenuBody": {
      "type": "object",
      "properties": {
        "created_by": {
          "type": "string"
        },
        "disabled": {
          "type": "boolean"
        },
        "extras": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "hidden": {
          "type": "boolean"
        },
        "icon": {
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "order": {
          "type": "integer"
        },
        "parent_id": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "perms": {
          "type": "string"
        },
        "slug": {
          "type": "string"
        },
        "target": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "updated_by": {
          "type": "string"
        }
      }
    },
    "ncobase_system_structs.NavigationMenus": {
      "type": "object",
      "properties": {
        "accounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ncobase_system_structs.ReadMenu"
          }
        },
        "headers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ncobase_system_structs.ReadMenu"
          }
        },
        "sidebars": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ncobase_system_structs.ReadMenu"
          }
        },
        "spaces": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ncobase_system_structs.ReadMenu"
          }
        }
      }
    },
    "ncobase_system_structs.OptionBody": {
      "type": "object",
      "properties": {
        "autoload": {
          "type": "boolean"
        },
        "created_by": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "updated_by": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "ncobase_system_structs.ReadDictionary": {
      "type": "object",
      "properties": {
        "created_at": {
          "type": "integer"
        },
        "created_by": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "slug": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "updated_at": {
          "type": "integer"
        },
        "updated_by": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "ncobase_system_structs.ReadMenu": {
      "type": "object",
      "properties": {
        "children": {
          "type": "array",
          "items": {}
        },
        "created_at": {
          "type": "integer"
        },
        "created_by": {
          "type": "string"
        },
        "disabled": {
          "type": "boolean"
        },
        "extras": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "hidden": {
          "type": "boolean"
        },
        "icon": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "order": {
          "type": "integer"
        },
        "parent_id": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "perms": {
          "type": "string"
        },
        "slug": {
          "type": "string"
        },
        "target": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "updated_at": {
          "type": "integer"
        },
        "updated_by": {
          "type": "string"
        }
      }
    },
    "ncobase_system_structs.ReadOption": {
      "type": "object",
      "properties": {
        "autoload": {
          "type": "boolean"
        },
        "created_at": {
          "type": "integer"
        },
        "created_by": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "updated_at": {
          "type": "integer"
        },
        "updated_by": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "ncobase_system_structs.UpdateDictionaryBody": {
      "type": "object",
      "properties": {
        "created_by": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "slug": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "updated_by": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "ncobase_system_structs.UpdateMenuBody": {
      "type": "object",
      "properties": {
        "created_by": {
          "type": "string"
        },
        "disabled": {
          "type": "boolean"
        },
        "extras": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "hidden": {
          "type": "boolean"
        },
        "icon": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "order": {
          "type": "integer"
        },
        "parent_id": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "perms": {
          "type": "string"
        },
        "slug": {
          "type": "string"
        },
        "target": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "updated_by": {
          "type": "string"
        }
      }
    },
    "ncobase_system_structs.UpdateOptionBody": {
      "type": "object",
      "properties": {
        "autoload": {
          "type": "boolean"
        },
        "created_by": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "updated_by": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "ncobase_space_structs.AddDictionaryToSpaceRequest": {
      "type": "object",
      "required": [
        "dictionary_id"
      ],
      "properties": {
        "dictionary_id": {
          "type": "string"
        }
      }
    },
    "ncobase_space_structs.AddMenuToSpaceRequest": {
      "type": "object",
      "required": [
        "menu_id"
      ],
      "properties": {
        "menu_id": {
          "type": "string"
        }
      }
    },
    "ncobase_space_structs.AddOptionsToSpaceRequest": {
      "type": "object",
      "required": [
        "option_id"
      ],
      "properties": {
        "option_id": {
          "type": "string"
        }
      }
    },
    "ncobase_space_structs.AddSpaceOrganizationRequest": {
      "type": "object",
      "required": [
        "org_id"
      ],
      "properties": {
        "org_id": {
          "type": "string"
        }
      }
    },
    "ncobase_space_structs.AddUserToSpaceRoleRequest": {
      "type": "object",
      "required": [
        "role_id",
        "user_id"
      ],
      "properties": {
        "role_id": {
          "type": "string"
        },
        "user_id": {
          "type": "string"
        }
      }
    },
    "ncobase_space_structs.BillingPeriod": {
      "type": "string",
      "enum": [
        "monthly",
        "yearly",
        "one_time",
        "usage_based"
      ],
      "x-enum-varnames": [
        "PeriodMonthly",
        "PeriodYearly",
        "PeriodOneTime",
        "PeriodUsage"
      ]
    },
    "ncobase_space_structs.BillingStatus": {
      "type": "string",
      "enum": [
        "pending",
        "paid",
        "overdue",
        "cancelled",
        "refunded"
      ],
      "x-enum-varnames": [
        "StatusPending",
        "StatusPaid",
        "StatusOverdue",
        "StatusCancelled",
        "StatusRefunded"
      ]
    },
    "ncobase_space_structs.BillingSummary": {
      "type": "object",
      "properties": {
        "currency": {
          "type": "string"
        },
        "overdue_amount": {
          "type": "number"
        },
        "overdue_invoices": {
          "type": "integer"
        },
        "paid_amount": {
          "type": "number"
        },
        "paid_invoices": {
          "type": "integer"
        },
        "pending_amount": {
          "type": "number"
        },
        "space_id": {
          "type": "string"
        },
        "total_amount": {
          "type": "number"
        },
        "total_invoices": {
          "type": "integer"
        }
      }
    },
    "ncobase_space_structs.BulkUpdateError": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string"
        },
        "role_id": {
          "type": "string"
        },
        "user_id": {
          "type": "string"
        }
      }
    },
    "ncobase_space_structs.BulkUpdateResponse": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ncobase_space_structs.BulkUpdateError"
          }
        },
        "failed": {
          "type": "integer"
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ncobase_space_structs.UserSpaceRoleResponse"
          }
        },
        "success": {
          "type": "integer"
        },
        "total": {
          "type": "integer"
        }
      }
    },
    "ncobase_space_structs.BulkUpdateSettingsRequest": {
      "type": "object",
      "required": [
        "settings",
        "space_id"
      ],
      "properties": {
        "settings": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "space_id": {
          "type": "string"
        }
      }
    },
    "ncobase_space_structs.BulkUpdateUserSpaceRolesRequest": {
      "type": "object",
      "required": [
        "updates"
      ],
      "properties": {
        "updates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ncobase_space_structs.UserSpaceRoleUpdate"
          }
        }
      }
    },
    "ncobase_space_structs.CreateSpaceBillingBody": {
      "type": "object",
      "properties": {
        "amount": {
          "type": "number"
        },
        "billing_period": {
          "$ref": "#/definitions/ncobase_space_structs.BillingPeriod"
        },
        "created_by": {
          "type": "string"
        },
        "currency": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "due_date": {
          "type": "integer"
        },
        "extras": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "invoice_number": {
          "type": "string"
        },
        "paid_at": {
          "type": "integer"
        },
        "payment_method": {
          "type": "string"
        },
        "period_end": {
          "type": "integer"
        },
        "period_start": {
          "type": "integer"
        },
        "status": {
          "$ref": "#/definitions/ncobase_space_structs.BillingStatus"
        },
        "space_id": {
          "type": "string"
        },
        "updated_by": {
          "type": "string"
        },
        "usage_details": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        }
      }
    },
    "ncobase_space_structs.CreateSpaceBody": {
      "type": "object",
      "properties": {
        "copyright": {
          "type": "string"
        },
        "created_by": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "disabled": {
          "type": "boolean"
        },
        "expired_at": {
          "type": "integer"
        },
        "extras": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "keywords": {
          "type": "string"
        },
        "logo": {
          "type": "string"
        },
        "logo_alt": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "order": {
          "type": "integer"
        },
        "slug": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "updated_by": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "ncobase_space_structs.CreateSpaceQuotaBody": {
      "type": "object",
      "properties": {
        "created_by": {
          "type": "string"
        },
        "current_used": {
          "type": "integer"
        },
        "description": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "extras": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "max_value": {
          "type": "integer"
        },
        "quota_name": {
          "type": "string"
        },
        "quota_type": {
          "$ref": "#/definitions/ncobase_space_structs.QuotaType"
        },
        "space_id": {
          "type": "string"
        },
        "unit": {
          "$ref": "#/definitions/ncobase_space_structs.QuotaUnit"
        },
        "updated_by": {
          "type": "string"
        }
      }
    },
    "ncobase_space_structs.CreateSpaceSettingBody": {
      "type": "object",
      "properties": {
        "category": {
          "type": "string"
        },
        "created_by": {
          "type": "string"
        },
        "default_value": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "extras": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "is_public": {
          "type": "boolean"
        },
        "is_readonly": {
          "type": "boolean"
        },
        "is_required": {
          "type": "boolean"
        },
        "scope": {
          "$ref": "#/definitions/ncobase_space_structs.SettingScope"
        },
        "setting_key": {
          "type": "string"
        },
        "setting_name": {
          "type": "string"
        },
        "setting_type": {
          "$ref": "#/definitions/ncobase_space_structs.SettingType"
        },
        "setting_value": {
          "type": "string"
        },
        "space_id": {
          "type": "string"
        },
        "updated_by": {
          "type": "string"
        },
        "validation": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        }
      }
    },
    "ncobase_space_structs.PaymentRequest": {
      "type": "object",
      "required": [
        "amount",
        "billing_id",
        "payment_method"
      ],
      "properties": {
        "amount": {
          "type": "number"
        },
        "billing_id": {
          "type": "string"
        },
        "payment_method": {
          "type": "string"
        },
        "transaction_id": {
          "type": "string"
        }
      }
    },
    "ncobase_space_structs.QuotaType": {
      "type": "string",
      "enum": [
        "users",
        "storage",
        "api_calls",
        "projects",
        "custom"
      ],
      "x-enum-varnames": [
        "QuotaTypeUser",
        "QuotaTypeStorage",
        "QuotaTypeAPI",
        "QuotaTypeProject",
        "QuotaTypeCustom"
      ]
    },
    "ncobase_space_structs.QuotaUnit": {
      "type": "string",
      "enum": [
        "count",
        "bytes",
        "mb",
        "gb",
        "tb"
      ],
      "x-enum-varnames": [
        "UnitCount",
        "UnitBytes",
        "UnitMB",
        "UnitGB",
        "UnitTB"
      ]
    },
    "ncobase_space_structs.QuotaUsageRequest": {
      "type": "object",
      "required": [
        "delta",
        "quota_type",
        "space_id"
      ],
      "properties": {
        "delta": {
          "type": "integer"
        },
        "quota_type": {
          "$ref": "#/definitions/ncobase_space_structs.QuotaType"
        },
        "space_id": {
          "type": "string"
        }
      }
    },
    "ncobase_space_structs.ReadOrganization": {
      "type": "object",
      "properties": {
        "children": {
          "type": "array",
          "items": {}
        },
        "created_at": {
          "type": "integer"
        },
        "created_by": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "disabled": {
          "type": "boolean"
        },
        "extras": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "id": {
          "type": "string"
        },
        "leader": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "name": {
          "type": "string"
        },
        "parent_id": {
          "type": "string"
        },
        "slug": {
          "type": "string"
        },
        "updated_at": {
          "type": "integer"
        },
        "updated_by": {
          "type": "string"
        }
      }
    },
    "ncobase_space_structs.ReadSpace": {
      "type": "object",
      "properties": {
        "copyright": {
          "type": "string"
        },
        "created_at": {
          "type": "integer"
        },
        "created_by": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "disabled": {
          "type": "boolean"
        },
        "expired_at": {
          "type": "integer"
        },
        "extras": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "id": {
          "type": "string"
        },
        "keywords": {
          "type": "string"
        },
        "logo": {
          "type": "string"
        },
        "logo_alt": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "order": {
          "type": "integer"
        },
        "slug": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "updated_at": {
          "type": "integer"
        },
        "updated_by": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "ncobase_space_structs.ReadSpaceBilling": {
      "type": "object",
      "properties": {
        "amount": {
          "type": "number"
        },
        "billing_period": {
          "$ref": "#/definitions/ncobase_space_structs.BillingPeriod"
        },
        "created_at": {
          "type": "integer"
        },
        "created_by": {
          "type": "string"
        },
        "currency": {
          "type": "string"
        },
        "days_overdue": {
          "type": "integer"
        },
        "description": {
          "type": "string"
        },
        "due_date": {
          "type": "integer"
        },
        "extras": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "id": {
          "type": "string"
        },
        "invoice_number": {
          "type": "string"
        },
        "is_overdue": {
          "type": "boolean"
        },
        "paid_at": {
          "type": "integer"
        },
        "payment_method": {
          "type": "string"
        },
        "period_end": {
          "type": "integer"
        },
        "period_start": {
          "type": "integer"
        },
        "status": {
          "$ref": "#/definitions/ncobase_space_structs.BillingStatus"
        },
        "space_id": {
          "type": "string"
        },
        "updated_at": {
          "type": "integer"
        },
        "updated_by": {
          "type": "string"
        },
        "usage_details": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        }
      }
    },
    "ncobase_space_structs.ReadSpaceQuota": {
      "type": "object",
      "properties": {
        "created_at": {
          "type": "integer"
        },
        "created_by": {
          "type": "string"
        },
        "current_used": {
          "type": "integer"
        },
        "description": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "extras": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "id": {
          "type": "string"
        },
        "is_exceeded": {
          "type": "boolean"
        },
        "max_value": {
          "type": "integer"
        },
        "quota_name": {
          "type": "string"
        },
        "quota_type": {
          "$ref": "#/definitions/ncobase_space_structs.QuotaType"
        },
        "space_id": {
          "type": "string"
        },
        "unit": {
          "$ref": "#/definitions/ncobase_space_structs.QuotaUnit"
        },
        "updated_at": {
          "type": "integer"
        },
        "updated_by": {
          "type": "string"
        },
        "utilization_percent": {
          "type": "number"
        }
      }
    },
    "ncobase_space_structs.ReadSpaceSetting": {
      "type": "object",
      "properties": {
        "category": {
          "type": "string"
        },
        "created_at": {
          "type": "integer"
        },
        "created_by": {
          "type": "string"
        },
        "default_value": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "extras": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "id": {
          "type": "string"
        },
        "is_public": {
          "type": "boolean"
        },
        "is_readonly": {
          "type": "boolean"
        },
        "is_required": {
          "type": "boolean"
        },
        "scope": {
          "$ref": "#/definitions/ncobase_space_structs.SettingScope"
        },
        "setting_key": {
          "type": "string"
        },
        "setting_name": {
          "type": "string"
        },
        "setting_type": {
          "$ref": "#/definitions/ncobase_space_structs.SettingType"
        },
        "setting_value": {
          "type": "string"
        },
        "space_id": {
          "type": "string"
        },
        "updated_at": {
          "type": "integer"
        },
        "updated_by": {
          "type": "string"
        },
        "validation": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        }
      }
    },
    "ncobase_space_structs.SettingScope": {
      "type": "string",
      "enum": [
        "system",
        "space",
        "user",
        "feature"
      ],
      "x-enum-varnames": [
        "ScopeSystem",
        "Scope",
        "ScopeUser",
        "ScopeFeature"
      ]
    },
    "ncobase_space_structs.SettingType": {
      "type": "string",
      "enum": [
        "string",
        "number",
        "boolean",
        "json",
        "array"
      ],
      "x-enum-varnames": [
        "TypeString",
        "TypeNumber",
        "TypeBoolean",
        "TypeJSON",
        "TypeArray"
      ]
    },
    "ncobase_space_structs.SpaceDictionary": {
      "type": "object",
      "properties": {
        "dictionary_id": {
          "type": "string"
        },
        "space_id": {
          "type": "string"
        }
      }
    },
    "ncobase_space_structs.SpaceOrganizationRelation": {
      "type": "object",
      "properties": {
        "added_at": {
          "type": "integer"
        },
        "org_id": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "space_id": {
          "type": "string"
        }
      }
    },
    "ncobase_space_structs.SpaceMenu": {
      "type": "object",
      "properties": {
        "menu_id": {
          "type": "string"
        },
        "space_id": {
          "type": "string"
        }
      }
    },
    "ncobase_space_structs.SpaceOption": {
      "type": "object",
      "properties": {
        "option_id": {
          "type": "string"
        },
        "space_id": {
          "type": "string"
        }
      }
    },
    "ncobase_space_structs.SpaceRoleUsersResponse": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer"
        },
        "role_id": {
          "type": "string"
        },
        "space_id": {
          "type": "string"
        },
        "user_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ncobase_space_structs.SpaceUserInfo": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "joined_at": {
          "type": "integer"
        },
        "role_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "user_id": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "ncobase_space_structs.SpaceUsersListResponse": {
      "type": "object",
      "properties": {
        "cursor": {
          "type": "string"
        },
        "total": {
          "type": "integer"
        },
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ncobase_space_structs.SpaceUserInfo"
          }
        }
      }
    },
    "ncobase_space_structs.UpdateSpaceBody": {
      "type": "object",
      "properties": {
        "copyright": {
          "type": "string"
        },
        "created_by": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "disabled": {
          "type": "boolean"
        },
        "expired_at": {
          "type": "integer"
        },
        "extras": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "id": {
          "type": "string"
        },
        "keywords": {
          "type": "string"
        },
        "logo": {
          "type": "string"
        },
        "logo_alt": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "order": {
          "type": "integer"
        },
        "slug": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "updated_by": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "ncobase_space_structs.UpdateUserSpaceRoleRequest": {
      "type": "object",
      "required": [
        "new_role_id",
        "old_role_id"
      ],
      "properties": {
        "new_role_id": {
          "type": "string"
        },
        "old_role_id": {
          "type": "string"
        }
      }
    },
    "ncobase_space_structs.UserSpaceRoleResponse": {
      "type": "object",
      "properties": {
        "role_id": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "space_id": {
          "type": "string"
        },
        "user_id": {
          "type": "string"
        }
      }
    },
    "ncobase_space_structs.UserSpaceRoleUpdate": {
      "type": "object",
      "required": [
        "operation",
        "role_id",
        "user_id"
      ],
      "properties": {
        "old_role_id": {
          "description": "Required for \"update\" operation",
          "type": "string"
        },
        "operation": {
          "description": "\"add\", \"remove\", \"update\"",
          "type": "string"
        },
        "role_id": {
          "type": "string"
        },
        "user_id": {
          "type": "string"
        }
      }
    },
    "ncobase_space_structs.UserSpaceRolesResponse": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer"
        },
        "role_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "space_id": {
          "type": "string"
        },
        "user_id": {
          "type": "string"
        }
      }
    },
    "ncobase_user_structs.ApiKey": {
      "type": "object",
      "properties": {
        "created_at": {
          "type": "integer"
        },
        "id": {
          "type": "string"
        },
        "key": {
          "type": "string"
        },
        "last_used": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "user_id": {
          "type": "string"
        }
      }
    },
    "ncobase_user_structs.CreateApiKeyRequest": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "ncobase_user_structs.CreateEmployeeBody": {
      "type": "object",
      "properties": {
        "certifications": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "contact_info": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "department": {
          "type": "string"
        },
        "employee_id": {
          "type": "string"
        },
        "employment_type": {
          "type": "string"
        },
        "extras": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "hire_date": {
          "type": "string"
        },
        "manager_id": {
          "type": "string"
        },
        "position": {
          "type": "string"
        },
        "salary": {
          "type": "number"
        },
        "skills": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "status": {
          "type": "string"
        },
        "space_id": {
          "type": "string"
        },
        "termination_date": {
          "type": "string"
        },
        "user_id": {
          "type": "string"
        },
        "work_location": {
          "type": "string"
        }
      }
    },
    "ncobase_user_structs.PasswordResetRequest": {
      "type": "object",
      "required": [
        "email",
        "username"
      ],
      "properties": {
        "email": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "ncobase_user_structs.ReadEmployee": {
      "type": "object",
      "properties": {
        "certifications": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "contact_info": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "created_at": {
          "type": "integer"
        },
        "department": {
          "type": "string"
        },
        "employee_id": {
          "type": "string"
        },
        "employment_type": {
          "type": "string"
        },
        "extras": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "hire_date": {
          "type": "string"
        },
        "manager_id": {
          "type": "string"
        },
        "position": {
          "type": "string"
        },
        "salary": {
          "type": "number"
        },
        "skills": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "status": {
          "type": "string"
        },
        "space_id": {
          "type": "string"
        },
        "termination_date": {
          "type": "string"
        },
        "updated_at": {
          "type": "integer"
        },
        "user_id": {
          "type": "string"
        },
        "work_location": {
          "type": "string"
        }
      }
    },
    "ncobase_user_structs.ReadUser": {
      "type": "object",
      "properties": {
        "created_at": {
          "type": "integer"
        },
        "email": {
          "type": "string"
        },
        "extras": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "id": {
          "type": "string"
        },
        "is_admin": {
          "type": "boolean"
        },
        "is_certified": {
          "type": "boolean"
        },
        "phone": {
          "type": "string"
        },
        "status": {
          "type": "integer"
        },
        "updated_at": {
          "type": "integer"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "ncobase_user_structs.ReadUserProfile": {
      "type": "object",
      "properties": {
        "about": {
          "type": "string"
        },
        "display_name": {
          "type": "string"
        },
        "extras": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "first_name": {
          "type": "string"
        },
        "last_name": {
          "type": "string"
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
          }
        },
        "short_bio": {
          "type": "string"
        },
        "thumbnail": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "user_id": {
          "type": "string"
        }
      }
    },
    "ncobase_user_structs.UpdateEmployeeBody": {
      "type": "object",
      "properties": {
        "certifications": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "contact_info": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "department": {
          "type": "string"
        },
        "employee_id": {
          "type": "string"
        },
        "employment_type": {
          "type": "string"
        },
        "extras": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "hire_date": {
          "type": "string"
        },
        "manager_id": {
          "type": "string"
        },
        "position": {
          "type": "string"
        },
        "salary": {
          "type": "number"
        },
        "skills": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "status": {
          "type": "string"
        },
        "space_id": {
          "type": "string"
        },
        "termination_date": {
          "type": "string"
        },
        "user_id": {
          "type": "string"
        },
        "work_location": {
          "type": "string"
        }
      }
    },
    "ncobase_user_structs.UserBody": {
      "type": "object",
      "properties": {
        "created_at": {
          "type": "integer"
        },
        "email": {
          "type": "string"
        },
        "extras": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "id": {
          "type": "string"
        },
        "is_admin": {
          "type": "boolean"
        },
        "is_certified": {
          "type": "boolean"
        },
        "phone": {
          "type": "string"
        },
        "status": {
          "type": "integer"
        },
        "updated_at": {
          "type": "integer"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "ncobase_user_structs.UserMeshes": {
      "type": "object",
      "properties": {
        "api_keys": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ncobase_user_structs.ApiKey"
          }
        },
        "employee": {
          "$ref": "#/definitions/ncobase_user_structs.ReadEmployee"
        },
        "profile": {
          "$ref": "#/definitions/ncobase_user_structs.ReadUserProfile"
        },
        "user": {
          "$ref": "#/definitions/ncobase_user_structs.ReadUser"
        }
      }
    },
    "ncobase_user_structs.UserPassword": {
      "type": "object",
      "required": [
        "confirm",
        "new_password",
        "user"
      ],
      "properties": {
        "confirm": {
          "type": "string"
        },
        "new_password": {
          "type": "string"
        },
        "old_password": {
          "type": "string"
        },
        "user": {
          "type": "string"
        }
      }
    },
    "ncobase_user_structs.UserProfileBody": {
      "type": "object",
      "properties": {
        "about": {
          "type": "string"
        },
        "display_name": {
          "type": "string"
        },
        "extras": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "first_name": {
          "type": "string"
        },
        "last_name": {
          "type": "string"
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
          }
        },
        "short_bio": {
          "type": "string"
        },
        "thumbnail": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "user_id": {
          "type": "string"
        }
      }
    },
    "ncobase_workflow_structs.ActionType": {
      "type": "string",
      "enum": [
        "submit",
        "save",
        "revoke",
        "reassign",
        "addSign",
        "remind",
        "approve",
        "reject",
        "delegate",
        "transfer",
        "withdraw",
        "terminate",
        "suspend",
        "resume",
        "urge"
      ],
      "x-enum-comments": {
        "ActionAddSign": "Add countersign",
        "ActionApprove": "Approve",
        "ActionDelegate": "Delegate",
        "ActionReassign": "Reassign task",
        "ActionReject": "Reject",
        "ActionRemind": "Send reminder",
        "ActionResume": "Resume",
        "ActionRevoke": "Revoke approval",
        "ActionSave": "Save draft",
        "ActionSubmit": "Submit form",
        "ActionSuspend": "Suspend",
        "ActionTerminate": "Terminate",
        "ActionTransfer": "Transfer",
        "ActionUrge": "Urge",
        "ActionWithdraw": "Withdraw"
      },
      "x-enum-varnames": [
        "ActionSubmit",
        "ActionSave",
        "ActionRevoke",
        "ActionReassign",
        "ActionAddSign",
        "ActionRemind",
        "ActionApprove",
        "ActionReject",
        "ActionDelegate",
        "ActionTransfer",
        "ActionWithdraw",
        "ActionTerminate",
        "ActionSuspend",
        "ActionResume",
        "ActionUrge"
      ]
    },
    "ncobase_workflow_structs.CompleteTaskRequest": {
      "type": "object",
      "required": [
        "action",
        "operator",
        "task_id"
      ],
      "properties": {
        "action": {
          "$ref": "#/definitions/ncobase_workflow_structs.ActionType"
        },
        "attachments": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "comment": {
          "type": "string"
        },
        "form_data": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "operator": {
          "type": "string"
        },
        "task_id": {
          "type": "string"
        },
        "variables": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        }
      }
    },
    "ncobase_workflow_structs.CompleteTaskResponse": {
      "type": "object",
      "properties": {
        "action": {
          "$ref": "#/definitions/ncobase_workflow_structs.ActionType"
        },
        "end_time": {
          "type": "integer"
        },
        "next_nodes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "process_id": {
          "type": "string"
        },
        "task_id": {
          "type": "string"
        }
      }
    },
    "ncobase_workflow_structs.DelegateTaskRequest": {
      "type": "object",
      "required": [
        "delegate",
        "delegator",
        "task_id"
      ],
      "properties": {
        "comment": {
          "type": "string"
        },
        "delegate": {
          "type": "string"
        },
        "delegator": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        },
        "task_id": {
          "type": "string"
        }
      }
    },
    "ncobase_workflow_structs.DelegationBody": {
      "type": "object",
      "properties": {
        "conditions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "delegatee_id": {
          "type": "string"
        },
        "delegator_id": {
          "type": "string"
        },
        "end_time": {
          "type": "integer"
        },
        "extras": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "is_enabled": {
          "type": "boolean"
        },
        "node_type": {
          "type": "string"
        },
        "start_time": {
          "type": "integer"
        },
        "status": {
          "type": "string"
        },
        "template_id": {
          "type": "string"
        },
        "space_id": {
          "type": "string"
        }
      }
    },
    "ncobase_workflow_structs.HistoryBody": {
      "type": "object",
      "properties": {
        "action": {
          "type": "string"
        },
        "comment": {
          "type": "string"
        },
        "details": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "form_data": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "node_config": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "node_id": {
          "type": "string"
        },
        "node_name": {
          "type": "string"
        },
        "node_type": {
          "type": "string"
        },
        "operator": {
          "type": "string"
        },
        "operator_dept": {
          "type": "string"
        },
        "process_id": {
          "type": "string"
        },
        "task_id": {
          "type": "string"
        },
        "template_id": {
          "type": "string"
        },
        "space_id": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "variables": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        }
      }
    },
    "ncobase_workflow_structs.NodeBody": {
      "type": "object",
      "properties": {
        "assignees": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "branch_conditions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "branch_nodes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "conditions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "default_branch": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "extras": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "form_config": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "handlers": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "is_working_day": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "next_nodes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "node_key": {
          "type": "string"
        },
        "parallel_nodes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "permissions": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "prev_nodes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "process_id": {
          "type": "string"
        },
        "properties": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "required": {
          "type": "boolean"
        },
        "retry_interval": {
          "type": "integer"
        },
        "retry_times": {
          "type": "integer"
        },
        "skippable": {
          "type": "boolean"
        },
        "status": {
          "type": "string"
        },
        "template_id": {
          "type": "string"
        },
        "space_id": {
          "type": "string"
        },
        "timeout_config": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "timeout_duration": {
          "type": "integer"
        },
        "type": {
          "type": "string"
        },
        "variables": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        }
      }
    },
    "ncobase_workflow_structs.PriorityStrategy": {
      "type": "integer",
      "enum": [
        0,
        5,
        10,
        15
      ],
      "x-enum-varnames": [
        "PriorityLow",
        "PriorityNormal",
        "PriorityHigh",
        "PriorityUrgent"
      ]
    },
    "ncobase_workflow_structs.ProcessBody": {
      "type": "object",
      "properties": {
        "active_nodes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "allow_cancel": {
          "type": "boolean"
        },
        "allow_urge": {
          "type": "boolean"
        },
        "business_key": {
          "type": "string"
        },
        "callbacks": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "category": {
          "type": "string"
        },
        "current_node": {
          "type": "string"
        },
        "due_date": {
          "type": "integer"
        },
        "duration": {
          "type": "integer"
        },
        "end_node_id": {
          "type": "string"
        },
        "end_time": {
          "type": "integer"
        },
        "extras": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "flow_status": {
          "type": "string"
        },
        "form_code": {
          "type": "string"
        },
        "initiator": {
          "type": "string"
        },
        "initiator_dept": {
          "type": "string"
        },
        "is_suspended": {
          "type": "boolean"
        },
        "max_duration": {
          "type": "integer"
        },
        "module_code": {
          "type": "string"
        },
        "parent_id": {
          "type": "string"
        },
        "priority": {
          "type": "integer"
        },
        "process_code": {
          "type": "string"
        },
        "process_key": {
          "type": "string"
        },
        "retryable": {
          "type": "boolean"
        },
        "start_node_id": {
          "type": "string"
        },
        "start_time": {
          "type": "integer"
        },
        "status": {
          "type": "string"
        },
        "suspend_reason": {
          "type": "string"
        },
        "template_id": {
          "type": "string"
        },
        "space_id": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "urge_count": {
          "type": "integer"
        },
        "variables": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        }
      }
    },
    "ncobase_workflow_structs.ProcessDesignBody": {
      "type": "object",
      "properties": {
        "extras": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "graph_data": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "is_draft": {
          "type": "boolean"
        },
        "node_layouts": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "properties": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "source_version": {
          "type": "string"
        },
        "template_id": {
          "type": "string"
        },
        "space_id": {
          "type": "string"
        },
        "validation_rules": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "ncobase_workflow_structs.ReadDelegation": {
      "type": "object",
      "properties": {
        "conditions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "created_at": {
          "type": "integer"
        },
        "created_by": {
          "type": "string"
        },
        "delegatee_id": {
          "type": "string"
        },
        "delegator_id": {
          "type": "string"
        },
        "end_time": {
          "type": "integer"
        },
        "extras": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "id": {
          "type": "string"
        },
        "is_enabled": {
          "type": "boolean"
        },
        "node_type": {
          "type": "string"
        },
        "start_time": {
          "type": "integer"
        },
        "status": {
          "type": "string"
        },
        "template_id": {
          "type": "string"
        },
        "space_id": {
          "type": "string"
        },
        "updated_at": {
          "type": "integer"
        },
        "updated_by": {
          "type": "string"
        }
      }
    },
    "ncobase_workflow_structs.ReadHistory": {
      "type": "object",
      "properties": {
        "action": {
          "type": "string"
        },
        "comment": {
          "type": "string"
        },
        "created_at": {
          "type": "integer"
        },
        "created_by": {
          "type": "string"
        },
        "details": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "form_data": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "id": {
          "type": "string"
        },
        "node_config": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "node_id": {
          "type": "string"
        },
        "node_name": {
          "type": "string"
        },
        "node_type": {
          "type": "string"
        },
        "operator": {
          "type": "string"
        },
        "operator_dept": {
          "type": "string"
        },
        "process_id": {
          "type": "string"
        },
        "task_id": {
          "type": "string"
        },
        "template_id": {
          "type": "string"
        },
        "space_id": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "updated_at": {
          "type": "integer"
        },
        "updated_by": {
          "type": "string"
        },
        "variables": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        }
      }
    },
    "ncobase_workflow_structs.ReadNode": {
      "type": "object",
      "properties": {
        "assignees": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "branch_conditions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "branch_nodes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "conditions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "created_at": {
          "type": "integer"
        },
        "created_by": {
          "type": "string"
        },
        "default_branch": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "extras": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "form_config": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "handlers": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "id": {
          "type": "string"
        },
        "is_working_day": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "next_nodes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "node_key": {
          "type": "string"
        },
        "parallel_nodes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "permissions": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "prev_nodes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "process_id": {
          "type": "string"
        },
        "properties": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "required": {
          "type": "boolean"
        },
        "retry_interval": {
          "type": "integer"
        },
        "retry_times": {
          "type": "integer"
        },
        "skippable": {
          "type": "boolean"
        },
        "status": {
          "type": "string"
        },
        "template_id": {
          "type": "string"
        },
        "space_id": {
          "type": "string"
        },
        "timeout_config": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "timeout_duration": {
          "type": "integer"
        },
        "type": {
          "type": "string"
        },
        "updated_at": {
          "type": "integer"
        },
        "updated_by": {
          "type": "string"
        },
        "variables": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        }
      }
    },
    "ncobase_workflow_structs.ReadProcess": {
      "type": "object",
      "properties": {
        "active_nodes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "allow_cancel": {
          "type": "boolean"
        },
        "allow_urge": {
          "type": "boolean"
        },
        "business_key": {
          "type": "string"
        },
        "callbacks": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "category": {
          "type": "string"
        },
        "created_at": {
          "type": "integer"
        },
        "created_by": {
          "type": "string"
        },
        "current_node": {
          "type": "string"
        },
        "due_date": {
          "type": "integer"
        },
        "duration": {
          "type": "integer"
        },
        "end_node_id": {
          "type": "string"
        },
        "end_time": {
          "type": "integer"
        },
        "extras": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "flow_status": {
          "type": "string"
        },
        "form_code": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "initiator": {
          "type": "string"
        },
        "initiator_dept": {
          "type": "string"
        },
        "is_suspended": {
          "type": "boolean"
        },
        "max_duration": {
          "type": "integer"
        },
        "module_code": {
          "type": "string"
        },
        "parent_id": {
          "type": "string"
        },
        "priority": {
          "type": "integer"
        },
        "process_code": {
          "type": "string"
        },
        "process_key": {
          "type": "string"
        },
        "retryable": {
          "type": "boolean"
        },
        "start_node_id": {
          "type": "string"
        },
        "start_time": {
          "type": "integer"
        },
        "status": {
          "type": "string"
        },
        "suspend_reason": {
          "type": "string"
        },
        "template_id": {
          "type": "string"
        },
        "space_id": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "updated_at": {
          "type": "integer"
        },
        "updated_by": {
          "type": "string"
        },
        "urge_count": {
          "type": "integer"
        },
        "variables": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        }
      }
    },
    "ncobase_workflow_structs.ReadProcessDesign": {
      "type": "object",
      "properties": {
        "created_at": {
          "type": "integer"
        },
        "created_by": {
          "type": "string"
        },
        "extras": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "graph_data": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "id": {
          "type": "string"
        },
        "is_draft": {
          "type": "boolean"
        },
        "node_layouts": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "properties": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "source_version": {
          "type": "string"
        },
        "template_id": {
          "type": "string"
        },
        "space_id": {
          "type": "string"
        },
        "updated_at": {
          "type": "integer"
        },
        "updated_by": {
          "type": "string"
        },
        "validation_rules": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "ncobase_workflow_structs.ReadRule": {
      "type": "object",
      "properties": {
        "actions": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "code": {
          "type": "string"
        },
        "conditions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "created_at": {
          "type": "integer"
        },
        "created_by": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "effective_time": {
          "type": "integer"
        },
        "expire_time": {
          "type": "integer"
        },
        "extras": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "id": {
          "type": "string"
        },
        "is_enabled": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "node_key": {
          "type": "string"
        },
        "priority": {
          "type": "integer"
        },
        "rule_key": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "template_id": {
          "type": "string"
        },
        "space_id": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "updated_at": {
          "type": "integer"
        },
        "updated_by": {
          "type": "string"
        }
      }
    },
    "ncobase_workflow_structs.ReadTask": {
      "type": "object",
      "properties": {
        "action": {
          "type": "string"
        },
        "allowed_actions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "assign_strategy": {
          "type": "string"
        },
        "assignees": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "candidates": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "category": {
          "type": "string"
        },
        "claim_time": {
          "type": "integer"
        },
        "comment": {
          "type": "string"
        },
        "created_at": {
          "type": "integer"
        },
        "created_by": {
          "type": "string"
        },
        "delegated_from": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "description": {
          "type": "string"
        },
        "due_time": {
          "type": "integer"
        },
        "duration": {
          "type": "integer"
        },
        "end_time": {
          "type": "integer"
        },
        "extras": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "form_data": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "id": {
          "type": "string"
        },
        "is_delegated": {
          "type": "boolean"
        },
        "is_resubmit": {
          "type": "boolean"
        },
        "is_timeout": {
          "type": "boolean"
        },
        "is_transferred": {
          "type": "boolean"
        },
        "is_urged": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "node_key": {
          "type": "string"
        },
        "node_type": {
          "type": "string"
        },
        "parent_task_id": {
          "type": "string"
        },
        "priority": {
          "type": "integer"
        },
        "process_id": {
          "type": "string"
        },
        "restrictions": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "start_time": {
          "type": "integer"
        },
        "status": {
          "type": "string"
        },
        "sub_tasks": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "task_key": {
          "type": "string"
        },
        "space_id": {
          "type": "string"
        },
        "updated_at": {
          "type": "integer"
        },
        "updated_by": {
          "type": "string"
        },
        "urge_count": {
          "type": "integer"
        },
        "variables": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "weight": {
          "$ref": "#/definitions/ncobase_workflow_structs.PriorityStrategy"
        }
      }
    },
    "ncobase_workflow_structs.ReadTemplate": {
      "type": "object",
      "properties": {
        "allow_cancel": {
          "type": "boolean"
        },
        "allow_delegate": {
          "type": "boolean"
        },
        "allow_transfer": {
          "type": "boolean"
        },
        "allow_urge": {
          "type": "boolean"
        },
        "category": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "created_at": {
          "type": "integer"
        },
        "created_by": {
          "type": "string"
        },
        "default_title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "disabled": {
          "type": "boolean"
        },
        "effective_time": {
          "type": "integer"
        },
        "expire_time": {
          "type": "integer"
        },
        "extras": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "form_code": {
          "type": "string"
        },
        "form_config": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "form_permissions": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "id": {
          "type": "string"
        },
        "is_auto_start": {
          "type": "boolean"
        },
        "is_draft_enabled": {
          "type": "boolean"
        },
        "is_latest": {
          "type": "boolean"
        },
        "module_code": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "node_config": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "node_events": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "node_rules": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "permission_configs": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "process_rules": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "reminder_config": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "role_configs": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "source_version": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "strict_mode": {
          "type": "boolean"
        },
        "template_key": {
          "type": "string"
        },
        "space_id": {
          "type": "string"
        },
        "timeout_config": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "type": {
          "type": "string"
        },
        "updated_at": {
          "type": "integer"
        },
        "updated_by": {
          "type": "string"
        },
        "version": {
          "type": "string"
        },
        "visible_range": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        }
      }
    },
    "ncobase_workflow_structs.RuleBody": {
      "type": "object",
      "properties": {
        "actions": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "code": {
          "type": "string"
        },
        "conditions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "description": {
          "type": "string"
        },
        "effective_time": {
          "type": "integer"
        },
        "expire_time": {
          "type": "integer"
        },
        "extras": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "is_enabled": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "node_key": {
          "type": "string"
        },
        "priority": {
          "type": "integer"
        },
        "rule_key": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "template_id": {
          "type": "string"
        },
        "space_id": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "ncobase_workflow_structs.StartProcessRequest": {
      "type": "object",
      "required": [
        "business_key",
        "initiator",
        "template_id"
      ],
      "properties": {
        "business_key": {
          "type": "string"
        },
        "form_code": {
          "type": "string"
        },
        "form_data": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "initiator": {
          "type": "string"
        },
        "initiator_dept": {
          "type": "string"
        },
        "module_code": {
          "type": "string"
        },
        "priority": {
          "type": "integer"
        },
        "template_id": {
          "type": "string"
        },
        "space_id": {
          "type": "string"
        },
        "variables": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        }
      }
    },
    "ncobase_workflow_structs.StartProcessResponse": {
      "type": "object",
      "properties": {
        "process_id": {
          "type": "string"
        },
        "start_time": {
          "type": "integer"
        },
        "status": {
          "$ref": "#/definitions/ncobase_workflow_structs.Status"
        },
        "variables": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        }
      }
    },
    "ncobase_workflow_structs.Status": {
      "type": "string",
      "enum": [
        "draft",
        "ready",
        "active",
        "pending",
        "suspended",
        "processing",
        "completed",
        "compensated",
        "rejected",
        "cancelled",
        "terminated",
        "rollbacked",
        "withdrawn",
        "error"
      ],
      "x-enum-comments": {
        "StatusActive": "Active",
        "StatusCancelled": "Cancelled",
        "StatusCompensated": "Compensated",
        "StatusCompleted": "Completed",
        "StatusDraft": "Draft",
        "StatusError": "Error",
        "StatusPending": "Pending",
        "StatusProcessing": "Processing",
        "StatusReady": "Ready",
        "StatusRejected": "Rejected",
        "StatusRollbacked": "Rollbacked",
        "StatusSuspended": "Suspended",
        "StatusTerminated": "Terminated",
        "StatusWithdrawn": "Withdrawn"
      },
      "x-enum-varnames": [
        "StatusDraft",
        "StatusReady",
        "StatusActive",
        "StatusPending",
        "StatusSuspended",
        "StatusProcessing",
        "StatusCompleted",
        "StatusCompensated",
        "StatusRejected",
        "StatusCancelled",
        "StatusTerminated",
        "StatusRollbacked",
        "StatusWithdrawn",
        "StatusError"
      ]
    },
    "ncobase_workflow_structs.TaskBody": {
      "type": "object",
      "properties": {
        "action": {
          "type": "string"
        },
        "allowed_actions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "assign_strategy": {
          "type": "string"
        },
        "assignees": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "candidates": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "category": {
          "type": "string"
        },
        "claim_time": {
          "type": "integer"
        },
        "comment": {
          "type": "string"
        },
        "delegated_from": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "description": {
          "type": "string"
        },
        "due_time": {
          "type": "integer"
        },
        "duration": {
          "type": "integer"
        },
        "end_time": {
          "type": "integer"
        },
        "extras": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "form_data": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "is_delegated": {
          "type": "boolean"
        },
        "is_resubmit": {
          "type": "boolean"
        },
        "is_timeout": {
          "type": "boolean"
        },
        "is_transferred": {
          "type": "boolean"
        },
        "is_urged": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "node_key": {
          "type": "string"
        },
        "node_type": {
          "type": "string"
        },
        "parent_task_id": {
          "type": "string"
        },
        "priority": {
          "type": "integer"
        },
        "process_id": {
          "type": "string"
        },
        "restrictions": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "start_time": {
          "type": "integer"
        },
        "status": {
          "type": "string"
        },
        "sub_tasks": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "task_key": {
          "type": "string"
        },
        "space_id": {
          "type": "string"
        },
        "urge_count": {
          "type": "integer"
        },
        "variables": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "weight": {
          "$ref": "#/definitions/ncobase_workflow_structs.PriorityStrategy"
        }
      }
    },
    "ncobase_workflow_structs.TemplateBody": {
      "type": "object",
      "properties": {
        "allow_cancel": {
          "type": "boolean"
        },
        "allow_delegate": {
          "type": "boolean"
        },
        "allow_transfer": {
          "type": "boolean"
        },
        "allow_urge": {
          "type": "boolean"
        },
        "category": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "default_title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "disabled": {
          "type": "boolean"
        },
        "effective_time": {
          "type": "integer"
        },
        "expire_time": {
          "type": "integer"
        },
        "extras": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "form_code": {
          "type": "string"
        },
        "form_config": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "form_permissions": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "is_auto_start": {
          "type": "boolean"
        },
        "is_draft_enabled": {
          "type": "boolean"
        },
        "is_latest": {
          "type": "boolean"
        },
        "module_code": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "node_config": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "node_events": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "node_rules": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "permission_configs": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "process_rules": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "reminder_config": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "role_configs": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "source_version": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "strict_mode": {
          "type": "boolean"
        },
        "template_key": {
          "type": "string"
        },
        "space_id": {
          "type": "string"
        },
        "timeout_config": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "type": {
          "type": "string"
        },
        "version": {
          "type": "string"
        },
        "visible_range": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        }
      }
    },
    "ncobase_workflow_structs.TerminateProcessRequest": {
      "type": "object",
      "required": [
        "operator",
        "process_id"
      ],
      "properties": {
        "comment": {
          "type": "string"
        },
        "operator": {
          "type": "string"
        },
        "process_id": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        }
      }
    },
    "ncobase_workflow_structs.TransferTaskRequest": {
      "type": "object",
      "required": [
        "task_id",
        "transferee",
        "transferor"
      ],
      "properties": {
        "comment": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        },
        "task_id": {
          "type": "string"
        },
        "transferee": {
          "type": "string"
        },
        "transferor": {
          "type": "string"
        }
      }
    },
    "ncobase_workflow_structs.UpdateDelegationBody": {
      "type": "object",
      "properties": {
        "conditions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "delegatee_id": {
          "type": "string"
        },
        "delegator_id": {
          "type": "string"
        },
        "end_time": {
          "type": "integer"
        },
        "extras": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "id": {
          "type": "string"
        },
        "is_enabled": {
          "type": "boolean"
        },
        "node_type": {
          "type": "string"
        },
        "start_time": {
          "type": "integer"
        },
        "status": {
          "type": "string"
        },
        "template_id": {
          "type": "string"
        },
        "space_id": {
          "type": "string"
        }
      }
    },
    "ncobase_workflow_structs.UpdateNodeBody": {
      "type": "object",
      "properties": {
        "assignees": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "branch_conditions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "branch_nodes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "conditions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "default_branch": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "extras": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "form_config": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "handlers": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "id": {
          "type": "string"
        },
        "is_working_day": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "next_nodes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "node_key": {
          "type": "string"
        },
        "parallel_nodes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "permissions": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "prev_nodes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "process_id": {
          "type": "string"
        },
        "properties": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "required": {
          "type": "boolean"
        },
        "retry_interval": {
          "type": "integer"
        },
        "retry_times": {
          "type": "integer"
        },
        "skippable": {
          "type": "boolean"
        },
        "status": {
          "type": "string"
        },
        "template_id": {
          "type": "string"
        },
        "space_id": {
          "type": "string"
        },
        "timeout_config": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "timeout_duration": {
          "type": "integer"
        },
        "type": {
          "type": "string"
        },
        "variables": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        }
      }
    },
    "ncobase_workflow_structs.UpdateProcessBody": {
      "type": "object",
      "properties": {
        "active_nodes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "allow_cancel": {
          "type": "boolean"
        },
        "allow_urge": {
          "type": "boolean"
        },
        "business_key": {
          "type": "string"
        },
        "callbacks": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "category": {
          "type": "string"
        },
        "current_node": {
          "type": "string"
        },
        "due_date": {
          "type": "integer"
        },
        "duration": {
          "type": "integer"
        },
        "end_node_id": {
          "type": "string"
        },
        "end_time": {
          "type": "integer"
        },
        "extras": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "flow_status": {
          "type": "string"
        },
        "form_code": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "initiator": {
          "type": "string"
        },
        "initiator_dept": {
          "type": "string"
        },
        "is_suspended": {
          "type": "boolean"
        },
        "max_duration": {
          "type": "integer"
        },
        "module_code": {
          "type": "string"
        },
        "parent_id": {
          "type": "string"
        },
        "priority": {
          "type": "integer"
        },
        "process_code": {
          "type": "string"
        },
        "process_key": {
          "type": "string"
        },
        "retryable": {
          "type": "boolean"
        },
        "start_node_id": {
          "type": "string"
        },
        "start_time": {
          "type": "integer"
        },
        "status": {
          "type": "string"
        },
        "suspend_reason": {
          "type": "string"
        },
        "template_id": {
          "type": "string"
        },
        "space_id": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "urge_count": {
          "type": "integer"
        },
        "variables": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        }
      }
    },
    "ncobase_workflow_structs.UpdateProcessDesignBody": {
      "type": "object",
      "properties": {
        "extras": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "graph_data": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "id": {
          "type": "string"
        },
        "is_draft": {
          "type": "boolean"
        },
        "node_layouts": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "properties": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "source_version": {
          "type": "string"
        },
        "template_id": {
          "type": "string"
        },
        "space_id": {
          "type": "string"
        },
        "validation_rules": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "ncobase_workflow_structs.UpdateRuleBody": {
      "type": "object",
      "properties": {
        "actions": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "code": {
          "type": "string"
        },
        "conditions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "description": {
          "type": "string"
        },
        "effective_time": {
          "type": "integer"
        },
        "expire_time": {
          "type": "integer"
        },
        "extras": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "id": {
          "type": "string"
        },
        "is_enabled": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "node_key": {
          "type": "string"
        },
        "priority": {
          "type": "integer"
        },
        "rule_key": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "template_id": {
          "type": "string"
        },
        "space_id": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "ncobase_workflow_structs.UpdateTaskBody": {
      "type": "object",
      "properties": {
        "action": {
          "type": "string"
        },
        "allowed_actions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "assign_strategy": {
          "type": "string"
        },
        "assignees": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "candidates": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "category": {
          "type": "string"
        },
        "claim_time": {
          "type": "integer"
        },
        "comment": {
          "type": "string"
        },
        "delegated_from": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "description": {
          "type": "string"
        },
        "due_time": {
          "type": "integer"
        },
        "duration": {
          "type": "integer"
        },
        "end_time": {
          "type": "integer"
        },
        "extras": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "form_data": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "id": {
          "type": "string"
        },
        "is_delegated": {
          "type": "boolean"
        },
        "is_resubmit": {
          "type": "boolean"
        },
        "is_timeout": {
          "type": "boolean"
        },
        "is_transferred": {
          "type": "boolean"
        },
        "is_urged": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "node_key": {
          "type": "string"
        },
        "node_type": {
          "type": "string"
        },
        "parent_task_id": {
          "type": "string"
        },
        "priority": {
          "type": "integer"
        },
        "process_id": {
          "type": "string"
        },
        "restrictions": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "start_time": {
          "type": "integer"
        },
        "status": {
          "type": "string"
        },
        "sub_tasks": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "task_key": {
          "type": "string"
        },
        "space_id": {
          "type": "string"
        },
        "urge_count": {
          "type": "integer"
        },
        "variables": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "weight": {
          "$ref": "#/definitions/ncobase_workflow_structs.PriorityStrategy"
        }
      }
    },
    "ncobase_workflow_structs.UpdateTemplateBody": {
      "type": "object",
      "properties": {
        "allow_cancel": {
          "type": "boolean"
        },
        "allow_delegate": {
          "type": "boolean"
        },
        "allow_transfer": {
          "type": "boolean"
        },
        "allow_urge": {
          "type": "boolean"
        },
        "category": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "default_title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "disabled": {
          "type": "boolean"
        },
        "effective_time": {
          "type": "integer"
        },
        "expire_time": {
          "type": "integer"
        },
        "extras": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "form_code": {
          "type": "string"
        },
        "form_config": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "form_permissions": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "id": {
          "type": "string"
        },
        "is_auto_start": {
          "type": "boolean"
        },
        "is_draft_enabled": {
          "type": "boolean"
        },
        "is_latest": {
          "type": "boolean"
        },
        "module_code": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "node_config": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "node_events": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "node_rules": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "permission_configs": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "process_rules": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "reminder_config": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "role_configs": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "source_version": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "strict_mode": {
          "type": "boolean"
        },
        "template_key": {
          "type": "string"
        },
        "space_id": {
          "type": "string"
        },
        "timeout_config": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        },
        "type": {
          "type": "string"
        },
        "version": {
          "type": "string"
        },
        "visible_range": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        }
      }
    },
    "ncobase_workflow_structs.UrgeTaskRequest": {
      "type": "object",
      "required": [
        "operator",
        "task_id"
      ],
      "properties": {
        "comment": {
          "type": "string"
        },
        "operator": {
          "type": "string"
        },
        "task_id": {
          "type": "string"
        },
        "variables": {
          "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
        }
      }
    },
    "ncobase_workflow_structs.WithdrawTaskRequest": {
      "type": "object",
      "required": [
        "operator",
        "task_id"
      ],
      "properties": {
        "comment": {
          "type": "string"
        },
        "operator": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        },
        "task_id": {
          "type": "string"
        }
      }
    }
  },
  "securityDefinitions": {
    "Bearer": {
      "description": "Type \"Bearer\" followed by a space and JWT token.",
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  }
}
