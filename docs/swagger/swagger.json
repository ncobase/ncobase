{
    "swagger": "2.0",
    "info": {
        "description": "Base Development Framework",
        "title": "Ncobase",
        "contact": {},
        "version": "0.1.0"
    },
    "paths": {
        "/cms/taxonomies": {
            "get": {
                "description": "Retrieve a list of taxonomies.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "cms"
                ],
                "summary": "List taxonomies",
                "parameters": [
                    {
                        "type": "boolean",
                        "name": "children",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "direction",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "parent",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "tenant",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "type",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/structs.ReadTaxonomy"
                            }
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a new taxonomy.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "cms"
                ],
                "summary": "Create taxonomy",
                "parameters": [
                    {
                        "description": "CreateTaxonomyBody object",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/structs.CreateTaxonomyBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/structs.ReadTaxonomy"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/cms/taxonomies/{slug}": {
            "get": {
                "description": "Retrieve details of a taxonomy.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "cms"
                ],
                "summary": "Get taxonomy",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Taxonomy slug",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/structs.ReadTaxonomy"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update an existing taxonomy.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "cms"
                ],
                "summary": "Update taxonomy",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Taxonomy slug",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "UpdateTaxonomyBody object",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/structs.UpdateTaxonomyBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/structs.ReadTaxonomy"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete an existing taxonomy.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "cms"
                ],
                "summary": "Delete taxonomy",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Taxonomy slug",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/cms/topics": {
            "get": {
                "description": "Retrieve a list of topics.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "cms"
                ],
                "summary": "List topics",
                "parameters": [
                    {
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "direction",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "taxonomy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "tenant",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/structs.ReadTopic"
                            }
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a new topic.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "cms"
                ],
                "summary": "Create topic",
                "parameters": [
                    {
                        "description": "CreateTopicBody object",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/structs.CreateTopicBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/structs.ReadTopic"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/cms/topics/{slug}": {
            "get": {
                "description": "Retrieve details of a topic.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "cms"
                ],
                "summary": "Get topic",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Topic slug",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/structs.ReadTopic"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update an existing topic, either fully or partially.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "cms"
                ],
                "summary": "Update topic",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Topic slug",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "UpdateTopicBody object",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/structs.UpdateTopicBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/structs.ReadTopic"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete an existing topic.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "cms"
                ],
                "summary": "Delete topic",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Topic slug",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/flow/delegations": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "List delegation rules with pagination",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "flow"
                ],
                "summary": "List delegations",
                "parameters": [
                    {
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "delegator_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "direction",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "name": "is_enabled",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "node_type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "template_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "tenant",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/structs.ReadDelegation"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a new delegation rule",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "flow"
                ],
                "summary": "Create delegation",
                "parameters": [
                    {
                        "description": "Delegation creation body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/structs.DelegationBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/structs.ReadDelegation"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/flow/delegations/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get delegation rule details",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "flow"
                ],
                "summary": "Get delegation",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Delegation ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/structs.ReadDelegation"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update delegation rule details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "flow"
                ],
                "summary": "Update delegation",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Delegation ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Delegation update body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/structs.UpdateDelegationBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/structs.ReadDelegation"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete a delegation rule",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "flow"
                ],
                "summary": "Delete delegation",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Delegation ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/flow/delegations/{id}/disable": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Disable a delegation rule",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "flow"
                ],
                "summary": "Disable delegation",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Delegation ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/flow/delegations/{id}/enable": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Enable a delegation rule",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "flow"
                ],
                "summary": "Enable delegation",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Delegation ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/flow/histories": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "List history records with pagination",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "flow"
                ],
                "summary": "List histories",
                "parameters": [
                    {
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "direction",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "node_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "operator",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "process_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "task_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "tenant",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "type",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/structs.ReadHistory"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a new history record",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "flow"
                ],
                "summary": "Create history",
                "parameters": [
                    {
                        "description": "History creation body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/structs.HistoryBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/structs.ReadHistory"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/flow/histories/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get history record details",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "flow"
                ],
                "summary": "Get history",
                "parameters": [
                    {
                        "type": "string",
                        "description": "History ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/structs.ReadHistory"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/flow/nodes": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "List workflow nodes with pagination",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "flow"
                ],
                "summary": "List nodes",
                "parameters": [
                    {
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "direction",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "process_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "tenant",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "type",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/structs.ReadNode"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a new workflow node",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "flow"
                ],
                "summary": "Create node",
                "parameters": [
                    {
                        "description": "Node creation body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/structs.NodeBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/structs.ReadNode"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/flow/nodes/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get workflow node details",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "flow"
                ],
                "summary": "Get node",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Node Key",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/structs.ReadNode"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update workflow node details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "flow"
                ],
                "summary": "Update node",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Node ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Node update body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/structs.UpdateNodeBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/structs.ReadNode"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete a workflow node",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "flow"
                ],
                "summary": "Delete node",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Node Key",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/flow/nodes/{id}/rules": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get all rules associated with a node",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "flow"
                ],
                "summary": "Get node rules",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Node Key",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/structs.ReadRule"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/flow/nodes/{id}/status": {
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update workflow node status",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "flow"
                ],
                "summary": "Update node status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Node ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "New Status",
                        "name": "status",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/flow/nodes/{id}/tasks": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get all tasks associated with a node",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "flow"
                ],
                "summary": "Get node tasks",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Node Key",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/structs.ReadTask"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/flow/nodes/{id}/validate": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Validate configuration of a workflow node",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "flow"
                ],
                "summary": "Validate node config",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Node ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/flow/operators/{operator}/histories": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get complete history of operations by an operator",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "flow"
                ],
                "summary": "Get operator history",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Operator ID",
                        "name": "operator",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/structs.ReadHistory"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/flow/process-designs": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "List process designs with pagination",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "flow"
                ],
                "summary": "List process designs",
                "parameters": [
                    {
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "direction",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "name": "is_draft",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "template_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "tenant",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/structs.ReadProcessDesign"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a new process design",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "flow"
                ],
                "summary": "Create process design",
                "parameters": [
                    {
                        "description": "Process design creation body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/structs.ProcessDesignBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/structs.ReadProcessDesign"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/flow/process-designs/validate": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Validate process design structure and rules",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "flow"
                ],
                "summary": "Validate design",
                "parameters": [
                    {
                        "description": "Process design data",
                        "name": "design",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/flow/process-designs/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get process design details",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "flow"
                ],
                "summary": "Get process design",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Process Design ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/structs.ReadProcessDesign"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update process design details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "flow"
                ],
                "summary": "Update process design",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Process Design ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Process design update body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/structs.UpdateProcessDesignBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/structs.ReadProcessDesign"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete a process design",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "flow"
                ],
                "summary": "Delete process design",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Process Design ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/flow/process-designs/{id}/drafts": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Save process design as draft",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "flow"
                ],
                "summary": "Save design draft",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Process Design ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Process design data",
                        "name": "design",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/flow/process-designs/{id}/export": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Export process design to file",
                "produces": [
                    "application/octet-stream"
                ],
                "tags": [
                    "flow"
                ],
                "summary": "Export design",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Process Design ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "file"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/flow/process-designs/{id}/publish": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Publish process design draft as official version",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "flow"
                ],
                "summary": "Publish design draft",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Process Design ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/flow/processes": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "List process instances with pagination",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "flow"
                ],
                "summary": "List processes",
                "parameters": [
                    {
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "direction",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "initiator",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "name": "priority",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "tenant",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/structs.ReadProcess"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a new process instance",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "flow"
                ],
                "summary": "Create process",
                "parameters": [
                    {
                        "description": "Process creation body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/structs.ProcessBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/structs.ReadProcess"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/flow/processes/start": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Start a new process instance",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "flow"
                ],
                "summary": "Start process",
                "parameters": [
                    {
                        "description": "Process start request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/structs.StartProcessRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/structs.StartProcessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/flow/processes/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get process instance details",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "flow"
                ],
                "summary": "Get process",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Process Key",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/structs.ReadProcess"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update process instance details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "flow"
                ],
                "summary": "Update process",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Process ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Process update body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/structs.UpdateProcessBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/structs.ReadProcess"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete process instance",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "flow"
                ],
                "summary": "Delete process",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Process Key",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/flow/processes/{id}/complete": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Complete a process instance",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "flow"
                ],
                "summary": "Complete process",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Process ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/flow/processes/{id}/resume": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Resume a suspended process instance",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "flow"
                ],
                "summary": "Resume process",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Process ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/flow/processes/{id}/suspend": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Suspend a process instance",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "flow"
                ],
                "summary": "Suspend process",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Process ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Suspension reason",
                        "name": "reason",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/flow/processes/{id}/terminate": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Terminate a process instance",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "flow"
                ],
                "summary": "Terminate process",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Process ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Process termination request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/structs.TerminateProcessRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/flow/processes/{process_id}/evaluate-rules": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Evaluate rules for a process instance",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "flow"
                ],
                "summary": "Evaluate rules",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Process ID",
                        "name": "process_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Data for rule evaluation",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/flow/processes/{process_id}/histories": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get complete history of a process instance",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "flow"
                ],
                "summary": "Get process history",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Process ID",
                        "name": "process_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/structs.ReadHistory"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/flow/processes/{process_id}/nodes": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get all nodes of a process instance",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "flow"
                ],
                "summary": "Get process nodes",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Process ID",
                        "name": "process_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/structs.ReadNode"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/flow/rules": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "List workflow rules with pagination",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "flow"
                ],
                "summary": "List rules",
                "parameters": [
                    {
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "direction",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "name": "is_enabled",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "node_key",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "template_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "tenant",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "type",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/structs.ReadRule"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a new workflow rule",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "flow"
                ],
                "summary": "Create rule",
                "parameters": [
                    {
                        "description": "Rule creation body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/structs.RuleBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/structs.ReadRule"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/flow/rules/active": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get active rules for template or node",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "flow"
                ],
                "summary": "Get active rules",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Template ID",
                        "name": "template_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Node Key",
                        "name": "node_key",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/structs.ReadRule"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/flow/rules/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get workflow rule details",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "flow"
                ],
                "summary": "Get rule",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Rule Key",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/structs.ReadRule"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update workflow rule details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "flow"
                ],
                "summary": "Update rule",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Rule ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Rule update body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/structs.UpdateRuleBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/structs.ReadRule"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete a workflow rule",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "flow"
                ],
                "summary": "Delete rule",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Rule ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/flow/rules/{id}/disable": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Disable a workflow rule",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "flow"
                ],
                "summary": "Disable rule",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Rule ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/flow/rules/{id}/enable": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Enable a workflow rule",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "flow"
                ],
                "summary": "Enable rule",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Rule ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/flow/rules/{id}/validate": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Validate a workflow rule",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "flow"
                ],
                "summary": "Validate rule",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Rule ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/flow/tasks": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "List tasks with pagination",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "flow"
                ],
                "summary": "List tasks",
                "parameters": [
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "name": "assignees",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "direction",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "name": "is_timeout",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "node_key",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "node_type",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "name": "priority",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "process_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "tenant",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/structs.ReadTask"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a new task",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "flow"
                ],
                "summary": "Create task",
                "parameters": [
                    {
                        "description": "Task creation body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/structs.TaskBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/structs.ReadTask"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/flow/tasks/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get task details",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "flow"
                ],
                "summary": "Get task",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Task ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/structs.ReadTask"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update task details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "flow"
                ],
                "summary": "Update task",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Task ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Task update body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/structs.UpdateTaskBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/structs.ReadTask"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete a task",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "flow"
                ],
                "summary": "Delete task",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Task ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/flow/tasks/{id}/claim": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Claim an unassigned task",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "flow"
                ],
                "summary": "Claim task",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Task ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Task assignees",
                        "name": "assignees",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/flow/tasks/{id}/complete": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Complete a task",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "flow"
                ],
                "summary": "Complete task",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Task ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Task completion request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/structs.CompleteTaskRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/structs.CompleteTaskResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/flow/tasks/{id}/delegate": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delegate a task to another user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "flow"
                ],
                "summary": "Delegate task",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Task ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Task delegation request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/structs.DelegateTaskRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/flow/tasks/{id}/transfer": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Transfer a task to another user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "flow"
                ],
                "summary": "Transfer task",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Task ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Task transfer request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/structs.TransferTaskRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/flow/tasks/{id}/urge": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Send urge request for a task",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "flow"
                ],
                "summary": "Urge task",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Task ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Task urge request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/structs.UrgeTaskRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/flow/tasks/{id}/withdraw": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Withdraw a completed task",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "flow"
                ],
                "summary": "Withdraw task",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Task ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Task withdrawal request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/structs.WithdrawTaskRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/flow/tasks/{task_id}/check-delegation": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Check if task can be delegated to user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "flow"
                ],
                "summary": "Check delegation",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Task ID",
                        "name": "task_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Assignee ID",
                        "name": "assignee_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Delegatee ID if delegation exists",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/flow/tasks/{task_id}/histories": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get complete history of a task",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "flow"
                ],
                "summary": "Get task history",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Task ID",
                        "name": "task_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/structs.ReadHistory"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/flow/templates": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "List workflow templates with pagination",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "flow"
                ],
                "summary": "List templates",
                "parameters": [
                    {
                        "type": "string",
                        "name": "category",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "code",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "direction",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "form_code",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "name": "is_latest",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "module_code",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "tenant",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "type",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/structs.ReadTemplate"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a new workflow template",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "flow"
                ],
                "summary": "Create template",
                "parameters": [
                    {
                        "description": "Template creation body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/structs.TemplateBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/structs.ReadTemplate"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/flow/templates/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get workflow template details",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "flow"
                ],
                "summary": "Get template",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Template ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/structs.ReadTemplate"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update workflow template details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "flow"
                ],
                "summary": "Update template",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Template ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Template update body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/structs.UpdateTemplateBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/structs.ReadTemplate"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete a workflow template",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "flow"
                ],
                "summary": "Delete template",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Template ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/flow/templates/{id}/designs": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get process designs associated with a template",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "flow"
                ],
                "summary": "Get template designs",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Template ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/structs.ReadProcessDesign"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/flow/templates/{id}/disable": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Disable a workflow template",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "flow"
                ],
                "summary": "Disable template",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Template ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/flow/templates/{id}/enable": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Enable a workflow template",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "flow"
                ],
                "summary": "Enable template",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Template ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/flow/templates/{id}/rules": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get rules associated with a template",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "flow"
                ],
                "summary": "Get template rules",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Template ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/structs.ReadRule"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/flow/templates/{id}/validate": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Validate a workflow template",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "flow"
                ],
                "summary": "Validate template",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Template ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/flow/templates/{id}/versions": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a new version of existing template",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "flow"
                ],
                "summary": "Create template version",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Template ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "New Version",
                        "name": "version",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/structs.ReadTemplate"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/flow/templates/{id}/versions/latest": {
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Set a template version as the latest version",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "flow"
                ],
                "summary": "Set latest version",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Template ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/flow/templates/{template_id}/designs/import": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Import process design from file",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "flow"
                ],
                "summary": "Import design",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Template ID",
                        "name": "template_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "Process design file",
                        "name": "file",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/flow/users/{user_id}/delegations": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get active delegations for a user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "flow"
                ],
                "summary": "Get active delegations",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/structs.ReadDelegation"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/iam/account": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Retrieve information about the current user.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "iam"
                ],
                "summary": "Get current user",
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/structs.AccountMeshes"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/iam/account/password": {
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update the password of the current user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "iam"
                ],
                "summary": "Update user password",
                "parameters": [
                    {
                        "description": "UserPassword object",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/structs.UserPassword"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/iam/account/tenant": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Retrieve the tenant associated with the current user.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "iam"
                ],
                "summary": "Get current user tenant",
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/structs.ReadTenant"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/iam/account/tenants": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Retrieve the tenant associated with the current user.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "iam"
                ],
                "summary": "Get current user tenants",
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/structs.ReadTenant"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/iam/authorize/send": {
            "post": {
                "description": "Send a verification code to the specified destination.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "iam"
                ],
                "summary": "Send verification code",
                "parameters": [
                    {
                        "description": "SendCodeBody object",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/structs.SendCodeBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "allOf": [
                                    {},
                                    {
                                        "type": "object",
                                        "properties": {
                                            "registered": {
                                                "type": "boolean"
                                            }
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/iam/authorize/{code}": {
            "get": {
                "description": "Verify the provided code.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "iam"
                ],
                "summary": "Verify code",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Verification code",
                        "name": "code",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "allOf": [
                                    {},
                                    {
                                        "type": "object",
                                        "properties": {
                                            "access_token": {
                                                "type": "string"
                                            },
                                            "email": {
                                                "type": "string"
                                            },
                                            "id": {
                                                "type": "string"
                                            },
                                            "register_token": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/iam/captcha/generate": {
            "get": {
                "description": "Generate a captcha image.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "iam"
                ],
                "summary": "Generate captcha",
                "parameters": [
                    {
                        "enum": [
                            "png",
                            "wav"
                        ],
                        "type": "string",
                        "description": "Captcha type",
                        "name": "type",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "allOf": [
                                    {},
                                    {
                                        "type": "object",
                                        "properties": {
                                            "id": {
                                                "type": "string"
                                            },
                                            "url": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/iam/captcha/validate": {
            "post": {
                "description": "Validate a captcha code.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "iam"
                ],
                "summary": "Validate captcha",
                "parameters": [
                    {
                        "description": "Captcha object",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/structs.Captcha"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "allOf": [
                                    {},
                                    {
                                        "type": "object",
                                        "properties": {
                                            "message": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/iam/captcha/{captcha_id}": {
            "get": {
                "description": "Stream a captcha image.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "iam"
                ],
                "summary": "Stream captcha",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Captcha ID With Extension (png, wav)",
                        "name": "captcha_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "file"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/iam/login": {
            "post": {
                "description": "Log in a user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "iam"
                ],
                "summary": "Login",
                "parameters": [
                    {
                        "description": "LoginBody object",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/structs.LoginBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "allOf": [
                                    {},
                                    {
                                        "type": "object",
                                        "properties": {
                                            "access_token": {
                                                "type": "string"
                                            },
                                            "id": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/iam/logout": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Logout the current user.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "iam"
                ],
                "summary": "Logout",
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/iam/permissions": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Retrieve a list of permissions based on the provided query parameters",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "iam"
                ],
                "summary": "List all permissions",
                "parameters": [
                    {
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "direction",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/structs.ReadPermission"
                            }
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a new permission with the provided data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "iam"
                ],
                "summary": "Create a new permission",
                "parameters": [
                    {
                        "description": "Permission data",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/structs.CreatePermissionBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/structs.ReadPermission"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/iam/permissions/{slug}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Retrieve a permission by its slug or ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "iam"
                ],
                "summary": "Get a permission by slug or ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Permission slug or ID",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/structs.ReadPermission"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update an existing permission with the provided data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "iam"
                ],
                "summary": "Update an existing permission",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Permission slug or ID",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Permission data",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/structs.ReadPermission"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete a permission by its slug or ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "iam"
                ],
                "summary": "Delete a permission by slug or ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Permission slug or ID",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/structs.ReadPermission"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/iam/policies": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Retrieve a list of Casbin rules.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "iam"
                ],
                "summary": "List Casbin rules",
                "parameters": [
                    {
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "direction",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "p_type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "v0",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "v1",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "v2",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "v3",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "v4",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "v5",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/structs.CasbinRuleBody"
                            }
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a new Casbin rule.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "iam"
                ],
                "summary": "Create Casbin rule",
                "parameters": [
                    {
                        "description": "CasbinRuleBody object",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/structs.CasbinRuleBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/structs.ReadCasbinRule"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/iam/policies/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Retrieve details of a Casbin rule.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "iam"
                ],
                "summary": "Get Casbin rule",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Casbin rule ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/structs.ReadCasbinRule"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update an existing Casbin rule, either fully or partially.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "iam"
                ],
                "summary": "Update Casbin rule",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Casbin rule ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "CasbinRuleBody object",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/structs.CasbinRuleBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/structs.ReadCasbinRule"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete an existing Casbin rule.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "iam"
                ],
                "summary": "Delete Casbin rule",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Casbin rule ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/iam/refresh": {
            "post": {
                "description": "Refresh the current user's access token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "iam"
                ],
                "summary": "RefreshToken token",
                "parameters": [
                    {
                        "description": "Refresh token",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/structs.RefreshTokenBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "allOf": [
                                    {},
                                    {
                                        "type": "object",
                                        "properties": {
                                            "access_token": {
                                                "type": "string"
                                            },
                                            "id": {
                                                "type": "string"
                                            },
                                            "refresh_token": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/iam/register": {
            "post": {
                "description": "Register a new user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "iam"
                ],
                "summary": "Register",
                "parameters": [
                    {
                        "description": "RegisterBody object",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/structs.RegisterBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "allOf": [
                                    {},
                                    {
                                        "type": "object",
                                        "properties": {
                                            "access_token": {
                                                "type": "string"
                                            },
                                            "id": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/iam/roles": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Retrieve a list of roles based on the provided query parameters",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "iam"
                ],
                "summary": "List all roles",
                "parameters": [
                    {
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "direction",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/structs.ReadRole"
                            }
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a new role with the provided data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "iam"
                ],
                "summary": "Create a new role",
                "parameters": [
                    {
                        "description": "Role data",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/structs.CreateRoleBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/structs.ReadRole"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/iam/roles/{slug}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Retrieve a role by its slug or ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "iam"
                ],
                "summary": "Get a role by slug or ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Role slug or ID",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/structs.ReadRole"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update an existing role with the provided data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "iam"
                ],
                "summary": "Update an existing role",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Role slug or ID",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Role data",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/structs.ReadRole"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete a role by its slug or ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "iam"
                ],
                "summary": "Delete a role by slug or ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Role slug or ID",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/structs.ReadRole"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/iam/roles/{slug}/permissions": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Retrieve a list of permissions associated with a role by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "iam"
                ],
                "summary": "List permissions for a role",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Role ID",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/structs.ReadPermission"
                            }
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/iam/tenants": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Retrieve a list of tenants.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "iam"
                ],
                "summary": "List tenants",
                "parameters": [
                    {
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "direction",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "user",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/structs.ReadTenant"
                            }
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update the tenant information.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "iam"
                ],
                "summary": "Update tenant",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Tenant ID",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "UpdateTenantBody object",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/structs.UpdateTenantBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/structs.ReadTenant"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a new tenant.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "iam"
                ],
                "summary": "Create tenant",
                "parameters": [
                    {
                        "description": "CreateTenantBody object",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/structs.CreateTenantBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/structs.ReadTenant"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/iam/tenants/{slug}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Retrieve information about a specific tenant.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "iam"
                ],
                "summary": "Get tenant",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Tenant ID",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/structs.ReadTenant"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete a specific tenant.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "iam"
                ],
                "summary": "Delete tenant",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Tenant ID",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/iam/tenants/{slug}/attachments": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Retrieve a list of attachments associated with a specific tenant.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "iam"
                ],
                "summary": "List tenant attachments",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Tenant ID",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/iam/tenants/{slug}/groups": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Retrieve a list of groups associated with a specific tenant.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "iam"
                ],
                "summary": "List tenant groups",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Tenant ID",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/iam/tenants/{slug}/menu": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Retrieve the menu associated with a specific tenant.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "iam"
                ],
                "summary": "Get tenant menu",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Tenant ID",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/iam/tenants/{slug}/roles": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Retrieve a list of roles associated with a specific tenant.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "iam"
                ],
                "summary": "List tenant roles",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Tenant ID",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/iam/tenants/{slug}/setting": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Retrieve the settings associated with a specific tenant.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "iam"
                ],
                "summary": "Get tenant setting",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Tenant ID",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/iam/tenants/{slug}/settings": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Retrieve a list of settings associated with a specific tenant.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "iam"
                ],
                "summary": "List tenant settings",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Tenant ID",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/iam/tenants/{slug}/users": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Retrieve a list of users associated with a specific tenant.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "iam"
                ],
                "summary": "List tenant users",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Tenant ID",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/iam/token-status": {
            "get": {
                "description": "Get the current token status.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "iam"
                ],
                "summary": "Token status",
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "allOf": [
                                    {},
                                    {
                                        "type": "object",
                                        "properties": {
                                            "is_authenticated": {
                                                "type": "boolean"
                                            }
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    "401": {
                        "description": "unauthorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/iam/users/{username}/tenant": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Retrieve the tenant associated with the specified user.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "iam"
                ],
                "summary": "Get user owned tenant",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Username",
                        "name": "username",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/structs.ReadTenant"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/org/groups": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Retrieve a list or tree structure of groups.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "org"
                ],
                "summary": "List groups",
                "parameters": [
                    {
                        "type": "boolean",
                        "name": "children",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "direction",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "parent",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "tenant",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/structs.ReadGroup"
                            }
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update an existing group.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "org"
                ],
                "summary": "Update group",
                "parameters": [
                    {
                        "description": "UpdateGroupBody object",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/structs.UpdateGroupBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/structs.ReadGroup"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a new group.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "org"
                ],
                "summary": "Create group",
                "parameters": [
                    {
                        "description": "GroupBody object",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/structs.GroupBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/structs.ReadGroup"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/org/groups/{slug}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Retrieve a group by ID or slug.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "org"
                ],
                "summary": "Get group",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Group ID or slug",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "name": "children",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "group",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "parent",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "tenant",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/structs.ReadGroup"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete a group by ID or slug.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "org"
                ],
                "summary": "Delete group",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Group ID or slug",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/plug/counters": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Retrieve a list or tree structure of counters.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "plug"
                ],
                "summary": "List counters",
                "parameters": [
                    {
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "direction",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "name": "disabled",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "tenant",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/structs.ReadCounter"
                            }
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update an existing counter.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "plug"
                ],
                "summary": "Update counter",
                "parameters": [
                    {
                        "description": "UpdateCounterBody object",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/structs.UpdateCounterBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/structs.ReadCounter"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a new counter.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "plug"
                ],
                "summary": "Create counter",
                "parameters": [
                    {
                        "description": "CounterBody object",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/structs.CounterBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/structs.ReadCounter"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/plug/counters/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Retrieve a counter by ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "plug"
                ],
                "summary": "Get counter",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Counter ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/structs.ReadCounter"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete a counter by ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "plug"
                ],
                "summary": "Delete counter",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Counter ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/res/attachments": {
            "get": {
                "description": "List attachments based on specified parameters.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "res"
                ],
                "summary": "List attachments",
                "parameters": [
                    {
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "direction",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "object",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "storage",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "tenant",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "user",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/structs.ReadAttachment"
                            }
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create one or multiple attachments.",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "res"
                ],
                "summary": "Create attachments",
                "parameters": [
                    {
                        "type": "file",
                        "description": "File to upload",
                        "name": "file",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Object ID associated with the attachment",
                        "name": "object_id",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Tenant ID associated with the attachment",
                        "name": "tenant_id",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Additional properties associated with the attachment (JSON format)",
                        "name": "extras",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/structs.ReadAttachment"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/res/attachments/{slug}": {
            "get": {
                "description": "Get details of a specific attachment.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "res"
                ],
                "summary": "Get attachment",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Slug of the attachment to retrieve",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Type of retrieval ('download' or 'stream')",
                        "name": "type",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/structs.ReadAttachment"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update an existing attachment.",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "res"
                ],
                "summary": "Update attachment",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Slug of the attachment to update",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Attachment details",
                        "name": "attachment",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/structs.UpdateAttachmentBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/structs.ReadAttachment"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete a specific attachment.",
                "tags": [
                    "res"
                ],
                "summary": "Delete attachment",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Slug of the attachment to delete",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/structs.ReadAttachment"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/rt/channels": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Retrieve a list of channels based on the provided query parameters",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rt"
                ],
                "summary": "List all channels",
                "parameters": [
                    {
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "direction",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "type",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/structs.ReadChannel"
                            }
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a new channel",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rt"
                ],
                "summary": "Create a new channel",
                "parameters": [
                    {
                        "description": "Channel data",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/structs.CreateChannel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/structs.ReadChannel"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/rt/channels/user": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get channels of a user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rt"
                ],
                "summary": "Get channels of a user",
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/structs.ReadChannel"
                            }
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/rt/channels/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get a channel by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rt"
                ],
                "summary": "Get a channel by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Channel ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/structs.ReadChannel"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update a channel",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rt"
                ],
                "summary": "Update a channel",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Channel ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Channel data",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/structs.UpdateChannel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/structs.ReadChannel"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete a channel",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rt"
                ],
                "summary": "Delete a channel",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Channel ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/structs.ReadChannel"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/rt/channels/{id}/subscribe": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Subscribe to a channel",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rt"
                ],
                "summary": "Subscribe to a channel",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Channel ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Subscription data",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/structs.CreateSubscription"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/structs.ReadSubscription"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/rt/channels/{id}/subscribers": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get subscribers of a channel",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rt"
                ],
                "summary": "Get subscribers of a channel",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Channel ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/structs.ReadUser"
                            }
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/rt/channels/{id}/unsubscribe": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Unsubscribe from a channel",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rt"
                ],
                "summary": "Unsubscribe from a channel",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Channel ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "allOf": [
                                    {},
                                    {
                                        "type": "object",
                                        "properties": {
                                            "message": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/rt/events": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Retrieve a list of events based on the provided query parameters",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rt"
                ],
                "summary": "List all events",
                "parameters": [
                    {
                        "type": "string",
                        "name": "channel_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "direction",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "collectionFormat": "csv",
                        "name": "time_range",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "user_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/structs.ReadEvent"
                            }
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/rt/events/history": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get event history",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rt"
                ],
                "summary": "Get event history",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Channel ID",
                        "name": "channel_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Event type",
                        "name": "type",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/structs.ReadEvent"
                            }
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/rt/events/publish": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Publish a new event",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rt"
                ],
                "summary": "Publish a new event",
                "parameters": [
                    {
                        "description": "Event data",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/structs.CreateEvent"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/structs.ReadEvent"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/rt/events/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get an event by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rt"
                ],
                "summary": "Get an event by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Event ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/structs.ReadEvent"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete an event",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rt"
                ],
                "summary": "Delete an event",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Event ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/structs.ReadEvent"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/rt/notifications": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Retrieve a list of notifications based on the provided query parameters",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rt"
                ],
                "summary": "List all notifications",
                "parameters": [
                    {
                        "type": "string",
                        "name": "channel_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "direction",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "user_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/structs.ReadNotification"
                            }
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a new notification",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rt"
                ],
                "summary": "Create a new notification",
                "parameters": [
                    {
                        "description": "Notification data",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/structs.CreateNotification"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/structs.ReadNotification"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/rt/notifications/read-all": {
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Mark all notifications as read",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rt"
                ],
                "summary": "Mark all notifications as read",
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "allOf": [
                                    {},
                                    {
                                        "type": "object",
                                        "properties": {
                                            "message": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/rt/notifications/unread-all": {
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Mark all notifications as unread",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rt"
                ],
                "summary": "Mark all notifications as unread",
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "allOf": [
                                    {},
                                    {
                                        "type": "object",
                                        "properties": {
                                            "message": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/rt/notifications/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get a notification by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rt"
                ],
                "summary": "Get a notification by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Notification ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/structs.ReadNotification"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update a notification",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rt"
                ],
                "summary": "Update a notification",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Notification ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Notification data",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/structs.UpdateNotification"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/structs.ReadNotification"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete a notification",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rt"
                ],
                "summary": "Delete a notification",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Notification ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/structs.ReadNotification"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/rt/notifications/{id}/read": {
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Mark a notification as read",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rt"
                ],
                "summary": "Mark a notification as read",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Notification ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/structs.ReadNotification"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/rt/notifications/{id}/unread": {
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Mark a notification as unread",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rt"
                ],
                "summary": "Mark a notification as unread",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Notification ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/structs.ReadNotification"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/rt/ws": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Handles WebSocket connection",
                "tags": [
                    "rt"
                ],
                "summary": "Handle WebSocket connection",
                "responses": {}
            }
        },
        "/sys/dictionarys": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Retrieve a list or tree structure of dictionarys.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sys"
                ],
                "summary": "List dictionarys",
                "parameters": [
                    {
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "direction",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "tenant",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "type",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/structs.ReadDictionary"
                            }
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update an existing dictionary.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sys"
                ],
                "summary": "Update dictionary",
                "parameters": [
                    {
                        "description": "UpdateDictionaryBody object",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/structs.UpdateDictionaryBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/structs.ReadDictionary"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a new dictionary.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sys"
                ],
                "summary": "Create dictionary",
                "parameters": [
                    {
                        "description": "DictionaryBody object",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/structs.DictionaryBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/structs.ReadDictionary"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/sys/dictionarys/{slug}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Retrieve a dictionary by ID or slug.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sys"
                ],
                "summary": "Get dictionary",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Dictionary ID or slug",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "dictionary",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "tenant",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "type",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/structs.ReadDictionary"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete a dictionary by ID or slug.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sys"
                ],
                "summary": "Delete dictionary",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Dictionary ID or slug",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/sys/menus": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Retrieve a list or tree structure of menus.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sys"
                ],
                "summary": "List menus",
                "parameters": [
                    {
                        "type": "boolean",
                        "name": "children",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "direction",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "parent",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "perms",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "tenant",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "type",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/structs.ReadMenu"
                            }
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update an existing menu.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sys"
                ],
                "summary": "Update menu",
                "parameters": [
                    {
                        "description": "UpdateMenuBody object",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/structs.UpdateMenuBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/structs.ReadMenu"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a new menu.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sys"
                ],
                "summary": "Create menu",
                "parameters": [
                    {
                        "description": "MenuBody object",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/structs.MenuBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/structs.ReadMenu"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/sys/menus/{slug}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Retrieve a menu by ID or slug.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sys"
                ],
                "summary": "Get menu",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Menu ID or slug",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "name": "children",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "menu",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "parent",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "tenant",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "type",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/structs.ReadMenu"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete a menu by ID or slug.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sys"
                ],
                "summary": "Delete menu",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Menu ID or slug",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/sys/options": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Retrieve a list of options.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sys"
                ],
                "summary": "List options",
                "parameters": [
                    {
                        "type": "boolean",
                        "name": "autoload",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "direction",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "tenant",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "type",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/structs.ReadOptions"
                            }
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update an existing option.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sys"
                ],
                "summary": "Update option",
                "parameters": [
                    {
                        "description": "UpdateOptionsBody object",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/structs.UpdateOptionsBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/structs.ReadOptions"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a new option.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sys"
                ],
                "summary": "Create option",
                "parameters": [
                    {
                        "description": "OptionsBody object",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/structs.OptionsBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/structs.ReadOptions"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/sys/options/initialize": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Initialize the system with default options",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sys"
                ],
                "summary": "Initialize",
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/sys/options/{option}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Retrieve an option by ID or name.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sys"
                ],
                "summary": "Get option",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Option ID or name",
                        "name": "option",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "option",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "tenant",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "type",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/structs.ReadOptions"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete an option by ID or name.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sys"
                ],
                "summary": "Delete option",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Option ID or name",
                        "name": "option",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/sys/users": {
            "get": {
                "description": "List all users with pagination.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sys"
                ],
                "summary": "List users",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Cursor for pagination",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of items to return",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Direction of pagination (forward or backward)",
                        "name": "direction",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/structs.ReadUser"
                            }
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sys"
                ],
                "summary": "Create user",
                "parameters": [
                    {
                        "description": "User information",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/structs.UserBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/structs.ReadUser"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/sys/users/{username}": {
            "get": {
                "description": "Retrieve information about a specific user.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sys"
                ],
                "summary": "Get user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Username",
                        "name": "username",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/structs.ReadUser"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            },
            "put": {
                "description": "Update an existing user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sys"
                ],
                "summary": "Update user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Username",
                        "name": "username",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User information to update",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/structs.ReadUser"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete an existing user.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sys"
                ],
                "summary": "Delete user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Username",
                        "name": "username",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        },
        "/sys/users/{username}/password": {
            "put": {
                "description": "Update an existing user's password.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sys"
                ],
                "summary": "Update user password",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Username",
                        "name": "username",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Password information",
                        "name": "password",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/structs.UserPassword"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_ncobase_ncore_net_resp.Exception"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "github_com_ncobase_ncore_net_resp.Exception": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Business code",
                    "type": "integer"
                },
                "data": {
                    "description": "Response data"
                },
                "errors": {
                    "description": "Validation errors"
                },
                "message": {
                    "description": "Message",
                    "type": "string"
                },
                "status": {
                    "description": "HTTP status",
                    "type": "integer"
                }
            }
        },
        "github_com_ncobase_ncore_types.JSON": {
            "type": "object",
            "additionalProperties": {}
        },
        "structs.AccountMeshes": {
            "type": "object",
            "properties": {
                "groups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/structs.ReadGroup"
                    }
                },
                "profile": {
                    "$ref": "#/definitions/structs.ReadUserProfile"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/structs.ReadRole"
                    }
                },
                "tenants": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/structs.ReadTenant"
                    }
                },
                "user": {
                    "$ref": "#/definitions/structs.ReadUser"
                }
            }
        },
        "structs.ActionType": {
            "type": "string",
            "enum": [
                "submit",
                "save",
                "revoke",
                "reassign",
                "addSign",
                "remind",
                "approve",
                "reject",
                "delegate",
                "transfer",
                "withdraw",
                "terminate",
                "suspend",
                "resume",
                "urge"
            ],
            "x-enum-comments": {
                "ActionAddSign": "Add countersign",
                "ActionApprove": "Approve",
                "ActionDelegate": "Delegate",
                "ActionReassign": "Reassign task",
                "ActionReject": "Reject",
                "ActionRemind": "Send reminder",
                "ActionResume": "Resume",
                "ActionRevoke": "Revoke approval",
                "ActionSave": "Save draft",
                "ActionSubmit": "Submit form",
                "ActionSuspend": "Suspend",
                "ActionTerminate": "Terminate",
                "ActionTransfer": "Transfer",
                "ActionUrge": "Urge",
                "ActionWithdraw": "Withdraw"
            },
            "x-enum-varnames": [
                "ActionSubmit",
                "ActionSave",
                "ActionRevoke",
                "ActionReassign",
                "ActionAddSign",
                "ActionRemind",
                "ActionApprove",
                "ActionReject",
                "ActionDelegate",
                "ActionTransfer",
                "ActionWithdraw",
                "ActionTerminate",
                "ActionSuspend",
                "ActionResume",
                "ActionUrge"
            ]
        },
        "structs.Captcha": {
            "type": "object",
            "required": [
                "id",
                "solution"
            ],
            "properties": {
                "id": {
                    "type": "string"
                },
                "solution": {
                    "type": "string"
                }
            }
        },
        "structs.CasbinRuleBody": {
            "type": "object",
            "required": [
                "p_type",
                "v0",
                "v1",
                "v2"
            ],
            "properties": {
                "created_by": {
                    "type": "string"
                },
                "p_type": {
                    "type": "string"
                },
                "updated_by": {
                    "type": "string"
                },
                "v0": {
                    "type": "string"
                },
                "v1": {
                    "type": "string"
                },
                "v2": {
                    "type": "string"
                },
                "v3": {
                    "type": "string"
                },
                "v4": {
                    "type": "string"
                },
                "v5": {
                    "type": "string"
                }
            }
        },
        "structs.ChannelBody": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "extras": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "name": {
                    "type": "string"
                },
                "status": {
                    "description": "0: disabled, 1: enabled",
                    "type": "integer"
                },
                "type": {
                    "description": "public/private/direct",
                    "type": "string"
                }
            }
        },
        "structs.CompleteTaskRequest": {
            "type": "object",
            "required": [
                "action",
                "operator",
                "task_id"
            ],
            "properties": {
                "action": {
                    "$ref": "#/definitions/structs.ActionType"
                },
                "attachments": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "comment": {
                    "type": "string"
                },
                "form_data": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "operator": {
                    "type": "string"
                },
                "task_id": {
                    "type": "string"
                },
                "variables": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                }
            }
        },
        "structs.CompleteTaskResponse": {
            "type": "object",
            "properties": {
                "action": {
                    "$ref": "#/definitions/structs.ActionType"
                },
                "end_time": {
                    "type": "integer"
                },
                "next_nodes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "process_id": {
                    "type": "string"
                },
                "task_id": {
                    "type": "string"
                }
            }
        },
        "structs.CounterBody": {
            "type": "object",
            "properties": {
                "created_by": {
                    "type": "string"
                },
                "current_value": {
                    "type": "integer"
                },
                "date_format": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "disabled": {
                    "type": "boolean"
                },
                "identifier": {
                    "type": "string"
                },
                "increment_step": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "prefix": {
                    "type": "string"
                },
                "start_value": {
                    "type": "integer"
                },
                "suffix": {
                    "type": "string"
                },
                "tenant_id": {
                    "type": "string"
                },
                "updated_by": {
                    "type": "string"
                }
            }
        },
        "structs.CreateChannel": {
            "type": "object",
            "properties": {
                "channel": {
                    "$ref": "#/definitions/structs.ChannelBody"
                }
            }
        },
        "structs.CreateEvent": {
            "type": "object",
            "properties": {
                "event": {
                    "$ref": "#/definitions/structs.EventBody"
                }
            }
        },
        "structs.CreateNotification": {
            "type": "object",
            "properties": {
                "notification": {
                    "$ref": "#/definitions/structs.NotificationBody"
                }
            }
        },
        "structs.CreatePermissionBody": {
            "type": "object",
            "properties": {
                "action": {
                    "type": "string"
                },
                "created_by": {
                    "type": "string"
                },
                "default": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "disabled": {
                    "type": "boolean"
                },
                "extras": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "name": {
                    "type": "string"
                },
                "subject": {
                    "type": "string"
                },
                "updated_by": {
                    "type": "string"
                }
            }
        },
        "structs.CreateRoleBody": {
            "type": "object",
            "properties": {
                "created_by": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "disabled": {
                    "type": "boolean"
                },
                "extras": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                },
                "updated_by": {
                    "type": "string"
                }
            }
        },
        "structs.CreateSubscription": {
            "type": "object",
            "properties": {
                "subscription": {
                    "$ref": "#/definitions/structs.SubscriptionBody"
                }
            }
        },
        "structs.CreateTaxonomyBody": {
            "type": "object",
            "properties": {
                "color": {
                    "type": "string"
                },
                "cover": {
                    "type": "string"
                },
                "created_by": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "extras": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "icon": {
                    "type": "string"
                },
                "keywords": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "parent_id": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                },
                "status": {
                    "type": "integer"
                },
                "tenant_id": {
                    "type": "string"
                },
                "thumbnail": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "updated_by": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "structs.CreateTenantBody": {
            "type": "object",
            "properties": {
                "copyright": {
                    "type": "string"
                },
                "created_by": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "disabled": {
                    "type": "boolean"
                },
                "expired_at": {
                    "type": "integer"
                },
                "extras": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "keywords": {
                    "type": "string"
                },
                "logo": {
                    "type": "string"
                },
                "logo_alt": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "order": {
                    "type": "integer"
                },
                "slug": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "updated_by": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "structs.CreateTopicBody": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string"
                },
                "created_by": {
                    "type": "string"
                },
                "markdown": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "private": {
                    "type": "boolean"
                },
                "released": {
                    "type": "integer"
                },
                "slug": {
                    "type": "string"
                },
                "status": {
                    "type": "integer"
                },
                "taxonomy_id": {
                    "type": "string"
                },
                "temp": {
                    "type": "boolean"
                },
                "tenant_id": {
                    "type": "string"
                },
                "thumbnail": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "updated_by": {
                    "type": "string"
                }
            }
        },
        "structs.DelegateTaskRequest": {
            "type": "object",
            "required": [
                "delegate",
                "delegator",
                "task_id"
            ],
            "properties": {
                "comment": {
                    "type": "string"
                },
                "delegate": {
                    "type": "string"
                },
                "delegator": {
                    "type": "string"
                },
                "reason": {
                    "type": "string"
                },
                "task_id": {
                    "type": "string"
                }
            }
        },
        "structs.DelegationBody": {
            "type": "object",
            "properties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "delegatee_id": {
                    "type": "string"
                },
                "delegator_id": {
                    "type": "string"
                },
                "end_time": {
                    "type": "integer"
                },
                "extras": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "is_enabled": {
                    "type": "boolean"
                },
                "node_type": {
                    "type": "string"
                },
                "start_time": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                },
                "template_id": {
                    "type": "string"
                },
                "tenant_id": {
                    "type": "string"
                }
            }
        },
        "structs.DictionaryBody": {
            "type": "object",
            "properties": {
                "created_by": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                },
                "tenant_id": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "updated_by": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "structs.EventBody": {
            "type": "object",
            "properties": {
                "channel_id": {
                    "type": "string"
                },
                "payload": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "type": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "structs.GroupBody": {
            "type": "object",
            "properties": {
                "created_by": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "disabled": {
                    "type": "boolean"
                },
                "extras": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "leader": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "name": {
                    "type": "string"
                },
                "parent_id": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                },
                "tenant_id": {
                    "type": "string"
                },
                "updated_by": {
                    "type": "string"
                }
            }
        },
        "structs.HistoryBody": {
            "type": "object",
            "properties": {
                "action": {
                    "type": "string"
                },
                "comment": {
                    "type": "string"
                },
                "details": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "form_data": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "node_config": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "node_id": {
                    "type": "string"
                },
                "node_name": {
                    "type": "string"
                },
                "node_type": {
                    "type": "string"
                },
                "operator": {
                    "type": "string"
                },
                "operator_dept": {
                    "type": "string"
                },
                "process_id": {
                    "type": "string"
                },
                "task_id": {
                    "type": "string"
                },
                "template_id": {
                    "type": "string"
                },
                "tenant_id": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "variables": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                }
            }
        },
        "structs.LoginBody": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "captcha": {
                    "$ref": "#/definitions/structs.Captcha"
                },
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "structs.MenuBody": {
            "type": "object",
            "properties": {
                "created_by": {
                    "type": "string"
                },
                "disabled": {
                    "type": "boolean"
                },
                "extras": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "hidden": {
                    "type": "boolean"
                },
                "icon": {
                    "type": "string"
                },
                "label": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "order": {
                    "type": "integer"
                },
                "parent_id": {
                    "type": "string"
                },
                "path": {
                    "type": "string"
                },
                "perms": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                },
                "target": {
                    "type": "string"
                },
                "tenant_id": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "updated_by": {
                    "type": "string"
                }
            }
        },
        "structs.NodeBody": {
            "type": "object",
            "properties": {
                "assignees": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "branch_conditions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "branch_nodes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "conditions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "default_branch": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "extras": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "form_config": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "handlers": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "is_working_day": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "next_nodes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "node_key": {
                    "type": "string"
                },
                "parallel_nodes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "permissions": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "prev_nodes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "process_id": {
                    "type": "string"
                },
                "properties": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "required": {
                    "type": "boolean"
                },
                "retry_interval": {
                    "type": "integer"
                },
                "retry_times": {
                    "type": "integer"
                },
                "skippable": {
                    "type": "boolean"
                },
                "status": {
                    "type": "string"
                },
                "template_id": {
                    "type": "string"
                },
                "tenant_id": {
                    "type": "string"
                },
                "timeout_config": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "timeout_duration": {
                    "type": "integer"
                },
                "type": {
                    "type": "string"
                },
                "variables": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                }
            }
        },
        "structs.NotificationBody": {
            "type": "object",
            "properties": {
                "channel_id": {
                    "type": "string"
                },
                "content": {
                    "type": "string"
                },
                "links": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                    }
                },
                "status": {
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "structs.OptionsBody": {
            "type": "object",
            "properties": {
                "autoload": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "tenant_id": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "structs.PriorityStrategy": {
            "type": "integer",
            "enum": [
                0,
                5,
                10,
                15
            ],
            "x-enum-varnames": [
                "PriorityLow",
                "PriorityNormal",
                "PriorityHigh",
                "PriorityUrgent"
            ]
        },
        "structs.ProcessBody": {
            "type": "object",
            "properties": {
                "active_nodes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "allow_cancel": {
                    "type": "boolean"
                },
                "allow_urge": {
                    "type": "boolean"
                },
                "business_key": {
                    "type": "string"
                },
                "callbacks": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "category": {
                    "type": "string"
                },
                "current_node": {
                    "type": "string"
                },
                "due_date": {
                    "type": "integer"
                },
                "duration": {
                    "type": "integer"
                },
                "end_node_id": {
                    "type": "string"
                },
                "end_time": {
                    "type": "integer"
                },
                "extras": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "flow_status": {
                    "type": "string"
                },
                "form_code": {
                    "type": "string"
                },
                "initiator": {
                    "type": "string"
                },
                "initiator_dept": {
                    "type": "string"
                },
                "is_suspended": {
                    "type": "boolean"
                },
                "max_duration": {
                    "type": "integer"
                },
                "module_code": {
                    "type": "string"
                },
                "parent_id": {
                    "type": "string"
                },
                "priority": {
                    "type": "integer"
                },
                "process_code": {
                    "type": "string"
                },
                "process_key": {
                    "type": "string"
                },
                "retryable": {
                    "type": "boolean"
                },
                "start_node_id": {
                    "type": "string"
                },
                "start_time": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                },
                "suspend_reason": {
                    "type": "string"
                },
                "template_id": {
                    "type": "string"
                },
                "tenant_id": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "urge_count": {
                    "type": "integer"
                },
                "variables": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                }
            }
        },
        "structs.ProcessDesignBody": {
            "type": "object",
            "properties": {
                "extras": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "graph_data": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "is_draft": {
                    "type": "boolean"
                },
                "node_layouts": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "properties": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "source_version": {
                    "type": "string"
                },
                "template_id": {
                    "type": "string"
                },
                "tenant_id": {
                    "type": "string"
                },
                "validation_rules": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "structs.ReadAttachment": {
            "type": "object",
            "properties": {
                "bucket": {
                    "type": "string"
                },
                "created_at": {
                    "type": "integer"
                },
                "created_by": {
                    "type": "string"
                },
                "endpoint": {
                    "type": "string"
                },
                "extras": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "object_id": {
                    "type": "string"
                },
                "path": {
                    "type": "string"
                },
                "size": {
                    "type": "integer"
                },
                "storage": {
                    "type": "string"
                },
                "tenant_id": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "integer"
                },
                "updated_by": {
                    "type": "string"
                }
            }
        },
        "structs.ReadCasbinRule": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "integer"
                },
                "created_by": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "p_type": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "integer"
                },
                "updated_by": {
                    "type": "string"
                },
                "v0": {
                    "type": "string"
                },
                "v1": {
                    "type": "string"
                },
                "v2": {
                    "type": "string"
                },
                "v3": {
                    "type": "string"
                },
                "v4": {
                    "type": "string"
                },
                "v5": {
                    "type": "string"
                }
            }
        },
        "structs.ReadChannel": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                },
                "extras": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "status": {
                    "type": "integer"
                },
                "type": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "integer"
                }
            }
        },
        "structs.ReadCounter": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "integer"
                },
                "created_by": {
                    "type": "string"
                },
                "current_value": {
                    "type": "integer"
                },
                "date_format": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "disabled": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "identifier": {
                    "type": "string"
                },
                "increment_step": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "prefix": {
                    "type": "string"
                },
                "start_value": {
                    "type": "integer"
                },
                "suffix": {
                    "type": "string"
                },
                "tenant_id": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "integer"
                },
                "updated_by": {
                    "type": "string"
                }
            }
        },
        "structs.ReadDelegation": {
            "type": "object",
            "properties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "created_at": {
                    "type": "integer"
                },
                "created_by": {
                    "type": "string"
                },
                "delegatee_id": {
                    "type": "string"
                },
                "delegator_id": {
                    "type": "string"
                },
                "end_time": {
                    "type": "integer"
                },
                "extras": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "id": {
                    "type": "string"
                },
                "is_enabled": {
                    "type": "boolean"
                },
                "node_type": {
                    "type": "string"
                },
                "start_time": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                },
                "template_id": {
                    "type": "string"
                },
                "tenant_id": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "integer"
                },
                "updated_by": {
                    "type": "string"
                }
            }
        },
        "structs.ReadDictionary": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "integer"
                },
                "created_by": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                },
                "tenant_id": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "integer"
                },
                "updated_by": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "structs.ReadEvent": {
            "type": "object",
            "properties": {
                "channel_id": {
                    "type": "string"
                },
                "created_at": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "payload": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "type": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "structs.ReadGroup": {
            "type": "object",
            "properties": {
                "children": {
                    "type": "array",
                    "items": {}
                },
                "created_at": {
                    "type": "integer"
                },
                "created_by": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "disabled": {
                    "type": "boolean"
                },
                "extras": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "id": {
                    "type": "string"
                },
                "leader": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "name": {
                    "type": "string"
                },
                "parent_id": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                },
                "tenant_id": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "integer"
                },
                "updated_by": {
                    "type": "string"
                }
            }
        },
        "structs.ReadHistory": {
            "type": "object",
            "properties": {
                "action": {
                    "type": "string"
                },
                "comment": {
                    "type": "string"
                },
                "created_at": {
                    "type": "integer"
                },
                "created_by": {
                    "type": "string"
                },
                "details": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "form_data": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "id": {
                    "type": "string"
                },
                "node_config": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "node_id": {
                    "type": "string"
                },
                "node_name": {
                    "type": "string"
                },
                "node_type": {
                    "type": "string"
                },
                "operator": {
                    "type": "string"
                },
                "operator_dept": {
                    "type": "string"
                },
                "process_id": {
                    "type": "string"
                },
                "task_id": {
                    "type": "string"
                },
                "template_id": {
                    "type": "string"
                },
                "tenant_id": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "integer"
                },
                "updated_by": {
                    "type": "string"
                },
                "variables": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                }
            }
        },
        "structs.ReadMenu": {
            "type": "object",
            "properties": {
                "children": {
                    "type": "array",
                    "items": {}
                },
                "created_at": {
                    "type": "integer"
                },
                "created_by": {
                    "type": "string"
                },
                "disabled": {
                    "type": "boolean"
                },
                "extras": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "hidden": {
                    "type": "boolean"
                },
                "icon": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "label": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "order": {
                    "type": "integer"
                },
                "parent_id": {
                    "type": "string"
                },
                "path": {
                    "type": "string"
                },
                "perms": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                },
                "target": {
                    "type": "string"
                },
                "tenant_id": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "integer"
                },
                "updated_by": {
                    "type": "string"
                }
            }
        },
        "structs.ReadNode": {
            "type": "object",
            "properties": {
                "assignees": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "branch_conditions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "branch_nodes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "conditions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "created_at": {
                    "type": "integer"
                },
                "created_by": {
                    "type": "string"
                },
                "default_branch": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "extras": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "form_config": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "handlers": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "id": {
                    "type": "string"
                },
                "is_working_day": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "next_nodes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "node_key": {
                    "type": "string"
                },
                "parallel_nodes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "permissions": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "prev_nodes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "process_id": {
                    "type": "string"
                },
                "properties": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "required": {
                    "type": "boolean"
                },
                "retry_interval": {
                    "type": "integer"
                },
                "retry_times": {
                    "type": "integer"
                },
                "skippable": {
                    "type": "boolean"
                },
                "status": {
                    "type": "string"
                },
                "template_id": {
                    "type": "string"
                },
                "tenant_id": {
                    "type": "string"
                },
                "timeout_config": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "timeout_duration": {
                    "type": "integer"
                },
                "type": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "integer"
                },
                "updated_by": {
                    "type": "string"
                },
                "variables": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                }
            }
        },
        "structs.ReadNotification": {
            "type": "object",
            "properties": {
                "channel_id": {
                    "type": "string"
                },
                "content": {
                    "type": "string"
                },
                "created_at": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "links": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                    }
                },
                "status": {
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "integer"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "structs.ReadOptions": {
            "type": "object",
            "properties": {
                "autoload": {
                    "type": "boolean"
                },
                "created_at": {
                    "type": "integer"
                },
                "created_by": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "tenant_id": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "integer"
                },
                "updated_by": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "structs.ReadPermission": {
            "type": "object",
            "properties": {
                "action": {
                    "type": "string"
                },
                "created_at": {
                    "type": "integer"
                },
                "created_by": {
                    "type": "string"
                },
                "default": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "disabled": {
                    "type": "boolean"
                },
                "extras": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "subject": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "integer"
                },
                "updated_by": {
                    "type": "string"
                }
            }
        },
        "structs.ReadProcess": {
            "type": "object",
            "properties": {
                "active_nodes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "allow_cancel": {
                    "type": "boolean"
                },
                "allow_urge": {
                    "type": "boolean"
                },
                "business_key": {
                    "type": "string"
                },
                "callbacks": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "category": {
                    "type": "string"
                },
                "created_at": {
                    "type": "integer"
                },
                "created_by": {
                    "type": "string"
                },
                "current_node": {
                    "type": "string"
                },
                "due_date": {
                    "type": "integer"
                },
                "duration": {
                    "type": "integer"
                },
                "end_node_id": {
                    "type": "string"
                },
                "end_time": {
                    "type": "integer"
                },
                "extras": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "flow_status": {
                    "type": "string"
                },
                "form_code": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "initiator": {
                    "type": "string"
                },
                "initiator_dept": {
                    "type": "string"
                },
                "is_suspended": {
                    "type": "boolean"
                },
                "max_duration": {
                    "type": "integer"
                },
                "module_code": {
                    "type": "string"
                },
                "parent_id": {
                    "type": "string"
                },
                "priority": {
                    "type": "integer"
                },
                "process_code": {
                    "type": "string"
                },
                "process_key": {
                    "type": "string"
                },
                "retryable": {
                    "type": "boolean"
                },
                "start_node_id": {
                    "type": "string"
                },
                "start_time": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                },
                "suspend_reason": {
                    "type": "string"
                },
                "template_id": {
                    "type": "string"
                },
                "tenant_id": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "integer"
                },
                "updated_by": {
                    "type": "string"
                },
                "urge_count": {
                    "type": "integer"
                },
                "variables": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                }
            }
        },
        "structs.ReadProcessDesign": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "integer"
                },
                "created_by": {
                    "type": "string"
                },
                "extras": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "graph_data": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "id": {
                    "type": "string"
                },
                "is_draft": {
                    "type": "boolean"
                },
                "node_layouts": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "properties": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "source_version": {
                    "type": "string"
                },
                "template_id": {
                    "type": "string"
                },
                "tenant_id": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "integer"
                },
                "updated_by": {
                    "type": "string"
                },
                "validation_rules": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "structs.ReadRole": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "integer"
                },
                "created_by": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "disabled": {
                    "type": "boolean"
                },
                "extras": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "integer"
                },
                "updated_by": {
                    "type": "string"
                }
            }
        },
        "structs.ReadRule": {
            "type": "object",
            "properties": {
                "actions": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "code": {
                    "type": "string"
                },
                "conditions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "created_at": {
                    "type": "integer"
                },
                "created_by": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "effective_time": {
                    "type": "integer"
                },
                "expire_time": {
                    "type": "integer"
                },
                "extras": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "id": {
                    "type": "string"
                },
                "is_enabled": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "node_key": {
                    "type": "string"
                },
                "priority": {
                    "type": "integer"
                },
                "rule_key": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "template_id": {
                    "type": "string"
                },
                "tenant_id": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "integer"
                },
                "updated_by": {
                    "type": "string"
                }
            }
        },
        "structs.ReadSubscription": {
            "type": "object",
            "properties": {
                "channel_id": {
                    "type": "string"
                },
                "created_at": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "status": {
                    "type": "integer"
                },
                "updated_at": {
                    "type": "integer"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "structs.ReadTask": {
            "type": "object",
            "properties": {
                "action": {
                    "type": "string"
                },
                "allowed_actions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "assign_strategy": {
                    "type": "string"
                },
                "assignees": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "candidates": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "category": {
                    "type": "string"
                },
                "claim_time": {
                    "type": "integer"
                },
                "comment": {
                    "type": "string"
                },
                "created_at": {
                    "type": "integer"
                },
                "created_by": {
                    "type": "string"
                },
                "delegated_from": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "description": {
                    "type": "string"
                },
                "due_time": {
                    "type": "integer"
                },
                "duration": {
                    "type": "integer"
                },
                "end_time": {
                    "type": "integer"
                },
                "extras": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "form_data": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "id": {
                    "type": "string"
                },
                "is_delegated": {
                    "type": "boolean"
                },
                "is_resubmit": {
                    "type": "boolean"
                },
                "is_timeout": {
                    "type": "boolean"
                },
                "is_transferred": {
                    "type": "boolean"
                },
                "is_urged": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "node_key": {
                    "type": "string"
                },
                "node_type": {
                    "type": "string"
                },
                "parent_task_id": {
                    "type": "string"
                },
                "priority": {
                    "type": "integer"
                },
                "process_id": {
                    "type": "string"
                },
                "restrictions": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "start_time": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                },
                "sub_tasks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "task_key": {
                    "type": "string"
                },
                "tenant_id": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "integer"
                },
                "updated_by": {
                    "type": "string"
                },
                "urge_count": {
                    "type": "integer"
                },
                "variables": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "weight": {
                    "$ref": "#/definitions/structs.PriorityStrategy"
                }
            }
        },
        "structs.ReadTaxonomy": {
            "type": "object",
            "properties": {
                "children": {
                    "type": "array",
                    "items": {}
                },
                "color": {
                    "type": "string"
                },
                "cover": {
                    "type": "string"
                },
                "created_at": {
                    "type": "integer"
                },
                "created_by": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "extras": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "icon": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "keywords": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "parent_id": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                },
                "status": {
                    "type": "integer"
                },
                "tenant_id": {
                    "type": "string"
                },
                "thumbnail": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "integer"
                },
                "updated_by": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "structs.ReadTemplate": {
            "type": "object",
            "properties": {
                "allow_cancel": {
                    "type": "boolean"
                },
                "allow_delegate": {
                    "type": "boolean"
                },
                "allow_transfer": {
                    "type": "boolean"
                },
                "allow_urge": {
                    "type": "boolean"
                },
                "category": {
                    "type": "string"
                },
                "code": {
                    "type": "string"
                },
                "created_at": {
                    "type": "integer"
                },
                "created_by": {
                    "type": "string"
                },
                "default_title": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "disabled": {
                    "type": "boolean"
                },
                "effective_time": {
                    "type": "integer"
                },
                "expire_time": {
                    "type": "integer"
                },
                "extras": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "form_code": {
                    "type": "string"
                },
                "form_config": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "form_permissions": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "id": {
                    "type": "string"
                },
                "is_auto_start": {
                    "type": "boolean"
                },
                "is_draft_enabled": {
                    "type": "boolean"
                },
                "is_latest": {
                    "type": "boolean"
                },
                "module_code": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "node_config": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "node_events": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "node_rules": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "permission_configs": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "process_rules": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "reminder_config": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "role_configs": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "source_version": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "strict_mode": {
                    "type": "boolean"
                },
                "template_key": {
                    "type": "string"
                },
                "tenant_id": {
                    "type": "string"
                },
                "timeout_config": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "type": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "integer"
                },
                "updated_by": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                },
                "visible_range": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                }
            }
        },
        "structs.ReadTenant": {
            "type": "object",
            "properties": {
                "copyright": {
                    "type": "string"
                },
                "created_at": {
                    "type": "integer"
                },
                "created_by": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "disabled": {
                    "type": "boolean"
                },
                "expired_at": {
                    "type": "integer"
                },
                "extras": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "id": {
                    "type": "string"
                },
                "keywords": {
                    "type": "string"
                },
                "logo": {
                    "type": "string"
                },
                "logo_alt": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "order": {
                    "type": "integer"
                },
                "slug": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "integer"
                },
                "updated_by": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "structs.ReadTopic": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string"
                },
                "created_at": {
                    "type": "integer"
                },
                "created_by": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "markdown": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "private": {
                    "type": "boolean"
                },
                "released": {
                    "type": "integer"
                },
                "slug": {
                    "type": "string"
                },
                "status": {
                    "type": "integer"
                },
                "taxonomy_id": {
                    "type": "string"
                },
                "temp": {
                    "type": "boolean"
                },
                "tenant_id": {
                    "type": "string"
                },
                "thumbnail": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "integer"
                },
                "updated_by": {
                    "type": "string"
                }
            }
        },
        "structs.ReadUser": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "integer"
                },
                "email": {
                    "type": "string"
                },
                "extras": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "id": {
                    "type": "string"
                },
                "is_admin": {
                    "type": "boolean"
                },
                "is_certified": {
                    "type": "boolean"
                },
                "phone": {
                    "type": "string"
                },
                "status": {
                    "type": "integer"
                },
                "updated_at": {
                    "type": "integer"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "structs.ReadUserProfile": {
            "type": "object",
            "properties": {
                "about": {
                    "type": "string"
                },
                "display_name": {
                    "type": "string"
                },
                "extras": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "links": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                    }
                },
                "short_bio": {
                    "type": "string"
                },
                "thumbnail": {
                    "type": "string"
                }
            }
        },
        "structs.RefreshTokenBody": {
            "type": "object",
            "required": [
                "refresh_token"
            ],
            "properties": {
                "refresh_token": {
                    "type": "string"
                }
            }
        },
        "structs.RegisterBody": {
            "type": "object",
            "required": [
                "display_name",
                "register_token",
                "username"
            ],
            "properties": {
                "display_name": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "register_token": {
                    "type": "string"
                },
                "short_bio": {
                    "type": "string"
                },
                "tenant": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "structs.RuleBody": {
            "type": "object",
            "properties": {
                "actions": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "code": {
                    "type": "string"
                },
                "conditions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "effective_time": {
                    "type": "integer"
                },
                "expire_time": {
                    "type": "integer"
                },
                "extras": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "is_enabled": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "node_key": {
                    "type": "string"
                },
                "priority": {
                    "type": "integer"
                },
                "rule_key": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "template_id": {
                    "type": "string"
                },
                "tenant_id": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "structs.SendCodeBody": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                }
            }
        },
        "structs.StartProcessRequest": {
            "type": "object",
            "required": [
                "business_key",
                "initiator",
                "template_id"
            ],
            "properties": {
                "business_key": {
                    "type": "string"
                },
                "form_code": {
                    "type": "string"
                },
                "form_data": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "initiator": {
                    "type": "string"
                },
                "initiator_dept": {
                    "type": "string"
                },
                "module_code": {
                    "type": "string"
                },
                "priority": {
                    "type": "integer"
                },
                "template_id": {
                    "type": "string"
                },
                "tenant_id": {
                    "type": "string"
                },
                "variables": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                }
            }
        },
        "structs.StartProcessResponse": {
            "type": "object",
            "properties": {
                "process_id": {
                    "type": "string"
                },
                "start_time": {
                    "type": "integer"
                },
                "status": {
                    "$ref": "#/definitions/structs.Status"
                },
                "variables": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                }
            }
        },
        "structs.Status": {
            "type": "string",
            "enum": [
                "draft",
                "ready",
                "active",
                "pending",
                "suspended",
                "processing",
                "completed",
                "compensated",
                "rejected",
                "cancelled",
                "terminated",
                "rollbacked",
                "withdrawn",
                "error"
            ],
            "x-enum-comments": {
                "StatusActive": "Active",
                "StatusCancelled": "Cancelled",
                "StatusCompensated": "Compensated",
                "StatusCompleted": "Completed",
                "StatusDraft": "Draft",
                "StatusError": "Error",
                "StatusPending": "Pending",
                "StatusProcessing": "Processing",
                "StatusReady": "Ready",
                "StatusRejected": "Rejected",
                "StatusRollbacked": "Rollbacked",
                "StatusSuspended": "Suspended",
                "StatusTerminated": "Terminated",
                "StatusWithdrawn": "Withdrawn"
            },
            "x-enum-varnames": [
                "StatusDraft",
                "StatusReady",
                "StatusActive",
                "StatusPending",
                "StatusSuspended",
                "StatusProcessing",
                "StatusCompleted",
                "StatusCompensated",
                "StatusRejected",
                "StatusCancelled",
                "StatusTerminated",
                "StatusRollbacked",
                "StatusWithdrawn",
                "StatusError"
            ]
        },
        "structs.SubscriptionBody": {
            "type": "object",
            "properties": {
                "channel_id": {
                    "type": "string"
                },
                "status": {
                    "description": "0: disabled, 1: enabled",
                    "type": "integer"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "structs.TaskBody": {
            "type": "object",
            "properties": {
                "action": {
                    "type": "string"
                },
                "allowed_actions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "assign_strategy": {
                    "type": "string"
                },
                "assignees": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "candidates": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "category": {
                    "type": "string"
                },
                "claim_time": {
                    "type": "integer"
                },
                "comment": {
                    "type": "string"
                },
                "delegated_from": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "description": {
                    "type": "string"
                },
                "due_time": {
                    "type": "integer"
                },
                "duration": {
                    "type": "integer"
                },
                "end_time": {
                    "type": "integer"
                },
                "extras": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "form_data": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "is_delegated": {
                    "type": "boolean"
                },
                "is_resubmit": {
                    "type": "boolean"
                },
                "is_timeout": {
                    "type": "boolean"
                },
                "is_transferred": {
                    "type": "boolean"
                },
                "is_urged": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "node_key": {
                    "type": "string"
                },
                "node_type": {
                    "type": "string"
                },
                "parent_task_id": {
                    "type": "string"
                },
                "priority": {
                    "type": "integer"
                },
                "process_id": {
                    "type": "string"
                },
                "restrictions": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "start_time": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                },
                "sub_tasks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "task_key": {
                    "type": "string"
                },
                "tenant_id": {
                    "type": "string"
                },
                "urge_count": {
                    "type": "integer"
                },
                "variables": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "weight": {
                    "$ref": "#/definitions/structs.PriorityStrategy"
                }
            }
        },
        "structs.TemplateBody": {
            "type": "object",
            "properties": {
                "allow_cancel": {
                    "type": "boolean"
                },
                "allow_delegate": {
                    "type": "boolean"
                },
                "allow_transfer": {
                    "type": "boolean"
                },
                "allow_urge": {
                    "type": "boolean"
                },
                "category": {
                    "type": "string"
                },
                "code": {
                    "type": "string"
                },
                "default_title": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "disabled": {
                    "type": "boolean"
                },
                "effective_time": {
                    "type": "integer"
                },
                "expire_time": {
                    "type": "integer"
                },
                "extras": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "form_code": {
                    "type": "string"
                },
                "form_config": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "form_permissions": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "is_auto_start": {
                    "type": "boolean"
                },
                "is_draft_enabled": {
                    "type": "boolean"
                },
                "is_latest": {
                    "type": "boolean"
                },
                "module_code": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "node_config": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "node_events": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "node_rules": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "permission_configs": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "process_rules": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "reminder_config": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "role_configs": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "source_version": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "strict_mode": {
                    "type": "boolean"
                },
                "template_key": {
                    "type": "string"
                },
                "tenant_id": {
                    "type": "string"
                },
                "timeout_config": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "type": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                },
                "visible_range": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                }
            }
        },
        "structs.TerminateProcessRequest": {
            "type": "object",
            "required": [
                "operator",
                "process_id"
            ],
            "properties": {
                "comment": {
                    "type": "string"
                },
                "operator": {
                    "type": "string"
                },
                "process_id": {
                    "type": "string"
                },
                "reason": {
                    "type": "string"
                }
            }
        },
        "structs.TransferTaskRequest": {
            "type": "object",
            "required": [
                "task_id",
                "transferee",
                "transferor"
            ],
            "properties": {
                "comment": {
                    "type": "string"
                },
                "reason": {
                    "type": "string"
                },
                "task_id": {
                    "type": "string"
                },
                "transferee": {
                    "type": "string"
                },
                "transferor": {
                    "type": "string"
                }
            }
        },
        "structs.UpdateAttachmentBody": {
            "type": "object",
            "properties": {
                "bucket": {
                    "type": "string"
                },
                "created_by": {
                    "type": "string"
                },
                "endpoint": {
                    "type": "string"
                },
                "extras": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "object_id": {
                    "type": "string"
                },
                "path": {
                    "type": "string"
                },
                "size": {
                    "type": "integer"
                },
                "storage": {
                    "type": "string"
                },
                "tenant_id": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "updated_by": {
                    "type": "string"
                }
            }
        },
        "structs.UpdateChannel": {
            "type": "object",
            "properties": {
                "channel": {
                    "$ref": "#/definitions/structs.ChannelBody"
                },
                "id": {
                    "type": "string"
                }
            }
        },
        "structs.UpdateCounterBody": {
            "type": "object",
            "properties": {
                "created_by": {
                    "type": "string"
                },
                "current_value": {
                    "type": "integer"
                },
                "date_format": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "disabled": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "identifier": {
                    "type": "string"
                },
                "increment_step": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "prefix": {
                    "type": "string"
                },
                "start_value": {
                    "type": "integer"
                },
                "suffix": {
                    "type": "string"
                },
                "tenant_id": {
                    "type": "string"
                },
                "updated_by": {
                    "type": "string"
                }
            }
        },
        "structs.UpdateDelegationBody": {
            "type": "object",
            "properties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "delegatee_id": {
                    "type": "string"
                },
                "delegator_id": {
                    "type": "string"
                },
                "end_time": {
                    "type": "integer"
                },
                "extras": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "id": {
                    "type": "string"
                },
                "is_enabled": {
                    "type": "boolean"
                },
                "node_type": {
                    "type": "string"
                },
                "start_time": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                },
                "template_id": {
                    "type": "string"
                },
                "tenant_id": {
                    "type": "string"
                }
            }
        },
        "structs.UpdateDictionaryBody": {
            "type": "object",
            "properties": {
                "created_by": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                },
                "tenant_id": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "updated_by": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "structs.UpdateGroupBody": {
            "type": "object",
            "properties": {
                "created_by": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "disabled": {
                    "type": "boolean"
                },
                "extras": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "id": {
                    "type": "string"
                },
                "leader": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "name": {
                    "type": "string"
                },
                "parent_id": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                },
                "tenant_id": {
                    "type": "string"
                },
                "updated_by": {
                    "type": "string"
                }
            }
        },
        "structs.UpdateMenuBody": {
            "type": "object",
            "properties": {
                "created_by": {
                    "type": "string"
                },
                "disabled": {
                    "type": "boolean"
                },
                "extras": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "hidden": {
                    "type": "boolean"
                },
                "icon": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "label": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "order": {
                    "type": "integer"
                },
                "parent_id": {
                    "type": "string"
                },
                "path": {
                    "type": "string"
                },
                "perms": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                },
                "target": {
                    "type": "string"
                },
                "tenant_id": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "updated_by": {
                    "type": "string"
                }
            }
        },
        "structs.UpdateNodeBody": {
            "type": "object",
            "properties": {
                "assignees": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "branch_conditions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "branch_nodes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "conditions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "default_branch": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "extras": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "form_config": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "handlers": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "id": {
                    "type": "string"
                },
                "is_working_day": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "next_nodes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "node_key": {
                    "type": "string"
                },
                "parallel_nodes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "permissions": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "prev_nodes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "process_id": {
                    "type": "string"
                },
                "properties": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "required": {
                    "type": "boolean"
                },
                "retry_interval": {
                    "type": "integer"
                },
                "retry_times": {
                    "type": "integer"
                },
                "skippable": {
                    "type": "boolean"
                },
                "status": {
                    "type": "string"
                },
                "template_id": {
                    "type": "string"
                },
                "tenant_id": {
                    "type": "string"
                },
                "timeout_config": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "timeout_duration": {
                    "type": "integer"
                },
                "type": {
                    "type": "string"
                },
                "variables": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                }
            }
        },
        "structs.UpdateNotification": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "notification": {
                    "$ref": "#/definitions/structs.NotificationBody"
                }
            }
        },
        "structs.UpdateOptionsBody": {
            "type": "object",
            "properties": {
                "autoload": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "tenant_id": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "structs.UpdateProcessBody": {
            "type": "object",
            "properties": {
                "active_nodes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "allow_cancel": {
                    "type": "boolean"
                },
                "allow_urge": {
                    "type": "boolean"
                },
                "business_key": {
                    "type": "string"
                },
                "callbacks": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "category": {
                    "type": "string"
                },
                "current_node": {
                    "type": "string"
                },
                "due_date": {
                    "type": "integer"
                },
                "duration": {
                    "type": "integer"
                },
                "end_node_id": {
                    "type": "string"
                },
                "end_time": {
                    "type": "integer"
                },
                "extras": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "flow_status": {
                    "type": "string"
                },
                "form_code": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "initiator": {
                    "type": "string"
                },
                "initiator_dept": {
                    "type": "string"
                },
                "is_suspended": {
                    "type": "boolean"
                },
                "max_duration": {
                    "type": "integer"
                },
                "module_code": {
                    "type": "string"
                },
                "parent_id": {
                    "type": "string"
                },
                "priority": {
                    "type": "integer"
                },
                "process_code": {
                    "type": "string"
                },
                "process_key": {
                    "type": "string"
                },
                "retryable": {
                    "type": "boolean"
                },
                "start_node_id": {
                    "type": "string"
                },
                "start_time": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                },
                "suspend_reason": {
                    "type": "string"
                },
                "template_id": {
                    "type": "string"
                },
                "tenant_id": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "urge_count": {
                    "type": "integer"
                },
                "variables": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                }
            }
        },
        "structs.UpdateProcessDesignBody": {
            "type": "object",
            "properties": {
                "extras": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "graph_data": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "id": {
                    "type": "string"
                },
                "is_draft": {
                    "type": "boolean"
                },
                "node_layouts": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "properties": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "source_version": {
                    "type": "string"
                },
                "template_id": {
                    "type": "string"
                },
                "tenant_id": {
                    "type": "string"
                },
                "validation_rules": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "structs.UpdateRuleBody": {
            "type": "object",
            "properties": {
                "actions": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "code": {
                    "type": "string"
                },
                "conditions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "effective_time": {
                    "type": "integer"
                },
                "expire_time": {
                    "type": "integer"
                },
                "extras": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "id": {
                    "type": "string"
                },
                "is_enabled": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "node_key": {
                    "type": "string"
                },
                "priority": {
                    "type": "integer"
                },
                "rule_key": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "template_id": {
                    "type": "string"
                },
                "tenant_id": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "structs.UpdateTaskBody": {
            "type": "object",
            "properties": {
                "action": {
                    "type": "string"
                },
                "allowed_actions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "assign_strategy": {
                    "type": "string"
                },
                "assignees": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "candidates": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "category": {
                    "type": "string"
                },
                "claim_time": {
                    "type": "integer"
                },
                "comment": {
                    "type": "string"
                },
                "delegated_from": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "description": {
                    "type": "string"
                },
                "due_time": {
                    "type": "integer"
                },
                "duration": {
                    "type": "integer"
                },
                "end_time": {
                    "type": "integer"
                },
                "extras": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "form_data": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "id": {
                    "type": "string"
                },
                "is_delegated": {
                    "type": "boolean"
                },
                "is_resubmit": {
                    "type": "boolean"
                },
                "is_timeout": {
                    "type": "boolean"
                },
                "is_transferred": {
                    "type": "boolean"
                },
                "is_urged": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "node_key": {
                    "type": "string"
                },
                "node_type": {
                    "type": "string"
                },
                "parent_task_id": {
                    "type": "string"
                },
                "priority": {
                    "type": "integer"
                },
                "process_id": {
                    "type": "string"
                },
                "restrictions": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "start_time": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                },
                "sub_tasks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "task_key": {
                    "type": "string"
                },
                "tenant_id": {
                    "type": "string"
                },
                "urge_count": {
                    "type": "integer"
                },
                "variables": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "weight": {
                    "$ref": "#/definitions/structs.PriorityStrategy"
                }
            }
        },
        "structs.UpdateTaxonomyBody": {
            "type": "object",
            "properties": {
                "color": {
                    "type": "string"
                },
                "cover": {
                    "type": "string"
                },
                "created_by": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "extras": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "icon": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "keywords": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "parent_id": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                },
                "status": {
                    "type": "integer"
                },
                "tenant_id": {
                    "type": "string"
                },
                "thumbnail": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "updated_by": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "structs.UpdateTemplateBody": {
            "type": "object",
            "properties": {
                "allow_cancel": {
                    "type": "boolean"
                },
                "allow_delegate": {
                    "type": "boolean"
                },
                "allow_transfer": {
                    "type": "boolean"
                },
                "allow_urge": {
                    "type": "boolean"
                },
                "category": {
                    "type": "string"
                },
                "code": {
                    "type": "string"
                },
                "default_title": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "disabled": {
                    "type": "boolean"
                },
                "effective_time": {
                    "type": "integer"
                },
                "expire_time": {
                    "type": "integer"
                },
                "extras": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "form_code": {
                    "type": "string"
                },
                "form_config": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "form_permissions": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "id": {
                    "type": "string"
                },
                "is_auto_start": {
                    "type": "boolean"
                },
                "is_draft_enabled": {
                    "type": "boolean"
                },
                "is_latest": {
                    "type": "boolean"
                },
                "module_code": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "node_config": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "node_events": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "node_rules": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "permission_configs": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "process_rules": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "reminder_config": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "role_configs": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "source_version": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "strict_mode": {
                    "type": "boolean"
                },
                "template_key": {
                    "type": "string"
                },
                "tenant_id": {
                    "type": "string"
                },
                "timeout_config": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "type": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                },
                "visible_range": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                }
            }
        },
        "structs.UpdateTenantBody": {
            "type": "object",
            "properties": {
                "copyright": {
                    "type": "string"
                },
                "created_by": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "disabled": {
                    "type": "boolean"
                },
                "expired_at": {
                    "type": "integer"
                },
                "extras": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "id": {
                    "type": "string"
                },
                "keywords": {
                    "type": "string"
                },
                "logo": {
                    "type": "string"
                },
                "logo_alt": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "order": {
                    "type": "integer"
                },
                "slug": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "updated_by": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "structs.UpdateTopicBody": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string"
                },
                "created_by": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "markdown": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "private": {
                    "type": "boolean"
                },
                "released": {
                    "type": "integer"
                },
                "slug": {
                    "type": "string"
                },
                "status": {
                    "type": "integer"
                },
                "taxonomy_id": {
                    "type": "string"
                },
                "temp": {
                    "type": "boolean"
                },
                "tenant_id": {
                    "type": "string"
                },
                "thumbnail": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "updated_by": {
                    "type": "string"
                }
            }
        },
        "structs.UrgeTaskRequest": {
            "type": "object",
            "required": [
                "operator",
                "task_id"
            ],
            "properties": {
                "comment": {
                    "type": "string"
                },
                "operator": {
                    "type": "string"
                },
                "task_id": {
                    "type": "string"
                },
                "variables": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                }
            }
        },
        "structs.UserBody": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "integer"
                },
                "email": {
                    "type": "string"
                },
                "extras": {
                    "$ref": "#/definitions/github_com_ncobase_ncore_types.JSON"
                },
                "id": {
                    "type": "string"
                },
                "is_admin": {
                    "type": "boolean"
                },
                "is_certified": {
                    "type": "boolean"
                },
                "phone": {
                    "type": "string"
                },
                "status": {
                    "type": "integer"
                },
                "updated_at": {
                    "type": "integer"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "structs.UserPassword": {
            "type": "object",
            "required": [
                "confirm",
                "new_password",
                "user"
            ],
            "properties": {
                "confirm": {
                    "type": "string"
                },
                "new_password": {
                    "type": "string"
                },
                "old_password": {
                    "type": "string"
                },
                "user": {
                    "type": "string"
                }
            }
        },
        "structs.WithdrawTaskRequest": {
            "type": "object",
            "required": [
                "operator",
                "task_id"
            ],
            "properties": {
                "comment": {
                    "type": "string"
                },
                "operator": {
                    "type": "string"
                },
                "reason": {
                    "type": "string"
                },
                "task_id": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "Bearer": {
            "description": "Type \"Bearer\" followed by a space and JWT token.",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}