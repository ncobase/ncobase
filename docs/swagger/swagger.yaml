definitions:
  github_com_ncobase_ncore_net_resp.Exception:
    properties:
      code:
        description: Business code
        type: integer
      data:
        description: Response data
      errors:
        description: Validation errors
      message:
        description: Message
        type: string
      status:
        description: HTTP status
        type: integer
    type: object
  github_com_ncobase_ncore_types.JSON:
    additionalProperties: { }
    type: object
  ncobase_core_realtime_structs.ChannelBody:
    properties:
      description:
        type: string
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      name:
        type: string
      status:
        description: '0: disabled, 1: enabled'
        type: integer
      type:
        description: public/private/direct
        type: string
    type: object
  ncobase_core_realtime_structs.ReadChannel:
    properties:
      created_at:
        type: integer
      description:
        type: string
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      id:
        type: string
      name:
        type: string
      status:
        type: integer
      type:
        type: string
      updated_at:
        type: integer
    type: object
  ncobase_domain_content_structs.ReadChannel:
    properties:
      allowed_types:
        items:
          type: string
        type: array
      auto_publish:
        type: boolean
      config:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      created_at:
        type: integer
      created_by:
        type: string
      description:
        type: string
      icon:
        type: string
      id:
        type: string
      logo:
        type: string
      name:
        type: string
      require_review:
        type: boolean
      slug:
        type: string
      status:
        type: integer
      tenant_id:
        type: string
      type:
        type: string
      updated_at:
        type: integer
      updated_by:
        type: string
      webhook_url:
        type: string
    type: object
  structs.AccessLevel:
    enum:
      - public
      - private
      - shared
    type: string
    x-enum-comments:
      AccessLevelPrivate: Only accessible to owner
      AccessLevelPublic: Accessible to anyone
      AccessLevelShared: Shared with specific users/groups
    x-enum-varnames:
      - AccessLevelPublic
      - AccessLevelPrivate
      - AccessLevelShared
  structs.AccountMeshes:
    properties:
      groups:
        items:
          $ref: '#/definitions/structs.ReadGroup'
        type: array
      profile:
        $ref: '#/definitions/structs.ReadUserProfile'
      roles:
        items:
          $ref: '#/definitions/structs.ReadRole'
        type: array
      tenants:
        items:
          $ref: '#/definitions/structs.ReadTenant'
        type: array
      user:
        $ref: '#/definitions/structs.ReadUser'
    type: object
  structs.ActionType:
    enum:
      - submit
      - save
      - revoke
      - reassign
      - addSign
      - remind
      - approve
      - reject
      - delegate
      - transfer
      - withdraw
      - terminate
      - suspend
      - resume
      - urge
    type: string
    x-enum-comments:
      ActionAddSign: Add countersign
      ActionApprove: Approve
      ActionDelegate: Delegate
      ActionReassign: Reassign task
      ActionReject: Reject
      ActionRemind: Send reminder
      ActionResume: Resume
      ActionRevoke: Revoke approval
      ActionSave: Save draft
      ActionSubmit: Submit form
      ActionSuspend: Suspend
      ActionTerminate: Terminate
      ActionTransfer: Transfer
      ActionUrge: Urge
      ActionWithdraw: Withdraw
    x-enum-varnames:
      - ActionSubmit
      - ActionSave
      - ActionRevoke
      - ActionReassign
      - ActionAddSign
      - ActionRemind
      - ActionApprove
      - ActionReject
      - ActionDelegate
      - ActionTransfer
      - ActionWithdraw
      - ActionTerminate
      - ActionSuspend
      - ActionResume
      - ActionUrge
  structs.BatchUploadResult:
    properties:
      errors:
        items:
          type: string
        type: array
      failed_files:
        items:
          type: string
        type: array
      failure_count:
        type: integer
      files:
        items:
          $ref: '#/definitions/structs.ReadFile'
        type: array
      operation_id:
        type: string
      success_count:
        type: integer
      total_files:
        type: integer
    type: object
  structs.BillingInterval:
    enum:
      - daily
      - weekly
      - monthly
      - yearly
    type: string
    x-enum-varnames:
      - BillingIntervalDaily
      - BillingIntervalWeekly
      - BillingIntervalMonthly
      - BillingIntervalYearly
  structs.CancelSubscriptionInput:
    properties:
      immediate:
        type: boolean
      reason:
        type: string
    type: object
  structs.Captcha:
    properties:
      id:
        type: string
      solution:
        type: string
    required:
      - id
      - solution
    type: object
  structs.CasbinRuleBody:
    properties:
      created_by:
        type: string
      p_type:
        type: string
      updated_by:
        type: string
      v0:
        type: string
      v1:
        type: string
      v2:
        type: string
      v3:
        type: string
      v4:
        type: string
      v5:
        type: string
    required:
      - p_type
      - v0
      - v1
      - v2
    type: object
  structs.Channel:
    properties:
      config:
        $ref: '#/definitions/structs.ProviderConfig'
      created_at:
        type: integer
      id:
        type: string
      is_default:
        type: boolean
      metadata:
        additionalProperties: { }
        type: object
      name:
        type: string
      provider:
        $ref: '#/definitions/structs.PaymentProvider'
      status:
        $ref: '#/definitions/structs.ChannelStatus'
      supported_types:
        items:
          $ref: '#/definitions/structs.PaymentType'
        type: array
      tenant_id:
        type: string
      updated_at:
        type: integer
    type: object
  structs.ChannelStatus:
    enum:
      - active
      - disabled
      - testing
    type: string
    x-enum-varnames:
      - ChannelStatusActive
      - ChannelStatusDisabled
      - ChannelStatusTesting
  structs.CompleteTaskRequest:
    properties:
      action:
        $ref: '#/definitions/structs.ActionType'
      attachments:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      comment:
        type: string
      form_data:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      operator:
        type: string
      task_id:
        type: string
      variables:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
    required:
      - action
      - operator
      - task_id
    type: object
  structs.CompleteTaskResponse:
    properties:
      action:
        $ref: '#/definitions/structs.ActionType'
      end_time:
        type: integer
      next_nodes:
        items:
          type: string
        type: array
      process_id:
        type: string
      task_id:
        type: string
    type: object
  structs.CounterBody:
    properties:
      created_by:
        type: string
      current_value:
        type: integer
      date_format:
        type: string
      description:
        type: string
      disabled:
        type: boolean
      identifier:
        type: string
      increment_step:
        type: integer
      name:
        type: string
      prefix:
        type: string
      start_value:
        type: integer
      suffix:
        type: string
      tenant_id:
        type: string
      updated_by:
        type: string
    type: object
  structs.CreateChannel:
    properties:
      channel:
        $ref: '#/definitions/ncobase_core_realtime_structs.ChannelBody'
    type: object
  structs.CreateChannelBody:
    properties:
      allowed_types:
        description: article, video, image, audio, mixed
        items:
          type: string
        type: array
      auto_publish:
        type: boolean
      config:
        allOf:
          - $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
        description: API keys, secrets, endpoints, etc.
      created_by:
        type: string
      description:
        type: string
      icon:
        type: string
      logo:
        type: string
      name:
        type: string
      require_review:
        type: boolean
      slug:
        type: string
      status:
        description: '0: active, 1: inactive'
        type: integer
      tenant_id:
        type: string
      type:
        description: website, wechat, douyin, tiktok, xiaohongshu, twitter, facebook,
          custom
        type: string
      updated_by:
        type: string
      webhook_url:
        type: string
    type: object
  structs.CreateChannelInput:
    properties:
      config:
        $ref: '#/definitions/structs.ProviderConfig'
      is_default:
        type: boolean
      metadata:
        additionalProperties: { }
        type: object
      name:
        type: string
      provider:
        $ref: '#/definitions/structs.PaymentProvider'
      status:
        $ref: '#/definitions/structs.ChannelStatus'
      supported_types:
        items:
          $ref: '#/definitions/structs.PaymentType'
        type: array
      tenant_id:
        type: string
    required:
      - config
      - name
      - provider
      - status
      - supported_types
    type: object
  structs.CreateDistributionBody:
    properties:
      channel_id:
        type: string
      created_by:
        type: string
      custom_data:
        allOf:
          - $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
        description: Custom data for the distribution
      error_details:
        description: Error details if distribution failed
        type: string
      external_id:
        description: ID on the external platform
        type: string
      external_url:
        description: URL on the external platform
        type: string
      meta_data:
        allOf:
          - $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
        description: Platform-specific data
      published_at:
        type: integer
      scheduled_at:
        type: integer
      status:
        description: '0: draft, 1: scheduled, 2: published, 3: failed, 4: cancelled'
        type: integer
      tenant_id:
        type: string
      topic_id:
        type: string
      updated_by:
        type: string
    type: object
  structs.CreateEndpointBody:
    properties:
      auth_config:
        type: string
      auth_type:
        enum:
          - None
          - Basic
          - Bearer
          - OAuth
          - ApiKey
        type: string
      base_url:
        type: string
      created_by:
        type: string
      description:
        type: string
      disabled:
        type: boolean
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      log_requests:
        type: boolean
      log_responses:
        type: boolean
      name:
        type: string
      protocol:
        enum:
          - HTTP
          - HTTPS
          - WS
          - WSS
          - TCP
          - UDP
        type: string
      retry_count:
        type: integer
      timeout:
        type: integer
      updated_by:
        type: string
      use_circuit_breaker:
        type: boolean
      validate_ssl:
        type: boolean
    required:
      - base_url
      - name
    type: object
  structs.CreateEvent:
    properties:
      event:
        $ref: '#/definitions/structs.EventBody'
    type: object
  structs.CreateMediaBody:
    properties:
      alt:
        type: string
      created_by:
        type: string
      description:
        type: string
      duration:
        type: number
      height:
        type: integer
      metadata:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      mime_type:
        type: string
      path:
        type: string
      size:
        type: integer
      tenant_id:
        type: string
      title:
        type: string
      type:
        description: image, video, audio, file
        type: string
      updated_by:
        type: string
      url:
        type: string
      width:
        type: integer
    type: object
  structs.CreateNotification:
    properties:
      notification:
        $ref: '#/definitions/structs.NotificationBody'
    type: object
  structs.CreateOrderInput:
    properties:
      amount:
        type: number
      channel_id:
        type: string
      currency:
        $ref: '#/definitions/structs.CurrencyCode'
      description:
        type: string
      expires_at:
        type: string
      metadata:
        additionalProperties: { }
        type: object
      order_number:
        type: string
      paid_at:
        type: string
      product_id:
        type: string
      provider_ref:
        type: string
      status:
        $ref: '#/definitions/structs.PaymentStatus'
      subscription_id:
        type: string
      tenant_id:
        type: string
      type:
        $ref: '#/definitions/structs.PaymentType'
      user_id:
        type: string
    type: object
  structs.CreatePermissionBody:
    properties:
      action:
        type: string
      created_by:
        type: string
      default:
        type: boolean
      description:
        type: string
      disabled:
        type: boolean
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      name:
        type: string
      subject:
        type: string
      updated_by:
        type: string
    type: object
  structs.CreateProductInput:
    properties:
      billing_interval:
        $ref: '#/definitions/structs.BillingInterval'
      currency:
        $ref: '#/definitions/structs.CurrencyCode'
      description:
        type: string
      features:
        items:
          type: string
        type: array
      metadata:
        additionalProperties: { }
        type: object
      name:
        type: string
      price:
        type: number
      pricing_type:
        $ref: '#/definitions/structs.PricingType'
      status:
        $ref: '#/definitions/structs.ProductStatus'
      tenant_id:
        type: string
      trial_days:
        type: integer
    required:
      - currency
      - description
      - name
      - price
      - pricing_type
      - status
    type: object
  structs.CreateRoleBody:
    properties:
      created_by:
        type: string
      description:
        type: string
      disabled:
        type: boolean
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      name:
        type: string
      slug:
        type: string
      updated_by:
        type: string
    type: object
  structs.CreateRouteBody:
    properties:
      cache_enabled:
        type: boolean
      cache_ttl:
        type: integer
      created_by:
        type: string
      description:
        type: string
      disabled:
        type: boolean
      endpoint_id:
        type: string
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      input_transformer_id:
        type: string
      method:
        type: string
      name:
        type: string
      output_transformer_id:
        type: string
      path_pattern:
        type: string
      rate_limit:
        type: string
      strip_auth_header:
        type: boolean
      target_path:
        type: string
      updated_by:
        type: string
    required:
      - endpoint_id
      - method
      - name
      - path_pattern
      - target_path
    type: object
  structs.CreateSubscription:
    properties:
      subscription:
        $ref: '#/definitions/structs.SubscriptionBody'
    type: object
  structs.CreateSubscriptionInput:
    properties:
      channel_id:
        type: string
      metadata:
        additionalProperties: { }
        type: object
      product_id:
        type: string
      tenant_id:
        type: string
      trial_days:
        type: integer
      user_id:
        type: string
    required:
      - channel_id
      - product_id
      - user_id
    type: object
  structs.CreateTaxonomyBody:
    properties:
      color:
        type: string
      cover:
        type: string
      created_by:
        type: string
      description:
        type: string
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      icon:
        type: string
      keywords:
        type: string
      name:
        type: string
      parent_id:
        type: string
      slug:
        type: string
      status:
        type: integer
      tenant_id:
        type: string
      thumbnail:
        type: string
      type:
        type: string
      updated_by:
        type: string
      url:
        type: string
    type: object
  structs.CreateTenantBody:
    properties:
      copyright:
        type: string
      created_by:
        type: string
      description:
        type: string
      disabled:
        type: boolean
      expired_at:
        type: integer
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      keywords:
        type: string
      logo:
        type: string
      logo_alt:
        type: string
      name:
        type: string
      order:
        type: integer
      slug:
        type: string
      title:
        type: string
      type:
        type: string
      updated_by:
        type: string
      url:
        type: string
    type: object
  structs.CreateTopicBody:
    properties:
      content:
        type: string
      content_type:
        description: article, video, etc.
        type: string
      created_by:
        type: string
      excerpt:
        type: string
      excerpt_auto:
        type: boolean
      featured_media:
        type: string
      markdown:
        type: boolean
      metadata:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      name:
        type: string
      private:
        type: boolean
      released:
        type: integer
      seo_description:
        type: string
      seo_keywords:
        type: string
      seo_title:
        type: string
      slug:
        type: string
      status:
        type: integer
      tags:
        items:
          type: string
        type: array
      taxonomy_id:
        type: string
      temp:
        type: boolean
      tenant_id:
        type: string
      thumbnail:
        type: string
      title:
        type: string
      updated_by:
        type: string
      version:
        type: integer
    type: object
  structs.CreateTopicMediaBody:
    properties:
      created_by:
        type: string
      media_id:
        type: string
      order:
        type: integer
      topic_id:
        type: string
      type:
        description: featured, gallery, attachment, etc.
        type: string
    type: object
  structs.CreateTransformerBody:
    properties:
      content:
        type: string
      content_type:
        type: string
      created_by:
        type: string
      description:
        type: string
      disabled:
        type: boolean
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      name:
        type: string
      type:
        enum:
          - template
          - script
          - mapping
        type: string
      updated_by:
        type: string
    required:
      - content
      - content_type
      - name
      - type
    type: object
  structs.CurrencyCode:
    enum:
      - USD
      - EUR
      - GBP
      - CNY
      - JPY
    type: string
    x-enum-varnames:
      - CurrencyUSD
      - CurrencyEUR
      - CurrencyGBP
      - CurrencyCNY
      - CurrencyJPY
  structs.DelegateTaskRequest:
    properties:
      comment:
        type: string
      delegate:
        type: string
      delegator:
        type: string
      reason:
        type: string
      task_id:
        type: string
    required:
      - delegate
      - delegator
      - task_id
    type: object
  structs.DelegationBody:
    properties:
      conditions:
        items:
          type: string
        type: array
      delegatee_id:
        type: string
      delegator_id:
        type: string
      end_time:
        type: integer
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      is_enabled:
        type: boolean
      node_type:
        type: string
      start_time:
        type: integer
      status:
        type: string
      template_id:
        type: string
      tenant_id:
        type: string
    type: object
  structs.DictionaryBody:
    properties:
      created_by:
        type: string
      description:
        type: string
      name:
        type: string
      slug:
        type: string
      tenant_id:
        type: string
      type:
        type: string
      updated_by:
        type: string
      value:
        type: string
    type: object
  structs.EventBody:
    properties:
      channel_id:
        type: string
      payload:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      type:
        type: string
      user_id:
        type: string
    type: object
  structs.FileCategory:
    enum:
      - image
      - document
      - video
      - audio
      - archive
      - other
    type: string
    x-enum-varnames:
      - FileCategoryImage
      - FileCategoryDocument
      - FileCategoryVideo
      - FileCategoryAudio
      - FileCategoryArchive
      - FileCategoryOther
  structs.FileMetadata:
    properties:
      author:
        description: Content author
        type: string
      category:
        allOf:
          - $ref: '#/definitions/structs.FileCategory'
        description: File category
      creation_date:
        description: Original file creation date
        type: string
      custom_fields:
        additionalProperties: { }
        description: User-defined metadata
        type: object
      description:
        description: Content description
        type: string
      duration:
        description: For audio/video in seconds
        type: number
      height:
        description: For images
        type: integer
      keywords:
        description: Content keywords
        items:
          type: string
        type: array
      modified_date:
        description: Last modification date
        type: string
      title:
        description: Content title
        type: string
      width:
        description: For images
        type: integer
    type: object
  structs.GroupBody:
    properties:
      created_by:
        type: string
      description:
        type: string
      disabled:
        type: boolean
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      leader:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      name:
        type: string
      parent_id:
        type: string
      slug:
        type: string
      tenant_id:
        type: string
      updated_by:
        type: string
    type: object
  structs.HistoryBody:
    properties:
      action:
        type: string
      comment:
        type: string
      details:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      form_data:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      node_config:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      node_id:
        type: string
      node_name:
        type: string
      node_type:
        type: string
      operator:
        type: string
      operator_dept:
        type: string
      process_id:
        type: string
      task_id:
        type: string
      template_id:
        type: string
      tenant_id:
        type: string
      type:
        type: string
      variables:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
    type: object
  structs.Log:
    properties:
      channel_id:
        type: string
      created_at:
        type: integer
      error:
        type: string
      id:
        type: string
      ip:
        type: string
      metadata:
        additionalProperties: { }
        type: object
      order_id:
        type: string
      request_data:
        type: string
      response_data:
        type: string
      status_after:
        $ref: '#/definitions/structs.PaymentStatus'
      status_before:
        $ref: '#/definitions/structs.PaymentStatus'
      type:
        $ref: '#/definitions/structs.LogType'
      updated_at:
        type: integer
      user_agent:
        type: string
      user_id:
        type: string
    type: object
  structs.LogType:
    enum:
      - create
      - update
      - verify
      - callback
      - notify
      - refund
      - error
    type: string
    x-enum-varnames:
      - LogTypeCreate
      - LogTypeUpdate
      - LogTypeVerify
      - LogTypeCallback
      - LogTypeNotify
      - LogTypeRefund
      - LogTypeError
  structs.LoginBody:
    properties:
      captcha:
        $ref: '#/definitions/structs.Captcha'
      password:
        type: string
      username:
        type: string
    required:
      - password
      - username
    type: object
  structs.MenuBody:
    properties:
      created_by:
        type: string
      disabled:
        type: boolean
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      hidden:
        type: boolean
      icon:
        type: string
      label:
        type: string
      name:
        type: string
      order:
        type: integer
      parent_id:
        type: string
      path:
        type: string
      perms:
        type: string
      slug:
        type: string
      target:
        type: string
      tenant_id:
        type: string
      type:
        type: string
      updated_by:
        type: string
    type: object
  structs.NodeBody:
    properties:
      assignees:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      branch_conditions:
        items:
          type: string
        type: array
      branch_nodes:
        items:
          type: string
        type: array
      conditions:
        items:
          type: string
        type: array
      default_branch:
        type: string
      description:
        type: string
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      form_config:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      handlers:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      is_working_day:
        type: boolean
      name:
        type: string
      next_nodes:
        items:
          type: string
        type: array
      node_key:
        type: string
      parallel_nodes:
        items:
          type: string
        type: array
      permissions:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      prev_nodes:
        items:
          type: string
        type: array
      process_id:
        type: string
      properties:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      required:
        type: boolean
      retry_interval:
        type: integer
      retry_times:
        type: integer
      skippable:
        type: boolean
      status:
        type: string
      template_id:
        type: string
      tenant_id:
        type: string
      timeout_config:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      timeout_duration:
        type: integer
      type:
        type: string
      variables:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
    type: object
  structs.NotificationBody:
    properties:
      channel_id:
        type: string
      content:
        type: string
      links:
        items:
          $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
        type: array
      status:
        type: integer
      title:
        type: string
      type:
        type: string
      user_id:
        type: string
    type: object
  structs.OptionsBody:
    properties:
      autoload:
        type: boolean
      name:
        type: string
      tenant_id:
        type: string
      type:
        type: string
      value:
        type: string
    type: object
  structs.Order:
    properties:
      amount:
        type: number
      channel_id:
        type: string
      created_at:
        type: integer
      currency:
        $ref: '#/definitions/structs.CurrencyCode'
      description:
        type: string
      expires_at:
        type: string
      id:
        type: string
      metadata:
        additionalProperties: { }
        type: object
      order_number:
        type: string
      paid_at:
        type: string
      product_id:
        type: string
      provider_ref:
        type: string
      status:
        $ref: '#/definitions/structs.PaymentStatus'
      subscription_id:
        type: string
      tenant_id:
        type: string
      type:
        $ref: '#/definitions/structs.PaymentType'
      updated_at:
        type: integer
      user_id:
        type: string
    type: object
  structs.PaymentProvider:
    enum:
      - stripe
      - paypal
      - alipay
      - wechatpay
    type: string
    x-enum-varnames:
      - PaymentProviderStripe
      - PaymentProviderPayPal
      - PaymentProviderAlipay
      - PaymentProviderWeChatPay
  structs.PaymentStatus:
    enum:
      - pending
      - completed
      - failed
      - refunded
      - cancelled
    type: string
    x-enum-varnames:
      - PaymentStatusPending
      - PaymentStatusCompleted
      - PaymentStatusFailed
      - PaymentStatusRefunded
      - PaymentStatusCancelled
  structs.PaymentType:
    enum:
      - one_time
      - subscription
      - recurring
    type: string
    x-enum-varnames:
      - PaymentTypeOneTime
      - PaymentTypeSubscription
      - PaymentTypeRecurring
  structs.PricingType:
    enum:
      - one_time
      - recurring
      - usage_based
      - tiered_usage
    type: string
    x-enum-varnames:
      - PricingTypeOneTime
      - PricingTypeRecurring
      - PricingTypeUsageBased
      - PricingTypeTieredUsage
  structs.PriorityStrategy:
    enum:
      - 0
      - 5
      - 10
      - 15
    type: integer
    x-enum-varnames:
      - PriorityLow
      - PriorityNormal
      - PriorityHigh
      - PriorityUrgent
  structs.ProcessBody:
    properties:
      active_nodes:
        items:
          type: string
        type: array
      allow_cancel:
        type: boolean
      allow_urge:
        type: boolean
      business_key:
        type: string
      callbacks:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      category:
        type: string
      current_node:
        type: string
      due_date:
        type: integer
      duration:
        type: integer
      end_node_id:
        type: string
      end_time:
        type: integer
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      flow_status:
        type: string
      form_code:
        type: string
      initiator:
        type: string
      initiator_dept:
        type: string
      is_suspended:
        type: boolean
      max_duration:
        type: integer
      module_code:
        type: string
      parent_id:
        type: string
      priority:
        type: integer
      process_code:
        type: string
      process_key:
        type: string
      retryable:
        type: boolean
      start_node_id:
        type: string
      start_time:
        type: integer
      status:
        type: string
      suspend_reason:
        type: string
      template_id:
        type: string
      tenant_id:
        type: string
      title:
        type: string
      urge_count:
        type: integer
      variables:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
    type: object
  structs.ProcessDesignBody:
    properties:
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      graph_data:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      is_draft:
        type: boolean
      node_layouts:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      properties:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      source_version:
        type: string
      template_id:
        type: string
      tenant_id:
        type: string
      validation_rules:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      version:
        type: string
    type: object
  structs.ProcessingOptions:
    properties:
      compress_image:
        type: boolean
      compression_quality:
        description: 1-100
        type: integer
      convert_format:
        description: Target format
        type: string
      create_thumbnail:
        type: boolean
      max_height:
        type: integer
      max_width:
        type: integer
      resize_image:
        type: boolean
    type: object
  structs.Product:
    properties:
      billing_interval:
        $ref: '#/definitions/structs.BillingInterval'
      created_at:
        type: integer
      currency:
        $ref: '#/definitions/structs.CurrencyCode'
      description:
        type: string
      features:
        items:
          type: string
        type: array
      id:
        type: string
      metadata:
        additionalProperties: { }
        type: object
      name:
        type: string
      price:
        type: number
      pricing_type:
        $ref: '#/definitions/structs.PricingType'
      status:
        $ref: '#/definitions/structs.ProductStatus'
      tenant_id:
        type: string
      trial_days:
        type: integer
      updated_at:
        type: integer
    type: object
  structs.ProductStatus:
    enum:
      - active
      - disabled
      - draft
    type: string
    x-enum-varnames:
      - ProductStatusActive
      - ProductStatusDisabled
      - ProductStatusDraft
  structs.ProviderConfig:
    additionalProperties: { }
    type: object
  structs.ReadCasbinRule:
    properties:
      created_at:
        type: integer
      created_by:
        type: string
      id:
        type: string
      p_type:
        type: string
      updated_at:
        type: integer
      updated_by:
        type: string
      v0:
        type: string
      v1:
        type: string
      v2:
        type: string
      v3:
        type: string
      v4:
        type: string
      v5:
        type: string
    type: object
  structs.ReadCounter:
    properties:
      created_at:
        type: integer
      created_by:
        type: string
      current_value:
        type: integer
      date_format:
        type: string
      description:
        type: string
      disabled:
        type: boolean
      id:
        type: string
      identifier:
        type: string
      increment_step:
        type: integer
      name:
        type: string
      prefix:
        type: string
      start_value:
        type: integer
      suffix:
        type: string
      tenant_id:
        type: string
      updated_at:
        type: integer
      updated_by:
        type: string
    type: object
  structs.ReadDelegation:
    properties:
      conditions:
        items:
          type: string
        type: array
      created_at:
        type: integer
      created_by:
        type: string
      delegatee_id:
        type: string
      delegator_id:
        type: string
      end_time:
        type: integer
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      id:
        type: string
      is_enabled:
        type: boolean
      node_type:
        type: string
      start_time:
        type: integer
      status:
        type: string
      template_id:
        type: string
      tenant_id:
        type: string
      updated_at:
        type: integer
      updated_by:
        type: string
    type: object
  structs.ReadDictionary:
    properties:
      created_at:
        type: integer
      created_by:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
      slug:
        type: string
      tenant_id:
        type: string
      type:
        type: string
      updated_at:
        type: integer
      updated_by:
        type: string
      value:
        type: string
    type: object
  structs.ReadDistribution:
    properties:
      channel:
        $ref: '#/definitions/ncobase_domain_content_structs.ReadChannel'
      channel_id:
        type: string
      created_at:
        type: integer
      created_by:
        type: string
      custom_data:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      error_details:
        type: string
      external_id:
        type: string
      external_url:
        type: string
      id:
        type: string
      meta_data:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      published_at:
        type: integer
      scheduled_at:
        type: integer
      status:
        type: integer
      tenant_id:
        type: string
      topic:
        $ref: '#/definitions/structs.ReadTopic'
      topic_id:
        type: string
      updated_at:
        type: integer
      updated_by:
        type: string
    type: object
  structs.ReadEndpoint:
    properties:
      auth_config:
        type: string
      auth_type:
        type: string
      base_url:
        type: string
      created_at:
        type: integer
      created_by:
        type: string
      description:
        type: string
      disabled:
        type: boolean
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      id:
        type: string
      log_requests:
        type: boolean
      log_responses:
        type: boolean
      name:
        type: string
      protocol:
        type: string
      retry_count:
        type: integer
      timeout:
        type: integer
      updated_at:
        type: integer
      updated_by:
        type: string
      use_circuit_breaker:
        type: boolean
      validate_ssl:
        type: boolean
    type: object
  structs.ReadEvent:
    properties:
      channel_id:
        type: string
      created_at:
        type: integer
      id:
        type: string
      payload:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      type:
        type: string
      user_id:
        type: string
    type: object
  structs.ReadFile:
    properties:
      access_level:
        $ref: '#/definitions/structs.AccessLevel'
      bucket:
        type: string
      created_at:
        type: integer
      created_by:
        type: string
      download_url:
        type: string
      endpoint:
        type: string
      expires_at:
        type: integer
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      folder_path:
        type: string
      id:
        type: string
      is_expired:
        type: boolean
      is_public:
        type: boolean
      metadata:
        $ref: '#/definitions/structs.FileMetadata'
      name:
        type: string
      object_id:
        type: string
      path:
        type: string
      size:
        type: integer
      storage:
        type: string
      tags:
        items:
          type: string
        type: array
      tenant_id:
        type: string
      thumbnail_url:
        type: string
      type:
        type: string
      updated_at:
        type: integer
      updated_by:
        type: string
      versions:
        items:
          type: string
        type: array
    type: object
  structs.ReadGroup:
    properties:
      children:
        items: { }
        type: array
      created_at:
        type: integer
      created_by:
        type: string
      description:
        type: string
      disabled:
        type: boolean
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      id:
        type: string
      leader:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      name:
        type: string
      parent_id:
        type: string
      slug:
        type: string
      tenant_id:
        type: string
      updated_at:
        type: integer
      updated_by:
        type: string
    type: object
  structs.ReadHistory:
    properties:
      action:
        type: string
      comment:
        type: string
      created_at:
        type: integer
      created_by:
        type: string
      details:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      form_data:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      id:
        type: string
      node_config:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      node_id:
        type: string
      node_name:
        type: string
      node_type:
        type: string
      operator:
        type: string
      operator_dept:
        type: string
      process_id:
        type: string
      task_id:
        type: string
      template_id:
        type: string
      tenant_id:
        type: string
      type:
        type: string
      updated_at:
        type: integer
      updated_by:
        type: string
      variables:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
    type: object
  structs.ReadMedia:
    properties:
      alt:
        type: string
      created_at:
        type: integer
      created_by:
        type: string
      description:
        type: string
      duration:
        type: number
      height:
        type: integer
      id:
        type: string
      metadata:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      mime_type:
        type: string
      path:
        type: string
      size:
        type: integer
      tenant_id:
        type: string
      title:
        type: string
      type:
        type: string
      updated_at:
        type: integer
      updated_by:
        type: string
      url:
        type: string
      width:
        type: integer
    type: object
  structs.ReadMenu:
    properties:
      children:
        items: { }
        type: array
      created_at:
        type: integer
      created_by:
        type: string
      disabled:
        type: boolean
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      hidden:
        type: boolean
      icon:
        type: string
      id:
        type: string
      label:
        type: string
      name:
        type: string
      order:
        type: integer
      parent_id:
        type: string
      path:
        type: string
      perms:
        type: string
      slug:
        type: string
      target:
        type: string
      tenant_id:
        type: string
      type:
        type: string
      updated_at:
        type: integer
      updated_by:
        type: string
    type: object
  structs.ReadNode:
    properties:
      assignees:
        items:
          type: string
        type: array
      branch_conditions:
        items:
          type: string
        type: array
      branch_nodes:
        items:
          type: string
        type: array
      conditions:
        items:
          type: string
        type: array
      created_at:
        type: integer
      created_by:
        type: string
      default_branch:
        type: string
      description:
        type: string
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      form_config:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      handlers:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      id:
        type: string
      is_working_day:
        type: boolean
      name:
        type: string
      next_nodes:
        items:
          type: string
        type: array
      node_key:
        type: string
      parallel_nodes:
        items:
          type: string
        type: array
      permissions:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      prev_nodes:
        items:
          type: string
        type: array
      process_id:
        type: string
      properties:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      required:
        type: boolean
      retry_interval:
        type: integer
      retry_times:
        type: integer
      skippable:
        type: boolean
      status:
        type: string
      template_id:
        type: string
      tenant_id:
        type: string
      timeout_config:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      timeout_duration:
        type: integer
      type:
        type: string
      updated_at:
        type: integer
      updated_by:
        type: string
      variables:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
    type: object
  structs.ReadNotification:
    properties:
      channel_id:
        type: string
      content:
        type: string
      created_at:
        type: integer
      id:
        type: string
      links:
        items:
          $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
        type: array
      status:
        type: integer
      title:
        type: string
      type:
        type: string
      updated_at:
        type: integer
      user_id:
        type: string
    type: object
  structs.ReadOptions:
    properties:
      autoload:
        type: boolean
      created_at:
        type: integer
      created_by:
        type: string
      id:
        type: string
      name:
        type: string
      tenant_id:
        type: string
      type:
        type: string
      updated_at:
        type: integer
      updated_by:
        type: string
      value:
        type: string
    type: object
  structs.ReadPermission:
    properties:
      action:
        type: string
      created_at:
        type: integer
      created_by:
        type: string
      default:
        type: boolean
      description:
        type: string
      disabled:
        type: boolean
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      id:
        type: string
      name:
        type: string
      subject:
        type: string
      updated_at:
        type: integer
      updated_by:
        type: string
    type: object
  structs.ReadProcess:
    properties:
      active_nodes:
        items:
          type: string
        type: array
      allow_cancel:
        type: boolean
      allow_urge:
        type: boolean
      business_key:
        type: string
      callbacks:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      category:
        type: string
      created_at:
        type: integer
      created_by:
        type: string
      current_node:
        type: string
      due_date:
        type: integer
      duration:
        type: integer
      end_node_id:
        type: string
      end_time:
        type: integer
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      flow_status:
        type: string
      form_code:
        type: string
      id:
        type: string
      initiator:
        type: string
      initiator_dept:
        type: string
      is_suspended:
        type: boolean
      max_duration:
        type: integer
      module_code:
        type: string
      parent_id:
        type: string
      priority:
        type: integer
      process_code:
        type: string
      process_key:
        type: string
      retryable:
        type: boolean
      start_node_id:
        type: string
      start_time:
        type: integer
      status:
        type: string
      suspend_reason:
        type: string
      template_id:
        type: string
      tenant_id:
        type: string
      title:
        type: string
      updated_at:
        type: integer
      updated_by:
        type: string
      urge_count:
        type: integer
      variables:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
    type: object
  structs.ReadProcessDesign:
    properties:
      created_at:
        type: integer
      created_by:
        type: string
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      graph_data:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      id:
        type: string
      is_draft:
        type: boolean
      node_layouts:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      properties:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      source_version:
        type: string
      template_id:
        type: string
      tenant_id:
        type: string
      updated_at:
        type: integer
      updated_by:
        type: string
      validation_rules:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      version:
        type: string
    type: object
  structs.ReadRole:
    properties:
      created_at:
        type: integer
      created_by:
        type: string
      description:
        type: string
      disabled:
        type: boolean
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      id:
        type: string
      name:
        type: string
      slug:
        type: string
      updated_at:
        type: integer
      updated_by:
        type: string
    type: object
  structs.ReadRoute:
    properties:
      cache_enabled:
        type: boolean
      cache_ttl:
        type: integer
      created_at:
        type: integer
      created_by:
        type: string
      description:
        type: string
      disabled:
        type: boolean
      endpoint_id:
        type: string
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      id:
        type: string
      input_transformer_id:
        type: string
      method:
        type: string
      name:
        type: string
      output_transformer_id:
        type: string
      path_pattern:
        type: string
      rate_limit:
        type: string
      strip_auth_header:
        type: boolean
      target_path:
        type: string
      updated_at:
        type: integer
      updated_by:
        type: string
    type: object
  structs.ReadRule:
    properties:
      actions:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      code:
        type: string
      conditions:
        items:
          type: string
        type: array
      created_at:
        type: integer
      created_by:
        type: string
      description:
        type: string
      effective_time:
        type: integer
      expire_time:
        type: integer
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      id:
        type: string
      is_enabled:
        type: boolean
      name:
        type: string
      node_key:
        type: string
      priority:
        type: integer
      rule_key:
        type: string
      status:
        type: string
      template_id:
        type: string
      tenant_id:
        type: string
      type:
        type: string
      updated_at:
        type: integer
      updated_by:
        type: string
    type: object
  structs.ReadSubscription:
    properties:
      channel_id:
        type: string
      created_at:
        type: integer
      id:
        type: string
      status:
        type: integer
      updated_at:
        type: integer
      user_id:
        type: string
    type: object
  structs.ReadTask:
    properties:
      action:
        type: string
      allowed_actions:
        items:
          type: string
        type: array
      assign_strategy:
        type: string
      assignees:
        items:
          type: string
        type: array
      candidates:
        items:
          type: string
        type: array
      category:
        type: string
      claim_time:
        type: integer
      comment:
        type: string
      created_at:
        type: integer
      created_by:
        type: string
      delegated_from:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      description:
        type: string
      due_time:
        type: integer
      duration:
        type: integer
      end_time:
        type: integer
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      form_data:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      id:
        type: string
      is_delegated:
        type: boolean
      is_resubmit:
        type: boolean
      is_timeout:
        type: boolean
      is_transferred:
        type: boolean
      is_urged:
        type: boolean
      name:
        type: string
      node_key:
        type: string
      node_type:
        type: string
      parent_task_id:
        type: string
      priority:
        type: integer
      process_id:
        type: string
      restrictions:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      start_time:
        type: integer
      status:
        type: string
      sub_tasks:
        items:
          type: string
        type: array
      task_key:
        type: string
      tenant_id:
        type: string
      updated_at:
        type: integer
      updated_by:
        type: string
      urge_count:
        type: integer
      variables:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      weight:
        $ref: '#/definitions/structs.PriorityStrategy'
    type: object
  structs.ReadTaxonomy:
    properties:
      children:
        items: { }
        type: array
      color:
        type: string
      cover:
        type: string
      created_at:
        type: integer
      created_by:
        type: string
      description:
        type: string
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      icon:
        type: string
      id:
        type: string
      keywords:
        type: string
      name:
        type: string
      parent_id:
        type: string
      slug:
        type: string
      status:
        type: integer
      tenant_id:
        type: string
      thumbnail:
        type: string
      type:
        type: string
      updated_at:
        type: integer
      updated_by:
        type: string
      url:
        type: string
    type: object
  structs.ReadTemplate:
    properties:
      allow_cancel:
        type: boolean
      allow_delegate:
        type: boolean
      allow_transfer:
        type: boolean
      allow_urge:
        type: boolean
      category:
        type: string
      code:
        type: string
      created_at:
        type: integer
      created_by:
        type: string
      default_title:
        type: string
      description:
        type: string
      disabled:
        type: boolean
      effective_time:
        type: integer
      expire_time:
        type: integer
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      form_code:
        type: string
      form_config:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      form_permissions:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      id:
        type: string
      is_auto_start:
        type: boolean
      is_draft_enabled:
        type: boolean
      is_latest:
        type: boolean
      module_code:
        type: string
      name:
        type: string
      node_config:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      node_events:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      node_rules:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      permission_configs:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      process_rules:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      reminder_config:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      role_configs:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      source_version:
        type: string
      status:
        type: string
      strict_mode:
        type: boolean
      template_key:
        type: string
      tenant_id:
        type: string
      timeout_config:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      type:
        type: string
      updated_at:
        type: integer
      updated_by:
        type: string
      version:
        type: string
      visible_range:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
    type: object
  structs.ReadTenant:
    properties:
      copyright:
        type: string
      created_at:
        type: integer
      created_by:
        type: string
      description:
        type: string
      disabled:
        type: boolean
      expired_at:
        type: integer
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      id:
        type: string
      keywords:
        type: string
      logo:
        type: string
      logo_alt:
        type: string
      name:
        type: string
      order:
        type: integer
      slug:
        type: string
      title:
        type: string
      type:
        type: string
      updated_at:
        type: integer
      updated_by:
        type: string
      url:
        type: string
    type: object
  structs.ReadTopic:
    properties:
      content:
        type: string
      content_type:
        type: string
      created_at:
        type: integer
      created_by:
        type: string
      excerpt:
        type: string
      excerpt_auto:
        type: boolean
      featured_media:
        type: string
      id:
        type: string
      markdown:
        type: boolean
      media:
        items:
          $ref: '#/definitions/structs.ReadMedia'
        type: array
      metadata:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      name:
        type: string
      private:
        type: boolean
      released:
        type: integer
      seo_description:
        type: string
      seo_keywords:
        type: string
      seo_title:
        type: string
      slug:
        type: string
      status:
        type: integer
      tags:
        items:
          type: string
        type: array
      taxonomy:
        $ref: '#/definitions/structs.ReadTaxonomy'
      taxonomy_id:
        type: string
      temp:
        type: boolean
      tenant_id:
        type: string
      thumbnail:
        type: string
      title:
        type: string
      updated_at:
        type: integer
      updated_by:
        type: string
      version:
        type: integer
    type: object
  structs.ReadTopicMedia:
    properties:
      created_at:
        type: integer
      created_by:
        type: string
      id:
        type: string
      media:
        $ref: '#/definitions/structs.ReadMedia'
      media_id:
        type: string
      order:
        type: integer
      topic_id:
        type: string
      type:
        type: string
      updated_at:
        type: integer
      updated_by:
        type: string
    type: object
  structs.ReadTransformer:
    properties:
      content:
        type: string
      content_type:
        type: string
      created_at:
        type: integer
      created_by:
        type: string
      description:
        type: string
      disabled:
        type: boolean
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      id:
        type: string
      name:
        type: string
      type:
        type: string
      updated_at:
        type: integer
      updated_by:
        type: string
    type: object
  structs.ReadUser:
    properties:
      created_at:
        type: integer
      email:
        type: string
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      id:
        type: string
      is_admin:
        type: boolean
      is_certified:
        type: boolean
      phone:
        type: string
      status:
        type: integer
      updated_at:
        type: integer
      username:
        type: string
    type: object
  structs.ReadUserProfile:
    properties:
      about:
        type: string
      display_name:
        type: string
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      links:
        items:
          $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
        type: array
      short_bio:
        type: string
      thumbnail:
        type: string
    type: object
  structs.RefreshTokenBody:
    properties:
      refresh_token:
        type: string
    required:
      - refresh_token
    type: object
  structs.RefundOrderInput:
    properties:
      amount:
        minimum: 0
        type: number
      reason:
        type: string
    type: object
  structs.RegisterBody:
    properties:
      display_name:
        type: string
      phone:
        type: string
      register_token:
        type: string
      short_bio:
        type: string
      tenant:
        type: string
      username:
        type: string
    required:
      - display_name
      - register_token
      - username
    type: object
  structs.RuleBody:
    properties:
      actions:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      code:
        type: string
      conditions:
        items:
          type: string
        type: array
      description:
        type: string
      effective_time:
        type: integer
      expire_time:
        type: integer
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      is_enabled:
        type: boolean
      name:
        type: string
      node_key:
        type: string
      priority:
        type: integer
      rule_key:
        type: string
      status:
        type: string
      template_id:
        type: string
      tenant_id:
        type: string
      type:
        type: string
    type: object
  structs.SendCodeBody:
    properties:
      email:
        type: string
      phone:
        type: string
    type: object
  structs.StartProcessRequest:
    properties:
      business_key:
        type: string
      form_code:
        type: string
      form_data:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      initiator:
        type: string
      initiator_dept:
        type: string
      module_code:
        type: string
      priority:
        type: integer
      template_id:
        type: string
      tenant_id:
        type: string
      variables:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
    required:
      - business_key
      - initiator
      - template_id
    type: object
  structs.StartProcessResponse:
    properties:
      process_id:
        type: string
      start_time:
        type: integer
      status:
        $ref: '#/definitions/structs.Status'
      variables:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
    type: object
  structs.Status:
    enum:
      - draft
      - ready
      - active
      - pending
      - suspended
      - processing
      - completed
      - compensated
      - rejected
      - cancelled
      - terminated
      - rollbacked
      - withdrawn
      - error
    type: string
    x-enum-comments:
      StatusActive: Active
      StatusCancelled: Cancelled
      StatusCompensated: Compensated
      StatusCompleted: Completed
      StatusDraft: Draft
      StatusError: Error
      StatusPending: Pending
      StatusProcessing: Processing
      StatusReady: Ready
      StatusRejected: Rejected
      StatusRollbacked: Rollbacked
      StatusSuspended: Suspended
      StatusTerminated: Terminated
      StatusWithdrawn: Withdrawn
    x-enum-varnames:
      - StatusDraft
      - StatusReady
      - StatusActive
      - StatusPending
      - StatusSuspended
      - StatusProcessing
      - StatusCompleted
      - StatusCompensated
      - StatusRejected
      - StatusCancelled
      - StatusTerminated
      - StatusRollbacked
      - StatusWithdrawn
      - StatusError
  structs.Subscription:
    properties:
      cancel_at:
        type: string
      cancelled_at:
        type: string
      channel_id:
        type: string
      created_at:
        type: integer
      current_period_end:
        type: string
      current_period_start:
        type: string
      id:
        type: string
      metadata:
        additionalProperties: { }
        type: object
      product_id:
        type: string
      provider_ref:
        type: string
      status:
        $ref: '#/definitions/structs.SubscriptionStatus'
      tenant_id:
        type: string
      trial_end:
        type: string
      trial_start:
        type: string
      updated_at:
        type: integer
      user_id:
        type: string
    type: object
  structs.SubscriptionBody:
    properties:
      channel_id:
        type: string
      status:
        description: '0: disabled, 1: enabled'
        type: integer
      user_id:
        type: string
    type: object
  structs.SubscriptionStatus:
    enum:
      - active
      - trialing
      - cancelled
      - expired
      - past_due
    type: string
    x-enum-varnames:
      - SubscriptionStatusActive
      - SubscriptionStatusTrialing
      - SubscriptionStatusCancelled
      - SubscriptionStatusExpired
      - SubscriptionStatusPastDue
  structs.TaskBody:
    properties:
      action:
        type: string
      allowed_actions:
        items:
          type: string
        type: array
      assign_strategy:
        type: string
      assignees:
        items:
          type: string
        type: array
      candidates:
        items:
          type: string
        type: array
      category:
        type: string
      claim_time:
        type: integer
      comment:
        type: string
      delegated_from:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      description:
        type: string
      due_time:
        type: integer
      duration:
        type: integer
      end_time:
        type: integer
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      form_data:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      is_delegated:
        type: boolean
      is_resubmit:
        type: boolean
      is_timeout:
        type: boolean
      is_transferred:
        type: boolean
      is_urged:
        type: boolean
      name:
        type: string
      node_key:
        type: string
      node_type:
        type: string
      parent_task_id:
        type: string
      priority:
        type: integer
      process_id:
        type: string
      restrictions:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      start_time:
        type: integer
      status:
        type: string
      sub_tasks:
        items:
          type: string
        type: array
      task_key:
        type: string
      tenant_id:
        type: string
      urge_count:
        type: integer
      variables:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      weight:
        $ref: '#/definitions/structs.PriorityStrategy'
    type: object
  structs.TemplateBody:
    properties:
      allow_cancel:
        type: boolean
      allow_delegate:
        type: boolean
      allow_transfer:
        type: boolean
      allow_urge:
        type: boolean
      category:
        type: string
      code:
        type: string
      default_title:
        type: string
      description:
        type: string
      disabled:
        type: boolean
      effective_time:
        type: integer
      expire_time:
        type: integer
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      form_code:
        type: string
      form_config:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      form_permissions:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      is_auto_start:
        type: boolean
      is_draft_enabled:
        type: boolean
      is_latest:
        type: boolean
      module_code:
        type: string
      name:
        type: string
      node_config:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      node_events:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      node_rules:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      permission_configs:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      process_rules:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      reminder_config:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      role_configs:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      source_version:
        type: string
      status:
        type: string
      strict_mode:
        type: boolean
      template_key:
        type: string
      tenant_id:
        type: string
      timeout_config:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      type:
        type: string
      version:
        type: string
      visible_range:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
    type: object
  structs.TerminateProcessRequest:
    properties:
      comment:
        type: string
      operator:
        type: string
      process_id:
        type: string
      reason:
        type: string
    required:
      - operator
      - process_id
    type: object
  structs.TransferTaskRequest:
    properties:
      comment:
        type: string
      reason:
        type: string
      task_id:
        type: string
      transferee:
        type: string
      transferor:
        type: string
    required:
      - task_id
      - transferee
      - transferor
    type: object
  structs.UpdateChannel:
    properties:
      channel:
        $ref: '#/definitions/ncobase_core_realtime_structs.ChannelBody'
      id:
        type: string
    type: object
  structs.UpdateChannelBody:
    properties:
      allowed_types:
        description: article, video, image, audio, mixed
        items:
          type: string
        type: array
      auto_publish:
        type: boolean
      config:
        allOf:
          - $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
        description: API keys, secrets, endpoints, etc.
      created_by:
        type: string
      description:
        type: string
      icon:
        type: string
      id:
        type: string
      logo:
        type: string
      name:
        type: string
      require_review:
        type: boolean
      slug:
        type: string
      status:
        description: '0: active, 1: inactive'
        type: integer
      tenant_id:
        type: string
      type:
        description: website, wechat, douyin, tiktok, xiaohongshu, twitter, facebook,
          custom
        type: string
      updated_by:
        type: string
      webhook_url:
        type: string
    type: object
  structs.UpdateChannelInput:
    properties:
      config:
        $ref: '#/definitions/structs.ProviderConfig'
      id:
        type: string
      is_default:
        type: boolean
      metadata:
        additionalProperties: { }
        type: object
      name:
        type: string
      provider:
        $ref: '#/definitions/structs.PaymentProvider'
      status:
        $ref: '#/definitions/structs.ChannelStatus'
      supported_types:
        items:
          $ref: '#/definitions/structs.PaymentType'
        type: array
      tenant_id:
        type: string
    type: object
  structs.UpdateCounterBody:
    properties:
      created_by:
        type: string
      current_value:
        type: integer
      date_format:
        type: string
      description:
        type: string
      disabled:
        type: boolean
      id:
        type: string
      identifier:
        type: string
      increment_step:
        type: integer
      name:
        type: string
      prefix:
        type: string
      start_value:
        type: integer
      suffix:
        type: string
      tenant_id:
        type: string
      updated_by:
        type: string
    type: object
  structs.UpdateDelegationBody:
    properties:
      conditions:
        items:
          type: string
        type: array
      delegatee_id:
        type: string
      delegator_id:
        type: string
      end_time:
        type: integer
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      id:
        type: string
      is_enabled:
        type: boolean
      node_type:
        type: string
      start_time:
        type: integer
      status:
        type: string
      template_id:
        type: string
      tenant_id:
        type: string
    type: object
  structs.UpdateDictionaryBody:
    properties:
      created_by:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
      slug:
        type: string
      tenant_id:
        type: string
      type:
        type: string
      updated_by:
        type: string
      value:
        type: string
    type: object
  structs.UpdateDistributionBody:
    properties:
      channel_id:
        type: string
      created_by:
        type: string
      custom_data:
        allOf:
          - $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
        description: Custom data for the distribution
      error_details:
        description: Error details if distribution failed
        type: string
      external_id:
        description: ID on the external platform
        type: string
      external_url:
        description: URL on the external platform
        type: string
      id:
        type: string
      meta_data:
        allOf:
          - $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
        description: Platform-specific data
      published_at:
        type: integer
      scheduled_at:
        type: integer
      status:
        description: '0: draft, 1: scheduled, 2: published, 3: failed, 4: cancelled'
        type: integer
      tenant_id:
        type: string
      topic_id:
        type: string
      updated_by:
        type: string
    type: object
  structs.UpdateFileBody:
    properties:
      access_level:
        allOf:
          - $ref: '#/definitions/structs.AccessLevel'
        description: Access level
      bucket:
        type: string
      created_by:
        type: string
      endpoint:
        type: string
      expires_at:
        description: Expiration timestamp
        type: integer
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      folder_path:
        description: Virtual folder path
        type: string
      id:
        type: string
      is_public:
        description: Publicly accessible flag
        type: boolean
      metadata:
        allOf:
          - $ref: '#/definitions/structs.FileMetadata'
        description: metadata
      name:
        type: string
      object_id:
        type: string
      path:
        type: string
      processing_options:
        allOf:
          - $ref: '#/definitions/structs.ProcessingOptions'
        description: Processing options
      size:
        type: integer
      storage:
        type: string
      tags:
        description: Tags for categorization
        items:
          type: string
        type: array
      tenant_id:
        type: string
      type:
        type: string
      updated_by:
        type: string
      versions:
        description: Previous versions IDs
        items:
          type: string
        type: array
    type: object
  structs.UpdateGroupBody:
    properties:
      created_by:
        type: string
      description:
        type: string
      disabled:
        type: boolean
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      id:
        type: string
      leader:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      name:
        type: string
      parent_id:
        type: string
      slug:
        type: string
      tenant_id:
        type: string
      updated_by:
        type: string
    type: object
  structs.UpdateMediaBody:
    properties:
      alt:
        type: string
      created_by:
        type: string
      description:
        type: string
      duration:
        type: number
      height:
        type: integer
      id:
        type: string
      metadata:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      mime_type:
        type: string
      path:
        type: string
      size:
        type: integer
      tenant_id:
        type: string
      title:
        type: string
      type:
        description: image, video, audio, file
        type: string
      updated_by:
        type: string
      url:
        type: string
      width:
        type: integer
    type: object
  structs.UpdateMenuBody:
    properties:
      created_by:
        type: string
      disabled:
        type: boolean
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      hidden:
        type: boolean
      icon:
        type: string
      id:
        type: string
      label:
        type: string
      name:
        type: string
      order:
        type: integer
      parent_id:
        type: string
      path:
        type: string
      perms:
        type: string
      slug:
        type: string
      target:
        type: string
      tenant_id:
        type: string
      type:
        type: string
      updated_by:
        type: string
    type: object
  structs.UpdateNodeBody:
    properties:
      assignees:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      branch_conditions:
        items:
          type: string
        type: array
      branch_nodes:
        items:
          type: string
        type: array
      conditions:
        items:
          type: string
        type: array
      default_branch:
        type: string
      description:
        type: string
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      form_config:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      handlers:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      id:
        type: string
      is_working_day:
        type: boolean
      name:
        type: string
      next_nodes:
        items:
          type: string
        type: array
      node_key:
        type: string
      parallel_nodes:
        items:
          type: string
        type: array
      permissions:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      prev_nodes:
        items:
          type: string
        type: array
      process_id:
        type: string
      properties:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      required:
        type: boolean
      retry_interval:
        type: integer
      retry_times:
        type: integer
      skippable:
        type: boolean
      status:
        type: string
      template_id:
        type: string
      tenant_id:
        type: string
      timeout_config:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      timeout_duration:
        type: integer
      type:
        type: string
      variables:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
    type: object
  structs.UpdateNotification:
    properties:
      id:
        type: string
      notification:
        $ref: '#/definitions/structs.NotificationBody'
    type: object
  structs.UpdateOptionsBody:
    properties:
      autoload:
        type: boolean
      id:
        type: string
      name:
        type: string
      tenant_id:
        type: string
      type:
        type: string
      value:
        type: string
    type: object
  structs.UpdateProcessBody:
    properties:
      active_nodes:
        items:
          type: string
        type: array
      allow_cancel:
        type: boolean
      allow_urge:
        type: boolean
      business_key:
        type: string
      callbacks:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      category:
        type: string
      current_node:
        type: string
      due_date:
        type: integer
      duration:
        type: integer
      end_node_id:
        type: string
      end_time:
        type: integer
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      flow_status:
        type: string
      form_code:
        type: string
      id:
        type: string
      initiator:
        type: string
      initiator_dept:
        type: string
      is_suspended:
        type: boolean
      max_duration:
        type: integer
      module_code:
        type: string
      parent_id:
        type: string
      priority:
        type: integer
      process_code:
        type: string
      process_key:
        type: string
      retryable:
        type: boolean
      start_node_id:
        type: string
      start_time:
        type: integer
      status:
        type: string
      suspend_reason:
        type: string
      template_id:
        type: string
      tenant_id:
        type: string
      title:
        type: string
      urge_count:
        type: integer
      variables:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
    type: object
  structs.UpdateProcessDesignBody:
    properties:
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      graph_data:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      id:
        type: string
      is_draft:
        type: boolean
      node_layouts:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      properties:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      source_version:
        type: string
      template_id:
        type: string
      tenant_id:
        type: string
      validation_rules:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      version:
        type: string
    type: object
  structs.UpdateProductInput:
    properties:
      billing_interval:
        $ref: '#/definitions/structs.BillingInterval'
      description:
        type: string
      features:
        items:
          type: string
        type: array
      id:
        type: string
      metadata:
        additionalProperties: { }
        type: object
      name:
        type: string
      price:
        type: number
      status:
        $ref: '#/definitions/structs.ProductStatus'
      trial_days:
        type: integer
    type: object
  structs.UpdateRuleBody:
    properties:
      actions:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      code:
        type: string
      conditions:
        items:
          type: string
        type: array
      description:
        type: string
      effective_time:
        type: integer
      expire_time:
        type: integer
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      id:
        type: string
      is_enabled:
        type: boolean
      name:
        type: string
      node_key:
        type: string
      priority:
        type: integer
      rule_key:
        type: string
      status:
        type: string
      template_id:
        type: string
      tenant_id:
        type: string
      type:
        type: string
    type: object
  structs.UpdateTaskBody:
    properties:
      action:
        type: string
      allowed_actions:
        items:
          type: string
        type: array
      assign_strategy:
        type: string
      assignees:
        items:
          type: string
        type: array
      candidates:
        items:
          type: string
        type: array
      category:
        type: string
      claim_time:
        type: integer
      comment:
        type: string
      delegated_from:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      description:
        type: string
      due_time:
        type: integer
      duration:
        type: integer
      end_time:
        type: integer
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      form_data:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      id:
        type: string
      is_delegated:
        type: boolean
      is_resubmit:
        type: boolean
      is_timeout:
        type: boolean
      is_transferred:
        type: boolean
      is_urged:
        type: boolean
      name:
        type: string
      node_key:
        type: string
      node_type:
        type: string
      parent_task_id:
        type: string
      priority:
        type: integer
      process_id:
        type: string
      restrictions:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      start_time:
        type: integer
      status:
        type: string
      sub_tasks:
        items:
          type: string
        type: array
      task_key:
        type: string
      tenant_id:
        type: string
      urge_count:
        type: integer
      variables:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      weight:
        $ref: '#/definitions/structs.PriorityStrategy'
    type: object
  structs.UpdateTaxonomyBody:
    properties:
      color:
        type: string
      cover:
        type: string
      created_by:
        type: string
      description:
        type: string
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      icon:
        type: string
      id:
        type: string
      keywords:
        type: string
      name:
        type: string
      parent_id:
        type: string
      slug:
        type: string
      status:
        type: integer
      tenant_id:
        type: string
      thumbnail:
        type: string
      type:
        type: string
      updated_by:
        type: string
      url:
        type: string
    type: object
  structs.UpdateTemplateBody:
    properties:
      allow_cancel:
        type: boolean
      allow_delegate:
        type: boolean
      allow_transfer:
        type: boolean
      allow_urge:
        type: boolean
      category:
        type: string
      code:
        type: string
      default_title:
        type: string
      description:
        type: string
      disabled:
        type: boolean
      effective_time:
        type: integer
      expire_time:
        type: integer
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      form_code:
        type: string
      form_config:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      form_permissions:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      id:
        type: string
      is_auto_start:
        type: boolean
      is_draft_enabled:
        type: boolean
      is_latest:
        type: boolean
      module_code:
        type: string
      name:
        type: string
      node_config:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      node_events:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      node_rules:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      permission_configs:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      process_rules:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      reminder_config:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      role_configs:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      source_version:
        type: string
      status:
        type: string
      strict_mode:
        type: boolean
      template_key:
        type: string
      tenant_id:
        type: string
      timeout_config:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      type:
        type: string
      version:
        type: string
      visible_range:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
    type: object
  structs.UpdateTenantBody:
    properties:
      copyright:
        type: string
      created_by:
        type: string
      description:
        type: string
      disabled:
        type: boolean
      expired_at:
        type: integer
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      id:
        type: string
      keywords:
        type: string
      logo:
        type: string
      logo_alt:
        type: string
      name:
        type: string
      order:
        type: integer
      slug:
        type: string
      title:
        type: string
      type:
        type: string
      updated_by:
        type: string
      url:
        type: string
    type: object
  structs.UpdateTopicBody:
    properties:
      content:
        type: string
      content_type:
        description: article, video, etc.
        type: string
      created_by:
        type: string
      excerpt:
        type: string
      excerpt_auto:
        type: boolean
      featured_media:
        type: string
      id:
        type: string
      markdown:
        type: boolean
      metadata:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      name:
        type: string
      private:
        type: boolean
      released:
        type: integer
      seo_description:
        type: string
      seo_keywords:
        type: string
      seo_title:
        type: string
      slug:
        type: string
      status:
        type: integer
      tags:
        items:
          type: string
        type: array
      taxonomy_id:
        type: string
      temp:
        type: boolean
      tenant_id:
        type: string
      thumbnail:
        type: string
      title:
        type: string
      updated_by:
        type: string
      version:
        type: integer
    type: object
  structs.UrgeTaskRequest:
    properties:
      comment:
        type: string
      operator:
        type: string
      task_id:
        type: string
      variables:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
    required:
      - operator
      - task_id
    type: object
  structs.UserBody:
    properties:
      created_at:
        type: integer
      email:
        type: string
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      id:
        type: string
      is_admin:
        type: boolean
      is_certified:
        type: boolean
      phone:
        type: string
      status:
        type: integer
      updated_at:
        type: integer
      username:
        type: string
    type: object
  structs.UserPassword:
    properties:
      confirm:
        type: string
      new_password:
        type: string
      old_password:
        type: string
      user:
        type: string
    required:
      - confirm
      - new_password
      - user
    type: object
  structs.WithdrawTaskRequest:
    properties:
      comment:
        type: string
      operator:
        type: string
      reason:
        type: string
      task_id:
        type: string
    required:
      - operator
      - task_id
    type: object
info:
  contact: { }
  description: Base Development Framework
  title: Ncobase
  version: 0.1.0
paths:
  /cms/channels:
    get:
      description: Retrieve a list of distribution channels.
      parameters:
        - in: query
          name: cursor
          type: string
        - in: query
          name: direction
          type: string
        - in: query
          name: limit
          type: integer
        - in: query
          name: status
          type: integer
        - in: query
          name: tenant
          type: string
        - in: query
          name: type
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/ncobase_domain_content_structs.ReadChannel'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      summary: List channels
      tags:
        - cms
    post:
      consumes:
        - application/json
      description: Create a new distribution channel.
      parameters:
        - description: CreateChannelBody object
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/structs.CreateChannelBody'
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_domain_content_structs.ReadChannel'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Create channel
      tags:
        - cms
  /cms/channels/{slug}:
    delete:
      description: Delete an existing distribution channel.
      parameters:
        - description: Channel slug
          in: path
          name: slug
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Delete channel
      tags:
        - cms
    get:
      description: Retrieve details of a distribution channel.
      parameters:
        - description: Channel slug
          in: path
          name: slug
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_domain_content_structs.ReadChannel'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      summary: Get channel
      tags:
        - cms
    put:
      consumes:
        - application/json
      description: Update an existing distribution channel.
      parameters:
        - description: Channel slug
          in: path
          name: slug
          required: true
          type: string
        - description: UpdateChannelBody object
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/structs.UpdateChannelBody'
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_domain_content_structs.ReadChannel'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Update channel
      tags:
        - cms
  /cms/distributions:
    get:
      description: Retrieve a list of content distributions.
      parameters:
        - in: query
          name: channel_id
          type: string
        - in: query
          name: cursor
          type: string
        - in: query
          name: direction
          type: string
        - in: query
          name: limit
          type: integer
        - in: query
          name: status
          type: integer
        - in: query
          name: tenant
          type: string
        - in: query
          name: topic_id
          type: string
        - in: query
          name: with_channel
          type: boolean
        - in: query
          name: with_topic
          type: boolean
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/structs.ReadDistribution'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      summary: List distributions
      tags:
        - cms
    post:
      consumes:
        - application/json
      description: Create a new content distribution.
      parameters:
        - description: CreateDistributionBody object
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/structs.CreateDistributionBody'
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadDistribution'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Create distribution
      tags:
        - cms
  /cms/distributions/{id}:
    delete:
      description: Delete an existing content distribution.
      parameters:
        - description: Distribution ID
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Delete distribution
      tags:
        - cms
    get:
      description: Retrieve details of a content distribution.
      parameters:
        - description: Distribution ID
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadDistribution'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      summary: Get distribution
      tags:
        - cms
    put:
      consumes:
        - application/json
      description: Update an existing content distribution.
      parameters:
        - description: Distribution ID
          in: path
          name: id
          required: true
          type: string
        - description: UpdateDistributionBody object
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/structs.UpdateDistributionBody'
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadDistribution'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Update distribution
      tags:
        - cms
  /cms/distributions/{id}/cancel:
    post:
      consumes:
        - application/json
      description: Cancel a scheduled content distribution.
      parameters:
        - description: Distribution ID
          in: path
          name: id
          required: true
          type: string
        - description: Reason for cancellation
          in: body
          name: reason
          required: true
          schema:
            type: object
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadDistribution'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Cancel distribution
      tags:
        - cms
  /cms/distributions/{id}/publish:
    post:
      description: Publish a content distribution immediately.
      parameters:
        - description: Distribution ID
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadDistribution'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Publish distribution
      tags:
        - cms
  /cms/media:
    get:
      description: Retrieve a list of media resources.
      parameters:
        - in: query
          name: cursor
          type: string
        - in: query
          name: direction
          type: string
        - in: query
          name: limit
          type: integer
        - in: query
          name: search
          type: string
        - in: query
          name: tenant
          type: string
        - in: query
          name: type
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/structs.ReadMedia'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      summary: List media
      tags:
        - cms
    post:
      consumes:
        - application/json
      description: Create a new media resource.
      parameters:
        - description: CreateMediaBody object
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/structs.CreateMediaBody'
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadMedia'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Create media
      tags:
        - cms
  /cms/media/{id}:
    delete:
      description: Delete an existing media resource.
      parameters:
        - description: Media ID
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Delete media
      tags:
        - cms
    get:
      description: Retrieve details of a media resource.
      parameters:
        - description: Media ID
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadMedia'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      summary: Get media
      tags:
        - cms
    put:
      consumes:
        - application/json
      description: Update an existing media resource.
      parameters:
        - description: Media ID
          in: path
          name: id
          required: true
          type: string
        - description: UpdateMediaBody object
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/structs.UpdateMediaBody'
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadMedia'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Update media
      tags:
        - cms
  /cms/taxonomies:
    get:
      description: Retrieve a list of taxonomies.
      parameters:
        - in: query
          name: children
          type: boolean
        - in: query
          name: cursor
          type: string
        - in: query
          name: direction
          type: string
        - in: query
          name: limit
          type: integer
        - in: query
          name: parent
          type: string
        - in: query
          name: sort_by
          type: string
        - in: query
          name: tenant
          type: string
        - in: query
          name: type
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/structs.ReadTaxonomy'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      summary: List taxonomies
      tags:
        - cms
    post:
      consumes:
        - application/json
      description: Create a new taxonomy.
      parameters:
        - description: CreateTaxonomyBody object
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/structs.CreateTaxonomyBody'
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadTaxonomy'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Create taxonomy
      tags:
        - cms
  /cms/taxonomies/{slug}:
    delete:
      description: Delete an existing taxonomy.
      parameters:
        - description: Taxonomy slug
          in: path
          name: slug
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Delete taxonomy
      tags:
        - cms
    get:
      description: Retrieve details of a taxonomy.
      parameters:
        - description: Taxonomy slug
          in: path
          name: slug
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadTaxonomy'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      summary: Get taxonomy
      tags:
        - cms
    put:
      consumes:
        - application/json
      description: Update an existing taxonomy.
      parameters:
        - description: Taxonomy slug
          in: path
          name: slug
          required: true
          type: string
        - description: UpdateTaxonomyBody object
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/structs.UpdateTaxonomyBody'
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadTaxonomy'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Update taxonomy
      tags:
        - cms
  /cms/topic-media:
    get:
      description: Retrieve a list of topic media relations.
      parameters:
        - in: query
          name: cursor
          type: string
        - in: query
          name: direction
          type: string
        - in: query
          name: limit
          type: integer
        - in: query
          name: media_id
          type: string
        - in: query
          name: topic_id
          type: string
        - in: query
          name: type
          type: string
        - in: query
          name: with_media
          type: boolean
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/structs.ReadTopicMedia'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      summary: List topic media relations
      tags:
        - cms
    post:
      consumes:
        - application/json
      description: Create a new relation between a topic and a media resource.
      parameters:
        - description: CreateTopicMediaBody object
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/structs.CreateTopicMediaBody'
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadTopicMedia'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Create topic media relation
      tags:
        - cms
  /cms/topic-media/{id}:
    delete:
      description: Delete an existing topic media relation.
      parameters:
        - description: Topic Media ID
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Delete topic media relation
      tags:
        - cms
    get:
      description: Retrieve details of a topic media relation.
      parameters:
        - description: Topic Media ID
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadTopicMedia'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      summary: Get topic media relation
      tags:
        - cms
    put:
      consumes:
        - application/json
      description: Update an existing relation between a topic and media.
      parameters:
        - description: Topic Media ID
          in: path
          name: id
          required: true
          type: string
        - description: Update parameters
          in: body
          name: body
          required: true
          schema:
            type: object
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadTopicMedia'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Update topic media relation
      tags:
        - cms
  /cms/topic-media/by-topic-and-media:
    get:
      description: Retrieve a topic media relation by topic ID and media ID.
      parameters:
        - description: Topic ID
          in: query
          name: topicId
          required: true
          type: string
        - description: Media ID
          in: query
          name: mediaId
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadTopicMedia'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      summary: Get by topic and media
      tags:
        - cms
  /cms/topic-media/by-topic/{topicId}:
    get:
      description: Retrieve all media relations for a specific topic.
      parameters:
        - description: Topic ID
          in: path
          name: topicId
          required: true
          type: string
        - description: Media Type
          enum:
            - featured
            - gallery
            - attachment
          in: query
          name: type
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/structs.ReadTopicMedia'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      summary: List by topic
      tags:
        - cms
  /cms/topics:
    get:
      description: Retrieve a list of topics.
      parameters:
        - in: query
          name: cursor
          type: string
        - in: query
          name: direction
          type: string
        - in: query
          name: limit
          type: integer
        - in: query
          name: taxonomy
          type: string
        - in: query
          name: tenant
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/structs.ReadTopic'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      summary: List topics
      tags:
        - cms
    post:
      consumes:
        - application/json
      description: Create a new topic.
      parameters:
        - description: CreateTopicBody object
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/structs.CreateTopicBody'
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadTopic'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Create topic
      tags:
        - cms
  /cms/topics/{slug}:
    delete:
      description: Delete an existing topic.
      parameters:
        - description: Topic slug
          in: path
          name: slug
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Delete topic
      tags:
        - cms
    get:
      description: Retrieve details of a topic.
      parameters:
        - description: Topic slug
          in: path
          name: slug
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadTopic'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      summary: Get topic
      tags:
        - cms
    put:
      consumes:
        - application/json
      description: Update an existing topic, either fully or partially.
      parameters:
        - description: Topic slug
          in: path
          name: slug
          required: true
          type: string
        - description: UpdateTopicBody object
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/structs.UpdateTopicBody'
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadTopic'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Update topic
      tags:
        - cms
  /flow/delegations:
    get:
      description: List delegation rules with pagination
      parameters:
        - in: query
          name: cursor
          type: string
        - in: query
          name: delegator_id
          type: string
        - in: query
          name: direction
          type: string
        - in: query
          name: is_enabled
          type: boolean
        - in: query
          name: limit
          type: integer
        - in: query
          name: node_type
          type: string
        - in: query
          name: status
          type: string
        - in: query
          name: template_id
          type: string
        - in: query
          name: tenant
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/structs.ReadDelegation'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: List delegations
      tags:
        - flow
    post:
      consumes:
        - application/json
      description: Create a new delegation rule
      parameters:
        - description: Delegation creation body
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/structs.DelegationBody'
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/structs.ReadDelegation'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Create delegation
      tags:
        - flow
  /flow/delegations/{id}:
    delete:
      description: Delete a delegation rule
      parameters:
        - description: Delegation ID
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Delete delegation
      tags:
        - flow
    get:
      description: Get delegation rule details
      parameters:
        - description: Delegation ID
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/structs.ReadDelegation'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Get delegation
      tags:
        - flow
    put:
      consumes:
        - application/json
      description: Update delegation rule details
      parameters:
        - description: Delegation ID
          in: path
          name: id
          required: true
          type: string
        - description: Delegation update body
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/structs.UpdateDelegationBody'
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/structs.ReadDelegation'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Update delegation
      tags:
        - flow
  /flow/delegations/{id}/disable:
    post:
      description: Disable a delegation rule
      parameters:
        - description: Delegation ID
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Disable delegation
      tags:
        - flow
  /flow/delegations/{id}/enable:
    post:
      description: Enable a delegation rule
      parameters:
        - description: Delegation ID
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Enable delegation
      tags:
        - flow
  /flow/histories:
    get:
      description: List history records with pagination
      parameters:
        - in: query
          name: cursor
          type: string
        - in: query
          name: direction
          type: string
        - in: query
          name: limit
          type: integer
        - in: query
          name: node_id
          type: string
        - in: query
          name: operator
          type: string
        - in: query
          name: process_id
          type: string
        - in: query
          name: sort_by
          type: string
        - in: query
          name: task_id
          type: string
        - in: query
          name: tenant
          type: string
        - in: query
          name: type
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/structs.ReadHistory'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: List histories
      tags:
        - flow
    post:
      consumes:
        - application/json
      description: Create a new history record
      parameters:
        - description: History creation body
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/structs.HistoryBody'
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/structs.ReadHistory'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Create history
      tags:
        - flow
  /flow/histories/{id}:
    get:
      description: Get history record details
      parameters:
        - description: History ID
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/structs.ReadHistory'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Get history
      tags:
        - flow
  /flow/nodes:
    get:
      description: List workflow nodes with pagination
      parameters:
        - in: query
          name: cursor
          type: string
        - in: query
          name: direction
          type: string
        - in: query
          name: limit
          type: integer
        - in: query
          name: process_id
          type: string
        - in: query
          name: sort_by
          type: string
        - in: query
          name: status
          type: string
        - in: query
          name: tenant
          type: string
        - in: query
          name: type
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/structs.ReadNode'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: List nodes
      tags:
        - flow
    post:
      consumes:
        - application/json
      description: Create a new workflow node
      parameters:
        - description: Node creation body
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/structs.NodeBody'
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/structs.ReadNode'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Create node
      tags:
        - flow
  /flow/nodes/{id}:
    delete:
      description: Delete a workflow node
      parameters:
        - description: Node Key
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Delete node
      tags:
        - flow
    get:
      description: Get workflow node details
      parameters:
        - description: Node Key
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/structs.ReadNode'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Get node
      tags:
        - flow
    put:
      consumes:
        - application/json
      description: Update workflow node details
      parameters:
        - description: Node ID
          in: path
          name: id
          required: true
          type: string
        - description: Node update body
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/structs.UpdateNodeBody'
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/structs.ReadNode'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Update node
      tags:
        - flow
  /flow/nodes/{id}/rules:
    get:
      description: Get all rules associated with a node
      parameters:
        - description: Node Key
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/structs.ReadRule'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Get node rules
      tags:
        - flow
  /flow/nodes/{id}/status:
    put:
      consumes:
        - application/json
      description: Update workflow node status
      parameters:
        - description: Node ID
          in: path
          name: id
          required: true
          type: string
        - description: New Status
          in: query
          name: status
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Update node status
      tags:
        - flow
  /flow/nodes/{id}/tasks:
    get:
      description: Get all tasks associated with a node
      parameters:
        - description: Node Key
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/structs.ReadTask'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Get node tasks
      tags:
        - flow
  /flow/nodes/{id}/validate:
    post:
      description: Validate configuration of a workflow node
      parameters:
        - description: Node ID
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Validate node config
      tags:
        - flow
  /flow/operators/{operator}/histories:
    get:
      description: Get complete history of operations by an operator
      parameters:
        - description: Operator ID
          in: path
          name: operator
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/structs.ReadHistory'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Get operator history
      tags:
        - flow
  /flow/process-designs:
    get:
      description: List process designs with pagination
      parameters:
        - in: query
          name: cursor
          type: string
        - in: query
          name: direction
          type: string
        - in: query
          name: is_draft
          type: boolean
        - in: query
          name: limit
          type: integer
        - in: query
          name: template_id
          type: string
        - in: query
          name: tenant
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/structs.ReadProcessDesign'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: List process designs
      tags:
        - flow
    post:
      consumes:
        - application/json
      description: Create a new process design
      parameters:
        - description: Process design creation body
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/structs.ProcessDesignBody'
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/structs.ReadProcessDesign'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Create process design
      tags:
        - flow
  /flow/process-designs/{id}:
    delete:
      description: Delete a process design
      parameters:
        - description: Process Design ID
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Delete process design
      tags:
        - flow
    get:
      description: Get process design details
      parameters:
        - description: Process Design ID
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/structs.ReadProcessDesign'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Get process design
      tags:
        - flow
    put:
      consumes:
        - application/json
      description: Update process design details
      parameters:
        - description: Process Design ID
          in: path
          name: id
          required: true
          type: string
        - description: Process design update body
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/structs.UpdateProcessDesignBody'
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/structs.ReadProcessDesign'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Update process design
      tags:
        - flow
  /flow/process-designs/{id}/drafts:
    post:
      consumes:
        - application/json
      description: Save process design as draft
      parameters:
        - description: Process Design ID
          in: path
          name: id
          required: true
          type: string
        - description: Process design data
          in: body
          name: design
          required: true
          schema:
            items:
              type: integer
            type: array
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Save design draft
      tags:
        - flow
  /flow/process-designs/{id}/export:
    get:
      description: Export process design to file
      parameters:
        - description: Process Design ID
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/octet-stream
      responses:
        "200":
          description: OK
          schema:
            type: file
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Export design
      tags:
        - flow
  /flow/process-designs/{id}/publish:
    post:
      description: Publish process design draft as official version
      parameters:
        - description: Process Design ID
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Publish design draft
      tags:
        - flow
  /flow/process-designs/validate:
    post:
      consumes:
        - application/json
      description: Validate process design structure and rules
      parameters:
        - description: Process design data
          in: body
          name: design
          required: true
          schema:
            items:
              type: integer
            type: array
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Validate design
      tags:
        - flow
  /flow/processes:
    get:
      description: List process instances with pagination
      parameters:
        - in: query
          name: cursor
          type: string
        - in: query
          name: direction
          type: string
        - in: query
          name: initiator
          type: string
        - in: query
          name: limit
          type: integer
        - in: query
          name: priority
          type: integer
        - in: query
          name: sort_by
          type: string
        - in: query
          name: status
          type: string
        - in: query
          name: tenant
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/structs.ReadProcess'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: List processes
      tags:
        - flow
    post:
      consumes:
        - application/json
      description: Create a new process instance
      parameters:
        - description: Process creation body
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/structs.ProcessBody'
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/structs.ReadProcess'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Create process
      tags:
        - flow
  /flow/processes/{id}:
    delete:
      description: Delete process instance
      parameters:
        - description: Process Key
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Delete process
      tags:
        - flow
    get:
      description: Get process instance details
      parameters:
        - description: Process Key
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/structs.ReadProcess'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Get process
      tags:
        - flow
    put:
      consumes:
        - application/json
      description: Update process instance details
      parameters:
        - description: Process ID
          in: path
          name: id
          required: true
          type: string
        - description: Process update body
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/structs.UpdateProcessBody'
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/structs.ReadProcess'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Update process
      tags:
        - flow
  /flow/processes/{id}/complete:
    post:
      description: Complete a process instance
      parameters:
        - description: Process ID
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Complete process
      tags:
        - flow
  /flow/processes/{id}/resume:
    post:
      description: Resume a suspended process instance
      parameters:
        - description: Process ID
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Resume process
      tags:
        - flow
  /flow/processes/{id}/suspend:
    post:
      description: Suspend a process instance
      parameters:
        - description: Process ID
          in: path
          name: id
          required: true
          type: string
        - description: Suspension reason
          in: query
          name: reason
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Suspend process
      tags:
        - flow
  /flow/processes/{id}/terminate:
    post:
      consumes:
        - application/json
      description: Terminate a process instance
      parameters:
        - description: Process ID
          in: path
          name: id
          required: true
          type: string
        - description: Process termination request
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/structs.TerminateProcessRequest'
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Terminate process
      tags:
        - flow
  /flow/processes/{process_id}/evaluate-rules:
    post:
      consumes:
        - application/json
      description: Evaluate rules for a process instance
      parameters:
        - description: Process ID
          in: path
          name: process_id
          required: true
          type: string
        - description: Data for rule evaluation
          in: body
          name: data
          required: true
          schema:
            additionalProperties: true
            type: object
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Evaluate rules
      tags:
        - flow
  /flow/processes/{process_id}/histories:
    get:
      description: Get complete history of a process instance
      parameters:
        - description: Process ID
          in: path
          name: process_id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/structs.ReadHistory'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Get process history
      tags:
        - flow
  /flow/processes/{process_id}/nodes:
    get:
      description: Get all nodes of a process instance
      parameters:
        - description: Process ID
          in: path
          name: process_id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/structs.ReadNode'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Get process nodes
      tags:
        - flow
  /flow/processes/start:
    post:
      consumes:
        - application/json
      description: Start a new process instance
      parameters:
        - description: Process start request
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/structs.StartProcessRequest'
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/structs.StartProcessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Start process
      tags:
        - flow
  /flow/rules:
    get:
      description: List workflow rules with pagination
      parameters:
        - in: query
          name: cursor
          type: string
        - in: query
          name: direction
          type: string
        - in: query
          name: is_enabled
          type: boolean
        - in: query
          name: limit
          type: integer
        - in: query
          name: node_key
          type: string
        - in: query
          name: status
          type: string
        - in: query
          name: template_id
          type: string
        - in: query
          name: tenant
          type: string
        - in: query
          name: type
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/structs.ReadRule'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: List rules
      tags:
        - flow
    post:
      consumes:
        - application/json
      description: Create a new workflow rule
      parameters:
        - description: Rule creation body
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/structs.RuleBody'
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/structs.ReadRule'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Create rule
      tags:
        - flow
  /flow/rules/{id}:
    delete:
      description: Delete a workflow rule
      parameters:
        - description: Rule ID
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Delete rule
      tags:
        - flow
    get:
      description: Get workflow rule details
      parameters:
        - description: Rule Key
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/structs.ReadRule'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Get rule
      tags:
        - flow
    put:
      consumes:
        - application/json
      description: Update workflow rule details
      parameters:
        - description: Rule ID
          in: path
          name: id
          required: true
          type: string
        - description: Rule update body
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/structs.UpdateRuleBody'
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/structs.ReadRule'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Update rule
      tags:
        - flow
  /flow/rules/{id}/disable:
    post:
      description: Disable a workflow rule
      parameters:
        - description: Rule ID
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Disable rule
      tags:
        - flow
  /flow/rules/{id}/enable:
    post:
      description: Enable a workflow rule
      parameters:
        - description: Rule ID
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Enable rule
      tags:
        - flow
  /flow/rules/{id}/validate:
    post:
      description: Validate a workflow rule
      parameters:
        - description: Rule ID
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Validate rule
      tags:
        - flow
  /flow/rules/active:
    get:
      description: Get active rules for template or node
      parameters:
        - description: Template ID
          in: query
          name: template_id
          type: string
        - description: Node Key
          in: query
          name: node_key
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/structs.ReadRule'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Get active rules
      tags:
        - flow
  /flow/tasks:
    get:
      description: List tasks with pagination
      parameters:
        - collectionFormat: csv
          in: query
          items:
            type: string
          name: assignees
          type: array
        - in: query
          name: cursor
          type: string
        - in: query
          name: direction
          type: string
        - in: query
          name: is_timeout
          type: boolean
        - in: query
          name: limit
          type: integer
        - in: query
          name: node_key
          type: string
        - in: query
          name: node_type
          type: string
        - in: query
          name: priority
          type: integer
        - in: query
          name: process_id
          type: string
        - in: query
          name: sort_by
          type: string
        - in: query
          name: status
          type: string
        - in: query
          name: tenant
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/structs.ReadTask'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: List tasks
      tags:
        - flow
    post:
      consumes:
        - application/json
      description: Create a new task
      parameters:
        - description: Task creation body
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/structs.TaskBody'
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/structs.ReadTask'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Create task
      tags:
        - flow
  /flow/tasks/{id}:
    delete:
      description: Delete a task
      parameters:
        - description: Task ID
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Delete task
      tags:
        - flow
    get:
      description: Get task details
      parameters:
        - description: Task ID
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/structs.ReadTask'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Get task
      tags:
        - flow
    put:
      consumes:
        - application/json
      description: Update task details
      parameters:
        - description: Task ID
          in: path
          name: id
          required: true
          type: string
        - description: Task update body
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/structs.UpdateTaskBody'
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/structs.ReadTask'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Update task
      tags:
        - flow
  /flow/tasks/{id}/claim:
    post:
      consumes:
        - application/json
      description: Claim an unassigned task
      parameters:
        - description: Task ID
          in: path
          name: id
          required: true
          type: string
        - description: Task assignees
          in: body
          name: assignees
          required: true
          schema:
            items:
              type: string
            type: array
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Claim task
      tags:
        - flow
  /flow/tasks/{id}/complete:
    post:
      consumes:
        - application/json
      description: Complete a task
      parameters:
        - description: Task ID
          in: path
          name: id
          required: true
          type: string
        - description: Task completion request
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/structs.CompleteTaskRequest'
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/structs.CompleteTaskResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Complete task
      tags:
        - flow
  /flow/tasks/{id}/delegate:
    post:
      consumes:
        - application/json
      description: Delegate a task to another user
      parameters:
        - description: Task ID
          in: path
          name: id
          required: true
          type: string
        - description: Task delegation request
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/structs.DelegateTaskRequest'
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Delegate task
      tags:
        - flow
  /flow/tasks/{id}/transfer:
    post:
      consumes:
        - application/json
      description: Transfer a task to another user
      parameters:
        - description: Task ID
          in: path
          name: id
          required: true
          type: string
        - description: Task transfer request
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/structs.TransferTaskRequest'
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Transfer task
      tags:
        - flow
  /flow/tasks/{id}/urge:
    post:
      consumes:
        - application/json
      description: Send urge request for a task
      parameters:
        - description: Task ID
          in: path
          name: id
          required: true
          type: string
        - description: Task urge request
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/structs.UrgeTaskRequest'
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Urge task
      tags:
        - flow
  /flow/tasks/{id}/withdraw:
    post:
      consumes:
        - application/json
      description: Withdraw a completed task
      parameters:
        - description: Task ID
          in: path
          name: id
          required: true
          type: string
        - description: Task withdrawal request
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/structs.WithdrawTaskRequest'
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Withdraw task
      tags:
        - flow
  /flow/tasks/{task_id}/check-delegation:
    get:
      description: Check if task can be delegated to user
      parameters:
        - description: Task ID
          in: path
          name: task_id
          required: true
          type: string
        - description: Assignee ID
          in: query
          name: assignee_id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: Delegatee ID if delegation exists
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Check delegation
      tags:
        - flow
  /flow/tasks/{task_id}/histories:
    get:
      description: Get complete history of a task
      parameters:
        - description: Task ID
          in: path
          name: task_id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/structs.ReadHistory'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Get task history
      tags:
        - flow
  /flow/templates:
    get:
      description: List workflow templates with pagination
      parameters:
        - in: query
          name: category
          type: string
        - in: query
          name: code
          type: string
        - in: query
          name: cursor
          type: string
        - in: query
          name: direction
          type: string
        - in: query
          name: form_code
          type: string
        - in: query
          name: is_latest
          type: boolean
        - in: query
          name: limit
          type: integer
        - in: query
          name: module_code
          type: string
        - in: query
          name: sort_by
          type: string
        - in: query
          name: status
          type: string
        - in: query
          name: tenant
          type: string
        - in: query
          name: type
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/structs.ReadTemplate'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: List templates
      tags:
        - flow
    post:
      consumes:
        - application/json
      description: Create a new workflow template
      parameters:
        - description: Template creation body
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/structs.TemplateBody'
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/structs.ReadTemplate'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Create template
      tags:
        - flow
  /flow/templates/{id}:
    delete:
      description: Delete a workflow template
      parameters:
        - description: Template ID
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Delete template
      tags:
        - flow
    get:
      description: Get workflow template details
      parameters:
        - description: Template ID
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/structs.ReadTemplate'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Get template
      tags:
        - flow
    put:
      consumes:
        - application/json
      description: Update workflow template details
      parameters:
        - description: Template ID
          in: path
          name: id
          required: true
          type: string
        - description: Template update body
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/structs.UpdateTemplateBody'
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/structs.ReadTemplate'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Update template
      tags:
        - flow
  /flow/templates/{id}/designs:
    get:
      description: Get process designs associated with a template
      parameters:
        - description: Template ID
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/structs.ReadProcessDesign'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Get template designs
      tags:
        - flow
  /flow/templates/{id}/disable:
    post:
      description: Disable a workflow template
      parameters:
        - description: Template ID
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Disable template
      tags:
        - flow
  /flow/templates/{id}/enable:
    post:
      description: Enable a workflow template
      parameters:
        - description: Template ID
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Enable template
      tags:
        - flow
  /flow/templates/{id}/rules:
    get:
      description: Get rules associated with a template
      parameters:
        - description: Template ID
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/structs.ReadRule'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Get template rules
      tags:
        - flow
  /flow/templates/{id}/validate:
    post:
      description: Validate a workflow template
      parameters:
        - description: Template ID
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Validate template
      tags:
        - flow
  /flow/templates/{id}/versions:
    post:
      consumes:
        - application/json
      description: Create a new version of existing template
      parameters:
        - description: Template ID
          in: path
          name: id
          required: true
          type: string
        - description: New Version
          in: query
          name: version
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/structs.ReadTemplate'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Create template version
      tags:
        - flow
  /flow/templates/{id}/versions/latest:
    put:
      description: Set a template version as the latest version
      parameters:
        - description: Template ID
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Set latest version
      tags:
        - flow
  /flow/templates/{template_id}/designs/import:
    post:
      consumes:
        - multipart/form-data
      description: Import process design from file
      parameters:
        - description: Template ID
          in: path
          name: template_id
          required: true
          type: string
        - description: Process design file
          in: formData
          name: file
          required: true
          type: file
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Import design
      tags:
        - flow
  /flow/users/{user_id}/delegations:
    get:
      description: Get active delegations for a user
      parameters:
        - description: User ID
          in: path
          name: user_id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/structs.ReadDelegation'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Get active delegations
      tags:
        - flow
  /iam/account:
    get:
      description: Retrieve information about the current user.
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.AccountMeshes'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Get current user
      tags:
        - iam
  /iam/account/password:
    put:
      consumes:
        - application/json
      description: Update the password of the current user.
      parameters:
        - description: UserPassword object
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/structs.UserPassword'
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Update user password
      tags:
        - iam
  /iam/account/tenant:
    get:
      description: Retrieve the tenant associated with the current user.
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadTenant'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Get current user tenant
      tags:
        - iam
  /iam/account/tenants:
    get:
      description: Retrieve the tenant associated with the current user.
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadTenant'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Get current user tenants
      tags:
        - iam
  /iam/authorize/{code}:
    get:
      consumes:
        - application/json
      description: Verify the provided code.
      parameters:
        - description: Verification code
          in: path
          name: code
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            additionalProperties:
              allOf:
                - { }
                - properties:
                    access_token:
                      type: string
                    email:
                      type: string
                    id:
                      type: string
                    register_token:
                      type: string
                  type: object
            type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      summary: Verify code
      tags:
        - iam
  /iam/authorize/send:
    post:
      consumes:
        - application/json
      description: Send a verification code to the specified destination.
      parameters:
        - description: SendCodeBody object
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/structs.SendCodeBody'
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            additionalProperties:
              allOf:
                - { }
                - properties:
                    registered:
                      type: boolean
                  type: object
            type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      summary: Send verification code
      tags:
        - iam
  /iam/captcha/{captcha_id}:
    get:
      description: Stream a captcha image.
      parameters:
        - description: Captcha ID With Extension (png, wav)
          in: path
          name: captcha_id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            type: file
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      summary: Stream captcha
      tags:
        - iam
  /iam/captcha/generate:
    get:
      description: Generate a captcha image.
      parameters:
        - description: Captcha type
          enum:
            - png
            - wav
          in: query
          name: type
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            additionalProperties:
              allOf:
                - { }
                - properties:
                    id:
                      type: string
                    url:
                      type: string
                  type: object
            type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      summary: Generate captcha
      tags:
        - iam
  /iam/captcha/validate:
    post:
      consumes:
        - application/json
      description: Validate a captcha code.
      parameters:
        - description: Captcha object
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/structs.Captcha'
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            additionalProperties:
              allOf:
                - { }
                - properties:
                    message:
                      type: string
                  type: object
            type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      summary: Validate captcha
      tags:
        - iam
  /iam/login:
    post:
      consumes:
        - application/json
      description: Log in a user.
      parameters:
        - description: LoginBody object
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/structs.LoginBody'
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            additionalProperties:
              allOf:
                - { }
                - properties:
                    access_token:
                      type: string
                    id:
                      type: string
                  type: object
            type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      summary: Login
      tags:
        - iam
  /iam/logout:
    post:
      description: Logout the current user.
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Logout
      tags:
        - iam
  /iam/permissions:
    get:
      description: Retrieve a list of permissions based on the provided query parameters
      parameters:
        - in: query
          name: cursor
          type: string
        - in: query
          name: direction
          type: string
        - in: query
          name: limit
          type: integer
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/structs.ReadPermission'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: List all permissions
      tags:
        - iam
    post:
      consumes:
        - application/json
      description: Create a new permission with the provided data
      parameters:
        - description: Permission data
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/structs.CreatePermissionBody'
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadPermission'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Create a new permission
      tags:
        - iam
  /iam/permissions/{slug}:
    delete:
      description: Delete a permission by its slug or ID
      parameters:
        - description: Permission slug or ID
          in: path
          name: slug
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadPermission'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Delete a permission by slug or ID
      tags:
        - iam
    get:
      description: Retrieve a permission by its slug or ID
      parameters:
        - description: Permission slug or ID
          in: path
          name: slug
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadPermission'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Get a permission by slug or ID
      tags:
        - iam
    put:
      consumes:
        - application/json
      description: Update an existing permission with the provided data
      parameters:
        - description: Permission slug or ID
          in: path
          name: slug
          required: true
          type: string
        - description: Permission data
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadPermission'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Update an existing permission
      tags:
        - iam
  /iam/policies:
    get:
      description: Retrieve a list of Casbin rules.
      parameters:
        - in: query
          name: cursor
          type: string
        - in: query
          name: direction
          type: string
        - in: query
          name: limit
          type: integer
        - in: query
          name: p_type
          type: string
        - in: query
          name: v0
          type: string
        - in: query
          name: v1
          type: string
        - in: query
          name: v2
          type: string
        - in: query
          name: v3
          type: string
        - in: query
          name: v4
          type: string
        - in: query
          name: v5
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/structs.CasbinRuleBody'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: List Casbin rules
      tags:
        - iam
    post:
      consumes:
        - application/json
      description: Create a new Casbin rule.
      parameters:
        - description: CasbinRuleBody object
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/structs.CasbinRuleBody'
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadCasbinRule'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Create Casbin rule
      tags:
        - iam
  /iam/policies/{id}:
    delete:
      description: Delete an existing Casbin rule.
      parameters:
        - description: Casbin rule ID
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Delete Casbin rule
      tags:
        - iam
    get:
      description: Retrieve details of a Casbin rule.
      parameters:
        - description: Casbin rule ID
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadCasbinRule'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Get Casbin rule
      tags:
        - iam
    put:
      consumes:
        - application/json
      description: Update an existing Casbin rule, either fully or partially.
      parameters:
        - description: Casbin rule ID
          in: path
          name: id
          required: true
          type: string
        - description: CasbinRuleBody object
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/structs.CasbinRuleBody'
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadCasbinRule'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Update Casbin rule
      tags:
        - iam
  /iam/refresh:
    post:
      consumes:
        - application/json
      description: Refresh the current user's access token.
      parameters:
        - description: Refresh token
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/structs.RefreshTokenBody'
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            additionalProperties:
              allOf:
                - { }
                - properties:
                    access_token:
                      type: string
                    id:
                      type: string
                    refresh_token:
                      type: string
                  type: object
            type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      summary: RefreshToken token
      tags:
        - iam
  /iam/register:
    post:
      consumes:
        - application/json
      description: Register a new user.
      parameters:
        - description: RegisterBody object
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/structs.RegisterBody'
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            additionalProperties:
              allOf:
                - { }
                - properties:
                    access_token:
                      type: string
                    id:
                      type: string
                  type: object
            type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      summary: Register
      tags:
        - iam
  /iam/roles:
    get:
      description: Retrieve a list of roles based on the provided query parameters
      parameters:
        - in: query
          name: cursor
          type: string
        - in: query
          name: direction
          type: string
        - in: query
          name: limit
          type: integer
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/structs.ReadRole'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: List all roles
      tags:
        - iam
    post:
      consumes:
        - application/json
      description: Create a new role with the provided data
      parameters:
        - description: Role data
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/structs.CreateRoleBody'
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadRole'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Create a new role
      tags:
        - iam
  /iam/roles/{slug}:
    delete:
      description: Delete a role by its slug or ID
      parameters:
        - description: Role slug or ID
          in: path
          name: slug
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadRole'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Delete a role by slug or ID
      tags:
        - iam
    get:
      description: Retrieve a role by its slug or ID
      parameters:
        - description: Role slug or ID
          in: path
          name: slug
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadRole'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Get a role by slug or ID
      tags:
        - iam
    put:
      consumes:
        - application/json
      description: Update an existing role with the provided data
      parameters:
        - description: Role slug or ID
          in: path
          name: slug
          required: true
          type: string
        - description: Role data
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadRole'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Update an existing role
      tags:
        - iam
  /iam/roles/{slug}/permissions:
    get:
      description: Retrieve a list of permissions associated with a role by its ID
      parameters:
        - description: Role ID
          in: path
          name: slug
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/structs.ReadPermission'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: List permissions for a role
      tags:
        - iam
  /iam/tenants:
    get:
      description: Retrieve a list of tenants.
      parameters:
        - in: query
          name: cursor
          type: string
        - in: query
          name: direction
          type: string
        - in: query
          name: limit
          type: integer
        - in: query
          name: user
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/structs.ReadTenant'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: List tenants
      tags:
        - iam
    post:
      consumes:
        - application/json
      description: Create a new tenant.
      parameters:
        - description: CreateTenantBody object
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/structs.CreateTenantBody'
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadTenant'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Create tenant
      tags:
        - iam
    put:
      consumes:
        - application/json
      description: Update the tenant information.
      parameters:
        - description: Tenant ID
          in: path
          name: slug
          required: true
          type: string
        - description: UpdateTenantBody object
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/structs.UpdateTenantBody'
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadTenant'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Update tenant
      tags:
        - iam
  /iam/tenants/{slug}:
    delete:
      description: Delete a specific tenant.
      parameters:
        - description: Tenant ID
          in: path
          name: slug
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Delete tenant
      tags:
        - iam
    get:
      description: Retrieve information about a specific tenant.
      parameters:
        - description: Tenant ID
          in: path
          name: slug
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadTenant'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Get tenant
      tags:
        - iam
  /iam/tenants/{slug}/attachments:
    get:
      description: Retrieve a list of attachments associated with a specific tenant.
      parameters:
        - description: Tenant ID
          in: path
          name: slug
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: List tenant attachments
      tags:
        - iam
  /iam/tenants/{slug}/groups:
    get:
      description: Retrieve a list of groups associated with a specific tenant.
      parameters:
        - description: Tenant ID
          in: path
          name: slug
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: List tenant groups
      tags:
        - iam
  /iam/tenants/{slug}/menu:
    get:
      description: Retrieve the menu associated with a specific tenant.
      parameters:
        - description: Tenant ID
          in: path
          name: slug
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Get tenant menu
      tags:
        - iam
  /iam/tenants/{slug}/roles:
    get:
      description: Retrieve a list of roles associated with a specific tenant.
      parameters:
        - description: Tenant ID
          in: path
          name: slug
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: List tenant roles
      tags:
        - iam
  /iam/tenants/{slug}/setting:
    get:
      description: Retrieve the settings associated with a specific tenant.
      parameters:
        - description: Tenant ID
          in: path
          name: slug
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Get tenant setting
      tags:
        - iam
  /iam/tenants/{slug}/settings:
    get:
      description: Retrieve a list of settings associated with a specific tenant.
      parameters:
        - description: Tenant ID
          in: path
          name: slug
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: List tenant settings
      tags:
        - iam
  /iam/tenants/{slug}/users:
    get:
      description: Retrieve a list of users associated with a specific tenant.
      parameters:
        - description: Tenant ID
          in: path
          name: slug
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: List tenant users
      tags:
        - iam
  /iam/token-status:
    get:
      description: Get the current token status.
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            additionalProperties:
              allOf:
                - { }
                - properties:
                    is_authenticated:
                      type: boolean
                  type: object
            type: object
        "401":
          description: unauthorized
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      summary: Token status
      tags:
        - iam
  /iam/users/{username}/tenant:
    get:
      description: Retrieve the tenant associated with the specified user.
      parameters:
        - description: Username
          in: path
          name: username
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadTenant'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Get user owned tenant
      tags:
        - iam
  /org/groups:
    get:
      description: Retrieve a list or tree structure of groups.
      parameters:
        - in: query
          name: children
          type: boolean
        - in: query
          name: cursor
          type: string
        - in: query
          name: direction
          type: string
        - in: query
          name: limit
          type: integer
        - in: query
          name: parent
          type: string
        - in: query
          name: sort_by
          type: string
        - in: query
          name: tenant
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/structs.ReadGroup'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: List groups
      tags:
        - org
    post:
      consumes:
        - application/json
      description: Create a new group.
      parameters:
        - description: GroupBody object
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/structs.GroupBody'
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadGroup'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Create group
      tags:
        - org
    put:
      consumes:
        - application/json
      description: Update an existing group.
      parameters:
        - description: UpdateGroupBody object
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/structs.UpdateGroupBody'
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadGroup'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Update group
      tags:
        - org
  /org/groups/{slug}:
    delete:
      description: Delete a group by ID or slug.
      parameters:
        - description: Group ID or slug
          in: path
          name: slug
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Delete group
      tags:
        - org
    get:
      description: Retrieve a group by ID or slug.
      parameters:
        - description: Group ID or slug
          in: path
          name: slug
          required: true
          type: string
        - in: query
          name: children
          type: boolean
        - in: query
          name: group
          type: string
        - in: query
          name: parent
          type: string
        - in: query
          name: sort_by
          type: string
        - in: query
          name: tenant
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadGroup'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Get group
      tags:
        - org
  /pay/channels:
    get:
      description: Get a paginated list of payment channels
      parameters:
        - description: Filter by provider
          in: query
          name: provider
          type: string
        - description: Filter by status
          in: query
          name: status
          type: string
        - description: Filter by tenant ID
          in: query
          name: tenant_id
          type: string
        - description: Cursor for pagination
          in: query
          name: cursor
          type: string
        - default: 20
          description: Page size
          in: query
          name: page_size
          type: integer
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/structs.Channel'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: List payment channels
      tags:
        - payment
        - channels
    post:
      consumes:
        - application/json
      description: Create a new payment channel
      parameters:
        - description: Channel data
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/structs.CreateChannelInput'
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
              - $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
              - properties:
                  data:
                    $ref: '#/definitions/structs.Channel'
                type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Create payment channel
      tags:
        - payment
        - channels
  /pay/channels/{id}:
    delete:
      description: Delete a payment channel by ID
      parameters:
        - description: Channel ID
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
              - $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
              - properties:
                  data:
                    type: object
                type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Delete payment channel
      tags:
        - payment
        - channels
    get:
      description: Get a payment channel by ID
      parameters:
        - description: Channel ID
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
              - $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
              - properties:
                  data:
                    $ref: '#/definitions/structs.Channel'
                type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Get payment channel
      tags:
        - payment
        - channels
    put:
      consumes:
        - application/json
      description: Update an existing payment channel
      parameters:
        - description: Channel ID
          in: path
          name: id
          required: true
          type: string
        - description: Updates
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/structs.UpdateChannelInput'
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
              - $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
              - properties:
                  data:
                    $ref: '#/definitions/structs.Channel'
                type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Update payment channel
      tags:
        - payment
        - channels
  /pay/channels/{id}/status:
    put:
      consumes:
        - application/json
      description: Change the status of a payment channel
      parameters:
        - description: Channel ID
          in: path
          name: id
          required: true
          type: string
        - description: Status data
          in: body
          name: body
          required: true
          schema:
            type: string
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
              - $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
              - properties:
                  data:
                    $ref: '#/definitions/structs.Channel'
                type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Change channel status
      tags:
        - payment
        - channels
  /pay/logs:
    get:
      description: Get a paginated list of payment logs
      parameters:
        - description: Filter by order ID
          in: query
          name: order_id
          type: string
        - description: Filter by channel ID
          in: query
          name: channel_id
          type: string
        - description: Filter by log type
          in: query
          name: type
          type: string
        - description: Filter by has error
          in: query
          name: has_error
          type: boolean
        - description: Filter by start date (Unix timestamp)
          in: query
          name: start_date
          type: integer
        - description: Filter by end date (Unix timestamp)
          in: query
          name: end_date
          type: integer
        - description: Filter by user ID
          in: query
          name: user_id
          type: string
        - description: Cursor for pagination
          in: query
          name: cursor
          type: string
        - default: 20
          description: Page size
          in: query
          name: page_size
          type: integer
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/structs.Log'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: List payment logs
      tags:
        - payment
        - logs
  /pay/logs/{id}:
    get:
      description: Get a payment log by ID
      parameters:
        - description: Log ID
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
              - $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
              - properties:
                  data:
                    $ref: '#/definitions/structs.Log'
                type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Get payment log
      tags:
        - payment
        - logs
  /pay/logs/order/{orderId}:
    get:
      description: Get payment logs for a specific order
      parameters:
        - description: Order ID
          in: path
          name: orderId
          required: true
          type: string
        - default: 1
          description: Page number
          in: query
          name: page
          type: integer
        - default: 20
          description: Page size
          in: query
          name: page_size
          type: integer
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/structs.Log'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Get logs by order
      tags:
        - payment
        - logs
  /pay/orders:
    get:
      description: Get a paginated list of payment orders
      parameters:
        - description: Filter by status
          in: query
          name: status
          type: string
        - description: Filter by type
          in: query
          name: type
          type: string
        - description: Filter by channel ID
          in: query
          name: channel_id
          type: string
        - description: Filter by user ID
          in: query
          name: user_id
          type: string
        - description: Filter by tenant ID
          in: query
          name: tenant_id
          type: string
        - description: Filter by product ID
          in: query
          name: product_id
          type: string
        - description: Filter by subscription ID
          in: query
          name: subscription_id
          type: string
        - description: Filter by start date (Unix timestamp)
          in: query
          name: start_date
          type: integer
        - description: Filter by end date (Unix timestamp)
          in: query
          name: end_date
          type: integer
        - description: Cursor for pagination
          in: query
          name: cursor
          type: string
        - default: 20
          description: Page size
          in: query
          name: page_size
          type: integer
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/structs.Order'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: List payment orders
      tags:
        - payment
        - orders
    post:
      consumes:
        - application/json
      description: Create a new payment order
      parameters:
        - description: Order data
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/structs.CreateOrderInput'
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
              - $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
              - properties:
                  data:
                    $ref: '#/definitions/structs.Order'
                type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Create payment order
      tags:
        - payment
        - orders
  /pay/orders/{id}:
    get:
      description: Get a payment order by ID
      parameters:
        - description: Order ID
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
              - $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
              - properties:
                  data:
                    $ref: '#/definitions/structs.Order'
                type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Get payment order
      tags:
        - payment
        - orders
  /pay/orders/{id}/payment-url:
    post:
      description: Generate a payment URL for a payment order
      parameters:
        - description: Order ID
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
              - $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
              - properties:
                  data:
                    additionalProperties: true
                    type: object
                type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Generate payment URL
      tags:
        - payment
        - orders
  /pay/orders/{id}/refund:
    post:
      consumes:
        - application/json
      description: Request a refund for a payment
      parameters:
        - description: Order ID
          in: path
          name: id
          required: true
          type: string
        - description: Refund data
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/structs.RefundOrderInput'
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
              - $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
              - properties:
                  data:
                    $ref: '#/definitions/structs.Order'
                type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Refund payment
      tags:
        - payment
        - orders
  /pay/orders/{id}/verify:
    post:
      consumes:
        - application/json
      description: Verify a payment with the payment provider
      parameters:
        - description: Order ID
          in: path
          name: id
          required: true
          type: string
        - description: Verification data
          in: body
          name: body
          required: true
          schema:
            additionalProperties: true
            type: object
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
              - $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
              - properties:
                  data:
                    $ref: '#/definitions/structs.Order'
                type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Verify payment
      tags:
        - payment
        - orders
  /pay/orders/number/{orderNumber}:
    get:
      description: Get a payment order by order number
      parameters:
        - description: Order Number
          in: path
          name: orderNumber
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
              - $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
              - properties:
                  data:
                    $ref: '#/definitions/structs.Order'
                type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Get order by number
      tags:
        - payment
        - orders
  /pay/products:
    get:
      description: Get a paginated list of products
      parameters:
        - description: Filter by status
          in: query
          name: status
          type: string
        - description: Filter by pricing type
          in: query
          name: pricing_type
          type: string
        - description: Filter by tenant ID
          in: query
          name: tenant_id
          type: string
        - description: Cursor for pagination
          in: query
          name: cursor
          type: string
        - default: 20
          description: Page size
          in: query
          name: page_size
          type: integer
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/structs.Product'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: List products
      tags:
        - payment
        - products
    post:
      consumes:
        - application/json
      description: Create a new product
      parameters:
        - description: Product data
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/structs.CreateProductInput'
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
              - $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
              - properties:
                  data:
                    $ref: '#/definitions/structs.Product'
                type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Create product
      tags:
        - payment
        - products
  /pay/products/{id}:
    delete:
      description: Delete a product by ID
      parameters:
        - description: Product ID
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
              - $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
              - properties:
                  data:
                    type: object
                type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Delete product
      tags:
        - payment
        - products
    get:
      description: Get a product by ID
      parameters:
        - description: Product ID
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
              - $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
              - properties:
                  data:
                    $ref: '#/definitions/structs.Product'
                type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Get product
      tags:
        - payment
        - products
    put:
      consumes:
        - application/json
      description: Update an existing product
      parameters:
        - description: Product ID
          in: path
          name: id
          required: true
          type: string
        - description: Updates
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/structs.UpdateProductInput'
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
              - $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
              - properties:
                  data:
                    $ref: '#/definitions/structs.Product'
                type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Update product
      tags:
        - payment
        - products
  /pay/providers:
    get:
      description: Get a list of all available payment providers
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
              - $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
              - properties:
                  data:
                    items:
                      $ref: '#/definitions/structs.PaymentProvider'
                    type: array
                type: object
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: List payment providers
      tags:
        - payment
  /pay/stats:
    get:
      description: Get payment statistics and metrics
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
              - $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
              - properties:
                  data:
                    additionalProperties: true
                    type: object
                type: object
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Get payment statistics
      tags:
        - payment
  /pay/subscriptions:
    get:
      description: Get a paginated list of subscriptions
      parameters:
        - description: Filter by status
          in: query
          name: status
          type: string
        - description: Filter by user ID
          in: query
          name: user_id
          type: string
        - description: Filter by tenant ID
          in: query
          name: tenant_id
          type: string
        - description: Filter by product ID
          in: query
          name: product_id
          type: string
        - description: Filter by channel ID
          in: query
          name: channel_id
          type: string
        - description: Filter by active status
          in: query
          name: active
          type: boolean
        - description: Cursor for pagination
          in: query
          name: cursor
          type: string
        - default: 20
          description: Page size
          in: query
          name: page_size
          type: integer
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/structs.Subscription'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: List subscriptions
      tags:
        - payment
        - subscriptions
    post:
      consumes:
        - application/json
      description: Create a new subscription
      parameters:
        - description: Subscription data
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/structs.CreateSubscriptionInput'
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
              - $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
              - properties:
                  data:
                    $ref: '#/definitions/structs.Subscription'
                type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Create subscription
      tags:
        - payment
        - subscriptions
  /pay/subscriptions/{id}:
    get:
      description: Get a subscription by ID
      parameters:
        - description: Subscription ID
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
              - $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
              - properties:
                  data:
                    $ref: '#/definitions/structs.Subscription'
                type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Get subscription
      tags:
        - payment
        - subscriptions
    put:
      consumes:
        - application/json
      description: Update an existing subscription
      parameters:
        - description: Subscription ID
          in: path
          name: id
          required: true
          type: string
        - description: Updates
          in: body
          name: body
          required: true
          schema:
            additionalProperties: true
            type: object
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
              - $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
              - properties:
                  data:
                    $ref: '#/definitions/structs.Subscription'
                type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Update subscription
      tags:
        - payment
        - subscriptions
  /pay/subscriptions/{id}/cancel:
    post:
      consumes:
        - application/json
      description: Cancel an existing subscription
      parameters:
        - description: Subscription ID
          in: path
          name: id
          required: true
          type: string
        - description: Cancel options
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/structs.CancelSubscriptionInput'
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
              - $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
              - properties:
                  data:
                    $ref: '#/definitions/structs.Subscription'
                type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Cancel subscription
      tags:
        - payment
        - subscriptions
  /pay/subscriptions/user/{userId}:
    get:
      description: Get subscriptions for a specific user
      parameters:
        - description: User ID
          in: path
          name: userId
          required: true
          type: string
        - description: Filter by status
          in: query
          name: status
          type: string
        - description: Filter by active status
          in: query
          name: active
          type: boolean
        - default: 1
          description: Page number
          in: query
          name: page
          type: integer
        - default: 20
          description: Page size
          in: query
          name: page_size
          type: integer
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/structs.Subscription'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Get user subscriptions
      tags:
        - payment
        - subscriptions
  /pay/webhooks/{channel}:
    post:
      consumes:
        - application/json
      description: Process webhook notifications from payment providers
      parameters:
        - description: Payment channel ID
          in: path
          name: channel
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      summary: Process payment webhook
      tags:
        - payment
  /plug/counters:
    get:
      description: Retrieve a list or tree structure of counters.
      parameters:
        - in: query
          name: cursor
          type: string
        - in: query
          name: direction
          type: string
        - in: query
          name: disabled
          type: boolean
        - in: query
          name: limit
          type: integer
        - in: query
          name: tenant
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/structs.ReadCounter'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: List counters
      tags:
        - plug
    post:
      consumes:
        - application/json
      description: Create a new counter.
      parameters:
        - description: CounterBody object
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/structs.CounterBody'
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadCounter'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Create counter
      tags:
        - plug
    put:
      consumes:
        - application/json
      description: Update an existing counter.
      parameters:
        - description: UpdateCounterBody object
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/structs.UpdateCounterBody'
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadCounter'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Update counter
      tags:
        - plug
  /plug/counters/{id}:
    delete:
      description: Delete a counter by ID.
      parameters:
        - description: Counter ID
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Delete counter
      tags:
        - plug
    get:
      description: Retrieve a counter by ID.
      parameters:
        - description: Counter ID
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadCounter'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Get counter
      tags:
        - plug
  /res:
    get:
      description: List files based on specified parameters.
      parameters:
        - enum:
            - public
            - private
            - shared
          in: query
          name: access_level
          type: string
          x-enum-comments:
            AccessLevelPrivate: Only accessible to owner
            AccessLevelPublic: Accessible to anyone
            AccessLevelShared: Shared with specific users/groups
          x-enum-varnames:
            - AccessLevelPublic
            - AccessLevelPrivate
            - AccessLevelShared
        - enum:
            - image
            - document
            - video
            - audio
            - archive
            - other
          in: query
          name: category
          type: string
          x-enum-varnames:
            - FileCategoryImage
            - FileCategoryDocument
            - FileCategoryVideo
            - FileCategoryAudio
            - FileCategoryArchive
            - FileCategoryOther
        - in: query
          name: created_after
          type: integer
        - in: query
          name: created_before
          type: integer
        - in: query
          name: cursor
          type: string
        - in: query
          name: direction
          type: string
        - in: query
          name: folder_path
          type: string
        - in: query
          name: is_public
          type: boolean
        - in: query
          name: limit
          type: integer
        - in: query
          name: object
          required: true
          type: string
        - description: Full-text search
          in: query
          name: q
          type: string
        - in: query
          name: size_max
          type: integer
        - in: query
          name: size_min
          type: integer
        - in: query
          name: storage
          type: string
        - description: Comma-separated tags
          in: query
          name: tags
          type: string
        - in: query
          name: tenant
          required: true
          type: string
        - in: query
          name: type
          type: string
        - in: query
          name: user
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/structs.ReadFile'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      summary: List files
      tags:
        - res
    post:
      consumes:
        - multipart/form-data
      description: Create one or multiple files.
      parameters:
        - description: File to upload
          in: formData
          name: file
          required: true
          type: file
        - description: Object ID associated with the file
          in: formData
          name: object_id
          type: string
        - description: Tenant ID associated with the file
          in: formData
          name: tenant_id
          type: string
        - description: Additional properties associated with the file (JSON format)
          in: formData
          name: extras
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadFile'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Create files
      tags:
        - res
  /res/{slug}:
    delete:
      description: Delete a specific file.
      parameters:
        - description: Slug of the file to delete
          in: path
          name: slug
          required: true
          type: string
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadFile'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Delete file
      tags:
        - res
    get:
      description: Get details of a specific file.
      parameters:
        - description: Slug of the file to retrieve
          in: path
          name: slug
          required: true
          type: string
        - description: Type of retrieval ('download' or 'stream')
          in: query
          name: type
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadFile'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      summary: Get file
      tags:
        - res
    put:
      consumes:
        - multipart/form-data
      description: Update an existing file.
      parameters:
        - description: Slug of the file to update
          in: path
          name: slug
          required: true
          type: string
        - description: File details
          in: body
          name: file
          required: true
          schema:
            $ref: '#/definitions/structs.UpdateFileBody'
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadFile'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Update file
      tags:
        - res
  /res/{slug}/access:
    put:
      consumes:
        - application/json
      description: Set the access level for an file
      parameters:
        - description: File slug
          in: path
          name: slug
          required: true
          type: string
        - description: Access level
          in: body
          name: body
          required: true
          schema:
            additionalProperties:
              type: string
            type: object
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadFile'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Set access level
      tags:
        - res
  /res/{slug}/share:
    post:
      consumes:
        - application/json
      description: Generate a shareable URL for an file
      parameters:
        - description: File slug
          in: path
          name: slug
          required: true
          type: string
        - description: Expiration time in hours
          in: body
          name: body
          required: true
          schema:
            additionalProperties:
              type: integer
            type: object
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Generate share URL
      tags:
        - res
  /res/{slug}/thumbnail:
    post:
      consumes:
        - application/json
      description: Create a thumbnail for an image file
      parameters:
        - description: File slug
          in: path
          name: slug
          required: true
          type: string
        - description: Processing options
          in: body
          name: options
          required: true
          schema:
            $ref: '#/definitions/structs.ProcessingOptions'
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadFile'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Create thumbnail
      tags:
        - res
  /res/{slug}/versions:
    get:
      description: Get all versions of an file
      parameters:
        - description: File slug
          in: path
          name: slug
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/structs.ReadFile'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Get file versions
      tags:
        - res
    post:
      consumes:
        - multipart/form-data
      description: Create a new version of an existing file
      parameters:
        - description: File slug
          in: path
          name: slug
          required: true
          type: string
        - description: New version file
          in: formData
          name: file
          required: true
          type: file
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadFile'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Create file version
      tags:
        - res
  /res/batch/process:
    post:
      consumes:
        - application/json
      description: Process multiple files in a batch
      parameters:
        - description: Processing parameters
          in: body
          name: body
          required: true
          schema:
            additionalProperties: true
            type: object
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/structs.ReadFile'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Batch process
      tags:
        - res
  /res/batch/upload:
    post:
      consumes:
        - multipart/form-data
      description: Upload multiple files in a batch
      parameters:
        - description: Files to upload
          in: formData
          name: files
          required: true
          type: file
        - description: Tenant ID
          in: formData
          name: tenant_id
          required: true
          type: string
        - description: Object ID
          in: formData
          name: object_id
          required: true
          type: string
        - description: Virtual folder path
          in: formData
          name: folder_path
          type: string
        - description: Access level
          in: formData
          name: access_level
          type: string
        - description: Comma-separated tags
          in: formData
          name: tags
          type: string
        - description: Additional metadata (JSON)
          in: formData
          name: extras
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.BatchUploadResult'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Batch upload
      tags:
        - res
  /res/categories:
    get:
      description: List all available file categories
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              type: string
            type: array
      security:
        - Bearer: [ ]
      summary: List file categories
      tags:
        - res
  /res/quotas:
    get:
      description: Get the storage quota for a tenant
      parameters:
        - description: Tenant ID
          in: query
          name: tenant_id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            additionalProperties:
              type: integer
            type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Get storage quota
      tags:
        - res
    put:
      consumes:
        - application/json
      description: Set the storage quota for a tenant
      parameters:
        - description: Quota information
          in: body
          name: body
          required: true
          schema:
            additionalProperties: true
            type: object
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            additionalProperties:
              type: integer
            type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Set storage quota
      tags:
        - res
  /res/quotas/usage:
    get:
      description: Get the current storage usage for a tenant
      parameters:
        - description: Tenant ID
          in: query
          name: tenant_id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            additionalProperties: true
            type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Get storage usage
      tags:
        - res
  /res/search:
    get:
      consumes:
        - application/json
      description: Search files by various criteria
      parameters:
        - description: Tenant ID
          in: query
          name: tenant
          required: true
          type: string
        - description: Search query
          in: query
          name: q
          type: string
        - description: File category
          in: query
          name: category
          type: string
        - description: Comma-separated tags
          in: query
          name: tags
          type: string
        - description: Folder path
          in: query
          name: folder_path
          type: string
        - description: Public flag
          in: query
          name: is_public
          type: boolean
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/structs.ReadFile'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Search files
      tags:
        - res
  /res/stats:
    get:
      description: Get storage usage statistics for a tenant
      parameters:
        - description: Tenant ID
          in: query
          name: tenant_id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            additionalProperties: true
            type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Get storage statistics
      tags:
        - res
  /res/tags:
    get:
      description: List all tags used in files for a tenant
      parameters:
        - description: Tenant ID
          in: query
          name: tenant_id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              type: string
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: List file tags
      tags:
        - res
  /rt/channels:
    get:
      description: Retrieve a list of channels based on the provided query parameters
      parameters:
        - in: query
          name: cursor
          type: string
        - in: query
          name: direction
          type: string
        - in: query
          name: limit
          type: integer
        - in: query
          name: status
          type: integer
        - in: query
          name: type
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/ncobase_core_realtime_structs.ReadChannel'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: List all channels
      tags:
        - rt
    post:
      consumes:
        - application/json
      description: Create a new channel
      parameters:
        - description: Channel data
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/structs.CreateChannel'
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_core_realtime_structs.ReadChannel'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Create a new channel
      tags:
        - rt
  /rt/channels/{id}:
    delete:
      description: Delete a channel
      parameters:
        - description: Channel ID
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_core_realtime_structs.ReadChannel'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Delete a channel
      tags:
        - rt
    get:
      description: Get a channel by ID
      parameters:
        - description: Channel ID
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_core_realtime_structs.ReadChannel'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Get a channel by ID
      tags:
        - rt
    put:
      consumes:
        - application/json
      description: Update a channel
      parameters:
        - description: Channel ID
          in: path
          name: id
          required: true
          type: string
        - description: Channel data
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/structs.UpdateChannel'
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_core_realtime_structs.ReadChannel'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Update a channel
      tags:
        - rt
  /rt/channels/{id}/subscribe:
    post:
      consumes:
        - application/json
      description: Subscribe to a channel
      parameters:
        - description: Channel ID
          in: path
          name: id
          required: true
          type: string
        - description: Subscription data
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/structs.CreateSubscription'
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadSubscription'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Subscribe to a channel
      tags:
        - rt
  /rt/channels/{id}/subscribers:
    get:
      description: Get subscribers of a channel
      parameters:
        - description: Channel ID
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/structs.ReadUser'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Get subscribers of a channel
      tags:
        - rt
  /rt/channels/{id}/unsubscribe:
    post:
      consumes:
        - application/json
      description: Unsubscribe from a channel
      parameters:
        - description: Channel ID
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            additionalProperties:
              allOf:
                - { }
                - properties:
                    message:
                      type: string
                  type: object
            type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Unsubscribe from a channel
      tags:
        - rt
  /rt/channels/user:
    get:
      description: Get channels of a user
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/ncobase_core_realtime_structs.ReadChannel'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Get channels of a user
      tags:
        - rt
  /rt/events:
    get:
      description: Retrieve a list of events based on the provided query parameters
      parameters:
        - in: query
          name: channel_id
          type: string
        - in: query
          name: cursor
          type: string
        - in: query
          name: direction
          type: string
        - in: query
          name: limit
          type: integer
        - collectionFormat: csv
          in: query
          items:
            type: integer
          name: time_range
          type: array
        - in: query
          name: type
          type: string
        - in: query
          name: user_id
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/structs.ReadEvent'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: List all events
      tags:
        - rt
  /rt/events/{id}:
    delete:
      description: Delete an event
      parameters:
        - description: Event ID
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadEvent'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Delete an event
      tags:
        - rt
    get:
      description: Get an event by ID
      parameters:
        - description: Event ID
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadEvent'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Get an event by ID
      tags:
        - rt
  /rt/events/history:
    get:
      description: Get event history
      parameters:
        - description: Channel ID
          in: query
          name: channel_id
          required: true
          type: string
        - description: Event type
          in: query
          name: type
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/structs.ReadEvent'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Get event history
      tags:
        - rt
  /rt/events/publish:
    post:
      consumes:
        - application/json
      description: Publish a new event
      parameters:
        - description: Event data
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/structs.CreateEvent'
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadEvent'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Publish a new event
      tags:
        - rt
  /rt/notifications:
    get:
      description: Retrieve a list of notifications based on the provided query parameters
      parameters:
        - in: query
          name: channel_id
          type: string
        - in: query
          name: cursor
          type: string
        - in: query
          name: direction
          type: string
        - in: query
          name: limit
          type: integer
        - in: query
          name: status
          type: integer
        - in: query
          name: user_id
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/structs.ReadNotification'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: List all notifications
      tags:
        - rt
    post:
      consumes:
        - application/json
      description: Create a new notification
      parameters:
        - description: Notification data
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/structs.CreateNotification'
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadNotification'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Create a new notification
      tags:
        - rt
  /rt/notifications/{id}:
    delete:
      description: Delete a notification
      parameters:
        - description: Notification ID
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadNotification'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Delete a notification
      tags:
        - rt
    get:
      description: Get a notification by ID
      parameters:
        - description: Notification ID
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadNotification'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Get a notification by ID
      tags:
        - rt
    put:
      consumes:
        - application/json
      description: Update a notification
      parameters:
        - description: Notification ID
          in: path
          name: id
          required: true
          type: string
        - description: Notification data
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/structs.UpdateNotification'
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadNotification'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Update a notification
      tags:
        - rt
  /rt/notifications/{id}/read:
    put:
      description: Mark a notification as read
      parameters:
        - description: Notification ID
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadNotification'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Mark a notification as read
      tags:
        - rt
  /rt/notifications/{id}/unread:
    put:
      description: Mark a notification as unread
      parameters:
        - description: Notification ID
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadNotification'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Mark a notification as unread
      tags:
        - rt
  /rt/notifications/read-all:
    put:
      description: Mark all notifications as read
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            additionalProperties:
              allOf:
                - { }
                - properties:
                    message:
                      type: string
                  type: object
            type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Mark all notifications as read
      tags:
        - rt
  /rt/notifications/unread-all:
    put:
      description: Mark all notifications as unread
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            additionalProperties:
              allOf:
                - { }
                - properties:
                    message:
                      type: string
                  type: object
            type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Mark all notifications as unread
      tags:
        - rt
  /rt/ws:
    get:
      description: Handles WebSocket connection
      responses: { }
      security:
        - Bearer: [ ]
      summary: Handle WebSocket connection
      tags:
        - rt
  /sys/dictionarys:
    get:
      description: Retrieve a list or tree structure of dictionarys.
      parameters:
        - in: query
          name: cursor
          type: string
        - in: query
          name: direction
          type: string
        - in: query
          name: limit
          type: integer
        - in: query
          name: tenant
          type: string
        - in: query
          name: type
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/structs.ReadDictionary'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: List dictionarys
      tags:
        - sys
    post:
      consumes:
        - application/json
      description: Create a new dictionary.
      parameters:
        - description: DictionaryBody object
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/structs.DictionaryBody'
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadDictionary'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Create dictionary
      tags:
        - sys
    put:
      consumes:
        - application/json
      description: Update an existing dictionary.
      parameters:
        - description: UpdateDictionaryBody object
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/structs.UpdateDictionaryBody'
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadDictionary'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Update dictionary
      tags:
        - sys
  /sys/dictionarys/{slug}:
    delete:
      description: Delete a dictionary by ID or slug.
      parameters:
        - description: Dictionary ID or slug
          in: path
          name: slug
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Delete dictionary
      tags:
        - sys
    get:
      description: Retrieve a dictionary by ID or slug.
      parameters:
        - description: Dictionary ID or slug
          in: path
          name: slug
          required: true
          type: string
        - in: query
          name: dictionary
          type: string
        - in: query
          name: tenant
          type: string
        - in: query
          name: type
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadDictionary'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Get dictionary
      tags:
        - sys
  /sys/menus:
    get:
      description: Retrieve a list or tree structure of menus.
      parameters:
        - in: query
          name: children
          type: boolean
        - in: query
          name: cursor
          type: string
        - in: query
          name: direction
          type: string
        - in: query
          name: limit
          type: integer
        - in: query
          name: parent
          type: string
        - in: query
          name: perms
          type: string
        - in: query
          name: sort_by
          type: string
        - in: query
          name: tenant
          type: string
        - in: query
          name: type
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/structs.ReadMenu'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: List menus
      tags:
        - sys
    post:
      consumes:
        - application/json
      description: Create a new menu.
      parameters:
        - description: MenuBody object
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/structs.MenuBody'
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadMenu'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Create menu
      tags:
        - sys
    put:
      consumes:
        - application/json
      description: Update an existing menu.
      parameters:
        - description: UpdateMenuBody object
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/structs.UpdateMenuBody'
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadMenu'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Update menu
      tags:
        - sys
  /sys/menus/{slug}:
    delete:
      description: Delete a menu by ID or slug.
      parameters:
        - description: Menu ID or slug
          in: path
          name: slug
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Delete menu
      tags:
        - sys
    get:
      description: Retrieve a menu by ID or slug.
      parameters:
        - description: Menu ID or slug
          in: path
          name: slug
          required: true
          type: string
        - in: query
          name: children
          type: boolean
        - in: query
          name: menu
          type: string
        - in: query
          name: parent
          type: string
        - in: query
          name: sort_by
          type: string
        - in: query
          name: tenant
          type: string
        - in: query
          name: type
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadMenu'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Get menu
      tags:
        - sys
  /sys/options:
    get:
      description: Retrieve a list of options.
      parameters:
        - in: query
          name: autoload
          type: boolean
        - in: query
          name: cursor
          type: string
        - in: query
          name: direction
          type: string
        - in: query
          name: limit
          type: integer
        - in: query
          name: sort_by
          type: string
        - in: query
          name: tenant
          type: string
        - in: query
          name: type
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/structs.ReadOptions'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: List options
      tags:
        - sys
    post:
      consumes:
        - application/json
      description: Create a new option.
      parameters:
        - description: OptionsBody object
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/structs.OptionsBody'
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadOptions'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Create option
      tags:
        - sys
    put:
      consumes:
        - application/json
      description: Update an existing option.
      parameters:
        - description: UpdateOptionsBody object
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/structs.UpdateOptionsBody'
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadOptions'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Update option
      tags:
        - sys
  /sys/options/{option}:
    delete:
      description: Delete an option by ID or name.
      parameters:
        - description: Option ID or name
          in: path
          name: option
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Delete option
      tags:
        - sys
    get:
      description: Retrieve an option by ID or name.
      parameters:
        - description: Option ID or name
          in: path
          name: option
          required: true
          type: string
        - in: query
          name: option
          type: string
        - in: query
          name: sort_by
          type: string
        - in: query
          name: tenant
          type: string
        - in: query
          name: type
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadOptions'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Get option
      tags:
        - sys
  /sys/options/initialize:
    post:
      description: Initialize the system with default options
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Initialize
      tags:
        - sys
  /sys/users:
    get:
      description: List all users with pagination.
      parameters:
        - description: Cursor for pagination
          in: query
          name: cursor
          type: string
        - description: Number of items to return
          in: query
          name: limit
          type: integer
        - description: Direction of pagination (forward or backward)
          in: query
          name: direction
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/structs.ReadUser'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      summary: List users
      tags:
        - sys
    post:
      consumes:
        - application/json
      description: Create a new user.
      parameters:
        - description: User information
          in: body
          name: user
          required: true
          schema:
            $ref: '#/definitions/structs.UserBody'
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadUser'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      summary: Create user
      tags:
        - sys
  /sys/users/{username}:
    delete:
      description: Delete an existing user.
      parameters:
        - description: Username
          in: path
          name: username
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      summary: Delete user
      tags:
        - sys
    get:
      description: Retrieve information about a specific user.
      parameters:
        - description: Username
          in: path
          name: username
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadUser'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      summary: Get user
      tags:
        - sys
    put:
      consumes:
        - application/json
      description: Update an existing user.
      parameters:
        - description: Username
          in: path
          name: username
          required: true
          type: string
        - description: User information to update
          in: body
          name: user
          required: true
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadUser'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      summary: Update user
      tags:
        - sys
  /sys/users/{username}/password:
    put:
      consumes:
        - application/json
      description: Update an existing user's password.
      parameters:
        - description: Username
          in: path
          name: username
          required: true
          type: string
        - description: Password information
          in: body
          name: password
          required: true
          schema:
            $ref: '#/definitions/structs.UserPassword'
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      summary: Update user password
      tags:
        - sys
  /tbp/endpoints:
    get:
      description: Retrieve a list of endpoints based on the provided query parameters
      parameters:
        - in: query
          name: cursor
          type: string
        - in: query
          name: direction
          type: string
        - in: query
          name: disabled
          type: boolean
        - in: query
          name: limit
          type: integer
        - in: query
          name: name
          type: string
        - in: query
          name: protocol
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/structs.ReadEndpoint'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: List all endpoints
      tags:
        - proxy
    post:
      consumes:
        - application/json
      description: Create a new third-party API endpoint
      parameters:
        - description: Endpoint data
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/structs.CreateEndpointBody'
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadEndpoint'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Create API endpoint
      tags:
        - proxy
  /tbp/endpoints/{id}:
    delete:
      description: Delete an endpoint by its ID
      parameters:
        - description: Endpoint ID
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Delete an endpoint by ID
      tags:
        - proxy
    get:
      description: Retrieve an endpoint by its ID
      parameters:
        - description: Endpoint ID
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadEndpoint'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Get an endpoint by ID
      tags:
        - proxy
    put:
      consumes:
        - application/json
      description: Update an existing endpoint with the provided data
      parameters:
        - description: Endpoint ID
          in: path
          name: id
          required: true
          type: string
        - description: Endpoint data
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadEndpoint'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Update an existing endpoint
      tags:
        - proxy
  /tbp/routes:
    get:
      description: Retrieve a list of routes based on the provided query parameters
      parameters:
        - in: query
          name: cursor
          type: string
        - in: query
          name: direction
          type: string
        - in: query
          name: disabled
          type: boolean
        - in: query
          name: endpoint_id
          type: string
        - in: query
          name: limit
          type: integer
        - in: query
          name: method
          type: string
        - in: query
          name: name
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/structs.ReadRoute'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: List all routes
      tags:
        - proxy
    post:
      consumes:
        - application/json
      description: Create a new proxy route for a third-party API endpoint
      parameters:
        - description: Route data
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/structs.CreateRouteBody'
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadRoute'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Create API route
      tags:
        - proxy
  /tbp/routes/{id}:
    delete:
      description: Delete a route by its ID
      parameters:
        - description: Route ID
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Delete a route by ID
      tags:
        - proxy
    get:
      description: Retrieve a route by its ID
      parameters:
        - description: Route ID
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadRoute'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Get a route by ID
      tags:
        - proxy
    put:
      consumes:
        - application/json
      description: Update an existing route with the provided data
      parameters:
        - description: Route ID
          in: path
          name: id
          required: true
          type: string
        - description: Route data
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadRoute'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Update an existing route
      tags:
        - proxy
  /tbp/transformers:
    get:
      description: Retrieve a list of transformers based on the provided query parameters
      parameters:
        - in: query
          name: content_type
          type: string
        - in: query
          name: cursor
          type: string
        - in: query
          name: direction
          type: string
        - in: query
          name: disabled
          type: boolean
        - in: query
          name: limit
          type: integer
        - in: query
          name: name
          type: string
        - in: query
          name: type
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/structs.ReadTransformer'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: List all transformers
      tags:
        - proxy
    post:
      consumes:
        - application/json
      description: Create a new data transformer for API requests/responses
      parameters:
        - description: Transformer data
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/structs.CreateTransformerBody'
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadTransformer'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Create data transformer
      tags:
        - proxy
  /tbp/transformers/{id}:
    delete:
      description: Delete a transformer by its ID
      parameters:
        - description: Transformer ID
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Delete a transformer by ID
      tags:
        - proxy
    get:
      description: Retrieve a transformer by its ID
      parameters:
        - description: Transformer ID
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadTransformer'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Get a transformer by ID
      tags:
        - proxy
    put:
      consumes:
        - application/json
      description: Update an existing transformer with the provided data
      parameters:
        - description: Transformer ID
          in: path
          name: id
          required: true
          type: string
        - description: Transformer data
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadTransformer'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
        - Bearer: [ ]
      summary: Update an existing transformer
      tags:
        - proxy
securityDefinitions:
  Bearer:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
