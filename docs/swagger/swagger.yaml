definitions:
  ncobase_common_resp.Exception:
    properties:
      code:
        description: Business code
        type: integer
      data:
        description: Response data
      errors:
        description: Validation errors
      message:
        description: Message
        type: string
      status:
        description: HTTP status
        type: integer
    type: object
  ncobase_common_types.JSON:
    additionalProperties: {}
    type: object
  structs.AccountMeshes:
    properties:
      groups:
        items:
          $ref: '#/definitions/structs.ReadGroup'
        type: array
      profile:
        $ref: '#/definitions/structs.ReadUserProfile'
      roles:
        items:
          $ref: '#/definitions/structs.ReadRole'
        type: array
      tenants:
        items:
          $ref: '#/definitions/structs.ReadTenant'
        type: array
      user:
        $ref: '#/definitions/structs.ReadUser'
    type: object
  structs.Captcha:
    properties:
      id:
        type: string
      solution:
        type: string
    required:
    - id
    - solution
    type: object
  structs.CasbinRuleBody:
    properties:
      created_by:
        type: string
      p_type:
        type: string
      updated_by:
        type: string
      v0:
        type: string
      v1:
        type: string
      v2:
        type: string
      v3:
        type: string
      v4:
        type: string
      v5:
        type: string
    required:
    - p_type
    - v0
    - v1
    - v2
    type: object
  structs.ChannelBody:
    properties:
      description:
        type: string
      extras:
        $ref: '#/definitions/ncobase_common_types.JSON'
      name:
        type: string
      status:
        description: '0: disabled, 1: enabled'
        type: integer
      type:
        description: public/private/direct
        type: string
    type: object
  structs.CounterBody:
    properties:
      created_by:
        type: string
      current_value:
        type: integer
      date_format:
        type: string
      description:
        type: string
      disabled:
        type: boolean
      identifier:
        type: string
      increment_step:
        type: integer
      name:
        type: string
      prefix:
        type: string
      start_value:
        type: integer
      suffix:
        type: string
      tenant_id:
        type: string
      updated_by:
        type: string
    type: object
  structs.CreateChannel:
    properties:
      channel:
        $ref: '#/definitions/structs.ChannelBody'
    type: object
  structs.CreateEvent:
    properties:
      event:
        $ref: '#/definitions/structs.EventBody'
    type: object
  structs.CreateNotification:
    properties:
      notification:
        $ref: '#/definitions/structs.NotificationBody'
    type: object
  structs.CreatePermissionBody:
    properties:
      action:
        type: string
      created_by:
        type: string
      default:
        type: boolean
      description:
        type: string
      disabled:
        type: boolean
      extras:
        $ref: '#/definitions/ncobase_common_types.JSON'
      name:
        type: string
      subject:
        type: string
      updated_by:
        type: string
    type: object
  structs.CreateRoleBody:
    properties:
      created_by:
        type: string
      description:
        type: string
      disabled:
        type: boolean
      extras:
        $ref: '#/definitions/ncobase_common_types.JSON'
      name:
        type: string
      slug:
        type: string
      updated_by:
        type: string
    type: object
  structs.CreateSubscription:
    properties:
      subscription:
        $ref: '#/definitions/structs.SubscriptionBody'
    type: object
  structs.CreateTaxonomyBody:
    properties:
      color:
        type: string
      cover:
        type: string
      created_by:
        type: string
      description:
        type: string
      extras:
        $ref: '#/definitions/ncobase_common_types.JSON'
      icon:
        type: string
      keywords:
        type: string
      name:
        type: string
      parent_id:
        type: string
      slug:
        type: string
      status:
        type: integer
      tenant_id:
        type: string
      thumbnail:
        type: string
      type:
        type: string
      updated_by:
        type: string
      url:
        type: string
    type: object
  structs.CreateTenantBody:
    properties:
      copyright:
        type: string
      created_by:
        type: string
      description:
        type: string
      disabled:
        type: boolean
      expired_at:
        type: integer
      extras:
        $ref: '#/definitions/ncobase_common_types.JSON'
      keywords:
        type: string
      logo:
        type: string
      logo_alt:
        type: string
      name:
        type: string
      order:
        type: integer
      slug:
        type: string
      title:
        type: string
      type:
        type: string
      updated_by:
        type: string
      url:
        type: string
    type: object
  structs.CreateTopicBody:
    properties:
      content:
        type: string
      created_by:
        type: string
      markdown:
        type: boolean
      name:
        type: string
      private:
        type: boolean
      released:
        type: integer
      slug:
        type: string
      status:
        type: integer
      taxonomy_id:
        type: string
      temp:
        type: boolean
      tenant_id:
        type: string
      thumbnail:
        type: string
      title:
        type: string
      updated_by:
        type: string
    type: object
  structs.DictionaryBody:
    properties:
      created_by:
        type: string
      description:
        type: string
      name:
        type: string
      slug:
        type: string
      tenant_id:
        type: string
      type:
        type: string
      updated_by:
        type: string
      value:
        type: string
    type: object
  structs.EventBody:
    properties:
      channel_id:
        type: string
      payload:
        $ref: '#/definitions/ncobase_common_types.JSON'
      type:
        type: string
      user_id:
        type: string
    type: object
  structs.GroupBody:
    properties:
      created_by:
        type: string
      description:
        type: string
      disabled:
        type: boolean
      extras:
        $ref: '#/definitions/ncobase_common_types.JSON'
      leader:
        $ref: '#/definitions/ncobase_common_types.JSON'
      name:
        type: string
      parent_id:
        type: string
      slug:
        type: string
      tenant_id:
        type: string
      updated_by:
        type: string
    type: object
  structs.LoginBody:
    properties:
      captcha:
        $ref: '#/definitions/structs.Captcha'
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  structs.MenuBody:
    properties:
      created_by:
        type: string
      disabled:
        type: boolean
      extras:
        $ref: '#/definitions/ncobase_common_types.JSON'
      hidden:
        type: boolean
      icon:
        type: string
      label:
        type: string
      name:
        type: string
      order:
        type: integer
      parent_id:
        type: string
      path:
        type: string
      perms:
        type: string
      slug:
        type: string
      target:
        type: string
      tenant_id:
        type: string
      type:
        type: string
      updated_by:
        type: string
    type: object
  structs.NotificationBody:
    properties:
      channel_id:
        type: string
      content:
        type: string
      links:
        items:
          $ref: '#/definitions/ncobase_common_types.JSON'
        type: array
      status:
        type: integer
      title:
        type: string
      type:
        type: string
      user_id:
        type: string
    type: object
  structs.OptionsBody:
    properties:
      autoload:
        type: boolean
      name:
        type: string
      tenant_id:
        type: string
      type:
        type: string
      value:
        type: string
    type: object
  structs.ReadAttachment:
    properties:
      bucket:
        type: string
      created_at:
        type: integer
      created_by:
        type: string
      endpoint:
        type: string
      extras:
        $ref: '#/definitions/ncobase_common_types.JSON'
      id:
        type: string
      name:
        type: string
      object_id:
        type: string
      path:
        type: string
      size:
        type: integer
      storage:
        type: string
      tenant_id:
        type: string
      type:
        type: string
      updated_at:
        type: integer
      updated_by:
        type: string
    type: object
  structs.ReadCasbinRule:
    properties:
      created_at:
        type: integer
      created_by:
        type: string
      id:
        type: string
      p_type:
        type: string
      updated_at:
        type: integer
      updated_by:
        type: string
      v0:
        type: string
      v1:
        type: string
      v2:
        type: string
      v3:
        type: string
      v4:
        type: string
      v5:
        type: string
    type: object
  structs.ReadChannel:
    properties:
      created_at:
        type: integer
      description:
        type: string
      extras:
        $ref: '#/definitions/ncobase_common_types.JSON'
      id:
        type: string
      name:
        type: string
      status:
        type: integer
      type:
        type: string
      updated_at:
        type: integer
    type: object
  structs.ReadCounter:
    properties:
      created_at:
        type: integer
      created_by:
        type: string
      current_value:
        type: integer
      date_format:
        type: string
      description:
        type: string
      disabled:
        type: boolean
      id:
        type: string
      identifier:
        type: string
      increment_step:
        type: integer
      name:
        type: string
      prefix:
        type: string
      start_value:
        type: integer
      suffix:
        type: string
      tenant_id:
        type: string
      updated_at:
        type: integer
      updated_by:
        type: string
    type: object
  structs.ReadDictionary:
    properties:
      created_at:
        type: integer
      created_by:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
      slug:
        type: string
      tenant_id:
        type: string
      type:
        type: string
      updated_at:
        type: integer
      updated_by:
        type: string
      value:
        type: string
    type: object
  structs.ReadEvent:
    properties:
      channel_id:
        type: string
      created_at:
        type: integer
      id:
        type: string
      payload:
        $ref: '#/definitions/ncobase_common_types.JSON'
      type:
        type: string
      user_id:
        type: string
    type: object
  structs.ReadGroup:
    properties:
      children:
        items: {}
        type: array
      created_at:
        type: integer
      created_by:
        type: string
      description:
        type: string
      disabled:
        type: boolean
      extras:
        $ref: '#/definitions/ncobase_common_types.JSON'
      id:
        type: string
      leader:
        $ref: '#/definitions/ncobase_common_types.JSON'
      name:
        type: string
      parent_id:
        type: string
      slug:
        type: string
      tenant_id:
        type: string
      updated_at:
        type: integer
      updated_by:
        type: string
    type: object
  structs.ReadMenu:
    properties:
      children:
        items: {}
        type: array
      created_at:
        type: integer
      created_by:
        type: string
      disabled:
        type: boolean
      extras:
        $ref: '#/definitions/ncobase_common_types.JSON'
      hidden:
        type: boolean
      icon:
        type: string
      id:
        type: string
      label:
        type: string
      name:
        type: string
      order:
        type: integer
      parent_id:
        type: string
      path:
        type: string
      perms:
        type: string
      slug:
        type: string
      target:
        type: string
      tenant_id:
        type: string
      type:
        type: string
      updated_at:
        type: integer
      updated_by:
        type: string
    type: object
  structs.ReadNotification:
    properties:
      channel_id:
        type: string
      content:
        type: string
      created_at:
        type: integer
      id:
        type: string
      links:
        items:
          $ref: '#/definitions/ncobase_common_types.JSON'
        type: array
      status:
        type: integer
      title:
        type: string
      type:
        type: string
      updated_at:
        type: integer
      user_id:
        type: string
    type: object
  structs.ReadOptions:
    properties:
      autoload:
        type: boolean
      created_at:
        type: integer
      created_by:
        type: string
      id:
        type: string
      name:
        type: string
      tenant_id:
        type: string
      type:
        type: string
      updated_at:
        type: integer
      updated_by:
        type: string
      value:
        type: string
    type: object
  structs.ReadPermission:
    properties:
      action:
        type: string
      created_at:
        type: integer
      created_by:
        type: string
      default:
        type: boolean
      description:
        type: string
      disabled:
        type: boolean
      extras:
        $ref: '#/definitions/ncobase_common_types.JSON'
      id:
        type: string
      name:
        type: string
      subject:
        type: string
      updated_at:
        type: integer
      updated_by:
        type: string
    type: object
  structs.ReadRole:
    properties:
      created_at:
        type: integer
      created_by:
        type: string
      description:
        type: string
      disabled:
        type: boolean
      extras:
        $ref: '#/definitions/ncobase_common_types.JSON'
      id:
        type: string
      name:
        type: string
      slug:
        type: string
      updated_at:
        type: integer
      updated_by:
        type: string
    type: object
  structs.ReadSubscription:
    properties:
      channel_id:
        type: string
      created_at:
        type: integer
      id:
        type: string
      status:
        type: integer
      updated_at:
        type: integer
      user_id:
        type: string
    type: object
  structs.ReadTaxonomy:
    properties:
      children:
        items: {}
        type: array
      color:
        type: string
      cover:
        type: string
      created_at:
        type: integer
      created_by:
        type: string
      description:
        type: string
      extras:
        $ref: '#/definitions/ncobase_common_types.JSON'
      icon:
        type: string
      id:
        type: string
      keywords:
        type: string
      name:
        type: string
      parent_id:
        type: string
      slug:
        type: string
      status:
        type: integer
      tenant_id:
        type: string
      thumbnail:
        type: string
      type:
        type: string
      updated_at:
        type: integer
      updated_by:
        type: string
      url:
        type: string
    type: object
  structs.ReadTenant:
    properties:
      copyright:
        type: string
      created_at:
        type: integer
      created_by:
        type: string
      description:
        type: string
      disabled:
        type: boolean
      expired_at:
        type: integer
      extras:
        $ref: '#/definitions/ncobase_common_types.JSON'
      id:
        type: string
      keywords:
        type: string
      logo:
        type: string
      logo_alt:
        type: string
      name:
        type: string
      order:
        type: integer
      slug:
        type: string
      title:
        type: string
      type:
        type: string
      updated_at:
        type: integer
      updated_by:
        type: string
      url:
        type: string
    type: object
  structs.ReadTopic:
    properties:
      content:
        type: string
      created_at:
        type: integer
      created_by:
        type: string
      id:
        type: string
      markdown:
        type: boolean
      name:
        type: string
      private:
        type: boolean
      released:
        type: integer
      slug:
        type: string
      status:
        type: integer
      taxonomy_id:
        type: string
      temp:
        type: boolean
      tenant_id:
        type: string
      thumbnail:
        type: string
      title:
        type: string
      updated_at:
        type: integer
      updated_by:
        type: string
    type: object
  structs.ReadUser:
    properties:
      created_at:
        type: integer
      email:
        type: string
      extras:
        $ref: '#/definitions/ncobase_common_types.JSON'
      id:
        type: string
      is_admin:
        type: boolean
      is_certified:
        type: boolean
      phone:
        type: string
      status:
        type: integer
      updated_at:
        type: integer
      username:
        type: string
    type: object
  structs.ReadUserProfile:
    properties:
      about:
        type: string
      display_name:
        type: string
      extras:
        $ref: '#/definitions/ncobase_common_types.JSON'
      links:
        items:
          $ref: '#/definitions/ncobase_common_types.JSON'
        type: array
      short_bio:
        type: string
      thumbnail:
        type: string
    type: object
  structs.RegisterBody:
    properties:
      display_name:
        type: string
      phone:
        type: string
      register_token:
        type: string
      short_bio:
        type: string
      tenant:
        type: string
      username:
        type: string
    required:
    - display_name
    - register_token
    - username
    type: object
  structs.SendCodeBody:
    properties:
      email:
        type: string
      phone:
        type: string
    type: object
  structs.SubscriptionBody:
    properties:
      channel_id:
        type: string
      status:
        description: '0: disabled, 1: enabled'
        type: integer
      user_id:
        type: string
    type: object
  structs.UpdateAttachmentBody:
    properties:
      bucket:
        type: string
      created_by:
        type: string
      endpoint:
        type: string
      extras:
        $ref: '#/definitions/ncobase_common_types.JSON'
      id:
        type: string
      name:
        type: string
      object_id:
        type: string
      path:
        type: string
      size:
        type: integer
      storage:
        type: string
      tenant_id:
        type: string
      type:
        type: string
      updated_by:
        type: string
    type: object
  structs.UpdateChannel:
    properties:
      channel:
        $ref: '#/definitions/structs.ChannelBody'
      id:
        type: string
    type: object
  structs.UpdateCounterBody:
    properties:
      created_by:
        type: string
      current_value:
        type: integer
      date_format:
        type: string
      description:
        type: string
      disabled:
        type: boolean
      id:
        type: string
      identifier:
        type: string
      increment_step:
        type: integer
      name:
        type: string
      prefix:
        type: string
      start_value:
        type: integer
      suffix:
        type: string
      tenant_id:
        type: string
      updated_by:
        type: string
    type: object
  structs.UpdateDictionaryBody:
    properties:
      created_by:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
      slug:
        type: string
      tenant_id:
        type: string
      type:
        type: string
      updated_by:
        type: string
      value:
        type: string
    type: object
  structs.UpdateGroupBody:
    properties:
      created_by:
        type: string
      description:
        type: string
      disabled:
        type: boolean
      extras:
        $ref: '#/definitions/ncobase_common_types.JSON'
      id:
        type: string
      leader:
        $ref: '#/definitions/ncobase_common_types.JSON'
      name:
        type: string
      parent_id:
        type: string
      slug:
        type: string
      tenant_id:
        type: string
      updated_by:
        type: string
    type: object
  structs.UpdateMenuBody:
    properties:
      created_by:
        type: string
      disabled:
        type: boolean
      extras:
        $ref: '#/definitions/ncobase_common_types.JSON'
      hidden:
        type: boolean
      icon:
        type: string
      id:
        type: string
      label:
        type: string
      name:
        type: string
      order:
        type: integer
      parent_id:
        type: string
      path:
        type: string
      perms:
        type: string
      slug:
        type: string
      target:
        type: string
      tenant_id:
        type: string
      type:
        type: string
      updated_by:
        type: string
    type: object
  structs.UpdateNotification:
    properties:
      id:
        type: string
      notification:
        $ref: '#/definitions/structs.NotificationBody'
    type: object
  structs.UpdateOptionsBody:
    properties:
      autoload:
        type: boolean
      id:
        type: string
      name:
        type: string
      tenant_id:
        type: string
      type:
        type: string
      value:
        type: string
    type: object
  structs.UpdateTaxonomyBody:
    properties:
      color:
        type: string
      cover:
        type: string
      created_by:
        type: string
      description:
        type: string
      extras:
        $ref: '#/definitions/ncobase_common_types.JSON'
      icon:
        type: string
      id:
        type: string
      keywords:
        type: string
      name:
        type: string
      parent_id:
        type: string
      slug:
        type: string
      status:
        type: integer
      tenant_id:
        type: string
      thumbnail:
        type: string
      type:
        type: string
      updated_by:
        type: string
      url:
        type: string
    type: object
  structs.UpdateTenantBody:
    properties:
      copyright:
        type: string
      created_by:
        type: string
      description:
        type: string
      disabled:
        type: boolean
      expired_at:
        type: integer
      extras:
        $ref: '#/definitions/ncobase_common_types.JSON'
      id:
        type: string
      keywords:
        type: string
      logo:
        type: string
      logo_alt:
        type: string
      name:
        type: string
      order:
        type: integer
      slug:
        type: string
      title:
        type: string
      type:
        type: string
      updated_by:
        type: string
      url:
        type: string
    type: object
  structs.UpdateTopicBody:
    properties:
      content:
        type: string
      created_by:
        type: string
      id:
        type: string
      markdown:
        type: boolean
      name:
        type: string
      private:
        type: boolean
      released:
        type: integer
      slug:
        type: string
      status:
        type: integer
      taxonomy_id:
        type: string
      temp:
        type: boolean
      tenant_id:
        type: string
      thumbnail:
        type: string
      title:
        type: string
      updated_by:
        type: string
    type: object
  structs.UserBody:
    properties:
      created_at:
        type: integer
      email:
        type: string
      extras:
        $ref: '#/definitions/ncobase_common_types.JSON'
      id:
        type: string
      is_admin:
        type: boolean
      is_certified:
        type: boolean
      phone:
        type: string
      status:
        type: integer
      updated_at:
        type: integer
      username:
        type: string
    type: object
  structs.UserPassword:
    properties:
      confirm:
        type: string
      new_password:
        type: string
      old_password:
        type: string
      user:
        type: string
    required:
    - confirm
    - new_password
    - user
    type: object
info:
  contact: {}
  description: Base Development Framework
  title: Ncobase
  version: 0.1.0
paths:
  /cms/taxonomies:
    get:
      description: Retrieve a list of taxonomies.
      parameters:
      - in: query
        name: children
        type: boolean
      - in: query
        name: cursor
        type: string
      - in: query
        name: direction
        type: string
      - in: query
        name: limit
        type: integer
      - in: query
        name: parent
        type: string
      - in: query
        name: sort_by
        type: string
      - in: query
        name: tenant
        type: string
      - in: query
        name: type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/structs.ReadTaxonomy'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      summary: List taxonomies
      tags:
      - cms
    post:
      consumes:
      - application/json
      description: Create a new taxonomy.
      parameters:
      - description: CreateTaxonomyBody object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/structs.CreateTaxonomyBody'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadTaxonomy'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Create taxonomy
      tags:
      - cms
  /cms/taxonomies/{slug}:
    delete:
      description: Delete an existing taxonomy.
      parameters:
      - description: Taxonomy slug
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Delete taxonomy
      tags:
      - cms
    get:
      description: Retrieve details of a taxonomy.
      parameters:
      - description: Taxonomy slug
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadTaxonomy'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      summary: Get taxonomy
      tags:
      - cms
    put:
      consumes:
      - application/json
      description: Update an existing taxonomy.
      parameters:
      - description: Taxonomy slug
        in: path
        name: slug
        required: true
        type: string
      - description: UpdateTaxonomyBody object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/structs.UpdateTaxonomyBody'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadTaxonomy'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Update taxonomy
      tags:
      - cms
  /cms/topics:
    get:
      description: Retrieve a list of topics.
      parameters:
      - in: query
        name: cursor
        type: string
      - in: query
        name: direction
        type: string
      - in: query
        name: limit
        type: integer
      - in: query
        name: taxonomy
        type: string
      - in: query
        name: tenant
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/structs.ReadTopic'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      summary: List topics
      tags:
      - cms
    post:
      consumes:
      - application/json
      description: Create a new topic.
      parameters:
      - description: CreateTopicBody object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/structs.CreateTopicBody'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadTopic'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Create topic
      tags:
      - cms
  /cms/topics/{slug}:
    delete:
      description: Delete an existing topic.
      parameters:
      - description: Topic slug
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Delete topic
      tags:
      - cms
    get:
      description: Retrieve details of a topic.
      parameters:
      - description: Topic slug
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadTopic'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      summary: Get topic
      tags:
      - cms
    put:
      consumes:
      - application/json
      description: Update an existing topic, either fully or partially.
      parameters:
      - description: Topic slug
        in: path
        name: slug
        required: true
        type: string
      - description: UpdateTopicBody object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/structs.UpdateTopicBody'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadTopic'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Update topic
      tags:
      - cms
  /iam/account:
    get:
      description: Retrieve information about the current user.
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.AccountMeshes'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Get current user
      tags:
      - iam
  /iam/account/password:
    put:
      consumes:
      - application/json
      description: Update the password of the current user.
      parameters:
      - description: UserPassword object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/structs.UserPassword'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Update user password
      tags:
      - iam
  /iam/account/tenant:
    get:
      description: Retrieve the tenant associated with the current user.
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadTenant'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Get current user tenant
      tags:
      - iam
  /iam/account/tenants:
    get:
      description: Retrieve the tenant associated with the current user.
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadTenant'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Get current user tenants
      tags:
      - iam
  /iam/authorize/{code}:
    get:
      consumes:
      - application/json
      description: Verify the provided code.
      parameters:
      - description: Verification code
        in: path
        name: code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            additionalProperties:
              allOf:
              - {}
              - properties:
                  access_token:
                    type: string
                  email:
                    type: string
                  id:
                    type: string
                  register_token:
                    type: string
                type: object
            type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      summary: Verify code
      tags:
      - iam
  /iam/authorize/send:
    post:
      consumes:
      - application/json
      description: Send a verification code to the specified destination.
      parameters:
      - description: SendCodeBody object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/structs.SendCodeBody'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            additionalProperties:
              allOf:
              - {}
              - properties:
                  registered:
                    type: boolean
                type: object
            type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      summary: Send verification code
      tags:
      - iam
  /iam/captcha/{captcha_id}:
    get:
      description: Stream a captcha image.
      parameters:
      - description: Captcha ID With Extension (png, wav)
        in: path
        name: captcha_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: file
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      summary: Stream captcha
      tags:
      - iam
  /iam/captcha/generate:
    get:
      description: Generate a captcha image.
      parameters:
      - description: Captcha type
        enum:
        - png
        - wav
        in: query
        name: type
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            additionalProperties:
              allOf:
              - {}
              - properties:
                  id:
                    type: string
                  url:
                    type: string
                type: object
            type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      summary: Generate captcha
      tags:
      - iam
  /iam/captcha/validate:
    post:
      consumes:
      - application/json
      description: Validate a captcha code.
      parameters:
      - description: Captcha object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/structs.Captcha'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            additionalProperties:
              allOf:
              - {}
              - properties:
                  message:
                    type: string
                type: object
            type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      summary: Validate captcha
      tags:
      - iam
  /iam/login:
    post:
      consumes:
      - application/json
      description: Log in a user.
      parameters:
      - description: LoginBody object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/structs.LoginBody'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            additionalProperties:
              allOf:
              - {}
              - properties:
                  access_token:
                    type: string
                  id:
                    type: string
                type: object
            type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      summary: Login
      tags:
      - iam
  /iam/logout:
    post:
      description: Logout the current user.
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Logout
      tags:
      - iam
  /iam/permissions:
    get:
      description: Retrieve a list of permissions based on the provided query parameters
      parameters:
      - in: query
        name: cursor
        type: string
      - in: query
        name: direction
        type: string
      - in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/structs.ReadPermission'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: List all permissions
      tags:
      - iam
    post:
      consumes:
      - application/json
      description: Create a new permission with the provided data
      parameters:
      - description: Permission data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/structs.CreatePermissionBody'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadPermission'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Create a new permission
      tags:
      - iam
  /iam/permissions/{slug}:
    delete:
      description: Delete a permission by its slug or ID
      parameters:
      - description: Permission slug or ID
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadPermission'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Delete a permission by slug or ID
      tags:
      - iam
    get:
      description: Retrieve a permission by its slug or ID
      parameters:
      - description: Permission slug or ID
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadPermission'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Get a permission by slug or ID
      tags:
      - iam
    put:
      consumes:
      - application/json
      description: Update an existing permission with the provided data
      parameters:
      - description: Permission slug or ID
        in: path
        name: slug
        required: true
        type: string
      - description: Permission data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ncobase_common_types.JSON'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadPermission'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Update an existing permission
      tags:
      - iam
  /iam/policies:
    get:
      description: Retrieve a list of Casbin rules.
      parameters:
      - in: query
        name: cursor
        type: string
      - in: query
        name: direction
        type: string
      - in: query
        name: limit
        type: integer
      - in: query
        name: p_type
        type: string
      - in: query
        name: v0
        type: string
      - in: query
        name: v1
        type: string
      - in: query
        name: v2
        type: string
      - in: query
        name: v3
        type: string
      - in: query
        name: v4
        type: string
      - in: query
        name: v5
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/structs.CasbinRuleBody'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: List Casbin rules
      tags:
      - iam
    post:
      consumes:
      - application/json
      description: Create a new Casbin rule.
      parameters:
      - description: CasbinRuleBody object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/structs.CasbinRuleBody'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadCasbinRule'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Create Casbin rule
      tags:
      - iam
  /iam/policies/{id}:
    delete:
      description: Delete an existing Casbin rule.
      parameters:
      - description: Casbin rule ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Delete Casbin rule
      tags:
      - iam
    get:
      description: Retrieve details of a Casbin rule.
      parameters:
      - description: Casbin rule ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadCasbinRule'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Get Casbin rule
      tags:
      - iam
    put:
      consumes:
      - application/json
      description: Update an existing Casbin rule, either fully or partially.
      parameters:
      - description: Casbin rule ID
        in: path
        name: id
        required: true
        type: string
      - description: CasbinRuleBody object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/structs.CasbinRuleBody'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadCasbinRule'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Update Casbin rule
      tags:
      - iam
  /iam/register:
    post:
      consumes:
      - application/json
      description: Register a new user.
      parameters:
      - description: RegisterBody object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/structs.RegisterBody'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            additionalProperties:
              allOf:
              - {}
              - properties:
                  access_token:
                    type: string
                  id:
                    type: string
                type: object
            type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      summary: Register
      tags:
      - iam
  /iam/roles:
    get:
      description: Retrieve a list of roles based on the provided query parameters
      parameters:
      - in: query
        name: cursor
        type: string
      - in: query
        name: direction
        type: string
      - in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/structs.ReadRole'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: List all roles
      tags:
      - iam
    post:
      consumes:
      - application/json
      description: Create a new role with the provided data
      parameters:
      - description: Role data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/structs.CreateRoleBody'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadRole'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Create a new role
      tags:
      - iam
  /iam/roles/{slug}:
    delete:
      description: Delete a role by its slug or ID
      parameters:
      - description: Role slug or ID
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadRole'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Delete a role by slug or ID
      tags:
      - iam
    get:
      description: Retrieve a role by its slug or ID
      parameters:
      - description: Role slug or ID
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadRole'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Get a role by slug or ID
      tags:
      - iam
    put:
      consumes:
      - application/json
      description: Update an existing role with the provided data
      parameters:
      - description: Role slug or ID
        in: path
        name: slug
        required: true
        type: string
      - description: Role data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ncobase_common_types.JSON'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadRole'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Update an existing role
      tags:
      - iam
  /iam/roles/{slug}/permissions:
    get:
      description: Retrieve a list of permissions associated with a role by its ID
      parameters:
      - description: Role ID
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/structs.ReadPermission'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: List permissions for a role
      tags:
      - iam
  /iam/tenants:
    get:
      description: Retrieve a list of tenants.
      parameters:
      - in: query
        name: cursor
        type: string
      - in: query
        name: direction
        type: string
      - in: query
        name: limit
        type: integer
      - in: query
        name: user
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/structs.ReadTenant'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: List tenants
      tags:
      - iam
    post:
      consumes:
      - application/json
      description: Create a new tenant.
      parameters:
      - description: CreateTenantBody object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/structs.CreateTenantBody'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadTenant'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Create tenant
      tags:
      - iam
    put:
      consumes:
      - application/json
      description: Update the tenant information.
      parameters:
      - description: Tenant ID
        in: path
        name: slug
        required: true
        type: string
      - description: UpdateTenantBody object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/structs.UpdateTenantBody'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadTenant'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Update tenant
      tags:
      - iam
  /iam/tenants/{slug}:
    delete:
      description: Delete a specific tenant.
      parameters:
      - description: Tenant ID
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Delete tenant
      tags:
      - iam
    get:
      description: Retrieve information about a specific tenant.
      parameters:
      - description: Tenant ID
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadTenant'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Get tenant
      tags:
      - iam
  /iam/tenants/{slug}/attachments:
    get:
      description: Retrieve a list of attachments associated with a specific tenant.
      parameters:
      - description: Tenant ID
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: List tenant attachments
      tags:
      - iam
  /iam/tenants/{slug}/groups:
    get:
      description: Retrieve a list of groups associated with a specific tenant.
      parameters:
      - description: Tenant ID
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: List tenant groups
      tags:
      - iam
  /iam/tenants/{slug}/menu:
    get:
      description: Retrieve the menu associated with a specific tenant.
      parameters:
      - description: Tenant ID
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Get tenant menu
      tags:
      - iam
  /iam/tenants/{slug}/roles:
    get:
      description: Retrieve a list of roles associated with a specific tenant.
      parameters:
      - description: Tenant ID
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: List tenant roles
      tags:
      - iam
  /iam/tenants/{slug}/setting:
    get:
      description: Retrieve the settings associated with a specific tenant.
      parameters:
      - description: Tenant ID
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Get tenant setting
      tags:
      - iam
  /iam/tenants/{slug}/settings:
    get:
      description: Retrieve a list of settings associated with a specific tenant.
      parameters:
      - description: Tenant ID
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: List tenant settings
      tags:
      - iam
  /iam/tenants/{slug}/users:
    get:
      description: Retrieve a list of users associated with a specific tenant.
      parameters:
      - description: Tenant ID
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: List tenant users
      tags:
      - iam
  /iam/users/{username}/tenant:
    get:
      description: Retrieve the tenant associated with the specified user.
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadTenant'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Get user owned tenant
      tags:
      - iam
  /org/groups:
    get:
      description: Retrieve a list or tree structure of groups.
      parameters:
      - in: query
        name: children
        type: boolean
      - in: query
        name: cursor
        type: string
      - in: query
        name: direction
        type: string
      - in: query
        name: limit
        type: integer
      - in: query
        name: parent
        type: string
      - in: query
        name: sort_by
        type: string
      - in: query
        name: tenant
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/structs.ReadGroup'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: List groups
      tags:
      - org
    post:
      consumes:
      - application/json
      description: Create a new group.
      parameters:
      - description: GroupBody object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/structs.GroupBody'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadGroup'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Create group
      tags:
      - org
    put:
      consumes:
      - application/json
      description: Update an existing group.
      parameters:
      - description: UpdateGroupBody object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/structs.UpdateGroupBody'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadGroup'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Update group
      tags:
      - org
  /org/groups/{slug}:
    delete:
      description: Delete a group by ID or slug.
      parameters:
      - description: Group ID or slug
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Delete group
      tags:
      - org
    get:
      description: Retrieve a group by ID or slug.
      parameters:
      - description: Group ID or slug
        in: path
        name: slug
        required: true
        type: string
      - in: query
        name: children
        type: boolean
      - in: query
        name: group
        type: string
      - in: query
        name: parent
        type: string
      - in: query
        name: sort_by
        type: string
      - in: query
        name: tenant
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadGroup'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Get group
      tags:
      - org
  /plug/counters:
    get:
      description: Retrieve a list or tree structure of counters.
      parameters:
      - in: query
        name: cursor
        type: string
      - in: query
        name: direction
        type: string
      - in: query
        name: disabled
        type: boolean
      - in: query
        name: limit
        type: integer
      - in: query
        name: tenant
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/structs.ReadCounter'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: List counters
      tags:
      - plug
    post:
      consumes:
      - application/json
      description: Create a new counter.
      parameters:
      - description: CounterBody object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/structs.CounterBody'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadCounter'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Create counter
      tags:
      - plug
    put:
      consumes:
      - application/json
      description: Update an existing counter.
      parameters:
      - description: UpdateCounterBody object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/structs.UpdateCounterBody'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadCounter'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Update counter
      tags:
      - plug
  /plug/counters/{id}:
    delete:
      description: Delete a counter by ID.
      parameters:
      - description: Counter ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Delete counter
      tags:
      - plug
    get:
      description: Retrieve a counter by ID.
      parameters:
      - description: Counter ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadCounter'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Get counter
      tags:
      - plug
  /res/attachments:
    get:
      description: List attachments based on specified parameters.
      parameters:
      - in: query
        name: cursor
        type: string
      - in: query
        name: direction
        type: string
      - in: query
        name: limit
        type: integer
      - in: query
        name: object
        required: true
        type: string
      - in: query
        name: storage
        type: string
      - in: query
        name: tenant
        required: true
        type: string
      - in: query
        name: type
        type: string
      - in: query
        name: user
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/structs.ReadAttachment'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      summary: List attachments
      tags:
      - res
    post:
      consumes:
      - multipart/form-data
      description: Create one or multiple attachments.
      parameters:
      - description: File to upload
        in: formData
        name: file
        required: true
        type: file
      - description: Object ID associated with the attachment
        in: formData
        name: object_id
        type: string
      - description: Tenant ID associated with the attachment
        in: formData
        name: tenant_id
        type: string
      - description: Additional properties associated with the attachment (JSON format)
        in: formData
        name: extras
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadAttachment'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Create attachments
      tags:
      - res
  /res/attachments/{slug}:
    delete:
      description: Delete a specific attachment.
      parameters:
      - description: Slug of the attachment to delete
        in: path
        name: slug
        required: true
        type: string
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadAttachment'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Delete attachment
      tags:
      - res
    get:
      description: Get details of a specific attachment.
      parameters:
      - description: Slug of the attachment to retrieve
        in: path
        name: slug
        required: true
        type: string
      - description: Type of retrieval ('download' or 'stream')
        in: query
        name: type
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadAttachment'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      summary: Get attachment
      tags:
      - res
    put:
      consumes:
      - multipart/form-data
      description: Update an existing attachment.
      parameters:
      - description: Slug of the attachment to update
        in: path
        name: slug
        required: true
        type: string
      - description: Attachment details
        in: body
        name: attachment
        required: true
        schema:
          $ref: '#/definitions/structs.UpdateAttachmentBody'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadAttachment'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Update attachment
      tags:
      - res
  /rt/channels:
    get:
      description: Retrieve a list of channels based on the provided query parameters
      parameters:
      - in: query
        name: cursor
        type: string
      - in: query
        name: direction
        type: string
      - in: query
        name: limit
        type: integer
      - in: query
        name: status
        type: integer
      - in: query
        name: type
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/structs.ReadChannel'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: List all channels
      tags:
      - rt
    post:
      consumes:
      - application/json
      description: Create a new channel
      parameters:
      - description: Channel data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/structs.CreateChannel'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadChannel'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Create a new channel
      tags:
      - rt
  /rt/channels/{id}:
    delete:
      description: Delete a channel
      parameters:
      - description: Channel ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadChannel'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Delete a channel
      tags:
      - rt
    get:
      description: Get a channel by ID
      parameters:
      - description: Channel ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadChannel'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Get a channel by ID
      tags:
      - rt
    put:
      consumes:
      - application/json
      description: Update a channel
      parameters:
      - description: Channel ID
        in: path
        name: id
        required: true
        type: string
      - description: Channel data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/structs.UpdateChannel'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadChannel'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Update a channel
      tags:
      - rt
  /rt/channels/{id}/subscribe:
    post:
      consumes:
      - application/json
      description: Subscribe to a channel
      parameters:
      - description: Channel ID
        in: path
        name: id
        required: true
        type: string
      - description: Subscription data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/structs.CreateSubscription'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadSubscription'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Subscribe to a channel
      tags:
      - rt
  /rt/channels/{id}/subscribers:
    get:
      description: Get subscribers of a channel
      parameters:
      - description: Channel ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/structs.ReadUser'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Get subscribers of a channel
      tags:
      - rt
  /rt/channels/{id}/unsubscribe:
    post:
      consumes:
      - application/json
      description: Unsubscribe from a channel
      parameters:
      - description: Channel ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            additionalProperties:
              allOf:
              - {}
              - properties:
                  message:
                    type: string
                type: object
            type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Unsubscribe from a channel
      tags:
      - rt
  /rt/channels/user:
    get:
      description: Get channels of a user
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/structs.ReadChannel'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Get channels of a user
      tags:
      - rt
  /rt/events:
    get:
      description: Retrieve a list of events based on the provided query parameters
      parameters:
      - in: query
        name: channel_id
        type: string
      - in: query
        name: cursor
        type: string
      - in: query
        name: direction
        type: string
      - in: query
        name: limit
        type: integer
      - collectionFormat: csv
        in: query
        items:
          type: integer
        name: time_range
        type: array
      - in: query
        name: type
        type: string
      - in: query
        name: user_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/structs.ReadEvent'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: List all events
      tags:
      - rt
  /rt/events/{id}:
    delete:
      description: Delete an event
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadEvent'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Delete an event
      tags:
      - rt
    get:
      description: Get an event by ID
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadEvent'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Get an event by ID
      tags:
      - rt
  /rt/events/history:
    get:
      description: Get event history
      parameters:
      - description: Channel ID
        in: query
        name: channel_id
        required: true
        type: string
      - description: Event type
        in: query
        name: type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/structs.ReadEvent'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Get event history
      tags:
      - rt
  /rt/events/publish:
    post:
      consumes:
      - application/json
      description: Publish a new event
      parameters:
      - description: Event data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/structs.CreateEvent'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadEvent'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Publish a new event
      tags:
      - rt
  /rt/notifications:
    get:
      description: Retrieve a list of notifications based on the provided query parameters
      parameters:
      - in: query
        name: channel_id
        type: string
      - in: query
        name: cursor
        type: string
      - in: query
        name: direction
        type: string
      - in: query
        name: limit
        type: integer
      - in: query
        name: status
        type: integer
      - in: query
        name: user_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/structs.ReadNotification'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: List all notifications
      tags:
      - rt
    post:
      consumes:
      - application/json
      description: Create a new notification
      parameters:
      - description: Notification data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/structs.CreateNotification'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadNotification'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Create a new notification
      tags:
      - rt
  /rt/notifications/{id}:
    delete:
      description: Delete a notification
      parameters:
      - description: Notification ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadNotification'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Delete a notification
      tags:
      - rt
    get:
      description: Get a notification by ID
      parameters:
      - description: Notification ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadNotification'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Get a notification by ID
      tags:
      - rt
    put:
      consumes:
      - application/json
      description: Update a notification
      parameters:
      - description: Notification ID
        in: path
        name: id
        required: true
        type: string
      - description: Notification data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/structs.UpdateNotification'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadNotification'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Update a notification
      tags:
      - rt
  /rt/notifications/{id}/read:
    put:
      description: Mark a notification as read
      parameters:
      - description: Notification ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadNotification'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Mark a notification as read
      tags:
      - rt
  /rt/notifications/{id}/unread:
    put:
      description: Mark a notification as unread
      parameters:
      - description: Notification ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadNotification'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Mark a notification as unread
      tags:
      - rt
  /rt/notifications/read-all:
    put:
      description: Mark all notifications as read
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            additionalProperties:
              allOf:
              - {}
              - properties:
                  message:
                    type: string
                type: object
            type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Mark all notifications as read
      tags:
      - rt
  /rt/notifications/unread-all:
    put:
      description: Mark all notifications as unread
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            additionalProperties:
              allOf:
              - {}
              - properties:
                  message:
                    type: string
                type: object
            type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Mark all notifications as unread
      tags:
      - rt
  /rt/ws:
    get:
      description: Handles WebSocket connection
      responses: {}
      security:
      - Bearer: []
      summary: Handle WebSocket connection
      tags:
      - rt
  /sys/dictionarys:
    get:
      description: Retrieve a list or tree structure of dictionarys.
      parameters:
      - in: query
        name: cursor
        type: string
      - in: query
        name: direction
        type: string
      - in: query
        name: limit
        type: integer
      - in: query
        name: tenant
        type: string
      - in: query
        name: type
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/structs.ReadDictionary'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: List dictionarys
      tags:
      - sys
    post:
      consumes:
      - application/json
      description: Create a new dictionary.
      parameters:
      - description: DictionaryBody object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/structs.DictionaryBody'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadDictionary'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Create dictionary
      tags:
      - sys
    put:
      consumes:
      - application/json
      description: Update an existing dictionary.
      parameters:
      - description: UpdateDictionaryBody object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/structs.UpdateDictionaryBody'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadDictionary'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Update dictionary
      tags:
      - sys
  /sys/dictionarys/{slug}:
    delete:
      description: Delete a dictionary by ID or slug.
      parameters:
      - description: Dictionary ID or slug
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Delete dictionary
      tags:
      - sys
    get:
      description: Retrieve a dictionary by ID or slug.
      parameters:
      - description: Dictionary ID or slug
        in: path
        name: slug
        required: true
        type: string
      - in: query
        name: dictionary
        type: string
      - in: query
        name: tenant
        type: string
      - in: query
        name: type
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadDictionary'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Get dictionary
      tags:
      - sys
  /sys/menus:
    get:
      description: Retrieve a list or tree structure of menus.
      parameters:
      - in: query
        name: children
        type: boolean
      - in: query
        name: cursor
        type: string
      - in: query
        name: direction
        type: string
      - in: query
        name: limit
        type: integer
      - in: query
        name: parent
        type: string
      - in: query
        name: perms
        type: string
      - in: query
        name: sort_by
        type: string
      - in: query
        name: tenant
        type: string
      - in: query
        name: type
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/structs.ReadMenu'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: List menus
      tags:
      - sys
    post:
      consumes:
      - application/json
      description: Create a new menu.
      parameters:
      - description: MenuBody object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/structs.MenuBody'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadMenu'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Create menu
      tags:
      - sys
    put:
      consumes:
      - application/json
      description: Update an existing menu.
      parameters:
      - description: UpdateMenuBody object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/structs.UpdateMenuBody'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadMenu'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Update menu
      tags:
      - sys
  /sys/menus/{slug}:
    delete:
      description: Delete a menu by ID or slug.
      parameters:
      - description: Menu ID or slug
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Delete menu
      tags:
      - sys
    get:
      description: Retrieve a menu by ID or slug.
      parameters:
      - description: Menu ID or slug
        in: path
        name: slug
        required: true
        type: string
      - in: query
        name: children
        type: boolean
      - in: query
        name: menu
        type: string
      - in: query
        name: parent
        type: string
      - in: query
        name: sort_by
        type: string
      - in: query
        name: tenant
        type: string
      - in: query
        name: type
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadMenu'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Get menu
      tags:
      - sys
  /sys/options:
    get:
      description: Retrieve a list of options.
      parameters:
      - in: query
        name: autoload
        type: boolean
      - in: query
        name: cursor
        type: string
      - in: query
        name: direction
        type: string
      - in: query
        name: limit
        type: integer
      - in: query
        name: sort_by
        type: string
      - in: query
        name: tenant
        type: string
      - in: query
        name: type
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/structs.ReadOptions'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: List options
      tags:
      - sys
    post:
      consumes:
      - application/json
      description: Create a new option.
      parameters:
      - description: OptionsBody object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/structs.OptionsBody'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadOptions'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Create option
      tags:
      - sys
    put:
      consumes:
      - application/json
      description: Update an existing option.
      parameters:
      - description: UpdateOptionsBody object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/structs.UpdateOptionsBody'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadOptions'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Update option
      tags:
      - sys
  /sys/options/{option}:
    delete:
      description: Delete an option by ID or name.
      parameters:
      - description: Option ID or name
        in: path
        name: option
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Delete option
      tags:
      - sys
    get:
      description: Retrieve an option by ID or name.
      parameters:
      - description: Option ID or name
        in: path
        name: option
        required: true
        type: string
      - in: query
        name: option
        type: string
      - in: query
        name: sort_by
        type: string
      - in: query
        name: tenant
        type: string
      - in: query
        name: type
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadOptions'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Get option
      tags:
      - sys
  /sys/options/initialize:
    post:
      description: Initialize the system with default options
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      security:
      - Bearer: []
      summary: Initialize
      tags:
      - sys
  /sys/users:
    get:
      description: List all users with pagination.
      parameters:
      - description: Cursor for pagination
        in: query
        name: cursor
        type: string
      - description: Number of items to return
        in: query
        name: limit
        type: integer
      - description: Direction of pagination (forward or backward)
        in: query
        name: direction
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/structs.ReadUser'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      summary: List users
      tags:
      - sys
    post:
      consumes:
      - application/json
      description: Create a new user.
      parameters:
      - description: User information
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/structs.UserBody'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadUser'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      summary: Create user
      tags:
      - sys
  /sys/users/{username}:
    delete:
      description: Delete an existing user.
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      summary: Delete user
      tags:
      - sys
    get:
      description: Retrieve information about a specific user.
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadUser'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      summary: Get user
      tags:
      - sys
    put:
      consumes:
      - application/json
      description: Update an existing user.
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      - description: User information to update
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/ncobase_common_types.JSON'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/structs.ReadUser'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      summary: Update user
      tags:
      - sys
  /sys/users/{username}/password:
    put:
      consumes:
      - application/json
      description: Update an existing user's password.
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      - description: Password information
        in: body
        name: password
        required: true
        schema:
          $ref: '#/definitions/structs.UserPassword'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ncobase_common_resp.Exception'
      summary: Update user password
      tags:
      - sys
securityDefinitions:
  Bearer:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
