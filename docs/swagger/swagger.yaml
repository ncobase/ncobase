definitions:
  gin.H:
    additionalProperties: {}
    type: object
  github_com_ncobase_ncore_net_resp.Exception:
    properties:
      code:
        description: Business code
        type: integer
      data:
        description: Response data
      errors:
        description: Validation errors
      message:
        description: Message
        type: string
      status:
        description: HTTP status
        type: integer
    type: object
  github_com_ncobase_ncore_types.JSON:
    additionalProperties: {}
    type: object
  ncobase_access_structs.Activity:
    properties:
      created_at:
        type: integer
      details:
        type: string
      id:
        type: string
      metadata:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      timestamp:
        type: integer
      type:
        type: string
      updated_at:
        type: integer
      user_id:
        type: string
    type: object
  ncobase_access_structs.ActivityDocument:
    properties:
      created_at:
        type: integer
      details:
        type: string
      id:
        type: string
      metadata:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      type:
        type: string
      updated_at:
        type: integer
      user_id:
        type: string
    type: object
  ncobase_access_structs.CasbinRuleBody:
    properties:
      created_by:
        type: string
      p_type:
        type: string
      updated_by:
        type: string
      v0:
        type: string
      v1:
        type: string
      v2:
        type: string
      v3:
        type: string
      v4:
        type: string
      v5:
        type: string
    required:
    - p_type
    - v0
    - v1
    - v2
    type: object
  ncobase_access_structs.CreateActivityRequest:
    properties:
      details:
        type: string
      metadata:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      type:
        type: string
    required:
    - details
    - type
    type: object
  ncobase_access_structs.CreatePermissionBody:
    properties:
      action:
        type: string
      created_by:
        type: string
      default:
        type: boolean
      description:
        type: string
      disabled:
        type: boolean
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      name:
        type: string
      subject:
        type: string
      updated_by:
        type: string
    type: object
  ncobase_access_structs.CreateRoleBody:
    properties:
      created_by:
        type: string
      description:
        type: string
      disabled:
        type: boolean
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      name:
        type: string
      slug:
        type: string
      updated_by:
        type: string
    type: object
  ncobase_access_structs.ReadCasbinRule:
    properties:
      created_at:
        type: integer
      created_by:
        type: string
      id:
        type: string
      p_type:
        type: string
      updated_at:
        type: integer
      updated_by:
        type: string
      v0:
        type: string
      v1:
        type: string
      v2:
        type: string
      v3:
        type: string
      v4:
        type: string
      v5:
        type: string
    type: object
  ncobase_access_structs.ReadPermission:
    properties:
      action:
        type: string
      created_at:
        type: integer
      created_by:
        type: string
      default:
        type: boolean
      description:
        type: string
      disabled:
        type: boolean
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      id:
        type: string
      name:
        type: string
      subject:
        type: string
      updated_at:
        type: integer
      updated_by:
        type: string
    type: object
  ncobase_access_structs.ReadRole:
    properties:
      created_at:
        type: integer
      created_by:
        type: string
      description:
        type: string
      disabled:
        type: boolean
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      id:
        type: string
      name:
        type: string
      slug:
        type: string
      updated_at:
        type: integer
      updated_by:
        type: string
    type: object
  ncobase_auth_structs.AccountMeshes:
    properties:
      groups:
        items:
          $ref: '#/definitions/ncobase_space_structs.ReadGroup'
        type: array
      is_admin:
        type: boolean
      permissions:
        items:
          type: string
        type: array
      profile:
        $ref: '#/definitions/ncobase_user_structs.ReadUserProfile'
      roles:
        items:
          type: string
        type: array
      tenant_id:
        type: string
      tenants:
        items:
          $ref: '#/definitions/ncobase_tenant_structs.ReadTenant'
        type: array
      user:
        $ref: '#/definitions/ncobase_user_structs.ReadUser'
    type: object
  ncobase_auth_structs.Captcha:
    properties:
      id:
        type: string
      solution:
        type: string
    required:
    - id
    - solution
    type: object
  ncobase_auth_structs.LoginBody:
    properties:
      captcha:
        $ref: '#/definitions/ncobase_auth_structs.Captcha'
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  ncobase_auth_structs.ReadSession:
    properties:
      created_at:
        type: integer
      device_info:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      expires_at:
        type: integer
      id:
        type: string
      ip_address:
        type: string
      is_active:
        type: boolean
      last_access_at:
        type: integer
      location:
        type: string
      login_method:
        type: string
      token_id:
        type: string
      updated_at:
        type: integer
      user_agent:
        type: string
      user_id:
        type: string
    type: object
  ncobase_auth_structs.ReadTenant:
    properties:
      copyright:
        type: string
      created_at:
        type: integer
      created_by:
        type: string
      description:
        type: string
      disabled:
        type: boolean
      expired_at:
        type: integer
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      id:
        type: string
      keywords:
        type: string
      logo:
        type: string
      logo_alt:
        type: string
      name:
        type: string
      order:
        type: integer
      slug:
        type: string
      title:
        type: string
      type:
        type: string
      updated_at:
        type: integer
      updated_by:
        type: string
      url:
        type: string
    type: object
  ncobase_auth_structs.RefreshTokenBody:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  ncobase_auth_structs.RegisterBody:
    properties:
      display_name:
        type: string
      phone:
        type: string
      register_token:
        type: string
      short_bio:
        type: string
      tenant:
        type: string
      username:
        type: string
    required:
    - display_name
    - register_token
    - username
    type: object
  ncobase_auth_structs.SendCodeBody:
    properties:
      email:
        type: string
      phone:
        type: string
    type: object
  ncobase_auth_structs.UserPassword:
    properties:
      confirm:
        type: string
      new_password:
        type: string
      old_password:
        type: string
      user:
        type: string
    required:
    - confirm
    - new_password
    - user
    type: object
  ncobase_content_structs.CreateChannelBody:
    properties:
      allowed_types:
        description: article, video, image, audio, mixed
        items:
          type: string
        type: array
      auto_publish:
        type: boolean
      config:
        allOf:
        - $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
        description: API keys, secrets, endpoints, etc.
      created_by:
        type: string
      description:
        type: string
      icon:
        type: string
      logo:
        type: string
      name:
        type: string
      require_review:
        type: boolean
      slug:
        type: string
      status:
        description: '0: active, 1: inactive'
        type: integer
      tenant_id:
        type: string
      type:
        description: website, wechat, douyin, tiktok, xiaohongshu, twitter, facebook,
          custom
        type: string
      updated_by:
        type: string
      webhook_url:
        type: string
    type: object
  ncobase_content_structs.CreateDistributionBody:
    properties:
      channel_id:
        type: string
      created_by:
        type: string
      custom_data:
        allOf:
        - $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
        description: Custom data for the distribution
      error_details:
        description: Error details if distribution failed
        type: string
      external_id:
        description: ID on the external platform
        type: string
      external_url:
        description: URL on the external platform
        type: string
      meta_data:
        allOf:
        - $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
        description: Platform-specific data
      published_at:
        type: integer
      scheduled_at:
        type: integer
      status:
        description: '0: draft, 1: scheduled, 2: published, 3: failed, 4: cancelled'
        type: integer
      tenant_id:
        type: string
      topic_id:
        type: string
      updated_by:
        type: string
    type: object
  ncobase_content_structs.CreateMediaBody:
    properties:
      alt:
        type: string
      created_by:
        type: string
      description:
        type: string
      duration:
        type: number
      height:
        type: integer
      metadata:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      mime_type:
        type: string
      path:
        type: string
      size:
        type: integer
      tenant_id:
        type: string
      title:
        type: string
      type:
        description: image, video, audio, file
        type: string
      updated_by:
        type: string
      url:
        type: string
      width:
        type: integer
    type: object
  ncobase_content_structs.CreateTaxonomyBody:
    properties:
      color:
        type: string
      cover:
        type: string
      created_by:
        type: string
      description:
        type: string
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      icon:
        type: string
      keywords:
        type: string
      name:
        type: string
      parent_id:
        type: string
      slug:
        type: string
      status:
        type: integer
      tenant_id:
        type: string
      thumbnail:
        type: string
      type:
        type: string
      updated_by:
        type: string
      url:
        type: string
    type: object
  ncobase_content_structs.CreateTopicBody:
    properties:
      content:
        type: string
      content_type:
        description: article, video, etc.
        type: string
      created_by:
        type: string
      excerpt:
        type: string
      excerpt_auto:
        type: boolean
      featured_media:
        type: string
      markdown:
        type: boolean
      metadata:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      name:
        type: string
      private:
        type: boolean
      released:
        type: integer
      seo_description:
        type: string
      seo_keywords:
        type: string
      seo_title:
        type: string
      slug:
        type: string
      status:
        type: integer
      tags:
        items:
          type: string
        type: array
      taxonomy_id:
        type: string
      temp:
        type: boolean
      tenant_id:
        type: string
      thumbnail:
        type: string
      title:
        type: string
      updated_by:
        type: string
      version:
        type: integer
    type: object
  ncobase_content_structs.CreateTopicMediaBody:
    properties:
      created_by:
        type: string
      media_id:
        type: string
      order:
        type: integer
      topic_id:
        type: string
      type:
        description: featured, gallery, attachment, etc.
        type: string
    type: object
  ncobase_content_structs.ReadChannel:
    properties:
      allowed_types:
        items:
          type: string
        type: array
      auto_publish:
        type: boolean
      config:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      created_at:
        type: integer
      created_by:
        type: string
      description:
        type: string
      icon:
        type: string
      id:
        type: string
      logo:
        type: string
      name:
        type: string
      require_review:
        type: boolean
      slug:
        type: string
      status:
        type: integer
      tenant_id:
        type: string
      type:
        type: string
      updated_at:
        type: integer
      updated_by:
        type: string
      webhook_url:
        type: string
    type: object
  ncobase_content_structs.ReadDistribution:
    properties:
      channel:
        $ref: '#/definitions/ncobase_content_structs.ReadChannel'
      channel_id:
        type: string
      created_at:
        type: integer
      created_by:
        type: string
      custom_data:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      error_details:
        type: string
      external_id:
        type: string
      external_url:
        type: string
      id:
        type: string
      meta_data:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      published_at:
        type: integer
      scheduled_at:
        type: integer
      status:
        type: integer
      tenant_id:
        type: string
      topic:
        $ref: '#/definitions/ncobase_content_structs.ReadTopic'
      topic_id:
        type: string
      updated_at:
        type: integer
      updated_by:
        type: string
    type: object
  ncobase_content_structs.ReadMedia:
    properties:
      alt:
        type: string
      created_at:
        type: integer
      created_by:
        type: string
      description:
        type: string
      duration:
        type: number
      height:
        type: integer
      id:
        type: string
      metadata:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      mime_type:
        type: string
      path:
        type: string
      size:
        type: integer
      tenant_id:
        type: string
      title:
        type: string
      type:
        type: string
      updated_at:
        type: integer
      updated_by:
        type: string
      url:
        type: string
      width:
        type: integer
    type: object
  ncobase_content_structs.ReadTaxonomy:
    properties:
      children:
        items: {}
        type: array
      color:
        type: string
      cover:
        type: string
      created_at:
        type: integer
      created_by:
        type: string
      description:
        type: string
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      icon:
        type: string
      id:
        type: string
      keywords:
        type: string
      name:
        type: string
      parent_id:
        type: string
      slug:
        type: string
      status:
        type: integer
      tenant_id:
        type: string
      thumbnail:
        type: string
      type:
        type: string
      updated_at:
        type: integer
      updated_by:
        type: string
      url:
        type: string
    type: object
  ncobase_content_structs.ReadTopic:
    properties:
      content:
        type: string
      content_type:
        type: string
      created_at:
        type: integer
      created_by:
        type: string
      excerpt:
        type: string
      excerpt_auto:
        type: boolean
      featured_media:
        type: string
      id:
        type: string
      markdown:
        type: boolean
      media:
        items:
          $ref: '#/definitions/ncobase_content_structs.ReadMedia'
        type: array
      metadata:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      name:
        type: string
      private:
        type: boolean
      released:
        type: integer
      seo_description:
        type: string
      seo_keywords:
        type: string
      seo_title:
        type: string
      slug:
        type: string
      status:
        type: integer
      tags:
        items:
          type: string
        type: array
      taxonomy:
        $ref: '#/definitions/ncobase_content_structs.ReadTaxonomy'
      taxonomy_id:
        type: string
      temp:
        type: boolean
      tenant_id:
        type: string
      thumbnail:
        type: string
      title:
        type: string
      updated_at:
        type: integer
      updated_by:
        type: string
      version:
        type: integer
    type: object
  ncobase_content_structs.ReadTopicMedia:
    properties:
      created_at:
        type: integer
      created_by:
        type: string
      id:
        type: string
      media:
        $ref: '#/definitions/ncobase_content_structs.ReadMedia'
      media_id:
        type: string
      order:
        type: integer
      topic_id:
        type: string
      type:
        type: string
      updated_at:
        type: integer
      updated_by:
        type: string
    type: object
  ncobase_content_structs.UpdateChannelBody:
    properties:
      allowed_types:
        description: article, video, image, audio, mixed
        items:
          type: string
        type: array
      auto_publish:
        type: boolean
      config:
        allOf:
        - $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
        description: API keys, secrets, endpoints, etc.
      created_by:
        type: string
      description:
        type: string
      icon:
        type: string
      id:
        type: string
      logo:
        type: string
      name:
        type: string
      require_review:
        type: boolean
      slug:
        type: string
      status:
        description: '0: active, 1: inactive'
        type: integer
      tenant_id:
        type: string
      type:
        description: website, wechat, douyin, tiktok, xiaohongshu, twitter, facebook,
          custom
        type: string
      updated_by:
        type: string
      webhook_url:
        type: string
    type: object
  ncobase_content_structs.UpdateDistributionBody:
    properties:
      channel_id:
        type: string
      created_by:
        type: string
      custom_data:
        allOf:
        - $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
        description: Custom data for the distribution
      error_details:
        description: Error details if distribution failed
        type: string
      external_id:
        description: ID on the external platform
        type: string
      external_url:
        description: URL on the external platform
        type: string
      id:
        type: string
      meta_data:
        allOf:
        - $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
        description: Platform-specific data
      published_at:
        type: integer
      scheduled_at:
        type: integer
      status:
        description: '0: draft, 1: scheduled, 2: published, 3: failed, 4: cancelled'
        type: integer
      tenant_id:
        type: string
      topic_id:
        type: string
      updated_by:
        type: string
    type: object
  ncobase_content_structs.UpdateMediaBody:
    properties:
      alt:
        type: string
      created_by:
        type: string
      description:
        type: string
      duration:
        type: number
      height:
        type: integer
      id:
        type: string
      metadata:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      mime_type:
        type: string
      path:
        type: string
      size:
        type: integer
      tenant_id:
        type: string
      title:
        type: string
      type:
        description: image, video, audio, file
        type: string
      updated_by:
        type: string
      url:
        type: string
      width:
        type: integer
    type: object
  ncobase_content_structs.UpdateTaxonomyBody:
    properties:
      color:
        type: string
      cover:
        type: string
      created_by:
        type: string
      description:
        type: string
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      icon:
        type: string
      id:
        type: string
      keywords:
        type: string
      name:
        type: string
      parent_id:
        type: string
      slug:
        type: string
      status:
        type: integer
      tenant_id:
        type: string
      thumbnail:
        type: string
      type:
        type: string
      updated_by:
        type: string
      url:
        type: string
    type: object
  ncobase_content_structs.UpdateTopicBody:
    properties:
      content:
        type: string
      content_type:
        description: article, video, etc.
        type: string
      created_by:
        type: string
      excerpt:
        type: string
      excerpt_auto:
        type: boolean
      featured_media:
        type: string
      id:
        type: string
      markdown:
        type: boolean
      metadata:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      name:
        type: string
      private:
        type: boolean
      released:
        type: integer
      seo_description:
        type: string
      seo_keywords:
        type: string
      seo_title:
        type: string
      slug:
        type: string
      status:
        type: integer
      tags:
        items:
          type: string
        type: array
      taxonomy_id:
        type: string
      temp:
        type: boolean
      tenant_id:
        type: string
      thumbnail:
        type: string
      title:
        type: string
      updated_by:
        type: string
      version:
        type: integer
    type: object
  ncobase_counter_structs.CounterBody:
    properties:
      created_by:
        type: string
      current_value:
        type: integer
      date_format:
        type: string
      description:
        type: string
      disabled:
        type: boolean
      identifier:
        type: string
      increment_step:
        type: integer
      name:
        type: string
      prefix:
        type: string
      start_value:
        type: integer
      suffix:
        type: string
      tenant_id:
        type: string
      updated_by:
        type: string
    type: object
  ncobase_counter_structs.ReadCounter:
    properties:
      created_at:
        type: integer
      created_by:
        type: string
      current_value:
        type: integer
      date_format:
        type: string
      description:
        type: string
      disabled:
        type: boolean
      id:
        type: string
      identifier:
        type: string
      increment_step:
        type: integer
      name:
        type: string
      prefix:
        type: string
      start_value:
        type: integer
      suffix:
        type: string
      tenant_id:
        type: string
      updated_at:
        type: integer
      updated_by:
        type: string
    type: object
  ncobase_counter_structs.UpdateCounterBody:
    properties:
      created_by:
        type: string
      current_value:
        type: integer
      date_format:
        type: string
      description:
        type: string
      disabled:
        type: boolean
      id:
        type: string
      identifier:
        type: string
      increment_step:
        type: integer
      name:
        type: string
      prefix:
        type: string
      start_value:
        type: integer
      suffix:
        type: string
      tenant_id:
        type: string
      updated_by:
        type: string
    type: object
  ncobase_payment_structs.BillingInterval:
    enum:
    - daily
    - weekly
    - monthly
    - yearly
    type: string
    x-enum-varnames:
    - BillingIntervalDaily
    - BillingIntervalWeekly
    - BillingIntervalMonthly
    - BillingIntervalYearly
  ncobase_payment_structs.CancelSubscriptionInput:
    properties:
      immediate:
        type: boolean
      reason:
        type: string
    type: object
  ncobase_payment_structs.Channel:
    properties:
      config:
        $ref: '#/definitions/ncobase_payment_structs.ProviderConfig'
      created_at:
        type: integer
      id:
        type: string
      is_default:
        type: boolean
      metadata:
        additionalProperties: {}
        type: object
      name:
        type: string
      provider:
        $ref: '#/definitions/ncobase_payment_structs.PaymentProvider'
      status:
        $ref: '#/definitions/ncobase_payment_structs.ChannelStatus'
      supported_types:
        items:
          $ref: '#/definitions/ncobase_payment_structs.PaymentType'
        type: array
      tenant_id:
        type: string
      updated_at:
        type: integer
    type: object
  ncobase_payment_structs.ChannelStatus:
    enum:
    - active
    - disabled
    - testing
    type: string
    x-enum-varnames:
    - ChannelStatusActive
    - ChannelStatusDisabled
    - ChannelStatusTesting
  ncobase_payment_structs.CreateChannelInput:
    properties:
      config:
        $ref: '#/definitions/ncobase_payment_structs.ProviderConfig'
      is_default:
        type: boolean
      metadata:
        additionalProperties: {}
        type: object
      name:
        type: string
      provider:
        $ref: '#/definitions/ncobase_payment_structs.PaymentProvider'
      status:
        $ref: '#/definitions/ncobase_payment_structs.ChannelStatus'
      supported_types:
        items:
          $ref: '#/definitions/ncobase_payment_structs.PaymentType'
        type: array
      tenant_id:
        type: string
    required:
    - config
    - name
    - provider
    - status
    - supported_types
    type: object
  ncobase_payment_structs.CreateOrderInput:
    properties:
      amount:
        type: number
      channel_id:
        type: string
      currency:
        $ref: '#/definitions/ncobase_payment_structs.CurrencyCode'
      description:
        type: string
      expires_at:
        type: string
      metadata:
        additionalProperties: {}
        type: object
      order_number:
        type: string
      paid_at:
        type: string
      product_id:
        type: string
      provider_ref:
        type: string
      status:
        $ref: '#/definitions/ncobase_payment_structs.PaymentStatus'
      subscription_id:
        type: string
      tenant_id:
        type: string
      type:
        $ref: '#/definitions/ncobase_payment_structs.PaymentType'
      user_id:
        type: string
    type: object
  ncobase_payment_structs.CreateProductInput:
    properties:
      billing_interval:
        $ref: '#/definitions/ncobase_payment_structs.BillingInterval'
      currency:
        $ref: '#/definitions/ncobase_payment_structs.CurrencyCode'
      description:
        type: string
      features:
        items:
          type: string
        type: array
      metadata:
        additionalProperties: {}
        type: object
      name:
        type: string
      price:
        type: number
      pricing_type:
        $ref: '#/definitions/ncobase_payment_structs.PricingType'
      status:
        $ref: '#/definitions/ncobase_payment_structs.ProductStatus'
      tenant_id:
        type: string
      trial_days:
        type: integer
    required:
    - currency
    - description
    - name
    - price
    - pricing_type
    - status
    type: object
  ncobase_payment_structs.CreateSubscriptionInput:
    properties:
      channel_id:
        type: string
      metadata:
        additionalProperties: {}
        type: object
      product_id:
        type: string
      tenant_id:
        type: string
      trial_days:
        type: integer
      user_id:
        type: string
    required:
    - channel_id
    - product_id
    - user_id
    type: object
  ncobase_payment_structs.CurrencyCode:
    enum:
    - USD
    - EUR
    - GBP
    - CNY
    - JPY
    type: string
    x-enum-varnames:
    - CurrencyUSD
    - CurrencyEUR
    - CurrencyGBP
    - CurrencyCNY
    - CurrencyJPY
  ncobase_payment_structs.Log:
    properties:
      channel_id:
        type: string
      created_at:
        type: integer
      error:
        type: string
      id:
        type: string
      ip:
        type: string
      metadata:
        additionalProperties: {}
        type: object
      order_id:
        type: string
      request_data:
        type: string
      response_data:
        type: string
      status_after:
        $ref: '#/definitions/ncobase_payment_structs.PaymentStatus'
      status_before:
        $ref: '#/definitions/ncobase_payment_structs.PaymentStatus'
      type:
        $ref: '#/definitions/ncobase_payment_structs.LogType'
      updated_at:
        type: integer
      user_agent:
        type: string
      user_id:
        type: string
    type: object
  ncobase_payment_structs.LogType:
    enum:
    - create
    - update
    - verify
    - callback
    - notify
    - refund
    - error
    type: string
    x-enum-varnames:
    - LogTypeCreate
    - LogTypeUpdate
    - LogTypeVerify
    - LogTypeCallback
    - LogTypeNotify
    - LogTypeRefund
    - LogTypeError
  ncobase_payment_structs.Order:
    properties:
      amount:
        type: number
      channel_id:
        type: string
      created_at:
        type: integer
      currency:
        $ref: '#/definitions/ncobase_payment_structs.CurrencyCode'
      description:
        type: string
      expires_at:
        type: string
      id:
        type: string
      metadata:
        additionalProperties: {}
        type: object
      order_number:
        type: string
      paid_at:
        type: string
      product_id:
        type: string
      provider_ref:
        type: string
      status:
        $ref: '#/definitions/ncobase_payment_structs.PaymentStatus'
      subscription_id:
        type: string
      tenant_id:
        type: string
      type:
        $ref: '#/definitions/ncobase_payment_structs.PaymentType'
      updated_at:
        type: integer
      user_id:
        type: string
    type: object
  ncobase_payment_structs.PaymentProvider:
    enum:
    - stripe
    - paypal
    - alipay
    - wechatpay
    type: string
    x-enum-varnames:
    - PaymentProviderStripe
    - PaymentProviderPayPal
    - PaymentProviderAlipay
    - PaymentProviderWeChatPay
  ncobase_payment_structs.PaymentStatus:
    enum:
    - pending
    - completed
    - failed
    - refunded
    - cancelled
    type: string
    x-enum-varnames:
    - PaymentStatusPending
    - PaymentStatusCompleted
    - PaymentStatusFailed
    - PaymentStatusRefunded
    - PaymentStatusCancelled
  ncobase_payment_structs.PaymentType:
    enum:
    - one_time
    - subscription
    - recurring
    type: string
    x-enum-varnames:
    - PaymentTypeOneTime
    - PaymentTypeSubscription
    - PaymentTypeRecurring
  ncobase_payment_structs.PricingType:
    enum:
    - one_time
    - recurring
    - usage_based
    - tiered_usage
    type: string
    x-enum-varnames:
    - PricingTypeOneTime
    - PricingTypeRecurring
    - PricingTypeUsageBased
    - PricingTypeTieredUsage
  ncobase_payment_structs.Product:
    properties:
      billing_interval:
        $ref: '#/definitions/ncobase_payment_structs.BillingInterval'
      created_at:
        type: integer
      currency:
        $ref: '#/definitions/ncobase_payment_structs.CurrencyCode'
      description:
        type: string
      features:
        items:
          type: string
        type: array
      id:
        type: string
      metadata:
        additionalProperties: {}
        type: object
      name:
        type: string
      price:
        type: number
      pricing_type:
        $ref: '#/definitions/ncobase_payment_structs.PricingType'
      status:
        $ref: '#/definitions/ncobase_payment_structs.ProductStatus'
      tenant_id:
        type: string
      trial_days:
        type: integer
      updated_at:
        type: integer
    type: object
  ncobase_payment_structs.ProductStatus:
    enum:
    - active
    - disabled
    - draft
    type: string
    x-enum-varnames:
    - ProductStatusActive
    - ProductStatusDisabled
    - ProductStatusDraft
  ncobase_payment_structs.ProviderConfig:
    additionalProperties: {}
    type: object
  ncobase_payment_structs.RefundOrderInput:
    properties:
      amount:
        minimum: 0
        type: number
      reason:
        type: string
    type: object
  ncobase_payment_structs.Subscription:
    properties:
      cancel_at:
        type: string
      cancelled_at:
        type: string
      channel_id:
        type: string
      created_at:
        type: integer
      current_period_end:
        type: string
      current_period_start:
        type: string
      id:
        type: string
      metadata:
        additionalProperties: {}
        type: object
      product_id:
        type: string
      provider_ref:
        type: string
      status:
        $ref: '#/definitions/ncobase_payment_structs.SubscriptionStatus'
      tenant_id:
        type: string
      trial_end:
        type: string
      trial_start:
        type: string
      updated_at:
        type: integer
      user_id:
        type: string
    type: object
  ncobase_payment_structs.SubscriptionStatus:
    enum:
    - active
    - trialing
    - cancelled
    - expired
    - past_due
    type: string
    x-enum-varnames:
    - SubscriptionStatusActive
    - SubscriptionStatusTrialing
    - SubscriptionStatusCancelled
    - SubscriptionStatusExpired
    - SubscriptionStatusPastDue
  ncobase_payment_structs.UpdateChannelInput:
    properties:
      config:
        $ref: '#/definitions/ncobase_payment_structs.ProviderConfig'
      id:
        type: string
      is_default:
        type: boolean
      metadata:
        additionalProperties: {}
        type: object
      name:
        type: string
      provider:
        $ref: '#/definitions/ncobase_payment_structs.PaymentProvider'
      status:
        $ref: '#/definitions/ncobase_payment_structs.ChannelStatus'
      supported_types:
        items:
          $ref: '#/definitions/ncobase_payment_structs.PaymentType'
        type: array
      tenant_id:
        type: string
    type: object
  ncobase_payment_structs.UpdateProductInput:
    properties:
      billing_interval:
        $ref: '#/definitions/ncobase_payment_structs.BillingInterval'
      description:
        type: string
      features:
        items:
          type: string
        type: array
      id:
        type: string
      metadata:
        additionalProperties: {}
        type: object
      name:
        type: string
      price:
        type: number
      status:
        $ref: '#/definitions/ncobase_payment_structs.ProductStatus'
      trial_days:
        type: integer
    type: object
  ncobase_proxy_structs.CreateEndpointBody:
    properties:
      auth_config:
        type: string
      auth_type:
        enum:
        - None
        - Basic
        - Bearer
        - OAuth
        - ApiKey
        type: string
      base_url:
        type: string
      created_by:
        type: string
      description:
        type: string
      disabled:
        type: boolean
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      log_requests:
        type: boolean
      log_responses:
        type: boolean
      name:
        type: string
      protocol:
        enum:
        - HTTP
        - HTTPS
        - WS
        - WSS
        - TCP
        - UDP
        type: string
      retry_count:
        type: integer
      timeout:
        type: integer
      updated_by:
        type: string
      use_circuit_breaker:
        type: boolean
      validate_ssl:
        type: boolean
    required:
    - base_url
    - name
    type: object
  ncobase_proxy_structs.CreateRouteBody:
    properties:
      cache_enabled:
        type: boolean
      cache_ttl:
        type: integer
      created_by:
        type: string
      description:
        type: string
      disabled:
        type: boolean
      endpoint_id:
        type: string
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      input_transformer_id:
        type: string
      method:
        type: string
      name:
        type: string
      output_transformer_id:
        type: string
      path_pattern:
        type: string
      rate_limit:
        type: string
      strip_auth_header:
        type: boolean
      target_path:
        type: string
      updated_by:
        type: string
    required:
    - endpoint_id
    - method
    - name
    - path_pattern
    - target_path
    type: object
  ncobase_proxy_structs.CreateTransformerBody:
    properties:
      content:
        type: string
      content_type:
        type: string
      created_by:
        type: string
      description:
        type: string
      disabled:
        type: boolean
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      name:
        type: string
      type:
        enum:
        - template
        - script
        - mapping
        type: string
      updated_by:
        type: string
    required:
    - content
    - content_type
    - name
    - type
    type: object
  ncobase_proxy_structs.ReadEndpoint:
    properties:
      auth_config:
        type: string
      auth_type:
        type: string
      base_url:
        type: string
      created_at:
        type: integer
      created_by:
        type: string
      description:
        type: string
      disabled:
        type: boolean
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      id:
        type: string
      log_requests:
        type: boolean
      log_responses:
        type: boolean
      name:
        type: string
      protocol:
        type: string
      retry_count:
        type: integer
      timeout:
        type: integer
      updated_at:
        type: integer
      updated_by:
        type: string
      use_circuit_breaker:
        type: boolean
      validate_ssl:
        type: boolean
    type: object
  ncobase_proxy_structs.ReadRoute:
    properties:
      cache_enabled:
        type: boolean
      cache_ttl:
        type: integer
      created_at:
        type: integer
      created_by:
        type: string
      description:
        type: string
      disabled:
        type: boolean
      endpoint_id:
        type: string
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      id:
        type: string
      input_transformer_id:
        type: string
      method:
        type: string
      name:
        type: string
      output_transformer_id:
        type: string
      path_pattern:
        type: string
      rate_limit:
        type: string
      strip_auth_header:
        type: boolean
      target_path:
        type: string
      updated_at:
        type: integer
      updated_by:
        type: string
    type: object
  ncobase_proxy_structs.ReadTransformer:
    properties:
      content:
        type: string
      content_type:
        type: string
      created_at:
        type: integer
      created_by:
        type: string
      description:
        type: string
      disabled:
        type: boolean
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      id:
        type: string
      name:
        type: string
      type:
        type: string
      updated_at:
        type: integer
      updated_by:
        type: string
    type: object
  ncobase_realtime_structs.ChannelBody:
    properties:
      description:
        type: string
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      name:
        type: string
      status:
        description: '0: disabled, 1: enabled'
        type: integer
      type:
        description: public/private/direct
        type: string
    type: object
  ncobase_realtime_structs.CreateChannel:
    properties:
      channel:
        $ref: '#/definitions/ncobase_realtime_structs.ChannelBody'
    type: object
  ncobase_realtime_structs.CreateEvent:
    properties:
      event:
        $ref: '#/definitions/ncobase_realtime_structs.EventBody'
    type: object
  ncobase_realtime_structs.CreateNotification:
    properties:
      notification:
        $ref: '#/definitions/ncobase_realtime_structs.NotificationBody'
    type: object
  ncobase_realtime_structs.CreateSubscription:
    properties:
      subscription:
        $ref: '#/definitions/ncobase_realtime_structs.SubscriptionBody'
    type: object
  ncobase_realtime_structs.EventBody:
    properties:
      channel_id:
        type: string
      payload:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      type:
        type: string
      user_id:
        type: string
    type: object
  ncobase_realtime_structs.NotificationBody:
    properties:
      channel_id:
        type: string
      content:
        type: string
      links:
        items:
          $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
        type: array
      status:
        type: integer
      title:
        type: string
      type:
        type: string
      user_id:
        type: string
    type: object
  ncobase_realtime_structs.ReadChannel:
    properties:
      created_at:
        type: integer
      description:
        type: string
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      id:
        type: string
      name:
        type: string
      status:
        type: integer
      type:
        type: string
      updated_at:
        type: integer
    type: object
  ncobase_realtime_structs.ReadEvent:
    properties:
      channel_id:
        type: string
      created_at:
        type: integer
      id:
        type: string
      payload:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      type:
        type: string
      user_id:
        type: string
    type: object
  ncobase_realtime_structs.ReadNotification:
    properties:
      channel_id:
        type: string
      content:
        type: string
      created_at:
        type: integer
      id:
        type: string
      links:
        items:
          $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
        type: array
      status:
        type: integer
      title:
        type: string
      type:
        type: string
      updated_at:
        type: integer
      user_id:
        type: string
    type: object
  ncobase_realtime_structs.ReadSubscription:
    properties:
      channel_id:
        type: string
      created_at:
        type: integer
      id:
        type: string
      status:
        type: integer
      updated_at:
        type: integer
      user_id:
        type: string
    type: object
  ncobase_realtime_structs.ReadUser:
    properties:
      created_at:
        type: integer
      email:
        type: string
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      id:
        type: string
      is_admin:
        type: boolean
      is_certified:
        type: boolean
      phone:
        type: string
      status:
        type: integer
      updated_at:
        type: integer
      username:
        type: string
    type: object
  ncobase_realtime_structs.SubscriptionBody:
    properties:
      channel_id:
        type: string
      status:
        description: '0: disabled, 1: enabled'
        type: integer
      user_id:
        type: string
    type: object
  ncobase_realtime_structs.UpdateChannel:
    properties:
      channel:
        $ref: '#/definitions/ncobase_realtime_structs.ChannelBody'
      id:
        type: string
    type: object
  ncobase_realtime_structs.UpdateNotification:
    properties:
      id:
        type: string
      notification:
        $ref: '#/definitions/ncobase_realtime_structs.NotificationBody'
    type: object
  ncobase_resource_structs.AccessLevel:
    enum:
    - public
    - private
    - shared
    type: string
    x-enum-comments:
      AccessLevelPrivate: Only accessible to owner
      AccessLevelPublic: Accessible to anyone
      AccessLevelShared: Shared with specific users/groups
    x-enum-varnames:
    - AccessLevelPublic
    - AccessLevelPrivate
    - AccessLevelShared
  ncobase_resource_structs.BatchUploadResult:
    properties:
      errors:
        items:
          type: string
        type: array
      failed_files:
        items:
          type: string
        type: array
      failure_count:
        type: integer
      files:
        items:
          $ref: '#/definitions/ncobase_resource_structs.ReadFile'
        type: array
      operation_id:
        type: string
      success_count:
        type: integer
      total_files:
        type: integer
    type: object
  ncobase_resource_structs.FileCategory:
    enum:
    - image
    - document
    - video
    - audio
    - archive
    - other
    type: string
    x-enum-varnames:
    - FileCategoryImage
    - FileCategoryDocument
    - FileCategoryVideo
    - FileCategoryAudio
    - FileCategoryArchive
    - FileCategoryOther
  ncobase_resource_structs.FileMetadata:
    properties:
      author:
        description: Content author
        type: string
      category:
        allOf:
        - $ref: '#/definitions/ncobase_resource_structs.FileCategory'
        description: File category
      creation_date:
        description: Original file creation date
        type: string
      custom_fields:
        additionalProperties: {}
        description: User-defined metadata
        type: object
      description:
        description: Content description
        type: string
      duration:
        description: For audio/video in seconds
        type: number
      height:
        description: For images
        type: integer
      keywords:
        description: Content keywords
        items:
          type: string
        type: array
      modified_date:
        description: Last modification date
        type: string
      title:
        description: Content title
        type: string
      width:
        description: For images
        type: integer
    type: object
  ncobase_resource_structs.ProcessingOptions:
    properties:
      compress_image:
        type: boolean
      compression_quality:
        description: 1-100
        type: integer
      convert_format:
        description: Target format
        type: string
      create_thumbnail:
        type: boolean
      max_height:
        type: integer
      max_width:
        type: integer
      resize_image:
        type: boolean
    type: object
  ncobase_resource_structs.ReadFile:
    properties:
      access_level:
        $ref: '#/definitions/ncobase_resource_structs.AccessLevel'
      bucket:
        type: string
      created_at:
        type: integer
      created_by:
        type: string
      download_url:
        type: string
      endpoint:
        type: string
      expires_at:
        type: integer
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      folder_path:
        type: string
      id:
        type: string
      is_expired:
        type: boolean
      is_public:
        type: boolean
      metadata:
        $ref: '#/definitions/ncobase_resource_structs.FileMetadata'
      name:
        type: string
      object_id:
        type: string
      path:
        type: string
      size:
        type: integer
      storage:
        type: string
      tags:
        items:
          type: string
        type: array
      tenant_id:
        type: string
      thumbnail_url:
        type: string
      type:
        type: string
      updated_at:
        type: integer
      updated_by:
        type: string
      versions:
        items:
          type: string
        type: array
    type: object
  ncobase_resource_structs.UpdateFileBody:
    properties:
      access_level:
        allOf:
        - $ref: '#/definitions/ncobase_resource_structs.AccessLevel'
        description: Access level
      bucket:
        type: string
      created_by:
        type: string
      endpoint:
        type: string
      expires_at:
        description: Expiration timestamp
        type: integer
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      folder_path:
        description: Virtual folder path
        type: string
      id:
        type: string
      is_public:
        description: Publicly accessible flag
        type: boolean
      metadata:
        allOf:
        - $ref: '#/definitions/ncobase_resource_structs.FileMetadata'
        description: metadata
      name:
        type: string
      object_id:
        type: string
      path:
        type: string
      processing_options:
        allOf:
        - $ref: '#/definitions/ncobase_resource_structs.ProcessingOptions'
        description: Processing options
      size:
        type: integer
      storage:
        type: string
      tags:
        description: Tags for categorization
        items:
          type: string
        type: array
      tenant_id:
        type: string
      type:
        type: string
      updated_by:
        type: string
      versions:
        description: Previous versions IDs
        items:
          type: string
        type: array
    type: object
  ncobase_space_structs.AddMemberRequest:
    properties:
      role:
        $ref: '#/definitions/ncobase_space_structs.UserRole'
      user_id:
        type: string
    required:
    - role
    - user_id
    type: object
  ncobase_space_structs.GroupBody:
    properties:
      created_by:
        type: string
      description:
        type: string
      disabled:
        type: boolean
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      leader:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      name:
        type: string
      parent_id:
        type: string
      slug:
        type: string
      updated_by:
        type: string
    type: object
  ncobase_space_structs.GroupMember:
    properties:
      added_at:
        type: integer
      avatar:
        type: string
      email:
        type: string
      id:
        type: string
      last_login:
        type: integer
      name:
        type: string
      role:
        $ref: '#/definitions/ncobase_space_structs.UserRole'
      user_id:
        type: string
    type: object
  ncobase_space_structs.ReadGroup:
    properties:
      children:
        items: {}
        type: array
      created_at:
        type: integer
      created_by:
        type: string
      description:
        type: string
      disabled:
        type: boolean
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      id:
        type: string
      leader:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      name:
        type: string
      parent_id:
        type: string
      slug:
        type: string
      updated_at:
        type: integer
      updated_by:
        type: string
    type: object
  ncobase_space_structs.UpdateGroupBody:
    properties:
      created_by:
        type: string
      description:
        type: string
      disabled:
        type: boolean
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      id:
        type: string
      leader:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      name:
        type: string
      parent_id:
        type: string
      slug:
        type: string
      updated_by:
        type: string
    type: object
  ncobase_space_structs.UpdateMemberRequest:
    properties:
      role:
        $ref: '#/definitions/ncobase_space_structs.UserRole'
    required:
    - role
    type: object
  ncobase_space_structs.UserRole:
    enum:
    - owner
    - admin
    - editor
    - viewer
    - member
    type: string
    x-enum-varnames:
    - RoleOwner
    - RoleAdmin
    - RoleEditor
    - RoleViewer
    - RoleMember
  ncobase_system_structs.DictionaryBody:
    properties:
      created_by:
        type: string
      description:
        type: string
      name:
        type: string
      slug:
        type: string
      type:
        type: string
      updated_by:
        type: string
      value:
        type: string
    type: object
  ncobase_system_structs.MenuBody:
    properties:
      created_by:
        type: string
      disabled:
        type: boolean
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      hidden:
        type: boolean
      icon:
        type: string
      label:
        type: string
      name:
        type: string
      order:
        type: integer
      parent_id:
        type: string
      path:
        type: string
      perms:
        type: string
      slug:
        type: string
      target:
        type: string
      type:
        type: string
      updated_by:
        type: string
    type: object
  ncobase_system_structs.NavigationMenus:
    properties:
      accounts:
        items:
          $ref: '#/definitions/ncobase_system_structs.ReadMenu'
        type: array
      headers:
        items:
          $ref: '#/definitions/ncobase_system_structs.ReadMenu'
        type: array
      sidebars:
        items:
          $ref: '#/definitions/ncobase_system_structs.ReadMenu'
        type: array
      tenants:
        items:
          $ref: '#/definitions/ncobase_system_structs.ReadMenu'
        type: array
    type: object
  ncobase_system_structs.OptionBody:
    properties:
      autoload:
        type: boolean
      created_by:
        type: string
      name:
        type: string
      type:
        type: string
      updated_by:
        type: string
      value:
        type: string
    type: object
  ncobase_system_structs.ReadDictionary:
    properties:
      created_at:
        type: integer
      created_by:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
      slug:
        type: string
      type:
        type: string
      updated_at:
        type: integer
      updated_by:
        type: string
      value:
        type: string
    type: object
  ncobase_system_structs.ReadMenu:
    properties:
      children:
        items: {}
        type: array
      created_at:
        type: integer
      created_by:
        type: string
      disabled:
        type: boolean
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      hidden:
        type: boolean
      icon:
        type: string
      id:
        type: string
      label:
        type: string
      name:
        type: string
      order:
        type: integer
      parent_id:
        type: string
      path:
        type: string
      perms:
        type: string
      slug:
        type: string
      target:
        type: string
      type:
        type: string
      updated_at:
        type: integer
      updated_by:
        type: string
    type: object
  ncobase_system_structs.ReadOption:
    properties:
      autoload:
        type: boolean
      created_at:
        type: integer
      created_by:
        type: string
      id:
        type: string
      name:
        type: string
      type:
        type: string
      updated_at:
        type: integer
      updated_by:
        type: string
      value:
        type: string
    type: object
  ncobase_system_structs.UpdateDictionaryBody:
    properties:
      created_by:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
      slug:
        type: string
      type:
        type: string
      updated_by:
        type: string
      value:
        type: string
    type: object
  ncobase_system_structs.UpdateMenuBody:
    properties:
      created_by:
        type: string
      disabled:
        type: boolean
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      hidden:
        type: boolean
      icon:
        type: string
      id:
        type: string
      label:
        type: string
      name:
        type: string
      order:
        type: integer
      parent_id:
        type: string
      path:
        type: string
      perms:
        type: string
      slug:
        type: string
      target:
        type: string
      type:
        type: string
      updated_by:
        type: string
    type: object
  ncobase_system_structs.UpdateOptionBody:
    properties:
      autoload:
        type: boolean
      created_by:
        type: string
      id:
        type: string
      name:
        type: string
      type:
        type: string
      updated_by:
        type: string
      value:
        type: string
    type: object
  ncobase_tenant_structs.AddDictionaryToTenantRequest:
    properties:
      dictionary_id:
        type: string
    required:
    - dictionary_id
    type: object
  ncobase_tenant_structs.AddMenuToTenantRequest:
    properties:
      menu_id:
        type: string
    required:
    - menu_id
    type: object
  ncobase_tenant_structs.AddOptionsToTenantRequest:
    properties:
      option_id:
        type: string
    required:
    - option_id
    type: object
  ncobase_tenant_structs.AddTenantGroupRequest:
    properties:
      group_id:
        type: string
    required:
    - group_id
    type: object
  ncobase_tenant_structs.AddUserToTenantRoleRequest:
    properties:
      role_id:
        type: string
      user_id:
        type: string
    required:
    - role_id
    - user_id
    type: object
  ncobase_tenant_structs.BillingPeriod:
    enum:
    - monthly
    - yearly
    - one_time
    - usage_based
    type: string
    x-enum-varnames:
    - PeriodMonthly
    - PeriodYearly
    - PeriodOneTime
    - PeriodUsage
  ncobase_tenant_structs.BillingStatus:
    enum:
    - pending
    - paid
    - overdue
    - cancelled
    - refunded
    type: string
    x-enum-varnames:
    - StatusPending
    - StatusPaid
    - StatusOverdue
    - StatusCancelled
    - StatusRefunded
  ncobase_tenant_structs.BillingSummary:
    properties:
      currency:
        type: string
      overdue_amount:
        type: number
      overdue_invoices:
        type: integer
      paid_amount:
        type: number
      paid_invoices:
        type: integer
      pending_amount:
        type: number
      tenant_id:
        type: string
      total_amount:
        type: number
      total_invoices:
        type: integer
    type: object
  ncobase_tenant_structs.BulkUpdateError:
    properties:
      error:
        type: string
      role_id:
        type: string
      user_id:
        type: string
    type: object
  ncobase_tenant_structs.BulkUpdateResponse:
    properties:
      errors:
        items:
          $ref: '#/definitions/ncobase_tenant_structs.BulkUpdateError'
        type: array
      failed:
        type: integer
      results:
        items:
          $ref: '#/definitions/ncobase_tenant_structs.UserTenantRoleResponse'
        type: array
      success:
        type: integer
      total:
        type: integer
    type: object
  ncobase_tenant_structs.BulkUpdateSettingsRequest:
    properties:
      settings:
        additionalProperties:
          type: string
        type: object
      tenant_id:
        type: string
    required:
    - settings
    - tenant_id
    type: object
  ncobase_tenant_structs.BulkUpdateUserTenantRolesRequest:
    properties:
      updates:
        items:
          $ref: '#/definitions/ncobase_tenant_structs.UserTenantRoleUpdate'
        type: array
    required:
    - updates
    type: object
  ncobase_tenant_structs.CreateTenantBillingBody:
    properties:
      amount:
        type: number
      billing_period:
        $ref: '#/definitions/ncobase_tenant_structs.BillingPeriod'
      created_by:
        type: string
      currency:
        type: string
      description:
        type: string
      due_date:
        type: integer
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      invoice_number:
        type: string
      paid_at:
        type: integer
      payment_method:
        type: string
      period_end:
        type: integer
      period_start:
        type: integer
      status:
        $ref: '#/definitions/ncobase_tenant_structs.BillingStatus'
      tenant_id:
        type: string
      updated_by:
        type: string
      usage_details:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
    type: object
  ncobase_tenant_structs.CreateTenantBody:
    properties:
      copyright:
        type: string
      created_by:
        type: string
      description:
        type: string
      disabled:
        type: boolean
      expired_at:
        type: integer
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      keywords:
        type: string
      logo:
        type: string
      logo_alt:
        type: string
      name:
        type: string
      order:
        type: integer
      slug:
        type: string
      title:
        type: string
      type:
        type: string
      updated_by:
        type: string
      url:
        type: string
    type: object
  ncobase_tenant_structs.CreateTenantQuotaBody:
    properties:
      created_by:
        type: string
      current_used:
        type: integer
      description:
        type: string
      enabled:
        type: boolean
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      max_value:
        type: integer
      quota_name:
        type: string
      quota_type:
        $ref: '#/definitions/ncobase_tenant_structs.QuotaType'
      tenant_id:
        type: string
      unit:
        $ref: '#/definitions/ncobase_tenant_structs.QuotaUnit'
      updated_by:
        type: string
    type: object
  ncobase_tenant_structs.CreateTenantSettingBody:
    properties:
      category:
        type: string
      created_by:
        type: string
      default_value:
        type: string
      description:
        type: string
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      is_public:
        type: boolean
      is_readonly:
        type: boolean
      is_required:
        type: boolean
      scope:
        $ref: '#/definitions/ncobase_tenant_structs.SettingScope'
      setting_key:
        type: string
      setting_name:
        type: string
      setting_type:
        $ref: '#/definitions/ncobase_tenant_structs.SettingType'
      setting_value:
        type: string
      tenant_id:
        type: string
      updated_by:
        type: string
      validation:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
    type: object
  ncobase_tenant_structs.PaymentRequest:
    properties:
      amount:
        type: number
      billing_id:
        type: string
      payment_method:
        type: string
      transaction_id:
        type: string
    required:
    - amount
    - billing_id
    - payment_method
    type: object
  ncobase_tenant_structs.QuotaType:
    enum:
    - users
    - storage
    - api_calls
    - projects
    - custom
    type: string
    x-enum-varnames:
    - QuotaTypeUser
    - QuotaTypeStorage
    - QuotaTypeAPI
    - QuotaTypeProject
    - QuotaTypeCustom
  ncobase_tenant_structs.QuotaUnit:
    enum:
    - count
    - bytes
    - mb
    - gb
    - tb
    type: string
    x-enum-varnames:
    - UnitCount
    - UnitBytes
    - UnitMB
    - UnitGB
    - UnitTB
  ncobase_tenant_structs.QuotaUsageRequest:
    properties:
      delta:
        type: integer
      quota_type:
        $ref: '#/definitions/ncobase_tenant_structs.QuotaType'
      tenant_id:
        type: string
    required:
    - delta
    - quota_type
    - tenant_id
    type: object
  ncobase_tenant_structs.ReadGroup:
    properties:
      children:
        items: {}
        type: array
      created_at:
        type: integer
      created_by:
        type: string
      description:
        type: string
      disabled:
        type: boolean
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      id:
        type: string
      leader:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      name:
        type: string
      parent_id:
        type: string
      slug:
        type: string
      updated_at:
        type: integer
      updated_by:
        type: string
    type: object
  ncobase_tenant_structs.ReadTenant:
    properties:
      copyright:
        type: string
      created_at:
        type: integer
      created_by:
        type: string
      description:
        type: string
      disabled:
        type: boolean
      expired_at:
        type: integer
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      id:
        type: string
      keywords:
        type: string
      logo:
        type: string
      logo_alt:
        type: string
      name:
        type: string
      order:
        type: integer
      slug:
        type: string
      title:
        type: string
      type:
        type: string
      updated_at:
        type: integer
      updated_by:
        type: string
      url:
        type: string
    type: object
  ncobase_tenant_structs.ReadTenantBilling:
    properties:
      amount:
        type: number
      billing_period:
        $ref: '#/definitions/ncobase_tenant_structs.BillingPeriod'
      created_at:
        type: integer
      created_by:
        type: string
      currency:
        type: string
      days_overdue:
        type: integer
      description:
        type: string
      due_date:
        type: integer
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      id:
        type: string
      invoice_number:
        type: string
      is_overdue:
        type: boolean
      paid_at:
        type: integer
      payment_method:
        type: string
      period_end:
        type: integer
      period_start:
        type: integer
      status:
        $ref: '#/definitions/ncobase_tenant_structs.BillingStatus'
      tenant_id:
        type: string
      updated_at:
        type: integer
      updated_by:
        type: string
      usage_details:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
    type: object
  ncobase_tenant_structs.ReadTenantQuota:
    properties:
      created_at:
        type: integer
      created_by:
        type: string
      current_used:
        type: integer
      description:
        type: string
      enabled:
        type: boolean
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      id:
        type: string
      is_exceeded:
        type: boolean
      max_value:
        type: integer
      quota_name:
        type: string
      quota_type:
        $ref: '#/definitions/ncobase_tenant_structs.QuotaType'
      tenant_id:
        type: string
      unit:
        $ref: '#/definitions/ncobase_tenant_structs.QuotaUnit'
      updated_at:
        type: integer
      updated_by:
        type: string
      utilization_percent:
        type: number
    type: object
  ncobase_tenant_structs.ReadTenantSetting:
    properties:
      category:
        type: string
      created_at:
        type: integer
      created_by:
        type: string
      default_value:
        type: string
      description:
        type: string
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      id:
        type: string
      is_public:
        type: boolean
      is_readonly:
        type: boolean
      is_required:
        type: boolean
      scope:
        $ref: '#/definitions/ncobase_tenant_structs.SettingScope'
      setting_key:
        type: string
      setting_name:
        type: string
      setting_type:
        $ref: '#/definitions/ncobase_tenant_structs.SettingType'
      setting_value:
        type: string
      tenant_id:
        type: string
      updated_at:
        type: integer
      updated_by:
        type: string
      validation:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
    type: object
  ncobase_tenant_structs.SettingScope:
    enum:
    - system
    - tenant
    - user
    - feature
    type: string
    x-enum-varnames:
    - ScopeSystem
    - ScopeTenant
    - ScopeUser
    - ScopeFeature
  ncobase_tenant_structs.SettingType:
    enum:
    - string
    - number
    - boolean
    - json
    - array
    type: string
    x-enum-varnames:
    - TypeString
    - TypeNumber
    - TypeBoolean
    - TypeJSON
    - TypeArray
  ncobase_tenant_structs.TenantDictionary:
    properties:
      dictionary_id:
        type: string
      tenant_id:
        type: string
    type: object
  ncobase_tenant_structs.TenantGroupRelation:
    properties:
      added_at:
        type: integer
      group_id:
        type: string
      id:
        type: string
      tenant_id:
        type: string
    type: object
  ncobase_tenant_structs.TenantMenu:
    properties:
      menu_id:
        type: string
      tenant_id:
        type: string
    type: object
  ncobase_tenant_structs.TenantOption:
    properties:
      option_id:
        type: string
      tenant_id:
        type: string
    type: object
  ncobase_tenant_structs.TenantRoleUsersResponse:
    properties:
      count:
        type: integer
      role_id:
        type: string
      tenant_id:
        type: string
      user_ids:
        items:
          type: string
        type: array
    type: object
  ncobase_tenant_structs.TenantUserInfo:
    properties:
      email:
        type: string
      joined_at:
        type: integer
      role_ids:
        items:
          type: string
        type: array
      user_id:
        type: string
      username:
        type: string
    type: object
  ncobase_tenant_structs.TenantUsersListResponse:
    properties:
      cursor:
        type: string
      total:
        type: integer
      users:
        items:
          $ref: '#/definitions/ncobase_tenant_structs.TenantUserInfo'
        type: array
    type: object
  ncobase_tenant_structs.UpdateTenantBody:
    properties:
      copyright:
        type: string
      created_by:
        type: string
      description:
        type: string
      disabled:
        type: boolean
      expired_at:
        type: integer
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      id:
        type: string
      keywords:
        type: string
      logo:
        type: string
      logo_alt:
        type: string
      name:
        type: string
      order:
        type: integer
      slug:
        type: string
      title:
        type: string
      type:
        type: string
      updated_by:
        type: string
      url:
        type: string
    type: object
  ncobase_tenant_structs.UpdateUserTenantRoleRequest:
    properties:
      new_role_id:
        type: string
      old_role_id:
        type: string
    required:
    - new_role_id
    - old_role_id
    type: object
  ncobase_tenant_structs.UserTenantRoleResponse:
    properties:
      role_id:
        type: string
      status:
        type: string
      tenant_id:
        type: string
      user_id:
        type: string
    type: object
  ncobase_tenant_structs.UserTenantRoleUpdate:
    properties:
      old_role_id:
        description: Required for "update" operation
        type: string
      operation:
        description: '"add", "remove", "update"'
        type: string
      role_id:
        type: string
      user_id:
        type: string
    required:
    - operation
    - role_id
    - user_id
    type: object
  ncobase_tenant_structs.UserTenantRolesResponse:
    properties:
      count:
        type: integer
      role_ids:
        items:
          type: string
        type: array
      tenant_id:
        type: string
      user_id:
        type: string
    type: object
  ncobase_user_structs.ApiKey:
    properties:
      created_at:
        type: integer
      id:
        type: string
      key:
        type: string
      last_used:
        type: integer
      name:
        type: string
      user_id:
        type: string
    type: object
  ncobase_user_structs.CreateApiKeyRequest:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  ncobase_user_structs.CreateEmployeeBody:
    properties:
      certifications:
        items:
          type: string
        type: array
      contact_info:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      department:
        type: string
      employee_id:
        type: string
      employment_type:
        type: string
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      hire_date:
        type: string
      manager_id:
        type: string
      position:
        type: string
      salary:
        type: number
      skills:
        items:
          type: string
        type: array
      status:
        type: string
      tenant_id:
        type: string
      termination_date:
        type: string
      user_id:
        type: string
      work_location:
        type: string
    type: object
  ncobase_user_structs.PasswordResetRequest:
    properties:
      email:
        type: string
      username:
        type: string
    required:
    - email
    - username
    type: object
  ncobase_user_structs.ReadEmployee:
    properties:
      certifications:
        items:
          type: string
        type: array
      contact_info:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      created_at:
        type: integer
      department:
        type: string
      employee_id:
        type: string
      employment_type:
        type: string
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      hire_date:
        type: string
      manager_id:
        type: string
      position:
        type: string
      salary:
        type: number
      skills:
        items:
          type: string
        type: array
      status:
        type: string
      tenant_id:
        type: string
      termination_date:
        type: string
      updated_at:
        type: integer
      user_id:
        type: string
      work_location:
        type: string
    type: object
  ncobase_user_structs.ReadUser:
    properties:
      created_at:
        type: integer
      email:
        type: string
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      id:
        type: string
      is_admin:
        type: boolean
      is_certified:
        type: boolean
      phone:
        type: string
      status:
        type: integer
      updated_at:
        type: integer
      username:
        type: string
    type: object
  ncobase_user_structs.ReadUserProfile:
    properties:
      about:
        type: string
      display_name:
        type: string
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      first_name:
        type: string
      last_name:
        type: string
      links:
        items:
          $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
        type: array
      short_bio:
        type: string
      thumbnail:
        type: string
      title:
        type: string
      user_id:
        type: string
    type: object
  ncobase_user_structs.UpdateEmployeeBody:
    properties:
      certifications:
        items:
          type: string
        type: array
      contact_info:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      department:
        type: string
      employee_id:
        type: string
      employment_type:
        type: string
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      hire_date:
        type: string
      manager_id:
        type: string
      position:
        type: string
      salary:
        type: number
      skills:
        items:
          type: string
        type: array
      status:
        type: string
      tenant_id:
        type: string
      termination_date:
        type: string
      user_id:
        type: string
      work_location:
        type: string
    type: object
  ncobase_user_structs.UserBody:
    properties:
      created_at:
        type: integer
      email:
        type: string
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      id:
        type: string
      is_admin:
        type: boolean
      is_certified:
        type: boolean
      phone:
        type: string
      status:
        type: integer
      updated_at:
        type: integer
      username:
        type: string
    type: object
  ncobase_user_structs.UserMeshes:
    properties:
      api_keys:
        items:
          $ref: '#/definitions/ncobase_user_structs.ApiKey'
        type: array
      employee:
        $ref: '#/definitions/ncobase_user_structs.ReadEmployee'
      profile:
        $ref: '#/definitions/ncobase_user_structs.ReadUserProfile'
      user:
        $ref: '#/definitions/ncobase_user_structs.ReadUser'
    type: object
  ncobase_user_structs.UserPassword:
    properties:
      confirm:
        type: string
      new_password:
        type: string
      old_password:
        type: string
      user:
        type: string
    required:
    - confirm
    - new_password
    - user
    type: object
  ncobase_user_structs.UserProfileBody:
    properties:
      about:
        type: string
      display_name:
        type: string
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      first_name:
        type: string
      last_name:
        type: string
      links:
        items:
          $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
        type: array
      short_bio:
        type: string
      thumbnail:
        type: string
      title:
        type: string
      user_id:
        type: string
    type: object
  ncobase_workflow_structs.ActionType:
    enum:
    - submit
    - save
    - revoke
    - reassign
    - addSign
    - remind
    - approve
    - reject
    - delegate
    - transfer
    - withdraw
    - terminate
    - suspend
    - resume
    - urge
    type: string
    x-enum-comments:
      ActionAddSign: Add countersign
      ActionApprove: Approve
      ActionDelegate: Delegate
      ActionReassign: Reassign task
      ActionReject: Reject
      ActionRemind: Send reminder
      ActionResume: Resume
      ActionRevoke: Revoke approval
      ActionSave: Save draft
      ActionSubmit: Submit form
      ActionSuspend: Suspend
      ActionTerminate: Terminate
      ActionTransfer: Transfer
      ActionUrge: Urge
      ActionWithdraw: Withdraw
    x-enum-varnames:
    - ActionSubmit
    - ActionSave
    - ActionRevoke
    - ActionReassign
    - ActionAddSign
    - ActionRemind
    - ActionApprove
    - ActionReject
    - ActionDelegate
    - ActionTransfer
    - ActionWithdraw
    - ActionTerminate
    - ActionSuspend
    - ActionResume
    - ActionUrge
  ncobase_workflow_structs.CompleteTaskRequest:
    properties:
      action:
        $ref: '#/definitions/ncobase_workflow_structs.ActionType'
      attachments:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      comment:
        type: string
      form_data:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      operator:
        type: string
      task_id:
        type: string
      variables:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
    required:
    - action
    - operator
    - task_id
    type: object
  ncobase_workflow_structs.CompleteTaskResponse:
    properties:
      action:
        $ref: '#/definitions/ncobase_workflow_structs.ActionType'
      end_time:
        type: integer
      next_nodes:
        items:
          type: string
        type: array
      process_id:
        type: string
      task_id:
        type: string
    type: object
  ncobase_workflow_structs.DelegateTaskRequest:
    properties:
      comment:
        type: string
      delegate:
        type: string
      delegator:
        type: string
      reason:
        type: string
      task_id:
        type: string
    required:
    - delegate
    - delegator
    - task_id
    type: object
  ncobase_workflow_structs.DelegationBody:
    properties:
      conditions:
        items:
          type: string
        type: array
      delegatee_id:
        type: string
      delegator_id:
        type: string
      end_time:
        type: integer
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      is_enabled:
        type: boolean
      node_type:
        type: string
      start_time:
        type: integer
      status:
        type: string
      template_id:
        type: string
      tenant_id:
        type: string
    type: object
  ncobase_workflow_structs.HistoryBody:
    properties:
      action:
        type: string
      comment:
        type: string
      details:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      form_data:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      node_config:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      node_id:
        type: string
      node_name:
        type: string
      node_type:
        type: string
      operator:
        type: string
      operator_dept:
        type: string
      process_id:
        type: string
      task_id:
        type: string
      template_id:
        type: string
      tenant_id:
        type: string
      type:
        type: string
      variables:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
    type: object
  ncobase_workflow_structs.NodeBody:
    properties:
      assignees:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      branch_conditions:
        items:
          type: string
        type: array
      branch_nodes:
        items:
          type: string
        type: array
      conditions:
        items:
          type: string
        type: array
      default_branch:
        type: string
      description:
        type: string
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      form_config:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      handlers:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      is_working_day:
        type: boolean
      name:
        type: string
      next_nodes:
        items:
          type: string
        type: array
      node_key:
        type: string
      parallel_nodes:
        items:
          type: string
        type: array
      permissions:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      prev_nodes:
        items:
          type: string
        type: array
      process_id:
        type: string
      properties:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      required:
        type: boolean
      retry_interval:
        type: integer
      retry_times:
        type: integer
      skippable:
        type: boolean
      status:
        type: string
      template_id:
        type: string
      tenant_id:
        type: string
      timeout_config:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      timeout_duration:
        type: integer
      type:
        type: string
      variables:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
    type: object
  ncobase_workflow_structs.PriorityStrategy:
    enum:
    - 0
    - 5
    - 10
    - 15
    type: integer
    x-enum-varnames:
    - PriorityLow
    - PriorityNormal
    - PriorityHigh
    - PriorityUrgent
  ncobase_workflow_structs.ProcessBody:
    properties:
      active_nodes:
        items:
          type: string
        type: array
      allow_cancel:
        type: boolean
      allow_urge:
        type: boolean
      business_key:
        type: string
      callbacks:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      category:
        type: string
      current_node:
        type: string
      due_date:
        type: integer
      duration:
        type: integer
      end_node_id:
        type: string
      end_time:
        type: integer
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      flow_status:
        type: string
      form_code:
        type: string
      initiator:
        type: string
      initiator_dept:
        type: string
      is_suspended:
        type: boolean
      max_duration:
        type: integer
      module_code:
        type: string
      parent_id:
        type: string
      priority:
        type: integer
      process_code:
        type: string
      process_key:
        type: string
      retryable:
        type: boolean
      start_node_id:
        type: string
      start_time:
        type: integer
      status:
        type: string
      suspend_reason:
        type: string
      template_id:
        type: string
      tenant_id:
        type: string
      title:
        type: string
      urge_count:
        type: integer
      variables:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
    type: object
  ncobase_workflow_structs.ProcessDesignBody:
    properties:
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      graph_data:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      is_draft:
        type: boolean
      node_layouts:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      properties:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      source_version:
        type: string
      template_id:
        type: string
      tenant_id:
        type: string
      validation_rules:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      version:
        type: string
    type: object
  ncobase_workflow_structs.ReadDelegation:
    properties:
      conditions:
        items:
          type: string
        type: array
      created_at:
        type: integer
      created_by:
        type: string
      delegatee_id:
        type: string
      delegator_id:
        type: string
      end_time:
        type: integer
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      id:
        type: string
      is_enabled:
        type: boolean
      node_type:
        type: string
      start_time:
        type: integer
      status:
        type: string
      template_id:
        type: string
      tenant_id:
        type: string
      updated_at:
        type: integer
      updated_by:
        type: string
    type: object
  ncobase_workflow_structs.ReadHistory:
    properties:
      action:
        type: string
      comment:
        type: string
      created_at:
        type: integer
      created_by:
        type: string
      details:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      form_data:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      id:
        type: string
      node_config:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      node_id:
        type: string
      node_name:
        type: string
      node_type:
        type: string
      operator:
        type: string
      operator_dept:
        type: string
      process_id:
        type: string
      task_id:
        type: string
      template_id:
        type: string
      tenant_id:
        type: string
      type:
        type: string
      updated_at:
        type: integer
      updated_by:
        type: string
      variables:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
    type: object
  ncobase_workflow_structs.ReadNode:
    properties:
      assignees:
        items:
          type: string
        type: array
      branch_conditions:
        items:
          type: string
        type: array
      branch_nodes:
        items:
          type: string
        type: array
      conditions:
        items:
          type: string
        type: array
      created_at:
        type: integer
      created_by:
        type: string
      default_branch:
        type: string
      description:
        type: string
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      form_config:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      handlers:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      id:
        type: string
      is_working_day:
        type: boolean
      name:
        type: string
      next_nodes:
        items:
          type: string
        type: array
      node_key:
        type: string
      parallel_nodes:
        items:
          type: string
        type: array
      permissions:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      prev_nodes:
        items:
          type: string
        type: array
      process_id:
        type: string
      properties:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      required:
        type: boolean
      retry_interval:
        type: integer
      retry_times:
        type: integer
      skippable:
        type: boolean
      status:
        type: string
      template_id:
        type: string
      tenant_id:
        type: string
      timeout_config:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      timeout_duration:
        type: integer
      type:
        type: string
      updated_at:
        type: integer
      updated_by:
        type: string
      variables:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
    type: object
  ncobase_workflow_structs.ReadProcess:
    properties:
      active_nodes:
        items:
          type: string
        type: array
      allow_cancel:
        type: boolean
      allow_urge:
        type: boolean
      business_key:
        type: string
      callbacks:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      category:
        type: string
      created_at:
        type: integer
      created_by:
        type: string
      current_node:
        type: string
      due_date:
        type: integer
      duration:
        type: integer
      end_node_id:
        type: string
      end_time:
        type: integer
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      flow_status:
        type: string
      form_code:
        type: string
      id:
        type: string
      initiator:
        type: string
      initiator_dept:
        type: string
      is_suspended:
        type: boolean
      max_duration:
        type: integer
      module_code:
        type: string
      parent_id:
        type: string
      priority:
        type: integer
      process_code:
        type: string
      process_key:
        type: string
      retryable:
        type: boolean
      start_node_id:
        type: string
      start_time:
        type: integer
      status:
        type: string
      suspend_reason:
        type: string
      template_id:
        type: string
      tenant_id:
        type: string
      title:
        type: string
      updated_at:
        type: integer
      updated_by:
        type: string
      urge_count:
        type: integer
      variables:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
    type: object
  ncobase_workflow_structs.ReadProcessDesign:
    properties:
      created_at:
        type: integer
      created_by:
        type: string
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      graph_data:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      id:
        type: string
      is_draft:
        type: boolean
      node_layouts:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      properties:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      source_version:
        type: string
      template_id:
        type: string
      tenant_id:
        type: string
      updated_at:
        type: integer
      updated_by:
        type: string
      validation_rules:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      version:
        type: string
    type: object
  ncobase_workflow_structs.ReadRule:
    properties:
      actions:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      code:
        type: string
      conditions:
        items:
          type: string
        type: array
      created_at:
        type: integer
      created_by:
        type: string
      description:
        type: string
      effective_time:
        type: integer
      expire_time:
        type: integer
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      id:
        type: string
      is_enabled:
        type: boolean
      name:
        type: string
      node_key:
        type: string
      priority:
        type: integer
      rule_key:
        type: string
      status:
        type: string
      template_id:
        type: string
      tenant_id:
        type: string
      type:
        type: string
      updated_at:
        type: integer
      updated_by:
        type: string
    type: object
  ncobase_workflow_structs.ReadTask:
    properties:
      action:
        type: string
      allowed_actions:
        items:
          type: string
        type: array
      assign_strategy:
        type: string
      assignees:
        items:
          type: string
        type: array
      candidates:
        items:
          type: string
        type: array
      category:
        type: string
      claim_time:
        type: integer
      comment:
        type: string
      created_at:
        type: integer
      created_by:
        type: string
      delegated_from:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      description:
        type: string
      due_time:
        type: integer
      duration:
        type: integer
      end_time:
        type: integer
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      form_data:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      id:
        type: string
      is_delegated:
        type: boolean
      is_resubmit:
        type: boolean
      is_timeout:
        type: boolean
      is_transferred:
        type: boolean
      is_urged:
        type: boolean
      name:
        type: string
      node_key:
        type: string
      node_type:
        type: string
      parent_task_id:
        type: string
      priority:
        type: integer
      process_id:
        type: string
      restrictions:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      start_time:
        type: integer
      status:
        type: string
      sub_tasks:
        items:
          type: string
        type: array
      task_key:
        type: string
      tenant_id:
        type: string
      updated_at:
        type: integer
      updated_by:
        type: string
      urge_count:
        type: integer
      variables:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      weight:
        $ref: '#/definitions/ncobase_workflow_structs.PriorityStrategy'
    type: object
  ncobase_workflow_structs.ReadTemplate:
    properties:
      allow_cancel:
        type: boolean
      allow_delegate:
        type: boolean
      allow_transfer:
        type: boolean
      allow_urge:
        type: boolean
      category:
        type: string
      code:
        type: string
      created_at:
        type: integer
      created_by:
        type: string
      default_title:
        type: string
      description:
        type: string
      disabled:
        type: boolean
      effective_time:
        type: integer
      expire_time:
        type: integer
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      form_code:
        type: string
      form_config:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      form_permissions:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      id:
        type: string
      is_auto_start:
        type: boolean
      is_draft_enabled:
        type: boolean
      is_latest:
        type: boolean
      module_code:
        type: string
      name:
        type: string
      node_config:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      node_events:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      node_rules:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      permission_configs:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      process_rules:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      reminder_config:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      role_configs:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      source_version:
        type: string
      status:
        type: string
      strict_mode:
        type: boolean
      template_key:
        type: string
      tenant_id:
        type: string
      timeout_config:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      type:
        type: string
      updated_at:
        type: integer
      updated_by:
        type: string
      version:
        type: string
      visible_range:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
    type: object
  ncobase_workflow_structs.RuleBody:
    properties:
      actions:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      code:
        type: string
      conditions:
        items:
          type: string
        type: array
      description:
        type: string
      effective_time:
        type: integer
      expire_time:
        type: integer
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      is_enabled:
        type: boolean
      name:
        type: string
      node_key:
        type: string
      priority:
        type: integer
      rule_key:
        type: string
      status:
        type: string
      template_id:
        type: string
      tenant_id:
        type: string
      type:
        type: string
    type: object
  ncobase_workflow_structs.StartProcessRequest:
    properties:
      business_key:
        type: string
      form_code:
        type: string
      form_data:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      initiator:
        type: string
      initiator_dept:
        type: string
      module_code:
        type: string
      priority:
        type: integer
      template_id:
        type: string
      tenant_id:
        type: string
      variables:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
    required:
    - business_key
    - initiator
    - template_id
    type: object
  ncobase_workflow_structs.StartProcessResponse:
    properties:
      process_id:
        type: string
      start_time:
        type: integer
      status:
        $ref: '#/definitions/ncobase_workflow_structs.Status'
      variables:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
    type: object
  ncobase_workflow_structs.Status:
    enum:
    - draft
    - ready
    - active
    - pending
    - suspended
    - processing
    - completed
    - compensated
    - rejected
    - cancelled
    - terminated
    - rollbacked
    - withdrawn
    - error
    type: string
    x-enum-comments:
      StatusActive: Active
      StatusCancelled: Cancelled
      StatusCompensated: Compensated
      StatusCompleted: Completed
      StatusDraft: Draft
      StatusError: Error
      StatusPending: Pending
      StatusProcessing: Processing
      StatusReady: Ready
      StatusRejected: Rejected
      StatusRollbacked: Rollbacked
      StatusSuspended: Suspended
      StatusTerminated: Terminated
      StatusWithdrawn: Withdrawn
    x-enum-varnames:
    - StatusDraft
    - StatusReady
    - StatusActive
    - StatusPending
    - StatusSuspended
    - StatusProcessing
    - StatusCompleted
    - StatusCompensated
    - StatusRejected
    - StatusCancelled
    - StatusTerminated
    - StatusRollbacked
    - StatusWithdrawn
    - StatusError
  ncobase_workflow_structs.TaskBody:
    properties:
      action:
        type: string
      allowed_actions:
        items:
          type: string
        type: array
      assign_strategy:
        type: string
      assignees:
        items:
          type: string
        type: array
      candidates:
        items:
          type: string
        type: array
      category:
        type: string
      claim_time:
        type: integer
      comment:
        type: string
      delegated_from:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      description:
        type: string
      due_time:
        type: integer
      duration:
        type: integer
      end_time:
        type: integer
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      form_data:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      is_delegated:
        type: boolean
      is_resubmit:
        type: boolean
      is_timeout:
        type: boolean
      is_transferred:
        type: boolean
      is_urged:
        type: boolean
      name:
        type: string
      node_key:
        type: string
      node_type:
        type: string
      parent_task_id:
        type: string
      priority:
        type: integer
      process_id:
        type: string
      restrictions:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      start_time:
        type: integer
      status:
        type: string
      sub_tasks:
        items:
          type: string
        type: array
      task_key:
        type: string
      tenant_id:
        type: string
      urge_count:
        type: integer
      variables:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      weight:
        $ref: '#/definitions/ncobase_workflow_structs.PriorityStrategy'
    type: object
  ncobase_workflow_structs.TemplateBody:
    properties:
      allow_cancel:
        type: boolean
      allow_delegate:
        type: boolean
      allow_transfer:
        type: boolean
      allow_urge:
        type: boolean
      category:
        type: string
      code:
        type: string
      default_title:
        type: string
      description:
        type: string
      disabled:
        type: boolean
      effective_time:
        type: integer
      expire_time:
        type: integer
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      form_code:
        type: string
      form_config:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      form_permissions:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      is_auto_start:
        type: boolean
      is_draft_enabled:
        type: boolean
      is_latest:
        type: boolean
      module_code:
        type: string
      name:
        type: string
      node_config:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      node_events:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      node_rules:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      permission_configs:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      process_rules:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      reminder_config:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      role_configs:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      source_version:
        type: string
      status:
        type: string
      strict_mode:
        type: boolean
      template_key:
        type: string
      tenant_id:
        type: string
      timeout_config:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      type:
        type: string
      version:
        type: string
      visible_range:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
    type: object
  ncobase_workflow_structs.TerminateProcessRequest:
    properties:
      comment:
        type: string
      operator:
        type: string
      process_id:
        type: string
      reason:
        type: string
    required:
    - operator
    - process_id
    type: object
  ncobase_workflow_structs.TransferTaskRequest:
    properties:
      comment:
        type: string
      reason:
        type: string
      task_id:
        type: string
      transferee:
        type: string
      transferor:
        type: string
    required:
    - task_id
    - transferee
    - transferor
    type: object
  ncobase_workflow_structs.UpdateDelegationBody:
    properties:
      conditions:
        items:
          type: string
        type: array
      delegatee_id:
        type: string
      delegator_id:
        type: string
      end_time:
        type: integer
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      id:
        type: string
      is_enabled:
        type: boolean
      node_type:
        type: string
      start_time:
        type: integer
      status:
        type: string
      template_id:
        type: string
      tenant_id:
        type: string
    type: object
  ncobase_workflow_structs.UpdateNodeBody:
    properties:
      assignees:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      branch_conditions:
        items:
          type: string
        type: array
      branch_nodes:
        items:
          type: string
        type: array
      conditions:
        items:
          type: string
        type: array
      default_branch:
        type: string
      description:
        type: string
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      form_config:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      handlers:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      id:
        type: string
      is_working_day:
        type: boolean
      name:
        type: string
      next_nodes:
        items:
          type: string
        type: array
      node_key:
        type: string
      parallel_nodes:
        items:
          type: string
        type: array
      permissions:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      prev_nodes:
        items:
          type: string
        type: array
      process_id:
        type: string
      properties:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      required:
        type: boolean
      retry_interval:
        type: integer
      retry_times:
        type: integer
      skippable:
        type: boolean
      status:
        type: string
      template_id:
        type: string
      tenant_id:
        type: string
      timeout_config:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      timeout_duration:
        type: integer
      type:
        type: string
      variables:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
    type: object
  ncobase_workflow_structs.UpdateProcessBody:
    properties:
      active_nodes:
        items:
          type: string
        type: array
      allow_cancel:
        type: boolean
      allow_urge:
        type: boolean
      business_key:
        type: string
      callbacks:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      category:
        type: string
      current_node:
        type: string
      due_date:
        type: integer
      duration:
        type: integer
      end_node_id:
        type: string
      end_time:
        type: integer
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      flow_status:
        type: string
      form_code:
        type: string
      id:
        type: string
      initiator:
        type: string
      initiator_dept:
        type: string
      is_suspended:
        type: boolean
      max_duration:
        type: integer
      module_code:
        type: string
      parent_id:
        type: string
      priority:
        type: integer
      process_code:
        type: string
      process_key:
        type: string
      retryable:
        type: boolean
      start_node_id:
        type: string
      start_time:
        type: integer
      status:
        type: string
      suspend_reason:
        type: string
      template_id:
        type: string
      tenant_id:
        type: string
      title:
        type: string
      urge_count:
        type: integer
      variables:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
    type: object
  ncobase_workflow_structs.UpdateProcessDesignBody:
    properties:
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      graph_data:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      id:
        type: string
      is_draft:
        type: boolean
      node_layouts:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      properties:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      source_version:
        type: string
      template_id:
        type: string
      tenant_id:
        type: string
      validation_rules:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      version:
        type: string
    type: object
  ncobase_workflow_structs.UpdateRuleBody:
    properties:
      actions:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      code:
        type: string
      conditions:
        items:
          type: string
        type: array
      description:
        type: string
      effective_time:
        type: integer
      expire_time:
        type: integer
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      id:
        type: string
      is_enabled:
        type: boolean
      name:
        type: string
      node_key:
        type: string
      priority:
        type: integer
      rule_key:
        type: string
      status:
        type: string
      template_id:
        type: string
      tenant_id:
        type: string
      type:
        type: string
    type: object
  ncobase_workflow_structs.UpdateTaskBody:
    properties:
      action:
        type: string
      allowed_actions:
        items:
          type: string
        type: array
      assign_strategy:
        type: string
      assignees:
        items:
          type: string
        type: array
      candidates:
        items:
          type: string
        type: array
      category:
        type: string
      claim_time:
        type: integer
      comment:
        type: string
      delegated_from:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      description:
        type: string
      due_time:
        type: integer
      duration:
        type: integer
      end_time:
        type: integer
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      form_data:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      id:
        type: string
      is_delegated:
        type: boolean
      is_resubmit:
        type: boolean
      is_timeout:
        type: boolean
      is_transferred:
        type: boolean
      is_urged:
        type: boolean
      name:
        type: string
      node_key:
        type: string
      node_type:
        type: string
      parent_task_id:
        type: string
      priority:
        type: integer
      process_id:
        type: string
      restrictions:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      start_time:
        type: integer
      status:
        type: string
      sub_tasks:
        items:
          type: string
        type: array
      task_key:
        type: string
      tenant_id:
        type: string
      urge_count:
        type: integer
      variables:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      weight:
        $ref: '#/definitions/ncobase_workflow_structs.PriorityStrategy'
    type: object
  ncobase_workflow_structs.UpdateTemplateBody:
    properties:
      allow_cancel:
        type: boolean
      allow_delegate:
        type: boolean
      allow_transfer:
        type: boolean
      allow_urge:
        type: boolean
      category:
        type: string
      code:
        type: string
      default_title:
        type: string
      description:
        type: string
      disabled:
        type: boolean
      effective_time:
        type: integer
      expire_time:
        type: integer
      extras:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      form_code:
        type: string
      form_config:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      form_permissions:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      id:
        type: string
      is_auto_start:
        type: boolean
      is_draft_enabled:
        type: boolean
      is_latest:
        type: boolean
      module_code:
        type: string
      name:
        type: string
      node_config:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      node_events:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      node_rules:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      permission_configs:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      process_rules:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      reminder_config:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      role_configs:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      source_version:
        type: string
      status:
        type: string
      strict_mode:
        type: boolean
      template_key:
        type: string
      tenant_id:
        type: string
      timeout_config:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      type:
        type: string
      version:
        type: string
      visible_range:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
    type: object
  ncobase_workflow_structs.UrgeTaskRequest:
    properties:
      comment:
        type: string
      operator:
        type: string
      task_id:
        type: string
      variables:
        $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
    required:
    - operator
    - task_id
    type: object
  ncobase_workflow_structs.WithdrawTaskRequest:
    properties:
      comment:
        type: string
      operator:
        type: string
      reason:
        type: string
      task_id:
        type: string
    required:
    - operator
    - task_id
    type: object
info:
  contact: {}
  description: Base Development Framework
  title: Ncobase
  version: 0.1.0
paths:
  /account:
    get:
      description: Retrieve information about the current user.
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_auth_structs.AccountMeshes'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Get current user
      tags:
      - auth
  /account/password:
    put:
      consumes:
      - application/json
      description: Update the password of the current user.
      parameters:
      - description: UserPassword object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ncobase_auth_structs.UserPassword'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Update user password
      tags:
      - auth
  /account/tenant:
    get:
      description: Retrieve the tenant associated with the current user.
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_auth_structs.ReadTenant'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Get current user tenant
      tags:
      - auth
  /account/tenants:
    get:
      description: Retrieve the tenant associated with the current user.
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_auth_structs.ReadTenant'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Get current user tenants
      tags:
      - auth
  /authorize/{code}:
    get:
      consumes:
      - application/json
      description: Verify the provided code.
      parameters:
      - description: Verification code
        in: path
        name: code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            additionalProperties:
              allOf:
              - {}
              - properties:
                  access_token:
                    type: string
                  email:
                    type: string
                  id:
                    type: string
                  register_token:
                    type: string
                type: object
            type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      summary: Verify code
      tags:
      - auth
  /authorize/send:
    post:
      consumes:
      - application/json
      description: Send a verification code to the specified destination.
      parameters:
      - description: SendCodeBody object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ncobase_auth_structs.SendCodeBody'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            additionalProperties:
              allOf:
              - {}
              - properties:
                  registered:
                    type: boolean
                type: object
            type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      summary: Send verification code
      tags:
      - auth
  /captcha/{captcha_id}:
    get:
      description: Stream a captcha image.
      parameters:
      - description: Captcha ID With Extension (png, wav)
        in: path
        name: captcha_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: file
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      summary: Stream captcha
      tags:
      - auth
  /captcha/generate:
    get:
      description: Generate a captcha image.
      parameters:
      - description: Captcha type
        enum:
        - png
        - wav
        in: query
        name: type
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            additionalProperties:
              allOf:
              - {}
              - properties:
                  id:
                    type: string
                  url:
                    type: string
                type: object
            type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      summary: Generate captcha
      tags:
      - auth
  /captcha/validate:
    post:
      consumes:
      - application/json
      description: Validate a captcha code.
      parameters:
      - description: Captcha object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ncobase_auth_structs.Captcha'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            additionalProperties:
              allOf:
              - {}
              - properties:
                  message:
                    type: string
                type: object
            type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      summary: Validate captcha
      tags:
      - auth
  /cms/channels:
    get:
      description: Retrieve a list of distribution channels.
      parameters:
      - in: query
        name: cursor
        type: string
      - in: query
        name: direction
        type: string
      - in: query
        name: limit
        type: integer
      - in: query
        name: status
        type: integer
      - in: query
        name: tenant
        type: string
      - in: query
        name: type
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/ncobase_content_structs.ReadChannel'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      summary: List channels
      tags:
      - cms
    post:
      consumes:
      - application/json
      description: Create a new distribution channel.
      parameters:
      - description: CreateChannelBody object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ncobase_content_structs.CreateChannelBody'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_content_structs.ReadChannel'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Create channel
      tags:
      - cms
  /cms/channels/{slug}:
    delete:
      description: Delete an existing distribution channel.
      parameters:
      - description: Channel slug
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Delete channel
      tags:
      - cms
    get:
      description: Retrieve details of a distribution channel.
      parameters:
      - description: Channel slug
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_content_structs.ReadChannel'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      summary: Get channel
      tags:
      - cms
    put:
      consumes:
      - application/json
      description: Update an existing distribution channel.
      parameters:
      - description: Channel slug
        in: path
        name: slug
        required: true
        type: string
      - description: UpdateChannelBody object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ncobase_content_structs.UpdateChannelBody'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_content_structs.ReadChannel'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Update channel
      tags:
      - cms
  /cms/distributions:
    get:
      description: Retrieve a list of content distributions.
      parameters:
      - in: query
        name: channel_id
        type: string
      - in: query
        name: cursor
        type: string
      - in: query
        name: direction
        type: string
      - in: query
        name: limit
        type: integer
      - in: query
        name: status
        type: integer
      - in: query
        name: tenant
        type: string
      - in: query
        name: topic_id
        type: string
      - in: query
        name: with_channel
        type: boolean
      - in: query
        name: with_topic
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/ncobase_content_structs.ReadDistribution'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      summary: List distributions
      tags:
      - cms
    post:
      consumes:
      - application/json
      description: Create a new content distribution.
      parameters:
      - description: CreateDistributionBody object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ncobase_content_structs.CreateDistributionBody'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_content_structs.ReadDistribution'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Create distribution
      tags:
      - cms
  /cms/distributions/{id}:
    delete:
      description: Delete an existing content distribution.
      parameters:
      - description: Distribution ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Delete distribution
      tags:
      - cms
    get:
      description: Retrieve details of a content distribution.
      parameters:
      - description: Distribution ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_content_structs.ReadDistribution'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      summary: Get distribution
      tags:
      - cms
    put:
      consumes:
      - application/json
      description: Update an existing content distribution.
      parameters:
      - description: Distribution ID
        in: path
        name: id
        required: true
        type: string
      - description: UpdateDistributionBody object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ncobase_content_structs.UpdateDistributionBody'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_content_structs.ReadDistribution'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Update distribution
      tags:
      - cms
  /cms/distributions/{id}/cancel:
    post:
      consumes:
      - application/json
      description: Cancel a scheduled content distribution.
      parameters:
      - description: Distribution ID
        in: path
        name: id
        required: true
        type: string
      - description: Reason for cancellation
        in: body
        name: reason
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_content_structs.ReadDistribution'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Cancel distribution
      tags:
      - cms
  /cms/distributions/{id}/publish:
    post:
      description: Publish a content distribution immediately.
      parameters:
      - description: Distribution ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_content_structs.ReadDistribution'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Publish distribution
      tags:
      - cms
  /cms/media:
    get:
      description: Retrieve a list of media resources.
      parameters:
      - in: query
        name: cursor
        type: string
      - in: query
        name: direction
        type: string
      - in: query
        name: limit
        type: integer
      - in: query
        name: search
        type: string
      - in: query
        name: tenant
        type: string
      - in: query
        name: type
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/ncobase_content_structs.ReadMedia'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      summary: List media
      tags:
      - cms
    post:
      consumes:
      - application/json
      description: Create a new media resource.
      parameters:
      - description: CreateMediaBody object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ncobase_content_structs.CreateMediaBody'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_content_structs.ReadMedia'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Create media
      tags:
      - cms
  /cms/media/{id}:
    delete:
      description: Delete an existing media resource.
      parameters:
      - description: Media ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Delete media
      tags:
      - cms
    get:
      description: Retrieve details of a media resource.
      parameters:
      - description: Media ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_content_structs.ReadMedia'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      summary: Get media
      tags:
      - cms
    put:
      consumes:
      - application/json
      description: Update an existing media resource.
      parameters:
      - description: Media ID
        in: path
        name: id
        required: true
        type: string
      - description: UpdateMediaBody object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ncobase_content_structs.UpdateMediaBody'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_content_structs.ReadMedia'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Update media
      tags:
      - cms
  /cms/taxonomies:
    get:
      description: Retrieve a list of taxonomies.
      parameters:
      - in: query
        name: children
        type: boolean
      - in: query
        name: cursor
        type: string
      - in: query
        name: direction
        type: string
      - in: query
        name: limit
        type: integer
      - in: query
        name: parent
        type: string
      - in: query
        name: sort_by
        type: string
      - in: query
        name: tenant
        type: string
      - in: query
        name: type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/ncobase_content_structs.ReadTaxonomy'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      summary: List taxonomies
      tags:
      - cms
    post:
      consumes:
      - application/json
      description: Create a new taxonomy.
      parameters:
      - description: CreateTaxonomyBody object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ncobase_content_structs.CreateTaxonomyBody'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_content_structs.ReadTaxonomy'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Create taxonomy
      tags:
      - cms
  /cms/taxonomies/{slug}:
    delete:
      description: Delete an existing taxonomy.
      parameters:
      - description: Taxonomy slug
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Delete taxonomy
      tags:
      - cms
    get:
      description: Retrieve details of a taxonomy.
      parameters:
      - description: Taxonomy slug
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_content_structs.ReadTaxonomy'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      summary: Get taxonomy
      tags:
      - cms
    put:
      consumes:
      - application/json
      description: Update an existing taxonomy.
      parameters:
      - description: Taxonomy slug
        in: path
        name: slug
        required: true
        type: string
      - description: UpdateTaxonomyBody object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ncobase_content_structs.UpdateTaxonomyBody'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_content_structs.ReadTaxonomy'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Update taxonomy
      tags:
      - cms
  /cms/topic-media:
    get:
      description: Retrieve a list of topic media relations.
      parameters:
      - in: query
        name: cursor
        type: string
      - in: query
        name: direction
        type: string
      - in: query
        name: limit
        type: integer
      - in: query
        name: media_id
        type: string
      - in: query
        name: topic_id
        type: string
      - in: query
        name: type
        type: string
      - in: query
        name: with_media
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/ncobase_content_structs.ReadTopicMedia'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      summary: List topic media relations
      tags:
      - cms
    post:
      consumes:
      - application/json
      description: Create a new relation between a topic and a media resource.
      parameters:
      - description: CreateTopicMediaBody object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ncobase_content_structs.CreateTopicMediaBody'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_content_structs.ReadTopicMedia'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Create topic media relation
      tags:
      - cms
  /cms/topic-media/{id}:
    delete:
      description: Delete an existing topic media relation.
      parameters:
      - description: Topic Media ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Delete topic media relation
      tags:
      - cms
    get:
      description: Retrieve details of a topic media relation.
      parameters:
      - description: Topic Media ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_content_structs.ReadTopicMedia'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      summary: Get topic media relation
      tags:
      - cms
    put:
      consumes:
      - application/json
      description: Update an existing relation between a topic and media.
      parameters:
      - description: Topic Media ID
        in: path
        name: id
        required: true
        type: string
      - description: Update parameters
        in: body
        name: body
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_content_structs.ReadTopicMedia'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Update topic media relation
      tags:
      - cms
  /cms/topic-media/by-topic-and-media:
    get:
      description: Retrieve a topic media relation by topic ID and media ID.
      parameters:
      - description: Topic ID
        in: query
        name: topicId
        required: true
        type: string
      - description: Media ID
        in: query
        name: mediaId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_content_structs.ReadTopicMedia'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      summary: Get by topic and media
      tags:
      - cms
  /cms/topic-media/by-topic/{topicId}:
    get:
      description: Retrieve all media relations for a specific topic.
      parameters:
      - description: Topic ID
        in: path
        name: topicId
        required: true
        type: string
      - description: Media Type
        enum:
        - featured
        - gallery
        - attachment
        in: query
        name: type
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/ncobase_content_structs.ReadTopicMedia'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      summary: List by topic
      tags:
      - cms
  /cms/topics:
    get:
      description: Retrieve a list of topics.
      parameters:
      - in: query
        name: cursor
        type: string
      - in: query
        name: direction
        type: string
      - in: query
        name: limit
        type: integer
      - in: query
        name: taxonomy
        type: string
      - in: query
        name: tenant
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/ncobase_content_structs.ReadTopic'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      summary: List topics
      tags:
      - cms
    post:
      consumes:
      - application/json
      description: Create a new topic.
      parameters:
      - description: CreateTopicBody object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ncobase_content_structs.CreateTopicBody'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_content_structs.ReadTopic'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Create topic
      tags:
      - cms
  /cms/topics/{slug}:
    delete:
      description: Delete an existing topic.
      parameters:
      - description: Topic slug
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Delete topic
      tags:
      - cms
    get:
      description: Retrieve details of a topic.
      parameters:
      - description: Topic slug
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_content_structs.ReadTopic'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      summary: Get topic
      tags:
      - cms
    put:
      consumes:
      - application/json
      description: Update an existing topic, either fully or partially.
      parameters:
      - description: Topic slug
        in: path
        name: slug
        required: true
        type: string
      - description: UpdateTopicBody object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ncobase_content_structs.UpdateTopicBody'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_content_structs.ReadTopic'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Update topic
      tags:
      - cms
  /flow/delegations:
    get:
      description: List delegation rules
      parameters:
      - in: query
        name: cursor
        type: string
      - in: query
        name: delegator_id
        type: string
      - in: query
        name: direction
        type: string
      - in: query
        name: is_enabled
        type: boolean
      - in: query
        name: limit
        type: integer
      - in: query
        name: node_type
        type: string
      - in: query
        name: status
        type: string
      - in: query
        name: template_id
        type: string
      - in: query
        name: tenant
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ncobase_workflow_structs.ReadDelegation'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: List delegations
      tags:
      - flow
    post:
      consumes:
      - application/json
      description: Create a new delegation rule
      parameters:
      - description: Delegation creation body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ncobase_workflow_structs.DelegationBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ncobase_workflow_structs.ReadDelegation'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Create delegation
      tags:
      - flow
  /flow/delegations/{id}:
    delete:
      description: Delete a delegation rule
      parameters:
      - description: Delegation ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Delete delegation
      tags:
      - flow
    get:
      description: Get delegation rule details
      parameters:
      - description: Delegation ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ncobase_workflow_structs.ReadDelegation'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Get delegation
      tags:
      - flow
    put:
      consumes:
      - application/json
      description: Update delegation rule details
      parameters:
      - description: Delegation ID
        in: path
        name: id
        required: true
        type: string
      - description: Delegation update body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ncobase_workflow_structs.UpdateDelegationBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ncobase_workflow_structs.ReadDelegation'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Update delegation
      tags:
      - flow
  /flow/delegations/{id}/disable:
    post:
      description: Disable a delegation rule
      parameters:
      - description: Delegation ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Disable delegation
      tags:
      - flow
  /flow/delegations/{id}/enable:
    post:
      description: Enable a delegation rule
      parameters:
      - description: Delegation ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Enable delegation
      tags:
      - flow
  /flow/histories:
    get:
      description: List history records
      parameters:
      - in: query
        name: cursor
        type: string
      - in: query
        name: direction
        type: string
      - in: query
        name: limit
        type: integer
      - in: query
        name: node_id
        type: string
      - in: query
        name: operator
        type: string
      - in: query
        name: process_id
        type: string
      - in: query
        name: sort_by
        type: string
      - in: query
        name: task_id
        type: string
      - in: query
        name: tenant
        type: string
      - in: query
        name: type
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ncobase_workflow_structs.ReadHistory'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: List histories
      tags:
      - flow
    post:
      consumes:
      - application/json
      description: Create a new history record
      parameters:
      - description: History creation body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ncobase_workflow_structs.HistoryBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ncobase_workflow_structs.ReadHistory'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Create history
      tags:
      - flow
  /flow/histories/{id}:
    get:
      description: Get history record details
      parameters:
      - description: History ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ncobase_workflow_structs.ReadHistory'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Get history
      tags:
      - flow
  /flow/nodes:
    get:
      description: List workflow nodes
      parameters:
      - in: query
        name: cursor
        type: string
      - in: query
        name: direction
        type: string
      - in: query
        name: limit
        type: integer
      - in: query
        name: process_id
        type: string
      - in: query
        name: sort_by
        type: string
      - in: query
        name: status
        type: string
      - in: query
        name: tenant
        type: string
      - in: query
        name: type
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ncobase_workflow_structs.ReadNode'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: List nodes
      tags:
      - flow
    post:
      consumes:
      - application/json
      description: Create a new workflow node
      parameters:
      - description: Node creation body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ncobase_workflow_structs.NodeBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ncobase_workflow_structs.ReadNode'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Create node
      tags:
      - flow
  /flow/nodes/{id}:
    delete:
      description: Delete a workflow node
      parameters:
      - description: Node Key
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Delete node
      tags:
      - flow
    get:
      description: Get workflow node details
      parameters:
      - description: Node Key
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ncobase_workflow_structs.ReadNode'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Get node
      tags:
      - flow
    put:
      consumes:
      - application/json
      description: Update workflow node details
      parameters:
      - description: Node ID
        in: path
        name: id
        required: true
        type: string
      - description: Node update body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ncobase_workflow_structs.UpdateNodeBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ncobase_workflow_structs.ReadNode'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Update node
      tags:
      - flow
  /flow/nodes/{id}/rules:
    get:
      description: Get all rules associated with a node
      parameters:
      - description: Node Key
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ncobase_workflow_structs.ReadRule'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Get node rules
      tags:
      - flow
  /flow/nodes/{id}/status:
    put:
      consumes:
      - application/json
      description: Update workflow node status
      parameters:
      - description: Node ID
        in: path
        name: id
        required: true
        type: string
      - description: New Status
        in: query
        name: status
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Update node status
      tags:
      - flow
  /flow/nodes/{id}/tasks:
    get:
      description: Get all tasks associated with a node
      parameters:
      - description: Node Key
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ncobase_workflow_structs.ReadTask'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Get node tasks
      tags:
      - flow
  /flow/nodes/{id}/validate:
    post:
      description: Validate configuration of a workflow node
      parameters:
      - description: Node ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Validate node config
      tags:
      - flow
  /flow/operators/{operator}/histories:
    get:
      description: Get complete history of operations by an operator
      parameters:
      - description: Operator ID
        in: path
        name: operator
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ncobase_workflow_structs.ReadHistory'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Get operator history
      tags:
      - flow
  /flow/process-designs:
    get:
      description: List process designs
      parameters:
      - in: query
        name: cursor
        type: string
      - in: query
        name: direction
        type: string
      - in: query
        name: is_draft
        type: boolean
      - in: query
        name: limit
        type: integer
      - in: query
        name: template_id
        type: string
      - in: query
        name: tenant
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ncobase_workflow_structs.ReadProcessDesign'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: List process designs
      tags:
      - flow
    post:
      consumes:
      - application/json
      description: Create a new process design
      parameters:
      - description: Process design creation body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ncobase_workflow_structs.ProcessDesignBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ncobase_workflow_structs.ReadProcessDesign'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Create process design
      tags:
      - flow
  /flow/process-designs/{id}:
    delete:
      description: Delete a process design
      parameters:
      - description: Process Design ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Delete process design
      tags:
      - flow
    get:
      description: Get process design details
      parameters:
      - description: Process Design ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ncobase_workflow_structs.ReadProcessDesign'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Get process design
      tags:
      - flow
    put:
      consumes:
      - application/json
      description: Update process design details
      parameters:
      - description: Process Design ID
        in: path
        name: id
        required: true
        type: string
      - description: Process design update body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ncobase_workflow_structs.UpdateProcessDesignBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ncobase_workflow_structs.ReadProcessDesign'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Update process design
      tags:
      - flow
  /flow/process-designs/{id}/drafts:
    post:
      consumes:
      - application/json
      description: Save process design as draft
      parameters:
      - description: Process Design ID
        in: path
        name: id
        required: true
        type: string
      - description: Process design data
        in: body
        name: design
        required: true
        schema:
          items:
            type: integer
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Save design draft
      tags:
      - flow
  /flow/process-designs/{id}/export:
    get:
      description: Export process design to file
      parameters:
      - description: Process Design ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/octet-stream
      responses:
        "200":
          description: OK
          schema:
            type: file
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Export design
      tags:
      - flow
  /flow/process-designs/{id}/publish:
    post:
      description: Publish process design draft as official version
      parameters:
      - description: Process Design ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Publish design draft
      tags:
      - flow
  /flow/process-designs/validate:
    post:
      consumes:
      - application/json
      description: Validate process design structure and rules
      parameters:
      - description: Process design data
        in: body
        name: design
        required: true
        schema:
          items:
            type: integer
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Validate design
      tags:
      - flow
  /flow/processes:
    get:
      description: List process instances
      parameters:
      - in: query
        name: cursor
        type: string
      - in: query
        name: direction
        type: string
      - in: query
        name: initiator
        type: string
      - in: query
        name: limit
        type: integer
      - in: query
        name: priority
        type: integer
      - in: query
        name: sort_by
        type: string
      - in: query
        name: status
        type: string
      - in: query
        name: tenant
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ncobase_workflow_structs.ReadProcess'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: List processes
      tags:
      - flow
    post:
      consumes:
      - application/json
      description: Create a new process instance
      parameters:
      - description: Process creation body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ncobase_workflow_structs.ProcessBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ncobase_workflow_structs.ReadProcess'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Create process
      tags:
      - flow
  /flow/processes/{id}:
    delete:
      description: Delete process instance
      parameters:
      - description: Process Key
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Delete process
      tags:
      - flow
    get:
      description: Get process instance details
      parameters:
      - description: Process Key
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ncobase_workflow_structs.ReadProcess'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Get process
      tags:
      - flow
    put:
      consumes:
      - application/json
      description: Update process instance details
      parameters:
      - description: Process ID
        in: path
        name: id
        required: true
        type: string
      - description: Process update body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ncobase_workflow_structs.UpdateProcessBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ncobase_workflow_structs.ReadProcess'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Update process
      tags:
      - flow
  /flow/processes/{id}/complete:
    post:
      description: Complete a process instance
      parameters:
      - description: Process ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Complete process
      tags:
      - flow
  /flow/processes/{id}/resume:
    post:
      description: Resume a suspended process instance
      parameters:
      - description: Process ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Resume process
      tags:
      - flow
  /flow/processes/{id}/suspend:
    post:
      description: Suspend a process instance
      parameters:
      - description: Process ID
        in: path
        name: id
        required: true
        type: string
      - description: Suspension reason
        in: query
        name: reason
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Suspend process
      tags:
      - flow
  /flow/processes/{id}/terminate:
    post:
      consumes:
      - application/json
      description: Terminate a process instance
      parameters:
      - description: Process ID
        in: path
        name: id
        required: true
        type: string
      - description: Process termination request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ncobase_workflow_structs.TerminateProcessRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Terminate process
      tags:
      - flow
  /flow/processes/{process_id}/evaluate-rules:
    post:
      consumes:
      - application/json
      description: Evaluate rules for a process instance
      parameters:
      - description: Process ID
        in: path
        name: process_id
        required: true
        type: string
      - description: Data for rule evaluation
        in: body
        name: data
        required: true
        schema:
          additionalProperties: true
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Evaluate rules
      tags:
      - flow
  /flow/processes/{process_id}/histories:
    get:
      description: Get complete history of a process instance
      parameters:
      - description: Process ID
        in: path
        name: process_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ncobase_workflow_structs.ReadHistory'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Get process history
      tags:
      - flow
  /flow/processes/{process_id}/nodes:
    get:
      description: Get all nodes of a process instance
      parameters:
      - description: Process ID
        in: path
        name: process_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ncobase_workflow_structs.ReadNode'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Get process nodes
      tags:
      - flow
  /flow/processes/start:
    post:
      consumes:
      - application/json
      description: Start a new process instance
      parameters:
      - description: Process start request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ncobase_workflow_structs.StartProcessRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ncobase_workflow_structs.StartProcessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Start process
      tags:
      - flow
  /flow/rules:
    get:
      description: List workflow rules
      parameters:
      - in: query
        name: cursor
        type: string
      - in: query
        name: direction
        type: string
      - in: query
        name: is_enabled
        type: boolean
      - in: query
        name: limit
        type: integer
      - in: query
        name: node_key
        type: string
      - in: query
        name: status
        type: string
      - in: query
        name: template_id
        type: string
      - in: query
        name: tenant
        type: string
      - in: query
        name: type
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ncobase_workflow_structs.ReadRule'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: List rules
      tags:
      - flow
    post:
      consumes:
      - application/json
      description: Create a new workflow rule
      parameters:
      - description: Rule creation body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ncobase_workflow_structs.RuleBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ncobase_workflow_structs.ReadRule'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Create rule
      tags:
      - flow
  /flow/rules/{id}:
    delete:
      description: Delete a workflow rule
      parameters:
      - description: Rule ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Delete rule
      tags:
      - flow
    get:
      description: Get workflow rule details
      parameters:
      - description: Rule Key
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ncobase_workflow_structs.ReadRule'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Get rule
      tags:
      - flow
    put:
      consumes:
      - application/json
      description: Update workflow rule details
      parameters:
      - description: Rule ID
        in: path
        name: id
        required: true
        type: string
      - description: Rule update body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ncobase_workflow_structs.UpdateRuleBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ncobase_workflow_structs.ReadRule'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Update rule
      tags:
      - flow
  /flow/rules/{id}/disable:
    post:
      description: Disable a workflow rule
      parameters:
      - description: Rule ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Disable rule
      tags:
      - flow
  /flow/rules/{id}/enable:
    post:
      description: Enable a workflow rule
      parameters:
      - description: Rule ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Enable rule
      tags:
      - flow
  /flow/rules/{id}/validate:
    post:
      description: Validate a workflow rule
      parameters:
      - description: Rule ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Validate rule
      tags:
      - flow
  /flow/rules/active:
    get:
      description: Get active rules for template or node
      parameters:
      - description: Template ID
        in: query
        name: template_id
        type: string
      - description: Node Key
        in: query
        name: node_key
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ncobase_workflow_structs.ReadRule'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Get active rules
      tags:
      - flow
  /flow/tasks:
    get:
      description: List tasks
      parameters:
      - collectionFormat: csv
        in: query
        items:
          type: string
        name: assignees
        type: array
      - in: query
        name: cursor
        type: string
      - in: query
        name: direction
        type: string
      - in: query
        name: is_timeout
        type: boolean
      - in: query
        name: limit
        type: integer
      - in: query
        name: node_key
        type: string
      - in: query
        name: node_type
        type: string
      - in: query
        name: priority
        type: integer
      - in: query
        name: process_id
        type: string
      - in: query
        name: sort_by
        type: string
      - in: query
        name: status
        type: string
      - in: query
        name: tenant
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ncobase_workflow_structs.ReadTask'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: List tasks
      tags:
      - flow
    post:
      consumes:
      - application/json
      description: Create a new task
      parameters:
      - description: Task creation body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ncobase_workflow_structs.TaskBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ncobase_workflow_structs.ReadTask'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Create task
      tags:
      - flow
  /flow/tasks/{id}:
    delete:
      description: Delete a task
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Delete task
      tags:
      - flow
    get:
      description: Get task details
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ncobase_workflow_structs.ReadTask'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Get task
      tags:
      - flow
    put:
      consumes:
      - application/json
      description: Update task details
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      - description: Task update body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ncobase_workflow_structs.UpdateTaskBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ncobase_workflow_structs.ReadTask'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Update task
      tags:
      - flow
  /flow/tasks/{id}/claim:
    post:
      consumes:
      - application/json
      description: Claim an unassigned task
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      - description: Task assignees
        in: body
        name: assignees
        required: true
        schema:
          items:
            type: string
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Claim task
      tags:
      - flow
  /flow/tasks/{id}/complete:
    post:
      consumes:
      - application/json
      description: Complete a task
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      - description: Task completion request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ncobase_workflow_structs.CompleteTaskRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ncobase_workflow_structs.CompleteTaskResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Complete task
      tags:
      - flow
  /flow/tasks/{id}/delegate:
    post:
      consumes:
      - application/json
      description: Delegate a task to another user
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      - description: Task delegation request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ncobase_workflow_structs.DelegateTaskRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Delegate task
      tags:
      - flow
  /flow/tasks/{id}/transfer:
    post:
      consumes:
      - application/json
      description: Transfer a task to another user
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      - description: Task transfer request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ncobase_workflow_structs.TransferTaskRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Transfer task
      tags:
      - flow
  /flow/tasks/{id}/urge:
    post:
      consumes:
      - application/json
      description: Send urge request for a task
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      - description: Task urge request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ncobase_workflow_structs.UrgeTaskRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Urge task
      tags:
      - flow
  /flow/tasks/{id}/withdraw:
    post:
      consumes:
      - application/json
      description: Withdraw a completed task
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      - description: Task withdrawal request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ncobase_workflow_structs.WithdrawTaskRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Withdraw task
      tags:
      - flow
  /flow/tasks/{task_id}/check-delegation:
    get:
      description: Check if task can be delegated to user
      parameters:
      - description: Task ID
        in: path
        name: task_id
        required: true
        type: string
      - description: Assignee ID
        in: query
        name: assignee_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Delegatee ID if delegation exists
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Check delegation
      tags:
      - flow
  /flow/tasks/{task_id}/histories:
    get:
      description: Get complete history of a task
      parameters:
      - description: Task ID
        in: path
        name: task_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ncobase_workflow_structs.ReadHistory'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Get task history
      tags:
      - flow
  /flow/templates:
    get:
      description: List workflow templates
      parameters:
      - in: query
        name: category
        type: string
      - in: query
        name: code
        type: string
      - in: query
        name: cursor
        type: string
      - in: query
        name: direction
        type: string
      - in: query
        name: form_code
        type: string
      - in: query
        name: is_latest
        type: boolean
      - in: query
        name: limit
        type: integer
      - in: query
        name: module_code
        type: string
      - in: query
        name: sort_by
        type: string
      - in: query
        name: status
        type: string
      - in: query
        name: tenant
        type: string
      - in: query
        name: type
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ncobase_workflow_structs.ReadTemplate'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: List templates
      tags:
      - flow
    post:
      consumes:
      - application/json
      description: Create a new workflow template
      parameters:
      - description: Template creation body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ncobase_workflow_structs.TemplateBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ncobase_workflow_structs.ReadTemplate'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Create template
      tags:
      - flow
  /flow/templates/{id}:
    delete:
      description: Delete a workflow template
      parameters:
      - description: Template ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Delete template
      tags:
      - flow
    get:
      description: Get workflow template details
      parameters:
      - description: Template ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ncobase_workflow_structs.ReadTemplate'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Get template
      tags:
      - flow
    put:
      consumes:
      - application/json
      description: Update workflow template details
      parameters:
      - description: Template ID
        in: path
        name: id
        required: true
        type: string
      - description: Template update body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ncobase_workflow_structs.UpdateTemplateBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ncobase_workflow_structs.ReadTemplate'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Update template
      tags:
      - flow
  /flow/templates/{id}/designs:
    get:
      description: Get process designs associated with a template
      parameters:
      - description: Template ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ncobase_workflow_structs.ReadProcessDesign'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Get template designs
      tags:
      - flow
  /flow/templates/{id}/disable:
    post:
      description: Disable a workflow template
      parameters:
      - description: Template ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Disable template
      tags:
      - flow
  /flow/templates/{id}/enable:
    post:
      description: Enable a workflow template
      parameters:
      - description: Template ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Enable template
      tags:
      - flow
  /flow/templates/{id}/rules:
    get:
      description: Get rules associated with a template
      parameters:
      - description: Template ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ncobase_workflow_structs.ReadRule'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Get template rules
      tags:
      - flow
  /flow/templates/{id}/validate:
    post:
      description: Validate a workflow template
      parameters:
      - description: Template ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Validate template
      tags:
      - flow
  /flow/templates/{id}/versions:
    post:
      consumes:
      - application/json
      description: Create a new version of existing template
      parameters:
      - description: Template ID
        in: path
        name: id
        required: true
        type: string
      - description: New Version
        in: query
        name: version
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ncobase_workflow_structs.ReadTemplate'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Create template version
      tags:
      - flow
  /flow/templates/{id}/versions/latest:
    put:
      description: Set a template version as the latest version
      parameters:
      - description: Template ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Set latest version
      tags:
      - flow
  /flow/templates/{template_id}/designs/import:
    post:
      consumes:
      - multipart/form-data
      description: Import process design from file
      parameters:
      - description: Template ID
        in: path
        name: template_id
        required: true
        type: string
      - description: Process design file
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Import design
      tags:
      - flow
  /flow/users/{user_id}/delegations:
    get:
      description: Get active delegations for a user
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ncobase_workflow_structs.ReadDelegation'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Get active delegations
      tags:
      - flow
  /login:
    post:
      consumes:
      - application/json
      description: Log in a user.
      parameters:
      - description: LoginBody object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ncobase_auth_structs.LoginBody'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            additionalProperties:
              allOf:
              - {}
              - properties:
                  access_token:
                    type: string
                  id:
                    type: string
                type: object
            type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      summary: Login
      tags:
      - auth
  /logout:
    post:
      description: Logout the current user.
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Logout
      tags:
      - auth
  /org/groups:
    get:
      description: Retrieve a list or tree structure of groups.
      parameters:
      - in: query
        name: children
        type: boolean
      - in: query
        name: cursor
        type: string
      - in: query
        name: direction
        type: string
      - in: query
        name: limit
        type: integer
      - in: query
        name: parent
        type: string
      - in: query
        name: sort_by
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/ncobase_space_structs.ReadGroup'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: List groups
      tags:
      - org
    post:
      consumes:
      - application/json
      description: Create a new group.
      parameters:
      - description: GroupBody object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ncobase_space_structs.GroupBody'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_space_structs.ReadGroup'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Create group
      tags:
      - org
    put:
      consumes:
      - application/json
      description: Update an existing group.
      parameters:
      - description: UpdateGroupBody object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ncobase_space_structs.UpdateGroupBody'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_space_structs.ReadGroup'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Update group
      tags:
      - org
  /org/groups/{groupId}:
    delete:
      description: Delete a group by ID or slug.
      parameters:
      - description: Group ID or slug
        in: path
        name: groupId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Delete group
      tags:
      - org
    get:
      description: Retrieve a group by ID or slug.
      parameters:
      - description: Group ID or slug
        in: path
        name: groupId
        required: true
        type: string
      - in: query
        name: children
        type: boolean
      - in: query
        name: group
        type: string
      - in: query
        name: parent
        type: string
      - in: query
        name: sort_by
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_space_structs.ReadGroup'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Get group
      tags:
      - org
  /org/groups/{groupId}/members:
    get:
      description: Get all members of a specific group
      parameters:
      - description: Group ID or Slug
        in: path
        name: groupId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/ncobase_space_structs.GroupMember'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Get group members
      tags:
      - org
    post:
      consumes:
      - application/json
      description: Add a user to a group with a specified role
      parameters:
      - description: Group ID or Slug
        in: path
        name: groupId
        required: true
        type: string
      - description: User details to add
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ncobase_space_structs.AddMemberRequest'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_space_structs.GroupMember'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Add member to group
      tags:
      - org
  /org/groups/{groupId}/members/{userId}:
    delete:
      description: Remove a user from a group
      parameters:
      - description: Group ID or Slug
        in: path
        name: groupId
        required: true
        type: string
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Remove group member
      tags:
      - org
    put:
      consumes:
      - application/json
      description: Update a member's role in a group
      parameters:
      - description: Group ID or Slug
        in: path
        name: groupId
        required: true
        type: string
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      - description: Role update
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ncobase_space_structs.UpdateMemberRequest'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_space_structs.GroupMember'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Update group member
      tags:
      - org
  /org/groups/{groupId}/members/{userId}/check:
    get:
      description: Check if a user is a member of a group
      parameters:
      - description: Group ID or Slug
        in: path
        name: groupId
        required: true
        type: string
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            additionalProperties:
              type: boolean
            type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Check if user is a member
      tags:
      - org
  /org/groups/{groupId}/members/{userId}/is-owner:
    get:
      description: Check if a user has owner role in a group
      parameters:
      - description: Group ID or Slug
        in: path
        name: groupId
        required: true
        type: string
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            additionalProperties:
              type: boolean
            type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Check if user is an owner
      tags:
      - org
  /org/groups/{groupId}/members/{userId}/role:
    get:
      description: Get a user's role in a group
      parameters:
      - description: Group ID or Slug
        in: path
        name: groupId
        required: true
        type: string
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Get user role
      tags:
      - org
  /pay/channels:
    get:
      description: Get a paginated list of payment channels
      parameters:
      - description: Filter by provider
        in: query
        name: provider
        type: string
      - description: Filter by status
        in: query
        name: status
        type: string
      - description: Filter by tenant ID
        in: query
        name: tenant_id
        type: string
      - description: Cursor for pagination
        in: query
        name: cursor
        type: string
      - default: 20
        description: Page size
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/ncobase_payment_structs.Channel'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: List payment channels
      tags:
      - payment
      - channels
    post:
      consumes:
      - application/json
      description: Create a new payment channel
      parameters:
      - description: Channel data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ncobase_payment_structs.CreateChannelInput'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
            - $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
            - properties:
                data:
                  $ref: '#/definitions/ncobase_payment_structs.Channel'
              type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Create payment channel
      tags:
      - payment
      - channels
  /pay/channels/{id}:
    delete:
      description: Delete a payment channel by ID
      parameters:
      - description: Channel ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
            - $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
            - properties:
                data:
                  type: object
              type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Delete payment channel
      tags:
      - payment
      - channels
    get:
      description: Get a payment channel by ID
      parameters:
      - description: Channel ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
            - $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
            - properties:
                data:
                  $ref: '#/definitions/ncobase_payment_structs.Channel'
              type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Get payment channel
      tags:
      - payment
      - channels
    put:
      consumes:
      - application/json
      description: Update an existing payment channel
      parameters:
      - description: Channel ID
        in: path
        name: id
        required: true
        type: string
      - description: Updates
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ncobase_payment_structs.UpdateChannelInput'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
            - $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
            - properties:
                data:
                  $ref: '#/definitions/ncobase_payment_structs.Channel'
              type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Update payment channel
      tags:
      - payment
      - channels
  /pay/channels/{id}/status:
    put:
      consumes:
      - application/json
      description: Change the status of a payment channel
      parameters:
      - description: Channel ID
        in: path
        name: id
        required: true
        type: string
      - description: Status data
        in: body
        name: body
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
            - $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
            - properties:
                data:
                  $ref: '#/definitions/ncobase_payment_structs.Channel'
              type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Change channel status
      tags:
      - payment
      - channels
  /pay/logs:
    get:
      description: Get a paginated list of payment logs
      parameters:
      - description: Filter by order ID
        in: query
        name: order_id
        type: string
      - description: Filter by channel ID
        in: query
        name: channel_id
        type: string
      - description: Filter by log type
        in: query
        name: type
        type: string
      - description: Filter by has error
        in: query
        name: has_error
        type: boolean
      - description: Filter by start date (Unix timestamp)
        in: query
        name: start_date
        type: integer
      - description: Filter by end date (Unix timestamp)
        in: query
        name: end_date
        type: integer
      - description: Filter by user ID
        in: query
        name: user_id
        type: string
      - description: Cursor for pagination
        in: query
        name: cursor
        type: string
      - default: 20
        description: Page size
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/ncobase_payment_structs.Log'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: List payment logs
      tags:
      - payment
      - logs
  /pay/logs/{id}:
    get:
      description: Get a payment log by ID
      parameters:
      - description: Log ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
            - $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
            - properties:
                data:
                  $ref: '#/definitions/ncobase_payment_structs.Log'
              type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Get payment log
      tags:
      - payment
      - logs
  /pay/logs/order/{orderId}:
    get:
      description: Get payment logs for a specific order
      parameters:
      - description: Order ID
        in: path
        name: orderId
        required: true
        type: string
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Page size
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/ncobase_payment_structs.Log'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Get logs by order
      tags:
      - payment
      - logs
  /pay/orders:
    get:
      description: Get a paginated list of payment orders
      parameters:
      - description: Filter by status
        in: query
        name: status
        type: string
      - description: Filter by type
        in: query
        name: type
        type: string
      - description: Filter by channel ID
        in: query
        name: channel_id
        type: string
      - description: Filter by user ID
        in: query
        name: user_id
        type: string
      - description: Filter by tenant ID
        in: query
        name: tenant_id
        type: string
      - description: Filter by product ID
        in: query
        name: product_id
        type: string
      - description: Filter by subscription ID
        in: query
        name: subscription_id
        type: string
      - description: Filter by start date (Unix timestamp)
        in: query
        name: start_date
        type: integer
      - description: Filter by end date (Unix timestamp)
        in: query
        name: end_date
        type: integer
      - description: Cursor for pagination
        in: query
        name: cursor
        type: string
      - default: 20
        description: Page size
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/ncobase_payment_structs.Order'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: List payment orders
      tags:
      - payment
      - orders
    post:
      consumes:
      - application/json
      description: Create a new payment order
      parameters:
      - description: Order data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ncobase_payment_structs.CreateOrderInput'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
            - $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
            - properties:
                data:
                  $ref: '#/definitions/ncobase_payment_structs.Order'
              type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Create payment order
      tags:
      - payment
      - orders
  /pay/orders/{id}:
    get:
      description: Get a payment order by ID
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
            - $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
            - properties:
                data:
                  $ref: '#/definitions/ncobase_payment_structs.Order'
              type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Get payment order
      tags:
      - payment
      - orders
  /pay/orders/{id}/payment-url:
    post:
      description: Generate a payment URL for a payment order
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
            - $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
            - properties:
                data:
                  additionalProperties: true
                  type: object
              type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Generate payment URL
      tags:
      - payment
      - orders
  /pay/orders/{id}/refund:
    post:
      consumes:
      - application/json
      description: Request a refund for a payment
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      - description: Refund data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ncobase_payment_structs.RefundOrderInput'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
            - $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
            - properties:
                data:
                  $ref: '#/definitions/ncobase_payment_structs.Order'
              type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Refund payment
      tags:
      - payment
      - orders
  /pay/orders/{id}/verify:
    post:
      consumes:
      - application/json
      description: Verify a payment with the payment provider
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      - description: Verification data
        in: body
        name: body
        required: true
        schema:
          additionalProperties: true
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
            - $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
            - properties:
                data:
                  $ref: '#/definitions/ncobase_payment_structs.Order'
              type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Verify payment
      tags:
      - payment
      - orders
  /pay/orders/number/{orderNumber}:
    get:
      description: Get a payment order by order number
      parameters:
      - description: Order Number
        in: path
        name: orderNumber
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
            - $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
            - properties:
                data:
                  $ref: '#/definitions/ncobase_payment_structs.Order'
              type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Get order by number
      tags:
      - payment
      - orders
  /pay/products:
    get:
      description: Get a paginated list of products
      parameters:
      - description: Filter by status
        in: query
        name: status
        type: string
      - description: Filter by pricing type
        in: query
        name: pricing_type
        type: string
      - description: Filter by tenant ID
        in: query
        name: tenant_id
        type: string
      - description: Cursor for pagination
        in: query
        name: cursor
        type: string
      - default: 20
        description: Page size
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/ncobase_payment_structs.Product'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: List products
      tags:
      - payment
      - products
    post:
      consumes:
      - application/json
      description: Create a new product
      parameters:
      - description: Product data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ncobase_payment_structs.CreateProductInput'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
            - $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
            - properties:
                data:
                  $ref: '#/definitions/ncobase_payment_structs.Product'
              type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Create product
      tags:
      - payment
      - products
  /pay/products/{id}:
    delete:
      description: Delete a product by ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
            - $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
            - properties:
                data:
                  type: object
              type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Delete product
      tags:
      - payment
      - products
    get:
      description: Get a product by ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
            - $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
            - properties:
                data:
                  $ref: '#/definitions/ncobase_payment_structs.Product'
              type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Get product
      tags:
      - payment
      - products
    put:
      consumes:
      - application/json
      description: Update an existing product
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      - description: Updates
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ncobase_payment_structs.UpdateProductInput'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
            - $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
            - properties:
                data:
                  $ref: '#/definitions/ncobase_payment_structs.Product'
              type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Update product
      tags:
      - payment
      - products
  /pay/providers:
    get:
      description: Get a list of all available payment providers
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
            - $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
            - properties:
                items:
                  items:
                    additionalProperties: true
                    type: object
                  type: array
              type: object
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: List payment providers
      tags:
      - payment
  /pay/stats:
    get:
      description: Get payment statistics and metrics
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
            - $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
            - properties:
                data:
                  additionalProperties: true
                  type: object
              type: object
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Get payment statistics
      tags:
      - payment
  /pay/subscriptions:
    get:
      description: Get a paginated list of subscriptions
      parameters:
      - description: Filter by status
        in: query
        name: status
        type: string
      - description: Filter by user ID
        in: query
        name: user_id
        type: string
      - description: Filter by tenant ID
        in: query
        name: tenant_id
        type: string
      - description: Filter by product ID
        in: query
        name: product_id
        type: string
      - description: Filter by channel ID
        in: query
        name: channel_id
        type: string
      - description: Filter by active status
        in: query
        name: active
        type: boolean
      - description: Cursor for pagination
        in: query
        name: cursor
        type: string
      - default: 20
        description: Page size
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/ncobase_payment_structs.Subscription'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: List subscriptions
      tags:
      - payment
      - subscriptions
    post:
      consumes:
      - application/json
      description: Create a new subscription
      parameters:
      - description: Subscription data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ncobase_payment_structs.CreateSubscriptionInput'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
            - $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
            - properties:
                data:
                  $ref: '#/definitions/ncobase_payment_structs.Subscription'
              type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Create subscription
      tags:
      - payment
      - subscriptions
  /pay/subscriptions/{id}:
    get:
      description: Get a subscription by ID
      parameters:
      - description: Subscription ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
            - $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
            - properties:
                data:
                  $ref: '#/definitions/ncobase_payment_structs.Subscription'
              type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Get subscription
      tags:
      - payment
      - subscriptions
    put:
      consumes:
      - application/json
      description: Update an existing subscription
      parameters:
      - description: Subscription ID
        in: path
        name: id
        required: true
        type: string
      - description: Updates
        in: body
        name: body
        required: true
        schema:
          additionalProperties: true
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
            - $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
            - properties:
                data:
                  $ref: '#/definitions/ncobase_payment_structs.Subscription'
              type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Update subscription
      tags:
      - payment
      - subscriptions
  /pay/subscriptions/{id}/cancel:
    post:
      consumes:
      - application/json
      description: Cancel an existing subscription
      parameters:
      - description: Subscription ID
        in: path
        name: id
        required: true
        type: string
      - description: Cancel options
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ncobase_payment_structs.CancelSubscriptionInput'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
            - $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
            - properties:
                data:
                  $ref: '#/definitions/ncobase_payment_structs.Subscription'
              type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Cancel subscription
      tags:
      - payment
      - subscriptions
  /pay/subscriptions/user/{userId}:
    get:
      description: Get subscriptions for a specific user
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      - description: Filter by status
        in: query
        name: status
        type: string
      - description: Filter by active status
        in: query
        name: active
        type: boolean
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Page size
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/ncobase_payment_structs.Subscription'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Get user subscriptions
      tags:
      - payment
      - subscriptions
  /pay/webhooks/{channel}:
    post:
      consumes:
      - application/json
      description: Process webhook notifications from payment providers
      parameters:
      - description: Payment channel ID
        in: path
        name: channel
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      summary: Process payment webhook
      tags:
      - payment
  /plug/counters:
    get:
      description: Retrieve a list or tree structure of counters.
      parameters:
      - in: query
        name: cursor
        type: string
      - in: query
        name: direction
        type: string
      - in: query
        name: disabled
        type: boolean
      - in: query
        name: limit
        type: integer
      - in: query
        name: tenant
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/ncobase_counter_structs.ReadCounter'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: List counters
      tags:
      - plug
    post:
      consumes:
      - application/json
      description: Create a new counter.
      parameters:
      - description: CounterBody object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ncobase_counter_structs.CounterBody'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_counter_structs.ReadCounter'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Create counter
      tags:
      - plug
    put:
      consumes:
      - application/json
      description: Update an existing counter.
      parameters:
      - description: UpdateCounterBody object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ncobase_counter_structs.UpdateCounterBody'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_counter_structs.ReadCounter'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Update counter
      tags:
      - plug
  /plug/counters/{id}:
    delete:
      description: Delete a counter by ID.
      parameters:
      - description: Counter ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Delete counter
      tags:
      - plug
    get:
      description: Retrieve a counter by ID.
      parameters:
      - description: Counter ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_counter_structs.ReadCounter'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Get counter
      tags:
      - plug
  /refresh:
    post:
      consumes:
      - application/json
      description: Refresh the current user's access token.
      parameters:
      - description: Refresh token
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ncobase_auth_structs.RefreshTokenBody'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            additionalProperties:
              allOf:
              - {}
              - properties:
                  access_token:
                    type: string
                  id:
                    type: string
                  refresh_token:
                    type: string
                type: object
            type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      summary: RefreshToken token
      tags:
      - auth
  /register:
    post:
      consumes:
      - application/json
      description: Register a new user.
      parameters:
      - description: RegisterBody object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ncobase_auth_structs.RegisterBody'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            additionalProperties:
              allOf:
              - {}
              - properties:
                  access_token:
                    type: string
                  id:
                    type: string
                type: object
            type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      summary: Register
      tags:
      - auth
  /res:
    get:
      description: List files based on specified parameters.
      parameters:
      - enum:
        - public
        - private
        - shared
        in: query
        name: access_level
        type: string
        x-enum-comments:
          AccessLevelPrivate: Only accessible to owner
          AccessLevelPublic: Accessible to anyone
          AccessLevelShared: Shared with specific users/groups
        x-enum-varnames:
        - AccessLevelPublic
        - AccessLevelPrivate
        - AccessLevelShared
      - enum:
        - image
        - document
        - video
        - audio
        - archive
        - other
        in: query
        name: category
        type: string
        x-enum-varnames:
        - FileCategoryImage
        - FileCategoryDocument
        - FileCategoryVideo
        - FileCategoryAudio
        - FileCategoryArchive
        - FileCategoryOther
      - in: query
        name: created_after
        type: integer
      - in: query
        name: created_before
        type: integer
      - in: query
        name: cursor
        type: string
      - in: query
        name: direction
        type: string
      - in: query
        name: folder_path
        type: string
      - in: query
        name: is_public
        type: boolean
      - in: query
        name: limit
        type: integer
      - in: query
        name: object
        required: true
        type: string
      - description: Full-text search
        in: query
        name: q
        type: string
      - in: query
        name: size_max
        type: integer
      - in: query
        name: size_min
        type: integer
      - in: query
        name: storage
        type: string
      - description: Comma-separated tags
        in: query
        name: tags
        type: string
      - in: query
        name: tenant
        required: true
        type: string
      - in: query
        name: type
        type: string
      - in: query
        name: user
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/ncobase_resource_structs.ReadFile'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      summary: List files
      tags:
      - res
    post:
      consumes:
      - multipart/form-data
      description: Create one or multiple files.
      parameters:
      - description: File to upload
        in: formData
        name: file
        required: true
        type: file
      - description: Object ID associated with the file
        in: formData
        name: object_id
        type: string
      - description: Tenant ID associated with the file
        in: formData
        name: tenant_id
        type: string
      - description: Additional properties associated with the file (JSON format)
        in: formData
        name: extras
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_resource_structs.ReadFile'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Create files
      tags:
      - res
  /res/{slug}:
    delete:
      description: Delete a specific file.
      parameters:
      - description: Slug of the file to delete
        in: path
        name: slug
        required: true
        type: string
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_resource_structs.ReadFile'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Delete file
      tags:
      - res
    get:
      description: Get details of a specific file.
      parameters:
      - description: Slug of the file to retrieve
        in: path
        name: slug
        required: true
        type: string
      - description: Type of retrieval ('download' or 'stream')
        in: query
        name: type
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_resource_structs.ReadFile'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      summary: Get file
      tags:
      - res
    put:
      consumes:
      - multipart/form-data
      description: Update an existing file.
      parameters:
      - description: Slug of the file to update
        in: path
        name: slug
        required: true
        type: string
      - description: File details
        in: body
        name: file
        required: true
        schema:
          $ref: '#/definitions/ncobase_resource_structs.UpdateFileBody'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_resource_structs.ReadFile'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Update file
      tags:
      - res
  /res/{slug}/access:
    put:
      consumes:
      - application/json
      description: Set the access level for an file
      parameters:
      - description: File slug
        in: path
        name: slug
        required: true
        type: string
      - description: Access level
        in: body
        name: body
        required: true
        schema:
          additionalProperties:
            type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_resource_structs.ReadFile'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Set access level
      tags:
      - res
  /res/{slug}/share:
    post:
      consumes:
      - application/json
      description: Generate a shareable URL for an file
      parameters:
      - description: File slug
        in: path
        name: slug
        required: true
        type: string
      - description: Expiration time in hours
        in: body
        name: body
        required: true
        schema:
          additionalProperties:
            type: integer
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Generate share URL
      tags:
      - res
  /res/{slug}/thumbnail:
    post:
      consumes:
      - application/json
      description: Create a thumbnail for an image file
      parameters:
      - description: File slug
        in: path
        name: slug
        required: true
        type: string
      - description: Processing options
        in: body
        name: options
        required: true
        schema:
          $ref: '#/definitions/ncobase_resource_structs.ProcessingOptions'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_resource_structs.ReadFile'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Create thumbnail
      tags:
      - res
  /res/{slug}/versions:
    get:
      description: Get all versions of an file
      parameters:
      - description: File slug
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/ncobase_resource_structs.ReadFile'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Get file versions
      tags:
      - res
    post:
      consumes:
      - multipart/form-data
      description: Create a new version of an existing file
      parameters:
      - description: File slug
        in: path
        name: slug
        required: true
        type: string
      - description: New version file
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_resource_structs.ReadFile'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Create file version
      tags:
      - res
  /res/batch/process:
    post:
      consumes:
      - application/json
      description: Process multiple files in a batch
      parameters:
      - description: Processing parameters
        in: body
        name: body
        required: true
        schema:
          additionalProperties: true
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/ncobase_resource_structs.ReadFile'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Batch process
      tags:
      - res
  /res/batch/upload:
    post:
      consumes:
      - multipart/form-data
      description: Upload multiple files in a batch
      parameters:
      - description: Files to upload
        in: formData
        name: files
        required: true
        type: file
      - description: Tenant ID
        in: formData
        name: tenant_id
        required: true
        type: string
      - description: Object ID
        in: formData
        name: object_id
        required: true
        type: string
      - description: Virtual folder path
        in: formData
        name: folder_path
        type: string
      - description: Access level
        in: formData
        name: access_level
        type: string
      - description: Comma-separated tags
        in: formData
        name: tags
        type: string
      - description: Additional metadata (JSON)
        in: formData
        name: extras
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_resource_structs.BatchUploadResult'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Batch upload
      tags:
      - res
  /res/categories:
    get:
      description: List all available file categories
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              type: string
            type: array
      security:
      - Bearer: []
      summary: List file categories
      tags:
      - res
  /res/quotas:
    get:
      description: Get the storage quota for a tenant
      parameters:
      - description: Tenant ID
        in: query
        name: tenant_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            additionalProperties:
              type: integer
            type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Get storage quota
      tags:
      - res
    put:
      consumes:
      - application/json
      description: Set the storage quota for a tenant
      parameters:
      - description: Quota information
        in: body
        name: body
        required: true
        schema:
          additionalProperties: true
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            additionalProperties:
              type: integer
            type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Set storage quota
      tags:
      - res
  /res/quotas/usage:
    get:
      description: Get the current storage usage for a tenant
      parameters:
      - description: Tenant ID
        in: query
        name: tenant_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            additionalProperties: true
            type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Get storage usage
      tags:
      - res
  /res/search:
    get:
      consumes:
      - application/json
      description: Search files by various criteria
      parameters:
      - description: Tenant ID
        in: query
        name: tenant
        required: true
        type: string
      - description: Search query
        in: query
        name: q
        type: string
      - description: File category
        in: query
        name: category
        type: string
      - description: Comma-separated tags
        in: query
        name: tags
        type: string
      - description: Folder path
        in: query
        name: folder_path
        type: string
      - description: Public flag
        in: query
        name: is_public
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/ncobase_resource_structs.ReadFile'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Search files
      tags:
      - res
  /res/stats:
    get:
      description: Get storage usage statistics for a tenant
      parameters:
      - description: Tenant ID
        in: query
        name: tenant_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            additionalProperties: true
            type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Get storage statistics
      tags:
      - res
  /res/tags:
    get:
      description: List all tags used in files for a tenant
      parameters:
      - description: Tenant ID
        in: query
        name: tenant_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              type: string
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: List file tags
      tags:
      - res
  /rt/channels:
    get:
      description: Retrieve a list of channels based on the provided query parameters
      parameters:
      - in: query
        name: cursor
        type: string
      - in: query
        name: direction
        type: string
      - in: query
        name: limit
        type: integer
      - in: query
        name: status
        type: integer
      - in: query
        name: type
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/ncobase_realtime_structs.ReadChannel'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: List all channels
      tags:
      - rt
    post:
      consumes:
      - application/json
      description: Create a new channel
      parameters:
      - description: Channel data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ncobase_realtime_structs.CreateChannel'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_realtime_structs.ReadChannel'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Create a new channel
      tags:
      - rt
  /rt/channels/{id}:
    delete:
      description: Delete a channel
      parameters:
      - description: Channel ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_realtime_structs.ReadChannel'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Delete a channel
      tags:
      - rt
    get:
      description: Get a channel by ID
      parameters:
      - description: Channel ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_realtime_structs.ReadChannel'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Get a channel by ID
      tags:
      - rt
    put:
      consumes:
      - application/json
      description: Update a channel
      parameters:
      - description: Channel ID
        in: path
        name: id
        required: true
        type: string
      - description: Channel data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ncobase_realtime_structs.UpdateChannel'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_realtime_structs.ReadChannel'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Update a channel
      tags:
      - rt
  /rt/channels/{id}/subscribe:
    post:
      consumes:
      - application/json
      description: Subscribe to a channel
      parameters:
      - description: Channel ID
        in: path
        name: id
        required: true
        type: string
      - description: Subscription data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ncobase_realtime_structs.CreateSubscription'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_realtime_structs.ReadSubscription'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Subscribe to a channel
      tags:
      - rt
  /rt/channels/{id}/subscribers:
    get:
      description: Get subscribers of a channel
      parameters:
      - description: Channel ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/ncobase_realtime_structs.ReadUser'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Get subscribers of a channel
      tags:
      - rt
  /rt/channels/{id}/unsubscribe:
    post:
      consumes:
      - application/json
      description: Unsubscribe from a channel
      parameters:
      - description: Channel ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            additionalProperties:
              allOf:
              - {}
              - properties:
                  message:
                    type: string
                type: object
            type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Unsubscribe from a channel
      tags:
      - rt
  /rt/channels/user:
    get:
      description: Get channels of a user
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/ncobase_realtime_structs.ReadChannel'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Get channels of a user
      tags:
      - rt
  /rt/events:
    get:
      description: Retrieve a list of events based on the provided query parameters
      parameters:
      - in: query
        name: channel_id
        type: string
      - in: query
        name: cursor
        type: string
      - in: query
        name: direction
        type: string
      - in: query
        name: limit
        type: integer
      - collectionFormat: csv
        in: query
        items:
          type: integer
        name: time_range
        type: array
      - in: query
        name: type
        type: string
      - in: query
        name: user_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/ncobase_realtime_structs.ReadEvent'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: List all events
      tags:
      - rt
  /rt/events/{id}:
    delete:
      description: Delete an event
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_realtime_structs.ReadEvent'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Delete an event
      tags:
      - rt
    get:
      description: Get an event by ID
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_realtime_structs.ReadEvent'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Get an event by ID
      tags:
      - rt
  /rt/events/history:
    get:
      description: Get event history
      parameters:
      - description: Channel ID
        in: query
        name: channel_id
        required: true
        type: string
      - description: Event type
        in: query
        name: type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/ncobase_realtime_structs.ReadEvent'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Get event history
      tags:
      - rt
  /rt/events/publish:
    post:
      consumes:
      - application/json
      description: Publish a new event
      parameters:
      - description: Event data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ncobase_realtime_structs.CreateEvent'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_realtime_structs.ReadEvent'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Publish a new event
      tags:
      - rt
  /rt/notifications:
    get:
      description: Retrieve a list of notifications based on the provided query parameters
      parameters:
      - in: query
        name: channel_id
        type: string
      - in: query
        name: cursor
        type: string
      - in: query
        name: direction
        type: string
      - in: query
        name: limit
        type: integer
      - in: query
        name: status
        type: integer
      - in: query
        name: user_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/ncobase_realtime_structs.ReadNotification'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: List all notifications
      tags:
      - rt
    post:
      consumes:
      - application/json
      description: Create a new notification
      parameters:
      - description: Notification data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ncobase_realtime_structs.CreateNotification'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_realtime_structs.ReadNotification'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Create a new notification
      tags:
      - rt
  /rt/notifications/{id}:
    delete:
      description: Delete a notification
      parameters:
      - description: Notification ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_realtime_structs.ReadNotification'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Delete a notification
      tags:
      - rt
    get:
      description: Get a notification by ID
      parameters:
      - description: Notification ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_realtime_structs.ReadNotification'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Get a notification by ID
      tags:
      - rt
    put:
      consumes:
      - application/json
      description: Update a notification
      parameters:
      - description: Notification ID
        in: path
        name: id
        required: true
        type: string
      - description: Notification data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ncobase_realtime_structs.UpdateNotification'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_realtime_structs.ReadNotification'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Update a notification
      tags:
      - rt
  /rt/notifications/{id}/read:
    put:
      description: Mark a notification as read
      parameters:
      - description: Notification ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_realtime_structs.ReadNotification'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Mark a notification as read
      tags:
      - rt
  /rt/notifications/{id}/unread:
    put:
      description: Mark a notification as unread
      parameters:
      - description: Notification ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_realtime_structs.ReadNotification'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Mark a notification as unread
      tags:
      - rt
  /rt/notifications/read-all:
    put:
      description: Mark all notifications as read
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            additionalProperties:
              allOf:
              - {}
              - properties:
                  message:
                    type: string
                type: object
            type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Mark all notifications as read
      tags:
      - rt
  /rt/notifications/unread-all:
    put:
      description: Mark all notifications as unread
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            additionalProperties:
              allOf:
              - {}
              - properties:
                  message:
                    type: string
                type: object
            type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Mark all notifications as unread
      tags:
      - rt
  /rt/ws:
    get:
      description: Handles WebSocket connection
      responses: {}
      security:
      - Bearer: []
      summary: Handle WebSocket connection
      tags:
      - rt
  /sessions:
    get:
      description: List all sessions for the current user
      parameters:
      - description: Cursor for pagination
        in: query
        name: cursor
        type: string
      - description: Number of items to return
        in: query
        name: limit
        type: integer
      - description: Direction of pagination
        in: query
        name: direction
        type: string
      - description: Filter by active status
        in: query
        name: is_active
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/ncobase_auth_structs.ReadSession'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: List user sessions
      tags:
      - auth
  /sessions/{session_id}:
    delete:
      description: Delete a specific session (logout from device)
      parameters:
      - description: Session ID
        in: path
        name: session_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Delete session
      tags:
      - auth
    get:
      description: Retrieve a specific session by ID
      parameters:
      - description: Session ID
        in: path
        name: session_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_auth_structs.ReadSession'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Get session
      tags:
      - auth
  /sessions/deactivate-all:
    post:
      description: Deactivate all sessions for the current user (logout from all devices)
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Deactivate all sessions
      tags:
      - auth
  /sys/activities:
    get:
      description: Lists activities.
      parameters:
      - description: Cursor for pagination
        in: query
        name: cursor
        type: string
      - description: 'Direction for pagination (default: forward)'
        in: query
        name: direction
        type: string
      - description: 'Number of activities to retrieve (default: 20, max: 100)'
        in: query
        name: limit
        type: string
      - description: 'Number of activities to skip (default: 0)'
        in: query
        name: offset
        type: string
      - description: 'Unix timestamp to filter activities created after (default:
          0)'
        in: query
        name: from_date
        type: string
      - description: 'Unix timestamp to filter activities created before (default:
          0)'
        in: query
        name: to_date
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ncobase_access_structs.ActivityDocument'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List activities
      tags:
      - Activity
  /sys/activity:
    post:
      consumes:
      - application/json
      description: Logs a new activity.
      parameters:
      - description: Activity details
        in: body
        name: activity
        required: true
        schema:
          $ref: '#/definitions/ncobase_access_structs.CreateActivityRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/ncobase_access_structs.Activity'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Log a new activity
      tags:
      - Activity
  /sys/activity/{id}:
    get:
      description: Retrieves an activity by its ID.
      parameters:
      - description: Activity ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ncobase_access_structs.Activity'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Retrieve an activity by ID
      tags:
      - Activity
  /sys/activity/search:
    get:
      description: Performs full-text search on activities.
      parameters:
      - description: Search query
        in: query
        name: query
        required: true
        type: string
      - description: 'Unix timestamp to filter activities created after (default:
          0)'
        in: query
        name: from
        type: string
      - description: 'Number of activities to retrieve (default: 10, max: 100)'
        in: query
        name: size
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ncobase_access_structs.ActivityDocument'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Perform full-text search on activities
      tags:
      - Activity
  /sys/activity/user/{username}:
    get:
      description: Retrieves activities for a specific user.
      parameters:
      - description: Username of the user
        in: path
        name: username
        required: true
        type: string
      - description: 'Number of activities to retrieve (default: 10, max: 100)'
        in: query
        name: limit
        type: string
      - description: 'Number of activities to skip (default: 0)'
        in: query
        name: offset
        type: string
      - description: 'Unix timestamp to filter activities created after (default:
          0)'
        in: query
        name: from_date
        type: string
      - description: 'Unix timestamp to filter activities created before (default:
          0)'
        in: query
        name: to_date
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ncobase_access_structs.ActivityDocument'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Retrieve activities for a specific user
      tags:
      - Activity
  /sys/dictionaries/batch:
    post:
      consumes:
      - application/json
      description: Retrieve multiple dictionaries by their slugs.
      parameters:
      - description: Array of dictionary slugs
        in: body
        name: body
        required: true
        schema:
          items:
            type: string
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            additionalProperties:
              $ref: '#/definitions/ncobase_system_structs.ReadDictionary'
            type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Batch get dictionaries
      tags:
      - sys
  /sys/dictionaries/options/{slug}:
    get:
      description: Retrieve dictionary options formatted for frontend select components.
      parameters:
      - description: Dictionary slug
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              additionalProperties: true
              type: object
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Get dictionary enum options
      tags:
      - sys
  /sys/dictionaries/slug/{slug}:
    get:
      description: Retrieve a dictionary by its slug.
      parameters:
      - description: Dictionary slug
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_system_structs.ReadDictionary'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Get dictionary by slug
      tags:
      - sys
  /sys/dictionaries/validate/{slug}:
    get:
      description: Check if a value exists in a dictionary enum.
      parameters:
      - description: Dictionary slug
        in: path
        name: slug
        required: true
        type: string
      - description: Value to validate
        in: query
        name: value
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            additionalProperties:
              type: boolean
            type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Validate enum value
      tags:
      - sys
  /sys/dictionarys:
    get:
      description: Retrieve a list or tree structure of dictionarys.
      parameters:
      - in: query
        name: cursor
        type: string
      - in: query
        name: direction
        type: string
      - in: query
        name: limit
        type: integer
      - in: query
        name: type
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/ncobase_system_structs.ReadDictionary'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: List dictionarys
      tags:
      - sys
    post:
      consumes:
      - application/json
      description: Create a new dictionary.
      parameters:
      - description: DictionaryBody object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ncobase_system_structs.DictionaryBody'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_system_structs.ReadDictionary'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Create dictionary
      tags:
      - sys
    put:
      consumes:
      - application/json
      description: Update an existing dictionary.
      parameters:
      - description: UpdateDictionaryBody object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ncobase_system_structs.UpdateDictionaryBody'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_system_structs.ReadDictionary'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Update dictionary
      tags:
      - sys
  /sys/dictionarys/{slug}:
    delete:
      description: Delete a dictionary by ID or slug.
      parameters:
      - description: Dictionary ID or slug
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Delete dictionary
      tags:
      - sys
    get:
      description: Retrieve a dictionary by ID or slug.
      parameters:
      - description: Dictionary ID or slug
        in: path
        name: slug
        required: true
        type: string
      - in: query
        name: dictionary
        type: string
      - in: query
        name: type
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_system_structs.ReadDictionary'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Get dictionary
      tags:
      - sys
  /sys/employees:
    get:
      description: List employees with filtering and pagination
      parameters:
      - description: Tenant ID
        in: query
        name: tenant_id
        type: string
      - description: Department
        in: query
        name: department
        type: string
      - description: Employee status
        in: query
        name: status
        type: string
      - description: Employment type
        in: query
        name: employment_type
        type: string
      - description: Manager ID
        in: query
        name: manager_id
        type: string
      - description: Cursor for pagination
        in: query
        name: cursor
        type: string
      - description: Number of items to return
        in: query
        name: limit
        type: integer
      - description: Direction of pagination
        in: query
        name: direction
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/ncobase_user_structs.ReadEmployee'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      summary: List employees
      tags:
      - sys
    post:
      consumes:
      - application/json
      description: Create a new employee record
      parameters:
      - description: Employee information
        in: body
        name: employee
        required: true
        schema:
          $ref: '#/definitions/ncobase_user_structs.CreateEmployeeBody'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_user_structs.ReadEmployee'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      summary: Create employee
      tags:
      - sys
  /sys/employees/{user_id}:
    delete:
      description: Delete an employee record
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      summary: Delete employee
      tags:
      - sys
    get:
      description: Retrieve an employee record by user ID
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_user_structs.ReadEmployee'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      summary: Get employee
      tags:
      - sys
    put:
      consumes:
      - application/json
      description: Update an existing employee record
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      - description: Employee information to update
        in: body
        name: employee
        required: true
        schema:
          $ref: '#/definitions/ncobase_user_structs.UpdateEmployeeBody'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_user_structs.ReadEmployee'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      summary: Update employee
      tags:
      - sys
  /sys/employees/department/{department}:
    get:
      description: Retrieve all employees in a specific department
      parameters:
      - description: Department name
        in: path
        name: department
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/ncobase_user_structs.ReadEmployee'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      summary: Get employees by department
      tags:
      - sys
  /sys/employees/manager/{manager_id}:
    get:
      description: Retrieve all employees under a specific manager
      parameters:
      - description: Manager ID
        in: path
        name: manager_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/ncobase_user_structs.ReadEmployee'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      summary: Get employees by manager
      tags:
      - sys
  /sys/groups/{groupId}/tenants:
    get:
      description: Get all tenants that have a specific group
      parameters:
      - description: Group ID
        in: path
        name: groupId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              type: string
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Get group tenants
      tags:
      - sys
  /sys/menus:
    get:
      description: Retrieve a list or tree structure of menus.
      parameters:
      - in: query
        name: children
        type: boolean
      - in: query
        name: cursor
        type: string
      - in: query
        name: direction
        type: string
      - in: query
        name: limit
        type: integer
      - in: query
        name: parent
        type: string
      - in: query
        name: perms
        type: string
      - in: query
        name: sort_by
        type: string
      - in: query
        name: type
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/ncobase_system_structs.ReadMenu'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: List menus
      tags:
      - sys
    post:
      consumes:
      - application/json
      description: Create a new menu.
      parameters:
      - description: MenuBody object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ncobase_system_structs.MenuBody'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_system_structs.ReadMenu'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Create menu
      tags:
      - sys
    put:
      consumes:
      - application/json
      description: Update an existing menu.
      parameters:
      - description: UpdateMenuBody object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ncobase_system_structs.UpdateMenuBody'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_system_structs.ReadMenu'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Update menu
      tags:
      - sys
  /sys/menus/{id}/{action}:
    put:
      description: Toggle menu status with specified action.
      parameters:
      - description: Menu ID
        in: path
        name: id
        required: true
        type: string
      - description: Action (enable/disable/show/hide)
        in: path
        name: action
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_system_structs.ReadMenu'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Toggle menu status
      tags:
      - sys
  /sys/menus/{id}/move:
    put:
      consumes:
      - application/json
      description: Move a menu to a new parent and/or change its order.
      parameters:
      - description: Menu ID
        in: path
        name: id
        required: true
        type: string
      - description: MoveMenuParams object
        in: body
        name: body
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_system_structs.ReadMenu'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Move menu
      tags:
      - sys
  /sys/menus/{slug}:
    delete:
      description: Delete a menu by ID or slug.
      parameters:
      - description: Menu ID or slug
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Delete menu
      tags:
      - sys
    get:
      description: Retrieve a menu by ID or slug.
      parameters:
      - description: Menu ID or slug
        in: path
        name: slug
        required: true
        type: string
      - in: query
        name: children
        type: boolean
      - in: query
        name: menu
        type: string
      - in: query
        name: parent
        type: string
      - in: query
        name: sort_by
        type: string
      - in: query
        name: type
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_system_structs.ReadMenu'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Get menu
      tags:
      - sys
  /sys/menus/authorized/{user_id}:
    get:
      description: Retrieve menus that a user is authorized to access.
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/ncobase_system_structs.ReadMenu'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Get user authorized menus
      tags:
      - sys
  /sys/menus/navigation:
    get:
      description: Retrieve the system navigation menu groups organized by type.
      parameters:
      - default: order
        description: Sort by field (order, created_at, name)
        in: query
        name: sort_by
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_system_structs.NavigationMenus'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Get navigation menus
      tags:
      - sys
  /sys/menus/reorder:
    post:
      consumes:
      - application/json
      description: Reorder a set of sibling menus.
      parameters:
      - description: Array of menu IDs in desired order
        in: body
        name: body
        required: true
        schema:
          items:
            type: string
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Reorder menus
      tags:
      - sys
  /sys/menus/slug/{slug}:
    get:
      description: Retrieve a menu by its slug.
      parameters:
      - description: Menu slug
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_system_structs.ReadMenu'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Get menu by slug
      tags:
      - sys
  /sys/menus/tree:
    get:
      description: Retrieve the menu tree structure.
      parameters:
      - in: query
        name: children
        type: boolean
      - in: query
        name: menu
        type: string
      - in: query
        name: parent
        type: string
      - in: query
        name: sort_by
        type: string
      - in: query
        name: type
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/ncobase_system_structs.ReadMenu'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Get menu tree
      tags:
      - sys
  /sys/options:
    get:
      description: Retrieve a list of options.
      parameters:
      - in: query
        name: autoload
        type: boolean
      - in: query
        name: cursor
        type: string
      - in: query
        name: direction
        type: string
      - in: query
        name: limit
        type: integer
      - in: query
        name: prefix
        type: string
      - in: query
        name: sort_by
        type: string
      - in: query
        name: type
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/ncobase_system_structs.ReadOption'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: List options
      tags:
      - sys
    post:
      consumes:
      - application/json
      description: Create a new option.
      parameters:
      - description: OptionBody object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ncobase_system_structs.OptionBody'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_system_structs.ReadOption'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Create option
      tags:
      - sys
    put:
      consumes:
      - application/json
      description: Update an existing option.
      parameters:
      - description: UpdateOptionBody object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ncobase_system_structs.UpdateOptionBody'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_system_structs.ReadOption'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Update option
      tags:
      - sys
  /sys/options/{option}:
    delete:
      description: Delete an option by ID or name.
      parameters:
      - description: Option ID or name
        in: path
        name: option
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Delete option
      tags:
      - sys
    get:
      description: Retrieve an option by ID or name.
      parameters:
      - description: Option ID or name
        in: path
        name: option
        required: true
        type: string
      - in: query
        name: option
        type: string
      - in: query
        name: sort_by
        type: string
      - in: query
        name: type
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_system_structs.ReadOption'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Get option
      tags:
      - sys
  /sys/options/batch:
    post:
      consumes:
      - application/json
      description: Retrieve multiple options by their names.
      parameters:
      - description: Array of option names
        in: body
        name: body
        required: true
        schema:
          items:
            type: string
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            additionalProperties:
              $ref: '#/definitions/ncobase_system_structs.ReadOption'
            type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Batch get options
      tags:
      - sys
  /sys/options/name/{name}:
    get:
      description: Retrieve an option by its name.
      parameters:
      - description: Option name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_system_structs.ReadOption'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Get option by name
      tags:
      - sys
  /sys/options/prefix:
    delete:
      consumes:
      - application/json
      description: Delete options matching a prefix pattern.
      parameters:
      - description: Name prefix pattern
        in: query
        name: prefix
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Delete options by prefix
      tags:
      - sys
  /sys/options/type/{type}:
    get:
      description: Retrieve options by their type.
      parameters:
      - description: Option type
        in: path
        name: type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/ncobase_system_structs.ReadOption'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Get options by type
      tags:
      - sys
  /sys/permissions:
    get:
      description: Retrieve a list of permissions based on the provided query parameters
      parameters:
      - in: query
        name: cursor
        type: string
      - in: query
        name: direction
        type: string
      - in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/ncobase_access_structs.ReadPermission'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: List all permissions
      tags:
      - sys
    post:
      consumes:
      - application/json
      description: Create a new permission with the provided data
      parameters:
      - description: Permission data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ncobase_access_structs.CreatePermissionBody'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_access_structs.ReadPermission'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Create a new permission
      tags:
      - sys
  /sys/permissions/{slug}:
    delete:
      description: Delete a permission by its slug or ID
      parameters:
      - description: Permission slug or ID
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_access_structs.ReadPermission'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Delete a permission by slug or ID
      tags:
      - sys
    get:
      description: Retrieve a permission by its slug or ID
      parameters:
      - description: Permission slug or ID
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_access_structs.ReadPermission'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Get a permission by slug or ID
      tags:
      - sys
    put:
      consumes:
      - application/json
      description: Update an existing permission with the provided data
      parameters:
      - description: Permission slug or ID
        in: path
        name: slug
        required: true
        type: string
      - description: Permission data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_access_structs.ReadPermission'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Update an existing permission
      tags:
      - sys
  /sys/policies:
    get:
      description: Retrieve a list of Casbin rules.
      parameters:
      - in: query
        name: cursor
        type: string
      - in: query
        name: direction
        type: string
      - in: query
        name: limit
        type: integer
      - in: query
        name: p_type
        type: string
      - in: query
        name: v0
        type: string
      - in: query
        name: v1
        type: string
      - in: query
        name: v2
        type: string
      - in: query
        name: v3
        type: string
      - in: query
        name: v4
        type: string
      - in: query
        name: v5
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/ncobase_access_structs.CasbinRuleBody'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: List Casbin rules
      tags:
      - sys
    post:
      consumes:
      - application/json
      description: Create a new Casbin rule.
      parameters:
      - description: CasbinRuleBody object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ncobase_access_structs.CasbinRuleBody'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_access_structs.ReadCasbinRule'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Create Casbin rule
      tags:
      - sys
  /sys/policies/{id}:
    delete:
      description: Delete an existing Casbin rule.
      parameters:
      - description: Casbin rule ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Delete Casbin rule
      tags:
      - sys
    get:
      description: Retrieve details of a Casbin rule.
      parameters:
      - description: Casbin rule ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_access_structs.ReadCasbinRule'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Get Casbin rule
      tags:
      - sys
    put:
      consumes:
      - application/json
      description: Update an existing Casbin rule, either fully or partially.
      parameters:
      - description: Casbin rule ID
        in: path
        name: id
        required: true
        type: string
      - description: CasbinRuleBody object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ncobase_access_structs.CasbinRuleBody'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_access_structs.ReadCasbinRule'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Update Casbin rule
      tags:
      - sys
  /sys/roles:
    get:
      description: Retrieve a list of roles based on the provided query parameters
      parameters:
      - in: query
        name: cursor
        type: string
      - in: query
        name: direction
        type: string
      - in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/ncobase_access_structs.ReadRole'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: List all roles
      tags:
      - sys
    post:
      consumes:
      - application/json
      description: Create a new role with the provided data
      parameters:
      - description: Role data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ncobase_access_structs.CreateRoleBody'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_access_structs.ReadRole'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Create a new role
      tags:
      - sys
  /sys/roles/{slug}:
    delete:
      description: Delete a role by its slug or ID
      parameters:
      - description: Role slug or ID
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_access_structs.ReadRole'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Delete a role by slug or ID
      tags:
      - sys
    get:
      description: Retrieve a role by its slug or ID
      parameters:
      - description: Role slug or ID
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_access_structs.ReadRole'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Get a role by slug or ID
      tags:
      - sys
    put:
      consumes:
      - application/json
      description: Update an existing role with the provided data
      parameters:
      - description: Role slug or ID
        in: path
        name: slug
        required: true
        type: string
      - description: Role data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_access_structs.ReadRole'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Update an existing role
      tags:
      - sys
  /sys/roles/{slug}/permissions:
    get:
      description: Retrieve a list of permissions associated with a role by its ID
      parameters:
      - description: Role ID
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: List permissions for a role
      tags:
      - sys
  /sys/tenants:
    get:
      description: Retrieve a list of tenants.
      parameters:
      - in: query
        name: cursor
        type: string
      - in: query
        name: direction
        type: string
      - in: query
        name: limit
        type: integer
      - in: query
        name: user
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/ncobase_tenant_structs.ReadTenant'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: List tenants
      tags:
      - sys
    post:
      consumes:
      - application/json
      description: Create a new tenant.
      parameters:
      - description: CreateTenantBody object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ncobase_tenant_structs.CreateTenantBody'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_tenant_structs.ReadTenant'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Create tenant
      tags:
      - sys
    put:
      consumes:
      - application/json
      description: Update the tenant information.
      parameters:
      - description: Tenant ID
        in: path
        name: slug
        required: true
        type: string
      - description: UpdateTenantBody object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ncobase_tenant_structs.UpdateTenantBody'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_tenant_structs.ReadTenant'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Update tenant
      tags:
      - sys
  /sys/tenants/{tenantId}:
    delete:
      description: Delete a specific tenant.
      parameters:
      - description: Tenant ID
        in: path
        name: tenantId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Delete tenant
      tags:
      - sys
    get:
      description: Retrieve information about a specific tenant.
      parameters:
      - description: Tenant ID
        in: path
        name: tenantId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_tenant_structs.ReadTenant'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Get tenant
      tags:
      - sys
  /sys/tenants/{tenantId}/attachments:
    get:
      description: Retrieve a list of attachments associated
      parameters:
      - description: Tenant ID
        in: path
        name: tenantId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: List tenant attachments
      tags:
      - sys
  /sys/tenants/{tenantId}/billing/invoice:
    post:
      consumes:
      - application/json
      description: Generate a new invoice for a tenant
      parameters:
      - description: Tenant ID
        in: path
        name: tenantId
        required: true
        type: string
      - description: Invoice generation request
        in: body
        name: body
        required: true
        schema:
          additionalProperties:
            type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_tenant_structs.ReadTenantBilling'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Generate invoice
      tags:
      - sys
  /sys/tenants/{tenantId}/billing/overdue:
    get:
      description: Retrieve overdue billing records for a tenant
      parameters:
      - description: Tenant ID
        in: path
        name: tenantId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/ncobase_tenant_structs.ReadTenantBilling'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Get overdue billing
      tags:
      - sys
  /sys/tenants/{tenantId}/billing/summary:
    get:
      description: Retrieve billing summary for a tenant
      parameters:
      - description: Tenant ID
        in: path
        name: tenantId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_tenant_structs.BillingSummary'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Get billing summary
      tags:
      - sys
  /sys/tenants/{tenantId}/dictionaries:
    get:
      description: Get all dictionaries for a tenant
      parameters:
      - description: Tenant ID
        in: path
        name: tenantId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            additionalProperties: true
            type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Get tenant dictionaries
      tags:
      - sys
    post:
      consumes:
      - application/json
      description: Add a dictionary to a tenant
      parameters:
      - description: Tenant ID
        in: path
        name: tenantId
        required: true
        type: string
      - description: AddDictionaryToTenantRequest object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ncobase_tenant_structs.AddDictionaryToTenantRequest'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_tenant_structs.TenantDictionary'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Add dictionary to tenant
      tags:
      - sys
  /sys/tenants/{tenantId}/dictionaries/{dictionaryId}:
    delete:
      description: Remove a dictionary from a tenant
      parameters:
      - description: Tenant ID
        in: path
        name: tenantId
        required: true
        type: string
      - description: Dictionary ID
        in: path
        name: dictionaryId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Remove dictionary from tenant
      tags:
      - sys
  /sys/tenants/{tenantId}/dictionaries/{dictionaryId}/check:
    get:
      description: Check if a dictionary belongs to a tenant
      parameters:
      - description: Tenant ID
        in: path
        name: tenantId
        required: true
        type: string
      - description: Dictionary ID
        in: path
        name: dictionaryId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            additionalProperties:
              type: boolean
            type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Check dictionary in tenant
      tags:
      - sys
  /sys/tenants/{tenantId}/groups:
    get:
      description: Get all groups belonging to a specific tenant
      parameters:
      - description: Tenant ID
        in: path
        name: tenantId
        required: true
        type: string
      - in: query
        name: children
        type: boolean
      - in: query
        name: cursor
        type: string
      - in: query
        name: direction
        type: string
      - in: query
        name: limit
        type: integer
      - in: query
        name: parent
        type: string
      - in: query
        name: sort_by
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/ncobase_tenant_structs.ReadGroup'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Get tenant groups
      tags:
      - sys
    post:
      consumes:
      - application/json
      description: Add a group to a specific tenant
      parameters:
      - description: Tenant ID
        in: path
        name: tenantId
        required: true
        type: string
      - description: AddTenantGroupRequest object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ncobase_tenant_structs.AddTenantGroupRequest'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_tenant_structs.TenantGroupRelation'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Add group to tenant
      tags:
      - sys
  /sys/tenants/{tenantId}/groups/{groupId}:
    delete:
      description: Remove a group from a specific tenant
      parameters:
      - description: Tenant ID
        in: path
        name: tenantId
        required: true
        type: string
      - description: Group ID
        in: path
        name: groupId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Remove group from tenant
      tags:
      - sys
  /sys/tenants/{tenantId}/groups/{groupId}/check:
    get:
      description: Check if a group belongs to a specific tenant
      parameters:
      - description: Tenant ID
        in: path
        name: tenantId
        required: true
        type: string
      - description: Group ID
        in: path
        name: groupId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            additionalProperties:
              type: boolean
            type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Check if group is in tenant
      tags:
      - sys
  /sys/tenants/{tenantId}/menu:
    get:
      description: Retrieve the menu associated
      parameters:
      - description: Tenant ID
        in: path
        name: tenantId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Get tenant menu
      tags:
      - sys
  /sys/tenants/{tenantId}/menus:
    get:
      description: Get all menus for a tenant
      parameters:
      - description: Tenant ID
        in: path
        name: tenantId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              type: string
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Get tenant menus
      tags:
      - sys
    post:
      consumes:
      - application/json
      description: Add a menu to a tenant
      parameters:
      - description: Tenant ID
        in: path
        name: tenantId
        required: true
        type: string
      - description: AddMenuToTenantRequest object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ncobase_tenant_structs.AddMenuToTenantRequest'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_tenant_structs.TenantMenu'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Add menu to tenant
      tags:
      - sys
  /sys/tenants/{tenantId}/menus/{menuId}:
    delete:
      description: Remove a menu from a tenant
      parameters:
      - description: Tenant ID
        in: path
        name: tenantId
        required: true
        type: string
      - description: Menu ID
        in: path
        name: menuId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Remove menu from tenant
      tags:
      - sys
  /sys/tenants/{tenantId}/menus/{menuId}/check:
    get:
      description: Check if a menu belongs to a tenant
      parameters:
      - description: Tenant ID
        in: path
        name: tenantId
        required: true
        type: string
      - description: Menu ID
        in: path
        name: menuId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            additionalProperties:
              type: boolean
            type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Check menu in tenant
      tags:
      - sys
  /sys/tenants/{tenantId}/options:
    get:
      description: Get all options for a tenant
      parameters:
      - description: Tenant ID
        in: path
        name: tenantId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              type: string
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Get tenant option
      tags:
      - sys
    post:
      consumes:
      - application/json
      description: Add options to a tenant
      parameters:
      - description: Tenant ID
        in: path
        name: tenantId
        required: true
        type: string
      - description: AddOptionsToTenantRequest object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ncobase_tenant_structs.AddOptionsToTenantRequest'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_tenant_structs.TenantOption'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Add options to tenant
      tags:
      - sys
  /sys/tenants/{tenantId}/options/{optionsId}:
    delete:
      description: Remove options from a tenant
      parameters:
      - description: Tenant ID
        in: path
        name: tenantId
        required: true
        type: string
      - description: Options ID
        in: path
        name: optionsId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Remove options from tenant
      tags:
      - sys
  /sys/tenants/{tenantId}/options/{optionsId}/check:
    get:
      description: Check if options belong to a tenant
      parameters:
      - description: Tenant ID
        in: path
        name: tenantId
        required: true
        type: string
      - description: Options ID
        in: path
        name: optionsId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            additionalProperties:
              type: boolean
            type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Check options in tenant
      tags:
      - sys
  /sys/tenants/{tenantId}/quotas:
    get:
      description: Retrieve all quotas for a tenant
      parameters:
      - description: Tenant ID
        in: path
        name: tenantId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/ncobase_tenant_structs.ReadTenantQuota'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Get tenant quota summary
      tags:
      - sys
  /sys/tenants/{tenantId}/roles:
    get:
      description: Retrieve a list of roles associated
      parameters:
      - description: Tenant ID
        in: path
        name: tenantId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: List tenant roles
      tags:
      - sys
  /sys/tenants/{tenantId}/roles/{roleId}/users:
    get:
      description: Get all users that have a specific role in a tenant
      parameters:
      - description: Tenant ID
        in: path
        name: tenantId
        required: true
        type: string
      - description: Role ID
        in: path
        name: roleId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_tenant_structs.TenantRoleUsersResponse'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Get tenant users by role
      tags:
      - sys
  /sys/tenants/{tenantId}/setting:
    get:
      description: Retrieve the settings associated
      parameters:
      - description: Tenant ID
        in: path
        name: tenantId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Get tenant setting
      tags:
      - sys
  /sys/tenants/{tenantId}/settings:
    get:
      description: Retrieve all settings for a specific tenant
      parameters:
      - description: Tenant ID
        in: path
        name: tenantId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            additionalProperties: true
            type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Get all tenant settings
      tags:
      - sys
  /sys/tenants/{tenantId}/settings/{key}:
    get:
      description: Retrieve a specific setting for a tenant
      parameters:
      - description: Tenant ID
        in: path
        name: tenantId
        required: true
        type: string
      - description: Setting Key
        in: path
        name: key
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            additionalProperties: true
            type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Get specific tenant setting
      tags:
      - sys
    put:
      consumes:
      - application/json
      description: Set a specific setting for a tenant
      parameters:
      - description: Tenant ID
        in: path
        name: tenantId
        required: true
        type: string
      - description: Setting Key
        in: path
        name: key
        required: true
        type: string
      - description: Setting value
        in: body
        name: body
        required: true
        schema:
          additionalProperties:
            type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Set tenant setting
      tags:
      - sys
  /sys/tenants/{tenantId}/settings/public:
    get:
      description: Retrieve public settings for a specific tenant
      parameters:
      - description: Tenant ID
        in: path
        name: tenantId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            additionalProperties: true
            type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      summary: Get public tenant settings
      tags:
      - sys
  /sys/tenants/{tenantId}/users:
    get:
      description: List all users in a tenant with their roles
      parameters:
      - description: Tenant ID
        in: path
        name: tenantId
        required: true
        type: string
      - in: query
        name: cursor
        type: string
      - in: query
        name: direction
        type: string
      - in: query
        name: limit
        type: integer
      - in: query
        name: role_id
        type: string
      - in: query
        name: sort_by
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_tenant_structs.TenantUsersListResponse'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: List tenant users
      tags:
      - sys
  /sys/tenants/{tenantId}/users/{userId}/roles:
    put:
      consumes:
      - application/json
      description: Update a user's role in a tenant
      parameters:
      - description: Tenant ID
        in: path
        name: tenantId
        required: true
        type: string
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      - description: UpdateUserTenantRoleRequest object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ncobase_tenant_structs.UpdateUserTenantRoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_tenant_structs.UserTenantRoleResponse'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Update user tenant role
      tags:
      - sys
  /sys/tenants/{tenantId}/users/{userId}/roles/{roleId}:
    delete:
      description: Remove a user from a specific role in a tenant
      parameters:
      - description: Tenant ID
        in: path
        name: tenantId
        required: true
        type: string
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      - description: Role ID
        in: path
        name: roleId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Remove user from tenant role
      tags:
      - sys
  /sys/tenants/{tenantId}/users/{username}/roles:
    get:
      description: Get all roles a user has in a specific tenant
      parameters:
      - description: Tenant ID
        in: path
        name: tenantId
        required: true
        type: string
      - description: User ID or username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_tenant_structs.UserTenantRolesResponse'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Get user tenant roles
      tags:
      - sys
  /sys/tenants/{tenantId}/users/{username}/roles/{roleId}/check:
    get:
      description: Check if a user has a specific role in a tenant
      parameters:
      - description: Tenant ID
        in: path
        name: tenantId
        required: true
        type: string
      - description: User ID or username
        in: path
        name: username
        required: true
        type: string
      - description: Role ID
        in: path
        name: roleId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            additionalProperties:
              type: boolean
            type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Check user tenant role
      tags:
      - sys
  /sys/tenants/{tenantId}/users/roles:
    post:
      consumes:
      - application/json
      description: Add a user to a tenant
      parameters:
      - description: Tenant ID
        in: path
        name: tenantId
        required: true
        type: string
      - description: AddUserToTenantRoleRequest object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ncobase_tenant_structs.AddUserToTenantRoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_tenant_structs.UserTenantRoleResponse'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Add user to tenant role
      tags:
      - sys
  /sys/tenants/{tenantId}/users/roles/bulk:
    put:
      consumes:
      - application/json
      description: Bulk update multiple user tenant roles
      parameters:
      - description: Tenant ID
        in: path
        name: tenantId
        required: true
        type: string
      - description: BulkUpdateUserTenantRolesRequest object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ncobase_tenant_structs.BulkUpdateUserTenantRolesRequest'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_tenant_structs.BulkUpdateResponse'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Bulk update user tenant roles
      tags:
      - sys
  /sys/tenants/billing:
    get:
      description: Retrieve a list of tenant billing records
      parameters:
      - enum:
        - monthly
        - yearly
        - one_time
        - usage_based
        in: query
        name: billing_period
        type: string
        x-enum-varnames:
        - PeriodMonthly
        - PeriodYearly
        - PeriodOneTime
        - PeriodUsage
      - in: query
        name: cursor
        type: string
      - in: query
        name: direction
        type: string
      - in: query
        name: from_date
        type: integer
      - in: query
        name: is_overdue
        type: boolean
      - in: query
        name: limit
        type: integer
      - enum:
        - pending
        - paid
        - overdue
        - cancelled
        - refunded
        in: query
        name: status
        type: string
        x-enum-varnames:
        - StatusPending
        - StatusPaid
        - StatusOverdue
        - StatusCancelled
        - StatusRefunded
      - in: query
        name: tenant_id
        type: string
      - in: query
        name: to_date
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/ncobase_tenant_structs.ReadTenantBilling'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: List tenant billing
      tags:
      - sys
    post:
      consumes:
      - application/json
      description: Create a new tenant billing record
      parameters:
      - description: Billing record
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ncobase_tenant_structs.CreateTenantBillingBody'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_tenant_structs.ReadTenantBilling'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Create tenant billing
      tags:
      - sys
  /sys/tenants/billing/{id}:
    delete:
      description: Delete a tenant billing record
      parameters:
      - description: Billing ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Delete tenant billing
      tags:
      - sys
    get:
      description: Retrieve a tenant billing record by ID
      parameters:
      - description: Billing ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_tenant_structs.ReadTenantBilling'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Get tenant billing
      tags:
      - sys
    put:
      consumes:
      - application/json
      description: Update an existing tenant billing record
      parameters:
      - description: Billing ID
        in: path
        name: id
        required: true
        type: string
      - description: Update data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_tenant_structs.ReadTenantBilling'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Update tenant billing
      tags:
      - sys
  /sys/tenants/billing/payment:
    post:
      consumes:
      - application/json
      description: Process payment for a billing record
      parameters:
      - description: Payment request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ncobase_tenant_structs.PaymentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Process payment
      tags:
      - sys
  /sys/tenants/quotas:
    get:
      description: Retrieve a list of tenant quotas
      parameters:
      - in: query
        name: cursor
        type: string
      - in: query
        name: direction
        type: string
      - in: query
        name: enabled
        type: boolean
      - in: query
        name: limit
        type: integer
      - enum:
        - users
        - storage
        - api_calls
        - projects
        - custom
        in: query
        name: quota_type
        type: string
        x-enum-varnames:
        - QuotaTypeUser
        - QuotaTypeStorage
        - QuotaTypeAPI
        - QuotaTypeProject
        - QuotaTypeCustom
      - in: query
        name: tenant_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/ncobase_tenant_structs.ReadTenantQuota'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: List tenant quotas
      tags:
      - sys
    post:
      consumes:
      - application/json
      description: Create a new tenant quota configuration
      parameters:
      - description: Quota configuration
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ncobase_tenant_structs.CreateTenantQuotaBody'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_tenant_structs.ReadTenantQuota'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Create tenant quota
      tags:
      - sys
  /sys/tenants/quotas/{id}:
    delete:
      description: Delete a tenant quota configuration
      parameters:
      - description: Quota ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Delete tenant quota
      tags:
      - sys
    get:
      description: Retrieve a tenant quota by ID
      parameters:
      - description: Quota ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_tenant_structs.ReadTenantQuota'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Get tenant quota
      tags:
      - sys
    put:
      consumes:
      - application/json
      description: Update an existing tenant quota configuration
      parameters:
      - description: Quota ID
        in: path
        name: id
        required: true
        type: string
      - description: Update data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_tenant_structs.ReadTenantQuota'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Update tenant quota
      tags:
      - sys
  /sys/tenants/quotas/check:
    get:
      description: Check if tenant can use additional quota
      parameters:
      - description: Tenant ID
        in: query
        name: tenantId
        required: true
        type: string
      - description: Quota Type
        in: query
        name: quota_type
        required: true
        type: string
      - description: Requested Amount
        in: query
        name: amount
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            additionalProperties:
              type: boolean
            type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Check quota limit
      tags:
      - sys
  /sys/tenants/quotas/usage:
    post:
      consumes:
      - application/json
      description: Update the current usage of a quota
      parameters:
      - description: Usage update request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ncobase_tenant_structs.QuotaUsageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Update quota usage
      tags:
      - sys
  /sys/tenants/settings:
    get:
      description: Retrieve a list of tenant settings
      parameters:
      - in: query
        name: category
        type: string
      - in: query
        name: cursor
        type: string
      - in: query
        name: direction
        type: string
      - in: query
        name: is_public
        type: boolean
      - in: query
        name: is_required
        type: boolean
      - in: query
        name: limit
        type: integer
      - enum:
        - system
        - tenant
        - user
        - feature
        in: query
        name: scope
        type: string
        x-enum-varnames:
        - ScopeSystem
        - ScopeTenant
        - ScopeUser
        - ScopeFeature
      - in: query
        name: tenant_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/ncobase_tenant_structs.ReadTenantSetting'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: List tenant settings
      tags:
      - sys
    post:
      consumes:
      - application/json
      description: Create a new tenant setting configuration
      parameters:
      - description: Setting configuration
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ncobase_tenant_structs.CreateTenantSettingBody'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_tenant_structs.ReadTenantSetting'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Create tenant setting
      tags:
      - sys
  /sys/tenants/settings/{id}:
    delete:
      description: Delete a tenant setting configuration
      parameters:
      - description: Setting ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Delete tenant setting
      tags:
      - sys
    get:
      description: Retrieve a tenant setting by ID
      parameters:
      - description: Setting ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_tenant_structs.ReadTenantSetting'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Get tenant setting
      tags:
      - sys
    put:
      consumes:
      - application/json
      description: Update an existing tenant setting configuration
      parameters:
      - description: Setting ID
        in: path
        name: id
        required: true
        type: string
      - description: Update data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_tenant_structs.ReadTenantSetting'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Update tenant setting
      tags:
      - sys
  /sys/tenants/settings/bulk:
    post:
      consumes:
      - application/json
      description: Update multiple tenant settings at once
      parameters:
      - description: Bulk update request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ncobase_tenant_structs.BulkUpdateSettingsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Bulk update tenant settings
      tags:
      - sys
  /sys/users:
    get:
      description: List all users.
      parameters:
      - description: Cursor for pagination
        in: query
        name: cursor
        type: string
      - description: Number of items to return
        in: query
        name: limit
        type: integer
      - description: Direction of pagination (forward or backward)
        in: query
        name: direction
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/ncobase_user_structs.ReadUser'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      summary: List users
      tags:
      - sys
    post:
      consumes:
      - application/json
      description: Create a new user.
      parameters:
      - description: User information
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/ncobase_user_structs.UserBody'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_user_structs.ReadUser'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      summary: Create user
      tags:
      - sys
  /sys/users/{username}:
    delete:
      description: Delete an existing user.
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      summary: Delete user
      tags:
      - sys
    get:
      description: Retrieve information about a specific user.
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_user_structs.ReadUser'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      summary: Get user
      tags:
      - sys
    put:
      consumes:
      - application/json
      description: Update an existing user.
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      - description: User information to update
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_user_structs.ReadUser'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      summary: Update user
      tags:
      - sys
  /sys/users/{username}/api-keys:
    get:
      description: Retrieve all API keys for a specific user
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/ncobase_user_structs.ApiKey'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Get user API keys
      tags:
      - sys
  /sys/users/{username}/meshes:
    get:
      description: Retrieve aggregated user information
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      - description: Include API keys
        in: query
        name: include_api_keys
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_user_structs.UserMeshes'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Get user meshes
      tags:
      - sys
    put:
      consumes:
      - application/json
      description: Update aggregated user information
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      - description: User meshes data
        in: body
        name: meshes
        required: true
        schema:
          $ref: '#/definitions/ncobase_user_structs.UserMeshes'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_user_structs.UserMeshes'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Update user meshes
      tags:
      - sys
  /sys/users/{username}/password:
    put:
      consumes:
      - application/json
      description: Update an existing user's password.
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      - description: Password information
        in: body
        name: password
        required: true
        schema:
          $ref: '#/definitions/ncobase_user_structs.UserPassword'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      summary: Update user password
      tags:
      - sys
  /sys/users/{username}/profile:
    get:
      description: Retrieve information about a specific user profile.
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      summary: Get user profile
      tags:
      - sys
    put:
      consumes:
      - application/json
      description: Update an existing user profile.
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      - description: User profile information to update
        in: body
        name: user_profile
        required: true
        schema:
          $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      summary: Update user profile
      tags:
      - sys
  /sys/users/{username}/status:
    patch:
      consumes:
      - application/json
      description: Update a user's status (active, inactive, pending).
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      - description: Status information
        in: body
        name: status
        required: true
        schema:
          additionalProperties:
            type: integer
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_user_structs.ReadUser'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      summary: Update user status
      tags:
      - sys
  /sys/users/{username}/tenant:
    get:
      description: Retrieve the tenant associated with the specified user.
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_tenant_structs.ReadTenant'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Get user owned tenant
      tags:
      - sys
  /sys/users/api-keys:
    post:
      consumes:
      - application/json
      description: Generate a new API key for the current user
      parameters:
      - description: API key request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/ncobase_user_structs.CreateApiKeyRequest'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_user_structs.ApiKey'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Generate API key
      tags:
      - sys
  /sys/users/api-keys/{id}:
    delete:
      description: Delete an API key by its ID
      parameters:
      - description: API key ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Delete API key
      tags:
      - sys
    get:
      description: Retrieve an API key by its ID
      parameters:
      - description: API key ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_user_structs.ApiKey'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Get API key
      tags:
      - sys
  /sys/users/by-email/{email}:
    get:
      description: Retrieve information about a specific user by email.
      parameters:
      - description: Email
        in: path
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_user_structs.ReadUser'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      summary: Get user by email
      tags:
      - sys
  /sys/users/by-username/{username}:
    get:
      description: Retrieve information about a specific user by username.
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_user_structs.ReadUser'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      summary: Get user by username
      tags:
      - sys
  /sys/users/filter:
    get:
      description: Filter users by search query, role, and status.
      parameters:
      - description: Search query for name, email or username
        in: query
        name: search
        type: string
      - description: Role filter
        in: query
        name: role
        type: string
      - description: Status filter
        in: query
        name: status
        type: string
      - description: Sort by field
        in: query
        name: sortBy
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/ncobase_user_structs.ReadUser'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      summary: Filter users
      tags:
      - sys
  /sys/users/me:
    get:
      description: Retrieve information about the current authenticated user.
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_user_structs.ReadUser'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      summary: Get current user
      tags:
      - sys
  /sys/users/me/api-keys:
    get:
      description: Retrieve all API keys for the current user
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/ncobase_user_structs.ApiKey'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Get my API keys
      tags:
      - sys
  /sys/users/reset-password:
    post:
      consumes:
      - application/json
      description: Request a password reset link to be sent to the user's email.
      parameters:
      - description: Password reset request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/ncobase_user_structs.PasswordResetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      summary: Reset user password
      tags:
      - sys
  /tbp/endpoints:
    get:
      description: Retrieve a list of endpoints based on the provided query parameters
      parameters:
      - in: query
        name: cursor
        type: string
      - in: query
        name: direction
        type: string
      - in: query
        name: disabled
        type: boolean
      - in: query
        name: limit
        type: integer
      - in: query
        name: name
        type: string
      - in: query
        name: protocol
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/ncobase_proxy_structs.ReadEndpoint'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: List all endpoints
      tags:
      - proxy
    post:
      consumes:
      - application/json
      description: Create a new third-party API endpoint
      parameters:
      - description: Endpoint data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ncobase_proxy_structs.CreateEndpointBody'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_proxy_structs.ReadEndpoint'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Create API endpoint
      tags:
      - proxy
  /tbp/endpoints/{id}:
    delete:
      description: Delete an endpoint by its ID
      parameters:
      - description: Endpoint ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Delete an endpoint by ID
      tags:
      - proxy
    get:
      description: Retrieve an endpoint by its ID
      parameters:
      - description: Endpoint ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_proxy_structs.ReadEndpoint'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Get an endpoint by ID
      tags:
      - proxy
    put:
      consumes:
      - application/json
      description: Update an existing endpoint with the provided data
      parameters:
      - description: Endpoint ID
        in: path
        name: id
        required: true
        type: string
      - description: Endpoint data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_proxy_structs.ReadEndpoint'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Update an existing endpoint
      tags:
      - proxy
  /tbp/routes:
    get:
      description: Retrieve a list of routes based on the provided query parameters
      parameters:
      - in: query
        name: cursor
        type: string
      - in: query
        name: direction
        type: string
      - in: query
        name: disabled
        type: boolean
      - in: query
        name: endpoint_id
        type: string
      - in: query
        name: limit
        type: integer
      - in: query
        name: method
        type: string
      - in: query
        name: name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/ncobase_proxy_structs.ReadRoute'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: List all routes
      tags:
      - proxy
    post:
      consumes:
      - application/json
      description: Create a new proxy route for a third-party API endpoint
      parameters:
      - description: Route data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ncobase_proxy_structs.CreateRouteBody'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_proxy_structs.ReadRoute'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Create API route
      tags:
      - proxy
  /tbp/routes/{id}:
    delete:
      description: Delete a route by its ID
      parameters:
      - description: Route ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Delete a route by ID
      tags:
      - proxy
    get:
      description: Retrieve a route by its ID
      parameters:
      - description: Route ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_proxy_structs.ReadRoute'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Get a route by ID
      tags:
      - proxy
    put:
      consumes:
      - application/json
      description: Update an existing route with the provided data
      parameters:
      - description: Route ID
        in: path
        name: id
        required: true
        type: string
      - description: Route data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_proxy_structs.ReadRoute'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Update an existing route
      tags:
      - proxy
  /tbp/transformers:
    get:
      description: Retrieve a list of transformers based on the provided query parameters
      parameters:
      - in: query
        name: content_type
        type: string
      - in: query
        name: cursor
        type: string
      - in: query
        name: direction
        type: string
      - in: query
        name: disabled
        type: boolean
      - in: query
        name: limit
        type: integer
      - in: query
        name: name
        type: string
      - in: query
        name: type
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/ncobase_proxy_structs.ReadTransformer'
            type: array
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: List all transformers
      tags:
      - proxy
    post:
      consumes:
      - application/json
      description: Create a new data transformer for API requests/responses
      parameters:
      - description: Transformer data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ncobase_proxy_structs.CreateTransformerBody'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_proxy_structs.ReadTransformer'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Create data transformer
      tags:
      - proxy
  /tbp/transformers/{id}:
    delete:
      description: Delete a transformer by its ID
      parameters:
      - description: Transformer ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Delete a transformer by ID
      tags:
      - proxy
    get:
      description: Retrieve a transformer by its ID
      parameters:
      - description: Transformer ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_proxy_structs.ReadTransformer'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Get a transformer by ID
      tags:
      - proxy
    put:
      consumes:
      - application/json
      description: Update an existing transformer with the provided data
      parameters:
      - description: Transformer ID
        in: path
        name: id
        required: true
        type: string
      - description: Transformer data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/github_com_ncobase_ncore_types.JSON'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/ncobase_proxy_structs.ReadTransformer'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      security:
      - Bearer: []
      summary: Update an existing transformer
      tags:
      - proxy
  /token-status:
    get:
      description: Get the current token status.
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            additionalProperties:
              allOf:
              - {}
              - properties:
                  is_authenticated:
                    type: boolean
                type: object
            type: object
        "401":
          description: unauthorized
          schema:
            $ref: '#/definitions/github_com_ncobase_ncore_net_resp.Exception'
      summary: Token status
      tags:
      - auth
securityDefinitions:
  Bearer:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
