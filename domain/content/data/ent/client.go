// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"ncobase/content/data/ent/migrate"

	"ncobase/content/data/ent/cmschannel"
	"ncobase/content/data/ent/distribution"
	"ncobase/content/data/ent/media"
	"ncobase/content/data/ent/taxonomy"
	"ncobase/content/data/ent/taxonomyrelation"
	"ncobase/content/data/ent/topic"
	"ncobase/content/data/ent/topicmedia"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// CMSChannel is the client for interacting with the CMSChannel builders.
	CMSChannel *CMSChannelClient
	// Distribution is the client for interacting with the Distribution builders.
	Distribution *DistributionClient
	// Media is the client for interacting with the Media builders.
	Media *MediaClient
	// Taxonomy is the client for interacting with the Taxonomy builders.
	Taxonomy *TaxonomyClient
	// TaxonomyRelation is the client for interacting with the TaxonomyRelation builders.
	TaxonomyRelation *TaxonomyRelationClient
	// Topic is the client for interacting with the Topic builders.
	Topic *TopicClient
	// TopicMedia is the client for interacting with the TopicMedia builders.
	TopicMedia *TopicMediaClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.CMSChannel = NewCMSChannelClient(c.config)
	c.Distribution = NewDistributionClient(c.config)
	c.Media = NewMediaClient(c.config)
	c.Taxonomy = NewTaxonomyClient(c.config)
	c.TaxonomyRelation = NewTaxonomyRelationClient(c.config)
	c.Topic = NewTopicClient(c.config)
	c.TopicMedia = NewTopicMediaClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:              ctx,
		config:           cfg,
		CMSChannel:       NewCMSChannelClient(cfg),
		Distribution:     NewDistributionClient(cfg),
		Media:            NewMediaClient(cfg),
		Taxonomy:         NewTaxonomyClient(cfg),
		TaxonomyRelation: NewTaxonomyRelationClient(cfg),
		Topic:            NewTopicClient(cfg),
		TopicMedia:       NewTopicMediaClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:              ctx,
		config:           cfg,
		CMSChannel:       NewCMSChannelClient(cfg),
		Distribution:     NewDistributionClient(cfg),
		Media:            NewMediaClient(cfg),
		Taxonomy:         NewTaxonomyClient(cfg),
		TaxonomyRelation: NewTaxonomyRelationClient(cfg),
		Topic:            NewTopicClient(cfg),
		TopicMedia:       NewTopicMediaClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		CMSChannel.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.CMSChannel, c.Distribution, c.Media, c.Taxonomy, c.TaxonomyRelation, c.Topic,
		c.TopicMedia,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.CMSChannel, c.Distribution, c.Media, c.Taxonomy, c.TaxonomyRelation, c.Topic,
		c.TopicMedia,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *CMSChannelMutation:
		return c.CMSChannel.mutate(ctx, m)
	case *DistributionMutation:
		return c.Distribution.mutate(ctx, m)
	case *MediaMutation:
		return c.Media.mutate(ctx, m)
	case *TaxonomyMutation:
		return c.Taxonomy.mutate(ctx, m)
	case *TaxonomyRelationMutation:
		return c.TaxonomyRelation.mutate(ctx, m)
	case *TopicMutation:
		return c.Topic.mutate(ctx, m)
	case *TopicMediaMutation:
		return c.TopicMedia.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// CMSChannelClient is a client for the CMSChannel schema.
type CMSChannelClient struct {
	config
}

// NewCMSChannelClient returns a client for the CMSChannel from the given config.
func NewCMSChannelClient(c config) *CMSChannelClient {
	return &CMSChannelClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `cmschannel.Hooks(f(g(h())))`.
func (c *CMSChannelClient) Use(hooks ...Hook) {
	c.hooks.CMSChannel = append(c.hooks.CMSChannel, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `cmschannel.Intercept(f(g(h())))`.
func (c *CMSChannelClient) Intercept(interceptors ...Interceptor) {
	c.inters.CMSChannel = append(c.inters.CMSChannel, interceptors...)
}

// Create returns a builder for creating a CMSChannel entity.
func (c *CMSChannelClient) Create() *CMSChannelCreate {
	mutation := newCMSChannelMutation(c.config, OpCreate)
	return &CMSChannelCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CMSChannel entities.
func (c *CMSChannelClient) CreateBulk(builders ...*CMSChannelCreate) *CMSChannelCreateBulk {
	return &CMSChannelCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CMSChannelClient) MapCreateBulk(slice any, setFunc func(*CMSChannelCreate, int)) *CMSChannelCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CMSChannelCreateBulk{err: fmt.Errorf("calling to CMSChannelClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CMSChannelCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CMSChannelCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CMSChannel.
func (c *CMSChannelClient) Update() *CMSChannelUpdate {
	mutation := newCMSChannelMutation(c.config, OpUpdate)
	return &CMSChannelUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CMSChannelClient) UpdateOne(cc *CMSChannel) *CMSChannelUpdateOne {
	mutation := newCMSChannelMutation(c.config, OpUpdateOne, withCMSChannel(cc))
	return &CMSChannelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CMSChannelClient) UpdateOneID(id string) *CMSChannelUpdateOne {
	mutation := newCMSChannelMutation(c.config, OpUpdateOne, withCMSChannelID(id))
	return &CMSChannelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CMSChannel.
func (c *CMSChannelClient) Delete() *CMSChannelDelete {
	mutation := newCMSChannelMutation(c.config, OpDelete)
	return &CMSChannelDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CMSChannelClient) DeleteOne(cc *CMSChannel) *CMSChannelDeleteOne {
	return c.DeleteOneID(cc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CMSChannelClient) DeleteOneID(id string) *CMSChannelDeleteOne {
	builder := c.Delete().Where(cmschannel.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CMSChannelDeleteOne{builder}
}

// Query returns a query builder for CMSChannel.
func (c *CMSChannelClient) Query() *CMSChannelQuery {
	return &CMSChannelQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCMSChannel},
		inters: c.Interceptors(),
	}
}

// Get returns a CMSChannel entity by its id.
func (c *CMSChannelClient) Get(ctx context.Context, id string) (*CMSChannel, error) {
	return c.Query().Where(cmschannel.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CMSChannelClient) GetX(ctx context.Context, id string) *CMSChannel {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CMSChannelClient) Hooks() []Hook {
	return c.hooks.CMSChannel
}

// Interceptors returns the client interceptors.
func (c *CMSChannelClient) Interceptors() []Interceptor {
	return c.inters.CMSChannel
}

func (c *CMSChannelClient) mutate(ctx context.Context, m *CMSChannelMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CMSChannelCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CMSChannelUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CMSChannelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CMSChannelDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown CMSChannel mutation op: %q", m.Op())
	}
}

// DistributionClient is a client for the Distribution schema.
type DistributionClient struct {
	config
}

// NewDistributionClient returns a client for the Distribution from the given config.
func NewDistributionClient(c config) *DistributionClient {
	return &DistributionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `distribution.Hooks(f(g(h())))`.
func (c *DistributionClient) Use(hooks ...Hook) {
	c.hooks.Distribution = append(c.hooks.Distribution, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `distribution.Intercept(f(g(h())))`.
func (c *DistributionClient) Intercept(interceptors ...Interceptor) {
	c.inters.Distribution = append(c.inters.Distribution, interceptors...)
}

// Create returns a builder for creating a Distribution entity.
func (c *DistributionClient) Create() *DistributionCreate {
	mutation := newDistributionMutation(c.config, OpCreate)
	return &DistributionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Distribution entities.
func (c *DistributionClient) CreateBulk(builders ...*DistributionCreate) *DistributionCreateBulk {
	return &DistributionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *DistributionClient) MapCreateBulk(slice any, setFunc func(*DistributionCreate, int)) *DistributionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &DistributionCreateBulk{err: fmt.Errorf("calling to DistributionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*DistributionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &DistributionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Distribution.
func (c *DistributionClient) Update() *DistributionUpdate {
	mutation := newDistributionMutation(c.config, OpUpdate)
	return &DistributionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DistributionClient) UpdateOne(d *Distribution) *DistributionUpdateOne {
	mutation := newDistributionMutation(c.config, OpUpdateOne, withDistribution(d))
	return &DistributionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DistributionClient) UpdateOneID(id string) *DistributionUpdateOne {
	mutation := newDistributionMutation(c.config, OpUpdateOne, withDistributionID(id))
	return &DistributionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Distribution.
func (c *DistributionClient) Delete() *DistributionDelete {
	mutation := newDistributionMutation(c.config, OpDelete)
	return &DistributionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DistributionClient) DeleteOne(d *Distribution) *DistributionDeleteOne {
	return c.DeleteOneID(d.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DistributionClient) DeleteOneID(id string) *DistributionDeleteOne {
	builder := c.Delete().Where(distribution.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DistributionDeleteOne{builder}
}

// Query returns a query builder for Distribution.
func (c *DistributionClient) Query() *DistributionQuery {
	return &DistributionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDistribution},
		inters: c.Interceptors(),
	}
}

// Get returns a Distribution entity by its id.
func (c *DistributionClient) Get(ctx context.Context, id string) (*Distribution, error) {
	return c.Query().Where(distribution.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DistributionClient) GetX(ctx context.Context, id string) *Distribution {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTopic queries the topic edge of a Distribution.
func (c *DistributionClient) QueryTopic(d *Distribution) *TopicQuery {
	query := (&TopicClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(distribution.Table, distribution.FieldID, id),
			sqlgraph.To(topic.Table, topic.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, distribution.TopicTable, distribution.TopicColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChannel queries the channel edge of a Distribution.
func (c *DistributionClient) QueryChannel(d *Distribution) *CMSChannelQuery {
	query := (&CMSChannelClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(distribution.Table, distribution.FieldID, id),
			sqlgraph.To(cmschannel.Table, cmschannel.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, distribution.ChannelTable, distribution.ChannelColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DistributionClient) Hooks() []Hook {
	return c.hooks.Distribution
}

// Interceptors returns the client interceptors.
func (c *DistributionClient) Interceptors() []Interceptor {
	return c.inters.Distribution
}

func (c *DistributionClient) mutate(ctx context.Context, m *DistributionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DistributionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DistributionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DistributionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DistributionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Distribution mutation op: %q", m.Op())
	}
}

// MediaClient is a client for the Media schema.
type MediaClient struct {
	config
}

// NewMediaClient returns a client for the Media from the given config.
func NewMediaClient(c config) *MediaClient {
	return &MediaClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `media.Hooks(f(g(h())))`.
func (c *MediaClient) Use(hooks ...Hook) {
	c.hooks.Media = append(c.hooks.Media, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `media.Intercept(f(g(h())))`.
func (c *MediaClient) Intercept(interceptors ...Interceptor) {
	c.inters.Media = append(c.inters.Media, interceptors...)
}

// Create returns a builder for creating a Media entity.
func (c *MediaClient) Create() *MediaCreate {
	mutation := newMediaMutation(c.config, OpCreate)
	return &MediaCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Media entities.
func (c *MediaClient) CreateBulk(builders ...*MediaCreate) *MediaCreateBulk {
	return &MediaCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *MediaClient) MapCreateBulk(slice any, setFunc func(*MediaCreate, int)) *MediaCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &MediaCreateBulk{err: fmt.Errorf("calling to MediaClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*MediaCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &MediaCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Media.
func (c *MediaClient) Update() *MediaUpdate {
	mutation := newMediaMutation(c.config, OpUpdate)
	return &MediaUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MediaClient) UpdateOne(m *Media) *MediaUpdateOne {
	mutation := newMediaMutation(c.config, OpUpdateOne, withMedia(m))
	return &MediaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MediaClient) UpdateOneID(id string) *MediaUpdateOne {
	mutation := newMediaMutation(c.config, OpUpdateOne, withMediaID(id))
	return &MediaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Media.
func (c *MediaClient) Delete() *MediaDelete {
	mutation := newMediaMutation(c.config, OpDelete)
	return &MediaDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MediaClient) DeleteOne(m *Media) *MediaDeleteOne {
	return c.DeleteOneID(m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MediaClient) DeleteOneID(id string) *MediaDeleteOne {
	builder := c.Delete().Where(media.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MediaDeleteOne{builder}
}

// Query returns a query builder for Media.
func (c *MediaClient) Query() *MediaQuery {
	return &MediaQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeMedia},
		inters: c.Interceptors(),
	}
}

// Get returns a Media entity by its id.
func (c *MediaClient) Get(ctx context.Context, id string) (*Media, error) {
	return c.Query().Where(media.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MediaClient) GetX(ctx context.Context, id string) *Media {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *MediaClient) Hooks() []Hook {
	return c.hooks.Media
}

// Interceptors returns the client interceptors.
func (c *MediaClient) Interceptors() []Interceptor {
	return c.inters.Media
}

func (c *MediaClient) mutate(ctx context.Context, m *MediaMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&MediaCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&MediaUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&MediaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&MediaDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Media mutation op: %q", m.Op())
	}
}

// TaxonomyClient is a client for the Taxonomy schema.
type TaxonomyClient struct {
	config
}

// NewTaxonomyClient returns a client for the Taxonomy from the given config.
func NewTaxonomyClient(c config) *TaxonomyClient {
	return &TaxonomyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `taxonomy.Hooks(f(g(h())))`.
func (c *TaxonomyClient) Use(hooks ...Hook) {
	c.hooks.Taxonomy = append(c.hooks.Taxonomy, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `taxonomy.Intercept(f(g(h())))`.
func (c *TaxonomyClient) Intercept(interceptors ...Interceptor) {
	c.inters.Taxonomy = append(c.inters.Taxonomy, interceptors...)
}

// Create returns a builder for creating a Taxonomy entity.
func (c *TaxonomyClient) Create() *TaxonomyCreate {
	mutation := newTaxonomyMutation(c.config, OpCreate)
	return &TaxonomyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Taxonomy entities.
func (c *TaxonomyClient) CreateBulk(builders ...*TaxonomyCreate) *TaxonomyCreateBulk {
	return &TaxonomyCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TaxonomyClient) MapCreateBulk(slice any, setFunc func(*TaxonomyCreate, int)) *TaxonomyCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TaxonomyCreateBulk{err: fmt.Errorf("calling to TaxonomyClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TaxonomyCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TaxonomyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Taxonomy.
func (c *TaxonomyClient) Update() *TaxonomyUpdate {
	mutation := newTaxonomyMutation(c.config, OpUpdate)
	return &TaxonomyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TaxonomyClient) UpdateOne(t *Taxonomy) *TaxonomyUpdateOne {
	mutation := newTaxonomyMutation(c.config, OpUpdateOne, withTaxonomy(t))
	return &TaxonomyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TaxonomyClient) UpdateOneID(id string) *TaxonomyUpdateOne {
	mutation := newTaxonomyMutation(c.config, OpUpdateOne, withTaxonomyID(id))
	return &TaxonomyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Taxonomy.
func (c *TaxonomyClient) Delete() *TaxonomyDelete {
	mutation := newTaxonomyMutation(c.config, OpDelete)
	return &TaxonomyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TaxonomyClient) DeleteOne(t *Taxonomy) *TaxonomyDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TaxonomyClient) DeleteOneID(id string) *TaxonomyDeleteOne {
	builder := c.Delete().Where(taxonomy.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TaxonomyDeleteOne{builder}
}

// Query returns a query builder for Taxonomy.
func (c *TaxonomyClient) Query() *TaxonomyQuery {
	return &TaxonomyQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTaxonomy},
		inters: c.Interceptors(),
	}
}

// Get returns a Taxonomy entity by its id.
func (c *TaxonomyClient) Get(ctx context.Context, id string) (*Taxonomy, error) {
	return c.Query().Where(taxonomy.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TaxonomyClient) GetX(ctx context.Context, id string) *Taxonomy {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TaxonomyClient) Hooks() []Hook {
	return c.hooks.Taxonomy
}

// Interceptors returns the client interceptors.
func (c *TaxonomyClient) Interceptors() []Interceptor {
	return c.inters.Taxonomy
}

func (c *TaxonomyClient) mutate(ctx context.Context, m *TaxonomyMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TaxonomyCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TaxonomyUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TaxonomyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TaxonomyDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Taxonomy mutation op: %q", m.Op())
	}
}

// TaxonomyRelationClient is a client for the TaxonomyRelation schema.
type TaxonomyRelationClient struct {
	config
}

// NewTaxonomyRelationClient returns a client for the TaxonomyRelation from the given config.
func NewTaxonomyRelationClient(c config) *TaxonomyRelationClient {
	return &TaxonomyRelationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `taxonomyrelation.Hooks(f(g(h())))`.
func (c *TaxonomyRelationClient) Use(hooks ...Hook) {
	c.hooks.TaxonomyRelation = append(c.hooks.TaxonomyRelation, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `taxonomyrelation.Intercept(f(g(h())))`.
func (c *TaxonomyRelationClient) Intercept(interceptors ...Interceptor) {
	c.inters.TaxonomyRelation = append(c.inters.TaxonomyRelation, interceptors...)
}

// Create returns a builder for creating a TaxonomyRelation entity.
func (c *TaxonomyRelationClient) Create() *TaxonomyRelationCreate {
	mutation := newTaxonomyRelationMutation(c.config, OpCreate)
	return &TaxonomyRelationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TaxonomyRelation entities.
func (c *TaxonomyRelationClient) CreateBulk(builders ...*TaxonomyRelationCreate) *TaxonomyRelationCreateBulk {
	return &TaxonomyRelationCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TaxonomyRelationClient) MapCreateBulk(slice any, setFunc func(*TaxonomyRelationCreate, int)) *TaxonomyRelationCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TaxonomyRelationCreateBulk{err: fmt.Errorf("calling to TaxonomyRelationClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TaxonomyRelationCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TaxonomyRelationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TaxonomyRelation.
func (c *TaxonomyRelationClient) Update() *TaxonomyRelationUpdate {
	mutation := newTaxonomyRelationMutation(c.config, OpUpdate)
	return &TaxonomyRelationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TaxonomyRelationClient) UpdateOne(tr *TaxonomyRelation) *TaxonomyRelationUpdateOne {
	mutation := newTaxonomyRelationMutation(c.config, OpUpdateOne, withTaxonomyRelation(tr))
	return &TaxonomyRelationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TaxonomyRelationClient) UpdateOneID(id string) *TaxonomyRelationUpdateOne {
	mutation := newTaxonomyRelationMutation(c.config, OpUpdateOne, withTaxonomyRelationID(id))
	return &TaxonomyRelationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TaxonomyRelation.
func (c *TaxonomyRelationClient) Delete() *TaxonomyRelationDelete {
	mutation := newTaxonomyRelationMutation(c.config, OpDelete)
	return &TaxonomyRelationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TaxonomyRelationClient) DeleteOne(tr *TaxonomyRelation) *TaxonomyRelationDeleteOne {
	return c.DeleteOneID(tr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TaxonomyRelationClient) DeleteOneID(id string) *TaxonomyRelationDeleteOne {
	builder := c.Delete().Where(taxonomyrelation.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TaxonomyRelationDeleteOne{builder}
}

// Query returns a query builder for TaxonomyRelation.
func (c *TaxonomyRelationClient) Query() *TaxonomyRelationQuery {
	return &TaxonomyRelationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTaxonomyRelation},
		inters: c.Interceptors(),
	}
}

// Get returns a TaxonomyRelation entity by its id.
func (c *TaxonomyRelationClient) Get(ctx context.Context, id string) (*TaxonomyRelation, error) {
	return c.Query().Where(taxonomyrelation.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TaxonomyRelationClient) GetX(ctx context.Context, id string) *TaxonomyRelation {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TaxonomyRelationClient) Hooks() []Hook {
	return c.hooks.TaxonomyRelation
}

// Interceptors returns the client interceptors.
func (c *TaxonomyRelationClient) Interceptors() []Interceptor {
	return c.inters.TaxonomyRelation
}

func (c *TaxonomyRelationClient) mutate(ctx context.Context, m *TaxonomyRelationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TaxonomyRelationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TaxonomyRelationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TaxonomyRelationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TaxonomyRelationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown TaxonomyRelation mutation op: %q", m.Op())
	}
}

// TopicClient is a client for the Topic schema.
type TopicClient struct {
	config
}

// NewTopicClient returns a client for the Topic from the given config.
func NewTopicClient(c config) *TopicClient {
	return &TopicClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `topic.Hooks(f(g(h())))`.
func (c *TopicClient) Use(hooks ...Hook) {
	c.hooks.Topic = append(c.hooks.Topic, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `topic.Intercept(f(g(h())))`.
func (c *TopicClient) Intercept(interceptors ...Interceptor) {
	c.inters.Topic = append(c.inters.Topic, interceptors...)
}

// Create returns a builder for creating a Topic entity.
func (c *TopicClient) Create() *TopicCreate {
	mutation := newTopicMutation(c.config, OpCreate)
	return &TopicCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Topic entities.
func (c *TopicClient) CreateBulk(builders ...*TopicCreate) *TopicCreateBulk {
	return &TopicCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TopicClient) MapCreateBulk(slice any, setFunc func(*TopicCreate, int)) *TopicCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TopicCreateBulk{err: fmt.Errorf("calling to TopicClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TopicCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TopicCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Topic.
func (c *TopicClient) Update() *TopicUpdate {
	mutation := newTopicMutation(c.config, OpUpdate)
	return &TopicUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TopicClient) UpdateOne(t *Topic) *TopicUpdateOne {
	mutation := newTopicMutation(c.config, OpUpdateOne, withTopic(t))
	return &TopicUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TopicClient) UpdateOneID(id string) *TopicUpdateOne {
	mutation := newTopicMutation(c.config, OpUpdateOne, withTopicID(id))
	return &TopicUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Topic.
func (c *TopicClient) Delete() *TopicDelete {
	mutation := newTopicMutation(c.config, OpDelete)
	return &TopicDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TopicClient) DeleteOne(t *Topic) *TopicDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TopicClient) DeleteOneID(id string) *TopicDeleteOne {
	builder := c.Delete().Where(topic.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TopicDeleteOne{builder}
}

// Query returns a query builder for Topic.
func (c *TopicClient) Query() *TopicQuery {
	return &TopicQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTopic},
		inters: c.Interceptors(),
	}
}

// Get returns a Topic entity by its id.
func (c *TopicClient) Get(ctx context.Context, id string) (*Topic, error) {
	return c.Query().Where(topic.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TopicClient) GetX(ctx context.Context, id string) *Topic {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TopicClient) Hooks() []Hook {
	return c.hooks.Topic
}

// Interceptors returns the client interceptors.
func (c *TopicClient) Interceptors() []Interceptor {
	return c.inters.Topic
}

func (c *TopicClient) mutate(ctx context.Context, m *TopicMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TopicCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TopicUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TopicUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TopicDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Topic mutation op: %q", m.Op())
	}
}

// TopicMediaClient is a client for the TopicMedia schema.
type TopicMediaClient struct {
	config
}

// NewTopicMediaClient returns a client for the TopicMedia from the given config.
func NewTopicMediaClient(c config) *TopicMediaClient {
	return &TopicMediaClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `topicmedia.Hooks(f(g(h())))`.
func (c *TopicMediaClient) Use(hooks ...Hook) {
	c.hooks.TopicMedia = append(c.hooks.TopicMedia, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `topicmedia.Intercept(f(g(h())))`.
func (c *TopicMediaClient) Intercept(interceptors ...Interceptor) {
	c.inters.TopicMedia = append(c.inters.TopicMedia, interceptors...)
}

// Create returns a builder for creating a TopicMedia entity.
func (c *TopicMediaClient) Create() *TopicMediaCreate {
	mutation := newTopicMediaMutation(c.config, OpCreate)
	return &TopicMediaCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TopicMedia entities.
func (c *TopicMediaClient) CreateBulk(builders ...*TopicMediaCreate) *TopicMediaCreateBulk {
	return &TopicMediaCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TopicMediaClient) MapCreateBulk(slice any, setFunc func(*TopicMediaCreate, int)) *TopicMediaCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TopicMediaCreateBulk{err: fmt.Errorf("calling to TopicMediaClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TopicMediaCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TopicMediaCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TopicMedia.
func (c *TopicMediaClient) Update() *TopicMediaUpdate {
	mutation := newTopicMediaMutation(c.config, OpUpdate)
	return &TopicMediaUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TopicMediaClient) UpdateOne(tm *TopicMedia) *TopicMediaUpdateOne {
	mutation := newTopicMediaMutation(c.config, OpUpdateOne, withTopicMedia(tm))
	return &TopicMediaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TopicMediaClient) UpdateOneID(id string) *TopicMediaUpdateOne {
	mutation := newTopicMediaMutation(c.config, OpUpdateOne, withTopicMediaID(id))
	return &TopicMediaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TopicMedia.
func (c *TopicMediaClient) Delete() *TopicMediaDelete {
	mutation := newTopicMediaMutation(c.config, OpDelete)
	return &TopicMediaDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TopicMediaClient) DeleteOne(tm *TopicMedia) *TopicMediaDeleteOne {
	return c.DeleteOneID(tm.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TopicMediaClient) DeleteOneID(id string) *TopicMediaDeleteOne {
	builder := c.Delete().Where(topicmedia.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TopicMediaDeleteOne{builder}
}

// Query returns a query builder for TopicMedia.
func (c *TopicMediaClient) Query() *TopicMediaQuery {
	return &TopicMediaQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTopicMedia},
		inters: c.Interceptors(),
	}
}

// Get returns a TopicMedia entity by its id.
func (c *TopicMediaClient) Get(ctx context.Context, id string) (*TopicMedia, error) {
	return c.Query().Where(topicmedia.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TopicMediaClient) GetX(ctx context.Context, id string) *TopicMedia {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMedia queries the media edge of a TopicMedia.
func (c *TopicMediaClient) QueryMedia(tm *TopicMedia) *MediaQuery {
	query := (&MediaClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := tm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(topicmedia.Table, topicmedia.FieldID, id),
			sqlgraph.To(media.Table, media.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, topicmedia.MediaTable, topicmedia.MediaColumn),
		)
		fromV = sqlgraph.Neighbors(tm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTopic queries the topic edge of a TopicMedia.
func (c *TopicMediaClient) QueryTopic(tm *TopicMedia) *TopicQuery {
	query := (&TopicClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := tm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(topicmedia.Table, topicmedia.FieldID, id),
			sqlgraph.To(topic.Table, topic.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, topicmedia.TopicTable, topicmedia.TopicColumn),
		)
		fromV = sqlgraph.Neighbors(tm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TopicMediaClient) Hooks() []Hook {
	return c.hooks.TopicMedia
}

// Interceptors returns the client interceptors.
func (c *TopicMediaClient) Interceptors() []Interceptor {
	return c.inters.TopicMedia
}

func (c *TopicMediaClient) mutate(ctx context.Context, m *TopicMediaMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TopicMediaCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TopicMediaUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TopicMediaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TopicMediaDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown TopicMedia mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		CMSChannel, Distribution, Media, Taxonomy, TaxonomyRelation, Topic,
		TopicMedia []ent.Hook
	}
	inters struct {
		CMSChannel, Distribution, Media, Taxonomy, TaxonomyRelation, Topic,
		TopicMedia []ent.Interceptor
	}
)
