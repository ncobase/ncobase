// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/content/data/ent/cmschannel"
	"ncobase/content/data/ent/distribution"
	"ncobase/content/data/ent/predicate"
	"ncobase/content/data/ent/topic"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DistributionUpdate is the builder for updating Distribution entities.
type DistributionUpdate struct {
	config
	hooks    []Hook
	mutation *DistributionMutation
}

// Where appends a list predicates to the DistributionUpdate builder.
func (du *DistributionUpdate) Where(ps ...predicate.Distribution) *DistributionUpdate {
	du.mutation.Where(ps...)
	return du
}

// SetExtras sets the "extras" field.
func (du *DistributionUpdate) SetExtras(m map[string]interface{}) *DistributionUpdate {
	du.mutation.SetExtras(m)
	return du
}

// ClearExtras clears the value of the "extras" field.
func (du *DistributionUpdate) ClearExtras() *DistributionUpdate {
	du.mutation.ClearExtras()
	return du
}

// SetTenantID sets the "tenant_id" field.
func (du *DistributionUpdate) SetTenantID(s string) *DistributionUpdate {
	du.mutation.SetTenantID(s)
	return du
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (du *DistributionUpdate) SetNillableTenantID(s *string) *DistributionUpdate {
	if s != nil {
		du.SetTenantID(*s)
	}
	return du
}

// ClearTenantID clears the value of the "tenant_id" field.
func (du *DistributionUpdate) ClearTenantID() *DistributionUpdate {
	du.mutation.ClearTenantID()
	return du
}

// SetCreatedBy sets the "created_by" field.
func (du *DistributionUpdate) SetCreatedBy(s string) *DistributionUpdate {
	du.mutation.SetCreatedBy(s)
	return du
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (du *DistributionUpdate) SetNillableCreatedBy(s *string) *DistributionUpdate {
	if s != nil {
		du.SetCreatedBy(*s)
	}
	return du
}

// ClearCreatedBy clears the value of the "created_by" field.
func (du *DistributionUpdate) ClearCreatedBy() *DistributionUpdate {
	du.mutation.ClearCreatedBy()
	return du
}

// SetUpdatedBy sets the "updated_by" field.
func (du *DistributionUpdate) SetUpdatedBy(s string) *DistributionUpdate {
	du.mutation.SetUpdatedBy(s)
	return du
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (du *DistributionUpdate) SetNillableUpdatedBy(s *string) *DistributionUpdate {
	if s != nil {
		du.SetUpdatedBy(*s)
	}
	return du
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (du *DistributionUpdate) ClearUpdatedBy() *DistributionUpdate {
	du.mutation.ClearUpdatedBy()
	return du
}

// SetUpdatedAt sets the "updated_at" field.
func (du *DistributionUpdate) SetUpdatedAt(i int64) *DistributionUpdate {
	du.mutation.ResetUpdatedAt()
	du.mutation.SetUpdatedAt(i)
	return du
}

// AddUpdatedAt adds i to the "updated_at" field.
func (du *DistributionUpdate) AddUpdatedAt(i int64) *DistributionUpdate {
	du.mutation.AddUpdatedAt(i)
	return du
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (du *DistributionUpdate) ClearUpdatedAt() *DistributionUpdate {
	du.mutation.ClearUpdatedAt()
	return du
}

// SetTopicID sets the "topic_id" field.
func (du *DistributionUpdate) SetTopicID(s string) *DistributionUpdate {
	du.mutation.SetTopicID(s)
	return du
}

// SetNillableTopicID sets the "topic_id" field if the given value is not nil.
func (du *DistributionUpdate) SetNillableTopicID(s *string) *DistributionUpdate {
	if s != nil {
		du.SetTopicID(*s)
	}
	return du
}

// SetChannelID sets the "channel_id" field.
func (du *DistributionUpdate) SetChannelID(s string) *DistributionUpdate {
	du.mutation.SetChannelID(s)
	return du
}

// SetNillableChannelID sets the "channel_id" field if the given value is not nil.
func (du *DistributionUpdate) SetNillableChannelID(s *string) *DistributionUpdate {
	if s != nil {
		du.SetChannelID(*s)
	}
	return du
}

// SetStatus sets the "status" field.
func (du *DistributionUpdate) SetStatus(i int) *DistributionUpdate {
	du.mutation.ResetStatus()
	du.mutation.SetStatus(i)
	return du
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (du *DistributionUpdate) SetNillableStatus(i *int) *DistributionUpdate {
	if i != nil {
		du.SetStatus(*i)
	}
	return du
}

// AddStatus adds i to the "status" field.
func (du *DistributionUpdate) AddStatus(i int) *DistributionUpdate {
	du.mutation.AddStatus(i)
	return du
}

// SetScheduledAt sets the "scheduled_at" field.
func (du *DistributionUpdate) SetScheduledAt(i int64) *DistributionUpdate {
	du.mutation.ResetScheduledAt()
	du.mutation.SetScheduledAt(i)
	return du
}

// SetNillableScheduledAt sets the "scheduled_at" field if the given value is not nil.
func (du *DistributionUpdate) SetNillableScheduledAt(i *int64) *DistributionUpdate {
	if i != nil {
		du.SetScheduledAt(*i)
	}
	return du
}

// AddScheduledAt adds i to the "scheduled_at" field.
func (du *DistributionUpdate) AddScheduledAt(i int64) *DistributionUpdate {
	du.mutation.AddScheduledAt(i)
	return du
}

// ClearScheduledAt clears the value of the "scheduled_at" field.
func (du *DistributionUpdate) ClearScheduledAt() *DistributionUpdate {
	du.mutation.ClearScheduledAt()
	return du
}

// SetPublishedAt sets the "published_at" field.
func (du *DistributionUpdate) SetPublishedAt(i int64) *DistributionUpdate {
	du.mutation.ResetPublishedAt()
	du.mutation.SetPublishedAt(i)
	return du
}

// SetNillablePublishedAt sets the "published_at" field if the given value is not nil.
func (du *DistributionUpdate) SetNillablePublishedAt(i *int64) *DistributionUpdate {
	if i != nil {
		du.SetPublishedAt(*i)
	}
	return du
}

// AddPublishedAt adds i to the "published_at" field.
func (du *DistributionUpdate) AddPublishedAt(i int64) *DistributionUpdate {
	du.mutation.AddPublishedAt(i)
	return du
}

// ClearPublishedAt clears the value of the "published_at" field.
func (du *DistributionUpdate) ClearPublishedAt() *DistributionUpdate {
	du.mutation.ClearPublishedAt()
	return du
}

// SetExternalID sets the "external_id" field.
func (du *DistributionUpdate) SetExternalID(s string) *DistributionUpdate {
	du.mutation.SetExternalID(s)
	return du
}

// SetNillableExternalID sets the "external_id" field if the given value is not nil.
func (du *DistributionUpdate) SetNillableExternalID(s *string) *DistributionUpdate {
	if s != nil {
		du.SetExternalID(*s)
	}
	return du
}

// ClearExternalID clears the value of the "external_id" field.
func (du *DistributionUpdate) ClearExternalID() *DistributionUpdate {
	du.mutation.ClearExternalID()
	return du
}

// SetExternalURL sets the "external_url" field.
func (du *DistributionUpdate) SetExternalURL(s string) *DistributionUpdate {
	du.mutation.SetExternalURL(s)
	return du
}

// SetNillableExternalURL sets the "external_url" field if the given value is not nil.
func (du *DistributionUpdate) SetNillableExternalURL(s *string) *DistributionUpdate {
	if s != nil {
		du.SetExternalURL(*s)
	}
	return du
}

// ClearExternalURL clears the value of the "external_url" field.
func (du *DistributionUpdate) ClearExternalURL() *DistributionUpdate {
	du.mutation.ClearExternalURL()
	return du
}

// SetErrorDetails sets the "error_details" field.
func (du *DistributionUpdate) SetErrorDetails(s string) *DistributionUpdate {
	du.mutation.SetErrorDetails(s)
	return du
}

// SetNillableErrorDetails sets the "error_details" field if the given value is not nil.
func (du *DistributionUpdate) SetNillableErrorDetails(s *string) *DistributionUpdate {
	if s != nil {
		du.SetErrorDetails(*s)
	}
	return du
}

// ClearErrorDetails clears the value of the "error_details" field.
func (du *DistributionUpdate) ClearErrorDetails() *DistributionUpdate {
	du.mutation.ClearErrorDetails()
	return du
}

// SetTopic sets the "topic" edge to the Topic entity.
func (du *DistributionUpdate) SetTopic(t *Topic) *DistributionUpdate {
	return du.SetTopicID(t.ID)
}

// SetChannel sets the "channel" edge to the CMSChannel entity.
func (du *DistributionUpdate) SetChannel(c *CMSChannel) *DistributionUpdate {
	return du.SetChannelID(c.ID)
}

// Mutation returns the DistributionMutation object of the builder.
func (du *DistributionUpdate) Mutation() *DistributionMutation {
	return du.mutation
}

// ClearTopic clears the "topic" edge to the Topic entity.
func (du *DistributionUpdate) ClearTopic() *DistributionUpdate {
	du.mutation.ClearTopic()
	return du
}

// ClearChannel clears the "channel" edge to the CMSChannel entity.
func (du *DistributionUpdate) ClearChannel() *DistributionUpdate {
	du.mutation.ClearChannel()
	return du
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DistributionUpdate) Save(ctx context.Context) (int, error) {
	du.defaults()
	return withHooks(ctx, du.sqlSave, du.mutation, du.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (du *DistributionUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DistributionUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DistributionUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (du *DistributionUpdate) defaults() {
	if _, ok := du.mutation.UpdatedAt(); !ok && !du.mutation.UpdatedAtCleared() {
		v := distribution.UpdateDefaultUpdatedAt()
		du.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (du *DistributionUpdate) check() error {
	if v, ok := du.mutation.TenantID(); ok {
		if err := distribution.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "Distribution.tenant_id": %w`, err)}
		}
	}
	if v, ok := du.mutation.CreatedBy(); ok {
		if err := distribution.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "Distribution.created_by": %w`, err)}
		}
	}
	if v, ok := du.mutation.UpdatedBy(); ok {
		if err := distribution.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "Distribution.updated_by": %w`, err)}
		}
	}
	if v, ok := du.mutation.TopicID(); ok {
		if err := distribution.TopicIDValidator(v); err != nil {
			return &ValidationError{Name: "topic_id", err: fmt.Errorf(`ent: validator failed for field "Distribution.topic_id": %w`, err)}
		}
	}
	if v, ok := du.mutation.ChannelID(); ok {
		if err := distribution.ChannelIDValidator(v); err != nil {
			return &ValidationError{Name: "channel_id", err: fmt.Errorf(`ent: validator failed for field "Distribution.channel_id": %w`, err)}
		}
	}
	if du.mutation.TopicCleared() && len(du.mutation.TopicIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Distribution.topic"`)
	}
	if du.mutation.ChannelCleared() && len(du.mutation.ChannelIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Distribution.channel"`)
	}
	return nil
}

func (du *DistributionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := du.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(distribution.Table, distribution.Columns, sqlgraph.NewFieldSpec(distribution.FieldID, field.TypeString))
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.Extras(); ok {
		_spec.SetField(distribution.FieldExtras, field.TypeJSON, value)
	}
	if du.mutation.ExtrasCleared() {
		_spec.ClearField(distribution.FieldExtras, field.TypeJSON)
	}
	if value, ok := du.mutation.TenantID(); ok {
		_spec.SetField(distribution.FieldTenantID, field.TypeString, value)
	}
	if du.mutation.TenantIDCleared() {
		_spec.ClearField(distribution.FieldTenantID, field.TypeString)
	}
	if value, ok := du.mutation.CreatedBy(); ok {
		_spec.SetField(distribution.FieldCreatedBy, field.TypeString, value)
	}
	if du.mutation.CreatedByCleared() {
		_spec.ClearField(distribution.FieldCreatedBy, field.TypeString)
	}
	if value, ok := du.mutation.UpdatedBy(); ok {
		_spec.SetField(distribution.FieldUpdatedBy, field.TypeString, value)
	}
	if du.mutation.UpdatedByCleared() {
		_spec.ClearField(distribution.FieldUpdatedBy, field.TypeString)
	}
	if du.mutation.CreatedAtCleared() {
		_spec.ClearField(distribution.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := du.mutation.UpdatedAt(); ok {
		_spec.SetField(distribution.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := du.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(distribution.FieldUpdatedAt, field.TypeInt64, value)
	}
	if du.mutation.UpdatedAtCleared() {
		_spec.ClearField(distribution.FieldUpdatedAt, field.TypeInt64)
	}
	if value, ok := du.mutation.Status(); ok {
		_spec.SetField(distribution.FieldStatus, field.TypeInt, value)
	}
	if value, ok := du.mutation.AddedStatus(); ok {
		_spec.AddField(distribution.FieldStatus, field.TypeInt, value)
	}
	if value, ok := du.mutation.ScheduledAt(); ok {
		_spec.SetField(distribution.FieldScheduledAt, field.TypeInt64, value)
	}
	if value, ok := du.mutation.AddedScheduledAt(); ok {
		_spec.AddField(distribution.FieldScheduledAt, field.TypeInt64, value)
	}
	if du.mutation.ScheduledAtCleared() {
		_spec.ClearField(distribution.FieldScheduledAt, field.TypeInt64)
	}
	if value, ok := du.mutation.PublishedAt(); ok {
		_spec.SetField(distribution.FieldPublishedAt, field.TypeInt64, value)
	}
	if value, ok := du.mutation.AddedPublishedAt(); ok {
		_spec.AddField(distribution.FieldPublishedAt, field.TypeInt64, value)
	}
	if du.mutation.PublishedAtCleared() {
		_spec.ClearField(distribution.FieldPublishedAt, field.TypeInt64)
	}
	if value, ok := du.mutation.ExternalID(); ok {
		_spec.SetField(distribution.FieldExternalID, field.TypeString, value)
	}
	if du.mutation.ExternalIDCleared() {
		_spec.ClearField(distribution.FieldExternalID, field.TypeString)
	}
	if value, ok := du.mutation.ExternalURL(); ok {
		_spec.SetField(distribution.FieldExternalURL, field.TypeString, value)
	}
	if du.mutation.ExternalURLCleared() {
		_spec.ClearField(distribution.FieldExternalURL, field.TypeString)
	}
	if value, ok := du.mutation.ErrorDetails(); ok {
		_spec.SetField(distribution.FieldErrorDetails, field.TypeString, value)
	}
	if du.mutation.ErrorDetailsCleared() {
		_spec.ClearField(distribution.FieldErrorDetails, field.TypeString)
	}
	if du.mutation.TopicCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   distribution.TopicTable,
			Columns: []string{distribution.TopicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(topic.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.TopicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   distribution.TopicTable,
			Columns: []string{distribution.TopicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(topic.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.ChannelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   distribution.ChannelTable,
			Columns: []string{distribution.ChannelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cmschannel.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.ChannelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   distribution.ChannelTable,
			Columns: []string{distribution.ChannelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cmschannel.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{distribution.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	du.mutation.done = true
	return n, nil
}

// DistributionUpdateOne is the builder for updating a single Distribution entity.
type DistributionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DistributionMutation
}

// SetExtras sets the "extras" field.
func (duo *DistributionUpdateOne) SetExtras(m map[string]interface{}) *DistributionUpdateOne {
	duo.mutation.SetExtras(m)
	return duo
}

// ClearExtras clears the value of the "extras" field.
func (duo *DistributionUpdateOne) ClearExtras() *DistributionUpdateOne {
	duo.mutation.ClearExtras()
	return duo
}

// SetTenantID sets the "tenant_id" field.
func (duo *DistributionUpdateOne) SetTenantID(s string) *DistributionUpdateOne {
	duo.mutation.SetTenantID(s)
	return duo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (duo *DistributionUpdateOne) SetNillableTenantID(s *string) *DistributionUpdateOne {
	if s != nil {
		duo.SetTenantID(*s)
	}
	return duo
}

// ClearTenantID clears the value of the "tenant_id" field.
func (duo *DistributionUpdateOne) ClearTenantID() *DistributionUpdateOne {
	duo.mutation.ClearTenantID()
	return duo
}

// SetCreatedBy sets the "created_by" field.
func (duo *DistributionUpdateOne) SetCreatedBy(s string) *DistributionUpdateOne {
	duo.mutation.SetCreatedBy(s)
	return duo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (duo *DistributionUpdateOne) SetNillableCreatedBy(s *string) *DistributionUpdateOne {
	if s != nil {
		duo.SetCreatedBy(*s)
	}
	return duo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (duo *DistributionUpdateOne) ClearCreatedBy() *DistributionUpdateOne {
	duo.mutation.ClearCreatedBy()
	return duo
}

// SetUpdatedBy sets the "updated_by" field.
func (duo *DistributionUpdateOne) SetUpdatedBy(s string) *DistributionUpdateOne {
	duo.mutation.SetUpdatedBy(s)
	return duo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (duo *DistributionUpdateOne) SetNillableUpdatedBy(s *string) *DistributionUpdateOne {
	if s != nil {
		duo.SetUpdatedBy(*s)
	}
	return duo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (duo *DistributionUpdateOne) ClearUpdatedBy() *DistributionUpdateOne {
	duo.mutation.ClearUpdatedBy()
	return duo
}

// SetUpdatedAt sets the "updated_at" field.
func (duo *DistributionUpdateOne) SetUpdatedAt(i int64) *DistributionUpdateOne {
	duo.mutation.ResetUpdatedAt()
	duo.mutation.SetUpdatedAt(i)
	return duo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (duo *DistributionUpdateOne) AddUpdatedAt(i int64) *DistributionUpdateOne {
	duo.mutation.AddUpdatedAt(i)
	return duo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (duo *DistributionUpdateOne) ClearUpdatedAt() *DistributionUpdateOne {
	duo.mutation.ClearUpdatedAt()
	return duo
}

// SetTopicID sets the "topic_id" field.
func (duo *DistributionUpdateOne) SetTopicID(s string) *DistributionUpdateOne {
	duo.mutation.SetTopicID(s)
	return duo
}

// SetNillableTopicID sets the "topic_id" field if the given value is not nil.
func (duo *DistributionUpdateOne) SetNillableTopicID(s *string) *DistributionUpdateOne {
	if s != nil {
		duo.SetTopicID(*s)
	}
	return duo
}

// SetChannelID sets the "channel_id" field.
func (duo *DistributionUpdateOne) SetChannelID(s string) *DistributionUpdateOne {
	duo.mutation.SetChannelID(s)
	return duo
}

// SetNillableChannelID sets the "channel_id" field if the given value is not nil.
func (duo *DistributionUpdateOne) SetNillableChannelID(s *string) *DistributionUpdateOne {
	if s != nil {
		duo.SetChannelID(*s)
	}
	return duo
}

// SetStatus sets the "status" field.
func (duo *DistributionUpdateOne) SetStatus(i int) *DistributionUpdateOne {
	duo.mutation.ResetStatus()
	duo.mutation.SetStatus(i)
	return duo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (duo *DistributionUpdateOne) SetNillableStatus(i *int) *DistributionUpdateOne {
	if i != nil {
		duo.SetStatus(*i)
	}
	return duo
}

// AddStatus adds i to the "status" field.
func (duo *DistributionUpdateOne) AddStatus(i int) *DistributionUpdateOne {
	duo.mutation.AddStatus(i)
	return duo
}

// SetScheduledAt sets the "scheduled_at" field.
func (duo *DistributionUpdateOne) SetScheduledAt(i int64) *DistributionUpdateOne {
	duo.mutation.ResetScheduledAt()
	duo.mutation.SetScheduledAt(i)
	return duo
}

// SetNillableScheduledAt sets the "scheduled_at" field if the given value is not nil.
func (duo *DistributionUpdateOne) SetNillableScheduledAt(i *int64) *DistributionUpdateOne {
	if i != nil {
		duo.SetScheduledAt(*i)
	}
	return duo
}

// AddScheduledAt adds i to the "scheduled_at" field.
func (duo *DistributionUpdateOne) AddScheduledAt(i int64) *DistributionUpdateOne {
	duo.mutation.AddScheduledAt(i)
	return duo
}

// ClearScheduledAt clears the value of the "scheduled_at" field.
func (duo *DistributionUpdateOne) ClearScheduledAt() *DistributionUpdateOne {
	duo.mutation.ClearScheduledAt()
	return duo
}

// SetPublishedAt sets the "published_at" field.
func (duo *DistributionUpdateOne) SetPublishedAt(i int64) *DistributionUpdateOne {
	duo.mutation.ResetPublishedAt()
	duo.mutation.SetPublishedAt(i)
	return duo
}

// SetNillablePublishedAt sets the "published_at" field if the given value is not nil.
func (duo *DistributionUpdateOne) SetNillablePublishedAt(i *int64) *DistributionUpdateOne {
	if i != nil {
		duo.SetPublishedAt(*i)
	}
	return duo
}

// AddPublishedAt adds i to the "published_at" field.
func (duo *DistributionUpdateOne) AddPublishedAt(i int64) *DistributionUpdateOne {
	duo.mutation.AddPublishedAt(i)
	return duo
}

// ClearPublishedAt clears the value of the "published_at" field.
func (duo *DistributionUpdateOne) ClearPublishedAt() *DistributionUpdateOne {
	duo.mutation.ClearPublishedAt()
	return duo
}

// SetExternalID sets the "external_id" field.
func (duo *DistributionUpdateOne) SetExternalID(s string) *DistributionUpdateOne {
	duo.mutation.SetExternalID(s)
	return duo
}

// SetNillableExternalID sets the "external_id" field if the given value is not nil.
func (duo *DistributionUpdateOne) SetNillableExternalID(s *string) *DistributionUpdateOne {
	if s != nil {
		duo.SetExternalID(*s)
	}
	return duo
}

// ClearExternalID clears the value of the "external_id" field.
func (duo *DistributionUpdateOne) ClearExternalID() *DistributionUpdateOne {
	duo.mutation.ClearExternalID()
	return duo
}

// SetExternalURL sets the "external_url" field.
func (duo *DistributionUpdateOne) SetExternalURL(s string) *DistributionUpdateOne {
	duo.mutation.SetExternalURL(s)
	return duo
}

// SetNillableExternalURL sets the "external_url" field if the given value is not nil.
func (duo *DistributionUpdateOne) SetNillableExternalURL(s *string) *DistributionUpdateOne {
	if s != nil {
		duo.SetExternalURL(*s)
	}
	return duo
}

// ClearExternalURL clears the value of the "external_url" field.
func (duo *DistributionUpdateOne) ClearExternalURL() *DistributionUpdateOne {
	duo.mutation.ClearExternalURL()
	return duo
}

// SetErrorDetails sets the "error_details" field.
func (duo *DistributionUpdateOne) SetErrorDetails(s string) *DistributionUpdateOne {
	duo.mutation.SetErrorDetails(s)
	return duo
}

// SetNillableErrorDetails sets the "error_details" field if the given value is not nil.
func (duo *DistributionUpdateOne) SetNillableErrorDetails(s *string) *DistributionUpdateOne {
	if s != nil {
		duo.SetErrorDetails(*s)
	}
	return duo
}

// ClearErrorDetails clears the value of the "error_details" field.
func (duo *DistributionUpdateOne) ClearErrorDetails() *DistributionUpdateOne {
	duo.mutation.ClearErrorDetails()
	return duo
}

// SetTopic sets the "topic" edge to the Topic entity.
func (duo *DistributionUpdateOne) SetTopic(t *Topic) *DistributionUpdateOne {
	return duo.SetTopicID(t.ID)
}

// SetChannel sets the "channel" edge to the CMSChannel entity.
func (duo *DistributionUpdateOne) SetChannel(c *CMSChannel) *DistributionUpdateOne {
	return duo.SetChannelID(c.ID)
}

// Mutation returns the DistributionMutation object of the builder.
func (duo *DistributionUpdateOne) Mutation() *DistributionMutation {
	return duo.mutation
}

// ClearTopic clears the "topic" edge to the Topic entity.
func (duo *DistributionUpdateOne) ClearTopic() *DistributionUpdateOne {
	duo.mutation.ClearTopic()
	return duo
}

// ClearChannel clears the "channel" edge to the CMSChannel entity.
func (duo *DistributionUpdateOne) ClearChannel() *DistributionUpdateOne {
	duo.mutation.ClearChannel()
	return duo
}

// Where appends a list predicates to the DistributionUpdate builder.
func (duo *DistributionUpdateOne) Where(ps ...predicate.Distribution) *DistributionUpdateOne {
	duo.mutation.Where(ps...)
	return duo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (duo *DistributionUpdateOne) Select(field string, fields ...string) *DistributionUpdateOne {
	duo.fields = append([]string{field}, fields...)
	return duo
}

// Save executes the query and returns the updated Distribution entity.
func (duo *DistributionUpdateOne) Save(ctx context.Context) (*Distribution, error) {
	duo.defaults()
	return withHooks(ctx, duo.sqlSave, duo.mutation, duo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DistributionUpdateOne) SaveX(ctx context.Context) *Distribution {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DistributionUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DistributionUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (duo *DistributionUpdateOne) defaults() {
	if _, ok := duo.mutation.UpdatedAt(); !ok && !duo.mutation.UpdatedAtCleared() {
		v := distribution.UpdateDefaultUpdatedAt()
		duo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (duo *DistributionUpdateOne) check() error {
	if v, ok := duo.mutation.TenantID(); ok {
		if err := distribution.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "Distribution.tenant_id": %w`, err)}
		}
	}
	if v, ok := duo.mutation.CreatedBy(); ok {
		if err := distribution.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "Distribution.created_by": %w`, err)}
		}
	}
	if v, ok := duo.mutation.UpdatedBy(); ok {
		if err := distribution.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "Distribution.updated_by": %w`, err)}
		}
	}
	if v, ok := duo.mutation.TopicID(); ok {
		if err := distribution.TopicIDValidator(v); err != nil {
			return &ValidationError{Name: "topic_id", err: fmt.Errorf(`ent: validator failed for field "Distribution.topic_id": %w`, err)}
		}
	}
	if v, ok := duo.mutation.ChannelID(); ok {
		if err := distribution.ChannelIDValidator(v); err != nil {
			return &ValidationError{Name: "channel_id", err: fmt.Errorf(`ent: validator failed for field "Distribution.channel_id": %w`, err)}
		}
	}
	if duo.mutation.TopicCleared() && len(duo.mutation.TopicIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Distribution.topic"`)
	}
	if duo.mutation.ChannelCleared() && len(duo.mutation.ChannelIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Distribution.channel"`)
	}
	return nil
}

func (duo *DistributionUpdateOne) sqlSave(ctx context.Context) (_node *Distribution, err error) {
	if err := duo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(distribution.Table, distribution.Columns, sqlgraph.NewFieldSpec(distribution.FieldID, field.TypeString))
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Distribution.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := duo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, distribution.FieldID)
		for _, f := range fields {
			if !distribution.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != distribution.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := duo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := duo.mutation.Extras(); ok {
		_spec.SetField(distribution.FieldExtras, field.TypeJSON, value)
	}
	if duo.mutation.ExtrasCleared() {
		_spec.ClearField(distribution.FieldExtras, field.TypeJSON)
	}
	if value, ok := duo.mutation.TenantID(); ok {
		_spec.SetField(distribution.FieldTenantID, field.TypeString, value)
	}
	if duo.mutation.TenantIDCleared() {
		_spec.ClearField(distribution.FieldTenantID, field.TypeString)
	}
	if value, ok := duo.mutation.CreatedBy(); ok {
		_spec.SetField(distribution.FieldCreatedBy, field.TypeString, value)
	}
	if duo.mutation.CreatedByCleared() {
		_spec.ClearField(distribution.FieldCreatedBy, field.TypeString)
	}
	if value, ok := duo.mutation.UpdatedBy(); ok {
		_spec.SetField(distribution.FieldUpdatedBy, field.TypeString, value)
	}
	if duo.mutation.UpdatedByCleared() {
		_spec.ClearField(distribution.FieldUpdatedBy, field.TypeString)
	}
	if duo.mutation.CreatedAtCleared() {
		_spec.ClearField(distribution.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := duo.mutation.UpdatedAt(); ok {
		_spec.SetField(distribution.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := duo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(distribution.FieldUpdatedAt, field.TypeInt64, value)
	}
	if duo.mutation.UpdatedAtCleared() {
		_spec.ClearField(distribution.FieldUpdatedAt, field.TypeInt64)
	}
	if value, ok := duo.mutation.Status(); ok {
		_spec.SetField(distribution.FieldStatus, field.TypeInt, value)
	}
	if value, ok := duo.mutation.AddedStatus(); ok {
		_spec.AddField(distribution.FieldStatus, field.TypeInt, value)
	}
	if value, ok := duo.mutation.ScheduledAt(); ok {
		_spec.SetField(distribution.FieldScheduledAt, field.TypeInt64, value)
	}
	if value, ok := duo.mutation.AddedScheduledAt(); ok {
		_spec.AddField(distribution.FieldScheduledAt, field.TypeInt64, value)
	}
	if duo.mutation.ScheduledAtCleared() {
		_spec.ClearField(distribution.FieldScheduledAt, field.TypeInt64)
	}
	if value, ok := duo.mutation.PublishedAt(); ok {
		_spec.SetField(distribution.FieldPublishedAt, field.TypeInt64, value)
	}
	if value, ok := duo.mutation.AddedPublishedAt(); ok {
		_spec.AddField(distribution.FieldPublishedAt, field.TypeInt64, value)
	}
	if duo.mutation.PublishedAtCleared() {
		_spec.ClearField(distribution.FieldPublishedAt, field.TypeInt64)
	}
	if value, ok := duo.mutation.ExternalID(); ok {
		_spec.SetField(distribution.FieldExternalID, field.TypeString, value)
	}
	if duo.mutation.ExternalIDCleared() {
		_spec.ClearField(distribution.FieldExternalID, field.TypeString)
	}
	if value, ok := duo.mutation.ExternalURL(); ok {
		_spec.SetField(distribution.FieldExternalURL, field.TypeString, value)
	}
	if duo.mutation.ExternalURLCleared() {
		_spec.ClearField(distribution.FieldExternalURL, field.TypeString)
	}
	if value, ok := duo.mutation.ErrorDetails(); ok {
		_spec.SetField(distribution.FieldErrorDetails, field.TypeString, value)
	}
	if duo.mutation.ErrorDetailsCleared() {
		_spec.ClearField(distribution.FieldErrorDetails, field.TypeString)
	}
	if duo.mutation.TopicCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   distribution.TopicTable,
			Columns: []string{distribution.TopicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(topic.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.TopicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   distribution.TopicTable,
			Columns: []string{distribution.TopicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(topic.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.ChannelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   distribution.ChannelTable,
			Columns: []string{distribution.ChannelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cmschannel.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.ChannelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   distribution.ChannelTable,
			Columns: []string{distribution.ChannelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cmschannel.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Distribution{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{distribution.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	duo.mutation.done = true
	return _node, nil
}
