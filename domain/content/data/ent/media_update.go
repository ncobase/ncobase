// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/domain/content/data/ent/media"
	"ncobase/domain/content/data/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MediaUpdate is the builder for updating Media entities.
type MediaUpdate struct {
	config
	hooks    []Hook
	mutation *MediaMutation
}

// Where appends a list predicates to the MediaUpdate builder.
func (mu *MediaUpdate) Where(ps ...predicate.Media) *MediaUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetTitle sets the "title" field.
func (mu *MediaUpdate) SetTitle(s string) *MediaUpdate {
	mu.mutation.SetTitle(s)
	return mu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (mu *MediaUpdate) SetNillableTitle(s *string) *MediaUpdate {
	if s != nil {
		mu.SetTitle(*s)
	}
	return mu
}

// ClearTitle clears the value of the "title" field.
func (mu *MediaUpdate) ClearTitle() *MediaUpdate {
	mu.mutation.ClearTitle()
	return mu
}

// SetType sets the "type" field.
func (mu *MediaUpdate) SetType(s string) *MediaUpdate {
	mu.mutation.SetType(s)
	return mu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (mu *MediaUpdate) SetNillableType(s *string) *MediaUpdate {
	if s != nil {
		mu.SetType(*s)
	}
	return mu
}

// ClearType clears the value of the "type" field.
func (mu *MediaUpdate) ClearType() *MediaUpdate {
	mu.mutation.ClearType()
	return mu
}

// SetURL sets the "url" field.
func (mu *MediaUpdate) SetURL(s string) *MediaUpdate {
	mu.mutation.SetURL(s)
	return mu
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (mu *MediaUpdate) SetNillableURL(s *string) *MediaUpdate {
	if s != nil {
		mu.SetURL(*s)
	}
	return mu
}

// ClearURL clears the value of the "url" field.
func (mu *MediaUpdate) ClearURL() *MediaUpdate {
	mu.mutation.ClearURL()
	return mu
}

// SetExtras sets the "extras" field.
func (mu *MediaUpdate) SetExtras(m map[string]interface{}) *MediaUpdate {
	mu.mutation.SetExtras(m)
	return mu
}

// ClearExtras clears the value of the "extras" field.
func (mu *MediaUpdate) ClearExtras() *MediaUpdate {
	mu.mutation.ClearExtras()
	return mu
}

// SetTenantID sets the "tenant_id" field.
func (mu *MediaUpdate) SetTenantID(s string) *MediaUpdate {
	mu.mutation.SetTenantID(s)
	return mu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (mu *MediaUpdate) SetNillableTenantID(s *string) *MediaUpdate {
	if s != nil {
		mu.SetTenantID(*s)
	}
	return mu
}

// ClearTenantID clears the value of the "tenant_id" field.
func (mu *MediaUpdate) ClearTenantID() *MediaUpdate {
	mu.mutation.ClearTenantID()
	return mu
}

// SetCreatedBy sets the "created_by" field.
func (mu *MediaUpdate) SetCreatedBy(s string) *MediaUpdate {
	mu.mutation.SetCreatedBy(s)
	return mu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (mu *MediaUpdate) SetNillableCreatedBy(s *string) *MediaUpdate {
	if s != nil {
		mu.SetCreatedBy(*s)
	}
	return mu
}

// ClearCreatedBy clears the value of the "created_by" field.
func (mu *MediaUpdate) ClearCreatedBy() *MediaUpdate {
	mu.mutation.ClearCreatedBy()
	return mu
}

// SetUpdatedBy sets the "updated_by" field.
func (mu *MediaUpdate) SetUpdatedBy(s string) *MediaUpdate {
	mu.mutation.SetUpdatedBy(s)
	return mu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (mu *MediaUpdate) SetNillableUpdatedBy(s *string) *MediaUpdate {
	if s != nil {
		mu.SetUpdatedBy(*s)
	}
	return mu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (mu *MediaUpdate) ClearUpdatedBy() *MediaUpdate {
	mu.mutation.ClearUpdatedBy()
	return mu
}

// SetUpdatedAt sets the "updated_at" field.
func (mu *MediaUpdate) SetUpdatedAt(i int64) *MediaUpdate {
	mu.mutation.ResetUpdatedAt()
	mu.mutation.SetUpdatedAt(i)
	return mu
}

// AddUpdatedAt adds i to the "updated_at" field.
func (mu *MediaUpdate) AddUpdatedAt(i int64) *MediaUpdate {
	mu.mutation.AddUpdatedAt(i)
	return mu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (mu *MediaUpdate) ClearUpdatedAt() *MediaUpdate {
	mu.mutation.ClearUpdatedAt()
	return mu
}

// SetPath sets the "path" field.
func (mu *MediaUpdate) SetPath(s string) *MediaUpdate {
	mu.mutation.SetPath(s)
	return mu
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (mu *MediaUpdate) SetNillablePath(s *string) *MediaUpdate {
	if s != nil {
		mu.SetPath(*s)
	}
	return mu
}

// ClearPath clears the value of the "path" field.
func (mu *MediaUpdate) ClearPath() *MediaUpdate {
	mu.mutation.ClearPath()
	return mu
}

// SetMimeType sets the "mime_type" field.
func (mu *MediaUpdate) SetMimeType(s string) *MediaUpdate {
	mu.mutation.SetMimeType(s)
	return mu
}

// SetNillableMimeType sets the "mime_type" field if the given value is not nil.
func (mu *MediaUpdate) SetNillableMimeType(s *string) *MediaUpdate {
	if s != nil {
		mu.SetMimeType(*s)
	}
	return mu
}

// ClearMimeType clears the value of the "mime_type" field.
func (mu *MediaUpdate) ClearMimeType() *MediaUpdate {
	mu.mutation.ClearMimeType()
	return mu
}

// SetSize sets the "size" field.
func (mu *MediaUpdate) SetSize(i int64) *MediaUpdate {
	mu.mutation.ResetSize()
	mu.mutation.SetSize(i)
	return mu
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (mu *MediaUpdate) SetNillableSize(i *int64) *MediaUpdate {
	if i != nil {
		mu.SetSize(*i)
	}
	return mu
}

// AddSize adds i to the "size" field.
func (mu *MediaUpdate) AddSize(i int64) *MediaUpdate {
	mu.mutation.AddSize(i)
	return mu
}

// SetWidth sets the "width" field.
func (mu *MediaUpdate) SetWidth(i int) *MediaUpdate {
	mu.mutation.ResetWidth()
	mu.mutation.SetWidth(i)
	return mu
}

// SetNillableWidth sets the "width" field if the given value is not nil.
func (mu *MediaUpdate) SetNillableWidth(i *int) *MediaUpdate {
	if i != nil {
		mu.SetWidth(*i)
	}
	return mu
}

// AddWidth adds i to the "width" field.
func (mu *MediaUpdate) AddWidth(i int) *MediaUpdate {
	mu.mutation.AddWidth(i)
	return mu
}

// SetHeight sets the "height" field.
func (mu *MediaUpdate) SetHeight(i int) *MediaUpdate {
	mu.mutation.ResetHeight()
	mu.mutation.SetHeight(i)
	return mu
}

// SetNillableHeight sets the "height" field if the given value is not nil.
func (mu *MediaUpdate) SetNillableHeight(i *int) *MediaUpdate {
	if i != nil {
		mu.SetHeight(*i)
	}
	return mu
}

// AddHeight adds i to the "height" field.
func (mu *MediaUpdate) AddHeight(i int) *MediaUpdate {
	mu.mutation.AddHeight(i)
	return mu
}

// SetDuration sets the "duration" field.
func (mu *MediaUpdate) SetDuration(f float64) *MediaUpdate {
	mu.mutation.ResetDuration()
	mu.mutation.SetDuration(f)
	return mu
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (mu *MediaUpdate) SetNillableDuration(f *float64) *MediaUpdate {
	if f != nil {
		mu.SetDuration(*f)
	}
	return mu
}

// AddDuration adds f to the "duration" field.
func (mu *MediaUpdate) AddDuration(f float64) *MediaUpdate {
	mu.mutation.AddDuration(f)
	return mu
}

// SetDescription sets the "description" field.
func (mu *MediaUpdate) SetDescription(s string) *MediaUpdate {
	mu.mutation.SetDescription(s)
	return mu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (mu *MediaUpdate) SetNillableDescription(s *string) *MediaUpdate {
	if s != nil {
		mu.SetDescription(*s)
	}
	return mu
}

// ClearDescription clears the value of the "description" field.
func (mu *MediaUpdate) ClearDescription() *MediaUpdate {
	mu.mutation.ClearDescription()
	return mu
}

// SetAlt sets the "alt" field.
func (mu *MediaUpdate) SetAlt(s string) *MediaUpdate {
	mu.mutation.SetAlt(s)
	return mu
}

// SetNillableAlt sets the "alt" field if the given value is not nil.
func (mu *MediaUpdate) SetNillableAlt(s *string) *MediaUpdate {
	if s != nil {
		mu.SetAlt(*s)
	}
	return mu
}

// ClearAlt clears the value of the "alt" field.
func (mu *MediaUpdate) ClearAlt() *MediaUpdate {
	mu.mutation.ClearAlt()
	return mu
}

// Mutation returns the MediaMutation object of the builder.
func (mu *MediaUpdate) Mutation() *MediaMutation {
	return mu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MediaUpdate) Save(ctx context.Context) (int, error) {
	mu.defaults()
	return withHooks(ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MediaUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MediaUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MediaUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mu *MediaUpdate) defaults() {
	if _, ok := mu.mutation.UpdatedAt(); !ok && !mu.mutation.UpdatedAtCleared() {
		v := media.UpdateDefaultUpdatedAt()
		mu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mu *MediaUpdate) check() error {
	if v, ok := mu.mutation.TenantID(); ok {
		if err := media.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "Media.tenant_id": %w`, err)}
		}
	}
	if v, ok := mu.mutation.CreatedBy(); ok {
		if err := media.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "Media.created_by": %w`, err)}
		}
	}
	if v, ok := mu.mutation.UpdatedBy(); ok {
		if err := media.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "Media.updated_by": %w`, err)}
		}
	}
	return nil
}

func (mu *MediaUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := mu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(media.Table, media.Columns, sqlgraph.NewFieldSpec(media.FieldID, field.TypeString))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.Title(); ok {
		_spec.SetField(media.FieldTitle, field.TypeString, value)
	}
	if mu.mutation.TitleCleared() {
		_spec.ClearField(media.FieldTitle, field.TypeString)
	}
	if value, ok := mu.mutation.GetType(); ok {
		_spec.SetField(media.FieldType, field.TypeString, value)
	}
	if mu.mutation.TypeCleared() {
		_spec.ClearField(media.FieldType, field.TypeString)
	}
	if value, ok := mu.mutation.URL(); ok {
		_spec.SetField(media.FieldURL, field.TypeString, value)
	}
	if mu.mutation.URLCleared() {
		_spec.ClearField(media.FieldURL, field.TypeString)
	}
	if value, ok := mu.mutation.Extras(); ok {
		_spec.SetField(media.FieldExtras, field.TypeJSON, value)
	}
	if mu.mutation.ExtrasCleared() {
		_spec.ClearField(media.FieldExtras, field.TypeJSON)
	}
	if value, ok := mu.mutation.TenantID(); ok {
		_spec.SetField(media.FieldTenantID, field.TypeString, value)
	}
	if mu.mutation.TenantIDCleared() {
		_spec.ClearField(media.FieldTenantID, field.TypeString)
	}
	if value, ok := mu.mutation.CreatedBy(); ok {
		_spec.SetField(media.FieldCreatedBy, field.TypeString, value)
	}
	if mu.mutation.CreatedByCleared() {
		_spec.ClearField(media.FieldCreatedBy, field.TypeString)
	}
	if value, ok := mu.mutation.UpdatedBy(); ok {
		_spec.SetField(media.FieldUpdatedBy, field.TypeString, value)
	}
	if mu.mutation.UpdatedByCleared() {
		_spec.ClearField(media.FieldUpdatedBy, field.TypeString)
	}
	if mu.mutation.CreatedAtCleared() {
		_spec.ClearField(media.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := mu.mutation.UpdatedAt(); ok {
		_spec.SetField(media.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := mu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(media.FieldUpdatedAt, field.TypeInt64, value)
	}
	if mu.mutation.UpdatedAtCleared() {
		_spec.ClearField(media.FieldUpdatedAt, field.TypeInt64)
	}
	if value, ok := mu.mutation.Path(); ok {
		_spec.SetField(media.FieldPath, field.TypeString, value)
	}
	if mu.mutation.PathCleared() {
		_spec.ClearField(media.FieldPath, field.TypeString)
	}
	if value, ok := mu.mutation.MimeType(); ok {
		_spec.SetField(media.FieldMimeType, field.TypeString, value)
	}
	if mu.mutation.MimeTypeCleared() {
		_spec.ClearField(media.FieldMimeType, field.TypeString)
	}
	if value, ok := mu.mutation.Size(); ok {
		_spec.SetField(media.FieldSize, field.TypeInt64, value)
	}
	if value, ok := mu.mutation.AddedSize(); ok {
		_spec.AddField(media.FieldSize, field.TypeInt64, value)
	}
	if value, ok := mu.mutation.Width(); ok {
		_spec.SetField(media.FieldWidth, field.TypeInt, value)
	}
	if value, ok := mu.mutation.AddedWidth(); ok {
		_spec.AddField(media.FieldWidth, field.TypeInt, value)
	}
	if value, ok := mu.mutation.Height(); ok {
		_spec.SetField(media.FieldHeight, field.TypeInt, value)
	}
	if value, ok := mu.mutation.AddedHeight(); ok {
		_spec.AddField(media.FieldHeight, field.TypeInt, value)
	}
	if value, ok := mu.mutation.Duration(); ok {
		_spec.SetField(media.FieldDuration, field.TypeFloat64, value)
	}
	if value, ok := mu.mutation.AddedDuration(); ok {
		_spec.AddField(media.FieldDuration, field.TypeFloat64, value)
	}
	if value, ok := mu.mutation.Description(); ok {
		_spec.SetField(media.FieldDescription, field.TypeString, value)
	}
	if mu.mutation.DescriptionCleared() {
		_spec.ClearField(media.FieldDescription, field.TypeString)
	}
	if value, ok := mu.mutation.Alt(); ok {
		_spec.SetField(media.FieldAlt, field.TypeString, value)
	}
	if mu.mutation.AltCleared() {
		_spec.ClearField(media.FieldAlt, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{media.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// MediaUpdateOne is the builder for updating a single Media entity.
type MediaUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MediaMutation
}

// SetTitle sets the "title" field.
func (muo *MediaUpdateOne) SetTitle(s string) *MediaUpdateOne {
	muo.mutation.SetTitle(s)
	return muo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (muo *MediaUpdateOne) SetNillableTitle(s *string) *MediaUpdateOne {
	if s != nil {
		muo.SetTitle(*s)
	}
	return muo
}

// ClearTitle clears the value of the "title" field.
func (muo *MediaUpdateOne) ClearTitle() *MediaUpdateOne {
	muo.mutation.ClearTitle()
	return muo
}

// SetType sets the "type" field.
func (muo *MediaUpdateOne) SetType(s string) *MediaUpdateOne {
	muo.mutation.SetType(s)
	return muo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (muo *MediaUpdateOne) SetNillableType(s *string) *MediaUpdateOne {
	if s != nil {
		muo.SetType(*s)
	}
	return muo
}

// ClearType clears the value of the "type" field.
func (muo *MediaUpdateOne) ClearType() *MediaUpdateOne {
	muo.mutation.ClearType()
	return muo
}

// SetURL sets the "url" field.
func (muo *MediaUpdateOne) SetURL(s string) *MediaUpdateOne {
	muo.mutation.SetURL(s)
	return muo
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (muo *MediaUpdateOne) SetNillableURL(s *string) *MediaUpdateOne {
	if s != nil {
		muo.SetURL(*s)
	}
	return muo
}

// ClearURL clears the value of the "url" field.
func (muo *MediaUpdateOne) ClearURL() *MediaUpdateOne {
	muo.mutation.ClearURL()
	return muo
}

// SetExtras sets the "extras" field.
func (muo *MediaUpdateOne) SetExtras(m map[string]interface{}) *MediaUpdateOne {
	muo.mutation.SetExtras(m)
	return muo
}

// ClearExtras clears the value of the "extras" field.
func (muo *MediaUpdateOne) ClearExtras() *MediaUpdateOne {
	muo.mutation.ClearExtras()
	return muo
}

// SetTenantID sets the "tenant_id" field.
func (muo *MediaUpdateOne) SetTenantID(s string) *MediaUpdateOne {
	muo.mutation.SetTenantID(s)
	return muo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (muo *MediaUpdateOne) SetNillableTenantID(s *string) *MediaUpdateOne {
	if s != nil {
		muo.SetTenantID(*s)
	}
	return muo
}

// ClearTenantID clears the value of the "tenant_id" field.
func (muo *MediaUpdateOne) ClearTenantID() *MediaUpdateOne {
	muo.mutation.ClearTenantID()
	return muo
}

// SetCreatedBy sets the "created_by" field.
func (muo *MediaUpdateOne) SetCreatedBy(s string) *MediaUpdateOne {
	muo.mutation.SetCreatedBy(s)
	return muo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (muo *MediaUpdateOne) SetNillableCreatedBy(s *string) *MediaUpdateOne {
	if s != nil {
		muo.SetCreatedBy(*s)
	}
	return muo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (muo *MediaUpdateOne) ClearCreatedBy() *MediaUpdateOne {
	muo.mutation.ClearCreatedBy()
	return muo
}

// SetUpdatedBy sets the "updated_by" field.
func (muo *MediaUpdateOne) SetUpdatedBy(s string) *MediaUpdateOne {
	muo.mutation.SetUpdatedBy(s)
	return muo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (muo *MediaUpdateOne) SetNillableUpdatedBy(s *string) *MediaUpdateOne {
	if s != nil {
		muo.SetUpdatedBy(*s)
	}
	return muo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (muo *MediaUpdateOne) ClearUpdatedBy() *MediaUpdateOne {
	muo.mutation.ClearUpdatedBy()
	return muo
}

// SetUpdatedAt sets the "updated_at" field.
func (muo *MediaUpdateOne) SetUpdatedAt(i int64) *MediaUpdateOne {
	muo.mutation.ResetUpdatedAt()
	muo.mutation.SetUpdatedAt(i)
	return muo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (muo *MediaUpdateOne) AddUpdatedAt(i int64) *MediaUpdateOne {
	muo.mutation.AddUpdatedAt(i)
	return muo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (muo *MediaUpdateOne) ClearUpdatedAt() *MediaUpdateOne {
	muo.mutation.ClearUpdatedAt()
	return muo
}

// SetPath sets the "path" field.
func (muo *MediaUpdateOne) SetPath(s string) *MediaUpdateOne {
	muo.mutation.SetPath(s)
	return muo
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (muo *MediaUpdateOne) SetNillablePath(s *string) *MediaUpdateOne {
	if s != nil {
		muo.SetPath(*s)
	}
	return muo
}

// ClearPath clears the value of the "path" field.
func (muo *MediaUpdateOne) ClearPath() *MediaUpdateOne {
	muo.mutation.ClearPath()
	return muo
}

// SetMimeType sets the "mime_type" field.
func (muo *MediaUpdateOne) SetMimeType(s string) *MediaUpdateOne {
	muo.mutation.SetMimeType(s)
	return muo
}

// SetNillableMimeType sets the "mime_type" field if the given value is not nil.
func (muo *MediaUpdateOne) SetNillableMimeType(s *string) *MediaUpdateOne {
	if s != nil {
		muo.SetMimeType(*s)
	}
	return muo
}

// ClearMimeType clears the value of the "mime_type" field.
func (muo *MediaUpdateOne) ClearMimeType() *MediaUpdateOne {
	muo.mutation.ClearMimeType()
	return muo
}

// SetSize sets the "size" field.
func (muo *MediaUpdateOne) SetSize(i int64) *MediaUpdateOne {
	muo.mutation.ResetSize()
	muo.mutation.SetSize(i)
	return muo
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (muo *MediaUpdateOne) SetNillableSize(i *int64) *MediaUpdateOne {
	if i != nil {
		muo.SetSize(*i)
	}
	return muo
}

// AddSize adds i to the "size" field.
func (muo *MediaUpdateOne) AddSize(i int64) *MediaUpdateOne {
	muo.mutation.AddSize(i)
	return muo
}

// SetWidth sets the "width" field.
func (muo *MediaUpdateOne) SetWidth(i int) *MediaUpdateOne {
	muo.mutation.ResetWidth()
	muo.mutation.SetWidth(i)
	return muo
}

// SetNillableWidth sets the "width" field if the given value is not nil.
func (muo *MediaUpdateOne) SetNillableWidth(i *int) *MediaUpdateOne {
	if i != nil {
		muo.SetWidth(*i)
	}
	return muo
}

// AddWidth adds i to the "width" field.
func (muo *MediaUpdateOne) AddWidth(i int) *MediaUpdateOne {
	muo.mutation.AddWidth(i)
	return muo
}

// SetHeight sets the "height" field.
func (muo *MediaUpdateOne) SetHeight(i int) *MediaUpdateOne {
	muo.mutation.ResetHeight()
	muo.mutation.SetHeight(i)
	return muo
}

// SetNillableHeight sets the "height" field if the given value is not nil.
func (muo *MediaUpdateOne) SetNillableHeight(i *int) *MediaUpdateOne {
	if i != nil {
		muo.SetHeight(*i)
	}
	return muo
}

// AddHeight adds i to the "height" field.
func (muo *MediaUpdateOne) AddHeight(i int) *MediaUpdateOne {
	muo.mutation.AddHeight(i)
	return muo
}

// SetDuration sets the "duration" field.
func (muo *MediaUpdateOne) SetDuration(f float64) *MediaUpdateOne {
	muo.mutation.ResetDuration()
	muo.mutation.SetDuration(f)
	return muo
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (muo *MediaUpdateOne) SetNillableDuration(f *float64) *MediaUpdateOne {
	if f != nil {
		muo.SetDuration(*f)
	}
	return muo
}

// AddDuration adds f to the "duration" field.
func (muo *MediaUpdateOne) AddDuration(f float64) *MediaUpdateOne {
	muo.mutation.AddDuration(f)
	return muo
}

// SetDescription sets the "description" field.
func (muo *MediaUpdateOne) SetDescription(s string) *MediaUpdateOne {
	muo.mutation.SetDescription(s)
	return muo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (muo *MediaUpdateOne) SetNillableDescription(s *string) *MediaUpdateOne {
	if s != nil {
		muo.SetDescription(*s)
	}
	return muo
}

// ClearDescription clears the value of the "description" field.
func (muo *MediaUpdateOne) ClearDescription() *MediaUpdateOne {
	muo.mutation.ClearDescription()
	return muo
}

// SetAlt sets the "alt" field.
func (muo *MediaUpdateOne) SetAlt(s string) *MediaUpdateOne {
	muo.mutation.SetAlt(s)
	return muo
}

// SetNillableAlt sets the "alt" field if the given value is not nil.
func (muo *MediaUpdateOne) SetNillableAlt(s *string) *MediaUpdateOne {
	if s != nil {
		muo.SetAlt(*s)
	}
	return muo
}

// ClearAlt clears the value of the "alt" field.
func (muo *MediaUpdateOne) ClearAlt() *MediaUpdateOne {
	muo.mutation.ClearAlt()
	return muo
}

// Mutation returns the MediaMutation object of the builder.
func (muo *MediaUpdateOne) Mutation() *MediaMutation {
	return muo.mutation
}

// Where appends a list predicates to the MediaUpdate builder.
func (muo *MediaUpdateOne) Where(ps ...predicate.Media) *MediaUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MediaUpdateOne) Select(field string, fields ...string) *MediaUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Media entity.
func (muo *MediaUpdateOne) Save(ctx context.Context) (*Media, error) {
	muo.defaults()
	return withHooks(ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MediaUpdateOne) SaveX(ctx context.Context) *Media {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MediaUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MediaUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (muo *MediaUpdateOne) defaults() {
	if _, ok := muo.mutation.UpdatedAt(); !ok && !muo.mutation.UpdatedAtCleared() {
		v := media.UpdateDefaultUpdatedAt()
		muo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (muo *MediaUpdateOne) check() error {
	if v, ok := muo.mutation.TenantID(); ok {
		if err := media.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "Media.tenant_id": %w`, err)}
		}
	}
	if v, ok := muo.mutation.CreatedBy(); ok {
		if err := media.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "Media.created_by": %w`, err)}
		}
	}
	if v, ok := muo.mutation.UpdatedBy(); ok {
		if err := media.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "Media.updated_by": %w`, err)}
		}
	}
	return nil
}

func (muo *MediaUpdateOne) sqlSave(ctx context.Context) (_node *Media, err error) {
	if err := muo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(media.Table, media.Columns, sqlgraph.NewFieldSpec(media.FieldID, field.TypeString))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Media.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, media.FieldID)
		for _, f := range fields {
			if !media.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != media.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.Title(); ok {
		_spec.SetField(media.FieldTitle, field.TypeString, value)
	}
	if muo.mutation.TitleCleared() {
		_spec.ClearField(media.FieldTitle, field.TypeString)
	}
	if value, ok := muo.mutation.GetType(); ok {
		_spec.SetField(media.FieldType, field.TypeString, value)
	}
	if muo.mutation.TypeCleared() {
		_spec.ClearField(media.FieldType, field.TypeString)
	}
	if value, ok := muo.mutation.URL(); ok {
		_spec.SetField(media.FieldURL, field.TypeString, value)
	}
	if muo.mutation.URLCleared() {
		_spec.ClearField(media.FieldURL, field.TypeString)
	}
	if value, ok := muo.mutation.Extras(); ok {
		_spec.SetField(media.FieldExtras, field.TypeJSON, value)
	}
	if muo.mutation.ExtrasCleared() {
		_spec.ClearField(media.FieldExtras, field.TypeJSON)
	}
	if value, ok := muo.mutation.TenantID(); ok {
		_spec.SetField(media.FieldTenantID, field.TypeString, value)
	}
	if muo.mutation.TenantIDCleared() {
		_spec.ClearField(media.FieldTenantID, field.TypeString)
	}
	if value, ok := muo.mutation.CreatedBy(); ok {
		_spec.SetField(media.FieldCreatedBy, field.TypeString, value)
	}
	if muo.mutation.CreatedByCleared() {
		_spec.ClearField(media.FieldCreatedBy, field.TypeString)
	}
	if value, ok := muo.mutation.UpdatedBy(); ok {
		_spec.SetField(media.FieldUpdatedBy, field.TypeString, value)
	}
	if muo.mutation.UpdatedByCleared() {
		_spec.ClearField(media.FieldUpdatedBy, field.TypeString)
	}
	if muo.mutation.CreatedAtCleared() {
		_spec.ClearField(media.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := muo.mutation.UpdatedAt(); ok {
		_spec.SetField(media.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := muo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(media.FieldUpdatedAt, field.TypeInt64, value)
	}
	if muo.mutation.UpdatedAtCleared() {
		_spec.ClearField(media.FieldUpdatedAt, field.TypeInt64)
	}
	if value, ok := muo.mutation.Path(); ok {
		_spec.SetField(media.FieldPath, field.TypeString, value)
	}
	if muo.mutation.PathCleared() {
		_spec.ClearField(media.FieldPath, field.TypeString)
	}
	if value, ok := muo.mutation.MimeType(); ok {
		_spec.SetField(media.FieldMimeType, field.TypeString, value)
	}
	if muo.mutation.MimeTypeCleared() {
		_spec.ClearField(media.FieldMimeType, field.TypeString)
	}
	if value, ok := muo.mutation.Size(); ok {
		_spec.SetField(media.FieldSize, field.TypeInt64, value)
	}
	if value, ok := muo.mutation.AddedSize(); ok {
		_spec.AddField(media.FieldSize, field.TypeInt64, value)
	}
	if value, ok := muo.mutation.Width(); ok {
		_spec.SetField(media.FieldWidth, field.TypeInt, value)
	}
	if value, ok := muo.mutation.AddedWidth(); ok {
		_spec.AddField(media.FieldWidth, field.TypeInt, value)
	}
	if value, ok := muo.mutation.Height(); ok {
		_spec.SetField(media.FieldHeight, field.TypeInt, value)
	}
	if value, ok := muo.mutation.AddedHeight(); ok {
		_spec.AddField(media.FieldHeight, field.TypeInt, value)
	}
	if value, ok := muo.mutation.Duration(); ok {
		_spec.SetField(media.FieldDuration, field.TypeFloat64, value)
	}
	if value, ok := muo.mutation.AddedDuration(); ok {
		_spec.AddField(media.FieldDuration, field.TypeFloat64, value)
	}
	if value, ok := muo.mutation.Description(); ok {
		_spec.SetField(media.FieldDescription, field.TypeString, value)
	}
	if muo.mutation.DescriptionCleared() {
		_spec.ClearField(media.FieldDescription, field.TypeString)
	}
	if value, ok := muo.mutation.Alt(); ok {
		_spec.SetField(media.FieldAlt, field.TypeString, value)
	}
	if muo.mutation.AltCleared() {
		_spec.ClearField(media.FieldAlt, field.TypeString)
	}
	_node = &Media{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{media.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}
