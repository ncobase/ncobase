// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/content/data/ent/predicate"
	"ncobase/content/data/ent/taxonomy"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TaxonomyUpdate is the builder for updating Taxonomy entities.
type TaxonomyUpdate struct {
	config
	hooks    []Hook
	mutation *TaxonomyMutation
}

// Where appends a list predicates to the TaxonomyUpdate builder.
func (tu *TaxonomyUpdate) Where(ps ...predicate.Taxonomy) *TaxonomyUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetName sets the "name" field.
func (tu *TaxonomyUpdate) SetName(s string) *TaxonomyUpdate {
	tu.mutation.SetName(s)
	return tu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tu *TaxonomyUpdate) SetNillableName(s *string) *TaxonomyUpdate {
	if s != nil {
		tu.SetName(*s)
	}
	return tu
}

// ClearName clears the value of the "name" field.
func (tu *TaxonomyUpdate) ClearName() *TaxonomyUpdate {
	tu.mutation.ClearName()
	return tu
}

// SetType sets the "type" field.
func (tu *TaxonomyUpdate) SetType(s string) *TaxonomyUpdate {
	tu.mutation.SetType(s)
	return tu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (tu *TaxonomyUpdate) SetNillableType(s *string) *TaxonomyUpdate {
	if s != nil {
		tu.SetType(*s)
	}
	return tu
}

// ClearType clears the value of the "type" field.
func (tu *TaxonomyUpdate) ClearType() *TaxonomyUpdate {
	tu.mutation.ClearType()
	return tu
}

// SetSlug sets the "slug" field.
func (tu *TaxonomyUpdate) SetSlug(s string) *TaxonomyUpdate {
	tu.mutation.SetSlug(s)
	return tu
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (tu *TaxonomyUpdate) SetNillableSlug(s *string) *TaxonomyUpdate {
	if s != nil {
		tu.SetSlug(*s)
	}
	return tu
}

// ClearSlug clears the value of the "slug" field.
func (tu *TaxonomyUpdate) ClearSlug() *TaxonomyUpdate {
	tu.mutation.ClearSlug()
	return tu
}

// SetCover sets the "cover" field.
func (tu *TaxonomyUpdate) SetCover(s string) *TaxonomyUpdate {
	tu.mutation.SetCover(s)
	return tu
}

// SetNillableCover sets the "cover" field if the given value is not nil.
func (tu *TaxonomyUpdate) SetNillableCover(s *string) *TaxonomyUpdate {
	if s != nil {
		tu.SetCover(*s)
	}
	return tu
}

// ClearCover clears the value of the "cover" field.
func (tu *TaxonomyUpdate) ClearCover() *TaxonomyUpdate {
	tu.mutation.ClearCover()
	return tu
}

// SetThumbnail sets the "thumbnail" field.
func (tu *TaxonomyUpdate) SetThumbnail(s string) *TaxonomyUpdate {
	tu.mutation.SetThumbnail(s)
	return tu
}

// SetNillableThumbnail sets the "thumbnail" field if the given value is not nil.
func (tu *TaxonomyUpdate) SetNillableThumbnail(s *string) *TaxonomyUpdate {
	if s != nil {
		tu.SetThumbnail(*s)
	}
	return tu
}

// ClearThumbnail clears the value of the "thumbnail" field.
func (tu *TaxonomyUpdate) ClearThumbnail() *TaxonomyUpdate {
	tu.mutation.ClearThumbnail()
	return tu
}

// SetColor sets the "color" field.
func (tu *TaxonomyUpdate) SetColor(s string) *TaxonomyUpdate {
	tu.mutation.SetColor(s)
	return tu
}

// SetNillableColor sets the "color" field if the given value is not nil.
func (tu *TaxonomyUpdate) SetNillableColor(s *string) *TaxonomyUpdate {
	if s != nil {
		tu.SetColor(*s)
	}
	return tu
}

// ClearColor clears the value of the "color" field.
func (tu *TaxonomyUpdate) ClearColor() *TaxonomyUpdate {
	tu.mutation.ClearColor()
	return tu
}

// SetIcon sets the "icon" field.
func (tu *TaxonomyUpdate) SetIcon(s string) *TaxonomyUpdate {
	tu.mutation.SetIcon(s)
	return tu
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (tu *TaxonomyUpdate) SetNillableIcon(s *string) *TaxonomyUpdate {
	if s != nil {
		tu.SetIcon(*s)
	}
	return tu
}

// ClearIcon clears the value of the "icon" field.
func (tu *TaxonomyUpdate) ClearIcon() *TaxonomyUpdate {
	tu.mutation.ClearIcon()
	return tu
}

// SetURL sets the "url" field.
func (tu *TaxonomyUpdate) SetURL(s string) *TaxonomyUpdate {
	tu.mutation.SetURL(s)
	return tu
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (tu *TaxonomyUpdate) SetNillableURL(s *string) *TaxonomyUpdate {
	if s != nil {
		tu.SetURL(*s)
	}
	return tu
}

// ClearURL clears the value of the "url" field.
func (tu *TaxonomyUpdate) ClearURL() *TaxonomyUpdate {
	tu.mutation.ClearURL()
	return tu
}

// SetKeywords sets the "keywords" field.
func (tu *TaxonomyUpdate) SetKeywords(s string) *TaxonomyUpdate {
	tu.mutation.SetKeywords(s)
	return tu
}

// SetNillableKeywords sets the "keywords" field if the given value is not nil.
func (tu *TaxonomyUpdate) SetNillableKeywords(s *string) *TaxonomyUpdate {
	if s != nil {
		tu.SetKeywords(*s)
	}
	return tu
}

// ClearKeywords clears the value of the "keywords" field.
func (tu *TaxonomyUpdate) ClearKeywords() *TaxonomyUpdate {
	tu.mutation.ClearKeywords()
	return tu
}

// SetDescription sets the "description" field.
func (tu *TaxonomyUpdate) SetDescription(s string) *TaxonomyUpdate {
	tu.mutation.SetDescription(s)
	return tu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tu *TaxonomyUpdate) SetNillableDescription(s *string) *TaxonomyUpdate {
	if s != nil {
		tu.SetDescription(*s)
	}
	return tu
}

// ClearDescription clears the value of the "description" field.
func (tu *TaxonomyUpdate) ClearDescription() *TaxonomyUpdate {
	tu.mutation.ClearDescription()
	return tu
}

// SetStatus sets the "status" field.
func (tu *TaxonomyUpdate) SetStatus(i int) *TaxonomyUpdate {
	tu.mutation.ResetStatus()
	tu.mutation.SetStatus(i)
	return tu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tu *TaxonomyUpdate) SetNillableStatus(i *int) *TaxonomyUpdate {
	if i != nil {
		tu.SetStatus(*i)
	}
	return tu
}

// AddStatus adds i to the "status" field.
func (tu *TaxonomyUpdate) AddStatus(i int) *TaxonomyUpdate {
	tu.mutation.AddStatus(i)
	return tu
}

// SetExtras sets the "extras" field.
func (tu *TaxonomyUpdate) SetExtras(m map[string]interface{}) *TaxonomyUpdate {
	tu.mutation.SetExtras(m)
	return tu
}

// ClearExtras clears the value of the "extras" field.
func (tu *TaxonomyUpdate) ClearExtras() *TaxonomyUpdate {
	tu.mutation.ClearExtras()
	return tu
}

// SetParentID sets the "parent_id" field.
func (tu *TaxonomyUpdate) SetParentID(s string) *TaxonomyUpdate {
	tu.mutation.SetParentID(s)
	return tu
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (tu *TaxonomyUpdate) SetNillableParentID(s *string) *TaxonomyUpdate {
	if s != nil {
		tu.SetParentID(*s)
	}
	return tu
}

// ClearParentID clears the value of the "parent_id" field.
func (tu *TaxonomyUpdate) ClearParentID() *TaxonomyUpdate {
	tu.mutation.ClearParentID()
	return tu
}

// SetTenantID sets the "tenant_id" field.
func (tu *TaxonomyUpdate) SetTenantID(s string) *TaxonomyUpdate {
	tu.mutation.SetTenantID(s)
	return tu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (tu *TaxonomyUpdate) SetNillableTenantID(s *string) *TaxonomyUpdate {
	if s != nil {
		tu.SetTenantID(*s)
	}
	return tu
}

// ClearTenantID clears the value of the "tenant_id" field.
func (tu *TaxonomyUpdate) ClearTenantID() *TaxonomyUpdate {
	tu.mutation.ClearTenantID()
	return tu
}

// SetCreatedBy sets the "created_by" field.
func (tu *TaxonomyUpdate) SetCreatedBy(s string) *TaxonomyUpdate {
	tu.mutation.SetCreatedBy(s)
	return tu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (tu *TaxonomyUpdate) SetNillableCreatedBy(s *string) *TaxonomyUpdate {
	if s != nil {
		tu.SetCreatedBy(*s)
	}
	return tu
}

// ClearCreatedBy clears the value of the "created_by" field.
func (tu *TaxonomyUpdate) ClearCreatedBy() *TaxonomyUpdate {
	tu.mutation.ClearCreatedBy()
	return tu
}

// SetUpdatedBy sets the "updated_by" field.
func (tu *TaxonomyUpdate) SetUpdatedBy(s string) *TaxonomyUpdate {
	tu.mutation.SetUpdatedBy(s)
	return tu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (tu *TaxonomyUpdate) SetNillableUpdatedBy(s *string) *TaxonomyUpdate {
	if s != nil {
		tu.SetUpdatedBy(*s)
	}
	return tu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (tu *TaxonomyUpdate) ClearUpdatedBy() *TaxonomyUpdate {
	tu.mutation.ClearUpdatedBy()
	return tu
}

// SetUpdatedAt sets the "updated_at" field.
func (tu *TaxonomyUpdate) SetUpdatedAt(i int64) *TaxonomyUpdate {
	tu.mutation.ResetUpdatedAt()
	tu.mutation.SetUpdatedAt(i)
	return tu
}

// AddUpdatedAt adds i to the "updated_at" field.
func (tu *TaxonomyUpdate) AddUpdatedAt(i int64) *TaxonomyUpdate {
	tu.mutation.AddUpdatedAt(i)
	return tu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tu *TaxonomyUpdate) ClearUpdatedAt() *TaxonomyUpdate {
	tu.mutation.ClearUpdatedAt()
	return tu
}

// Mutation returns the TaxonomyMutation object of the builder.
func (tu *TaxonomyUpdate) Mutation() *TaxonomyMutation {
	return tu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TaxonomyUpdate) Save(ctx context.Context) (int, error) {
	tu.defaults()
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TaxonomyUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TaxonomyUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TaxonomyUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tu *TaxonomyUpdate) defaults() {
	if _, ok := tu.mutation.UpdatedAt(); !ok && !tu.mutation.UpdatedAtCleared() {
		v := taxonomy.UpdateDefaultUpdatedAt()
		tu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *TaxonomyUpdate) check() error {
	if v, ok := tu.mutation.ParentID(); ok {
		if err := taxonomy.ParentIDValidator(v); err != nil {
			return &ValidationError{Name: "parent_id", err: fmt.Errorf(`ent: validator failed for field "Taxonomy.parent_id": %w`, err)}
		}
	}
	if v, ok := tu.mutation.TenantID(); ok {
		if err := taxonomy.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "Taxonomy.tenant_id": %w`, err)}
		}
	}
	if v, ok := tu.mutation.CreatedBy(); ok {
		if err := taxonomy.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "Taxonomy.created_by": %w`, err)}
		}
	}
	if v, ok := tu.mutation.UpdatedBy(); ok {
		if err := taxonomy.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "Taxonomy.updated_by": %w`, err)}
		}
	}
	return nil
}

func (tu *TaxonomyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(taxonomy.Table, taxonomy.Columns, sqlgraph.NewFieldSpec(taxonomy.FieldID, field.TypeString))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.Name(); ok {
		_spec.SetField(taxonomy.FieldName, field.TypeString, value)
	}
	if tu.mutation.NameCleared() {
		_spec.ClearField(taxonomy.FieldName, field.TypeString)
	}
	if value, ok := tu.mutation.GetType(); ok {
		_spec.SetField(taxonomy.FieldType, field.TypeString, value)
	}
	if tu.mutation.TypeCleared() {
		_spec.ClearField(taxonomy.FieldType, field.TypeString)
	}
	if value, ok := tu.mutation.Slug(); ok {
		_spec.SetField(taxonomy.FieldSlug, field.TypeString, value)
	}
	if tu.mutation.SlugCleared() {
		_spec.ClearField(taxonomy.FieldSlug, field.TypeString)
	}
	if value, ok := tu.mutation.Cover(); ok {
		_spec.SetField(taxonomy.FieldCover, field.TypeString, value)
	}
	if tu.mutation.CoverCleared() {
		_spec.ClearField(taxonomy.FieldCover, field.TypeString)
	}
	if value, ok := tu.mutation.Thumbnail(); ok {
		_spec.SetField(taxonomy.FieldThumbnail, field.TypeString, value)
	}
	if tu.mutation.ThumbnailCleared() {
		_spec.ClearField(taxonomy.FieldThumbnail, field.TypeString)
	}
	if value, ok := tu.mutation.Color(); ok {
		_spec.SetField(taxonomy.FieldColor, field.TypeString, value)
	}
	if tu.mutation.ColorCleared() {
		_spec.ClearField(taxonomy.FieldColor, field.TypeString)
	}
	if value, ok := tu.mutation.Icon(); ok {
		_spec.SetField(taxonomy.FieldIcon, field.TypeString, value)
	}
	if tu.mutation.IconCleared() {
		_spec.ClearField(taxonomy.FieldIcon, field.TypeString)
	}
	if value, ok := tu.mutation.URL(); ok {
		_spec.SetField(taxonomy.FieldURL, field.TypeString, value)
	}
	if tu.mutation.URLCleared() {
		_spec.ClearField(taxonomy.FieldURL, field.TypeString)
	}
	if value, ok := tu.mutation.Keywords(); ok {
		_spec.SetField(taxonomy.FieldKeywords, field.TypeString, value)
	}
	if tu.mutation.KeywordsCleared() {
		_spec.ClearField(taxonomy.FieldKeywords, field.TypeString)
	}
	if value, ok := tu.mutation.Description(); ok {
		_spec.SetField(taxonomy.FieldDescription, field.TypeString, value)
	}
	if tu.mutation.DescriptionCleared() {
		_spec.ClearField(taxonomy.FieldDescription, field.TypeString)
	}
	if value, ok := tu.mutation.Status(); ok {
		_spec.SetField(taxonomy.FieldStatus, field.TypeInt, value)
	}
	if value, ok := tu.mutation.AddedStatus(); ok {
		_spec.AddField(taxonomy.FieldStatus, field.TypeInt, value)
	}
	if value, ok := tu.mutation.Extras(); ok {
		_spec.SetField(taxonomy.FieldExtras, field.TypeJSON, value)
	}
	if tu.mutation.ExtrasCleared() {
		_spec.ClearField(taxonomy.FieldExtras, field.TypeJSON)
	}
	if value, ok := tu.mutation.ParentID(); ok {
		_spec.SetField(taxonomy.FieldParentID, field.TypeString, value)
	}
	if tu.mutation.ParentIDCleared() {
		_spec.ClearField(taxonomy.FieldParentID, field.TypeString)
	}
	if value, ok := tu.mutation.TenantID(); ok {
		_spec.SetField(taxonomy.FieldTenantID, field.TypeString, value)
	}
	if tu.mutation.TenantIDCleared() {
		_spec.ClearField(taxonomy.FieldTenantID, field.TypeString)
	}
	if value, ok := tu.mutation.CreatedBy(); ok {
		_spec.SetField(taxonomy.FieldCreatedBy, field.TypeString, value)
	}
	if tu.mutation.CreatedByCleared() {
		_spec.ClearField(taxonomy.FieldCreatedBy, field.TypeString)
	}
	if value, ok := tu.mutation.UpdatedBy(); ok {
		_spec.SetField(taxonomy.FieldUpdatedBy, field.TypeString, value)
	}
	if tu.mutation.UpdatedByCleared() {
		_spec.ClearField(taxonomy.FieldUpdatedBy, field.TypeString)
	}
	if tu.mutation.CreatedAtCleared() {
		_spec.ClearField(taxonomy.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := tu.mutation.UpdatedAt(); ok {
		_spec.SetField(taxonomy.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := tu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(taxonomy.FieldUpdatedAt, field.TypeInt64, value)
	}
	if tu.mutation.UpdatedAtCleared() {
		_spec.ClearField(taxonomy.FieldUpdatedAt, field.TypeInt64)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{taxonomy.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TaxonomyUpdateOne is the builder for updating a single Taxonomy entity.
type TaxonomyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TaxonomyMutation
}

// SetName sets the "name" field.
func (tuo *TaxonomyUpdateOne) SetName(s string) *TaxonomyUpdateOne {
	tuo.mutation.SetName(s)
	return tuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tuo *TaxonomyUpdateOne) SetNillableName(s *string) *TaxonomyUpdateOne {
	if s != nil {
		tuo.SetName(*s)
	}
	return tuo
}

// ClearName clears the value of the "name" field.
func (tuo *TaxonomyUpdateOne) ClearName() *TaxonomyUpdateOne {
	tuo.mutation.ClearName()
	return tuo
}

// SetType sets the "type" field.
func (tuo *TaxonomyUpdateOne) SetType(s string) *TaxonomyUpdateOne {
	tuo.mutation.SetType(s)
	return tuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (tuo *TaxonomyUpdateOne) SetNillableType(s *string) *TaxonomyUpdateOne {
	if s != nil {
		tuo.SetType(*s)
	}
	return tuo
}

// ClearType clears the value of the "type" field.
func (tuo *TaxonomyUpdateOne) ClearType() *TaxonomyUpdateOne {
	tuo.mutation.ClearType()
	return tuo
}

// SetSlug sets the "slug" field.
func (tuo *TaxonomyUpdateOne) SetSlug(s string) *TaxonomyUpdateOne {
	tuo.mutation.SetSlug(s)
	return tuo
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (tuo *TaxonomyUpdateOne) SetNillableSlug(s *string) *TaxonomyUpdateOne {
	if s != nil {
		tuo.SetSlug(*s)
	}
	return tuo
}

// ClearSlug clears the value of the "slug" field.
func (tuo *TaxonomyUpdateOne) ClearSlug() *TaxonomyUpdateOne {
	tuo.mutation.ClearSlug()
	return tuo
}

// SetCover sets the "cover" field.
func (tuo *TaxonomyUpdateOne) SetCover(s string) *TaxonomyUpdateOne {
	tuo.mutation.SetCover(s)
	return tuo
}

// SetNillableCover sets the "cover" field if the given value is not nil.
func (tuo *TaxonomyUpdateOne) SetNillableCover(s *string) *TaxonomyUpdateOne {
	if s != nil {
		tuo.SetCover(*s)
	}
	return tuo
}

// ClearCover clears the value of the "cover" field.
func (tuo *TaxonomyUpdateOne) ClearCover() *TaxonomyUpdateOne {
	tuo.mutation.ClearCover()
	return tuo
}

// SetThumbnail sets the "thumbnail" field.
func (tuo *TaxonomyUpdateOne) SetThumbnail(s string) *TaxonomyUpdateOne {
	tuo.mutation.SetThumbnail(s)
	return tuo
}

// SetNillableThumbnail sets the "thumbnail" field if the given value is not nil.
func (tuo *TaxonomyUpdateOne) SetNillableThumbnail(s *string) *TaxonomyUpdateOne {
	if s != nil {
		tuo.SetThumbnail(*s)
	}
	return tuo
}

// ClearThumbnail clears the value of the "thumbnail" field.
func (tuo *TaxonomyUpdateOne) ClearThumbnail() *TaxonomyUpdateOne {
	tuo.mutation.ClearThumbnail()
	return tuo
}

// SetColor sets the "color" field.
func (tuo *TaxonomyUpdateOne) SetColor(s string) *TaxonomyUpdateOne {
	tuo.mutation.SetColor(s)
	return tuo
}

// SetNillableColor sets the "color" field if the given value is not nil.
func (tuo *TaxonomyUpdateOne) SetNillableColor(s *string) *TaxonomyUpdateOne {
	if s != nil {
		tuo.SetColor(*s)
	}
	return tuo
}

// ClearColor clears the value of the "color" field.
func (tuo *TaxonomyUpdateOne) ClearColor() *TaxonomyUpdateOne {
	tuo.mutation.ClearColor()
	return tuo
}

// SetIcon sets the "icon" field.
func (tuo *TaxonomyUpdateOne) SetIcon(s string) *TaxonomyUpdateOne {
	tuo.mutation.SetIcon(s)
	return tuo
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (tuo *TaxonomyUpdateOne) SetNillableIcon(s *string) *TaxonomyUpdateOne {
	if s != nil {
		tuo.SetIcon(*s)
	}
	return tuo
}

// ClearIcon clears the value of the "icon" field.
func (tuo *TaxonomyUpdateOne) ClearIcon() *TaxonomyUpdateOne {
	tuo.mutation.ClearIcon()
	return tuo
}

// SetURL sets the "url" field.
func (tuo *TaxonomyUpdateOne) SetURL(s string) *TaxonomyUpdateOne {
	tuo.mutation.SetURL(s)
	return tuo
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (tuo *TaxonomyUpdateOne) SetNillableURL(s *string) *TaxonomyUpdateOne {
	if s != nil {
		tuo.SetURL(*s)
	}
	return tuo
}

// ClearURL clears the value of the "url" field.
func (tuo *TaxonomyUpdateOne) ClearURL() *TaxonomyUpdateOne {
	tuo.mutation.ClearURL()
	return tuo
}

// SetKeywords sets the "keywords" field.
func (tuo *TaxonomyUpdateOne) SetKeywords(s string) *TaxonomyUpdateOne {
	tuo.mutation.SetKeywords(s)
	return tuo
}

// SetNillableKeywords sets the "keywords" field if the given value is not nil.
func (tuo *TaxonomyUpdateOne) SetNillableKeywords(s *string) *TaxonomyUpdateOne {
	if s != nil {
		tuo.SetKeywords(*s)
	}
	return tuo
}

// ClearKeywords clears the value of the "keywords" field.
func (tuo *TaxonomyUpdateOne) ClearKeywords() *TaxonomyUpdateOne {
	tuo.mutation.ClearKeywords()
	return tuo
}

// SetDescription sets the "description" field.
func (tuo *TaxonomyUpdateOne) SetDescription(s string) *TaxonomyUpdateOne {
	tuo.mutation.SetDescription(s)
	return tuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tuo *TaxonomyUpdateOne) SetNillableDescription(s *string) *TaxonomyUpdateOne {
	if s != nil {
		tuo.SetDescription(*s)
	}
	return tuo
}

// ClearDescription clears the value of the "description" field.
func (tuo *TaxonomyUpdateOne) ClearDescription() *TaxonomyUpdateOne {
	tuo.mutation.ClearDescription()
	return tuo
}

// SetStatus sets the "status" field.
func (tuo *TaxonomyUpdateOne) SetStatus(i int) *TaxonomyUpdateOne {
	tuo.mutation.ResetStatus()
	tuo.mutation.SetStatus(i)
	return tuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tuo *TaxonomyUpdateOne) SetNillableStatus(i *int) *TaxonomyUpdateOne {
	if i != nil {
		tuo.SetStatus(*i)
	}
	return tuo
}

// AddStatus adds i to the "status" field.
func (tuo *TaxonomyUpdateOne) AddStatus(i int) *TaxonomyUpdateOne {
	tuo.mutation.AddStatus(i)
	return tuo
}

// SetExtras sets the "extras" field.
func (tuo *TaxonomyUpdateOne) SetExtras(m map[string]interface{}) *TaxonomyUpdateOne {
	tuo.mutation.SetExtras(m)
	return tuo
}

// ClearExtras clears the value of the "extras" field.
func (tuo *TaxonomyUpdateOne) ClearExtras() *TaxonomyUpdateOne {
	tuo.mutation.ClearExtras()
	return tuo
}

// SetParentID sets the "parent_id" field.
func (tuo *TaxonomyUpdateOne) SetParentID(s string) *TaxonomyUpdateOne {
	tuo.mutation.SetParentID(s)
	return tuo
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (tuo *TaxonomyUpdateOne) SetNillableParentID(s *string) *TaxonomyUpdateOne {
	if s != nil {
		tuo.SetParentID(*s)
	}
	return tuo
}

// ClearParentID clears the value of the "parent_id" field.
func (tuo *TaxonomyUpdateOne) ClearParentID() *TaxonomyUpdateOne {
	tuo.mutation.ClearParentID()
	return tuo
}

// SetTenantID sets the "tenant_id" field.
func (tuo *TaxonomyUpdateOne) SetTenantID(s string) *TaxonomyUpdateOne {
	tuo.mutation.SetTenantID(s)
	return tuo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (tuo *TaxonomyUpdateOne) SetNillableTenantID(s *string) *TaxonomyUpdateOne {
	if s != nil {
		tuo.SetTenantID(*s)
	}
	return tuo
}

// ClearTenantID clears the value of the "tenant_id" field.
func (tuo *TaxonomyUpdateOne) ClearTenantID() *TaxonomyUpdateOne {
	tuo.mutation.ClearTenantID()
	return tuo
}

// SetCreatedBy sets the "created_by" field.
func (tuo *TaxonomyUpdateOne) SetCreatedBy(s string) *TaxonomyUpdateOne {
	tuo.mutation.SetCreatedBy(s)
	return tuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (tuo *TaxonomyUpdateOne) SetNillableCreatedBy(s *string) *TaxonomyUpdateOne {
	if s != nil {
		tuo.SetCreatedBy(*s)
	}
	return tuo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (tuo *TaxonomyUpdateOne) ClearCreatedBy() *TaxonomyUpdateOne {
	tuo.mutation.ClearCreatedBy()
	return tuo
}

// SetUpdatedBy sets the "updated_by" field.
func (tuo *TaxonomyUpdateOne) SetUpdatedBy(s string) *TaxonomyUpdateOne {
	tuo.mutation.SetUpdatedBy(s)
	return tuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (tuo *TaxonomyUpdateOne) SetNillableUpdatedBy(s *string) *TaxonomyUpdateOne {
	if s != nil {
		tuo.SetUpdatedBy(*s)
	}
	return tuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (tuo *TaxonomyUpdateOne) ClearUpdatedBy() *TaxonomyUpdateOne {
	tuo.mutation.ClearUpdatedBy()
	return tuo
}

// SetUpdatedAt sets the "updated_at" field.
func (tuo *TaxonomyUpdateOne) SetUpdatedAt(i int64) *TaxonomyUpdateOne {
	tuo.mutation.ResetUpdatedAt()
	tuo.mutation.SetUpdatedAt(i)
	return tuo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (tuo *TaxonomyUpdateOne) AddUpdatedAt(i int64) *TaxonomyUpdateOne {
	tuo.mutation.AddUpdatedAt(i)
	return tuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tuo *TaxonomyUpdateOne) ClearUpdatedAt() *TaxonomyUpdateOne {
	tuo.mutation.ClearUpdatedAt()
	return tuo
}

// Mutation returns the TaxonomyMutation object of the builder.
func (tuo *TaxonomyUpdateOne) Mutation() *TaxonomyMutation {
	return tuo.mutation
}

// Where appends a list predicates to the TaxonomyUpdate builder.
func (tuo *TaxonomyUpdateOne) Where(ps ...predicate.Taxonomy) *TaxonomyUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TaxonomyUpdateOne) Select(field string, fields ...string) *TaxonomyUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Taxonomy entity.
func (tuo *TaxonomyUpdateOne) Save(ctx context.Context) (*Taxonomy, error) {
	tuo.defaults()
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TaxonomyUpdateOne) SaveX(ctx context.Context) *Taxonomy {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TaxonomyUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TaxonomyUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tuo *TaxonomyUpdateOne) defaults() {
	if _, ok := tuo.mutation.UpdatedAt(); !ok && !tuo.mutation.UpdatedAtCleared() {
		v := taxonomy.UpdateDefaultUpdatedAt()
		tuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TaxonomyUpdateOne) check() error {
	if v, ok := tuo.mutation.ParentID(); ok {
		if err := taxonomy.ParentIDValidator(v); err != nil {
			return &ValidationError{Name: "parent_id", err: fmt.Errorf(`ent: validator failed for field "Taxonomy.parent_id": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.TenantID(); ok {
		if err := taxonomy.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "Taxonomy.tenant_id": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.CreatedBy(); ok {
		if err := taxonomy.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "Taxonomy.created_by": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.UpdatedBy(); ok {
		if err := taxonomy.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "Taxonomy.updated_by": %w`, err)}
		}
	}
	return nil
}

func (tuo *TaxonomyUpdateOne) sqlSave(ctx context.Context) (_node *Taxonomy, err error) {
	if err := tuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(taxonomy.Table, taxonomy.Columns, sqlgraph.NewFieldSpec(taxonomy.FieldID, field.TypeString))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Taxonomy.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, taxonomy.FieldID)
		for _, f := range fields {
			if !taxonomy.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != taxonomy.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.Name(); ok {
		_spec.SetField(taxonomy.FieldName, field.TypeString, value)
	}
	if tuo.mutation.NameCleared() {
		_spec.ClearField(taxonomy.FieldName, field.TypeString)
	}
	if value, ok := tuo.mutation.GetType(); ok {
		_spec.SetField(taxonomy.FieldType, field.TypeString, value)
	}
	if tuo.mutation.TypeCleared() {
		_spec.ClearField(taxonomy.FieldType, field.TypeString)
	}
	if value, ok := tuo.mutation.Slug(); ok {
		_spec.SetField(taxonomy.FieldSlug, field.TypeString, value)
	}
	if tuo.mutation.SlugCleared() {
		_spec.ClearField(taxonomy.FieldSlug, field.TypeString)
	}
	if value, ok := tuo.mutation.Cover(); ok {
		_spec.SetField(taxonomy.FieldCover, field.TypeString, value)
	}
	if tuo.mutation.CoverCleared() {
		_spec.ClearField(taxonomy.FieldCover, field.TypeString)
	}
	if value, ok := tuo.mutation.Thumbnail(); ok {
		_spec.SetField(taxonomy.FieldThumbnail, field.TypeString, value)
	}
	if tuo.mutation.ThumbnailCleared() {
		_spec.ClearField(taxonomy.FieldThumbnail, field.TypeString)
	}
	if value, ok := tuo.mutation.Color(); ok {
		_spec.SetField(taxonomy.FieldColor, field.TypeString, value)
	}
	if tuo.mutation.ColorCleared() {
		_spec.ClearField(taxonomy.FieldColor, field.TypeString)
	}
	if value, ok := tuo.mutation.Icon(); ok {
		_spec.SetField(taxonomy.FieldIcon, field.TypeString, value)
	}
	if tuo.mutation.IconCleared() {
		_spec.ClearField(taxonomy.FieldIcon, field.TypeString)
	}
	if value, ok := tuo.mutation.URL(); ok {
		_spec.SetField(taxonomy.FieldURL, field.TypeString, value)
	}
	if tuo.mutation.URLCleared() {
		_spec.ClearField(taxonomy.FieldURL, field.TypeString)
	}
	if value, ok := tuo.mutation.Keywords(); ok {
		_spec.SetField(taxonomy.FieldKeywords, field.TypeString, value)
	}
	if tuo.mutation.KeywordsCleared() {
		_spec.ClearField(taxonomy.FieldKeywords, field.TypeString)
	}
	if value, ok := tuo.mutation.Description(); ok {
		_spec.SetField(taxonomy.FieldDescription, field.TypeString, value)
	}
	if tuo.mutation.DescriptionCleared() {
		_spec.ClearField(taxonomy.FieldDescription, field.TypeString)
	}
	if value, ok := tuo.mutation.Status(); ok {
		_spec.SetField(taxonomy.FieldStatus, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.AddedStatus(); ok {
		_spec.AddField(taxonomy.FieldStatus, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.Extras(); ok {
		_spec.SetField(taxonomy.FieldExtras, field.TypeJSON, value)
	}
	if tuo.mutation.ExtrasCleared() {
		_spec.ClearField(taxonomy.FieldExtras, field.TypeJSON)
	}
	if value, ok := tuo.mutation.ParentID(); ok {
		_spec.SetField(taxonomy.FieldParentID, field.TypeString, value)
	}
	if tuo.mutation.ParentIDCleared() {
		_spec.ClearField(taxonomy.FieldParentID, field.TypeString)
	}
	if value, ok := tuo.mutation.TenantID(); ok {
		_spec.SetField(taxonomy.FieldTenantID, field.TypeString, value)
	}
	if tuo.mutation.TenantIDCleared() {
		_spec.ClearField(taxonomy.FieldTenantID, field.TypeString)
	}
	if value, ok := tuo.mutation.CreatedBy(); ok {
		_spec.SetField(taxonomy.FieldCreatedBy, field.TypeString, value)
	}
	if tuo.mutation.CreatedByCleared() {
		_spec.ClearField(taxonomy.FieldCreatedBy, field.TypeString)
	}
	if value, ok := tuo.mutation.UpdatedBy(); ok {
		_spec.SetField(taxonomy.FieldUpdatedBy, field.TypeString, value)
	}
	if tuo.mutation.UpdatedByCleared() {
		_spec.ClearField(taxonomy.FieldUpdatedBy, field.TypeString)
	}
	if tuo.mutation.CreatedAtCleared() {
		_spec.ClearField(taxonomy.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := tuo.mutation.UpdatedAt(); ok {
		_spec.SetField(taxonomy.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := tuo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(taxonomy.FieldUpdatedAt, field.TypeInt64, value)
	}
	if tuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(taxonomy.FieldUpdatedAt, field.TypeInt64)
	}
	_node = &Taxonomy{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{taxonomy.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
