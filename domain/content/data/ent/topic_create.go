// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/domain/content/data/ent/topic"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TopicCreate is the builder for creating a Topic entity.
type TopicCreate struct {
	config
	mutation *TopicMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (tc *TopicCreate) SetName(s string) *TopicCreate {
	tc.mutation.SetName(s)
	return tc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tc *TopicCreate) SetNillableName(s *string) *TopicCreate {
	if s != nil {
		tc.SetName(*s)
	}
	return tc
}

// SetTitle sets the "title" field.
func (tc *TopicCreate) SetTitle(s string) *TopicCreate {
	tc.mutation.SetTitle(s)
	return tc
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (tc *TopicCreate) SetNillableTitle(s *string) *TopicCreate {
	if s != nil {
		tc.SetTitle(*s)
	}
	return tc
}

// SetSlug sets the "slug" field.
func (tc *TopicCreate) SetSlug(s string) *TopicCreate {
	tc.mutation.SetSlug(s)
	return tc
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (tc *TopicCreate) SetNillableSlug(s *string) *TopicCreate {
	if s != nil {
		tc.SetSlug(*s)
	}
	return tc
}

// SetContent sets the "content" field.
func (tc *TopicCreate) SetContent(s string) *TopicCreate {
	tc.mutation.SetContent(s)
	return tc
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (tc *TopicCreate) SetNillableContent(s *string) *TopicCreate {
	if s != nil {
		tc.SetContent(*s)
	}
	return tc
}

// SetThumbnail sets the "thumbnail" field.
func (tc *TopicCreate) SetThumbnail(s string) *TopicCreate {
	tc.mutation.SetThumbnail(s)
	return tc
}

// SetNillableThumbnail sets the "thumbnail" field if the given value is not nil.
func (tc *TopicCreate) SetNillableThumbnail(s *string) *TopicCreate {
	if s != nil {
		tc.SetThumbnail(*s)
	}
	return tc
}

// SetTemp sets the "temp" field.
func (tc *TopicCreate) SetTemp(b bool) *TopicCreate {
	tc.mutation.SetTemp(b)
	return tc
}

// SetNillableTemp sets the "temp" field if the given value is not nil.
func (tc *TopicCreate) SetNillableTemp(b *bool) *TopicCreate {
	if b != nil {
		tc.SetTemp(*b)
	}
	return tc
}

// SetMarkdown sets the "markdown" field.
func (tc *TopicCreate) SetMarkdown(b bool) *TopicCreate {
	tc.mutation.SetMarkdown(b)
	return tc
}

// SetNillableMarkdown sets the "markdown" field if the given value is not nil.
func (tc *TopicCreate) SetNillableMarkdown(b *bool) *TopicCreate {
	if b != nil {
		tc.SetMarkdown(*b)
	}
	return tc
}

// SetPrivate sets the "private" field.
func (tc *TopicCreate) SetPrivate(b bool) *TopicCreate {
	tc.mutation.SetPrivate(b)
	return tc
}

// SetNillablePrivate sets the "private" field if the given value is not nil.
func (tc *TopicCreate) SetNillablePrivate(b *bool) *TopicCreate {
	if b != nil {
		tc.SetPrivate(*b)
	}
	return tc
}

// SetStatus sets the "status" field.
func (tc *TopicCreate) SetStatus(i int) *TopicCreate {
	tc.mutation.SetStatus(i)
	return tc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tc *TopicCreate) SetNillableStatus(i *int) *TopicCreate {
	if i != nil {
		tc.SetStatus(*i)
	}
	return tc
}

// SetReleased sets the "released" field.
func (tc *TopicCreate) SetReleased(i int64) *TopicCreate {
	tc.mutation.SetReleased(i)
	return tc
}

// SetNillableReleased sets the "released" field if the given value is not nil.
func (tc *TopicCreate) SetNillableReleased(i *int64) *TopicCreate {
	if i != nil {
		tc.SetReleased(*i)
	}
	return tc
}

// SetTaxonomyID sets the "taxonomy_id" field.
func (tc *TopicCreate) SetTaxonomyID(s string) *TopicCreate {
	tc.mutation.SetTaxonomyID(s)
	return tc
}

// SetNillableTaxonomyID sets the "taxonomy_id" field if the given value is not nil.
func (tc *TopicCreate) SetNillableTaxonomyID(s *string) *TopicCreate {
	if s != nil {
		tc.SetTaxonomyID(*s)
	}
	return tc
}

// SetTenantID sets the "tenant_id" field.
func (tc *TopicCreate) SetTenantID(s string) *TopicCreate {
	tc.mutation.SetTenantID(s)
	return tc
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (tc *TopicCreate) SetNillableTenantID(s *string) *TopicCreate {
	if s != nil {
		tc.SetTenantID(*s)
	}
	return tc
}

// SetCreatedBy sets the "created_by" field.
func (tc *TopicCreate) SetCreatedBy(s string) *TopicCreate {
	tc.mutation.SetCreatedBy(s)
	return tc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (tc *TopicCreate) SetNillableCreatedBy(s *string) *TopicCreate {
	if s != nil {
		tc.SetCreatedBy(*s)
	}
	return tc
}

// SetUpdatedBy sets the "updated_by" field.
func (tc *TopicCreate) SetUpdatedBy(s string) *TopicCreate {
	tc.mutation.SetUpdatedBy(s)
	return tc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (tc *TopicCreate) SetNillableUpdatedBy(s *string) *TopicCreate {
	if s != nil {
		tc.SetUpdatedBy(*s)
	}
	return tc
}

// SetCreatedAt sets the "created_at" field.
func (tc *TopicCreate) SetCreatedAt(i int64) *TopicCreate {
	tc.mutation.SetCreatedAt(i)
	return tc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tc *TopicCreate) SetNillableCreatedAt(i *int64) *TopicCreate {
	if i != nil {
		tc.SetCreatedAt(*i)
	}
	return tc
}

// SetUpdatedAt sets the "updated_at" field.
func (tc *TopicCreate) SetUpdatedAt(i int64) *TopicCreate {
	tc.mutation.SetUpdatedAt(i)
	return tc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tc *TopicCreate) SetNillableUpdatedAt(i *int64) *TopicCreate {
	if i != nil {
		tc.SetUpdatedAt(*i)
	}
	return tc
}

// SetID sets the "id" field.
func (tc *TopicCreate) SetID(s string) *TopicCreate {
	tc.mutation.SetID(s)
	return tc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (tc *TopicCreate) SetNillableID(s *string) *TopicCreate {
	if s != nil {
		tc.SetID(*s)
	}
	return tc
}

// Mutation returns the TopicMutation object of the builder.
func (tc *TopicCreate) Mutation() *TopicMutation {
	return tc.mutation
}

// Save creates the Topic in the database.
func (tc *TopicCreate) Save(ctx context.Context) (*Topic, error) {
	tc.defaults()
	return withHooks(ctx, tc.sqlSave, tc.mutation, tc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TopicCreate) SaveX(ctx context.Context) *Topic {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TopicCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TopicCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *TopicCreate) defaults() {
	if _, ok := tc.mutation.Temp(); !ok {
		v := topic.DefaultTemp
		tc.mutation.SetTemp(v)
	}
	if _, ok := tc.mutation.Markdown(); !ok {
		v := topic.DefaultMarkdown
		tc.mutation.SetMarkdown(v)
	}
	if _, ok := tc.mutation.Private(); !ok {
		v := topic.DefaultPrivate
		tc.mutation.SetPrivate(v)
	}
	if _, ok := tc.mutation.Status(); !ok {
		v := topic.DefaultStatus
		tc.mutation.SetStatus(v)
	}
	if _, ok := tc.mutation.CreatedAt(); !ok {
		v := topic.DefaultCreatedAt()
		tc.mutation.SetCreatedAt(v)
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		v := topic.DefaultUpdatedAt()
		tc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tc.mutation.ID(); !ok {
		v := topic.DefaultID()
		tc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TopicCreate) check() error {
	if _, ok := tc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Topic.status"`)}
	}
	if v, ok := tc.mutation.TaxonomyID(); ok {
		if err := topic.TaxonomyIDValidator(v); err != nil {
			return &ValidationError{Name: "taxonomy_id", err: fmt.Errorf(`ent: validator failed for field "Topic.taxonomy_id": %w`, err)}
		}
	}
	if v, ok := tc.mutation.TenantID(); ok {
		if err := topic.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "Topic.tenant_id": %w`, err)}
		}
	}
	if v, ok := tc.mutation.CreatedBy(); ok {
		if err := topic.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "Topic.created_by": %w`, err)}
		}
	}
	if v, ok := tc.mutation.UpdatedBy(); ok {
		if err := topic.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "Topic.updated_by": %w`, err)}
		}
	}
	if v, ok := tc.mutation.ID(); ok {
		if err := topic.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Topic.id": %w`, err)}
		}
	}
	return nil
}

func (tc *TopicCreate) sqlSave(ctx context.Context) (*Topic, error) {
	if err := tc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Topic.ID type: %T", _spec.ID.Value)
		}
	}
	tc.mutation.id = &_node.ID
	tc.mutation.done = true
	return _node, nil
}

func (tc *TopicCreate) createSpec() (*Topic, *sqlgraph.CreateSpec) {
	var (
		_node = &Topic{config: tc.config}
		_spec = sqlgraph.NewCreateSpec(topic.Table, sqlgraph.NewFieldSpec(topic.FieldID, field.TypeString))
	)
	if id, ok := tc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tc.mutation.Name(); ok {
		_spec.SetField(topic.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := tc.mutation.Title(); ok {
		_spec.SetField(topic.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := tc.mutation.Slug(); ok {
		_spec.SetField(topic.FieldSlug, field.TypeString, value)
		_node.Slug = value
	}
	if value, ok := tc.mutation.Content(); ok {
		_spec.SetField(topic.FieldContent, field.TypeString, value)
		_node.Content = value
	}
	if value, ok := tc.mutation.Thumbnail(); ok {
		_spec.SetField(topic.FieldThumbnail, field.TypeString, value)
		_node.Thumbnail = value
	}
	if value, ok := tc.mutation.Temp(); ok {
		_spec.SetField(topic.FieldTemp, field.TypeBool, value)
		_node.Temp = value
	}
	if value, ok := tc.mutation.Markdown(); ok {
		_spec.SetField(topic.FieldMarkdown, field.TypeBool, value)
		_node.Markdown = value
	}
	if value, ok := tc.mutation.Private(); ok {
		_spec.SetField(topic.FieldPrivate, field.TypeBool, value)
		_node.Private = value
	}
	if value, ok := tc.mutation.Status(); ok {
		_spec.SetField(topic.FieldStatus, field.TypeInt, value)
		_node.Status = value
	}
	if value, ok := tc.mutation.Released(); ok {
		_spec.SetField(topic.FieldReleased, field.TypeInt64, value)
		_node.Released = value
	}
	if value, ok := tc.mutation.TaxonomyID(); ok {
		_spec.SetField(topic.FieldTaxonomyID, field.TypeString, value)
		_node.TaxonomyID = value
	}
	if value, ok := tc.mutation.TenantID(); ok {
		_spec.SetField(topic.FieldTenantID, field.TypeString, value)
		_node.TenantID = value
	}
	if value, ok := tc.mutation.CreatedBy(); ok {
		_spec.SetField(topic.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := tc.mutation.UpdatedBy(); ok {
		_spec.SetField(topic.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := tc.mutation.CreatedAt(); ok {
		_spec.SetField(topic.FieldCreatedAt, field.TypeInt64, value)
		_node.CreatedAt = value
	}
	if value, ok := tc.mutation.UpdatedAt(); ok {
		_spec.SetField(topic.FieldUpdatedAt, field.TypeInt64, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// TopicCreateBulk is the builder for creating many Topic entities in bulk.
type TopicCreateBulk struct {
	config
	err      error
	builders []*TopicCreate
}

// Save creates the Topic entities in the database.
func (tcb *TopicCreateBulk) Save(ctx context.Context) ([]*Topic, error) {
	if tcb.err != nil {
		return nil, tcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Topic, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TopicMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TopicCreateBulk) SaveX(ctx context.Context) []*Topic {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TopicCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TopicCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}
