// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"ncobase/domain/content/data/ent/media"
	"ncobase/domain/content/data/ent/topic"
	"ncobase/domain/content/data/ent/topicmedia"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// TopicMedia is the model entity for the TopicMedia schema.
type TopicMedia struct {
	config `json:"-"`
	// ID of the ent.
	// primary key
	ID string `json:"id,omitempty"`
	// type
	Type string `json:"type,omitempty"`
	// display order
	Order int `json:"order,omitempty"`
	// id of the creator
	CreatedBy string `json:"created_by,omitempty"`
	// id of the last updater
	UpdatedBy string `json:"updated_by,omitempty"`
	// created at
	CreatedAt int64 `json:"created_at,omitempty"`
	// updated at
	UpdatedAt int64 `json:"updated_at,omitempty"`
	// Topic ID
	TopicID string `json:"topic_id,omitempty"`
	// Media ID
	MediaID string `json:"media_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TopicMediaQuery when eager-loading is set.
	Edges        TopicMediaEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TopicMediaEdges holds the relations/edges for other nodes in the graph.
type TopicMediaEdges struct {
	// Media holds the value of the media edge.
	Media *Media `json:"media,omitempty"`
	// Topic holds the value of the topic edge.
	Topic *Topic `json:"topic,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// MediaOrErr returns the Media value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TopicMediaEdges) MediaOrErr() (*Media, error) {
	if e.Media != nil {
		return e.Media, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: media.Label}
	}
	return nil, &NotLoadedError{edge: "media"}
}

// TopicOrErr returns the Topic value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TopicMediaEdges) TopicOrErr() (*Topic, error) {
	if e.Topic != nil {
		return e.Topic, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: topic.Label}
	}
	return nil, &NotLoadedError{edge: "topic"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TopicMedia) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case topicmedia.FieldOrder, topicmedia.FieldCreatedAt, topicmedia.FieldUpdatedAt:
			values[i] = new(sql.NullInt64)
		case topicmedia.FieldID, topicmedia.FieldType, topicmedia.FieldCreatedBy, topicmedia.FieldUpdatedBy, topicmedia.FieldTopicID, topicmedia.FieldMediaID:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TopicMedia fields.
func (tm *TopicMedia) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case topicmedia.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				tm.ID = value.String
			}
		case topicmedia.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				tm.Type = value.String
			}
		case topicmedia.FieldOrder:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order", values[i])
			} else if value.Valid {
				tm.Order = int(value.Int64)
			}
		case topicmedia.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				tm.CreatedBy = value.String
			}
		case topicmedia.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				tm.UpdatedBy = value.String
			}
		case topicmedia.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				tm.CreatedAt = value.Int64
			}
		case topicmedia.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				tm.UpdatedAt = value.Int64
			}
		case topicmedia.FieldTopicID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field topic_id", values[i])
			} else if value.Valid {
				tm.TopicID = value.String
			}
		case topicmedia.FieldMediaID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field media_id", values[i])
			} else if value.Valid {
				tm.MediaID = value.String
			}
		default:
			tm.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TopicMedia.
// This includes values selected through modifiers, order, etc.
func (tm *TopicMedia) Value(name string) (ent.Value, error) {
	return tm.selectValues.Get(name)
}

// QueryMedia queries the "media" edge of the TopicMedia entity.
func (tm *TopicMedia) QueryMedia() *MediaQuery {
	return NewTopicMediaClient(tm.config).QueryMedia(tm)
}

// QueryTopic queries the "topic" edge of the TopicMedia entity.
func (tm *TopicMedia) QueryTopic() *TopicQuery {
	return NewTopicMediaClient(tm.config).QueryTopic(tm)
}

// Update returns a builder for updating this TopicMedia.
// Note that you need to call TopicMedia.Unwrap() before calling this method if this TopicMedia
// was returned from a transaction, and the transaction was committed or rolled back.
func (tm *TopicMedia) Update() *TopicMediaUpdateOne {
	return NewTopicMediaClient(tm.config).UpdateOne(tm)
}

// Unwrap unwraps the TopicMedia entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tm *TopicMedia) Unwrap() *TopicMedia {
	_tx, ok := tm.config.driver.(*txDriver)
	if !ok {
		panic("ent: TopicMedia is not a transactional entity")
	}
	tm.config.driver = _tx.drv
	return tm
}

// String implements the fmt.Stringer.
func (tm *TopicMedia) String() string {
	var builder strings.Builder
	builder.WriteString("TopicMedia(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tm.ID))
	builder.WriteString("type=")
	builder.WriteString(tm.Type)
	builder.WriteString(", ")
	builder.WriteString("order=")
	builder.WriteString(fmt.Sprintf("%v", tm.Order))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(tm.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(tm.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", tm.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", tm.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("topic_id=")
	builder.WriteString(tm.TopicID)
	builder.WriteString(", ")
	builder.WriteString("media_id=")
	builder.WriteString(tm.MediaID)
	builder.WriteByte(')')
	return builder.String()
}

// TopicMediaSlice is a parsable slice of TopicMedia.
type TopicMediaSlice []*TopicMedia
