// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/domain/content/data/ent/media"
	"ncobase/domain/content/data/ent/predicate"
	"ncobase/domain/content/data/ent/topic"
	"ncobase/domain/content/data/ent/topicmedia"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TopicMediaUpdate is the builder for updating TopicMedia entities.
type TopicMediaUpdate struct {
	config
	hooks    []Hook
	mutation *TopicMediaMutation
}

// Where appends a list predicates to the TopicMediaUpdate builder.
func (tmu *TopicMediaUpdate) Where(ps ...predicate.TopicMedia) *TopicMediaUpdate {
	tmu.mutation.Where(ps...)
	return tmu
}

// SetType sets the "type" field.
func (tmu *TopicMediaUpdate) SetType(s string) *TopicMediaUpdate {
	tmu.mutation.SetType(s)
	return tmu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (tmu *TopicMediaUpdate) SetNillableType(s *string) *TopicMediaUpdate {
	if s != nil {
		tmu.SetType(*s)
	}
	return tmu
}

// ClearType clears the value of the "type" field.
func (tmu *TopicMediaUpdate) ClearType() *TopicMediaUpdate {
	tmu.mutation.ClearType()
	return tmu
}

// SetOrder sets the "order" field.
func (tmu *TopicMediaUpdate) SetOrder(i int) *TopicMediaUpdate {
	tmu.mutation.ResetOrder()
	tmu.mutation.SetOrder(i)
	return tmu
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (tmu *TopicMediaUpdate) SetNillableOrder(i *int) *TopicMediaUpdate {
	if i != nil {
		tmu.SetOrder(*i)
	}
	return tmu
}

// AddOrder adds i to the "order" field.
func (tmu *TopicMediaUpdate) AddOrder(i int) *TopicMediaUpdate {
	tmu.mutation.AddOrder(i)
	return tmu
}

// SetCreatedBy sets the "created_by" field.
func (tmu *TopicMediaUpdate) SetCreatedBy(s string) *TopicMediaUpdate {
	tmu.mutation.SetCreatedBy(s)
	return tmu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (tmu *TopicMediaUpdate) SetNillableCreatedBy(s *string) *TopicMediaUpdate {
	if s != nil {
		tmu.SetCreatedBy(*s)
	}
	return tmu
}

// ClearCreatedBy clears the value of the "created_by" field.
func (tmu *TopicMediaUpdate) ClearCreatedBy() *TopicMediaUpdate {
	tmu.mutation.ClearCreatedBy()
	return tmu
}

// SetUpdatedBy sets the "updated_by" field.
func (tmu *TopicMediaUpdate) SetUpdatedBy(s string) *TopicMediaUpdate {
	tmu.mutation.SetUpdatedBy(s)
	return tmu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (tmu *TopicMediaUpdate) SetNillableUpdatedBy(s *string) *TopicMediaUpdate {
	if s != nil {
		tmu.SetUpdatedBy(*s)
	}
	return tmu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (tmu *TopicMediaUpdate) ClearUpdatedBy() *TopicMediaUpdate {
	tmu.mutation.ClearUpdatedBy()
	return tmu
}

// SetUpdatedAt sets the "updated_at" field.
func (tmu *TopicMediaUpdate) SetUpdatedAt(i int64) *TopicMediaUpdate {
	tmu.mutation.ResetUpdatedAt()
	tmu.mutation.SetUpdatedAt(i)
	return tmu
}

// AddUpdatedAt adds i to the "updated_at" field.
func (tmu *TopicMediaUpdate) AddUpdatedAt(i int64) *TopicMediaUpdate {
	tmu.mutation.AddUpdatedAt(i)
	return tmu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tmu *TopicMediaUpdate) ClearUpdatedAt() *TopicMediaUpdate {
	tmu.mutation.ClearUpdatedAt()
	return tmu
}

// SetTopicID sets the "topic_id" field.
func (tmu *TopicMediaUpdate) SetTopicID(s string) *TopicMediaUpdate {
	tmu.mutation.SetTopicID(s)
	return tmu
}

// SetNillableTopicID sets the "topic_id" field if the given value is not nil.
func (tmu *TopicMediaUpdate) SetNillableTopicID(s *string) *TopicMediaUpdate {
	if s != nil {
		tmu.SetTopicID(*s)
	}
	return tmu
}

// SetMediaID sets the "media_id" field.
func (tmu *TopicMediaUpdate) SetMediaID(s string) *TopicMediaUpdate {
	tmu.mutation.SetMediaID(s)
	return tmu
}

// SetNillableMediaID sets the "media_id" field if the given value is not nil.
func (tmu *TopicMediaUpdate) SetNillableMediaID(s *string) *TopicMediaUpdate {
	if s != nil {
		tmu.SetMediaID(*s)
	}
	return tmu
}

// SetMedia sets the "media" edge to the Media entity.
func (tmu *TopicMediaUpdate) SetMedia(m *Media) *TopicMediaUpdate {
	return tmu.SetMediaID(m.ID)
}

// SetTopic sets the "topic" edge to the Topic entity.
func (tmu *TopicMediaUpdate) SetTopic(t *Topic) *TopicMediaUpdate {
	return tmu.SetTopicID(t.ID)
}

// Mutation returns the TopicMediaMutation object of the builder.
func (tmu *TopicMediaUpdate) Mutation() *TopicMediaMutation {
	return tmu.mutation
}

// ClearMedia clears the "media" edge to the Media entity.
func (tmu *TopicMediaUpdate) ClearMedia() *TopicMediaUpdate {
	tmu.mutation.ClearMedia()
	return tmu
}

// ClearTopic clears the "topic" edge to the Topic entity.
func (tmu *TopicMediaUpdate) ClearTopic() *TopicMediaUpdate {
	tmu.mutation.ClearTopic()
	return tmu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tmu *TopicMediaUpdate) Save(ctx context.Context) (int, error) {
	tmu.defaults()
	return withHooks(ctx, tmu.sqlSave, tmu.mutation, tmu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tmu *TopicMediaUpdate) SaveX(ctx context.Context) int {
	affected, err := tmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tmu *TopicMediaUpdate) Exec(ctx context.Context) error {
	_, err := tmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tmu *TopicMediaUpdate) ExecX(ctx context.Context) {
	if err := tmu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tmu *TopicMediaUpdate) defaults() {
	if _, ok := tmu.mutation.UpdatedAt(); !ok && !tmu.mutation.UpdatedAtCleared() {
		v := topicmedia.UpdateDefaultUpdatedAt()
		tmu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tmu *TopicMediaUpdate) check() error {
	if v, ok := tmu.mutation.CreatedBy(); ok {
		if err := topicmedia.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "TopicMedia.created_by": %w`, err)}
		}
	}
	if v, ok := tmu.mutation.UpdatedBy(); ok {
		if err := topicmedia.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "TopicMedia.updated_by": %w`, err)}
		}
	}
	if v, ok := tmu.mutation.TopicID(); ok {
		if err := topicmedia.TopicIDValidator(v); err != nil {
			return &ValidationError{Name: "topic_id", err: fmt.Errorf(`ent: validator failed for field "TopicMedia.topic_id": %w`, err)}
		}
	}
	if v, ok := tmu.mutation.MediaID(); ok {
		if err := topicmedia.MediaIDValidator(v); err != nil {
			return &ValidationError{Name: "media_id", err: fmt.Errorf(`ent: validator failed for field "TopicMedia.media_id": %w`, err)}
		}
	}
	if tmu.mutation.MediaCleared() && len(tmu.mutation.MediaIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TopicMedia.media"`)
	}
	if tmu.mutation.TopicCleared() && len(tmu.mutation.TopicIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TopicMedia.topic"`)
	}
	return nil
}

func (tmu *TopicMediaUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tmu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(topicmedia.Table, topicmedia.Columns, sqlgraph.NewFieldSpec(topicmedia.FieldID, field.TypeString))
	if ps := tmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tmu.mutation.GetType(); ok {
		_spec.SetField(topicmedia.FieldType, field.TypeString, value)
	}
	if tmu.mutation.TypeCleared() {
		_spec.ClearField(topicmedia.FieldType, field.TypeString)
	}
	if value, ok := tmu.mutation.Order(); ok {
		_spec.SetField(topicmedia.FieldOrder, field.TypeInt, value)
	}
	if value, ok := tmu.mutation.AddedOrder(); ok {
		_spec.AddField(topicmedia.FieldOrder, field.TypeInt, value)
	}
	if value, ok := tmu.mutation.CreatedBy(); ok {
		_spec.SetField(topicmedia.FieldCreatedBy, field.TypeString, value)
	}
	if tmu.mutation.CreatedByCleared() {
		_spec.ClearField(topicmedia.FieldCreatedBy, field.TypeString)
	}
	if value, ok := tmu.mutation.UpdatedBy(); ok {
		_spec.SetField(topicmedia.FieldUpdatedBy, field.TypeString, value)
	}
	if tmu.mutation.UpdatedByCleared() {
		_spec.ClearField(topicmedia.FieldUpdatedBy, field.TypeString)
	}
	if tmu.mutation.CreatedAtCleared() {
		_spec.ClearField(topicmedia.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := tmu.mutation.UpdatedAt(); ok {
		_spec.SetField(topicmedia.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := tmu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(topicmedia.FieldUpdatedAt, field.TypeInt64, value)
	}
	if tmu.mutation.UpdatedAtCleared() {
		_spec.ClearField(topicmedia.FieldUpdatedAt, field.TypeInt64)
	}
	if tmu.mutation.MediaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   topicmedia.MediaTable,
			Columns: []string{topicmedia.MediaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tmu.mutation.MediaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   topicmedia.MediaTable,
			Columns: []string{topicmedia.MediaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tmu.mutation.TopicCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   topicmedia.TopicTable,
			Columns: []string{topicmedia.TopicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(topic.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tmu.mutation.TopicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   topicmedia.TopicTable,
			Columns: []string{topicmedia.TopicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(topic.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{topicmedia.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tmu.mutation.done = true
	return n, nil
}

// TopicMediaUpdateOne is the builder for updating a single TopicMedia entity.
type TopicMediaUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TopicMediaMutation
}

// SetType sets the "type" field.
func (tmuo *TopicMediaUpdateOne) SetType(s string) *TopicMediaUpdateOne {
	tmuo.mutation.SetType(s)
	return tmuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (tmuo *TopicMediaUpdateOne) SetNillableType(s *string) *TopicMediaUpdateOne {
	if s != nil {
		tmuo.SetType(*s)
	}
	return tmuo
}

// ClearType clears the value of the "type" field.
func (tmuo *TopicMediaUpdateOne) ClearType() *TopicMediaUpdateOne {
	tmuo.mutation.ClearType()
	return tmuo
}

// SetOrder sets the "order" field.
func (tmuo *TopicMediaUpdateOne) SetOrder(i int) *TopicMediaUpdateOne {
	tmuo.mutation.ResetOrder()
	tmuo.mutation.SetOrder(i)
	return tmuo
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (tmuo *TopicMediaUpdateOne) SetNillableOrder(i *int) *TopicMediaUpdateOne {
	if i != nil {
		tmuo.SetOrder(*i)
	}
	return tmuo
}

// AddOrder adds i to the "order" field.
func (tmuo *TopicMediaUpdateOne) AddOrder(i int) *TopicMediaUpdateOne {
	tmuo.mutation.AddOrder(i)
	return tmuo
}

// SetCreatedBy sets the "created_by" field.
func (tmuo *TopicMediaUpdateOne) SetCreatedBy(s string) *TopicMediaUpdateOne {
	tmuo.mutation.SetCreatedBy(s)
	return tmuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (tmuo *TopicMediaUpdateOne) SetNillableCreatedBy(s *string) *TopicMediaUpdateOne {
	if s != nil {
		tmuo.SetCreatedBy(*s)
	}
	return tmuo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (tmuo *TopicMediaUpdateOne) ClearCreatedBy() *TopicMediaUpdateOne {
	tmuo.mutation.ClearCreatedBy()
	return tmuo
}

// SetUpdatedBy sets the "updated_by" field.
func (tmuo *TopicMediaUpdateOne) SetUpdatedBy(s string) *TopicMediaUpdateOne {
	tmuo.mutation.SetUpdatedBy(s)
	return tmuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (tmuo *TopicMediaUpdateOne) SetNillableUpdatedBy(s *string) *TopicMediaUpdateOne {
	if s != nil {
		tmuo.SetUpdatedBy(*s)
	}
	return tmuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (tmuo *TopicMediaUpdateOne) ClearUpdatedBy() *TopicMediaUpdateOne {
	tmuo.mutation.ClearUpdatedBy()
	return tmuo
}

// SetUpdatedAt sets the "updated_at" field.
func (tmuo *TopicMediaUpdateOne) SetUpdatedAt(i int64) *TopicMediaUpdateOne {
	tmuo.mutation.ResetUpdatedAt()
	tmuo.mutation.SetUpdatedAt(i)
	return tmuo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (tmuo *TopicMediaUpdateOne) AddUpdatedAt(i int64) *TopicMediaUpdateOne {
	tmuo.mutation.AddUpdatedAt(i)
	return tmuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tmuo *TopicMediaUpdateOne) ClearUpdatedAt() *TopicMediaUpdateOne {
	tmuo.mutation.ClearUpdatedAt()
	return tmuo
}

// SetTopicID sets the "topic_id" field.
func (tmuo *TopicMediaUpdateOne) SetTopicID(s string) *TopicMediaUpdateOne {
	tmuo.mutation.SetTopicID(s)
	return tmuo
}

// SetNillableTopicID sets the "topic_id" field if the given value is not nil.
func (tmuo *TopicMediaUpdateOne) SetNillableTopicID(s *string) *TopicMediaUpdateOne {
	if s != nil {
		tmuo.SetTopicID(*s)
	}
	return tmuo
}

// SetMediaID sets the "media_id" field.
func (tmuo *TopicMediaUpdateOne) SetMediaID(s string) *TopicMediaUpdateOne {
	tmuo.mutation.SetMediaID(s)
	return tmuo
}

// SetNillableMediaID sets the "media_id" field if the given value is not nil.
func (tmuo *TopicMediaUpdateOne) SetNillableMediaID(s *string) *TopicMediaUpdateOne {
	if s != nil {
		tmuo.SetMediaID(*s)
	}
	return tmuo
}

// SetMedia sets the "media" edge to the Media entity.
func (tmuo *TopicMediaUpdateOne) SetMedia(m *Media) *TopicMediaUpdateOne {
	return tmuo.SetMediaID(m.ID)
}

// SetTopic sets the "topic" edge to the Topic entity.
func (tmuo *TopicMediaUpdateOne) SetTopic(t *Topic) *TopicMediaUpdateOne {
	return tmuo.SetTopicID(t.ID)
}

// Mutation returns the TopicMediaMutation object of the builder.
func (tmuo *TopicMediaUpdateOne) Mutation() *TopicMediaMutation {
	return tmuo.mutation
}

// ClearMedia clears the "media" edge to the Media entity.
func (tmuo *TopicMediaUpdateOne) ClearMedia() *TopicMediaUpdateOne {
	tmuo.mutation.ClearMedia()
	return tmuo
}

// ClearTopic clears the "topic" edge to the Topic entity.
func (tmuo *TopicMediaUpdateOne) ClearTopic() *TopicMediaUpdateOne {
	tmuo.mutation.ClearTopic()
	return tmuo
}

// Where appends a list predicates to the TopicMediaUpdate builder.
func (tmuo *TopicMediaUpdateOne) Where(ps ...predicate.TopicMedia) *TopicMediaUpdateOne {
	tmuo.mutation.Where(ps...)
	return tmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tmuo *TopicMediaUpdateOne) Select(field string, fields ...string) *TopicMediaUpdateOne {
	tmuo.fields = append([]string{field}, fields...)
	return tmuo
}

// Save executes the query and returns the updated TopicMedia entity.
func (tmuo *TopicMediaUpdateOne) Save(ctx context.Context) (*TopicMedia, error) {
	tmuo.defaults()
	return withHooks(ctx, tmuo.sqlSave, tmuo.mutation, tmuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tmuo *TopicMediaUpdateOne) SaveX(ctx context.Context) *TopicMedia {
	node, err := tmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tmuo *TopicMediaUpdateOne) Exec(ctx context.Context) error {
	_, err := tmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tmuo *TopicMediaUpdateOne) ExecX(ctx context.Context) {
	if err := tmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tmuo *TopicMediaUpdateOne) defaults() {
	if _, ok := tmuo.mutation.UpdatedAt(); !ok && !tmuo.mutation.UpdatedAtCleared() {
		v := topicmedia.UpdateDefaultUpdatedAt()
		tmuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tmuo *TopicMediaUpdateOne) check() error {
	if v, ok := tmuo.mutation.CreatedBy(); ok {
		if err := topicmedia.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "TopicMedia.created_by": %w`, err)}
		}
	}
	if v, ok := tmuo.mutation.UpdatedBy(); ok {
		if err := topicmedia.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "TopicMedia.updated_by": %w`, err)}
		}
	}
	if v, ok := tmuo.mutation.TopicID(); ok {
		if err := topicmedia.TopicIDValidator(v); err != nil {
			return &ValidationError{Name: "topic_id", err: fmt.Errorf(`ent: validator failed for field "TopicMedia.topic_id": %w`, err)}
		}
	}
	if v, ok := tmuo.mutation.MediaID(); ok {
		if err := topicmedia.MediaIDValidator(v); err != nil {
			return &ValidationError{Name: "media_id", err: fmt.Errorf(`ent: validator failed for field "TopicMedia.media_id": %w`, err)}
		}
	}
	if tmuo.mutation.MediaCleared() && len(tmuo.mutation.MediaIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TopicMedia.media"`)
	}
	if tmuo.mutation.TopicCleared() && len(tmuo.mutation.TopicIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TopicMedia.topic"`)
	}
	return nil
}

func (tmuo *TopicMediaUpdateOne) sqlSave(ctx context.Context) (_node *TopicMedia, err error) {
	if err := tmuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(topicmedia.Table, topicmedia.Columns, sqlgraph.NewFieldSpec(topicmedia.FieldID, field.TypeString))
	id, ok := tmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TopicMedia.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, topicmedia.FieldID)
		for _, f := range fields {
			if !topicmedia.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != topicmedia.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tmuo.mutation.GetType(); ok {
		_spec.SetField(topicmedia.FieldType, field.TypeString, value)
	}
	if tmuo.mutation.TypeCleared() {
		_spec.ClearField(topicmedia.FieldType, field.TypeString)
	}
	if value, ok := tmuo.mutation.Order(); ok {
		_spec.SetField(topicmedia.FieldOrder, field.TypeInt, value)
	}
	if value, ok := tmuo.mutation.AddedOrder(); ok {
		_spec.AddField(topicmedia.FieldOrder, field.TypeInt, value)
	}
	if value, ok := tmuo.mutation.CreatedBy(); ok {
		_spec.SetField(topicmedia.FieldCreatedBy, field.TypeString, value)
	}
	if tmuo.mutation.CreatedByCleared() {
		_spec.ClearField(topicmedia.FieldCreatedBy, field.TypeString)
	}
	if value, ok := tmuo.mutation.UpdatedBy(); ok {
		_spec.SetField(topicmedia.FieldUpdatedBy, field.TypeString, value)
	}
	if tmuo.mutation.UpdatedByCleared() {
		_spec.ClearField(topicmedia.FieldUpdatedBy, field.TypeString)
	}
	if tmuo.mutation.CreatedAtCleared() {
		_spec.ClearField(topicmedia.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := tmuo.mutation.UpdatedAt(); ok {
		_spec.SetField(topicmedia.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := tmuo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(topicmedia.FieldUpdatedAt, field.TypeInt64, value)
	}
	if tmuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(topicmedia.FieldUpdatedAt, field.TypeInt64)
	}
	if tmuo.mutation.MediaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   topicmedia.MediaTable,
			Columns: []string{topicmedia.MediaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tmuo.mutation.MediaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   topicmedia.MediaTable,
			Columns: []string{topicmedia.MediaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tmuo.mutation.TopicCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   topicmedia.TopicTable,
			Columns: []string{topicmedia.TopicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(topic.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tmuo.mutation.TopicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   topicmedia.TopicTable,
			Columns: []string{topicmedia.TopicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(topic.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TopicMedia{config: tmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{topicmedia.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tmuo.mutation.done = true
	return _node, nil
}
