// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"ncobase/feature/access/data/ent/usertenantrole"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// UserTenantRole is the model entity for the UserTenantRole schema.
type UserTenantRole struct {
	config `json:"-"`
	// ID of the ent.
	// primary key
	ID string `json:"id,omitempty"`
	// user id
	UserID string `json:"user_id,omitempty"`
	// tenant id
	TenantID string `json:"tenant_id,omitempty"`
	// role id
	RoleID string `json:"role_id,omitempty"`
	// id of the creator
	CreatedBy string `json:"created_by,omitempty"`
	// id of the last updater
	UpdatedBy string `json:"updated_by,omitempty"`
	// created at
	CreatedAt time.Time `json:"created_at,omitempty"`
	// updated at
	UpdatedAt    time.Time `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserTenantRole) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case usertenantrole.FieldID, usertenantrole.FieldUserID, usertenantrole.FieldTenantID, usertenantrole.FieldRoleID, usertenantrole.FieldCreatedBy, usertenantrole.FieldUpdatedBy:
			values[i] = new(sql.NullString)
		case usertenantrole.FieldCreatedAt, usertenantrole.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserTenantRole fields.
func (utr *UserTenantRole) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case usertenantrole.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				utr.ID = value.String
			}
		case usertenantrole.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				utr.UserID = value.String
			}
		case usertenantrole.FieldTenantID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				utr.TenantID = value.String
			}
		case usertenantrole.FieldRoleID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field role_id", values[i])
			} else if value.Valid {
				utr.RoleID = value.String
			}
		case usertenantrole.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				utr.CreatedBy = value.String
			}
		case usertenantrole.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				utr.UpdatedBy = value.String
			}
		case usertenantrole.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				utr.CreatedAt = value.Time
			}
		case usertenantrole.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				utr.UpdatedAt = value.Time
			}
		default:
			utr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserTenantRole.
// This includes values selected through modifiers, order, etc.
func (utr *UserTenantRole) Value(name string) (ent.Value, error) {
	return utr.selectValues.Get(name)
}

// Update returns a builder for updating this UserTenantRole.
// Note that you need to call UserTenantRole.Unwrap() before calling this method if this UserTenantRole
// was returned from a transaction, and the transaction was committed or rolled back.
func (utr *UserTenantRole) Update() *UserTenantRoleUpdateOne {
	return NewUserTenantRoleClient(utr.config).UpdateOne(utr)
}

// Unwrap unwraps the UserTenantRole entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (utr *UserTenantRole) Unwrap() *UserTenantRole {
	_tx, ok := utr.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserTenantRole is not a transactional entity")
	}
	utr.config.driver = _tx.drv
	return utr
}

// String implements the fmt.Stringer.
func (utr *UserTenantRole) String() string {
	var builder strings.Builder
	builder.WriteString("UserTenantRole(")
	builder.WriteString(fmt.Sprintf("id=%v, ", utr.ID))
	builder.WriteString("user_id=")
	builder.WriteString(utr.UserID)
	builder.WriteString(", ")
	builder.WriteString("tenant_id=")
	builder.WriteString(utr.TenantID)
	builder.WriteString(", ")
	builder.WriteString("role_id=")
	builder.WriteString(utr.RoleID)
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(utr.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(utr.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(utr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(utr.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// UserTenantRoles is a parsable slice of UserTenantRole.
type UserTenantRoles []*UserTenantRole
