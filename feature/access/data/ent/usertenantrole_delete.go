// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"ncobase/feature/access/data/ent/predicate"
	"ncobase/feature/access/data/ent/usertenantrole"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserTenantRoleDelete is the builder for deleting a UserTenantRole entity.
type UserTenantRoleDelete struct {
	config
	hooks    []Hook
	mutation *UserTenantRoleMutation
}

// Where appends a list predicates to the UserTenantRoleDelete builder.
func (utrd *UserTenantRoleDelete) Where(ps ...predicate.UserTenantRole) *UserTenantRoleDelete {
	utrd.mutation.Where(ps...)
	return utrd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (utrd *UserTenantRoleDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, utrd.sqlExec, utrd.mutation, utrd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (utrd *UserTenantRoleDelete) ExecX(ctx context.Context) int {
	n, err := utrd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (utrd *UserTenantRoleDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(usertenantrole.Table, sqlgraph.NewFieldSpec(usertenantrole.FieldID, field.TypeString))
	if ps := utrd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, utrd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	utrd.mutation.done = true
	return affected, err
}

// UserTenantRoleDeleteOne is the builder for deleting a single UserTenantRole entity.
type UserTenantRoleDeleteOne struct {
	utrd *UserTenantRoleDelete
}

// Where appends a list predicates to the UserTenantRoleDelete builder.
func (utrdo *UserTenantRoleDeleteOne) Where(ps ...predicate.UserTenantRole) *UserTenantRoleDeleteOne {
	utrdo.utrd.mutation.Where(ps...)
	return utrdo
}

// Exec executes the deletion query.
func (utrdo *UserTenantRoleDeleteOne) Exec(ctx context.Context) error {
	n, err := utrdo.utrd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{usertenantrole.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (utrdo *UserTenantRoleDeleteOne) ExecX(ctx context.Context) {
	if err := utrdo.Exec(ctx); err != nil {
		panic(err)
	}
}
