// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/feature/auth/data/ent/authtoken"
	"ncobase/feature/auth/data/ent/codeauth"
	"ncobase/feature/auth/data/ent/oauthuser"
	"ncobase/feature/auth/data/ent/predicate"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAuthToken = "AuthToken"
	TypeCodeAuth  = "CodeAuth"
	TypeOAuthUser = "OAuthUser"
)

// AuthTokenMutation represents an operation that mutates the AuthToken nodes in the graph.
type AuthTokenMutation struct {
	config
	op            Op
	typ           string
	id            *string
	disabled      *bool
	created_at    *time.Time
	updated_at    *time.Time
	user_id       *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*AuthToken, error)
	predicates    []predicate.AuthToken
}

var _ ent.Mutation = (*AuthTokenMutation)(nil)

// authtokenOption allows management of the mutation configuration using functional options.
type authtokenOption func(*AuthTokenMutation)

// newAuthTokenMutation creates new mutation for the AuthToken entity.
func newAuthTokenMutation(c config, op Op, opts ...authtokenOption) *AuthTokenMutation {
	m := &AuthTokenMutation{
		config:        c,
		op:            op,
		typ:           TypeAuthToken,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAuthTokenID sets the ID field of the mutation.
func withAuthTokenID(id string) authtokenOption {
	return func(m *AuthTokenMutation) {
		var (
			err   error
			once  sync.Once
			value *AuthToken
		)
		m.oldValue = func(ctx context.Context) (*AuthToken, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().AuthToken.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAuthToken sets the old AuthToken of the mutation.
func withAuthToken(node *AuthToken) authtokenOption {
	return func(m *AuthTokenMutation) {
		m.oldValue = func(context.Context) (*AuthToken, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AuthTokenMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AuthTokenMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of AuthToken entities.
func (m *AuthTokenMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AuthTokenMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AuthTokenMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().AuthToken.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetDisabled sets the "disabled" field.
func (m *AuthTokenMutation) SetDisabled(b bool) {
	m.disabled = &b
}

// Disabled returns the value of the "disabled" field in the mutation.
func (m *AuthTokenMutation) Disabled() (r bool, exists bool) {
	v := m.disabled
	if v == nil {
		return
	}
	return *v, true
}

// OldDisabled returns the old "disabled" field's value of the AuthToken entity.
// If the AuthToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AuthTokenMutation) OldDisabled(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDisabled is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDisabled requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDisabled: %w", err)
	}
	return oldValue.Disabled, nil
}

// ClearDisabled clears the value of the "disabled" field.
func (m *AuthTokenMutation) ClearDisabled() {
	m.disabled = nil
	m.clearedFields[authtoken.FieldDisabled] = struct{}{}
}

// DisabledCleared returns if the "disabled" field was cleared in this mutation.
func (m *AuthTokenMutation) DisabledCleared() bool {
	_, ok := m.clearedFields[authtoken.FieldDisabled]
	return ok
}

// ResetDisabled resets all changes to the "disabled" field.
func (m *AuthTokenMutation) ResetDisabled() {
	m.disabled = nil
	delete(m.clearedFields, authtoken.FieldDisabled)
}

// SetCreatedAt sets the "created_at" field.
func (m *AuthTokenMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *AuthTokenMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the AuthToken entity.
// If the AuthToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AuthTokenMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ClearCreatedAt clears the value of the "created_at" field.
func (m *AuthTokenMutation) ClearCreatedAt() {
	m.created_at = nil
	m.clearedFields[authtoken.FieldCreatedAt] = struct{}{}
}

// CreatedAtCleared returns if the "created_at" field was cleared in this mutation.
func (m *AuthTokenMutation) CreatedAtCleared() bool {
	_, ok := m.clearedFields[authtoken.FieldCreatedAt]
	return ok
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *AuthTokenMutation) ResetCreatedAt() {
	m.created_at = nil
	delete(m.clearedFields, authtoken.FieldCreatedAt)
}

// SetUpdatedAt sets the "updated_at" field.
func (m *AuthTokenMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *AuthTokenMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the AuthToken entity.
// If the AuthToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AuthTokenMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *AuthTokenMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[authtoken.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *AuthTokenMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[authtoken.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *AuthTokenMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, authtoken.FieldUpdatedAt)
}

// SetUserID sets the "user_id" field.
func (m *AuthTokenMutation) SetUserID(s string) {
	m.user_id = &s
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *AuthTokenMutation) UserID() (r string, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the AuthToken entity.
// If the AuthToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AuthTokenMutation) OldUserID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ClearUserID clears the value of the "user_id" field.
func (m *AuthTokenMutation) ClearUserID() {
	m.user_id = nil
	m.clearedFields[authtoken.FieldUserID] = struct{}{}
}

// UserIDCleared returns if the "user_id" field was cleared in this mutation.
func (m *AuthTokenMutation) UserIDCleared() bool {
	_, ok := m.clearedFields[authtoken.FieldUserID]
	return ok
}

// ResetUserID resets all changes to the "user_id" field.
func (m *AuthTokenMutation) ResetUserID() {
	m.user_id = nil
	delete(m.clearedFields, authtoken.FieldUserID)
}

// Where appends a list predicates to the AuthTokenMutation builder.
func (m *AuthTokenMutation) Where(ps ...predicate.AuthToken) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the AuthTokenMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *AuthTokenMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.AuthToken, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *AuthTokenMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *AuthTokenMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (AuthToken).
func (m *AuthTokenMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AuthTokenMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.disabled != nil {
		fields = append(fields, authtoken.FieldDisabled)
	}
	if m.created_at != nil {
		fields = append(fields, authtoken.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, authtoken.FieldUpdatedAt)
	}
	if m.user_id != nil {
		fields = append(fields, authtoken.FieldUserID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AuthTokenMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case authtoken.FieldDisabled:
		return m.Disabled()
	case authtoken.FieldCreatedAt:
		return m.CreatedAt()
	case authtoken.FieldUpdatedAt:
		return m.UpdatedAt()
	case authtoken.FieldUserID:
		return m.UserID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AuthTokenMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case authtoken.FieldDisabled:
		return m.OldDisabled(ctx)
	case authtoken.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case authtoken.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case authtoken.FieldUserID:
		return m.OldUserID(ctx)
	}
	return nil, fmt.Errorf("unknown AuthToken field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AuthTokenMutation) SetField(name string, value ent.Value) error {
	switch name {
	case authtoken.FieldDisabled:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDisabled(v)
		return nil
	case authtoken.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case authtoken.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case authtoken.FieldUserID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	}
	return fmt.Errorf("unknown AuthToken field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AuthTokenMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AuthTokenMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AuthTokenMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown AuthToken numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AuthTokenMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(authtoken.FieldDisabled) {
		fields = append(fields, authtoken.FieldDisabled)
	}
	if m.FieldCleared(authtoken.FieldCreatedAt) {
		fields = append(fields, authtoken.FieldCreatedAt)
	}
	if m.FieldCleared(authtoken.FieldUpdatedAt) {
		fields = append(fields, authtoken.FieldUpdatedAt)
	}
	if m.FieldCleared(authtoken.FieldUserID) {
		fields = append(fields, authtoken.FieldUserID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AuthTokenMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AuthTokenMutation) ClearField(name string) error {
	switch name {
	case authtoken.FieldDisabled:
		m.ClearDisabled()
		return nil
	case authtoken.FieldCreatedAt:
		m.ClearCreatedAt()
		return nil
	case authtoken.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	case authtoken.FieldUserID:
		m.ClearUserID()
		return nil
	}
	return fmt.Errorf("unknown AuthToken nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AuthTokenMutation) ResetField(name string) error {
	switch name {
	case authtoken.FieldDisabled:
		m.ResetDisabled()
		return nil
	case authtoken.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case authtoken.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case authtoken.FieldUserID:
		m.ResetUserID()
		return nil
	}
	return fmt.Errorf("unknown AuthToken field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AuthTokenMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AuthTokenMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AuthTokenMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AuthTokenMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AuthTokenMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AuthTokenMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AuthTokenMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown AuthToken unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AuthTokenMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown AuthToken edge %s", name)
}

// CodeAuthMutation represents an operation that mutates the CodeAuth nodes in the graph.
type CodeAuthMutation struct {
	config
	op            Op
	typ           string
	id            *string
	code          *string
	email         *string
	logged        *bool
	created_at    *time.Time
	updated_at    *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*CodeAuth, error)
	predicates    []predicate.CodeAuth
}

var _ ent.Mutation = (*CodeAuthMutation)(nil)

// codeauthOption allows management of the mutation configuration using functional options.
type codeauthOption func(*CodeAuthMutation)

// newCodeAuthMutation creates new mutation for the CodeAuth entity.
func newCodeAuthMutation(c config, op Op, opts ...codeauthOption) *CodeAuthMutation {
	m := &CodeAuthMutation{
		config:        c,
		op:            op,
		typ:           TypeCodeAuth,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCodeAuthID sets the ID field of the mutation.
func withCodeAuthID(id string) codeauthOption {
	return func(m *CodeAuthMutation) {
		var (
			err   error
			once  sync.Once
			value *CodeAuth
		)
		m.oldValue = func(ctx context.Context) (*CodeAuth, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CodeAuth.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCodeAuth sets the old CodeAuth of the mutation.
func withCodeAuth(node *CodeAuth) codeauthOption {
	return func(m *CodeAuthMutation) {
		m.oldValue = func(context.Context) (*CodeAuth, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CodeAuthMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CodeAuthMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of CodeAuth entities.
func (m *CodeAuthMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CodeAuthMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CodeAuthMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().CodeAuth.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCode sets the "code" field.
func (m *CodeAuthMutation) SetCode(s string) {
	m.code = &s
}

// Code returns the value of the "code" field in the mutation.
func (m *CodeAuthMutation) Code() (r string, exists bool) {
	v := m.code
	if v == nil {
		return
	}
	return *v, true
}

// OldCode returns the old "code" field's value of the CodeAuth entity.
// If the CodeAuth object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CodeAuthMutation) OldCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCode: %w", err)
	}
	return oldValue.Code, nil
}

// ClearCode clears the value of the "code" field.
func (m *CodeAuthMutation) ClearCode() {
	m.code = nil
	m.clearedFields[codeauth.FieldCode] = struct{}{}
}

// CodeCleared returns if the "code" field was cleared in this mutation.
func (m *CodeAuthMutation) CodeCleared() bool {
	_, ok := m.clearedFields[codeauth.FieldCode]
	return ok
}

// ResetCode resets all changes to the "code" field.
func (m *CodeAuthMutation) ResetCode() {
	m.code = nil
	delete(m.clearedFields, codeauth.FieldCode)
}

// SetEmail sets the "email" field.
func (m *CodeAuthMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *CodeAuthMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the CodeAuth entity.
// If the CodeAuth object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CodeAuthMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ClearEmail clears the value of the "email" field.
func (m *CodeAuthMutation) ClearEmail() {
	m.email = nil
	m.clearedFields[codeauth.FieldEmail] = struct{}{}
}

// EmailCleared returns if the "email" field was cleared in this mutation.
func (m *CodeAuthMutation) EmailCleared() bool {
	_, ok := m.clearedFields[codeauth.FieldEmail]
	return ok
}

// ResetEmail resets all changes to the "email" field.
func (m *CodeAuthMutation) ResetEmail() {
	m.email = nil
	delete(m.clearedFields, codeauth.FieldEmail)
}

// SetLogged sets the "logged" field.
func (m *CodeAuthMutation) SetLogged(b bool) {
	m.logged = &b
}

// Logged returns the value of the "logged" field in the mutation.
func (m *CodeAuthMutation) Logged() (r bool, exists bool) {
	v := m.logged
	if v == nil {
		return
	}
	return *v, true
}

// OldLogged returns the old "logged" field's value of the CodeAuth entity.
// If the CodeAuth object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CodeAuthMutation) OldLogged(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLogged is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLogged requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLogged: %w", err)
	}
	return oldValue.Logged, nil
}

// ClearLogged clears the value of the "logged" field.
func (m *CodeAuthMutation) ClearLogged() {
	m.logged = nil
	m.clearedFields[codeauth.FieldLogged] = struct{}{}
}

// LoggedCleared returns if the "logged" field was cleared in this mutation.
func (m *CodeAuthMutation) LoggedCleared() bool {
	_, ok := m.clearedFields[codeauth.FieldLogged]
	return ok
}

// ResetLogged resets all changes to the "logged" field.
func (m *CodeAuthMutation) ResetLogged() {
	m.logged = nil
	delete(m.clearedFields, codeauth.FieldLogged)
}

// SetCreatedAt sets the "created_at" field.
func (m *CodeAuthMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *CodeAuthMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the CodeAuth entity.
// If the CodeAuth object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CodeAuthMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ClearCreatedAt clears the value of the "created_at" field.
func (m *CodeAuthMutation) ClearCreatedAt() {
	m.created_at = nil
	m.clearedFields[codeauth.FieldCreatedAt] = struct{}{}
}

// CreatedAtCleared returns if the "created_at" field was cleared in this mutation.
func (m *CodeAuthMutation) CreatedAtCleared() bool {
	_, ok := m.clearedFields[codeauth.FieldCreatedAt]
	return ok
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *CodeAuthMutation) ResetCreatedAt() {
	m.created_at = nil
	delete(m.clearedFields, codeauth.FieldCreatedAt)
}

// SetUpdatedAt sets the "updated_at" field.
func (m *CodeAuthMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *CodeAuthMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the CodeAuth entity.
// If the CodeAuth object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CodeAuthMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *CodeAuthMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[codeauth.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *CodeAuthMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[codeauth.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *CodeAuthMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, codeauth.FieldUpdatedAt)
}

// Where appends a list predicates to the CodeAuthMutation builder.
func (m *CodeAuthMutation) Where(ps ...predicate.CodeAuth) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CodeAuthMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CodeAuthMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.CodeAuth, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CodeAuthMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CodeAuthMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (CodeAuth).
func (m *CodeAuthMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CodeAuthMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.code != nil {
		fields = append(fields, codeauth.FieldCode)
	}
	if m.email != nil {
		fields = append(fields, codeauth.FieldEmail)
	}
	if m.logged != nil {
		fields = append(fields, codeauth.FieldLogged)
	}
	if m.created_at != nil {
		fields = append(fields, codeauth.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, codeauth.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CodeAuthMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case codeauth.FieldCode:
		return m.Code()
	case codeauth.FieldEmail:
		return m.Email()
	case codeauth.FieldLogged:
		return m.Logged()
	case codeauth.FieldCreatedAt:
		return m.CreatedAt()
	case codeauth.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CodeAuthMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case codeauth.FieldCode:
		return m.OldCode(ctx)
	case codeauth.FieldEmail:
		return m.OldEmail(ctx)
	case codeauth.FieldLogged:
		return m.OldLogged(ctx)
	case codeauth.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case codeauth.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown CodeAuth field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CodeAuthMutation) SetField(name string, value ent.Value) error {
	switch name {
	case codeauth.FieldCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCode(v)
		return nil
	case codeauth.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case codeauth.FieldLogged:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLogged(v)
		return nil
	case codeauth.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case codeauth.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown CodeAuth field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CodeAuthMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CodeAuthMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CodeAuthMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown CodeAuth numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CodeAuthMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(codeauth.FieldCode) {
		fields = append(fields, codeauth.FieldCode)
	}
	if m.FieldCleared(codeauth.FieldEmail) {
		fields = append(fields, codeauth.FieldEmail)
	}
	if m.FieldCleared(codeauth.FieldLogged) {
		fields = append(fields, codeauth.FieldLogged)
	}
	if m.FieldCleared(codeauth.FieldCreatedAt) {
		fields = append(fields, codeauth.FieldCreatedAt)
	}
	if m.FieldCleared(codeauth.FieldUpdatedAt) {
		fields = append(fields, codeauth.FieldUpdatedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CodeAuthMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CodeAuthMutation) ClearField(name string) error {
	switch name {
	case codeauth.FieldCode:
		m.ClearCode()
		return nil
	case codeauth.FieldEmail:
		m.ClearEmail()
		return nil
	case codeauth.FieldLogged:
		m.ClearLogged()
		return nil
	case codeauth.FieldCreatedAt:
		m.ClearCreatedAt()
		return nil
	case codeauth.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown CodeAuth nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CodeAuthMutation) ResetField(name string) error {
	switch name {
	case codeauth.FieldCode:
		m.ResetCode()
		return nil
	case codeauth.FieldEmail:
		m.ResetEmail()
		return nil
	case codeauth.FieldLogged:
		m.ResetLogged()
		return nil
	case codeauth.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case codeauth.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown CodeAuth field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CodeAuthMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CodeAuthMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CodeAuthMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CodeAuthMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CodeAuthMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CodeAuthMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CodeAuthMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown CodeAuth unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CodeAuthMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown CodeAuth edge %s", name)
}

// OAuthUserMutation represents an operation that mutates the OAuthUser nodes in the graph.
type OAuthUserMutation struct {
	config
	op            Op
	typ           string
	id            *string
	oauth_id      *string
	access_token  *string
	provider      *string
	user_id       *string
	created_at    *time.Time
	updated_at    *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*OAuthUser, error)
	predicates    []predicate.OAuthUser
}

var _ ent.Mutation = (*OAuthUserMutation)(nil)

// oauthuserOption allows management of the mutation configuration using functional options.
type oauthuserOption func(*OAuthUserMutation)

// newOAuthUserMutation creates new mutation for the OAuthUser entity.
func newOAuthUserMutation(c config, op Op, opts ...oauthuserOption) *OAuthUserMutation {
	m := &OAuthUserMutation{
		config:        c,
		op:            op,
		typ:           TypeOAuthUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withOAuthUserID sets the ID field of the mutation.
func withOAuthUserID(id string) oauthuserOption {
	return func(m *OAuthUserMutation) {
		var (
			err   error
			once  sync.Once
			value *OAuthUser
		)
		m.oldValue = func(ctx context.Context) (*OAuthUser, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().OAuthUser.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withOAuthUser sets the old OAuthUser of the mutation.
func withOAuthUser(node *OAuthUser) oauthuserOption {
	return func(m *OAuthUserMutation) {
		m.oldValue = func(context.Context) (*OAuthUser, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m OAuthUserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m OAuthUserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of OAuthUser entities.
func (m *OAuthUserMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *OAuthUserMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *OAuthUserMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().OAuthUser.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetOauthID sets the "oauth_id" field.
func (m *OAuthUserMutation) SetOauthID(s string) {
	m.oauth_id = &s
}

// OauthID returns the value of the "oauth_id" field in the mutation.
func (m *OAuthUserMutation) OauthID() (r string, exists bool) {
	v := m.oauth_id
	if v == nil {
		return
	}
	return *v, true
}

// OldOauthID returns the old "oauth_id" field's value of the OAuthUser entity.
// If the OAuthUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OAuthUserMutation) OldOauthID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOauthID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOauthID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOauthID: %w", err)
	}
	return oldValue.OauthID, nil
}

// ClearOauthID clears the value of the "oauth_id" field.
func (m *OAuthUserMutation) ClearOauthID() {
	m.oauth_id = nil
	m.clearedFields[oauthuser.FieldOauthID] = struct{}{}
}

// OauthIDCleared returns if the "oauth_id" field was cleared in this mutation.
func (m *OAuthUserMutation) OauthIDCleared() bool {
	_, ok := m.clearedFields[oauthuser.FieldOauthID]
	return ok
}

// ResetOauthID resets all changes to the "oauth_id" field.
func (m *OAuthUserMutation) ResetOauthID() {
	m.oauth_id = nil
	delete(m.clearedFields, oauthuser.FieldOauthID)
}

// SetAccessToken sets the "access_token" field.
func (m *OAuthUserMutation) SetAccessToken(s string) {
	m.access_token = &s
}

// AccessToken returns the value of the "access_token" field in the mutation.
func (m *OAuthUserMutation) AccessToken() (r string, exists bool) {
	v := m.access_token
	if v == nil {
		return
	}
	return *v, true
}

// OldAccessToken returns the old "access_token" field's value of the OAuthUser entity.
// If the OAuthUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OAuthUserMutation) OldAccessToken(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAccessToken is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAccessToken requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAccessToken: %w", err)
	}
	return oldValue.AccessToken, nil
}

// ResetAccessToken resets all changes to the "access_token" field.
func (m *OAuthUserMutation) ResetAccessToken() {
	m.access_token = nil
}

// SetProvider sets the "provider" field.
func (m *OAuthUserMutation) SetProvider(s string) {
	m.provider = &s
}

// Provider returns the value of the "provider" field in the mutation.
func (m *OAuthUserMutation) Provider() (r string, exists bool) {
	v := m.provider
	if v == nil {
		return
	}
	return *v, true
}

// OldProvider returns the old "provider" field's value of the OAuthUser entity.
// If the OAuthUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OAuthUserMutation) OldProvider(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProvider is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProvider requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProvider: %w", err)
	}
	return oldValue.Provider, nil
}

// ClearProvider clears the value of the "provider" field.
func (m *OAuthUserMutation) ClearProvider() {
	m.provider = nil
	m.clearedFields[oauthuser.FieldProvider] = struct{}{}
}

// ProviderCleared returns if the "provider" field was cleared in this mutation.
func (m *OAuthUserMutation) ProviderCleared() bool {
	_, ok := m.clearedFields[oauthuser.FieldProvider]
	return ok
}

// ResetProvider resets all changes to the "provider" field.
func (m *OAuthUserMutation) ResetProvider() {
	m.provider = nil
	delete(m.clearedFields, oauthuser.FieldProvider)
}

// SetUserID sets the "user_id" field.
func (m *OAuthUserMutation) SetUserID(s string) {
	m.user_id = &s
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *OAuthUserMutation) UserID() (r string, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the OAuthUser entity.
// If the OAuthUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OAuthUserMutation) OldUserID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ClearUserID clears the value of the "user_id" field.
func (m *OAuthUserMutation) ClearUserID() {
	m.user_id = nil
	m.clearedFields[oauthuser.FieldUserID] = struct{}{}
}

// UserIDCleared returns if the "user_id" field was cleared in this mutation.
func (m *OAuthUserMutation) UserIDCleared() bool {
	_, ok := m.clearedFields[oauthuser.FieldUserID]
	return ok
}

// ResetUserID resets all changes to the "user_id" field.
func (m *OAuthUserMutation) ResetUserID() {
	m.user_id = nil
	delete(m.clearedFields, oauthuser.FieldUserID)
}

// SetCreatedAt sets the "created_at" field.
func (m *OAuthUserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *OAuthUserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the OAuthUser entity.
// If the OAuthUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OAuthUserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ClearCreatedAt clears the value of the "created_at" field.
func (m *OAuthUserMutation) ClearCreatedAt() {
	m.created_at = nil
	m.clearedFields[oauthuser.FieldCreatedAt] = struct{}{}
}

// CreatedAtCleared returns if the "created_at" field was cleared in this mutation.
func (m *OAuthUserMutation) CreatedAtCleared() bool {
	_, ok := m.clearedFields[oauthuser.FieldCreatedAt]
	return ok
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *OAuthUserMutation) ResetCreatedAt() {
	m.created_at = nil
	delete(m.clearedFields, oauthuser.FieldCreatedAt)
}

// SetUpdatedAt sets the "updated_at" field.
func (m *OAuthUserMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *OAuthUserMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the OAuthUser entity.
// If the OAuthUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OAuthUserMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *OAuthUserMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[oauthuser.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *OAuthUserMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[oauthuser.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *OAuthUserMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, oauthuser.FieldUpdatedAt)
}

// Where appends a list predicates to the OAuthUserMutation builder.
func (m *OAuthUserMutation) Where(ps ...predicate.OAuthUser) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the OAuthUserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *OAuthUserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.OAuthUser, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *OAuthUserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *OAuthUserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (OAuthUser).
func (m *OAuthUserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *OAuthUserMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.oauth_id != nil {
		fields = append(fields, oauthuser.FieldOauthID)
	}
	if m.access_token != nil {
		fields = append(fields, oauthuser.FieldAccessToken)
	}
	if m.provider != nil {
		fields = append(fields, oauthuser.FieldProvider)
	}
	if m.user_id != nil {
		fields = append(fields, oauthuser.FieldUserID)
	}
	if m.created_at != nil {
		fields = append(fields, oauthuser.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, oauthuser.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *OAuthUserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case oauthuser.FieldOauthID:
		return m.OauthID()
	case oauthuser.FieldAccessToken:
		return m.AccessToken()
	case oauthuser.FieldProvider:
		return m.Provider()
	case oauthuser.FieldUserID:
		return m.UserID()
	case oauthuser.FieldCreatedAt:
		return m.CreatedAt()
	case oauthuser.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *OAuthUserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case oauthuser.FieldOauthID:
		return m.OldOauthID(ctx)
	case oauthuser.FieldAccessToken:
		return m.OldAccessToken(ctx)
	case oauthuser.FieldProvider:
		return m.OldProvider(ctx)
	case oauthuser.FieldUserID:
		return m.OldUserID(ctx)
	case oauthuser.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case oauthuser.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown OAuthUser field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OAuthUserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case oauthuser.FieldOauthID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOauthID(v)
		return nil
	case oauthuser.FieldAccessToken:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAccessToken(v)
		return nil
	case oauthuser.FieldProvider:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProvider(v)
		return nil
	case oauthuser.FieldUserID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case oauthuser.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case oauthuser.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown OAuthUser field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *OAuthUserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *OAuthUserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OAuthUserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown OAuthUser numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *OAuthUserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(oauthuser.FieldOauthID) {
		fields = append(fields, oauthuser.FieldOauthID)
	}
	if m.FieldCleared(oauthuser.FieldProvider) {
		fields = append(fields, oauthuser.FieldProvider)
	}
	if m.FieldCleared(oauthuser.FieldUserID) {
		fields = append(fields, oauthuser.FieldUserID)
	}
	if m.FieldCleared(oauthuser.FieldCreatedAt) {
		fields = append(fields, oauthuser.FieldCreatedAt)
	}
	if m.FieldCleared(oauthuser.FieldUpdatedAt) {
		fields = append(fields, oauthuser.FieldUpdatedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *OAuthUserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *OAuthUserMutation) ClearField(name string) error {
	switch name {
	case oauthuser.FieldOauthID:
		m.ClearOauthID()
		return nil
	case oauthuser.FieldProvider:
		m.ClearProvider()
		return nil
	case oauthuser.FieldUserID:
		m.ClearUserID()
		return nil
	case oauthuser.FieldCreatedAt:
		m.ClearCreatedAt()
		return nil
	case oauthuser.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown OAuthUser nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *OAuthUserMutation) ResetField(name string) error {
	switch name {
	case oauthuser.FieldOauthID:
		m.ResetOauthID()
		return nil
	case oauthuser.FieldAccessToken:
		m.ResetAccessToken()
		return nil
	case oauthuser.FieldProvider:
		m.ResetProvider()
		return nil
	case oauthuser.FieldUserID:
		m.ResetUserID()
		return nil
	case oauthuser.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case oauthuser.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown OAuthUser field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *OAuthUserMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *OAuthUserMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *OAuthUserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *OAuthUserMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *OAuthUserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *OAuthUserMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *OAuthUserMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown OAuthUser unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *OAuthUserMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown OAuthUser edge %s", name)
}
