// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"ncobase/feature/auth/data/ent/oauthuser"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// OAuthUser is the model entity for the OAuthUser schema.
type OAuthUser struct {
	config `json:"-"`
	// ID of the ent.
	// primary key
	ID string `json:"id,omitempty"`
	// oauth id
	OauthID string `json:"oauth_id,omitempty"`
	// access token
	AccessToken string `json:"access_token,omitempty"`
	// provider
	Provider string `json:"provider,omitempty"`
	// user id
	UserID string `json:"user_id,omitempty"`
	// created at
	CreatedAt time.Time `json:"created_at,omitempty"`
	// updated at
	UpdatedAt    time.Time `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OAuthUser) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case oauthuser.FieldID, oauthuser.FieldOauthID, oauthuser.FieldAccessToken, oauthuser.FieldProvider, oauthuser.FieldUserID:
			values[i] = new(sql.NullString)
		case oauthuser.FieldCreatedAt, oauthuser.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OAuthUser fields.
func (ou *OAuthUser) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case oauthuser.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				ou.ID = value.String
			}
		case oauthuser.FieldOauthID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field oauth_id", values[i])
			} else if value.Valid {
				ou.OauthID = value.String
			}
		case oauthuser.FieldAccessToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field access_token", values[i])
			} else if value.Valid {
				ou.AccessToken = value.String
			}
		case oauthuser.FieldProvider:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field provider", values[i])
			} else if value.Valid {
				ou.Provider = value.String
			}
		case oauthuser.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				ou.UserID = value.String
			}
		case oauthuser.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ou.CreatedAt = value.Time
			}
		case oauthuser.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ou.UpdatedAt = value.Time
			}
		default:
			ou.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OAuthUser.
// This includes values selected through modifiers, order, etc.
func (ou *OAuthUser) Value(name string) (ent.Value, error) {
	return ou.selectValues.Get(name)
}

// Update returns a builder for updating this OAuthUser.
// Note that you need to call OAuthUser.Unwrap() before calling this method if this OAuthUser
// was returned from a transaction, and the transaction was committed or rolled back.
func (ou *OAuthUser) Update() *OAuthUserUpdateOne {
	return NewOAuthUserClient(ou.config).UpdateOne(ou)
}

// Unwrap unwraps the OAuthUser entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ou *OAuthUser) Unwrap() *OAuthUser {
	_tx, ok := ou.config.driver.(*txDriver)
	if !ok {
		panic("ent: OAuthUser is not a transactional entity")
	}
	ou.config.driver = _tx.drv
	return ou
}

// String implements the fmt.Stringer.
func (ou *OAuthUser) String() string {
	var builder strings.Builder
	builder.WriteString("OAuthUser(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ou.ID))
	builder.WriteString("oauth_id=")
	builder.WriteString(ou.OauthID)
	builder.WriteString(", ")
	builder.WriteString("access_token=")
	builder.WriteString(ou.AccessToken)
	builder.WriteString(", ")
	builder.WriteString("provider=")
	builder.WriteString(ou.Provider)
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(ou.UserID)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ou.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ou.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// OAuthUsers is a parsable slice of OAuthUser.
type OAuthUsers []*OAuthUser
