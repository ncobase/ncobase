// Code generated by ent, DO NOT EDIT.

package taxonomyrelation

import (
	"ncobase/feature/content/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.TaxonomyRelation {
	return predicate.TaxonomyRelation(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.TaxonomyRelation {
	return predicate.TaxonomyRelation(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.TaxonomyRelation {
	return predicate.TaxonomyRelation(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.TaxonomyRelation {
	return predicate.TaxonomyRelation(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.TaxonomyRelation {
	return predicate.TaxonomyRelation(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.TaxonomyRelation {
	return predicate.TaxonomyRelation(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.TaxonomyRelation {
	return predicate.TaxonomyRelation(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.TaxonomyRelation {
	return predicate.TaxonomyRelation(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.TaxonomyRelation {
	return predicate.TaxonomyRelation(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.TaxonomyRelation {
	return predicate.TaxonomyRelation(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.TaxonomyRelation {
	return predicate.TaxonomyRelation(sql.FieldContainsFold(FieldID, id))
}

// TaxonomyID applies equality check predicate on the "taxonomy_id" field. It's identical to TaxonomyIDEQ.
func TaxonomyID(v string) predicate.TaxonomyRelation {
	return predicate.TaxonomyRelation(sql.FieldEQ(FieldTaxonomyID, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.TaxonomyRelation {
	return predicate.TaxonomyRelation(sql.FieldEQ(FieldType, v))
}

// Order applies equality check predicate on the "order" field. It's identical to OrderEQ.
func Order(v int) predicate.TaxonomyRelation {
	return predicate.TaxonomyRelation(sql.FieldEQ(FieldOrder, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v string) predicate.TaxonomyRelation {
	return predicate.TaxonomyRelation(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.TaxonomyRelation {
	return predicate.TaxonomyRelation(sql.FieldEQ(FieldCreatedAt, v))
}

// TaxonomyIDEQ applies the EQ predicate on the "taxonomy_id" field.
func TaxonomyIDEQ(v string) predicate.TaxonomyRelation {
	return predicate.TaxonomyRelation(sql.FieldEQ(FieldTaxonomyID, v))
}

// TaxonomyIDNEQ applies the NEQ predicate on the "taxonomy_id" field.
func TaxonomyIDNEQ(v string) predicate.TaxonomyRelation {
	return predicate.TaxonomyRelation(sql.FieldNEQ(FieldTaxonomyID, v))
}

// TaxonomyIDIn applies the In predicate on the "taxonomy_id" field.
func TaxonomyIDIn(vs ...string) predicate.TaxonomyRelation {
	return predicate.TaxonomyRelation(sql.FieldIn(FieldTaxonomyID, vs...))
}

// TaxonomyIDNotIn applies the NotIn predicate on the "taxonomy_id" field.
func TaxonomyIDNotIn(vs ...string) predicate.TaxonomyRelation {
	return predicate.TaxonomyRelation(sql.FieldNotIn(FieldTaxonomyID, vs...))
}

// TaxonomyIDGT applies the GT predicate on the "taxonomy_id" field.
func TaxonomyIDGT(v string) predicate.TaxonomyRelation {
	return predicate.TaxonomyRelation(sql.FieldGT(FieldTaxonomyID, v))
}

// TaxonomyIDGTE applies the GTE predicate on the "taxonomy_id" field.
func TaxonomyIDGTE(v string) predicate.TaxonomyRelation {
	return predicate.TaxonomyRelation(sql.FieldGTE(FieldTaxonomyID, v))
}

// TaxonomyIDLT applies the LT predicate on the "taxonomy_id" field.
func TaxonomyIDLT(v string) predicate.TaxonomyRelation {
	return predicate.TaxonomyRelation(sql.FieldLT(FieldTaxonomyID, v))
}

// TaxonomyIDLTE applies the LTE predicate on the "taxonomy_id" field.
func TaxonomyIDLTE(v string) predicate.TaxonomyRelation {
	return predicate.TaxonomyRelation(sql.FieldLTE(FieldTaxonomyID, v))
}

// TaxonomyIDContains applies the Contains predicate on the "taxonomy_id" field.
func TaxonomyIDContains(v string) predicate.TaxonomyRelation {
	return predicate.TaxonomyRelation(sql.FieldContains(FieldTaxonomyID, v))
}

// TaxonomyIDHasPrefix applies the HasPrefix predicate on the "taxonomy_id" field.
func TaxonomyIDHasPrefix(v string) predicate.TaxonomyRelation {
	return predicate.TaxonomyRelation(sql.FieldHasPrefix(FieldTaxonomyID, v))
}

// TaxonomyIDHasSuffix applies the HasSuffix predicate on the "taxonomy_id" field.
func TaxonomyIDHasSuffix(v string) predicate.TaxonomyRelation {
	return predicate.TaxonomyRelation(sql.FieldHasSuffix(FieldTaxonomyID, v))
}

// TaxonomyIDIsNil applies the IsNil predicate on the "taxonomy_id" field.
func TaxonomyIDIsNil() predicate.TaxonomyRelation {
	return predicate.TaxonomyRelation(sql.FieldIsNull(FieldTaxonomyID))
}

// TaxonomyIDNotNil applies the NotNil predicate on the "taxonomy_id" field.
func TaxonomyIDNotNil() predicate.TaxonomyRelation {
	return predicate.TaxonomyRelation(sql.FieldNotNull(FieldTaxonomyID))
}

// TaxonomyIDEqualFold applies the EqualFold predicate on the "taxonomy_id" field.
func TaxonomyIDEqualFold(v string) predicate.TaxonomyRelation {
	return predicate.TaxonomyRelation(sql.FieldEqualFold(FieldTaxonomyID, v))
}

// TaxonomyIDContainsFold applies the ContainsFold predicate on the "taxonomy_id" field.
func TaxonomyIDContainsFold(v string) predicate.TaxonomyRelation {
	return predicate.TaxonomyRelation(sql.FieldContainsFold(FieldTaxonomyID, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.TaxonomyRelation {
	return predicate.TaxonomyRelation(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.TaxonomyRelation {
	return predicate.TaxonomyRelation(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.TaxonomyRelation {
	return predicate.TaxonomyRelation(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.TaxonomyRelation {
	return predicate.TaxonomyRelation(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.TaxonomyRelation {
	return predicate.TaxonomyRelation(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.TaxonomyRelation {
	return predicate.TaxonomyRelation(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.TaxonomyRelation {
	return predicate.TaxonomyRelation(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.TaxonomyRelation {
	return predicate.TaxonomyRelation(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.TaxonomyRelation {
	return predicate.TaxonomyRelation(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.TaxonomyRelation {
	return predicate.TaxonomyRelation(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.TaxonomyRelation {
	return predicate.TaxonomyRelation(sql.FieldHasSuffix(FieldType, v))
}

// TypeIsNil applies the IsNil predicate on the "type" field.
func TypeIsNil() predicate.TaxonomyRelation {
	return predicate.TaxonomyRelation(sql.FieldIsNull(FieldType))
}

// TypeNotNil applies the NotNil predicate on the "type" field.
func TypeNotNil() predicate.TaxonomyRelation {
	return predicate.TaxonomyRelation(sql.FieldNotNull(FieldType))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.TaxonomyRelation {
	return predicate.TaxonomyRelation(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.TaxonomyRelation {
	return predicate.TaxonomyRelation(sql.FieldContainsFold(FieldType, v))
}

// OrderEQ applies the EQ predicate on the "order" field.
func OrderEQ(v int) predicate.TaxonomyRelation {
	return predicate.TaxonomyRelation(sql.FieldEQ(FieldOrder, v))
}

// OrderNEQ applies the NEQ predicate on the "order" field.
func OrderNEQ(v int) predicate.TaxonomyRelation {
	return predicate.TaxonomyRelation(sql.FieldNEQ(FieldOrder, v))
}

// OrderIn applies the In predicate on the "order" field.
func OrderIn(vs ...int) predicate.TaxonomyRelation {
	return predicate.TaxonomyRelation(sql.FieldIn(FieldOrder, vs...))
}

// OrderNotIn applies the NotIn predicate on the "order" field.
func OrderNotIn(vs ...int) predicate.TaxonomyRelation {
	return predicate.TaxonomyRelation(sql.FieldNotIn(FieldOrder, vs...))
}

// OrderGT applies the GT predicate on the "order" field.
func OrderGT(v int) predicate.TaxonomyRelation {
	return predicate.TaxonomyRelation(sql.FieldGT(FieldOrder, v))
}

// OrderGTE applies the GTE predicate on the "order" field.
func OrderGTE(v int) predicate.TaxonomyRelation {
	return predicate.TaxonomyRelation(sql.FieldGTE(FieldOrder, v))
}

// OrderLT applies the LT predicate on the "order" field.
func OrderLT(v int) predicate.TaxonomyRelation {
	return predicate.TaxonomyRelation(sql.FieldLT(FieldOrder, v))
}

// OrderLTE applies the LTE predicate on the "order" field.
func OrderLTE(v int) predicate.TaxonomyRelation {
	return predicate.TaxonomyRelation(sql.FieldLTE(FieldOrder, v))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v string) predicate.TaxonomyRelation {
	return predicate.TaxonomyRelation(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v string) predicate.TaxonomyRelation {
	return predicate.TaxonomyRelation(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...string) predicate.TaxonomyRelation {
	return predicate.TaxonomyRelation(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...string) predicate.TaxonomyRelation {
	return predicate.TaxonomyRelation(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v string) predicate.TaxonomyRelation {
	return predicate.TaxonomyRelation(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v string) predicate.TaxonomyRelation {
	return predicate.TaxonomyRelation(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v string) predicate.TaxonomyRelation {
	return predicate.TaxonomyRelation(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v string) predicate.TaxonomyRelation {
	return predicate.TaxonomyRelation(sql.FieldLTE(FieldCreatedBy, v))
}

// CreatedByContains applies the Contains predicate on the "created_by" field.
func CreatedByContains(v string) predicate.TaxonomyRelation {
	return predicate.TaxonomyRelation(sql.FieldContains(FieldCreatedBy, v))
}

// CreatedByHasPrefix applies the HasPrefix predicate on the "created_by" field.
func CreatedByHasPrefix(v string) predicate.TaxonomyRelation {
	return predicate.TaxonomyRelation(sql.FieldHasPrefix(FieldCreatedBy, v))
}

// CreatedByHasSuffix applies the HasSuffix predicate on the "created_by" field.
func CreatedByHasSuffix(v string) predicate.TaxonomyRelation {
	return predicate.TaxonomyRelation(sql.FieldHasSuffix(FieldCreatedBy, v))
}

// CreatedByIsNil applies the IsNil predicate on the "created_by" field.
func CreatedByIsNil() predicate.TaxonomyRelation {
	return predicate.TaxonomyRelation(sql.FieldIsNull(FieldCreatedBy))
}

// CreatedByNotNil applies the NotNil predicate on the "created_by" field.
func CreatedByNotNil() predicate.TaxonomyRelation {
	return predicate.TaxonomyRelation(sql.FieldNotNull(FieldCreatedBy))
}

// CreatedByEqualFold applies the EqualFold predicate on the "created_by" field.
func CreatedByEqualFold(v string) predicate.TaxonomyRelation {
	return predicate.TaxonomyRelation(sql.FieldEqualFold(FieldCreatedBy, v))
}

// CreatedByContainsFold applies the ContainsFold predicate on the "created_by" field.
func CreatedByContainsFold(v string) predicate.TaxonomyRelation {
	return predicate.TaxonomyRelation(sql.FieldContainsFold(FieldCreatedBy, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.TaxonomyRelation {
	return predicate.TaxonomyRelation(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.TaxonomyRelation {
	return predicate.TaxonomyRelation(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.TaxonomyRelation {
	return predicate.TaxonomyRelation(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.TaxonomyRelation {
	return predicate.TaxonomyRelation(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.TaxonomyRelation {
	return predicate.TaxonomyRelation(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.TaxonomyRelation {
	return predicate.TaxonomyRelation(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.TaxonomyRelation {
	return predicate.TaxonomyRelation(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.TaxonomyRelation {
	return predicate.TaxonomyRelation(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.TaxonomyRelation {
	return predicate.TaxonomyRelation(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.TaxonomyRelation {
	return predicate.TaxonomyRelation(sql.FieldNotNull(FieldCreatedAt))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TaxonomyRelation) predicate.TaxonomyRelation {
	return predicate.TaxonomyRelation(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TaxonomyRelation) predicate.TaxonomyRelation {
	return predicate.TaxonomyRelation(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TaxonomyRelation) predicate.TaxonomyRelation {
	return predicate.TaxonomyRelation(sql.NotPredicates(p))
}
