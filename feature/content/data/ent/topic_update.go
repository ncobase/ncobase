// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/feature/content/data/ent/predicate"
	"ncobase/feature/content/data/ent/topic"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TopicUpdate is the builder for updating Topic entities.
type TopicUpdate struct {
	config
	hooks    []Hook
	mutation *TopicMutation
}

// Where appends a list predicates to the TopicUpdate builder.
func (tu *TopicUpdate) Where(ps ...predicate.Topic) *TopicUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetName sets the "name" field.
func (tu *TopicUpdate) SetName(s string) *TopicUpdate {
	tu.mutation.SetName(s)
	return tu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tu *TopicUpdate) SetNillableName(s *string) *TopicUpdate {
	if s != nil {
		tu.SetName(*s)
	}
	return tu
}

// ClearName clears the value of the "name" field.
func (tu *TopicUpdate) ClearName() *TopicUpdate {
	tu.mutation.ClearName()
	return tu
}

// SetTitle sets the "title" field.
func (tu *TopicUpdate) SetTitle(s string) *TopicUpdate {
	tu.mutation.SetTitle(s)
	return tu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (tu *TopicUpdate) SetNillableTitle(s *string) *TopicUpdate {
	if s != nil {
		tu.SetTitle(*s)
	}
	return tu
}

// ClearTitle clears the value of the "title" field.
func (tu *TopicUpdate) ClearTitle() *TopicUpdate {
	tu.mutation.ClearTitle()
	return tu
}

// SetSlug sets the "slug" field.
func (tu *TopicUpdate) SetSlug(s string) *TopicUpdate {
	tu.mutation.SetSlug(s)
	return tu
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (tu *TopicUpdate) SetNillableSlug(s *string) *TopicUpdate {
	if s != nil {
		tu.SetSlug(*s)
	}
	return tu
}

// ClearSlug clears the value of the "slug" field.
func (tu *TopicUpdate) ClearSlug() *TopicUpdate {
	tu.mutation.ClearSlug()
	return tu
}

// SetContent sets the "content" field.
func (tu *TopicUpdate) SetContent(s string) *TopicUpdate {
	tu.mutation.SetContent(s)
	return tu
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (tu *TopicUpdate) SetNillableContent(s *string) *TopicUpdate {
	if s != nil {
		tu.SetContent(*s)
	}
	return tu
}

// ClearContent clears the value of the "content" field.
func (tu *TopicUpdate) ClearContent() *TopicUpdate {
	tu.mutation.ClearContent()
	return tu
}

// SetThumbnail sets the "thumbnail" field.
func (tu *TopicUpdate) SetThumbnail(s string) *TopicUpdate {
	tu.mutation.SetThumbnail(s)
	return tu
}

// SetNillableThumbnail sets the "thumbnail" field if the given value is not nil.
func (tu *TopicUpdate) SetNillableThumbnail(s *string) *TopicUpdate {
	if s != nil {
		tu.SetThumbnail(*s)
	}
	return tu
}

// ClearThumbnail clears the value of the "thumbnail" field.
func (tu *TopicUpdate) ClearThumbnail() *TopicUpdate {
	tu.mutation.ClearThumbnail()
	return tu
}

// SetTemp sets the "temp" field.
func (tu *TopicUpdate) SetTemp(b bool) *TopicUpdate {
	tu.mutation.SetTemp(b)
	return tu
}

// SetNillableTemp sets the "temp" field if the given value is not nil.
func (tu *TopicUpdate) SetNillableTemp(b *bool) *TopicUpdate {
	if b != nil {
		tu.SetTemp(*b)
	}
	return tu
}

// ClearTemp clears the value of the "temp" field.
func (tu *TopicUpdate) ClearTemp() *TopicUpdate {
	tu.mutation.ClearTemp()
	return tu
}

// SetMarkdown sets the "markdown" field.
func (tu *TopicUpdate) SetMarkdown(b bool) *TopicUpdate {
	tu.mutation.SetMarkdown(b)
	return tu
}

// SetNillableMarkdown sets the "markdown" field if the given value is not nil.
func (tu *TopicUpdate) SetNillableMarkdown(b *bool) *TopicUpdate {
	if b != nil {
		tu.SetMarkdown(*b)
	}
	return tu
}

// ClearMarkdown clears the value of the "markdown" field.
func (tu *TopicUpdate) ClearMarkdown() *TopicUpdate {
	tu.mutation.ClearMarkdown()
	return tu
}

// SetPrivate sets the "private" field.
func (tu *TopicUpdate) SetPrivate(b bool) *TopicUpdate {
	tu.mutation.SetPrivate(b)
	return tu
}

// SetNillablePrivate sets the "private" field if the given value is not nil.
func (tu *TopicUpdate) SetNillablePrivate(b *bool) *TopicUpdate {
	if b != nil {
		tu.SetPrivate(*b)
	}
	return tu
}

// ClearPrivate clears the value of the "private" field.
func (tu *TopicUpdate) ClearPrivate() *TopicUpdate {
	tu.mutation.ClearPrivate()
	return tu
}

// SetStatus sets the "status" field.
func (tu *TopicUpdate) SetStatus(i int) *TopicUpdate {
	tu.mutation.ResetStatus()
	tu.mutation.SetStatus(i)
	return tu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tu *TopicUpdate) SetNillableStatus(i *int) *TopicUpdate {
	if i != nil {
		tu.SetStatus(*i)
	}
	return tu
}

// AddStatus adds i to the "status" field.
func (tu *TopicUpdate) AddStatus(i int) *TopicUpdate {
	tu.mutation.AddStatus(i)
	return tu
}

// SetReleased sets the "released" field.
func (tu *TopicUpdate) SetReleased(i int64) *TopicUpdate {
	tu.mutation.ResetReleased()
	tu.mutation.SetReleased(i)
	return tu
}

// SetNillableReleased sets the "released" field if the given value is not nil.
func (tu *TopicUpdate) SetNillableReleased(i *int64) *TopicUpdate {
	if i != nil {
		tu.SetReleased(*i)
	}
	return tu
}

// AddReleased adds i to the "released" field.
func (tu *TopicUpdate) AddReleased(i int64) *TopicUpdate {
	tu.mutation.AddReleased(i)
	return tu
}

// ClearReleased clears the value of the "released" field.
func (tu *TopicUpdate) ClearReleased() *TopicUpdate {
	tu.mutation.ClearReleased()
	return tu
}

// SetTaxonomyID sets the "taxonomy_id" field.
func (tu *TopicUpdate) SetTaxonomyID(s string) *TopicUpdate {
	tu.mutation.SetTaxonomyID(s)
	return tu
}

// SetNillableTaxonomyID sets the "taxonomy_id" field if the given value is not nil.
func (tu *TopicUpdate) SetNillableTaxonomyID(s *string) *TopicUpdate {
	if s != nil {
		tu.SetTaxonomyID(*s)
	}
	return tu
}

// ClearTaxonomyID clears the value of the "taxonomy_id" field.
func (tu *TopicUpdate) ClearTaxonomyID() *TopicUpdate {
	tu.mutation.ClearTaxonomyID()
	return tu
}

// SetTenantID sets the "tenant_id" field.
func (tu *TopicUpdate) SetTenantID(s string) *TopicUpdate {
	tu.mutation.SetTenantID(s)
	return tu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (tu *TopicUpdate) SetNillableTenantID(s *string) *TopicUpdate {
	if s != nil {
		tu.SetTenantID(*s)
	}
	return tu
}

// ClearTenantID clears the value of the "tenant_id" field.
func (tu *TopicUpdate) ClearTenantID() *TopicUpdate {
	tu.mutation.ClearTenantID()
	return tu
}

// SetCreatedBy sets the "created_by" field.
func (tu *TopicUpdate) SetCreatedBy(s string) *TopicUpdate {
	tu.mutation.SetCreatedBy(s)
	return tu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (tu *TopicUpdate) SetNillableCreatedBy(s *string) *TopicUpdate {
	if s != nil {
		tu.SetCreatedBy(*s)
	}
	return tu
}

// ClearCreatedBy clears the value of the "created_by" field.
func (tu *TopicUpdate) ClearCreatedBy() *TopicUpdate {
	tu.mutation.ClearCreatedBy()
	return tu
}

// SetUpdatedBy sets the "updated_by" field.
func (tu *TopicUpdate) SetUpdatedBy(s string) *TopicUpdate {
	tu.mutation.SetUpdatedBy(s)
	return tu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (tu *TopicUpdate) SetNillableUpdatedBy(s *string) *TopicUpdate {
	if s != nil {
		tu.SetUpdatedBy(*s)
	}
	return tu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (tu *TopicUpdate) ClearUpdatedBy() *TopicUpdate {
	tu.mutation.ClearUpdatedBy()
	return tu
}

// SetUpdatedAt sets the "updated_at" field.
func (tu *TopicUpdate) SetUpdatedAt(i int64) *TopicUpdate {
	tu.mutation.ResetUpdatedAt()
	tu.mutation.SetUpdatedAt(i)
	return tu
}

// AddUpdatedAt adds i to the "updated_at" field.
func (tu *TopicUpdate) AddUpdatedAt(i int64) *TopicUpdate {
	tu.mutation.AddUpdatedAt(i)
	return tu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tu *TopicUpdate) ClearUpdatedAt() *TopicUpdate {
	tu.mutation.ClearUpdatedAt()
	return tu
}

// Mutation returns the TopicMutation object of the builder.
func (tu *TopicUpdate) Mutation() *TopicMutation {
	return tu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TopicUpdate) Save(ctx context.Context) (int, error) {
	tu.defaults()
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TopicUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TopicUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TopicUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tu *TopicUpdate) defaults() {
	if _, ok := tu.mutation.UpdatedAt(); !ok && !tu.mutation.UpdatedAtCleared() {
		v := topic.UpdateDefaultUpdatedAt()
		tu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *TopicUpdate) check() error {
	if v, ok := tu.mutation.TaxonomyID(); ok {
		if err := topic.TaxonomyIDValidator(v); err != nil {
			return &ValidationError{Name: "taxonomy_id", err: fmt.Errorf(`ent: validator failed for field "Topic.taxonomy_id": %w`, err)}
		}
	}
	if v, ok := tu.mutation.TenantID(); ok {
		if err := topic.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "Topic.tenant_id": %w`, err)}
		}
	}
	if v, ok := tu.mutation.CreatedBy(); ok {
		if err := topic.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "Topic.created_by": %w`, err)}
		}
	}
	if v, ok := tu.mutation.UpdatedBy(); ok {
		if err := topic.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "Topic.updated_by": %w`, err)}
		}
	}
	return nil
}

func (tu *TopicUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(topic.Table, topic.Columns, sqlgraph.NewFieldSpec(topic.FieldID, field.TypeString))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.Name(); ok {
		_spec.SetField(topic.FieldName, field.TypeString, value)
	}
	if tu.mutation.NameCleared() {
		_spec.ClearField(topic.FieldName, field.TypeString)
	}
	if value, ok := tu.mutation.Title(); ok {
		_spec.SetField(topic.FieldTitle, field.TypeString, value)
	}
	if tu.mutation.TitleCleared() {
		_spec.ClearField(topic.FieldTitle, field.TypeString)
	}
	if value, ok := tu.mutation.Slug(); ok {
		_spec.SetField(topic.FieldSlug, field.TypeString, value)
	}
	if tu.mutation.SlugCleared() {
		_spec.ClearField(topic.FieldSlug, field.TypeString)
	}
	if value, ok := tu.mutation.Content(); ok {
		_spec.SetField(topic.FieldContent, field.TypeString, value)
	}
	if tu.mutation.ContentCleared() {
		_spec.ClearField(topic.FieldContent, field.TypeString)
	}
	if value, ok := tu.mutation.Thumbnail(); ok {
		_spec.SetField(topic.FieldThumbnail, field.TypeString, value)
	}
	if tu.mutation.ThumbnailCleared() {
		_spec.ClearField(topic.FieldThumbnail, field.TypeString)
	}
	if value, ok := tu.mutation.Temp(); ok {
		_spec.SetField(topic.FieldTemp, field.TypeBool, value)
	}
	if tu.mutation.TempCleared() {
		_spec.ClearField(topic.FieldTemp, field.TypeBool)
	}
	if value, ok := tu.mutation.Markdown(); ok {
		_spec.SetField(topic.FieldMarkdown, field.TypeBool, value)
	}
	if tu.mutation.MarkdownCleared() {
		_spec.ClearField(topic.FieldMarkdown, field.TypeBool)
	}
	if value, ok := tu.mutation.Private(); ok {
		_spec.SetField(topic.FieldPrivate, field.TypeBool, value)
	}
	if tu.mutation.PrivateCleared() {
		_spec.ClearField(topic.FieldPrivate, field.TypeBool)
	}
	if value, ok := tu.mutation.Status(); ok {
		_spec.SetField(topic.FieldStatus, field.TypeInt, value)
	}
	if value, ok := tu.mutation.AddedStatus(); ok {
		_spec.AddField(topic.FieldStatus, field.TypeInt, value)
	}
	if value, ok := tu.mutation.Released(); ok {
		_spec.SetField(topic.FieldReleased, field.TypeInt64, value)
	}
	if value, ok := tu.mutation.AddedReleased(); ok {
		_spec.AddField(topic.FieldReleased, field.TypeInt64, value)
	}
	if tu.mutation.ReleasedCleared() {
		_spec.ClearField(topic.FieldReleased, field.TypeInt64)
	}
	if value, ok := tu.mutation.TaxonomyID(); ok {
		_spec.SetField(topic.FieldTaxonomyID, field.TypeString, value)
	}
	if tu.mutation.TaxonomyIDCleared() {
		_spec.ClearField(topic.FieldTaxonomyID, field.TypeString)
	}
	if value, ok := tu.mutation.TenantID(); ok {
		_spec.SetField(topic.FieldTenantID, field.TypeString, value)
	}
	if tu.mutation.TenantIDCleared() {
		_spec.ClearField(topic.FieldTenantID, field.TypeString)
	}
	if value, ok := tu.mutation.CreatedBy(); ok {
		_spec.SetField(topic.FieldCreatedBy, field.TypeString, value)
	}
	if tu.mutation.CreatedByCleared() {
		_spec.ClearField(topic.FieldCreatedBy, field.TypeString)
	}
	if value, ok := tu.mutation.UpdatedBy(); ok {
		_spec.SetField(topic.FieldUpdatedBy, field.TypeString, value)
	}
	if tu.mutation.UpdatedByCleared() {
		_spec.ClearField(topic.FieldUpdatedBy, field.TypeString)
	}
	if tu.mutation.CreatedAtCleared() {
		_spec.ClearField(topic.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := tu.mutation.UpdatedAt(); ok {
		_spec.SetField(topic.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := tu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(topic.FieldUpdatedAt, field.TypeInt64, value)
	}
	if tu.mutation.UpdatedAtCleared() {
		_spec.ClearField(topic.FieldUpdatedAt, field.TypeInt64)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{topic.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TopicUpdateOne is the builder for updating a single Topic entity.
type TopicUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TopicMutation
}

// SetName sets the "name" field.
func (tuo *TopicUpdateOne) SetName(s string) *TopicUpdateOne {
	tuo.mutation.SetName(s)
	return tuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tuo *TopicUpdateOne) SetNillableName(s *string) *TopicUpdateOne {
	if s != nil {
		tuo.SetName(*s)
	}
	return tuo
}

// ClearName clears the value of the "name" field.
func (tuo *TopicUpdateOne) ClearName() *TopicUpdateOne {
	tuo.mutation.ClearName()
	return tuo
}

// SetTitle sets the "title" field.
func (tuo *TopicUpdateOne) SetTitle(s string) *TopicUpdateOne {
	tuo.mutation.SetTitle(s)
	return tuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (tuo *TopicUpdateOne) SetNillableTitle(s *string) *TopicUpdateOne {
	if s != nil {
		tuo.SetTitle(*s)
	}
	return tuo
}

// ClearTitle clears the value of the "title" field.
func (tuo *TopicUpdateOne) ClearTitle() *TopicUpdateOne {
	tuo.mutation.ClearTitle()
	return tuo
}

// SetSlug sets the "slug" field.
func (tuo *TopicUpdateOne) SetSlug(s string) *TopicUpdateOne {
	tuo.mutation.SetSlug(s)
	return tuo
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (tuo *TopicUpdateOne) SetNillableSlug(s *string) *TopicUpdateOne {
	if s != nil {
		tuo.SetSlug(*s)
	}
	return tuo
}

// ClearSlug clears the value of the "slug" field.
func (tuo *TopicUpdateOne) ClearSlug() *TopicUpdateOne {
	tuo.mutation.ClearSlug()
	return tuo
}

// SetContent sets the "content" field.
func (tuo *TopicUpdateOne) SetContent(s string) *TopicUpdateOne {
	tuo.mutation.SetContent(s)
	return tuo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (tuo *TopicUpdateOne) SetNillableContent(s *string) *TopicUpdateOne {
	if s != nil {
		tuo.SetContent(*s)
	}
	return tuo
}

// ClearContent clears the value of the "content" field.
func (tuo *TopicUpdateOne) ClearContent() *TopicUpdateOne {
	tuo.mutation.ClearContent()
	return tuo
}

// SetThumbnail sets the "thumbnail" field.
func (tuo *TopicUpdateOne) SetThumbnail(s string) *TopicUpdateOne {
	tuo.mutation.SetThumbnail(s)
	return tuo
}

// SetNillableThumbnail sets the "thumbnail" field if the given value is not nil.
func (tuo *TopicUpdateOne) SetNillableThumbnail(s *string) *TopicUpdateOne {
	if s != nil {
		tuo.SetThumbnail(*s)
	}
	return tuo
}

// ClearThumbnail clears the value of the "thumbnail" field.
func (tuo *TopicUpdateOne) ClearThumbnail() *TopicUpdateOne {
	tuo.mutation.ClearThumbnail()
	return tuo
}

// SetTemp sets the "temp" field.
func (tuo *TopicUpdateOne) SetTemp(b bool) *TopicUpdateOne {
	tuo.mutation.SetTemp(b)
	return tuo
}

// SetNillableTemp sets the "temp" field if the given value is not nil.
func (tuo *TopicUpdateOne) SetNillableTemp(b *bool) *TopicUpdateOne {
	if b != nil {
		tuo.SetTemp(*b)
	}
	return tuo
}

// ClearTemp clears the value of the "temp" field.
func (tuo *TopicUpdateOne) ClearTemp() *TopicUpdateOne {
	tuo.mutation.ClearTemp()
	return tuo
}

// SetMarkdown sets the "markdown" field.
func (tuo *TopicUpdateOne) SetMarkdown(b bool) *TopicUpdateOne {
	tuo.mutation.SetMarkdown(b)
	return tuo
}

// SetNillableMarkdown sets the "markdown" field if the given value is not nil.
func (tuo *TopicUpdateOne) SetNillableMarkdown(b *bool) *TopicUpdateOne {
	if b != nil {
		tuo.SetMarkdown(*b)
	}
	return tuo
}

// ClearMarkdown clears the value of the "markdown" field.
func (tuo *TopicUpdateOne) ClearMarkdown() *TopicUpdateOne {
	tuo.mutation.ClearMarkdown()
	return tuo
}

// SetPrivate sets the "private" field.
func (tuo *TopicUpdateOne) SetPrivate(b bool) *TopicUpdateOne {
	tuo.mutation.SetPrivate(b)
	return tuo
}

// SetNillablePrivate sets the "private" field if the given value is not nil.
func (tuo *TopicUpdateOne) SetNillablePrivate(b *bool) *TopicUpdateOne {
	if b != nil {
		tuo.SetPrivate(*b)
	}
	return tuo
}

// ClearPrivate clears the value of the "private" field.
func (tuo *TopicUpdateOne) ClearPrivate() *TopicUpdateOne {
	tuo.mutation.ClearPrivate()
	return tuo
}

// SetStatus sets the "status" field.
func (tuo *TopicUpdateOne) SetStatus(i int) *TopicUpdateOne {
	tuo.mutation.ResetStatus()
	tuo.mutation.SetStatus(i)
	return tuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tuo *TopicUpdateOne) SetNillableStatus(i *int) *TopicUpdateOne {
	if i != nil {
		tuo.SetStatus(*i)
	}
	return tuo
}

// AddStatus adds i to the "status" field.
func (tuo *TopicUpdateOne) AddStatus(i int) *TopicUpdateOne {
	tuo.mutation.AddStatus(i)
	return tuo
}

// SetReleased sets the "released" field.
func (tuo *TopicUpdateOne) SetReleased(i int64) *TopicUpdateOne {
	tuo.mutation.ResetReleased()
	tuo.mutation.SetReleased(i)
	return tuo
}

// SetNillableReleased sets the "released" field if the given value is not nil.
func (tuo *TopicUpdateOne) SetNillableReleased(i *int64) *TopicUpdateOne {
	if i != nil {
		tuo.SetReleased(*i)
	}
	return tuo
}

// AddReleased adds i to the "released" field.
func (tuo *TopicUpdateOne) AddReleased(i int64) *TopicUpdateOne {
	tuo.mutation.AddReleased(i)
	return tuo
}

// ClearReleased clears the value of the "released" field.
func (tuo *TopicUpdateOne) ClearReleased() *TopicUpdateOne {
	tuo.mutation.ClearReleased()
	return tuo
}

// SetTaxonomyID sets the "taxonomy_id" field.
func (tuo *TopicUpdateOne) SetTaxonomyID(s string) *TopicUpdateOne {
	tuo.mutation.SetTaxonomyID(s)
	return tuo
}

// SetNillableTaxonomyID sets the "taxonomy_id" field if the given value is not nil.
func (tuo *TopicUpdateOne) SetNillableTaxonomyID(s *string) *TopicUpdateOne {
	if s != nil {
		tuo.SetTaxonomyID(*s)
	}
	return tuo
}

// ClearTaxonomyID clears the value of the "taxonomy_id" field.
func (tuo *TopicUpdateOne) ClearTaxonomyID() *TopicUpdateOne {
	tuo.mutation.ClearTaxonomyID()
	return tuo
}

// SetTenantID sets the "tenant_id" field.
func (tuo *TopicUpdateOne) SetTenantID(s string) *TopicUpdateOne {
	tuo.mutation.SetTenantID(s)
	return tuo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (tuo *TopicUpdateOne) SetNillableTenantID(s *string) *TopicUpdateOne {
	if s != nil {
		tuo.SetTenantID(*s)
	}
	return tuo
}

// ClearTenantID clears the value of the "tenant_id" field.
func (tuo *TopicUpdateOne) ClearTenantID() *TopicUpdateOne {
	tuo.mutation.ClearTenantID()
	return tuo
}

// SetCreatedBy sets the "created_by" field.
func (tuo *TopicUpdateOne) SetCreatedBy(s string) *TopicUpdateOne {
	tuo.mutation.SetCreatedBy(s)
	return tuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (tuo *TopicUpdateOne) SetNillableCreatedBy(s *string) *TopicUpdateOne {
	if s != nil {
		tuo.SetCreatedBy(*s)
	}
	return tuo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (tuo *TopicUpdateOne) ClearCreatedBy() *TopicUpdateOne {
	tuo.mutation.ClearCreatedBy()
	return tuo
}

// SetUpdatedBy sets the "updated_by" field.
func (tuo *TopicUpdateOne) SetUpdatedBy(s string) *TopicUpdateOne {
	tuo.mutation.SetUpdatedBy(s)
	return tuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (tuo *TopicUpdateOne) SetNillableUpdatedBy(s *string) *TopicUpdateOne {
	if s != nil {
		tuo.SetUpdatedBy(*s)
	}
	return tuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (tuo *TopicUpdateOne) ClearUpdatedBy() *TopicUpdateOne {
	tuo.mutation.ClearUpdatedBy()
	return tuo
}

// SetUpdatedAt sets the "updated_at" field.
func (tuo *TopicUpdateOne) SetUpdatedAt(i int64) *TopicUpdateOne {
	tuo.mutation.ResetUpdatedAt()
	tuo.mutation.SetUpdatedAt(i)
	return tuo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (tuo *TopicUpdateOne) AddUpdatedAt(i int64) *TopicUpdateOne {
	tuo.mutation.AddUpdatedAt(i)
	return tuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tuo *TopicUpdateOne) ClearUpdatedAt() *TopicUpdateOne {
	tuo.mutation.ClearUpdatedAt()
	return tuo
}

// Mutation returns the TopicMutation object of the builder.
func (tuo *TopicUpdateOne) Mutation() *TopicMutation {
	return tuo.mutation
}

// Where appends a list predicates to the TopicUpdate builder.
func (tuo *TopicUpdateOne) Where(ps ...predicate.Topic) *TopicUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TopicUpdateOne) Select(field string, fields ...string) *TopicUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Topic entity.
func (tuo *TopicUpdateOne) Save(ctx context.Context) (*Topic, error) {
	tuo.defaults()
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TopicUpdateOne) SaveX(ctx context.Context) *Topic {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TopicUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TopicUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tuo *TopicUpdateOne) defaults() {
	if _, ok := tuo.mutation.UpdatedAt(); !ok && !tuo.mutation.UpdatedAtCleared() {
		v := topic.UpdateDefaultUpdatedAt()
		tuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TopicUpdateOne) check() error {
	if v, ok := tuo.mutation.TaxonomyID(); ok {
		if err := topic.TaxonomyIDValidator(v); err != nil {
			return &ValidationError{Name: "taxonomy_id", err: fmt.Errorf(`ent: validator failed for field "Topic.taxonomy_id": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.TenantID(); ok {
		if err := topic.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "Topic.tenant_id": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.CreatedBy(); ok {
		if err := topic.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "Topic.created_by": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.UpdatedBy(); ok {
		if err := topic.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "Topic.updated_by": %w`, err)}
		}
	}
	return nil
}

func (tuo *TopicUpdateOne) sqlSave(ctx context.Context) (_node *Topic, err error) {
	if err := tuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(topic.Table, topic.Columns, sqlgraph.NewFieldSpec(topic.FieldID, field.TypeString))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Topic.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, topic.FieldID)
		for _, f := range fields {
			if !topic.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != topic.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.Name(); ok {
		_spec.SetField(topic.FieldName, field.TypeString, value)
	}
	if tuo.mutation.NameCleared() {
		_spec.ClearField(topic.FieldName, field.TypeString)
	}
	if value, ok := tuo.mutation.Title(); ok {
		_spec.SetField(topic.FieldTitle, field.TypeString, value)
	}
	if tuo.mutation.TitleCleared() {
		_spec.ClearField(topic.FieldTitle, field.TypeString)
	}
	if value, ok := tuo.mutation.Slug(); ok {
		_spec.SetField(topic.FieldSlug, field.TypeString, value)
	}
	if tuo.mutation.SlugCleared() {
		_spec.ClearField(topic.FieldSlug, field.TypeString)
	}
	if value, ok := tuo.mutation.Content(); ok {
		_spec.SetField(topic.FieldContent, field.TypeString, value)
	}
	if tuo.mutation.ContentCleared() {
		_spec.ClearField(topic.FieldContent, field.TypeString)
	}
	if value, ok := tuo.mutation.Thumbnail(); ok {
		_spec.SetField(topic.FieldThumbnail, field.TypeString, value)
	}
	if tuo.mutation.ThumbnailCleared() {
		_spec.ClearField(topic.FieldThumbnail, field.TypeString)
	}
	if value, ok := tuo.mutation.Temp(); ok {
		_spec.SetField(topic.FieldTemp, field.TypeBool, value)
	}
	if tuo.mutation.TempCleared() {
		_spec.ClearField(topic.FieldTemp, field.TypeBool)
	}
	if value, ok := tuo.mutation.Markdown(); ok {
		_spec.SetField(topic.FieldMarkdown, field.TypeBool, value)
	}
	if tuo.mutation.MarkdownCleared() {
		_spec.ClearField(topic.FieldMarkdown, field.TypeBool)
	}
	if value, ok := tuo.mutation.Private(); ok {
		_spec.SetField(topic.FieldPrivate, field.TypeBool, value)
	}
	if tuo.mutation.PrivateCleared() {
		_spec.ClearField(topic.FieldPrivate, field.TypeBool)
	}
	if value, ok := tuo.mutation.Status(); ok {
		_spec.SetField(topic.FieldStatus, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.AddedStatus(); ok {
		_spec.AddField(topic.FieldStatus, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.Released(); ok {
		_spec.SetField(topic.FieldReleased, field.TypeInt64, value)
	}
	if value, ok := tuo.mutation.AddedReleased(); ok {
		_spec.AddField(topic.FieldReleased, field.TypeInt64, value)
	}
	if tuo.mutation.ReleasedCleared() {
		_spec.ClearField(topic.FieldReleased, field.TypeInt64)
	}
	if value, ok := tuo.mutation.TaxonomyID(); ok {
		_spec.SetField(topic.FieldTaxonomyID, field.TypeString, value)
	}
	if tuo.mutation.TaxonomyIDCleared() {
		_spec.ClearField(topic.FieldTaxonomyID, field.TypeString)
	}
	if value, ok := tuo.mutation.TenantID(); ok {
		_spec.SetField(topic.FieldTenantID, field.TypeString, value)
	}
	if tuo.mutation.TenantIDCleared() {
		_spec.ClearField(topic.FieldTenantID, field.TypeString)
	}
	if value, ok := tuo.mutation.CreatedBy(); ok {
		_spec.SetField(topic.FieldCreatedBy, field.TypeString, value)
	}
	if tuo.mutation.CreatedByCleared() {
		_spec.ClearField(topic.FieldCreatedBy, field.TypeString)
	}
	if value, ok := tuo.mutation.UpdatedBy(); ok {
		_spec.SetField(topic.FieldUpdatedBy, field.TypeString, value)
	}
	if tuo.mutation.UpdatedByCleared() {
		_spec.ClearField(topic.FieldUpdatedBy, field.TypeString)
	}
	if tuo.mutation.CreatedAtCleared() {
		_spec.ClearField(topic.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := tuo.mutation.UpdatedAt(); ok {
		_spec.SetField(topic.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := tuo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(topic.FieldUpdatedAt, field.TypeInt64, value)
	}
	if tuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(topic.FieldUpdatedAt, field.TypeInt64)
	}
	_node = &Topic{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{topic.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
