// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"ncobase/feature/group/data/ent/group"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// GroupCreate is the builder for creating a Group entity.
type GroupCreate struct {
	config
	mutation *GroupMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (gc *GroupCreate) SetName(s string) *GroupCreate {
	gc.mutation.SetName(s)
	return gc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (gc *GroupCreate) SetNillableName(s *string) *GroupCreate {
	if s != nil {
		gc.SetName(*s)
	}
	return gc
}

// SetSlug sets the "slug" field.
func (gc *GroupCreate) SetSlug(s string) *GroupCreate {
	gc.mutation.SetSlug(s)
	return gc
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (gc *GroupCreate) SetNillableSlug(s *string) *GroupCreate {
	if s != nil {
		gc.SetSlug(*s)
	}
	return gc
}

// SetDisabled sets the "disabled" field.
func (gc *GroupCreate) SetDisabled(b bool) *GroupCreate {
	gc.mutation.SetDisabled(b)
	return gc
}

// SetNillableDisabled sets the "disabled" field if the given value is not nil.
func (gc *GroupCreate) SetNillableDisabled(b *bool) *GroupCreate {
	if b != nil {
		gc.SetDisabled(*b)
	}
	return gc
}

// SetDescription sets the "description" field.
func (gc *GroupCreate) SetDescription(s string) *GroupCreate {
	gc.mutation.SetDescription(s)
	return gc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (gc *GroupCreate) SetNillableDescription(s *string) *GroupCreate {
	if s != nil {
		gc.SetDescription(*s)
	}
	return gc
}

// SetLeader sets the "leader" field.
func (gc *GroupCreate) SetLeader(m map[string]interface{}) *GroupCreate {
	gc.mutation.SetLeader(m)
	return gc
}

// SetExtras sets the "extras" field.
func (gc *GroupCreate) SetExtras(m map[string]interface{}) *GroupCreate {
	gc.mutation.SetExtras(m)
	return gc
}

// SetParentID sets the "parent_id" field.
func (gc *GroupCreate) SetParentID(s string) *GroupCreate {
	gc.mutation.SetParentID(s)
	return gc
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (gc *GroupCreate) SetNillableParentID(s *string) *GroupCreate {
	if s != nil {
		gc.SetParentID(*s)
	}
	return gc
}

// SetTenantID sets the "tenant_id" field.
func (gc *GroupCreate) SetTenantID(s string) *GroupCreate {
	gc.mutation.SetTenantID(s)
	return gc
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (gc *GroupCreate) SetNillableTenantID(s *string) *GroupCreate {
	if s != nil {
		gc.SetTenantID(*s)
	}
	return gc
}

// SetCreatedBy sets the "created_by" field.
func (gc *GroupCreate) SetCreatedBy(s string) *GroupCreate {
	gc.mutation.SetCreatedBy(s)
	return gc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (gc *GroupCreate) SetNillableCreatedBy(s *string) *GroupCreate {
	if s != nil {
		gc.SetCreatedBy(*s)
	}
	return gc
}

// SetUpdatedBy sets the "updated_by" field.
func (gc *GroupCreate) SetUpdatedBy(s string) *GroupCreate {
	gc.mutation.SetUpdatedBy(s)
	return gc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (gc *GroupCreate) SetNillableUpdatedBy(s *string) *GroupCreate {
	if s != nil {
		gc.SetUpdatedBy(*s)
	}
	return gc
}

// SetCreatedAt sets the "created_at" field.
func (gc *GroupCreate) SetCreatedAt(t time.Time) *GroupCreate {
	gc.mutation.SetCreatedAt(t)
	return gc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (gc *GroupCreate) SetNillableCreatedAt(t *time.Time) *GroupCreate {
	if t != nil {
		gc.SetCreatedAt(*t)
	}
	return gc
}

// SetUpdatedAt sets the "updated_at" field.
func (gc *GroupCreate) SetUpdatedAt(t time.Time) *GroupCreate {
	gc.mutation.SetUpdatedAt(t)
	return gc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (gc *GroupCreate) SetNillableUpdatedAt(t *time.Time) *GroupCreate {
	if t != nil {
		gc.SetUpdatedAt(*t)
	}
	return gc
}

// SetID sets the "id" field.
func (gc *GroupCreate) SetID(s string) *GroupCreate {
	gc.mutation.SetID(s)
	return gc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (gc *GroupCreate) SetNillableID(s *string) *GroupCreate {
	if s != nil {
		gc.SetID(*s)
	}
	return gc
}

// Mutation returns the GroupMutation object of the builder.
func (gc *GroupCreate) Mutation() *GroupMutation {
	return gc.mutation
}

// Save creates the Group in the database.
func (gc *GroupCreate) Save(ctx context.Context) (*Group, error) {
	gc.defaults()
	return withHooks(ctx, gc.sqlSave, gc.mutation, gc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (gc *GroupCreate) SaveX(ctx context.Context) *Group {
	v, err := gc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gc *GroupCreate) Exec(ctx context.Context) error {
	_, err := gc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gc *GroupCreate) ExecX(ctx context.Context) {
	if err := gc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gc *GroupCreate) defaults() {
	if _, ok := gc.mutation.Disabled(); !ok {
		v := group.DefaultDisabled
		gc.mutation.SetDisabled(v)
	}
	if _, ok := gc.mutation.Leader(); !ok {
		v := group.DefaultLeader
		gc.mutation.SetLeader(v)
	}
	if _, ok := gc.mutation.Extras(); !ok {
		v := group.DefaultExtras
		gc.mutation.SetExtras(v)
	}
	if _, ok := gc.mutation.CreatedAt(); !ok {
		v := group.DefaultCreatedAt()
		gc.mutation.SetCreatedAt(v)
	}
	if _, ok := gc.mutation.UpdatedAt(); !ok {
		v := group.DefaultUpdatedAt()
		gc.mutation.SetUpdatedAt(v)
	}
	if _, ok := gc.mutation.ID(); !ok {
		v := group.DefaultID()
		gc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gc *GroupCreate) check() error {
	if v, ok := gc.mutation.ParentID(); ok {
		if err := group.ParentIDValidator(v); err != nil {
			return &ValidationError{Name: "parent_id", err: fmt.Errorf(`ent: validator failed for field "Group.parent_id": %w`, err)}
		}
	}
	if v, ok := gc.mutation.TenantID(); ok {
		if err := group.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "Group.tenant_id": %w`, err)}
		}
	}
	if v, ok := gc.mutation.CreatedBy(); ok {
		if err := group.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "Group.created_by": %w`, err)}
		}
	}
	if v, ok := gc.mutation.UpdatedBy(); ok {
		if err := group.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "Group.updated_by": %w`, err)}
		}
	}
	if v, ok := gc.mutation.ID(); ok {
		if err := group.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Group.id": %w`, err)}
		}
	}
	return nil
}

func (gc *GroupCreate) sqlSave(ctx context.Context) (*Group, error) {
	if err := gc.check(); err != nil {
		return nil, err
	}
	_node, _spec := gc.createSpec()
	if err := sqlgraph.CreateNode(ctx, gc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Group.ID type: %T", _spec.ID.Value)
		}
	}
	gc.mutation.id = &_node.ID
	gc.mutation.done = true
	return _node, nil
}

func (gc *GroupCreate) createSpec() (*Group, *sqlgraph.CreateSpec) {
	var (
		_node = &Group{config: gc.config}
		_spec = sqlgraph.NewCreateSpec(group.Table, sqlgraph.NewFieldSpec(group.FieldID, field.TypeString))
	)
	if id, ok := gc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := gc.mutation.Name(); ok {
		_spec.SetField(group.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := gc.mutation.Slug(); ok {
		_spec.SetField(group.FieldSlug, field.TypeString, value)
		_node.Slug = value
	}
	if value, ok := gc.mutation.Disabled(); ok {
		_spec.SetField(group.FieldDisabled, field.TypeBool, value)
		_node.Disabled = value
	}
	if value, ok := gc.mutation.Description(); ok {
		_spec.SetField(group.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := gc.mutation.Leader(); ok {
		_spec.SetField(group.FieldLeader, field.TypeJSON, value)
		_node.Leader = value
	}
	if value, ok := gc.mutation.Extras(); ok {
		_spec.SetField(group.FieldExtras, field.TypeJSON, value)
		_node.Extras = value
	}
	if value, ok := gc.mutation.ParentID(); ok {
		_spec.SetField(group.FieldParentID, field.TypeString, value)
		_node.ParentID = value
	}
	if value, ok := gc.mutation.TenantID(); ok {
		_spec.SetField(group.FieldTenantID, field.TypeString, value)
		_node.TenantID = value
	}
	if value, ok := gc.mutation.CreatedBy(); ok {
		_spec.SetField(group.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := gc.mutation.UpdatedBy(); ok {
		_spec.SetField(group.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := gc.mutation.CreatedAt(); ok {
		_spec.SetField(group.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := gc.mutation.UpdatedAt(); ok {
		_spec.SetField(group.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// GroupCreateBulk is the builder for creating many Group entities in bulk.
type GroupCreateBulk struct {
	config
	err      error
	builders []*GroupCreate
}

// Save creates the Group entities in the database.
func (gcb *GroupCreateBulk) Save(ctx context.Context) ([]*Group, error) {
	if gcb.err != nil {
		return nil, gcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(gcb.builders))
	nodes := make([]*Group, len(gcb.builders))
	mutators := make([]Mutator, len(gcb.builders))
	for i := range gcb.builders {
		func(i int, root context.Context) {
			builder := gcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GroupMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gcb *GroupCreateBulk) SaveX(ctx context.Context) []*Group {
	v, err := gcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gcb *GroupCreateBulk) Exec(ctx context.Context) error {
	_, err := gcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gcb *GroupCreateBulk) ExecX(ctx context.Context) {
	if err := gcb.Exec(ctx); err != nil {
		panic(err)
	}
}
