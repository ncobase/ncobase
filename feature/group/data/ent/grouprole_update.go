// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/feature/group/data/ent/grouprole"
	"ncobase/feature/group/data/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// GroupRoleUpdate is the builder for updating GroupRole entities.
type GroupRoleUpdate struct {
	config
	hooks    []Hook
	mutation *GroupRoleMutation
}

// Where appends a list predicates to the GroupRoleUpdate builder.
func (gru *GroupRoleUpdate) Where(ps ...predicate.GroupRole) *GroupRoleUpdate {
	gru.mutation.Where(ps...)
	return gru
}

// SetGroupID sets the "group_id" field.
func (gru *GroupRoleUpdate) SetGroupID(s string) *GroupRoleUpdate {
	gru.mutation.SetGroupID(s)
	return gru
}

// SetNillableGroupID sets the "group_id" field if the given value is not nil.
func (gru *GroupRoleUpdate) SetNillableGroupID(s *string) *GroupRoleUpdate {
	if s != nil {
		gru.SetGroupID(*s)
	}
	return gru
}

// ClearGroupID clears the value of the "group_id" field.
func (gru *GroupRoleUpdate) ClearGroupID() *GroupRoleUpdate {
	gru.mutation.ClearGroupID()
	return gru
}

// SetRoleID sets the "role_id" field.
func (gru *GroupRoleUpdate) SetRoleID(s string) *GroupRoleUpdate {
	gru.mutation.SetRoleID(s)
	return gru
}

// SetNillableRoleID sets the "role_id" field if the given value is not nil.
func (gru *GroupRoleUpdate) SetNillableRoleID(s *string) *GroupRoleUpdate {
	if s != nil {
		gru.SetRoleID(*s)
	}
	return gru
}

// ClearRoleID clears the value of the "role_id" field.
func (gru *GroupRoleUpdate) ClearRoleID() *GroupRoleUpdate {
	gru.mutation.ClearRoleID()
	return gru
}

// SetCreatedBy sets the "created_by" field.
func (gru *GroupRoleUpdate) SetCreatedBy(s string) *GroupRoleUpdate {
	gru.mutation.SetCreatedBy(s)
	return gru
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (gru *GroupRoleUpdate) SetNillableCreatedBy(s *string) *GroupRoleUpdate {
	if s != nil {
		gru.SetCreatedBy(*s)
	}
	return gru
}

// ClearCreatedBy clears the value of the "created_by" field.
func (gru *GroupRoleUpdate) ClearCreatedBy() *GroupRoleUpdate {
	gru.mutation.ClearCreatedBy()
	return gru
}

// SetUpdatedBy sets the "updated_by" field.
func (gru *GroupRoleUpdate) SetUpdatedBy(s string) *GroupRoleUpdate {
	gru.mutation.SetUpdatedBy(s)
	return gru
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (gru *GroupRoleUpdate) SetNillableUpdatedBy(s *string) *GroupRoleUpdate {
	if s != nil {
		gru.SetUpdatedBy(*s)
	}
	return gru
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (gru *GroupRoleUpdate) ClearUpdatedBy() *GroupRoleUpdate {
	gru.mutation.ClearUpdatedBy()
	return gru
}

// SetUpdatedAt sets the "updated_at" field.
func (gru *GroupRoleUpdate) SetUpdatedAt(i int64) *GroupRoleUpdate {
	gru.mutation.ResetUpdatedAt()
	gru.mutation.SetUpdatedAt(i)
	return gru
}

// AddUpdatedAt adds i to the "updated_at" field.
func (gru *GroupRoleUpdate) AddUpdatedAt(i int64) *GroupRoleUpdate {
	gru.mutation.AddUpdatedAt(i)
	return gru
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (gru *GroupRoleUpdate) ClearUpdatedAt() *GroupRoleUpdate {
	gru.mutation.ClearUpdatedAt()
	return gru
}

// Mutation returns the GroupRoleMutation object of the builder.
func (gru *GroupRoleUpdate) Mutation() *GroupRoleMutation {
	return gru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gru *GroupRoleUpdate) Save(ctx context.Context) (int, error) {
	gru.defaults()
	return withHooks(ctx, gru.sqlSave, gru.mutation, gru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gru *GroupRoleUpdate) SaveX(ctx context.Context) int {
	affected, err := gru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gru *GroupRoleUpdate) Exec(ctx context.Context) error {
	_, err := gru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gru *GroupRoleUpdate) ExecX(ctx context.Context) {
	if err := gru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gru *GroupRoleUpdate) defaults() {
	if _, ok := gru.mutation.UpdatedAt(); !ok && !gru.mutation.UpdatedAtCleared() {
		v := grouprole.UpdateDefaultUpdatedAt()
		gru.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gru *GroupRoleUpdate) check() error {
	if v, ok := gru.mutation.GroupID(); ok {
		if err := grouprole.GroupIDValidator(v); err != nil {
			return &ValidationError{Name: "group_id", err: fmt.Errorf(`ent: validator failed for field "GroupRole.group_id": %w`, err)}
		}
	}
	if v, ok := gru.mutation.RoleID(); ok {
		if err := grouprole.RoleIDValidator(v); err != nil {
			return &ValidationError{Name: "role_id", err: fmt.Errorf(`ent: validator failed for field "GroupRole.role_id": %w`, err)}
		}
	}
	if v, ok := gru.mutation.CreatedBy(); ok {
		if err := grouprole.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "GroupRole.created_by": %w`, err)}
		}
	}
	if v, ok := gru.mutation.UpdatedBy(); ok {
		if err := grouprole.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "GroupRole.updated_by": %w`, err)}
		}
	}
	return nil
}

func (gru *GroupRoleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := gru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(grouprole.Table, grouprole.Columns, sqlgraph.NewFieldSpec(grouprole.FieldID, field.TypeString))
	if ps := gru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gru.mutation.GroupID(); ok {
		_spec.SetField(grouprole.FieldGroupID, field.TypeString, value)
	}
	if gru.mutation.GroupIDCleared() {
		_spec.ClearField(grouprole.FieldGroupID, field.TypeString)
	}
	if value, ok := gru.mutation.RoleID(); ok {
		_spec.SetField(grouprole.FieldRoleID, field.TypeString, value)
	}
	if gru.mutation.RoleIDCleared() {
		_spec.ClearField(grouprole.FieldRoleID, field.TypeString)
	}
	if value, ok := gru.mutation.CreatedBy(); ok {
		_spec.SetField(grouprole.FieldCreatedBy, field.TypeString, value)
	}
	if gru.mutation.CreatedByCleared() {
		_spec.ClearField(grouprole.FieldCreatedBy, field.TypeString)
	}
	if value, ok := gru.mutation.UpdatedBy(); ok {
		_spec.SetField(grouprole.FieldUpdatedBy, field.TypeString, value)
	}
	if gru.mutation.UpdatedByCleared() {
		_spec.ClearField(grouprole.FieldUpdatedBy, field.TypeString)
	}
	if gru.mutation.CreatedAtCleared() {
		_spec.ClearField(grouprole.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := gru.mutation.UpdatedAt(); ok {
		_spec.SetField(grouprole.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := gru.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(grouprole.FieldUpdatedAt, field.TypeInt64, value)
	}
	if gru.mutation.UpdatedAtCleared() {
		_spec.ClearField(grouprole.FieldUpdatedAt, field.TypeInt64)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{grouprole.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	gru.mutation.done = true
	return n, nil
}

// GroupRoleUpdateOne is the builder for updating a single GroupRole entity.
type GroupRoleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GroupRoleMutation
}

// SetGroupID sets the "group_id" field.
func (gruo *GroupRoleUpdateOne) SetGroupID(s string) *GroupRoleUpdateOne {
	gruo.mutation.SetGroupID(s)
	return gruo
}

// SetNillableGroupID sets the "group_id" field if the given value is not nil.
func (gruo *GroupRoleUpdateOne) SetNillableGroupID(s *string) *GroupRoleUpdateOne {
	if s != nil {
		gruo.SetGroupID(*s)
	}
	return gruo
}

// ClearGroupID clears the value of the "group_id" field.
func (gruo *GroupRoleUpdateOne) ClearGroupID() *GroupRoleUpdateOne {
	gruo.mutation.ClearGroupID()
	return gruo
}

// SetRoleID sets the "role_id" field.
func (gruo *GroupRoleUpdateOne) SetRoleID(s string) *GroupRoleUpdateOne {
	gruo.mutation.SetRoleID(s)
	return gruo
}

// SetNillableRoleID sets the "role_id" field if the given value is not nil.
func (gruo *GroupRoleUpdateOne) SetNillableRoleID(s *string) *GroupRoleUpdateOne {
	if s != nil {
		gruo.SetRoleID(*s)
	}
	return gruo
}

// ClearRoleID clears the value of the "role_id" field.
func (gruo *GroupRoleUpdateOne) ClearRoleID() *GroupRoleUpdateOne {
	gruo.mutation.ClearRoleID()
	return gruo
}

// SetCreatedBy sets the "created_by" field.
func (gruo *GroupRoleUpdateOne) SetCreatedBy(s string) *GroupRoleUpdateOne {
	gruo.mutation.SetCreatedBy(s)
	return gruo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (gruo *GroupRoleUpdateOne) SetNillableCreatedBy(s *string) *GroupRoleUpdateOne {
	if s != nil {
		gruo.SetCreatedBy(*s)
	}
	return gruo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (gruo *GroupRoleUpdateOne) ClearCreatedBy() *GroupRoleUpdateOne {
	gruo.mutation.ClearCreatedBy()
	return gruo
}

// SetUpdatedBy sets the "updated_by" field.
func (gruo *GroupRoleUpdateOne) SetUpdatedBy(s string) *GroupRoleUpdateOne {
	gruo.mutation.SetUpdatedBy(s)
	return gruo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (gruo *GroupRoleUpdateOne) SetNillableUpdatedBy(s *string) *GroupRoleUpdateOne {
	if s != nil {
		gruo.SetUpdatedBy(*s)
	}
	return gruo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (gruo *GroupRoleUpdateOne) ClearUpdatedBy() *GroupRoleUpdateOne {
	gruo.mutation.ClearUpdatedBy()
	return gruo
}

// SetUpdatedAt sets the "updated_at" field.
func (gruo *GroupRoleUpdateOne) SetUpdatedAt(i int64) *GroupRoleUpdateOne {
	gruo.mutation.ResetUpdatedAt()
	gruo.mutation.SetUpdatedAt(i)
	return gruo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (gruo *GroupRoleUpdateOne) AddUpdatedAt(i int64) *GroupRoleUpdateOne {
	gruo.mutation.AddUpdatedAt(i)
	return gruo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (gruo *GroupRoleUpdateOne) ClearUpdatedAt() *GroupRoleUpdateOne {
	gruo.mutation.ClearUpdatedAt()
	return gruo
}

// Mutation returns the GroupRoleMutation object of the builder.
func (gruo *GroupRoleUpdateOne) Mutation() *GroupRoleMutation {
	return gruo.mutation
}

// Where appends a list predicates to the GroupRoleUpdate builder.
func (gruo *GroupRoleUpdateOne) Where(ps ...predicate.GroupRole) *GroupRoleUpdateOne {
	gruo.mutation.Where(ps...)
	return gruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (gruo *GroupRoleUpdateOne) Select(field string, fields ...string) *GroupRoleUpdateOne {
	gruo.fields = append([]string{field}, fields...)
	return gruo
}

// Save executes the query and returns the updated GroupRole entity.
func (gruo *GroupRoleUpdateOne) Save(ctx context.Context) (*GroupRole, error) {
	gruo.defaults()
	return withHooks(ctx, gruo.sqlSave, gruo.mutation, gruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gruo *GroupRoleUpdateOne) SaveX(ctx context.Context) *GroupRole {
	node, err := gruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (gruo *GroupRoleUpdateOne) Exec(ctx context.Context) error {
	_, err := gruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gruo *GroupRoleUpdateOne) ExecX(ctx context.Context) {
	if err := gruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gruo *GroupRoleUpdateOne) defaults() {
	if _, ok := gruo.mutation.UpdatedAt(); !ok && !gruo.mutation.UpdatedAtCleared() {
		v := grouprole.UpdateDefaultUpdatedAt()
		gruo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gruo *GroupRoleUpdateOne) check() error {
	if v, ok := gruo.mutation.GroupID(); ok {
		if err := grouprole.GroupIDValidator(v); err != nil {
			return &ValidationError{Name: "group_id", err: fmt.Errorf(`ent: validator failed for field "GroupRole.group_id": %w`, err)}
		}
	}
	if v, ok := gruo.mutation.RoleID(); ok {
		if err := grouprole.RoleIDValidator(v); err != nil {
			return &ValidationError{Name: "role_id", err: fmt.Errorf(`ent: validator failed for field "GroupRole.role_id": %w`, err)}
		}
	}
	if v, ok := gruo.mutation.CreatedBy(); ok {
		if err := grouprole.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "GroupRole.created_by": %w`, err)}
		}
	}
	if v, ok := gruo.mutation.UpdatedBy(); ok {
		if err := grouprole.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "GroupRole.updated_by": %w`, err)}
		}
	}
	return nil
}

func (gruo *GroupRoleUpdateOne) sqlSave(ctx context.Context) (_node *GroupRole, err error) {
	if err := gruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(grouprole.Table, grouprole.Columns, sqlgraph.NewFieldSpec(grouprole.FieldID, field.TypeString))
	id, ok := gruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "GroupRole.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := gruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, grouprole.FieldID)
		for _, f := range fields {
			if !grouprole.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != grouprole.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := gruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gruo.mutation.GroupID(); ok {
		_spec.SetField(grouprole.FieldGroupID, field.TypeString, value)
	}
	if gruo.mutation.GroupIDCleared() {
		_spec.ClearField(grouprole.FieldGroupID, field.TypeString)
	}
	if value, ok := gruo.mutation.RoleID(); ok {
		_spec.SetField(grouprole.FieldRoleID, field.TypeString, value)
	}
	if gruo.mutation.RoleIDCleared() {
		_spec.ClearField(grouprole.FieldRoleID, field.TypeString)
	}
	if value, ok := gruo.mutation.CreatedBy(); ok {
		_spec.SetField(grouprole.FieldCreatedBy, field.TypeString, value)
	}
	if gruo.mutation.CreatedByCleared() {
		_spec.ClearField(grouprole.FieldCreatedBy, field.TypeString)
	}
	if value, ok := gruo.mutation.UpdatedBy(); ok {
		_spec.SetField(grouprole.FieldUpdatedBy, field.TypeString, value)
	}
	if gruo.mutation.UpdatedByCleared() {
		_spec.ClearField(grouprole.FieldUpdatedBy, field.TypeString)
	}
	if gruo.mutation.CreatedAtCleared() {
		_spec.ClearField(grouprole.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := gruo.mutation.UpdatedAt(); ok {
		_spec.SetField(grouprole.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := gruo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(grouprole.FieldUpdatedAt, field.TypeInt64, value)
	}
	if gruo.mutation.UpdatedAtCleared() {
		_spec.ClearField(grouprole.FieldUpdatedAt, field.TypeInt64)
	}
	_node = &GroupRole{config: gruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, gruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{grouprole.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	gruo.mutation.done = true
	return _node, nil
}
