// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/feature/resource/data/ent/asset"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AssetCreate is the builder for creating a Asset entity.
type AssetCreate struct {
	config
	mutation *AssetMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (ac *AssetCreate) SetName(s string) *AssetCreate {
	ac.mutation.SetName(s)
	return ac
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ac *AssetCreate) SetNillableName(s *string) *AssetCreate {
	if s != nil {
		ac.SetName(*s)
	}
	return ac
}

// SetPath sets the "path" field.
func (ac *AssetCreate) SetPath(s string) *AssetCreate {
	ac.mutation.SetPath(s)
	return ac
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (ac *AssetCreate) SetNillablePath(s *string) *AssetCreate {
	if s != nil {
		ac.SetPath(*s)
	}
	return ac
}

// SetType sets the "type" field.
func (ac *AssetCreate) SetType(s string) *AssetCreate {
	ac.mutation.SetType(s)
	return ac
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ac *AssetCreate) SetNillableType(s *string) *AssetCreate {
	if s != nil {
		ac.SetType(*s)
	}
	return ac
}

// SetSize sets the "size" field.
func (ac *AssetCreate) SetSize(i int) *AssetCreate {
	ac.mutation.SetSize(i)
	return ac
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (ac *AssetCreate) SetNillableSize(i *int) *AssetCreate {
	if i != nil {
		ac.SetSize(*i)
	}
	return ac
}

// SetStorage sets the "storage" field.
func (ac *AssetCreate) SetStorage(s string) *AssetCreate {
	ac.mutation.SetStorage(s)
	return ac
}

// SetNillableStorage sets the "storage" field if the given value is not nil.
func (ac *AssetCreate) SetNillableStorage(s *string) *AssetCreate {
	if s != nil {
		ac.SetStorage(*s)
	}
	return ac
}

// SetBucket sets the "bucket" field.
func (ac *AssetCreate) SetBucket(s string) *AssetCreate {
	ac.mutation.SetBucket(s)
	return ac
}

// SetNillableBucket sets the "bucket" field if the given value is not nil.
func (ac *AssetCreate) SetNillableBucket(s *string) *AssetCreate {
	if s != nil {
		ac.SetBucket(*s)
	}
	return ac
}

// SetEndpoint sets the "endpoint" field.
func (ac *AssetCreate) SetEndpoint(s string) *AssetCreate {
	ac.mutation.SetEndpoint(s)
	return ac
}

// SetNillableEndpoint sets the "endpoint" field if the given value is not nil.
func (ac *AssetCreate) SetNillableEndpoint(s *string) *AssetCreate {
	if s != nil {
		ac.SetEndpoint(*s)
	}
	return ac
}

// SetObjectID sets the "object_id" field.
func (ac *AssetCreate) SetObjectID(s string) *AssetCreate {
	ac.mutation.SetObjectID(s)
	return ac
}

// SetNillableObjectID sets the "object_id" field if the given value is not nil.
func (ac *AssetCreate) SetNillableObjectID(s *string) *AssetCreate {
	if s != nil {
		ac.SetObjectID(*s)
	}
	return ac
}

// SetTenantID sets the "tenant_id" field.
func (ac *AssetCreate) SetTenantID(s string) *AssetCreate {
	ac.mutation.SetTenantID(s)
	return ac
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (ac *AssetCreate) SetNillableTenantID(s *string) *AssetCreate {
	if s != nil {
		ac.SetTenantID(*s)
	}
	return ac
}

// SetExtras sets the "extras" field.
func (ac *AssetCreate) SetExtras(m map[string]interface{}) *AssetCreate {
	ac.mutation.SetExtras(m)
	return ac
}

// SetCreatedBy sets the "created_by" field.
func (ac *AssetCreate) SetCreatedBy(s string) *AssetCreate {
	ac.mutation.SetCreatedBy(s)
	return ac
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (ac *AssetCreate) SetNillableCreatedBy(s *string) *AssetCreate {
	if s != nil {
		ac.SetCreatedBy(*s)
	}
	return ac
}

// SetUpdatedBy sets the "updated_by" field.
func (ac *AssetCreate) SetUpdatedBy(s string) *AssetCreate {
	ac.mutation.SetUpdatedBy(s)
	return ac
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ac *AssetCreate) SetNillableUpdatedBy(s *string) *AssetCreate {
	if s != nil {
		ac.SetUpdatedBy(*s)
	}
	return ac
}

// SetCreatedAt sets the "created_at" field.
func (ac *AssetCreate) SetCreatedAt(t time.Time) *AssetCreate {
	ac.mutation.SetCreatedAt(t)
	return ac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ac *AssetCreate) SetNillableCreatedAt(t *time.Time) *AssetCreate {
	if t != nil {
		ac.SetCreatedAt(*t)
	}
	return ac
}

// SetUpdatedAt sets the "updated_at" field.
func (ac *AssetCreate) SetUpdatedAt(t time.Time) *AssetCreate {
	ac.mutation.SetUpdatedAt(t)
	return ac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ac *AssetCreate) SetNillableUpdatedAt(t *time.Time) *AssetCreate {
	if t != nil {
		ac.SetUpdatedAt(*t)
	}
	return ac
}

// SetID sets the "id" field.
func (ac *AssetCreate) SetID(s string) *AssetCreate {
	ac.mutation.SetID(s)
	return ac
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ac *AssetCreate) SetNillableID(s *string) *AssetCreate {
	if s != nil {
		ac.SetID(*s)
	}
	return ac
}

// Mutation returns the AssetMutation object of the builder.
func (ac *AssetCreate) Mutation() *AssetMutation {
	return ac.mutation
}

// Save creates the Asset in the database.
func (ac *AssetCreate) Save(ctx context.Context) (*Asset, error) {
	ac.defaults()
	return withHooks(ctx, ac.sqlSave, ac.mutation, ac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AssetCreate) SaveX(ctx context.Context) *Asset {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AssetCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AssetCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *AssetCreate) defaults() {
	if _, ok := ac.mutation.Size(); !ok {
		v := asset.DefaultSize
		ac.mutation.SetSize(v)
	}
	if _, ok := ac.mutation.Extras(); !ok {
		v := asset.DefaultExtras
		ac.mutation.SetExtras(v)
	}
	if _, ok := ac.mutation.CreatedAt(); !ok {
		v := asset.DefaultCreatedAt()
		ac.mutation.SetCreatedAt(v)
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		v := asset.DefaultUpdatedAt()
		ac.mutation.SetUpdatedAt(v)
	}
	if _, ok := ac.mutation.ID(); !ok {
		v := asset.DefaultID()
		ac.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *AssetCreate) check() error {
	if v, ok := ac.mutation.Name(); ok {
		if err := asset.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Asset.name": %w`, err)}
		}
	}
	if _, ok := ac.mutation.Size(); !ok {
		return &ValidationError{Name: "size", err: errors.New(`ent: missing required field "Asset.size"`)}
	}
	if v, ok := ac.mutation.ObjectID(); ok {
		if err := asset.ObjectIDValidator(v); err != nil {
			return &ValidationError{Name: "object_id", err: fmt.Errorf(`ent: validator failed for field "Asset.object_id": %w`, err)}
		}
	}
	if v, ok := ac.mutation.TenantID(); ok {
		if err := asset.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "Asset.tenant_id": %w`, err)}
		}
	}
	if v, ok := ac.mutation.CreatedBy(); ok {
		if err := asset.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "Asset.created_by": %w`, err)}
		}
	}
	if v, ok := ac.mutation.UpdatedBy(); ok {
		if err := asset.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "Asset.updated_by": %w`, err)}
		}
	}
	if v, ok := ac.mutation.ID(); ok {
		if err := asset.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Asset.id": %w`, err)}
		}
	}
	return nil
}

func (ac *AssetCreate) sqlSave(ctx context.Context) (*Asset, error) {
	if err := ac.check(); err != nil {
		return nil, err
	}
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Asset.ID type: %T", _spec.ID.Value)
		}
	}
	ac.mutation.id = &_node.ID
	ac.mutation.done = true
	return _node, nil
}

func (ac *AssetCreate) createSpec() (*Asset, *sqlgraph.CreateSpec) {
	var (
		_node = &Asset{config: ac.config}
		_spec = sqlgraph.NewCreateSpec(asset.Table, sqlgraph.NewFieldSpec(asset.FieldID, field.TypeString))
	)
	if id, ok := ac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ac.mutation.Name(); ok {
		_spec.SetField(asset.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ac.mutation.Path(); ok {
		_spec.SetField(asset.FieldPath, field.TypeString, value)
		_node.Path = value
	}
	if value, ok := ac.mutation.GetType(); ok {
		_spec.SetField(asset.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := ac.mutation.Size(); ok {
		_spec.SetField(asset.FieldSize, field.TypeInt, value)
		_node.Size = value
	}
	if value, ok := ac.mutation.Storage(); ok {
		_spec.SetField(asset.FieldStorage, field.TypeString, value)
		_node.Storage = value
	}
	if value, ok := ac.mutation.Bucket(); ok {
		_spec.SetField(asset.FieldBucket, field.TypeString, value)
		_node.Bucket = value
	}
	if value, ok := ac.mutation.Endpoint(); ok {
		_spec.SetField(asset.FieldEndpoint, field.TypeString, value)
		_node.Endpoint = value
	}
	if value, ok := ac.mutation.ObjectID(); ok {
		_spec.SetField(asset.FieldObjectID, field.TypeString, value)
		_node.ObjectID = value
	}
	if value, ok := ac.mutation.TenantID(); ok {
		_spec.SetField(asset.FieldTenantID, field.TypeString, value)
		_node.TenantID = value
	}
	if value, ok := ac.mutation.Extras(); ok {
		_spec.SetField(asset.FieldExtras, field.TypeJSON, value)
		_node.Extras = value
	}
	if value, ok := ac.mutation.CreatedBy(); ok {
		_spec.SetField(asset.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := ac.mutation.UpdatedBy(); ok {
		_spec.SetField(asset.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := ac.mutation.CreatedAt(); ok {
		_spec.SetField(asset.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ac.mutation.UpdatedAt(); ok {
		_spec.SetField(asset.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// AssetCreateBulk is the builder for creating many Asset entities in bulk.
type AssetCreateBulk struct {
	config
	err      error
	builders []*AssetCreate
}

// Save creates the Asset entities in the database.
func (acb *AssetCreateBulk) Save(ctx context.Context) ([]*Asset, error) {
	if acb.err != nil {
		return nil, acb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Asset, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AssetMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AssetCreateBulk) SaveX(ctx context.Context) []*Asset {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AssetCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AssetCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}
