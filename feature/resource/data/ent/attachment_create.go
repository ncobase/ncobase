// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/feature/resource/data/ent/attachment"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AttachmentCreate is the builder for creating a Attachment entity.
type AttachmentCreate struct {
	config
	mutation *AttachmentMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (ac *AttachmentCreate) SetName(s string) *AttachmentCreate {
	ac.mutation.SetName(s)
	return ac
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ac *AttachmentCreate) SetNillableName(s *string) *AttachmentCreate {
	if s != nil {
		ac.SetName(*s)
	}
	return ac
}

// SetPath sets the "path" field.
func (ac *AttachmentCreate) SetPath(s string) *AttachmentCreate {
	ac.mutation.SetPath(s)
	return ac
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (ac *AttachmentCreate) SetNillablePath(s *string) *AttachmentCreate {
	if s != nil {
		ac.SetPath(*s)
	}
	return ac
}

// SetType sets the "type" field.
func (ac *AttachmentCreate) SetType(s string) *AttachmentCreate {
	ac.mutation.SetType(s)
	return ac
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ac *AttachmentCreate) SetNillableType(s *string) *AttachmentCreate {
	if s != nil {
		ac.SetType(*s)
	}
	return ac
}

// SetSize sets the "size" field.
func (ac *AttachmentCreate) SetSize(i int) *AttachmentCreate {
	ac.mutation.SetSize(i)
	return ac
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (ac *AttachmentCreate) SetNillableSize(i *int) *AttachmentCreate {
	if i != nil {
		ac.SetSize(*i)
	}
	return ac
}

// SetStorage sets the "storage" field.
func (ac *AttachmentCreate) SetStorage(s string) *AttachmentCreate {
	ac.mutation.SetStorage(s)
	return ac
}

// SetNillableStorage sets the "storage" field if the given value is not nil.
func (ac *AttachmentCreate) SetNillableStorage(s *string) *AttachmentCreate {
	if s != nil {
		ac.SetStorage(*s)
	}
	return ac
}

// SetBucket sets the "bucket" field.
func (ac *AttachmentCreate) SetBucket(s string) *AttachmentCreate {
	ac.mutation.SetBucket(s)
	return ac
}

// SetNillableBucket sets the "bucket" field if the given value is not nil.
func (ac *AttachmentCreate) SetNillableBucket(s *string) *AttachmentCreate {
	if s != nil {
		ac.SetBucket(*s)
	}
	return ac
}

// SetEndpoint sets the "endpoint" field.
func (ac *AttachmentCreate) SetEndpoint(s string) *AttachmentCreate {
	ac.mutation.SetEndpoint(s)
	return ac
}

// SetNillableEndpoint sets the "endpoint" field if the given value is not nil.
func (ac *AttachmentCreate) SetNillableEndpoint(s *string) *AttachmentCreate {
	if s != nil {
		ac.SetEndpoint(*s)
	}
	return ac
}

// SetObjectID sets the "object_id" field.
func (ac *AttachmentCreate) SetObjectID(s string) *AttachmentCreate {
	ac.mutation.SetObjectID(s)
	return ac
}

// SetNillableObjectID sets the "object_id" field if the given value is not nil.
func (ac *AttachmentCreate) SetNillableObjectID(s *string) *AttachmentCreate {
	if s != nil {
		ac.SetObjectID(*s)
	}
	return ac
}

// SetTenantID sets the "tenant_id" field.
func (ac *AttachmentCreate) SetTenantID(s string) *AttachmentCreate {
	ac.mutation.SetTenantID(s)
	return ac
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (ac *AttachmentCreate) SetNillableTenantID(s *string) *AttachmentCreate {
	if s != nil {
		ac.SetTenantID(*s)
	}
	return ac
}

// SetExtras sets the "extras" field.
func (ac *AttachmentCreate) SetExtras(m map[string]interface{}) *AttachmentCreate {
	ac.mutation.SetExtras(m)
	return ac
}

// SetCreatedBy sets the "created_by" field.
func (ac *AttachmentCreate) SetCreatedBy(s string) *AttachmentCreate {
	ac.mutation.SetCreatedBy(s)
	return ac
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (ac *AttachmentCreate) SetNillableCreatedBy(s *string) *AttachmentCreate {
	if s != nil {
		ac.SetCreatedBy(*s)
	}
	return ac
}

// SetUpdatedBy sets the "updated_by" field.
func (ac *AttachmentCreate) SetUpdatedBy(s string) *AttachmentCreate {
	ac.mutation.SetUpdatedBy(s)
	return ac
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ac *AttachmentCreate) SetNillableUpdatedBy(s *string) *AttachmentCreate {
	if s != nil {
		ac.SetUpdatedBy(*s)
	}
	return ac
}

// SetCreatedAt sets the "created_at" field.
func (ac *AttachmentCreate) SetCreatedAt(i int64) *AttachmentCreate {
	ac.mutation.SetCreatedAt(i)
	return ac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ac *AttachmentCreate) SetNillableCreatedAt(i *int64) *AttachmentCreate {
	if i != nil {
		ac.SetCreatedAt(*i)
	}
	return ac
}

// SetUpdatedAt sets the "updated_at" field.
func (ac *AttachmentCreate) SetUpdatedAt(i int64) *AttachmentCreate {
	ac.mutation.SetUpdatedAt(i)
	return ac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ac *AttachmentCreate) SetNillableUpdatedAt(i *int64) *AttachmentCreate {
	if i != nil {
		ac.SetUpdatedAt(*i)
	}
	return ac
}

// SetID sets the "id" field.
func (ac *AttachmentCreate) SetID(s string) *AttachmentCreate {
	ac.mutation.SetID(s)
	return ac
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ac *AttachmentCreate) SetNillableID(s *string) *AttachmentCreate {
	if s != nil {
		ac.SetID(*s)
	}
	return ac
}

// Mutation returns the AttachmentMutation object of the builder.
func (ac *AttachmentCreate) Mutation() *AttachmentMutation {
	return ac.mutation
}

// Save creates the Attachment in the database.
func (ac *AttachmentCreate) Save(ctx context.Context) (*Attachment, error) {
	ac.defaults()
	return withHooks(ctx, ac.sqlSave, ac.mutation, ac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AttachmentCreate) SaveX(ctx context.Context) *Attachment {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AttachmentCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AttachmentCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *AttachmentCreate) defaults() {
	if _, ok := ac.mutation.Size(); !ok {
		v := attachment.DefaultSize
		ac.mutation.SetSize(v)
	}
	if _, ok := ac.mutation.Extras(); !ok {
		v := attachment.DefaultExtras
		ac.mutation.SetExtras(v)
	}
	if _, ok := ac.mutation.CreatedAt(); !ok {
		v := attachment.DefaultCreatedAt()
		ac.mutation.SetCreatedAt(v)
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		v := attachment.DefaultUpdatedAt()
		ac.mutation.SetUpdatedAt(v)
	}
	if _, ok := ac.mutation.ID(); !ok {
		v := attachment.DefaultID()
		ac.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *AttachmentCreate) check() error {
	if v, ok := ac.mutation.Name(); ok {
		if err := attachment.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Attachment.name": %w`, err)}
		}
	}
	if _, ok := ac.mutation.Size(); !ok {
		return &ValidationError{Name: "size", err: errors.New(`ent: missing required field "Attachment.size"`)}
	}
	if v, ok := ac.mutation.ObjectID(); ok {
		if err := attachment.ObjectIDValidator(v); err != nil {
			return &ValidationError{Name: "object_id", err: fmt.Errorf(`ent: validator failed for field "Attachment.object_id": %w`, err)}
		}
	}
	if v, ok := ac.mutation.TenantID(); ok {
		if err := attachment.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "Attachment.tenant_id": %w`, err)}
		}
	}
	if v, ok := ac.mutation.CreatedBy(); ok {
		if err := attachment.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "Attachment.created_by": %w`, err)}
		}
	}
	if v, ok := ac.mutation.UpdatedBy(); ok {
		if err := attachment.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "Attachment.updated_by": %w`, err)}
		}
	}
	if v, ok := ac.mutation.ID(); ok {
		if err := attachment.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Attachment.id": %w`, err)}
		}
	}
	return nil
}

func (ac *AttachmentCreate) sqlSave(ctx context.Context) (*Attachment, error) {
	if err := ac.check(); err != nil {
		return nil, err
	}
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Attachment.ID type: %T", _spec.ID.Value)
		}
	}
	ac.mutation.id = &_node.ID
	ac.mutation.done = true
	return _node, nil
}

func (ac *AttachmentCreate) createSpec() (*Attachment, *sqlgraph.CreateSpec) {
	var (
		_node = &Attachment{config: ac.config}
		_spec = sqlgraph.NewCreateSpec(attachment.Table, sqlgraph.NewFieldSpec(attachment.FieldID, field.TypeString))
	)
	if id, ok := ac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ac.mutation.Name(); ok {
		_spec.SetField(attachment.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ac.mutation.Path(); ok {
		_spec.SetField(attachment.FieldPath, field.TypeString, value)
		_node.Path = value
	}
	if value, ok := ac.mutation.GetType(); ok {
		_spec.SetField(attachment.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := ac.mutation.Size(); ok {
		_spec.SetField(attachment.FieldSize, field.TypeInt, value)
		_node.Size = value
	}
	if value, ok := ac.mutation.Storage(); ok {
		_spec.SetField(attachment.FieldStorage, field.TypeString, value)
		_node.Storage = value
	}
	if value, ok := ac.mutation.Bucket(); ok {
		_spec.SetField(attachment.FieldBucket, field.TypeString, value)
		_node.Bucket = value
	}
	if value, ok := ac.mutation.Endpoint(); ok {
		_spec.SetField(attachment.FieldEndpoint, field.TypeString, value)
		_node.Endpoint = value
	}
	if value, ok := ac.mutation.ObjectID(); ok {
		_spec.SetField(attachment.FieldObjectID, field.TypeString, value)
		_node.ObjectID = value
	}
	if value, ok := ac.mutation.TenantID(); ok {
		_spec.SetField(attachment.FieldTenantID, field.TypeString, value)
		_node.TenantID = value
	}
	if value, ok := ac.mutation.Extras(); ok {
		_spec.SetField(attachment.FieldExtras, field.TypeJSON, value)
		_node.Extras = value
	}
	if value, ok := ac.mutation.CreatedBy(); ok {
		_spec.SetField(attachment.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := ac.mutation.UpdatedBy(); ok {
		_spec.SetField(attachment.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := ac.mutation.CreatedAt(); ok {
		_spec.SetField(attachment.FieldCreatedAt, field.TypeInt64, value)
		_node.CreatedAt = value
	}
	if value, ok := ac.mutation.UpdatedAt(); ok {
		_spec.SetField(attachment.FieldUpdatedAt, field.TypeInt64, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// AttachmentCreateBulk is the builder for creating many Attachment entities in bulk.
type AttachmentCreateBulk struct {
	config
	err      error
	builders []*AttachmentCreate
}

// Save creates the Attachment entities in the database.
func (acb *AttachmentCreateBulk) Save(ctx context.Context) ([]*Attachment, error) {
	if acb.err != nil {
		return nil, acb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Attachment, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AttachmentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AttachmentCreateBulk) SaveX(ctx context.Context) []*Attachment {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AttachmentCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AttachmentCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}
