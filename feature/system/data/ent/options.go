// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"ncobase/feature/system/data/ent/options"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Options is the model entity for the Options schema.
type Options struct {
	config `json:"-"`
	// ID of the ent.
	// primary key
	ID string `json:"id,omitempty"`
	// name
	Name string `json:"name,omitempty"`
	// type
	Type string `json:"type,omitempty"`
	// value
	Value string `json:"value,omitempty"`
	// Whether to load the option automatically
	Autoload bool `json:"autoload,omitempty"`
	// tenant id
	TenantID string `json:"tenant_id,omitempty"`
	// id of the creator
	CreatedBy string `json:"created_by,omitempty"`
	// id of the last updater
	UpdatedBy string `json:"updated_by,omitempty"`
	// created at
	CreatedAt int64 `json:"created_at,omitempty"`
	// updated at
	UpdatedAt    int64 `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Options) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case options.FieldAutoload:
			values[i] = new(sql.NullBool)
		case options.FieldCreatedAt, options.FieldUpdatedAt:
			values[i] = new(sql.NullInt64)
		case options.FieldID, options.FieldName, options.FieldType, options.FieldValue, options.FieldTenantID, options.FieldCreatedBy, options.FieldUpdatedBy:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Options fields.
func (o *Options) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case options.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				o.ID = value.String
			}
		case options.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				o.Name = value.String
			}
		case options.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				o.Type = value.String
			}
		case options.FieldValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				o.Value = value.String
			}
		case options.FieldAutoload:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field autoload", values[i])
			} else if value.Valid {
				o.Autoload = value.Bool
			}
		case options.FieldTenantID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				o.TenantID = value.String
			}
		case options.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				o.CreatedBy = value.String
			}
		case options.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				o.UpdatedBy = value.String
			}
		case options.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				o.CreatedAt = value.Int64
			}
		case options.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				o.UpdatedAt = value.Int64
			}
		default:
			o.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// GetValue returns the ent.Value that was dynamically selected and assigned to the Options.
// This includes values selected through modifiers, order, etc.
func (o *Options) GetValue(name string) (ent.Value, error) {
	return o.selectValues.Get(name)
}

// Update returns a builder for updating this Options.
// Note that you need to call Options.Unwrap() before calling this method if this Options
// was returned from a transaction, and the transaction was committed or rolled back.
func (o *Options) Update() *OptionsUpdateOne {
	return NewOptionsClient(o.config).UpdateOne(o)
}

// Unwrap unwraps the Options entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (o *Options) Unwrap() *Options {
	_tx, ok := o.config.driver.(*txDriver)
	if !ok {
		panic("ent: Options is not a transactional entity")
	}
	o.config.driver = _tx.drv
	return o
}

// String implements the fmt.Stringer.
func (o *Options) String() string {
	var builder strings.Builder
	builder.WriteString("Options(")
	builder.WriteString(fmt.Sprintf("id=%v, ", o.ID))
	builder.WriteString("name=")
	builder.WriteString(o.Name)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(o.Type)
	builder.WriteString(", ")
	builder.WriteString("value=")
	builder.WriteString(o.Value)
	builder.WriteString(", ")
	builder.WriteString("autoload=")
	builder.WriteString(fmt.Sprintf("%v", o.Autoload))
	builder.WriteString(", ")
	builder.WriteString("tenant_id=")
	builder.WriteString(o.TenantID)
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(o.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(o.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", o.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", o.UpdatedAt))
	builder.WriteByte(')')
	return builder.String()
}

// OptionsSlice is a parsable slice of Options.
type OptionsSlice []*Options
