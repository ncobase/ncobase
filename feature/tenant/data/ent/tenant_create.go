// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/feature/tenant/data/ent/tenant"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TenantCreate is the builder for creating a Tenant entity.
type TenantCreate struct {
	config
	mutation *TenantMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (tc *TenantCreate) SetName(s string) *TenantCreate {
	tc.mutation.SetName(s)
	return tc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tc *TenantCreate) SetNillableName(s *string) *TenantCreate {
	if s != nil {
		tc.SetName(*s)
	}
	return tc
}

// SetSlug sets the "slug" field.
func (tc *TenantCreate) SetSlug(s string) *TenantCreate {
	tc.mutation.SetSlug(s)
	return tc
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (tc *TenantCreate) SetNillableSlug(s *string) *TenantCreate {
	if s != nil {
		tc.SetSlug(*s)
	}
	return tc
}

// SetType sets the "type" field.
func (tc *TenantCreate) SetType(s string) *TenantCreate {
	tc.mutation.SetType(s)
	return tc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (tc *TenantCreate) SetNillableType(s *string) *TenantCreate {
	if s != nil {
		tc.SetType(*s)
	}
	return tc
}

// SetTitle sets the "title" field.
func (tc *TenantCreate) SetTitle(s string) *TenantCreate {
	tc.mutation.SetTitle(s)
	return tc
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (tc *TenantCreate) SetNillableTitle(s *string) *TenantCreate {
	if s != nil {
		tc.SetTitle(*s)
	}
	return tc
}

// SetURL sets the "url" field.
func (tc *TenantCreate) SetURL(s string) *TenantCreate {
	tc.mutation.SetURL(s)
	return tc
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (tc *TenantCreate) SetNillableURL(s *string) *TenantCreate {
	if s != nil {
		tc.SetURL(*s)
	}
	return tc
}

// SetLogo sets the "logo" field.
func (tc *TenantCreate) SetLogo(s string) *TenantCreate {
	tc.mutation.SetLogo(s)
	return tc
}

// SetNillableLogo sets the "logo" field if the given value is not nil.
func (tc *TenantCreate) SetNillableLogo(s *string) *TenantCreate {
	if s != nil {
		tc.SetLogo(*s)
	}
	return tc
}

// SetLogoAlt sets the "logo_alt" field.
func (tc *TenantCreate) SetLogoAlt(s string) *TenantCreate {
	tc.mutation.SetLogoAlt(s)
	return tc
}

// SetNillableLogoAlt sets the "logo_alt" field if the given value is not nil.
func (tc *TenantCreate) SetNillableLogoAlt(s *string) *TenantCreate {
	if s != nil {
		tc.SetLogoAlt(*s)
	}
	return tc
}

// SetKeywords sets the "keywords" field.
func (tc *TenantCreate) SetKeywords(s string) *TenantCreate {
	tc.mutation.SetKeywords(s)
	return tc
}

// SetNillableKeywords sets the "keywords" field if the given value is not nil.
func (tc *TenantCreate) SetNillableKeywords(s *string) *TenantCreate {
	if s != nil {
		tc.SetKeywords(*s)
	}
	return tc
}

// SetCopyright sets the "copyright" field.
func (tc *TenantCreate) SetCopyright(s string) *TenantCreate {
	tc.mutation.SetCopyright(s)
	return tc
}

// SetNillableCopyright sets the "copyright" field if the given value is not nil.
func (tc *TenantCreate) SetNillableCopyright(s *string) *TenantCreate {
	if s != nil {
		tc.SetCopyright(*s)
	}
	return tc
}

// SetDescription sets the "description" field.
func (tc *TenantCreate) SetDescription(s string) *TenantCreate {
	tc.mutation.SetDescription(s)
	return tc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tc *TenantCreate) SetNillableDescription(s *string) *TenantCreate {
	if s != nil {
		tc.SetDescription(*s)
	}
	return tc
}

// SetOrder sets the "order" field.
func (tc *TenantCreate) SetOrder(i int) *TenantCreate {
	tc.mutation.SetOrder(i)
	return tc
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (tc *TenantCreate) SetNillableOrder(i *int) *TenantCreate {
	if i != nil {
		tc.SetOrder(*i)
	}
	return tc
}

// SetDisabled sets the "disabled" field.
func (tc *TenantCreate) SetDisabled(b bool) *TenantCreate {
	tc.mutation.SetDisabled(b)
	return tc
}

// SetNillableDisabled sets the "disabled" field if the given value is not nil.
func (tc *TenantCreate) SetNillableDisabled(b *bool) *TenantCreate {
	if b != nil {
		tc.SetDisabled(*b)
	}
	return tc
}

// SetExtras sets the "extras" field.
func (tc *TenantCreate) SetExtras(m map[string]interface{}) *TenantCreate {
	tc.mutation.SetExtras(m)
	return tc
}

// SetCreatedBy sets the "created_by" field.
func (tc *TenantCreate) SetCreatedBy(s string) *TenantCreate {
	tc.mutation.SetCreatedBy(s)
	return tc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (tc *TenantCreate) SetNillableCreatedBy(s *string) *TenantCreate {
	if s != nil {
		tc.SetCreatedBy(*s)
	}
	return tc
}

// SetUpdatedBy sets the "updated_by" field.
func (tc *TenantCreate) SetUpdatedBy(s string) *TenantCreate {
	tc.mutation.SetUpdatedBy(s)
	return tc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (tc *TenantCreate) SetNillableUpdatedBy(s *string) *TenantCreate {
	if s != nil {
		tc.SetUpdatedBy(*s)
	}
	return tc
}

// SetExpiredAt sets the "expired_at" field.
func (tc *TenantCreate) SetExpiredAt(i int64) *TenantCreate {
	tc.mutation.SetExpiredAt(i)
	return tc
}

// SetNillableExpiredAt sets the "expired_at" field if the given value is not nil.
func (tc *TenantCreate) SetNillableExpiredAt(i *int64) *TenantCreate {
	if i != nil {
		tc.SetExpiredAt(*i)
	}
	return tc
}

// SetCreatedAt sets the "created_at" field.
func (tc *TenantCreate) SetCreatedAt(i int64) *TenantCreate {
	tc.mutation.SetCreatedAt(i)
	return tc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tc *TenantCreate) SetNillableCreatedAt(i *int64) *TenantCreate {
	if i != nil {
		tc.SetCreatedAt(*i)
	}
	return tc
}

// SetUpdatedAt sets the "updated_at" field.
func (tc *TenantCreate) SetUpdatedAt(i int64) *TenantCreate {
	tc.mutation.SetUpdatedAt(i)
	return tc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tc *TenantCreate) SetNillableUpdatedAt(i *int64) *TenantCreate {
	if i != nil {
		tc.SetUpdatedAt(*i)
	}
	return tc
}

// SetID sets the "id" field.
func (tc *TenantCreate) SetID(s string) *TenantCreate {
	tc.mutation.SetID(s)
	return tc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (tc *TenantCreate) SetNillableID(s *string) *TenantCreate {
	if s != nil {
		tc.SetID(*s)
	}
	return tc
}

// Mutation returns the TenantMutation object of the builder.
func (tc *TenantCreate) Mutation() *TenantMutation {
	return tc.mutation
}

// Save creates the Tenant in the database.
func (tc *TenantCreate) Save(ctx context.Context) (*Tenant, error) {
	tc.defaults()
	return withHooks(ctx, tc.sqlSave, tc.mutation, tc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TenantCreate) SaveX(ctx context.Context) *Tenant {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TenantCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TenantCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *TenantCreate) defaults() {
	if _, ok := tc.mutation.Order(); !ok {
		v := tenant.DefaultOrder
		tc.mutation.SetOrder(v)
	}
	if _, ok := tc.mutation.Disabled(); !ok {
		v := tenant.DefaultDisabled
		tc.mutation.SetDisabled(v)
	}
	if _, ok := tc.mutation.Extras(); !ok {
		v := tenant.DefaultExtras
		tc.mutation.SetExtras(v)
	}
	if _, ok := tc.mutation.CreatedAt(); !ok {
		v := tenant.DefaultCreatedAt()
		tc.mutation.SetCreatedAt(v)
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		v := tenant.DefaultUpdatedAt()
		tc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tc.mutation.ID(); !ok {
		v := tenant.DefaultID()
		tc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TenantCreate) check() error {
	if _, ok := tc.mutation.Order(); !ok {
		return &ValidationError{Name: "order", err: errors.New(`ent: missing required field "Tenant.order"`)}
	}
	if v, ok := tc.mutation.CreatedBy(); ok {
		if err := tenant.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "Tenant.created_by": %w`, err)}
		}
	}
	if v, ok := tc.mutation.UpdatedBy(); ok {
		if err := tenant.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "Tenant.updated_by": %w`, err)}
		}
	}
	if v, ok := tc.mutation.ID(); ok {
		if err := tenant.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Tenant.id": %w`, err)}
		}
	}
	return nil
}

func (tc *TenantCreate) sqlSave(ctx context.Context) (*Tenant, error) {
	if err := tc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Tenant.ID type: %T", _spec.ID.Value)
		}
	}
	tc.mutation.id = &_node.ID
	tc.mutation.done = true
	return _node, nil
}

func (tc *TenantCreate) createSpec() (*Tenant, *sqlgraph.CreateSpec) {
	var (
		_node = &Tenant{config: tc.config}
		_spec = sqlgraph.NewCreateSpec(tenant.Table, sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString))
	)
	if id, ok := tc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tc.mutation.Name(); ok {
		_spec.SetField(tenant.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := tc.mutation.Slug(); ok {
		_spec.SetField(tenant.FieldSlug, field.TypeString, value)
		_node.Slug = value
	}
	if value, ok := tc.mutation.GetType(); ok {
		_spec.SetField(tenant.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := tc.mutation.Title(); ok {
		_spec.SetField(tenant.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := tc.mutation.URL(); ok {
		_spec.SetField(tenant.FieldURL, field.TypeString, value)
		_node.URL = value
	}
	if value, ok := tc.mutation.Logo(); ok {
		_spec.SetField(tenant.FieldLogo, field.TypeString, value)
		_node.Logo = value
	}
	if value, ok := tc.mutation.LogoAlt(); ok {
		_spec.SetField(tenant.FieldLogoAlt, field.TypeString, value)
		_node.LogoAlt = value
	}
	if value, ok := tc.mutation.Keywords(); ok {
		_spec.SetField(tenant.FieldKeywords, field.TypeString, value)
		_node.Keywords = value
	}
	if value, ok := tc.mutation.Copyright(); ok {
		_spec.SetField(tenant.FieldCopyright, field.TypeString, value)
		_node.Copyright = value
	}
	if value, ok := tc.mutation.Description(); ok {
		_spec.SetField(tenant.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := tc.mutation.Order(); ok {
		_spec.SetField(tenant.FieldOrder, field.TypeInt, value)
		_node.Order = value
	}
	if value, ok := tc.mutation.Disabled(); ok {
		_spec.SetField(tenant.FieldDisabled, field.TypeBool, value)
		_node.Disabled = value
	}
	if value, ok := tc.mutation.Extras(); ok {
		_spec.SetField(tenant.FieldExtras, field.TypeJSON, value)
		_node.Extras = value
	}
	if value, ok := tc.mutation.CreatedBy(); ok {
		_spec.SetField(tenant.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := tc.mutation.UpdatedBy(); ok {
		_spec.SetField(tenant.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := tc.mutation.ExpiredAt(); ok {
		_spec.SetField(tenant.FieldExpiredAt, field.TypeInt64, value)
		_node.ExpiredAt = value
	}
	if value, ok := tc.mutation.CreatedAt(); ok {
		_spec.SetField(tenant.FieldCreatedAt, field.TypeInt64, value)
		_node.CreatedAt = value
	}
	if value, ok := tc.mutation.UpdatedAt(); ok {
		_spec.SetField(tenant.FieldUpdatedAt, field.TypeInt64, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// TenantCreateBulk is the builder for creating many Tenant entities in bulk.
type TenantCreateBulk struct {
	config
	err      error
	builders []*TenantCreate
}

// Save creates the Tenant entities in the database.
func (tcb *TenantCreateBulk) Save(ctx context.Context) ([]*Tenant, error) {
	if tcb.err != nil {
		return nil, tcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Tenant, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TenantMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TenantCreateBulk) SaveX(ctx context.Context) []*Tenant {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TenantCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TenantCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}
