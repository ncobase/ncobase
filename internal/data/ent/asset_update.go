// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"stocms/internal/data/ent/asset"
	"stocms/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AssetUpdate is the builder for updating Asset entities.
type AssetUpdate struct {
	config
	hooks    []Hook
	mutation *AssetMutation
}

// Where appends a list predicates to the AssetUpdate builder.
func (au *AssetUpdate) Where(ps ...predicate.Asset) *AssetUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetName sets the "name" field.
func (au *AssetUpdate) SetName(s string) *AssetUpdate {
	au.mutation.SetName(s)
	return au
}

// SetNillableName sets the "name" field if the given value is not nil.
func (au *AssetUpdate) SetNillableName(s *string) *AssetUpdate {
	if s != nil {
		au.SetName(*s)
	}
	return au
}

// ClearName clears the value of the "name" field.
func (au *AssetUpdate) ClearName() *AssetUpdate {
	au.mutation.ClearName()
	return au
}

// SetPath sets the "path" field.
func (au *AssetUpdate) SetPath(s string) *AssetUpdate {
	au.mutation.SetPath(s)
	return au
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (au *AssetUpdate) SetNillablePath(s *string) *AssetUpdate {
	if s != nil {
		au.SetPath(*s)
	}
	return au
}

// ClearPath clears the value of the "path" field.
func (au *AssetUpdate) ClearPath() *AssetUpdate {
	au.mutation.ClearPath()
	return au
}

// SetType sets the "type" field.
func (au *AssetUpdate) SetType(s string) *AssetUpdate {
	au.mutation.SetType(s)
	return au
}

// SetNillableType sets the "type" field if the given value is not nil.
func (au *AssetUpdate) SetNillableType(s *string) *AssetUpdate {
	if s != nil {
		au.SetType(*s)
	}
	return au
}

// ClearType clears the value of the "type" field.
func (au *AssetUpdate) ClearType() *AssetUpdate {
	au.mutation.ClearType()
	return au
}

// SetSize sets the "size" field.
func (au *AssetUpdate) SetSize(i int64) *AssetUpdate {
	au.mutation.ResetSize()
	au.mutation.SetSize(i)
	return au
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (au *AssetUpdate) SetNillableSize(i *int64) *AssetUpdate {
	if i != nil {
		au.SetSize(*i)
	}
	return au
}

// AddSize adds i to the "size" field.
func (au *AssetUpdate) AddSize(i int64) *AssetUpdate {
	au.mutation.AddSize(i)
	return au
}

// SetStorage sets the "storage" field.
func (au *AssetUpdate) SetStorage(s string) *AssetUpdate {
	au.mutation.SetStorage(s)
	return au
}

// SetNillableStorage sets the "storage" field if the given value is not nil.
func (au *AssetUpdate) SetNillableStorage(s *string) *AssetUpdate {
	if s != nil {
		au.SetStorage(*s)
	}
	return au
}

// ClearStorage clears the value of the "storage" field.
func (au *AssetUpdate) ClearStorage() *AssetUpdate {
	au.mutation.ClearStorage()
	return au
}

// SetURL sets the "url" field.
func (au *AssetUpdate) SetURL(s string) *AssetUpdate {
	au.mutation.SetURL(s)
	return au
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (au *AssetUpdate) SetNillableURL(s *string) *AssetUpdate {
	if s != nil {
		au.SetURL(*s)
	}
	return au
}

// ClearURL clears the value of the "url" field.
func (au *AssetUpdate) ClearURL() *AssetUpdate {
	au.mutation.ClearURL()
	return au
}

// SetObjectID sets the "object_id" field.
func (au *AssetUpdate) SetObjectID(s string) *AssetUpdate {
	au.mutation.SetObjectID(s)
	return au
}

// SetNillableObjectID sets the "object_id" field if the given value is not nil.
func (au *AssetUpdate) SetNillableObjectID(s *string) *AssetUpdate {
	if s != nil {
		au.SetObjectID(*s)
	}
	return au
}

// ClearObjectID clears the value of the "object_id" field.
func (au *AssetUpdate) ClearObjectID() *AssetUpdate {
	au.mutation.ClearObjectID()
	return au
}

// SetDomainID sets the "domain_id" field.
func (au *AssetUpdate) SetDomainID(s string) *AssetUpdate {
	au.mutation.SetDomainID(s)
	return au
}

// SetNillableDomainID sets the "domain_id" field if the given value is not nil.
func (au *AssetUpdate) SetNillableDomainID(s *string) *AssetUpdate {
	if s != nil {
		au.SetDomainID(*s)
	}
	return au
}

// ClearDomainID clears the value of the "domain_id" field.
func (au *AssetUpdate) ClearDomainID() *AssetUpdate {
	au.mutation.ClearDomainID()
	return au
}

// SetExtras sets the "extras" field.
func (au *AssetUpdate) SetExtras(m map[string]interface{}) *AssetUpdate {
	au.mutation.SetExtras(m)
	return au
}

// ClearExtras clears the value of the "extras" field.
func (au *AssetUpdate) ClearExtras() *AssetUpdate {
	au.mutation.ClearExtras()
	return au
}

// SetCreatedBy sets the "created_by" field.
func (au *AssetUpdate) SetCreatedBy(s string) *AssetUpdate {
	au.mutation.SetCreatedBy(s)
	return au
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (au *AssetUpdate) SetNillableCreatedBy(s *string) *AssetUpdate {
	if s != nil {
		au.SetCreatedBy(*s)
	}
	return au
}

// ClearCreatedBy clears the value of the "created_by" field.
func (au *AssetUpdate) ClearCreatedBy() *AssetUpdate {
	au.mutation.ClearCreatedBy()
	return au
}

// SetUpdatedBy sets the "updated_by" field.
func (au *AssetUpdate) SetUpdatedBy(s string) *AssetUpdate {
	au.mutation.SetUpdatedBy(s)
	return au
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (au *AssetUpdate) SetNillableUpdatedBy(s *string) *AssetUpdate {
	if s != nil {
		au.SetUpdatedBy(*s)
	}
	return au
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (au *AssetUpdate) ClearUpdatedBy() *AssetUpdate {
	au.mutation.ClearUpdatedBy()
	return au
}

// SetUpdatedAt sets the "updated_at" field.
func (au *AssetUpdate) SetUpdatedAt(t time.Time) *AssetUpdate {
	au.mutation.SetUpdatedAt(t)
	return au
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (au *AssetUpdate) ClearUpdatedAt() *AssetUpdate {
	au.mutation.ClearUpdatedAt()
	return au
}

// Mutation returns the AssetMutation object of the builder.
func (au *AssetUpdate) Mutation() *AssetMutation {
	return au.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AssetUpdate) Save(ctx context.Context) (int, error) {
	au.defaults()
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AssetUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AssetUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AssetUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (au *AssetUpdate) defaults() {
	if _, ok := au.mutation.UpdatedAt(); !ok && !au.mutation.UpdatedAtCleared() {
		v := asset.UpdateDefaultUpdatedAt()
		au.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (au *AssetUpdate) check() error {
	if v, ok := au.mutation.Name(); ok {
		if err := asset.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Asset.name": %w`, err)}
		}
	}
	if v, ok := au.mutation.ObjectID(); ok {
		if err := asset.ObjectIDValidator(v); err != nil {
			return &ValidationError{Name: "object_id", err: fmt.Errorf(`ent: validator failed for field "Asset.object_id": %w`, err)}
		}
	}
	if v, ok := au.mutation.DomainID(); ok {
		if err := asset.DomainIDValidator(v); err != nil {
			return &ValidationError{Name: "domain_id", err: fmt.Errorf(`ent: validator failed for field "Asset.domain_id": %w`, err)}
		}
	}
	if v, ok := au.mutation.CreatedBy(); ok {
		if err := asset.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "Asset.created_by": %w`, err)}
		}
	}
	if v, ok := au.mutation.UpdatedBy(); ok {
		if err := asset.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "Asset.updated_by": %w`, err)}
		}
	}
	return nil
}

func (au *AssetUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := au.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(asset.Table, asset.Columns, sqlgraph.NewFieldSpec(asset.FieldID, field.TypeString))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.Name(); ok {
		_spec.SetField(asset.FieldName, field.TypeString, value)
	}
	if au.mutation.NameCleared() {
		_spec.ClearField(asset.FieldName, field.TypeString)
	}
	if value, ok := au.mutation.Path(); ok {
		_spec.SetField(asset.FieldPath, field.TypeString, value)
	}
	if au.mutation.PathCleared() {
		_spec.ClearField(asset.FieldPath, field.TypeString)
	}
	if value, ok := au.mutation.GetType(); ok {
		_spec.SetField(asset.FieldType, field.TypeString, value)
	}
	if au.mutation.TypeCleared() {
		_spec.ClearField(asset.FieldType, field.TypeString)
	}
	if value, ok := au.mutation.Size(); ok {
		_spec.SetField(asset.FieldSize, field.TypeInt64, value)
	}
	if value, ok := au.mutation.AddedSize(); ok {
		_spec.AddField(asset.FieldSize, field.TypeInt64, value)
	}
	if value, ok := au.mutation.Storage(); ok {
		_spec.SetField(asset.FieldStorage, field.TypeString, value)
	}
	if au.mutation.StorageCleared() {
		_spec.ClearField(asset.FieldStorage, field.TypeString)
	}
	if value, ok := au.mutation.URL(); ok {
		_spec.SetField(asset.FieldURL, field.TypeString, value)
	}
	if au.mutation.URLCleared() {
		_spec.ClearField(asset.FieldURL, field.TypeString)
	}
	if value, ok := au.mutation.ObjectID(); ok {
		_spec.SetField(asset.FieldObjectID, field.TypeString, value)
	}
	if au.mutation.ObjectIDCleared() {
		_spec.ClearField(asset.FieldObjectID, field.TypeString)
	}
	if value, ok := au.mutation.DomainID(); ok {
		_spec.SetField(asset.FieldDomainID, field.TypeString, value)
	}
	if au.mutation.DomainIDCleared() {
		_spec.ClearField(asset.FieldDomainID, field.TypeString)
	}
	if value, ok := au.mutation.Extras(); ok {
		_spec.SetField(asset.FieldExtras, field.TypeJSON, value)
	}
	if au.mutation.ExtrasCleared() {
		_spec.ClearField(asset.FieldExtras, field.TypeJSON)
	}
	if value, ok := au.mutation.CreatedBy(); ok {
		_spec.SetField(asset.FieldCreatedBy, field.TypeString, value)
	}
	if au.mutation.CreatedByCleared() {
		_spec.ClearField(asset.FieldCreatedBy, field.TypeString)
	}
	if value, ok := au.mutation.UpdatedBy(); ok {
		_spec.SetField(asset.FieldUpdatedBy, field.TypeString, value)
	}
	if au.mutation.UpdatedByCleared() {
		_spec.ClearField(asset.FieldUpdatedBy, field.TypeString)
	}
	if au.mutation.CreatedAtCleared() {
		_spec.ClearField(asset.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := au.mutation.UpdatedAt(); ok {
		_spec.SetField(asset.FieldUpdatedAt, field.TypeTime, value)
	}
	if au.mutation.UpdatedAtCleared() {
		_spec.ClearField(asset.FieldUpdatedAt, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{asset.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AssetUpdateOne is the builder for updating a single Asset entity.
type AssetUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AssetMutation
}

// SetName sets the "name" field.
func (auo *AssetUpdateOne) SetName(s string) *AssetUpdateOne {
	auo.mutation.SetName(s)
	return auo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (auo *AssetUpdateOne) SetNillableName(s *string) *AssetUpdateOne {
	if s != nil {
		auo.SetName(*s)
	}
	return auo
}

// ClearName clears the value of the "name" field.
func (auo *AssetUpdateOne) ClearName() *AssetUpdateOne {
	auo.mutation.ClearName()
	return auo
}

// SetPath sets the "path" field.
func (auo *AssetUpdateOne) SetPath(s string) *AssetUpdateOne {
	auo.mutation.SetPath(s)
	return auo
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (auo *AssetUpdateOne) SetNillablePath(s *string) *AssetUpdateOne {
	if s != nil {
		auo.SetPath(*s)
	}
	return auo
}

// ClearPath clears the value of the "path" field.
func (auo *AssetUpdateOne) ClearPath() *AssetUpdateOne {
	auo.mutation.ClearPath()
	return auo
}

// SetType sets the "type" field.
func (auo *AssetUpdateOne) SetType(s string) *AssetUpdateOne {
	auo.mutation.SetType(s)
	return auo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (auo *AssetUpdateOne) SetNillableType(s *string) *AssetUpdateOne {
	if s != nil {
		auo.SetType(*s)
	}
	return auo
}

// ClearType clears the value of the "type" field.
func (auo *AssetUpdateOne) ClearType() *AssetUpdateOne {
	auo.mutation.ClearType()
	return auo
}

// SetSize sets the "size" field.
func (auo *AssetUpdateOne) SetSize(i int64) *AssetUpdateOne {
	auo.mutation.ResetSize()
	auo.mutation.SetSize(i)
	return auo
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (auo *AssetUpdateOne) SetNillableSize(i *int64) *AssetUpdateOne {
	if i != nil {
		auo.SetSize(*i)
	}
	return auo
}

// AddSize adds i to the "size" field.
func (auo *AssetUpdateOne) AddSize(i int64) *AssetUpdateOne {
	auo.mutation.AddSize(i)
	return auo
}

// SetStorage sets the "storage" field.
func (auo *AssetUpdateOne) SetStorage(s string) *AssetUpdateOne {
	auo.mutation.SetStorage(s)
	return auo
}

// SetNillableStorage sets the "storage" field if the given value is not nil.
func (auo *AssetUpdateOne) SetNillableStorage(s *string) *AssetUpdateOne {
	if s != nil {
		auo.SetStorage(*s)
	}
	return auo
}

// ClearStorage clears the value of the "storage" field.
func (auo *AssetUpdateOne) ClearStorage() *AssetUpdateOne {
	auo.mutation.ClearStorage()
	return auo
}

// SetURL sets the "url" field.
func (auo *AssetUpdateOne) SetURL(s string) *AssetUpdateOne {
	auo.mutation.SetURL(s)
	return auo
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (auo *AssetUpdateOne) SetNillableURL(s *string) *AssetUpdateOne {
	if s != nil {
		auo.SetURL(*s)
	}
	return auo
}

// ClearURL clears the value of the "url" field.
func (auo *AssetUpdateOne) ClearURL() *AssetUpdateOne {
	auo.mutation.ClearURL()
	return auo
}

// SetObjectID sets the "object_id" field.
func (auo *AssetUpdateOne) SetObjectID(s string) *AssetUpdateOne {
	auo.mutation.SetObjectID(s)
	return auo
}

// SetNillableObjectID sets the "object_id" field if the given value is not nil.
func (auo *AssetUpdateOne) SetNillableObjectID(s *string) *AssetUpdateOne {
	if s != nil {
		auo.SetObjectID(*s)
	}
	return auo
}

// ClearObjectID clears the value of the "object_id" field.
func (auo *AssetUpdateOne) ClearObjectID() *AssetUpdateOne {
	auo.mutation.ClearObjectID()
	return auo
}

// SetDomainID sets the "domain_id" field.
func (auo *AssetUpdateOne) SetDomainID(s string) *AssetUpdateOne {
	auo.mutation.SetDomainID(s)
	return auo
}

// SetNillableDomainID sets the "domain_id" field if the given value is not nil.
func (auo *AssetUpdateOne) SetNillableDomainID(s *string) *AssetUpdateOne {
	if s != nil {
		auo.SetDomainID(*s)
	}
	return auo
}

// ClearDomainID clears the value of the "domain_id" field.
func (auo *AssetUpdateOne) ClearDomainID() *AssetUpdateOne {
	auo.mutation.ClearDomainID()
	return auo
}

// SetExtras sets the "extras" field.
func (auo *AssetUpdateOne) SetExtras(m map[string]interface{}) *AssetUpdateOne {
	auo.mutation.SetExtras(m)
	return auo
}

// ClearExtras clears the value of the "extras" field.
func (auo *AssetUpdateOne) ClearExtras() *AssetUpdateOne {
	auo.mutation.ClearExtras()
	return auo
}

// SetCreatedBy sets the "created_by" field.
func (auo *AssetUpdateOne) SetCreatedBy(s string) *AssetUpdateOne {
	auo.mutation.SetCreatedBy(s)
	return auo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (auo *AssetUpdateOne) SetNillableCreatedBy(s *string) *AssetUpdateOne {
	if s != nil {
		auo.SetCreatedBy(*s)
	}
	return auo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (auo *AssetUpdateOne) ClearCreatedBy() *AssetUpdateOne {
	auo.mutation.ClearCreatedBy()
	return auo
}

// SetUpdatedBy sets the "updated_by" field.
func (auo *AssetUpdateOne) SetUpdatedBy(s string) *AssetUpdateOne {
	auo.mutation.SetUpdatedBy(s)
	return auo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (auo *AssetUpdateOne) SetNillableUpdatedBy(s *string) *AssetUpdateOne {
	if s != nil {
		auo.SetUpdatedBy(*s)
	}
	return auo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (auo *AssetUpdateOne) ClearUpdatedBy() *AssetUpdateOne {
	auo.mutation.ClearUpdatedBy()
	return auo
}

// SetUpdatedAt sets the "updated_at" field.
func (auo *AssetUpdateOne) SetUpdatedAt(t time.Time) *AssetUpdateOne {
	auo.mutation.SetUpdatedAt(t)
	return auo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (auo *AssetUpdateOne) ClearUpdatedAt() *AssetUpdateOne {
	auo.mutation.ClearUpdatedAt()
	return auo
}

// Mutation returns the AssetMutation object of the builder.
func (auo *AssetUpdateOne) Mutation() *AssetMutation {
	return auo.mutation
}

// Where appends a list predicates to the AssetUpdate builder.
func (auo *AssetUpdateOne) Where(ps ...predicate.Asset) *AssetUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AssetUpdateOne) Select(field string, fields ...string) *AssetUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Asset entity.
func (auo *AssetUpdateOne) Save(ctx context.Context) (*Asset, error) {
	auo.defaults()
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AssetUpdateOne) SaveX(ctx context.Context) *Asset {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AssetUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AssetUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auo *AssetUpdateOne) defaults() {
	if _, ok := auo.mutation.UpdatedAt(); !ok && !auo.mutation.UpdatedAtCleared() {
		v := asset.UpdateDefaultUpdatedAt()
		auo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auo *AssetUpdateOne) check() error {
	if v, ok := auo.mutation.Name(); ok {
		if err := asset.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Asset.name": %w`, err)}
		}
	}
	if v, ok := auo.mutation.ObjectID(); ok {
		if err := asset.ObjectIDValidator(v); err != nil {
			return &ValidationError{Name: "object_id", err: fmt.Errorf(`ent: validator failed for field "Asset.object_id": %w`, err)}
		}
	}
	if v, ok := auo.mutation.DomainID(); ok {
		if err := asset.DomainIDValidator(v); err != nil {
			return &ValidationError{Name: "domain_id", err: fmt.Errorf(`ent: validator failed for field "Asset.domain_id": %w`, err)}
		}
	}
	if v, ok := auo.mutation.CreatedBy(); ok {
		if err := asset.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "Asset.created_by": %w`, err)}
		}
	}
	if v, ok := auo.mutation.UpdatedBy(); ok {
		if err := asset.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "Asset.updated_by": %w`, err)}
		}
	}
	return nil
}

func (auo *AssetUpdateOne) sqlSave(ctx context.Context) (_node *Asset, err error) {
	if err := auo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(asset.Table, asset.Columns, sqlgraph.NewFieldSpec(asset.FieldID, field.TypeString))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Asset.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, asset.FieldID)
		for _, f := range fields {
			if !asset.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != asset.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.Name(); ok {
		_spec.SetField(asset.FieldName, field.TypeString, value)
	}
	if auo.mutation.NameCleared() {
		_spec.ClearField(asset.FieldName, field.TypeString)
	}
	if value, ok := auo.mutation.Path(); ok {
		_spec.SetField(asset.FieldPath, field.TypeString, value)
	}
	if auo.mutation.PathCleared() {
		_spec.ClearField(asset.FieldPath, field.TypeString)
	}
	if value, ok := auo.mutation.GetType(); ok {
		_spec.SetField(asset.FieldType, field.TypeString, value)
	}
	if auo.mutation.TypeCleared() {
		_spec.ClearField(asset.FieldType, field.TypeString)
	}
	if value, ok := auo.mutation.Size(); ok {
		_spec.SetField(asset.FieldSize, field.TypeInt64, value)
	}
	if value, ok := auo.mutation.AddedSize(); ok {
		_spec.AddField(asset.FieldSize, field.TypeInt64, value)
	}
	if value, ok := auo.mutation.Storage(); ok {
		_spec.SetField(asset.FieldStorage, field.TypeString, value)
	}
	if auo.mutation.StorageCleared() {
		_spec.ClearField(asset.FieldStorage, field.TypeString)
	}
	if value, ok := auo.mutation.URL(); ok {
		_spec.SetField(asset.FieldURL, field.TypeString, value)
	}
	if auo.mutation.URLCleared() {
		_spec.ClearField(asset.FieldURL, field.TypeString)
	}
	if value, ok := auo.mutation.ObjectID(); ok {
		_spec.SetField(asset.FieldObjectID, field.TypeString, value)
	}
	if auo.mutation.ObjectIDCleared() {
		_spec.ClearField(asset.FieldObjectID, field.TypeString)
	}
	if value, ok := auo.mutation.DomainID(); ok {
		_spec.SetField(asset.FieldDomainID, field.TypeString, value)
	}
	if auo.mutation.DomainIDCleared() {
		_spec.ClearField(asset.FieldDomainID, field.TypeString)
	}
	if value, ok := auo.mutation.Extras(); ok {
		_spec.SetField(asset.FieldExtras, field.TypeJSON, value)
	}
	if auo.mutation.ExtrasCleared() {
		_spec.ClearField(asset.FieldExtras, field.TypeJSON)
	}
	if value, ok := auo.mutation.CreatedBy(); ok {
		_spec.SetField(asset.FieldCreatedBy, field.TypeString, value)
	}
	if auo.mutation.CreatedByCleared() {
		_spec.ClearField(asset.FieldCreatedBy, field.TypeString)
	}
	if value, ok := auo.mutation.UpdatedBy(); ok {
		_spec.SetField(asset.FieldUpdatedBy, field.TypeString, value)
	}
	if auo.mutation.UpdatedByCleared() {
		_spec.ClearField(asset.FieldUpdatedBy, field.TypeString)
	}
	if auo.mutation.CreatedAtCleared() {
		_spec.ClearField(asset.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := auo.mutation.UpdatedAt(); ok {
		_spec.SetField(asset.FieldUpdatedAt, field.TypeTime, value)
	}
	if auo.mutation.UpdatedAtCleared() {
		_spec.ClearField(asset.FieldUpdatedAt, field.TypeTime)
	}
	_node = &Asset{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{asset.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
