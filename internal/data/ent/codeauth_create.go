// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"ncobase/internal/data/ent/codeauth"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CodeAuthCreate is the builder for creating a CodeAuth entity.
type CodeAuthCreate struct {
	config
	mutation *CodeAuthMutation
	hooks    []Hook
}

// SetCode sets the "code" field.
func (cac *CodeAuthCreate) SetCode(s string) *CodeAuthCreate {
	cac.mutation.SetCode(s)
	return cac
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (cac *CodeAuthCreate) SetNillableCode(s *string) *CodeAuthCreate {
	if s != nil {
		cac.SetCode(*s)
	}
	return cac
}

// SetEmail sets the "email" field.
func (cac *CodeAuthCreate) SetEmail(s string) *CodeAuthCreate {
	cac.mutation.SetEmail(s)
	return cac
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (cac *CodeAuthCreate) SetNillableEmail(s *string) *CodeAuthCreate {
	if s != nil {
		cac.SetEmail(*s)
	}
	return cac
}

// SetLogged sets the "logged" field.
func (cac *CodeAuthCreate) SetLogged(b bool) *CodeAuthCreate {
	cac.mutation.SetLogged(b)
	return cac
}

// SetNillableLogged sets the "logged" field if the given value is not nil.
func (cac *CodeAuthCreate) SetNillableLogged(b *bool) *CodeAuthCreate {
	if b != nil {
		cac.SetLogged(*b)
	}
	return cac
}

// SetCreatedAt sets the "created_at" field.
func (cac *CodeAuthCreate) SetCreatedAt(t time.Time) *CodeAuthCreate {
	cac.mutation.SetCreatedAt(t)
	return cac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cac *CodeAuthCreate) SetNillableCreatedAt(t *time.Time) *CodeAuthCreate {
	if t != nil {
		cac.SetCreatedAt(*t)
	}
	return cac
}

// SetUpdatedAt sets the "updated_at" field.
func (cac *CodeAuthCreate) SetUpdatedAt(t time.Time) *CodeAuthCreate {
	cac.mutation.SetUpdatedAt(t)
	return cac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cac *CodeAuthCreate) SetNillableUpdatedAt(t *time.Time) *CodeAuthCreate {
	if t != nil {
		cac.SetUpdatedAt(*t)
	}
	return cac
}

// SetID sets the "id" field.
func (cac *CodeAuthCreate) SetID(s string) *CodeAuthCreate {
	cac.mutation.SetID(s)
	return cac
}

// SetNillableID sets the "id" field if the given value is not nil.
func (cac *CodeAuthCreate) SetNillableID(s *string) *CodeAuthCreate {
	if s != nil {
		cac.SetID(*s)
	}
	return cac
}

// Mutation returns the CodeAuthMutation object of the builder.
func (cac *CodeAuthCreate) Mutation() *CodeAuthMutation {
	return cac.mutation
}

// Save creates the CodeAuth in the database.
func (cac *CodeAuthCreate) Save(ctx context.Context) (*CodeAuth, error) {
	cac.defaults()
	return withHooks(ctx, cac.sqlSave, cac.mutation, cac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cac *CodeAuthCreate) SaveX(ctx context.Context) *CodeAuth {
	v, err := cac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cac *CodeAuthCreate) Exec(ctx context.Context) error {
	_, err := cac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cac *CodeAuthCreate) ExecX(ctx context.Context) {
	if err := cac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cac *CodeAuthCreate) defaults() {
	if _, ok := cac.mutation.Logged(); !ok {
		v := codeauth.DefaultLogged
		cac.mutation.SetLogged(v)
	}
	if _, ok := cac.mutation.CreatedAt(); !ok {
		v := codeauth.DefaultCreatedAt()
		cac.mutation.SetCreatedAt(v)
	}
	if _, ok := cac.mutation.UpdatedAt(); !ok {
		v := codeauth.DefaultUpdatedAt()
		cac.mutation.SetUpdatedAt(v)
	}
	if _, ok := cac.mutation.ID(); !ok {
		v := codeauth.DefaultID()
		cac.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cac *CodeAuthCreate) check() error {
	if v, ok := cac.mutation.ID(); ok {
		if err := codeauth.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "CodeAuth.id": %w`, err)}
		}
	}
	return nil
}

func (cac *CodeAuthCreate) sqlSave(ctx context.Context) (*CodeAuth, error) {
	if err := cac.check(); err != nil {
		return nil, err
	}
	_node, _spec := cac.createSpec()
	if err := sqlgraph.CreateNode(ctx, cac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected CodeAuth.ID type: %T", _spec.ID.Value)
		}
	}
	cac.mutation.id = &_node.ID
	cac.mutation.done = true
	return _node, nil
}

func (cac *CodeAuthCreate) createSpec() (*CodeAuth, *sqlgraph.CreateSpec) {
	var (
		_node = &CodeAuth{config: cac.config}
		_spec = sqlgraph.NewCreateSpec(codeauth.Table, sqlgraph.NewFieldSpec(codeauth.FieldID, field.TypeString))
	)
	if id, ok := cac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cac.mutation.Code(); ok {
		_spec.SetField(codeauth.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if value, ok := cac.mutation.Email(); ok {
		_spec.SetField(codeauth.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := cac.mutation.Logged(); ok {
		_spec.SetField(codeauth.FieldLogged, field.TypeBool, value)
		_node.Logged = value
	}
	if value, ok := cac.mutation.CreatedAt(); ok {
		_spec.SetField(codeauth.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cac.mutation.UpdatedAt(); ok {
		_spec.SetField(codeauth.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// CodeAuthCreateBulk is the builder for creating many CodeAuth entities in bulk.
type CodeAuthCreateBulk struct {
	config
	err      error
	builders []*CodeAuthCreate
}

// Save creates the CodeAuth entities in the database.
func (cacb *CodeAuthCreateBulk) Save(ctx context.Context) ([]*CodeAuth, error) {
	if cacb.err != nil {
		return nil, cacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cacb.builders))
	nodes := make([]*CodeAuth, len(cacb.builders))
	mutators := make([]Mutator, len(cacb.builders))
	for i := range cacb.builders {
		func(i int, root context.Context) {
			builder := cacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CodeAuthMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cacb *CodeAuthCreateBulk) SaveX(ctx context.Context) []*CodeAuth {
	v, err := cacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cacb *CodeAuthCreateBulk) Exec(ctx context.Context) error {
	_, err := cacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cacb *CodeAuthCreateBulk) ExecX(ctx context.Context) {
	if err := cacb.Exec(ctx); err != nil {
		panic(err)
	}
}
