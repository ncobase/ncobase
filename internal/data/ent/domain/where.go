// Code generated by ent, DO NOT EDIT.

package domain

import (
	"stocms/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Domain {
	return predicate.Domain(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Domain {
	return predicate.Domain(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Domain {
	return predicate.Domain(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Domain {
	return predicate.Domain(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Domain {
	return predicate.Domain(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Domain {
	return predicate.Domain(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Domain {
	return predicate.Domain(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Domain {
	return predicate.Domain(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Domain {
	return predicate.Domain(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Domain {
	return predicate.Domain(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Domain {
	return predicate.Domain(sql.FieldContainsFold(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Domain {
	return predicate.Domain(sql.FieldEQ(FieldName, v))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Domain {
	return predicate.Domain(sql.FieldEQ(FieldTitle, v))
}

// URL applies equality check predicate on the "url" field. It's identical to URLEQ.
func URL(v string) predicate.Domain {
	return predicate.Domain(sql.FieldEQ(FieldURL, v))
}

// Logo applies equality check predicate on the "logo" field. It's identical to LogoEQ.
func Logo(v string) predicate.Domain {
	return predicate.Domain(sql.FieldEQ(FieldLogo, v))
}

// LogoAlt applies equality check predicate on the "logo_alt" field. It's identical to LogoAltEQ.
func LogoAlt(v string) predicate.Domain {
	return predicate.Domain(sql.FieldEQ(FieldLogoAlt, v))
}

// Keywords applies equality check predicate on the "keywords" field. It's identical to KeywordsEQ.
func Keywords(v string) predicate.Domain {
	return predicate.Domain(sql.FieldEQ(FieldKeywords, v))
}

// Copyright applies equality check predicate on the "copyright" field. It's identical to CopyrightEQ.
func Copyright(v string) predicate.Domain {
	return predicate.Domain(sql.FieldEQ(FieldCopyright, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Domain {
	return predicate.Domain(sql.FieldEQ(FieldDescription, v))
}

// Order applies equality check predicate on the "order" field. It's identical to OrderEQ.
func Order(v int32) predicate.Domain {
	return predicate.Domain(sql.FieldEQ(FieldOrder, v))
}

// Disabled applies equality check predicate on the "disabled" field. It's identical to DisabledEQ.
func Disabled(v bool) predicate.Domain {
	return predicate.Domain(sql.FieldEQ(FieldDisabled, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Domain {
	return predicate.Domain(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Domain {
	return predicate.Domain(sql.FieldEQ(FieldUpdatedAt, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v string) predicate.Domain {
	return predicate.Domain(sql.FieldEQ(FieldUserID, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Domain {
	return predicate.Domain(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Domain {
	return predicate.Domain(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Domain {
	return predicate.Domain(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Domain {
	return predicate.Domain(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Domain {
	return predicate.Domain(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Domain {
	return predicate.Domain(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Domain {
	return predicate.Domain(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Domain {
	return predicate.Domain(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Domain {
	return predicate.Domain(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Domain {
	return predicate.Domain(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Domain {
	return predicate.Domain(sql.FieldHasSuffix(FieldName, v))
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.Domain {
	return predicate.Domain(sql.FieldIsNull(FieldName))
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.Domain {
	return predicate.Domain(sql.FieldNotNull(FieldName))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Domain {
	return predicate.Domain(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Domain {
	return predicate.Domain(sql.FieldContainsFold(FieldName, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Domain {
	return predicate.Domain(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Domain {
	return predicate.Domain(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Domain {
	return predicate.Domain(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Domain {
	return predicate.Domain(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Domain {
	return predicate.Domain(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Domain {
	return predicate.Domain(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Domain {
	return predicate.Domain(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Domain {
	return predicate.Domain(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Domain {
	return predicate.Domain(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Domain {
	return predicate.Domain(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Domain {
	return predicate.Domain(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleIsNil applies the IsNil predicate on the "title" field.
func TitleIsNil() predicate.Domain {
	return predicate.Domain(sql.FieldIsNull(FieldTitle))
}

// TitleNotNil applies the NotNil predicate on the "title" field.
func TitleNotNil() predicate.Domain {
	return predicate.Domain(sql.FieldNotNull(FieldTitle))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Domain {
	return predicate.Domain(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Domain {
	return predicate.Domain(sql.FieldContainsFold(FieldTitle, v))
}

// URLEQ applies the EQ predicate on the "url" field.
func URLEQ(v string) predicate.Domain {
	return predicate.Domain(sql.FieldEQ(FieldURL, v))
}

// URLNEQ applies the NEQ predicate on the "url" field.
func URLNEQ(v string) predicate.Domain {
	return predicate.Domain(sql.FieldNEQ(FieldURL, v))
}

// URLIn applies the In predicate on the "url" field.
func URLIn(vs ...string) predicate.Domain {
	return predicate.Domain(sql.FieldIn(FieldURL, vs...))
}

// URLNotIn applies the NotIn predicate on the "url" field.
func URLNotIn(vs ...string) predicate.Domain {
	return predicate.Domain(sql.FieldNotIn(FieldURL, vs...))
}

// URLGT applies the GT predicate on the "url" field.
func URLGT(v string) predicate.Domain {
	return predicate.Domain(sql.FieldGT(FieldURL, v))
}

// URLGTE applies the GTE predicate on the "url" field.
func URLGTE(v string) predicate.Domain {
	return predicate.Domain(sql.FieldGTE(FieldURL, v))
}

// URLLT applies the LT predicate on the "url" field.
func URLLT(v string) predicate.Domain {
	return predicate.Domain(sql.FieldLT(FieldURL, v))
}

// URLLTE applies the LTE predicate on the "url" field.
func URLLTE(v string) predicate.Domain {
	return predicate.Domain(sql.FieldLTE(FieldURL, v))
}

// URLContains applies the Contains predicate on the "url" field.
func URLContains(v string) predicate.Domain {
	return predicate.Domain(sql.FieldContains(FieldURL, v))
}

// URLHasPrefix applies the HasPrefix predicate on the "url" field.
func URLHasPrefix(v string) predicate.Domain {
	return predicate.Domain(sql.FieldHasPrefix(FieldURL, v))
}

// URLHasSuffix applies the HasSuffix predicate on the "url" field.
func URLHasSuffix(v string) predicate.Domain {
	return predicate.Domain(sql.FieldHasSuffix(FieldURL, v))
}

// URLIsNil applies the IsNil predicate on the "url" field.
func URLIsNil() predicate.Domain {
	return predicate.Domain(sql.FieldIsNull(FieldURL))
}

// URLNotNil applies the NotNil predicate on the "url" field.
func URLNotNil() predicate.Domain {
	return predicate.Domain(sql.FieldNotNull(FieldURL))
}

// URLEqualFold applies the EqualFold predicate on the "url" field.
func URLEqualFold(v string) predicate.Domain {
	return predicate.Domain(sql.FieldEqualFold(FieldURL, v))
}

// URLContainsFold applies the ContainsFold predicate on the "url" field.
func URLContainsFold(v string) predicate.Domain {
	return predicate.Domain(sql.FieldContainsFold(FieldURL, v))
}

// LogoEQ applies the EQ predicate on the "logo" field.
func LogoEQ(v string) predicate.Domain {
	return predicate.Domain(sql.FieldEQ(FieldLogo, v))
}

// LogoNEQ applies the NEQ predicate on the "logo" field.
func LogoNEQ(v string) predicate.Domain {
	return predicate.Domain(sql.FieldNEQ(FieldLogo, v))
}

// LogoIn applies the In predicate on the "logo" field.
func LogoIn(vs ...string) predicate.Domain {
	return predicate.Domain(sql.FieldIn(FieldLogo, vs...))
}

// LogoNotIn applies the NotIn predicate on the "logo" field.
func LogoNotIn(vs ...string) predicate.Domain {
	return predicate.Domain(sql.FieldNotIn(FieldLogo, vs...))
}

// LogoGT applies the GT predicate on the "logo" field.
func LogoGT(v string) predicate.Domain {
	return predicate.Domain(sql.FieldGT(FieldLogo, v))
}

// LogoGTE applies the GTE predicate on the "logo" field.
func LogoGTE(v string) predicate.Domain {
	return predicate.Domain(sql.FieldGTE(FieldLogo, v))
}

// LogoLT applies the LT predicate on the "logo" field.
func LogoLT(v string) predicate.Domain {
	return predicate.Domain(sql.FieldLT(FieldLogo, v))
}

// LogoLTE applies the LTE predicate on the "logo" field.
func LogoLTE(v string) predicate.Domain {
	return predicate.Domain(sql.FieldLTE(FieldLogo, v))
}

// LogoContains applies the Contains predicate on the "logo" field.
func LogoContains(v string) predicate.Domain {
	return predicate.Domain(sql.FieldContains(FieldLogo, v))
}

// LogoHasPrefix applies the HasPrefix predicate on the "logo" field.
func LogoHasPrefix(v string) predicate.Domain {
	return predicate.Domain(sql.FieldHasPrefix(FieldLogo, v))
}

// LogoHasSuffix applies the HasSuffix predicate on the "logo" field.
func LogoHasSuffix(v string) predicate.Domain {
	return predicate.Domain(sql.FieldHasSuffix(FieldLogo, v))
}

// LogoIsNil applies the IsNil predicate on the "logo" field.
func LogoIsNil() predicate.Domain {
	return predicate.Domain(sql.FieldIsNull(FieldLogo))
}

// LogoNotNil applies the NotNil predicate on the "logo" field.
func LogoNotNil() predicate.Domain {
	return predicate.Domain(sql.FieldNotNull(FieldLogo))
}

// LogoEqualFold applies the EqualFold predicate on the "logo" field.
func LogoEqualFold(v string) predicate.Domain {
	return predicate.Domain(sql.FieldEqualFold(FieldLogo, v))
}

// LogoContainsFold applies the ContainsFold predicate on the "logo" field.
func LogoContainsFold(v string) predicate.Domain {
	return predicate.Domain(sql.FieldContainsFold(FieldLogo, v))
}

// LogoAltEQ applies the EQ predicate on the "logo_alt" field.
func LogoAltEQ(v string) predicate.Domain {
	return predicate.Domain(sql.FieldEQ(FieldLogoAlt, v))
}

// LogoAltNEQ applies the NEQ predicate on the "logo_alt" field.
func LogoAltNEQ(v string) predicate.Domain {
	return predicate.Domain(sql.FieldNEQ(FieldLogoAlt, v))
}

// LogoAltIn applies the In predicate on the "logo_alt" field.
func LogoAltIn(vs ...string) predicate.Domain {
	return predicate.Domain(sql.FieldIn(FieldLogoAlt, vs...))
}

// LogoAltNotIn applies the NotIn predicate on the "logo_alt" field.
func LogoAltNotIn(vs ...string) predicate.Domain {
	return predicate.Domain(sql.FieldNotIn(FieldLogoAlt, vs...))
}

// LogoAltGT applies the GT predicate on the "logo_alt" field.
func LogoAltGT(v string) predicate.Domain {
	return predicate.Domain(sql.FieldGT(FieldLogoAlt, v))
}

// LogoAltGTE applies the GTE predicate on the "logo_alt" field.
func LogoAltGTE(v string) predicate.Domain {
	return predicate.Domain(sql.FieldGTE(FieldLogoAlt, v))
}

// LogoAltLT applies the LT predicate on the "logo_alt" field.
func LogoAltLT(v string) predicate.Domain {
	return predicate.Domain(sql.FieldLT(FieldLogoAlt, v))
}

// LogoAltLTE applies the LTE predicate on the "logo_alt" field.
func LogoAltLTE(v string) predicate.Domain {
	return predicate.Domain(sql.FieldLTE(FieldLogoAlt, v))
}

// LogoAltContains applies the Contains predicate on the "logo_alt" field.
func LogoAltContains(v string) predicate.Domain {
	return predicate.Domain(sql.FieldContains(FieldLogoAlt, v))
}

// LogoAltHasPrefix applies the HasPrefix predicate on the "logo_alt" field.
func LogoAltHasPrefix(v string) predicate.Domain {
	return predicate.Domain(sql.FieldHasPrefix(FieldLogoAlt, v))
}

// LogoAltHasSuffix applies the HasSuffix predicate on the "logo_alt" field.
func LogoAltHasSuffix(v string) predicate.Domain {
	return predicate.Domain(sql.FieldHasSuffix(FieldLogoAlt, v))
}

// LogoAltIsNil applies the IsNil predicate on the "logo_alt" field.
func LogoAltIsNil() predicate.Domain {
	return predicate.Domain(sql.FieldIsNull(FieldLogoAlt))
}

// LogoAltNotNil applies the NotNil predicate on the "logo_alt" field.
func LogoAltNotNil() predicate.Domain {
	return predicate.Domain(sql.FieldNotNull(FieldLogoAlt))
}

// LogoAltEqualFold applies the EqualFold predicate on the "logo_alt" field.
func LogoAltEqualFold(v string) predicate.Domain {
	return predicate.Domain(sql.FieldEqualFold(FieldLogoAlt, v))
}

// LogoAltContainsFold applies the ContainsFold predicate on the "logo_alt" field.
func LogoAltContainsFold(v string) predicate.Domain {
	return predicate.Domain(sql.FieldContainsFold(FieldLogoAlt, v))
}

// KeywordsEQ applies the EQ predicate on the "keywords" field.
func KeywordsEQ(v string) predicate.Domain {
	return predicate.Domain(sql.FieldEQ(FieldKeywords, v))
}

// KeywordsNEQ applies the NEQ predicate on the "keywords" field.
func KeywordsNEQ(v string) predicate.Domain {
	return predicate.Domain(sql.FieldNEQ(FieldKeywords, v))
}

// KeywordsIn applies the In predicate on the "keywords" field.
func KeywordsIn(vs ...string) predicate.Domain {
	return predicate.Domain(sql.FieldIn(FieldKeywords, vs...))
}

// KeywordsNotIn applies the NotIn predicate on the "keywords" field.
func KeywordsNotIn(vs ...string) predicate.Domain {
	return predicate.Domain(sql.FieldNotIn(FieldKeywords, vs...))
}

// KeywordsGT applies the GT predicate on the "keywords" field.
func KeywordsGT(v string) predicate.Domain {
	return predicate.Domain(sql.FieldGT(FieldKeywords, v))
}

// KeywordsGTE applies the GTE predicate on the "keywords" field.
func KeywordsGTE(v string) predicate.Domain {
	return predicate.Domain(sql.FieldGTE(FieldKeywords, v))
}

// KeywordsLT applies the LT predicate on the "keywords" field.
func KeywordsLT(v string) predicate.Domain {
	return predicate.Domain(sql.FieldLT(FieldKeywords, v))
}

// KeywordsLTE applies the LTE predicate on the "keywords" field.
func KeywordsLTE(v string) predicate.Domain {
	return predicate.Domain(sql.FieldLTE(FieldKeywords, v))
}

// KeywordsContains applies the Contains predicate on the "keywords" field.
func KeywordsContains(v string) predicate.Domain {
	return predicate.Domain(sql.FieldContains(FieldKeywords, v))
}

// KeywordsHasPrefix applies the HasPrefix predicate on the "keywords" field.
func KeywordsHasPrefix(v string) predicate.Domain {
	return predicate.Domain(sql.FieldHasPrefix(FieldKeywords, v))
}

// KeywordsHasSuffix applies the HasSuffix predicate on the "keywords" field.
func KeywordsHasSuffix(v string) predicate.Domain {
	return predicate.Domain(sql.FieldHasSuffix(FieldKeywords, v))
}

// KeywordsIsNil applies the IsNil predicate on the "keywords" field.
func KeywordsIsNil() predicate.Domain {
	return predicate.Domain(sql.FieldIsNull(FieldKeywords))
}

// KeywordsNotNil applies the NotNil predicate on the "keywords" field.
func KeywordsNotNil() predicate.Domain {
	return predicate.Domain(sql.FieldNotNull(FieldKeywords))
}

// KeywordsEqualFold applies the EqualFold predicate on the "keywords" field.
func KeywordsEqualFold(v string) predicate.Domain {
	return predicate.Domain(sql.FieldEqualFold(FieldKeywords, v))
}

// KeywordsContainsFold applies the ContainsFold predicate on the "keywords" field.
func KeywordsContainsFold(v string) predicate.Domain {
	return predicate.Domain(sql.FieldContainsFold(FieldKeywords, v))
}

// CopyrightEQ applies the EQ predicate on the "copyright" field.
func CopyrightEQ(v string) predicate.Domain {
	return predicate.Domain(sql.FieldEQ(FieldCopyright, v))
}

// CopyrightNEQ applies the NEQ predicate on the "copyright" field.
func CopyrightNEQ(v string) predicate.Domain {
	return predicate.Domain(sql.FieldNEQ(FieldCopyright, v))
}

// CopyrightIn applies the In predicate on the "copyright" field.
func CopyrightIn(vs ...string) predicate.Domain {
	return predicate.Domain(sql.FieldIn(FieldCopyright, vs...))
}

// CopyrightNotIn applies the NotIn predicate on the "copyright" field.
func CopyrightNotIn(vs ...string) predicate.Domain {
	return predicate.Domain(sql.FieldNotIn(FieldCopyright, vs...))
}

// CopyrightGT applies the GT predicate on the "copyright" field.
func CopyrightGT(v string) predicate.Domain {
	return predicate.Domain(sql.FieldGT(FieldCopyright, v))
}

// CopyrightGTE applies the GTE predicate on the "copyright" field.
func CopyrightGTE(v string) predicate.Domain {
	return predicate.Domain(sql.FieldGTE(FieldCopyright, v))
}

// CopyrightLT applies the LT predicate on the "copyright" field.
func CopyrightLT(v string) predicate.Domain {
	return predicate.Domain(sql.FieldLT(FieldCopyright, v))
}

// CopyrightLTE applies the LTE predicate on the "copyright" field.
func CopyrightLTE(v string) predicate.Domain {
	return predicate.Domain(sql.FieldLTE(FieldCopyright, v))
}

// CopyrightContains applies the Contains predicate on the "copyright" field.
func CopyrightContains(v string) predicate.Domain {
	return predicate.Domain(sql.FieldContains(FieldCopyright, v))
}

// CopyrightHasPrefix applies the HasPrefix predicate on the "copyright" field.
func CopyrightHasPrefix(v string) predicate.Domain {
	return predicate.Domain(sql.FieldHasPrefix(FieldCopyright, v))
}

// CopyrightHasSuffix applies the HasSuffix predicate on the "copyright" field.
func CopyrightHasSuffix(v string) predicate.Domain {
	return predicate.Domain(sql.FieldHasSuffix(FieldCopyright, v))
}

// CopyrightIsNil applies the IsNil predicate on the "copyright" field.
func CopyrightIsNil() predicate.Domain {
	return predicate.Domain(sql.FieldIsNull(FieldCopyright))
}

// CopyrightNotNil applies the NotNil predicate on the "copyright" field.
func CopyrightNotNil() predicate.Domain {
	return predicate.Domain(sql.FieldNotNull(FieldCopyright))
}

// CopyrightEqualFold applies the EqualFold predicate on the "copyright" field.
func CopyrightEqualFold(v string) predicate.Domain {
	return predicate.Domain(sql.FieldEqualFold(FieldCopyright, v))
}

// CopyrightContainsFold applies the ContainsFold predicate on the "copyright" field.
func CopyrightContainsFold(v string) predicate.Domain {
	return predicate.Domain(sql.FieldContainsFold(FieldCopyright, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Domain {
	return predicate.Domain(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Domain {
	return predicate.Domain(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Domain {
	return predicate.Domain(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Domain {
	return predicate.Domain(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Domain {
	return predicate.Domain(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Domain {
	return predicate.Domain(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Domain {
	return predicate.Domain(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Domain {
	return predicate.Domain(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Domain {
	return predicate.Domain(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Domain {
	return predicate.Domain(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Domain {
	return predicate.Domain(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Domain {
	return predicate.Domain(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Domain {
	return predicate.Domain(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Domain {
	return predicate.Domain(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Domain {
	return predicate.Domain(sql.FieldContainsFold(FieldDescription, v))
}

// OrderEQ applies the EQ predicate on the "order" field.
func OrderEQ(v int32) predicate.Domain {
	return predicate.Domain(sql.FieldEQ(FieldOrder, v))
}

// OrderNEQ applies the NEQ predicate on the "order" field.
func OrderNEQ(v int32) predicate.Domain {
	return predicate.Domain(sql.FieldNEQ(FieldOrder, v))
}

// OrderIn applies the In predicate on the "order" field.
func OrderIn(vs ...int32) predicate.Domain {
	return predicate.Domain(sql.FieldIn(FieldOrder, vs...))
}

// OrderNotIn applies the NotIn predicate on the "order" field.
func OrderNotIn(vs ...int32) predicate.Domain {
	return predicate.Domain(sql.FieldNotIn(FieldOrder, vs...))
}

// OrderGT applies the GT predicate on the "order" field.
func OrderGT(v int32) predicate.Domain {
	return predicate.Domain(sql.FieldGT(FieldOrder, v))
}

// OrderGTE applies the GTE predicate on the "order" field.
func OrderGTE(v int32) predicate.Domain {
	return predicate.Domain(sql.FieldGTE(FieldOrder, v))
}

// OrderLT applies the LT predicate on the "order" field.
func OrderLT(v int32) predicate.Domain {
	return predicate.Domain(sql.FieldLT(FieldOrder, v))
}

// OrderLTE applies the LTE predicate on the "order" field.
func OrderLTE(v int32) predicate.Domain {
	return predicate.Domain(sql.FieldLTE(FieldOrder, v))
}

// DisabledEQ applies the EQ predicate on the "disabled" field.
func DisabledEQ(v bool) predicate.Domain {
	return predicate.Domain(sql.FieldEQ(FieldDisabled, v))
}

// DisabledNEQ applies the NEQ predicate on the "disabled" field.
func DisabledNEQ(v bool) predicate.Domain {
	return predicate.Domain(sql.FieldNEQ(FieldDisabled, v))
}

// DisabledIsNil applies the IsNil predicate on the "disabled" field.
func DisabledIsNil() predicate.Domain {
	return predicate.Domain(sql.FieldIsNull(FieldDisabled))
}

// DisabledNotNil applies the NotNil predicate on the "disabled" field.
func DisabledNotNil() predicate.Domain {
	return predicate.Domain(sql.FieldNotNull(FieldDisabled))
}

// ExtrasIsNil applies the IsNil predicate on the "extras" field.
func ExtrasIsNil() predicate.Domain {
	return predicate.Domain(sql.FieldIsNull(FieldExtras))
}

// ExtrasNotNil applies the NotNil predicate on the "extras" field.
func ExtrasNotNil() predicate.Domain {
	return predicate.Domain(sql.FieldNotNull(FieldExtras))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Domain {
	return predicate.Domain(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Domain {
	return predicate.Domain(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Domain {
	return predicate.Domain(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Domain {
	return predicate.Domain(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Domain {
	return predicate.Domain(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Domain {
	return predicate.Domain(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Domain {
	return predicate.Domain(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Domain {
	return predicate.Domain(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.Domain {
	return predicate.Domain(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.Domain {
	return predicate.Domain(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Domain {
	return predicate.Domain(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Domain {
	return predicate.Domain(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Domain {
	return predicate.Domain(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Domain {
	return predicate.Domain(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Domain {
	return predicate.Domain(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Domain {
	return predicate.Domain(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Domain {
	return predicate.Domain(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Domain {
	return predicate.Domain(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.Domain {
	return predicate.Domain(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.Domain {
	return predicate.Domain(sql.FieldNotNull(FieldUpdatedAt))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v string) predicate.Domain {
	return predicate.Domain(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v string) predicate.Domain {
	return predicate.Domain(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...string) predicate.Domain {
	return predicate.Domain(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...string) predicate.Domain {
	return predicate.Domain(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v string) predicate.Domain {
	return predicate.Domain(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v string) predicate.Domain {
	return predicate.Domain(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v string) predicate.Domain {
	return predicate.Domain(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v string) predicate.Domain {
	return predicate.Domain(sql.FieldLTE(FieldUserID, v))
}

// UserIDContains applies the Contains predicate on the "user_id" field.
func UserIDContains(v string) predicate.Domain {
	return predicate.Domain(sql.FieldContains(FieldUserID, v))
}

// UserIDHasPrefix applies the HasPrefix predicate on the "user_id" field.
func UserIDHasPrefix(v string) predicate.Domain {
	return predicate.Domain(sql.FieldHasPrefix(FieldUserID, v))
}

// UserIDHasSuffix applies the HasSuffix predicate on the "user_id" field.
func UserIDHasSuffix(v string) predicate.Domain {
	return predicate.Domain(sql.FieldHasSuffix(FieldUserID, v))
}

// UserIDIsNil applies the IsNil predicate on the "user_id" field.
func UserIDIsNil() predicate.Domain {
	return predicate.Domain(sql.FieldIsNull(FieldUserID))
}

// UserIDNotNil applies the NotNil predicate on the "user_id" field.
func UserIDNotNil() predicate.Domain {
	return predicate.Domain(sql.FieldNotNull(FieldUserID))
}

// UserIDEqualFold applies the EqualFold predicate on the "user_id" field.
func UserIDEqualFold(v string) predicate.Domain {
	return predicate.Domain(sql.FieldEqualFold(FieldUserID, v))
}

// UserIDContainsFold applies the ContainsFold predicate on the "user_id" field.
func UserIDContainsFold(v string) predicate.Domain {
	return predicate.Domain(sql.FieldContainsFold(FieldUserID, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Domain) predicate.Domain {
	return predicate.Domain(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Domain) predicate.Domain {
	return predicate.Domain(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Domain) predicate.Domain {
	return predicate.Domain(sql.NotPredicates(p))
}
