// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/internal/data/ent/domain"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DomainCreate is the builder for creating a Domain entity.
type DomainCreate struct {
	config
	mutation *DomainMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (dc *DomainCreate) SetName(s string) *DomainCreate {
	dc.mutation.SetName(s)
	return dc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (dc *DomainCreate) SetNillableName(s *string) *DomainCreate {
	if s != nil {
		dc.SetName(*s)
	}
	return dc
}

// SetTitle sets the "title" field.
func (dc *DomainCreate) SetTitle(s string) *DomainCreate {
	dc.mutation.SetTitle(s)
	return dc
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (dc *DomainCreate) SetNillableTitle(s *string) *DomainCreate {
	if s != nil {
		dc.SetTitle(*s)
	}
	return dc
}

// SetURL sets the "url" field.
func (dc *DomainCreate) SetURL(s string) *DomainCreate {
	dc.mutation.SetURL(s)
	return dc
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (dc *DomainCreate) SetNillableURL(s *string) *DomainCreate {
	if s != nil {
		dc.SetURL(*s)
	}
	return dc
}

// SetLogo sets the "logo" field.
func (dc *DomainCreate) SetLogo(s string) *DomainCreate {
	dc.mutation.SetLogo(s)
	return dc
}

// SetNillableLogo sets the "logo" field if the given value is not nil.
func (dc *DomainCreate) SetNillableLogo(s *string) *DomainCreate {
	if s != nil {
		dc.SetLogo(*s)
	}
	return dc
}

// SetLogoAlt sets the "logo_alt" field.
func (dc *DomainCreate) SetLogoAlt(s string) *DomainCreate {
	dc.mutation.SetLogoAlt(s)
	return dc
}

// SetNillableLogoAlt sets the "logo_alt" field if the given value is not nil.
func (dc *DomainCreate) SetNillableLogoAlt(s *string) *DomainCreate {
	if s != nil {
		dc.SetLogoAlt(*s)
	}
	return dc
}

// SetKeywords sets the "keywords" field.
func (dc *DomainCreate) SetKeywords(s string) *DomainCreate {
	dc.mutation.SetKeywords(s)
	return dc
}

// SetNillableKeywords sets the "keywords" field if the given value is not nil.
func (dc *DomainCreate) SetNillableKeywords(s *string) *DomainCreate {
	if s != nil {
		dc.SetKeywords(*s)
	}
	return dc
}

// SetCopyright sets the "copyright" field.
func (dc *DomainCreate) SetCopyright(s string) *DomainCreate {
	dc.mutation.SetCopyright(s)
	return dc
}

// SetNillableCopyright sets the "copyright" field if the given value is not nil.
func (dc *DomainCreate) SetNillableCopyright(s *string) *DomainCreate {
	if s != nil {
		dc.SetCopyright(*s)
	}
	return dc
}

// SetDescription sets the "description" field.
func (dc *DomainCreate) SetDescription(s string) *DomainCreate {
	dc.mutation.SetDescription(s)
	return dc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (dc *DomainCreate) SetNillableDescription(s *string) *DomainCreate {
	if s != nil {
		dc.SetDescription(*s)
	}
	return dc
}

// SetOrder sets the "order" field.
func (dc *DomainCreate) SetOrder(i int) *DomainCreate {
	dc.mutation.SetOrder(i)
	return dc
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (dc *DomainCreate) SetNillableOrder(i *int) *DomainCreate {
	if i != nil {
		dc.SetOrder(*i)
	}
	return dc
}

// SetDisabled sets the "disabled" field.
func (dc *DomainCreate) SetDisabled(b bool) *DomainCreate {
	dc.mutation.SetDisabled(b)
	return dc
}

// SetNillableDisabled sets the "disabled" field if the given value is not nil.
func (dc *DomainCreate) SetNillableDisabled(b *bool) *DomainCreate {
	if b != nil {
		dc.SetDisabled(*b)
	}
	return dc
}

// SetExtras sets the "extras" field.
func (dc *DomainCreate) SetExtras(m map[string]interface{}) *DomainCreate {
	dc.mutation.SetExtras(m)
	return dc
}

// SetCreatedBy sets the "created_by" field.
func (dc *DomainCreate) SetCreatedBy(s string) *DomainCreate {
	dc.mutation.SetCreatedBy(s)
	return dc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (dc *DomainCreate) SetNillableCreatedBy(s *string) *DomainCreate {
	if s != nil {
		dc.SetCreatedBy(*s)
	}
	return dc
}

// SetCreatedAt sets the "created_at" field.
func (dc *DomainCreate) SetCreatedAt(t time.Time) *DomainCreate {
	dc.mutation.SetCreatedAt(t)
	return dc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dc *DomainCreate) SetNillableCreatedAt(t *time.Time) *DomainCreate {
	if t != nil {
		dc.SetCreatedAt(*t)
	}
	return dc
}

// SetUpdatedAt sets the "updated_at" field.
func (dc *DomainCreate) SetUpdatedAt(t time.Time) *DomainCreate {
	dc.mutation.SetUpdatedAt(t)
	return dc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (dc *DomainCreate) SetNillableUpdatedAt(t *time.Time) *DomainCreate {
	if t != nil {
		dc.SetUpdatedAt(*t)
	}
	return dc
}

// SetID sets the "id" field.
func (dc *DomainCreate) SetID(s string) *DomainCreate {
	dc.mutation.SetID(s)
	return dc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (dc *DomainCreate) SetNillableID(s *string) *DomainCreate {
	if s != nil {
		dc.SetID(*s)
	}
	return dc
}

// Mutation returns the DomainMutation object of the builder.
func (dc *DomainCreate) Mutation() *DomainMutation {
	return dc.mutation
}

// Save creates the Domain in the database.
func (dc *DomainCreate) Save(ctx context.Context) (*Domain, error) {
	dc.defaults()
	return withHooks(ctx, dc.sqlSave, dc.mutation, dc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dc *DomainCreate) SaveX(ctx context.Context) *Domain {
	v, err := dc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dc *DomainCreate) Exec(ctx context.Context) error {
	_, err := dc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dc *DomainCreate) ExecX(ctx context.Context) {
	if err := dc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dc *DomainCreate) defaults() {
	if _, ok := dc.mutation.Order(); !ok {
		v := domain.DefaultOrder
		dc.mutation.SetOrder(v)
	}
	if _, ok := dc.mutation.Disabled(); !ok {
		v := domain.DefaultDisabled
		dc.mutation.SetDisabled(v)
	}
	if _, ok := dc.mutation.Extras(); !ok {
		v := domain.DefaultExtras
		dc.mutation.SetExtras(v)
	}
	if _, ok := dc.mutation.CreatedAt(); !ok {
		v := domain.DefaultCreatedAt()
		dc.mutation.SetCreatedAt(v)
	}
	if _, ok := dc.mutation.UpdatedAt(); !ok {
		v := domain.DefaultUpdatedAt()
		dc.mutation.SetUpdatedAt(v)
	}
	if _, ok := dc.mutation.ID(); !ok {
		v := domain.DefaultID()
		dc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dc *DomainCreate) check() error {
	if _, ok := dc.mutation.Order(); !ok {
		return &ValidationError{Name: "order", err: errors.New(`ent: missing required field "Domain.order"`)}
	}
	if v, ok := dc.mutation.CreatedBy(); ok {
		if err := domain.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "Domain.created_by": %w`, err)}
		}
	}
	if v, ok := dc.mutation.ID(); ok {
		if err := domain.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Domain.id": %w`, err)}
		}
	}
	return nil
}

func (dc *DomainCreate) sqlSave(ctx context.Context) (*Domain, error) {
	if err := dc.check(); err != nil {
		return nil, err
	}
	_node, _spec := dc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Domain.ID type: %T", _spec.ID.Value)
		}
	}
	dc.mutation.id = &_node.ID
	dc.mutation.done = true
	return _node, nil
}

func (dc *DomainCreate) createSpec() (*Domain, *sqlgraph.CreateSpec) {
	var (
		_node = &Domain{config: dc.config}
		_spec = sqlgraph.NewCreateSpec(domain.Table, sqlgraph.NewFieldSpec(domain.FieldID, field.TypeString))
	)
	if id, ok := dc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := dc.mutation.Name(); ok {
		_spec.SetField(domain.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := dc.mutation.Title(); ok {
		_spec.SetField(domain.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := dc.mutation.URL(); ok {
		_spec.SetField(domain.FieldURL, field.TypeString, value)
		_node.URL = value
	}
	if value, ok := dc.mutation.Logo(); ok {
		_spec.SetField(domain.FieldLogo, field.TypeString, value)
		_node.Logo = value
	}
	if value, ok := dc.mutation.LogoAlt(); ok {
		_spec.SetField(domain.FieldLogoAlt, field.TypeString, value)
		_node.LogoAlt = value
	}
	if value, ok := dc.mutation.Keywords(); ok {
		_spec.SetField(domain.FieldKeywords, field.TypeString, value)
		_node.Keywords = value
	}
	if value, ok := dc.mutation.Copyright(); ok {
		_spec.SetField(domain.FieldCopyright, field.TypeString, value)
		_node.Copyright = value
	}
	if value, ok := dc.mutation.Description(); ok {
		_spec.SetField(domain.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := dc.mutation.Order(); ok {
		_spec.SetField(domain.FieldOrder, field.TypeInt, value)
		_node.Order = value
	}
	if value, ok := dc.mutation.Disabled(); ok {
		_spec.SetField(domain.FieldDisabled, field.TypeBool, value)
		_node.Disabled = value
	}
	if value, ok := dc.mutation.Extras(); ok {
		_spec.SetField(domain.FieldExtras, field.TypeJSON, value)
		_node.Extras = value
	}
	if value, ok := dc.mutation.CreatedBy(); ok {
		_spec.SetField(domain.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := dc.mutation.CreatedAt(); ok {
		_spec.SetField(domain.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := dc.mutation.UpdatedAt(); ok {
		_spec.SetField(domain.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// DomainCreateBulk is the builder for creating many Domain entities in bulk.
type DomainCreateBulk struct {
	config
	err      error
	builders []*DomainCreate
}

// Save creates the Domain entities in the database.
func (dcb *DomainCreateBulk) Save(ctx context.Context) ([]*Domain, error) {
	if dcb.err != nil {
		return nil, dcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(dcb.builders))
	nodes := make([]*Domain, len(dcb.builders))
	mutators := make([]Mutator, len(dcb.builders))
	for i := range dcb.builders {
		func(i int, root context.Context) {
			builder := dcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DomainMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dcb *DomainCreateBulk) SaveX(ctx context.Context) []*Domain {
	v, err := dcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dcb *DomainCreateBulk) Exec(ctx context.Context) error {
	_, err := dcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcb *DomainCreateBulk) ExecX(ctx context.Context) {
	if err := dcb.Exec(ctx); err != nil {
		panic(err)
	}
}
