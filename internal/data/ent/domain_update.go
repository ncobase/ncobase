// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"stocms/internal/data/ent/domain"
	"stocms/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DomainUpdate is the builder for updating Domain entities.
type DomainUpdate struct {
	config
	hooks    []Hook
	mutation *DomainMutation
}

// Where appends a list predicates to the DomainUpdate builder.
func (du *DomainUpdate) Where(ps ...predicate.Domain) *DomainUpdate {
	du.mutation.Where(ps...)
	return du
}

// SetName sets the "name" field.
func (du *DomainUpdate) SetName(s string) *DomainUpdate {
	du.mutation.SetName(s)
	return du
}

// SetNillableName sets the "name" field if the given value is not nil.
func (du *DomainUpdate) SetNillableName(s *string) *DomainUpdate {
	if s != nil {
		du.SetName(*s)
	}
	return du
}

// ClearName clears the value of the "name" field.
func (du *DomainUpdate) ClearName() *DomainUpdate {
	du.mutation.ClearName()
	return du
}

// SetTitle sets the "title" field.
func (du *DomainUpdate) SetTitle(s string) *DomainUpdate {
	du.mutation.SetTitle(s)
	return du
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (du *DomainUpdate) SetNillableTitle(s *string) *DomainUpdate {
	if s != nil {
		du.SetTitle(*s)
	}
	return du
}

// ClearTitle clears the value of the "title" field.
func (du *DomainUpdate) ClearTitle() *DomainUpdate {
	du.mutation.ClearTitle()
	return du
}

// SetURL sets the "url" field.
func (du *DomainUpdate) SetURL(s string) *DomainUpdate {
	du.mutation.SetURL(s)
	return du
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (du *DomainUpdate) SetNillableURL(s *string) *DomainUpdate {
	if s != nil {
		du.SetURL(*s)
	}
	return du
}

// ClearURL clears the value of the "url" field.
func (du *DomainUpdate) ClearURL() *DomainUpdate {
	du.mutation.ClearURL()
	return du
}

// SetLogo sets the "logo" field.
func (du *DomainUpdate) SetLogo(s string) *DomainUpdate {
	du.mutation.SetLogo(s)
	return du
}

// SetNillableLogo sets the "logo" field if the given value is not nil.
func (du *DomainUpdate) SetNillableLogo(s *string) *DomainUpdate {
	if s != nil {
		du.SetLogo(*s)
	}
	return du
}

// ClearLogo clears the value of the "logo" field.
func (du *DomainUpdate) ClearLogo() *DomainUpdate {
	du.mutation.ClearLogo()
	return du
}

// SetLogoAlt sets the "logo_alt" field.
func (du *DomainUpdate) SetLogoAlt(s string) *DomainUpdate {
	du.mutation.SetLogoAlt(s)
	return du
}

// SetNillableLogoAlt sets the "logo_alt" field if the given value is not nil.
func (du *DomainUpdate) SetNillableLogoAlt(s *string) *DomainUpdate {
	if s != nil {
		du.SetLogoAlt(*s)
	}
	return du
}

// ClearLogoAlt clears the value of the "logo_alt" field.
func (du *DomainUpdate) ClearLogoAlt() *DomainUpdate {
	du.mutation.ClearLogoAlt()
	return du
}

// SetKeywords sets the "keywords" field.
func (du *DomainUpdate) SetKeywords(s string) *DomainUpdate {
	du.mutation.SetKeywords(s)
	return du
}

// SetNillableKeywords sets the "keywords" field if the given value is not nil.
func (du *DomainUpdate) SetNillableKeywords(s *string) *DomainUpdate {
	if s != nil {
		du.SetKeywords(*s)
	}
	return du
}

// ClearKeywords clears the value of the "keywords" field.
func (du *DomainUpdate) ClearKeywords() *DomainUpdate {
	du.mutation.ClearKeywords()
	return du
}

// SetCopyright sets the "copyright" field.
func (du *DomainUpdate) SetCopyright(s string) *DomainUpdate {
	du.mutation.SetCopyright(s)
	return du
}

// SetNillableCopyright sets the "copyright" field if the given value is not nil.
func (du *DomainUpdate) SetNillableCopyright(s *string) *DomainUpdate {
	if s != nil {
		du.SetCopyright(*s)
	}
	return du
}

// ClearCopyright clears the value of the "copyright" field.
func (du *DomainUpdate) ClearCopyright() *DomainUpdate {
	du.mutation.ClearCopyright()
	return du
}

// SetDescription sets the "description" field.
func (du *DomainUpdate) SetDescription(s string) *DomainUpdate {
	du.mutation.SetDescription(s)
	return du
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (du *DomainUpdate) SetNillableDescription(s *string) *DomainUpdate {
	if s != nil {
		du.SetDescription(*s)
	}
	return du
}

// ClearDescription clears the value of the "description" field.
func (du *DomainUpdate) ClearDescription() *DomainUpdate {
	du.mutation.ClearDescription()
	return du
}

// SetOrder sets the "order" field.
func (du *DomainUpdate) SetOrder(i int) *DomainUpdate {
	du.mutation.ResetOrder()
	du.mutation.SetOrder(i)
	return du
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (du *DomainUpdate) SetNillableOrder(i *int) *DomainUpdate {
	if i != nil {
		du.SetOrder(*i)
	}
	return du
}

// AddOrder adds i to the "order" field.
func (du *DomainUpdate) AddOrder(i int) *DomainUpdate {
	du.mutation.AddOrder(i)
	return du
}

// SetDisabled sets the "disabled" field.
func (du *DomainUpdate) SetDisabled(b bool) *DomainUpdate {
	du.mutation.SetDisabled(b)
	return du
}

// SetNillableDisabled sets the "disabled" field if the given value is not nil.
func (du *DomainUpdate) SetNillableDisabled(b *bool) *DomainUpdate {
	if b != nil {
		du.SetDisabled(*b)
	}
	return du
}

// ClearDisabled clears the value of the "disabled" field.
func (du *DomainUpdate) ClearDisabled() *DomainUpdate {
	du.mutation.ClearDisabled()
	return du
}

// SetExtras sets the "extras" field.
func (du *DomainUpdate) SetExtras(m map[string]interface{}) *DomainUpdate {
	du.mutation.SetExtras(m)
	return du
}

// ClearExtras clears the value of the "extras" field.
func (du *DomainUpdate) ClearExtras() *DomainUpdate {
	du.mutation.ClearExtras()
	return du
}

// SetCreatedBy sets the "created_by" field.
func (du *DomainUpdate) SetCreatedBy(s string) *DomainUpdate {
	du.mutation.SetCreatedBy(s)
	return du
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (du *DomainUpdate) SetNillableCreatedBy(s *string) *DomainUpdate {
	if s != nil {
		du.SetCreatedBy(*s)
	}
	return du
}

// ClearCreatedBy clears the value of the "created_by" field.
func (du *DomainUpdate) ClearCreatedBy() *DomainUpdate {
	du.mutation.ClearCreatedBy()
	return du
}

// SetUpdatedAt sets the "updated_at" field.
func (du *DomainUpdate) SetUpdatedAt(t time.Time) *DomainUpdate {
	du.mutation.SetUpdatedAt(t)
	return du
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (du *DomainUpdate) ClearUpdatedAt() *DomainUpdate {
	du.mutation.ClearUpdatedAt()
	return du
}

// Mutation returns the DomainMutation object of the builder.
func (du *DomainUpdate) Mutation() *DomainMutation {
	return du.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DomainUpdate) Save(ctx context.Context) (int, error) {
	du.defaults()
	return withHooks(ctx, du.sqlSave, du.mutation, du.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (du *DomainUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DomainUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DomainUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (du *DomainUpdate) defaults() {
	if _, ok := du.mutation.UpdatedAt(); !ok && !du.mutation.UpdatedAtCleared() {
		v := domain.UpdateDefaultUpdatedAt()
		du.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (du *DomainUpdate) check() error {
	if v, ok := du.mutation.CreatedBy(); ok {
		if err := domain.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "Domain.created_by": %w`, err)}
		}
	}
	return nil
}

func (du *DomainUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := du.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(domain.Table, domain.Columns, sqlgraph.NewFieldSpec(domain.FieldID, field.TypeString))
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.Name(); ok {
		_spec.SetField(domain.FieldName, field.TypeString, value)
	}
	if du.mutation.NameCleared() {
		_spec.ClearField(domain.FieldName, field.TypeString)
	}
	if value, ok := du.mutation.Title(); ok {
		_spec.SetField(domain.FieldTitle, field.TypeString, value)
	}
	if du.mutation.TitleCleared() {
		_spec.ClearField(domain.FieldTitle, field.TypeString)
	}
	if value, ok := du.mutation.URL(); ok {
		_spec.SetField(domain.FieldURL, field.TypeString, value)
	}
	if du.mutation.URLCleared() {
		_spec.ClearField(domain.FieldURL, field.TypeString)
	}
	if value, ok := du.mutation.Logo(); ok {
		_spec.SetField(domain.FieldLogo, field.TypeString, value)
	}
	if du.mutation.LogoCleared() {
		_spec.ClearField(domain.FieldLogo, field.TypeString)
	}
	if value, ok := du.mutation.LogoAlt(); ok {
		_spec.SetField(domain.FieldLogoAlt, field.TypeString, value)
	}
	if du.mutation.LogoAltCleared() {
		_spec.ClearField(domain.FieldLogoAlt, field.TypeString)
	}
	if value, ok := du.mutation.Keywords(); ok {
		_spec.SetField(domain.FieldKeywords, field.TypeString, value)
	}
	if du.mutation.KeywordsCleared() {
		_spec.ClearField(domain.FieldKeywords, field.TypeString)
	}
	if value, ok := du.mutation.Copyright(); ok {
		_spec.SetField(domain.FieldCopyright, field.TypeString, value)
	}
	if du.mutation.CopyrightCleared() {
		_spec.ClearField(domain.FieldCopyright, field.TypeString)
	}
	if value, ok := du.mutation.Description(); ok {
		_spec.SetField(domain.FieldDescription, field.TypeString, value)
	}
	if du.mutation.DescriptionCleared() {
		_spec.ClearField(domain.FieldDescription, field.TypeString)
	}
	if value, ok := du.mutation.Order(); ok {
		_spec.SetField(domain.FieldOrder, field.TypeInt, value)
	}
	if value, ok := du.mutation.AddedOrder(); ok {
		_spec.AddField(domain.FieldOrder, field.TypeInt, value)
	}
	if value, ok := du.mutation.Disabled(); ok {
		_spec.SetField(domain.FieldDisabled, field.TypeBool, value)
	}
	if du.mutation.DisabledCleared() {
		_spec.ClearField(domain.FieldDisabled, field.TypeBool)
	}
	if value, ok := du.mutation.Extras(); ok {
		_spec.SetField(domain.FieldExtras, field.TypeJSON, value)
	}
	if du.mutation.ExtrasCleared() {
		_spec.ClearField(domain.FieldExtras, field.TypeJSON)
	}
	if value, ok := du.mutation.CreatedBy(); ok {
		_spec.SetField(domain.FieldCreatedBy, field.TypeString, value)
	}
	if du.mutation.CreatedByCleared() {
		_spec.ClearField(domain.FieldCreatedBy, field.TypeString)
	}
	if du.mutation.CreatedAtCleared() {
		_spec.ClearField(domain.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := du.mutation.UpdatedAt(); ok {
		_spec.SetField(domain.FieldUpdatedAt, field.TypeTime, value)
	}
	if du.mutation.UpdatedAtCleared() {
		_spec.ClearField(domain.FieldUpdatedAt, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{domain.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	du.mutation.done = true
	return n, nil
}

// DomainUpdateOne is the builder for updating a single Domain entity.
type DomainUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DomainMutation
}

// SetName sets the "name" field.
func (duo *DomainUpdateOne) SetName(s string) *DomainUpdateOne {
	duo.mutation.SetName(s)
	return duo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (duo *DomainUpdateOne) SetNillableName(s *string) *DomainUpdateOne {
	if s != nil {
		duo.SetName(*s)
	}
	return duo
}

// ClearName clears the value of the "name" field.
func (duo *DomainUpdateOne) ClearName() *DomainUpdateOne {
	duo.mutation.ClearName()
	return duo
}

// SetTitle sets the "title" field.
func (duo *DomainUpdateOne) SetTitle(s string) *DomainUpdateOne {
	duo.mutation.SetTitle(s)
	return duo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (duo *DomainUpdateOne) SetNillableTitle(s *string) *DomainUpdateOne {
	if s != nil {
		duo.SetTitle(*s)
	}
	return duo
}

// ClearTitle clears the value of the "title" field.
func (duo *DomainUpdateOne) ClearTitle() *DomainUpdateOne {
	duo.mutation.ClearTitle()
	return duo
}

// SetURL sets the "url" field.
func (duo *DomainUpdateOne) SetURL(s string) *DomainUpdateOne {
	duo.mutation.SetURL(s)
	return duo
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (duo *DomainUpdateOne) SetNillableURL(s *string) *DomainUpdateOne {
	if s != nil {
		duo.SetURL(*s)
	}
	return duo
}

// ClearURL clears the value of the "url" field.
func (duo *DomainUpdateOne) ClearURL() *DomainUpdateOne {
	duo.mutation.ClearURL()
	return duo
}

// SetLogo sets the "logo" field.
func (duo *DomainUpdateOne) SetLogo(s string) *DomainUpdateOne {
	duo.mutation.SetLogo(s)
	return duo
}

// SetNillableLogo sets the "logo" field if the given value is not nil.
func (duo *DomainUpdateOne) SetNillableLogo(s *string) *DomainUpdateOne {
	if s != nil {
		duo.SetLogo(*s)
	}
	return duo
}

// ClearLogo clears the value of the "logo" field.
func (duo *DomainUpdateOne) ClearLogo() *DomainUpdateOne {
	duo.mutation.ClearLogo()
	return duo
}

// SetLogoAlt sets the "logo_alt" field.
func (duo *DomainUpdateOne) SetLogoAlt(s string) *DomainUpdateOne {
	duo.mutation.SetLogoAlt(s)
	return duo
}

// SetNillableLogoAlt sets the "logo_alt" field if the given value is not nil.
func (duo *DomainUpdateOne) SetNillableLogoAlt(s *string) *DomainUpdateOne {
	if s != nil {
		duo.SetLogoAlt(*s)
	}
	return duo
}

// ClearLogoAlt clears the value of the "logo_alt" field.
func (duo *DomainUpdateOne) ClearLogoAlt() *DomainUpdateOne {
	duo.mutation.ClearLogoAlt()
	return duo
}

// SetKeywords sets the "keywords" field.
func (duo *DomainUpdateOne) SetKeywords(s string) *DomainUpdateOne {
	duo.mutation.SetKeywords(s)
	return duo
}

// SetNillableKeywords sets the "keywords" field if the given value is not nil.
func (duo *DomainUpdateOne) SetNillableKeywords(s *string) *DomainUpdateOne {
	if s != nil {
		duo.SetKeywords(*s)
	}
	return duo
}

// ClearKeywords clears the value of the "keywords" field.
func (duo *DomainUpdateOne) ClearKeywords() *DomainUpdateOne {
	duo.mutation.ClearKeywords()
	return duo
}

// SetCopyright sets the "copyright" field.
func (duo *DomainUpdateOne) SetCopyright(s string) *DomainUpdateOne {
	duo.mutation.SetCopyright(s)
	return duo
}

// SetNillableCopyright sets the "copyright" field if the given value is not nil.
func (duo *DomainUpdateOne) SetNillableCopyright(s *string) *DomainUpdateOne {
	if s != nil {
		duo.SetCopyright(*s)
	}
	return duo
}

// ClearCopyright clears the value of the "copyright" field.
func (duo *DomainUpdateOne) ClearCopyright() *DomainUpdateOne {
	duo.mutation.ClearCopyright()
	return duo
}

// SetDescription sets the "description" field.
func (duo *DomainUpdateOne) SetDescription(s string) *DomainUpdateOne {
	duo.mutation.SetDescription(s)
	return duo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (duo *DomainUpdateOne) SetNillableDescription(s *string) *DomainUpdateOne {
	if s != nil {
		duo.SetDescription(*s)
	}
	return duo
}

// ClearDescription clears the value of the "description" field.
func (duo *DomainUpdateOne) ClearDescription() *DomainUpdateOne {
	duo.mutation.ClearDescription()
	return duo
}

// SetOrder sets the "order" field.
func (duo *DomainUpdateOne) SetOrder(i int) *DomainUpdateOne {
	duo.mutation.ResetOrder()
	duo.mutation.SetOrder(i)
	return duo
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (duo *DomainUpdateOne) SetNillableOrder(i *int) *DomainUpdateOne {
	if i != nil {
		duo.SetOrder(*i)
	}
	return duo
}

// AddOrder adds i to the "order" field.
func (duo *DomainUpdateOne) AddOrder(i int) *DomainUpdateOne {
	duo.mutation.AddOrder(i)
	return duo
}

// SetDisabled sets the "disabled" field.
func (duo *DomainUpdateOne) SetDisabled(b bool) *DomainUpdateOne {
	duo.mutation.SetDisabled(b)
	return duo
}

// SetNillableDisabled sets the "disabled" field if the given value is not nil.
func (duo *DomainUpdateOne) SetNillableDisabled(b *bool) *DomainUpdateOne {
	if b != nil {
		duo.SetDisabled(*b)
	}
	return duo
}

// ClearDisabled clears the value of the "disabled" field.
func (duo *DomainUpdateOne) ClearDisabled() *DomainUpdateOne {
	duo.mutation.ClearDisabled()
	return duo
}

// SetExtras sets the "extras" field.
func (duo *DomainUpdateOne) SetExtras(m map[string]interface{}) *DomainUpdateOne {
	duo.mutation.SetExtras(m)
	return duo
}

// ClearExtras clears the value of the "extras" field.
func (duo *DomainUpdateOne) ClearExtras() *DomainUpdateOne {
	duo.mutation.ClearExtras()
	return duo
}

// SetCreatedBy sets the "created_by" field.
func (duo *DomainUpdateOne) SetCreatedBy(s string) *DomainUpdateOne {
	duo.mutation.SetCreatedBy(s)
	return duo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (duo *DomainUpdateOne) SetNillableCreatedBy(s *string) *DomainUpdateOne {
	if s != nil {
		duo.SetCreatedBy(*s)
	}
	return duo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (duo *DomainUpdateOne) ClearCreatedBy() *DomainUpdateOne {
	duo.mutation.ClearCreatedBy()
	return duo
}

// SetUpdatedAt sets the "updated_at" field.
func (duo *DomainUpdateOne) SetUpdatedAt(t time.Time) *DomainUpdateOne {
	duo.mutation.SetUpdatedAt(t)
	return duo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (duo *DomainUpdateOne) ClearUpdatedAt() *DomainUpdateOne {
	duo.mutation.ClearUpdatedAt()
	return duo
}

// Mutation returns the DomainMutation object of the builder.
func (duo *DomainUpdateOne) Mutation() *DomainMutation {
	return duo.mutation
}

// Where appends a list predicates to the DomainUpdate builder.
func (duo *DomainUpdateOne) Where(ps ...predicate.Domain) *DomainUpdateOne {
	duo.mutation.Where(ps...)
	return duo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (duo *DomainUpdateOne) Select(field string, fields ...string) *DomainUpdateOne {
	duo.fields = append([]string{field}, fields...)
	return duo
}

// Save executes the query and returns the updated Domain entity.
func (duo *DomainUpdateOne) Save(ctx context.Context) (*Domain, error) {
	duo.defaults()
	return withHooks(ctx, duo.sqlSave, duo.mutation, duo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DomainUpdateOne) SaveX(ctx context.Context) *Domain {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DomainUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DomainUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (duo *DomainUpdateOne) defaults() {
	if _, ok := duo.mutation.UpdatedAt(); !ok && !duo.mutation.UpdatedAtCleared() {
		v := domain.UpdateDefaultUpdatedAt()
		duo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (duo *DomainUpdateOne) check() error {
	if v, ok := duo.mutation.CreatedBy(); ok {
		if err := domain.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "Domain.created_by": %w`, err)}
		}
	}
	return nil
}

func (duo *DomainUpdateOne) sqlSave(ctx context.Context) (_node *Domain, err error) {
	if err := duo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(domain.Table, domain.Columns, sqlgraph.NewFieldSpec(domain.FieldID, field.TypeString))
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Domain.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := duo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, domain.FieldID)
		for _, f := range fields {
			if !domain.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != domain.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := duo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := duo.mutation.Name(); ok {
		_spec.SetField(domain.FieldName, field.TypeString, value)
	}
	if duo.mutation.NameCleared() {
		_spec.ClearField(domain.FieldName, field.TypeString)
	}
	if value, ok := duo.mutation.Title(); ok {
		_spec.SetField(domain.FieldTitle, field.TypeString, value)
	}
	if duo.mutation.TitleCleared() {
		_spec.ClearField(domain.FieldTitle, field.TypeString)
	}
	if value, ok := duo.mutation.URL(); ok {
		_spec.SetField(domain.FieldURL, field.TypeString, value)
	}
	if duo.mutation.URLCleared() {
		_spec.ClearField(domain.FieldURL, field.TypeString)
	}
	if value, ok := duo.mutation.Logo(); ok {
		_spec.SetField(domain.FieldLogo, field.TypeString, value)
	}
	if duo.mutation.LogoCleared() {
		_spec.ClearField(domain.FieldLogo, field.TypeString)
	}
	if value, ok := duo.mutation.LogoAlt(); ok {
		_spec.SetField(domain.FieldLogoAlt, field.TypeString, value)
	}
	if duo.mutation.LogoAltCleared() {
		_spec.ClearField(domain.FieldLogoAlt, field.TypeString)
	}
	if value, ok := duo.mutation.Keywords(); ok {
		_spec.SetField(domain.FieldKeywords, field.TypeString, value)
	}
	if duo.mutation.KeywordsCleared() {
		_spec.ClearField(domain.FieldKeywords, field.TypeString)
	}
	if value, ok := duo.mutation.Copyright(); ok {
		_spec.SetField(domain.FieldCopyright, field.TypeString, value)
	}
	if duo.mutation.CopyrightCleared() {
		_spec.ClearField(domain.FieldCopyright, field.TypeString)
	}
	if value, ok := duo.mutation.Description(); ok {
		_spec.SetField(domain.FieldDescription, field.TypeString, value)
	}
	if duo.mutation.DescriptionCleared() {
		_spec.ClearField(domain.FieldDescription, field.TypeString)
	}
	if value, ok := duo.mutation.Order(); ok {
		_spec.SetField(domain.FieldOrder, field.TypeInt, value)
	}
	if value, ok := duo.mutation.AddedOrder(); ok {
		_spec.AddField(domain.FieldOrder, field.TypeInt, value)
	}
	if value, ok := duo.mutation.Disabled(); ok {
		_spec.SetField(domain.FieldDisabled, field.TypeBool, value)
	}
	if duo.mutation.DisabledCleared() {
		_spec.ClearField(domain.FieldDisabled, field.TypeBool)
	}
	if value, ok := duo.mutation.Extras(); ok {
		_spec.SetField(domain.FieldExtras, field.TypeJSON, value)
	}
	if duo.mutation.ExtrasCleared() {
		_spec.ClearField(domain.FieldExtras, field.TypeJSON)
	}
	if value, ok := duo.mutation.CreatedBy(); ok {
		_spec.SetField(domain.FieldCreatedBy, field.TypeString, value)
	}
	if duo.mutation.CreatedByCleared() {
		_spec.ClearField(domain.FieldCreatedBy, field.TypeString)
	}
	if duo.mutation.CreatedAtCleared() {
		_spec.ClearField(domain.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := duo.mutation.UpdatedAt(); ok {
		_spec.SetField(domain.FieldUpdatedAt, field.TypeTime, value)
	}
	if duo.mutation.UpdatedAtCleared() {
		_spec.ClearField(domain.FieldUpdatedAt, field.TypeTime)
	}
	_node = &Domain{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{domain.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	duo.mutation.done = true
	return _node, nil
}
