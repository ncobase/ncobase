// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"ncobase/internal/data/ent/grouprole"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// GroupRole is the model entity for the GroupRole schema.
type GroupRole struct {
	config `json:"-"`
	// ID of the ent.
	// group primary key alias
	ID string `json:"id,omitempty"`
	// role id
	RoleID       string `json:"role_id,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GroupRole) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case grouprole.FieldID, grouprole.FieldRoleID:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GroupRole fields.
func (gr *GroupRole) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case grouprole.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				gr.ID = value.String
			}
		case grouprole.FieldRoleID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field role_id", values[i])
			} else if value.Valid {
				gr.RoleID = value.String
			}
		default:
			gr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the GroupRole.
// This includes values selected through modifiers, order, etc.
func (gr *GroupRole) Value(name string) (ent.Value, error) {
	return gr.selectValues.Get(name)
}

// Update returns a builder for updating this GroupRole.
// Note that you need to call GroupRole.Unwrap() before calling this method if this GroupRole
// was returned from a transaction, and the transaction was committed or rolled back.
func (gr *GroupRole) Update() *GroupRoleUpdateOne {
	return NewGroupRoleClient(gr.config).UpdateOne(gr)
}

// Unwrap unwraps the GroupRole entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gr *GroupRole) Unwrap() *GroupRole {
	_tx, ok := gr.config.driver.(*txDriver)
	if !ok {
		panic("ent: GroupRole is not a transactional entity")
	}
	gr.config.driver = _tx.drv
	return gr
}

// String implements the fmt.Stringer.
func (gr *GroupRole) String() string {
	var builder strings.Builder
	builder.WriteString("GroupRole(")
	builder.WriteString(fmt.Sprintf("id=%v, ", gr.ID))
	builder.WriteString("role_id=")
	builder.WriteString(gr.RoleID)
	builder.WriteByte(')')
	return builder.String()
}

// GroupRoles is a parsable slice of GroupRole.
type GroupRoles []*GroupRole
