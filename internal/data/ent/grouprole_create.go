// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"stocms/internal/data/ent/grouprole"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// GroupRoleCreate is the builder for creating a GroupRole entity.
type GroupRoleCreate struct {
	config
	mutation *GroupRoleMutation
	hooks    []Hook
}

// SetRoleID sets the "role_id" field.
func (grc *GroupRoleCreate) SetRoleID(s string) *GroupRoleCreate {
	grc.mutation.SetRoleID(s)
	return grc
}

// SetNillableRoleID sets the "role_id" field if the given value is not nil.
func (grc *GroupRoleCreate) SetNillableRoleID(s *string) *GroupRoleCreate {
	if s != nil {
		grc.SetRoleID(*s)
	}
	return grc
}

// SetID sets the "id" field.
func (grc *GroupRoleCreate) SetID(s string) *GroupRoleCreate {
	grc.mutation.SetID(s)
	return grc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (grc *GroupRoleCreate) SetNillableID(s *string) *GroupRoleCreate {
	if s != nil {
		grc.SetID(*s)
	}
	return grc
}

// Mutation returns the GroupRoleMutation object of the builder.
func (grc *GroupRoleCreate) Mutation() *GroupRoleMutation {
	return grc.mutation
}

// Save creates the GroupRole in the database.
func (grc *GroupRoleCreate) Save(ctx context.Context) (*GroupRole, error) {
	grc.defaults()
	return withHooks(ctx, grc.sqlSave, grc.mutation, grc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (grc *GroupRoleCreate) SaveX(ctx context.Context) *GroupRole {
	v, err := grc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (grc *GroupRoleCreate) Exec(ctx context.Context) error {
	_, err := grc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (grc *GroupRoleCreate) ExecX(ctx context.Context) {
	if err := grc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (grc *GroupRoleCreate) defaults() {
	if _, ok := grc.mutation.ID(); !ok {
		v := grouprole.DefaultID()
		grc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (grc *GroupRoleCreate) check() error {
	if v, ok := grc.mutation.RoleID(); ok {
		if err := grouprole.RoleIDValidator(v); err != nil {
			return &ValidationError{Name: "role_id", err: fmt.Errorf(`ent: validator failed for field "GroupRole.role_id": %w`, err)}
		}
	}
	return nil
}

func (grc *GroupRoleCreate) sqlSave(ctx context.Context) (*GroupRole, error) {
	if err := grc.check(); err != nil {
		return nil, err
	}
	_node, _spec := grc.createSpec()
	if err := sqlgraph.CreateNode(ctx, grc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected GroupRole.ID type: %T", _spec.ID.Value)
		}
	}
	grc.mutation.id = &_node.ID
	grc.mutation.done = true
	return _node, nil
}

func (grc *GroupRoleCreate) createSpec() (*GroupRole, *sqlgraph.CreateSpec) {
	var (
		_node = &GroupRole{config: grc.config}
		_spec = sqlgraph.NewCreateSpec(grouprole.Table, sqlgraph.NewFieldSpec(grouprole.FieldID, field.TypeString))
	)
	if id, ok := grc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := grc.mutation.RoleID(); ok {
		_spec.SetField(grouprole.FieldRoleID, field.TypeString, value)
		_node.RoleID = value
	}
	return _node, _spec
}

// GroupRoleCreateBulk is the builder for creating many GroupRole entities in bulk.
type GroupRoleCreateBulk struct {
	config
	err      error
	builders []*GroupRoleCreate
}

// Save creates the GroupRole entities in the database.
func (grcb *GroupRoleCreateBulk) Save(ctx context.Context) ([]*GroupRole, error) {
	if grcb.err != nil {
		return nil, grcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(grcb.builders))
	nodes := make([]*GroupRole, len(grcb.builders))
	mutators := make([]Mutator, len(grcb.builders))
	for i := range grcb.builders {
		func(i int, root context.Context) {
			builder := grcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GroupRoleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, grcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, grcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, grcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (grcb *GroupRoleCreateBulk) SaveX(ctx context.Context) []*GroupRole {
	v, err := grcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (grcb *GroupRoleCreateBulk) Exec(ctx context.Context) error {
	_, err := grcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (grcb *GroupRoleCreateBulk) ExecX(ctx context.Context) {
	if err := grcb.Exec(ctx); err != nil {
		panic(err)
	}
}
