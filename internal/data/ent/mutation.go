// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"stocms/internal/data/ent/asset"
	"stocms/internal/data/ent/authtoken"
	"stocms/internal/data/ent/casbinrule"
	"stocms/internal/data/ent/codeauth"
	"stocms/internal/data/ent/domain"
	"stocms/internal/data/ent/group"
	"stocms/internal/data/ent/grouprole"
	"stocms/internal/data/ent/module"
	"stocms/internal/data/ent/oauthuser"
	"stocms/internal/data/ent/permission"
	"stocms/internal/data/ent/predicate"
	"stocms/internal/data/ent/role"
	"stocms/internal/data/ent/rolepermission"
	"stocms/internal/data/ent/taxonomy"
	"stocms/internal/data/ent/taxonomyrelation"
	"stocms/internal/data/ent/topic"
	"stocms/internal/data/ent/user"
	"stocms/internal/data/ent/userdomain"
	"stocms/internal/data/ent/userdomainrole"
	"stocms/internal/data/ent/usergroup"
	"stocms/internal/data/ent/userprofile"
	"stocms/internal/data/ent/userrole"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAsset            = "Asset"
	TypeAuthToken        = "AuthToken"
	TypeCasbinRule       = "CasbinRule"
	TypeCodeAuth         = "CodeAuth"
	TypeDomain           = "Domain"
	TypeGroup            = "Group"
	TypeGroupRole        = "GroupRole"
	TypeModule           = "Module"
	TypeOAuthUser        = "OAuthUser"
	TypePermission       = "Permission"
	TypeRole             = "Role"
	TypeRolePermission   = "RolePermission"
	TypeTaxonomy         = "Taxonomy"
	TypeTaxonomyRelation = "TaxonomyRelation"
	TypeTopic            = "Topic"
	TypeUser             = "User"
	TypeUserDomain       = "UserDomain"
	TypeUserDomainRole   = "UserDomainRole"
	TypeUserGroup        = "UserGroup"
	TypeUserProfile      = "UserProfile"
	TypeUserRole         = "UserRole"
)

// AssetMutation represents an operation that mutates the Asset nodes in the graph.
type AssetMutation struct {
	config
	op            Op
	typ           string
	id            *string
	name          *string
	_path         *string
	_type         *string
	size          *int64
	addsize       *int64
	storage       *string
	url           *string
	object_id     *string
	domain_id     *string
	extras        *map[string]interface{}
	created_by    *string
	updated_by    *string
	created_at    *time.Time
	updated_at    *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Asset, error)
	predicates    []predicate.Asset
}

var _ ent.Mutation = (*AssetMutation)(nil)

// assetOption allows management of the mutation configuration using functional options.
type assetOption func(*AssetMutation)

// newAssetMutation creates new mutation for the Asset entity.
func newAssetMutation(c config, op Op, opts ...assetOption) *AssetMutation {
	m := &AssetMutation{
		config:        c,
		op:            op,
		typ:           TypeAsset,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAssetID sets the ID field of the mutation.
func withAssetID(id string) assetOption {
	return func(m *AssetMutation) {
		var (
			err   error
			once  sync.Once
			value *Asset
		)
		m.oldValue = func(ctx context.Context) (*Asset, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Asset.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAsset sets the old Asset of the mutation.
func withAsset(node *Asset) assetOption {
	return func(m *AssetMutation) {
		m.oldValue = func(context.Context) (*Asset, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AssetMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AssetMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Asset entities.
func (m *AssetMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AssetMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AssetMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Asset.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *AssetMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *AssetMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Asset entity.
// If the Asset object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AssetMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ClearName clears the value of the "name" field.
func (m *AssetMutation) ClearName() {
	m.name = nil
	m.clearedFields[asset.FieldName] = struct{}{}
}

// NameCleared returns if the "name" field was cleared in this mutation.
func (m *AssetMutation) NameCleared() bool {
	_, ok := m.clearedFields[asset.FieldName]
	return ok
}

// ResetName resets all changes to the "name" field.
func (m *AssetMutation) ResetName() {
	m.name = nil
	delete(m.clearedFields, asset.FieldName)
}

// SetPath sets the "path" field.
func (m *AssetMutation) SetPath(s string) {
	m._path = &s
}

// Path returns the value of the "path" field in the mutation.
func (m *AssetMutation) Path() (r string, exists bool) {
	v := m._path
	if v == nil {
		return
	}
	return *v, true
}

// OldPath returns the old "path" field's value of the Asset entity.
// If the Asset object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AssetMutation) OldPath(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPath: %w", err)
	}
	return oldValue.Path, nil
}

// ClearPath clears the value of the "path" field.
func (m *AssetMutation) ClearPath() {
	m._path = nil
	m.clearedFields[asset.FieldPath] = struct{}{}
}

// PathCleared returns if the "path" field was cleared in this mutation.
func (m *AssetMutation) PathCleared() bool {
	_, ok := m.clearedFields[asset.FieldPath]
	return ok
}

// ResetPath resets all changes to the "path" field.
func (m *AssetMutation) ResetPath() {
	m._path = nil
	delete(m.clearedFields, asset.FieldPath)
}

// SetType sets the "type" field.
func (m *AssetMutation) SetType(s string) {
	m._type = &s
}

// GetType returns the value of the "type" field in the mutation.
func (m *AssetMutation) GetType() (r string, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Asset entity.
// If the Asset object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AssetMutation) OldType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ClearType clears the value of the "type" field.
func (m *AssetMutation) ClearType() {
	m._type = nil
	m.clearedFields[asset.FieldType] = struct{}{}
}

// TypeCleared returns if the "type" field was cleared in this mutation.
func (m *AssetMutation) TypeCleared() bool {
	_, ok := m.clearedFields[asset.FieldType]
	return ok
}

// ResetType resets all changes to the "type" field.
func (m *AssetMutation) ResetType() {
	m._type = nil
	delete(m.clearedFields, asset.FieldType)
}

// SetSize sets the "size" field.
func (m *AssetMutation) SetSize(i int64) {
	m.size = &i
	m.addsize = nil
}

// Size returns the value of the "size" field in the mutation.
func (m *AssetMutation) Size() (r int64, exists bool) {
	v := m.size
	if v == nil {
		return
	}
	return *v, true
}

// OldSize returns the old "size" field's value of the Asset entity.
// If the Asset object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AssetMutation) OldSize(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSize is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSize requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSize: %w", err)
	}
	return oldValue.Size, nil
}

// AddSize adds i to the "size" field.
func (m *AssetMutation) AddSize(i int64) {
	if m.addsize != nil {
		*m.addsize += i
	} else {
		m.addsize = &i
	}
}

// AddedSize returns the value that was added to the "size" field in this mutation.
func (m *AssetMutation) AddedSize() (r int64, exists bool) {
	v := m.addsize
	if v == nil {
		return
	}
	return *v, true
}

// ResetSize resets all changes to the "size" field.
func (m *AssetMutation) ResetSize() {
	m.size = nil
	m.addsize = nil
}

// SetStorage sets the "storage" field.
func (m *AssetMutation) SetStorage(s string) {
	m.storage = &s
}

// Storage returns the value of the "storage" field in the mutation.
func (m *AssetMutation) Storage() (r string, exists bool) {
	v := m.storage
	if v == nil {
		return
	}
	return *v, true
}

// OldStorage returns the old "storage" field's value of the Asset entity.
// If the Asset object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AssetMutation) OldStorage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStorage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStorage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStorage: %w", err)
	}
	return oldValue.Storage, nil
}

// ClearStorage clears the value of the "storage" field.
func (m *AssetMutation) ClearStorage() {
	m.storage = nil
	m.clearedFields[asset.FieldStorage] = struct{}{}
}

// StorageCleared returns if the "storage" field was cleared in this mutation.
func (m *AssetMutation) StorageCleared() bool {
	_, ok := m.clearedFields[asset.FieldStorage]
	return ok
}

// ResetStorage resets all changes to the "storage" field.
func (m *AssetMutation) ResetStorage() {
	m.storage = nil
	delete(m.clearedFields, asset.FieldStorage)
}

// SetURL sets the "url" field.
func (m *AssetMutation) SetURL(s string) {
	m.url = &s
}

// URL returns the value of the "url" field in the mutation.
func (m *AssetMutation) URL() (r string, exists bool) {
	v := m.url
	if v == nil {
		return
	}
	return *v, true
}

// OldURL returns the old "url" field's value of the Asset entity.
// If the Asset object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AssetMutation) OldURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldURL: %w", err)
	}
	return oldValue.URL, nil
}

// ClearURL clears the value of the "url" field.
func (m *AssetMutation) ClearURL() {
	m.url = nil
	m.clearedFields[asset.FieldURL] = struct{}{}
}

// URLCleared returns if the "url" field was cleared in this mutation.
func (m *AssetMutation) URLCleared() bool {
	_, ok := m.clearedFields[asset.FieldURL]
	return ok
}

// ResetURL resets all changes to the "url" field.
func (m *AssetMutation) ResetURL() {
	m.url = nil
	delete(m.clearedFields, asset.FieldURL)
}

// SetObjectID sets the "object_id" field.
func (m *AssetMutation) SetObjectID(s string) {
	m.object_id = &s
}

// ObjectID returns the value of the "object_id" field in the mutation.
func (m *AssetMutation) ObjectID() (r string, exists bool) {
	v := m.object_id
	if v == nil {
		return
	}
	return *v, true
}

// OldObjectID returns the old "object_id" field's value of the Asset entity.
// If the Asset object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AssetMutation) OldObjectID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldObjectID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldObjectID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldObjectID: %w", err)
	}
	return oldValue.ObjectID, nil
}

// ClearObjectID clears the value of the "object_id" field.
func (m *AssetMutation) ClearObjectID() {
	m.object_id = nil
	m.clearedFields[asset.FieldObjectID] = struct{}{}
}

// ObjectIDCleared returns if the "object_id" field was cleared in this mutation.
func (m *AssetMutation) ObjectIDCleared() bool {
	_, ok := m.clearedFields[asset.FieldObjectID]
	return ok
}

// ResetObjectID resets all changes to the "object_id" field.
func (m *AssetMutation) ResetObjectID() {
	m.object_id = nil
	delete(m.clearedFields, asset.FieldObjectID)
}

// SetDomainID sets the "domain_id" field.
func (m *AssetMutation) SetDomainID(s string) {
	m.domain_id = &s
}

// DomainID returns the value of the "domain_id" field in the mutation.
func (m *AssetMutation) DomainID() (r string, exists bool) {
	v := m.domain_id
	if v == nil {
		return
	}
	return *v, true
}

// OldDomainID returns the old "domain_id" field's value of the Asset entity.
// If the Asset object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AssetMutation) OldDomainID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDomainID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDomainID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDomainID: %w", err)
	}
	return oldValue.DomainID, nil
}

// ClearDomainID clears the value of the "domain_id" field.
func (m *AssetMutation) ClearDomainID() {
	m.domain_id = nil
	m.clearedFields[asset.FieldDomainID] = struct{}{}
}

// DomainIDCleared returns if the "domain_id" field was cleared in this mutation.
func (m *AssetMutation) DomainIDCleared() bool {
	_, ok := m.clearedFields[asset.FieldDomainID]
	return ok
}

// ResetDomainID resets all changes to the "domain_id" field.
func (m *AssetMutation) ResetDomainID() {
	m.domain_id = nil
	delete(m.clearedFields, asset.FieldDomainID)
}

// SetExtras sets the "extras" field.
func (m *AssetMutation) SetExtras(value map[string]interface{}) {
	m.extras = &value
}

// Extras returns the value of the "extras" field in the mutation.
func (m *AssetMutation) Extras() (r map[string]interface{}, exists bool) {
	v := m.extras
	if v == nil {
		return
	}
	return *v, true
}

// OldExtras returns the old "extras" field's value of the Asset entity.
// If the Asset object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AssetMutation) OldExtras(ctx context.Context) (v map[string]interface{}, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExtras is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExtras requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExtras: %w", err)
	}
	return oldValue.Extras, nil
}

// ClearExtras clears the value of the "extras" field.
func (m *AssetMutation) ClearExtras() {
	m.extras = nil
	m.clearedFields[asset.FieldExtras] = struct{}{}
}

// ExtrasCleared returns if the "extras" field was cleared in this mutation.
func (m *AssetMutation) ExtrasCleared() bool {
	_, ok := m.clearedFields[asset.FieldExtras]
	return ok
}

// ResetExtras resets all changes to the "extras" field.
func (m *AssetMutation) ResetExtras() {
	m.extras = nil
	delete(m.clearedFields, asset.FieldExtras)
}

// SetCreatedBy sets the "created_by" field.
func (m *AssetMutation) SetCreatedBy(s string) {
	m.created_by = &s
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *AssetMutation) CreatedBy() (r string, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the Asset entity.
// If the Asset object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AssetMutation) OldCreatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// ClearCreatedBy clears the value of the "created_by" field.
func (m *AssetMutation) ClearCreatedBy() {
	m.created_by = nil
	m.clearedFields[asset.FieldCreatedBy] = struct{}{}
}

// CreatedByCleared returns if the "created_by" field was cleared in this mutation.
func (m *AssetMutation) CreatedByCleared() bool {
	_, ok := m.clearedFields[asset.FieldCreatedBy]
	return ok
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *AssetMutation) ResetCreatedBy() {
	m.created_by = nil
	delete(m.clearedFields, asset.FieldCreatedBy)
}

// SetUpdatedBy sets the "updated_by" field.
func (m *AssetMutation) SetUpdatedBy(s string) {
	m.updated_by = &s
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *AssetMutation) UpdatedBy() (r string, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the Asset entity.
// If the Asset object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AssetMutation) OldUpdatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (m *AssetMutation) ClearUpdatedBy() {
	m.updated_by = nil
	m.clearedFields[asset.FieldUpdatedBy] = struct{}{}
}

// UpdatedByCleared returns if the "updated_by" field was cleared in this mutation.
func (m *AssetMutation) UpdatedByCleared() bool {
	_, ok := m.clearedFields[asset.FieldUpdatedBy]
	return ok
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *AssetMutation) ResetUpdatedBy() {
	m.updated_by = nil
	delete(m.clearedFields, asset.FieldUpdatedBy)
}

// SetCreatedAt sets the "created_at" field.
func (m *AssetMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *AssetMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Asset entity.
// If the Asset object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AssetMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ClearCreatedAt clears the value of the "created_at" field.
func (m *AssetMutation) ClearCreatedAt() {
	m.created_at = nil
	m.clearedFields[asset.FieldCreatedAt] = struct{}{}
}

// CreatedAtCleared returns if the "created_at" field was cleared in this mutation.
func (m *AssetMutation) CreatedAtCleared() bool {
	_, ok := m.clearedFields[asset.FieldCreatedAt]
	return ok
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *AssetMutation) ResetCreatedAt() {
	m.created_at = nil
	delete(m.clearedFields, asset.FieldCreatedAt)
}

// SetUpdatedAt sets the "updated_at" field.
func (m *AssetMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *AssetMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Asset entity.
// If the Asset object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AssetMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *AssetMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[asset.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *AssetMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[asset.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *AssetMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, asset.FieldUpdatedAt)
}

// Where appends a list predicates to the AssetMutation builder.
func (m *AssetMutation) Where(ps ...predicate.Asset) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the AssetMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *AssetMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Asset, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *AssetMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *AssetMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Asset).
func (m *AssetMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AssetMutation) Fields() []string {
	fields := make([]string, 0, 13)
	if m.name != nil {
		fields = append(fields, asset.FieldName)
	}
	if m._path != nil {
		fields = append(fields, asset.FieldPath)
	}
	if m._type != nil {
		fields = append(fields, asset.FieldType)
	}
	if m.size != nil {
		fields = append(fields, asset.FieldSize)
	}
	if m.storage != nil {
		fields = append(fields, asset.FieldStorage)
	}
	if m.url != nil {
		fields = append(fields, asset.FieldURL)
	}
	if m.object_id != nil {
		fields = append(fields, asset.FieldObjectID)
	}
	if m.domain_id != nil {
		fields = append(fields, asset.FieldDomainID)
	}
	if m.extras != nil {
		fields = append(fields, asset.FieldExtras)
	}
	if m.created_by != nil {
		fields = append(fields, asset.FieldCreatedBy)
	}
	if m.updated_by != nil {
		fields = append(fields, asset.FieldUpdatedBy)
	}
	if m.created_at != nil {
		fields = append(fields, asset.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, asset.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AssetMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case asset.FieldName:
		return m.Name()
	case asset.FieldPath:
		return m.Path()
	case asset.FieldType:
		return m.GetType()
	case asset.FieldSize:
		return m.Size()
	case asset.FieldStorage:
		return m.Storage()
	case asset.FieldURL:
		return m.URL()
	case asset.FieldObjectID:
		return m.ObjectID()
	case asset.FieldDomainID:
		return m.DomainID()
	case asset.FieldExtras:
		return m.Extras()
	case asset.FieldCreatedBy:
		return m.CreatedBy()
	case asset.FieldUpdatedBy:
		return m.UpdatedBy()
	case asset.FieldCreatedAt:
		return m.CreatedAt()
	case asset.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AssetMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case asset.FieldName:
		return m.OldName(ctx)
	case asset.FieldPath:
		return m.OldPath(ctx)
	case asset.FieldType:
		return m.OldType(ctx)
	case asset.FieldSize:
		return m.OldSize(ctx)
	case asset.FieldStorage:
		return m.OldStorage(ctx)
	case asset.FieldURL:
		return m.OldURL(ctx)
	case asset.FieldObjectID:
		return m.OldObjectID(ctx)
	case asset.FieldDomainID:
		return m.OldDomainID(ctx)
	case asset.FieldExtras:
		return m.OldExtras(ctx)
	case asset.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case asset.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	case asset.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case asset.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Asset field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AssetMutation) SetField(name string, value ent.Value) error {
	switch name {
	case asset.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case asset.FieldPath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPath(v)
		return nil
	case asset.FieldType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case asset.FieldSize:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSize(v)
		return nil
	case asset.FieldStorage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStorage(v)
		return nil
	case asset.FieldURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetURL(v)
		return nil
	case asset.FieldObjectID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetObjectID(v)
		return nil
	case asset.FieldDomainID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDomainID(v)
		return nil
	case asset.FieldExtras:
		v, ok := value.(map[string]interface{})
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExtras(v)
		return nil
	case asset.FieldCreatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case asset.FieldUpdatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	case asset.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case asset.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Asset field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AssetMutation) AddedFields() []string {
	var fields []string
	if m.addsize != nil {
		fields = append(fields, asset.FieldSize)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AssetMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case asset.FieldSize:
		return m.AddedSize()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AssetMutation) AddField(name string, value ent.Value) error {
	switch name {
	case asset.FieldSize:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSize(v)
		return nil
	}
	return fmt.Errorf("unknown Asset numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AssetMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(asset.FieldName) {
		fields = append(fields, asset.FieldName)
	}
	if m.FieldCleared(asset.FieldPath) {
		fields = append(fields, asset.FieldPath)
	}
	if m.FieldCleared(asset.FieldType) {
		fields = append(fields, asset.FieldType)
	}
	if m.FieldCleared(asset.FieldStorage) {
		fields = append(fields, asset.FieldStorage)
	}
	if m.FieldCleared(asset.FieldURL) {
		fields = append(fields, asset.FieldURL)
	}
	if m.FieldCleared(asset.FieldObjectID) {
		fields = append(fields, asset.FieldObjectID)
	}
	if m.FieldCleared(asset.FieldDomainID) {
		fields = append(fields, asset.FieldDomainID)
	}
	if m.FieldCleared(asset.FieldExtras) {
		fields = append(fields, asset.FieldExtras)
	}
	if m.FieldCleared(asset.FieldCreatedBy) {
		fields = append(fields, asset.FieldCreatedBy)
	}
	if m.FieldCleared(asset.FieldUpdatedBy) {
		fields = append(fields, asset.FieldUpdatedBy)
	}
	if m.FieldCleared(asset.FieldCreatedAt) {
		fields = append(fields, asset.FieldCreatedAt)
	}
	if m.FieldCleared(asset.FieldUpdatedAt) {
		fields = append(fields, asset.FieldUpdatedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AssetMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AssetMutation) ClearField(name string) error {
	switch name {
	case asset.FieldName:
		m.ClearName()
		return nil
	case asset.FieldPath:
		m.ClearPath()
		return nil
	case asset.FieldType:
		m.ClearType()
		return nil
	case asset.FieldStorage:
		m.ClearStorage()
		return nil
	case asset.FieldURL:
		m.ClearURL()
		return nil
	case asset.FieldObjectID:
		m.ClearObjectID()
		return nil
	case asset.FieldDomainID:
		m.ClearDomainID()
		return nil
	case asset.FieldExtras:
		m.ClearExtras()
		return nil
	case asset.FieldCreatedBy:
		m.ClearCreatedBy()
		return nil
	case asset.FieldUpdatedBy:
		m.ClearUpdatedBy()
		return nil
	case asset.FieldCreatedAt:
		m.ClearCreatedAt()
		return nil
	case asset.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Asset nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AssetMutation) ResetField(name string) error {
	switch name {
	case asset.FieldName:
		m.ResetName()
		return nil
	case asset.FieldPath:
		m.ResetPath()
		return nil
	case asset.FieldType:
		m.ResetType()
		return nil
	case asset.FieldSize:
		m.ResetSize()
		return nil
	case asset.FieldStorage:
		m.ResetStorage()
		return nil
	case asset.FieldURL:
		m.ResetURL()
		return nil
	case asset.FieldObjectID:
		m.ResetObjectID()
		return nil
	case asset.FieldDomainID:
		m.ResetDomainID()
		return nil
	case asset.FieldExtras:
		m.ResetExtras()
		return nil
	case asset.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case asset.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	case asset.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case asset.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Asset field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AssetMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AssetMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AssetMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AssetMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AssetMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AssetMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AssetMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Asset unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AssetMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Asset edge %s", name)
}

// AuthTokenMutation represents an operation that mutates the AuthToken nodes in the graph.
type AuthTokenMutation struct {
	config
	op            Op
	typ           string
	id            *string
	disabled      *bool
	created_at    *time.Time
	updated_at    *time.Time
	user_id       *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*AuthToken, error)
	predicates    []predicate.AuthToken
}

var _ ent.Mutation = (*AuthTokenMutation)(nil)

// authtokenOption allows management of the mutation configuration using functional options.
type authtokenOption func(*AuthTokenMutation)

// newAuthTokenMutation creates new mutation for the AuthToken entity.
func newAuthTokenMutation(c config, op Op, opts ...authtokenOption) *AuthTokenMutation {
	m := &AuthTokenMutation{
		config:        c,
		op:            op,
		typ:           TypeAuthToken,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAuthTokenID sets the ID field of the mutation.
func withAuthTokenID(id string) authtokenOption {
	return func(m *AuthTokenMutation) {
		var (
			err   error
			once  sync.Once
			value *AuthToken
		)
		m.oldValue = func(ctx context.Context) (*AuthToken, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().AuthToken.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAuthToken sets the old AuthToken of the mutation.
func withAuthToken(node *AuthToken) authtokenOption {
	return func(m *AuthTokenMutation) {
		m.oldValue = func(context.Context) (*AuthToken, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AuthTokenMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AuthTokenMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of AuthToken entities.
func (m *AuthTokenMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AuthTokenMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AuthTokenMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().AuthToken.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetDisabled sets the "disabled" field.
func (m *AuthTokenMutation) SetDisabled(b bool) {
	m.disabled = &b
}

// Disabled returns the value of the "disabled" field in the mutation.
func (m *AuthTokenMutation) Disabled() (r bool, exists bool) {
	v := m.disabled
	if v == nil {
		return
	}
	return *v, true
}

// OldDisabled returns the old "disabled" field's value of the AuthToken entity.
// If the AuthToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AuthTokenMutation) OldDisabled(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDisabled is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDisabled requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDisabled: %w", err)
	}
	return oldValue.Disabled, nil
}

// ClearDisabled clears the value of the "disabled" field.
func (m *AuthTokenMutation) ClearDisabled() {
	m.disabled = nil
	m.clearedFields[authtoken.FieldDisabled] = struct{}{}
}

// DisabledCleared returns if the "disabled" field was cleared in this mutation.
func (m *AuthTokenMutation) DisabledCleared() bool {
	_, ok := m.clearedFields[authtoken.FieldDisabled]
	return ok
}

// ResetDisabled resets all changes to the "disabled" field.
func (m *AuthTokenMutation) ResetDisabled() {
	m.disabled = nil
	delete(m.clearedFields, authtoken.FieldDisabled)
}

// SetCreatedAt sets the "created_at" field.
func (m *AuthTokenMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *AuthTokenMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the AuthToken entity.
// If the AuthToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AuthTokenMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ClearCreatedAt clears the value of the "created_at" field.
func (m *AuthTokenMutation) ClearCreatedAt() {
	m.created_at = nil
	m.clearedFields[authtoken.FieldCreatedAt] = struct{}{}
}

// CreatedAtCleared returns if the "created_at" field was cleared in this mutation.
func (m *AuthTokenMutation) CreatedAtCleared() bool {
	_, ok := m.clearedFields[authtoken.FieldCreatedAt]
	return ok
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *AuthTokenMutation) ResetCreatedAt() {
	m.created_at = nil
	delete(m.clearedFields, authtoken.FieldCreatedAt)
}

// SetUpdatedAt sets the "updated_at" field.
func (m *AuthTokenMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *AuthTokenMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the AuthToken entity.
// If the AuthToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AuthTokenMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *AuthTokenMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[authtoken.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *AuthTokenMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[authtoken.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *AuthTokenMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, authtoken.FieldUpdatedAt)
}

// SetUserID sets the "user_id" field.
func (m *AuthTokenMutation) SetUserID(s string) {
	m.user_id = &s
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *AuthTokenMutation) UserID() (r string, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the AuthToken entity.
// If the AuthToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AuthTokenMutation) OldUserID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ClearUserID clears the value of the "user_id" field.
func (m *AuthTokenMutation) ClearUserID() {
	m.user_id = nil
	m.clearedFields[authtoken.FieldUserID] = struct{}{}
}

// UserIDCleared returns if the "user_id" field was cleared in this mutation.
func (m *AuthTokenMutation) UserIDCleared() bool {
	_, ok := m.clearedFields[authtoken.FieldUserID]
	return ok
}

// ResetUserID resets all changes to the "user_id" field.
func (m *AuthTokenMutation) ResetUserID() {
	m.user_id = nil
	delete(m.clearedFields, authtoken.FieldUserID)
}

// Where appends a list predicates to the AuthTokenMutation builder.
func (m *AuthTokenMutation) Where(ps ...predicate.AuthToken) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the AuthTokenMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *AuthTokenMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.AuthToken, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *AuthTokenMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *AuthTokenMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (AuthToken).
func (m *AuthTokenMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AuthTokenMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.disabled != nil {
		fields = append(fields, authtoken.FieldDisabled)
	}
	if m.created_at != nil {
		fields = append(fields, authtoken.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, authtoken.FieldUpdatedAt)
	}
	if m.user_id != nil {
		fields = append(fields, authtoken.FieldUserID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AuthTokenMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case authtoken.FieldDisabled:
		return m.Disabled()
	case authtoken.FieldCreatedAt:
		return m.CreatedAt()
	case authtoken.FieldUpdatedAt:
		return m.UpdatedAt()
	case authtoken.FieldUserID:
		return m.UserID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AuthTokenMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case authtoken.FieldDisabled:
		return m.OldDisabled(ctx)
	case authtoken.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case authtoken.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case authtoken.FieldUserID:
		return m.OldUserID(ctx)
	}
	return nil, fmt.Errorf("unknown AuthToken field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AuthTokenMutation) SetField(name string, value ent.Value) error {
	switch name {
	case authtoken.FieldDisabled:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDisabled(v)
		return nil
	case authtoken.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case authtoken.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case authtoken.FieldUserID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	}
	return fmt.Errorf("unknown AuthToken field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AuthTokenMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AuthTokenMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AuthTokenMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown AuthToken numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AuthTokenMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(authtoken.FieldDisabled) {
		fields = append(fields, authtoken.FieldDisabled)
	}
	if m.FieldCleared(authtoken.FieldCreatedAt) {
		fields = append(fields, authtoken.FieldCreatedAt)
	}
	if m.FieldCleared(authtoken.FieldUpdatedAt) {
		fields = append(fields, authtoken.FieldUpdatedAt)
	}
	if m.FieldCleared(authtoken.FieldUserID) {
		fields = append(fields, authtoken.FieldUserID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AuthTokenMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AuthTokenMutation) ClearField(name string) error {
	switch name {
	case authtoken.FieldDisabled:
		m.ClearDisabled()
		return nil
	case authtoken.FieldCreatedAt:
		m.ClearCreatedAt()
		return nil
	case authtoken.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	case authtoken.FieldUserID:
		m.ClearUserID()
		return nil
	}
	return fmt.Errorf("unknown AuthToken nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AuthTokenMutation) ResetField(name string) error {
	switch name {
	case authtoken.FieldDisabled:
		m.ResetDisabled()
		return nil
	case authtoken.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case authtoken.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case authtoken.FieldUserID:
		m.ResetUserID()
		return nil
	}
	return fmt.Errorf("unknown AuthToken field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AuthTokenMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AuthTokenMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AuthTokenMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AuthTokenMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AuthTokenMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AuthTokenMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AuthTokenMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown AuthToken unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AuthTokenMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown AuthToken edge %s", name)
}

// CasbinRuleMutation represents an operation that mutates the CasbinRule nodes in the graph.
type CasbinRuleMutation struct {
	config
	op            Op
	typ           string
	id            *string
	p_type        *string
	v0            *string
	v1            *string
	v2            *string
	v3            *string
	v4            *string
	v5            *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*CasbinRule, error)
	predicates    []predicate.CasbinRule
}

var _ ent.Mutation = (*CasbinRuleMutation)(nil)

// casbinruleOption allows management of the mutation configuration using functional options.
type casbinruleOption func(*CasbinRuleMutation)

// newCasbinRuleMutation creates new mutation for the CasbinRule entity.
func newCasbinRuleMutation(c config, op Op, opts ...casbinruleOption) *CasbinRuleMutation {
	m := &CasbinRuleMutation{
		config:        c,
		op:            op,
		typ:           TypeCasbinRule,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCasbinRuleID sets the ID field of the mutation.
func withCasbinRuleID(id string) casbinruleOption {
	return func(m *CasbinRuleMutation) {
		var (
			err   error
			once  sync.Once
			value *CasbinRule
		)
		m.oldValue = func(ctx context.Context) (*CasbinRule, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CasbinRule.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCasbinRule sets the old CasbinRule of the mutation.
func withCasbinRule(node *CasbinRule) casbinruleOption {
	return func(m *CasbinRuleMutation) {
		m.oldValue = func(context.Context) (*CasbinRule, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CasbinRuleMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CasbinRuleMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of CasbinRule entities.
func (m *CasbinRuleMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CasbinRuleMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CasbinRuleMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().CasbinRule.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetPType sets the "p_type" field.
func (m *CasbinRuleMutation) SetPType(s string) {
	m.p_type = &s
}

// PType returns the value of the "p_type" field in the mutation.
func (m *CasbinRuleMutation) PType() (r string, exists bool) {
	v := m.p_type
	if v == nil {
		return
	}
	return *v, true
}

// OldPType returns the old "p_type" field's value of the CasbinRule entity.
// If the CasbinRule object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CasbinRuleMutation) OldPType(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPType: %w", err)
	}
	return oldValue.PType, nil
}

// ClearPType clears the value of the "p_type" field.
func (m *CasbinRuleMutation) ClearPType() {
	m.p_type = nil
	m.clearedFields[casbinrule.FieldPType] = struct{}{}
}

// PTypeCleared returns if the "p_type" field was cleared in this mutation.
func (m *CasbinRuleMutation) PTypeCleared() bool {
	_, ok := m.clearedFields[casbinrule.FieldPType]
	return ok
}

// ResetPType resets all changes to the "p_type" field.
func (m *CasbinRuleMutation) ResetPType() {
	m.p_type = nil
	delete(m.clearedFields, casbinrule.FieldPType)
}

// SetV0 sets the "v0" field.
func (m *CasbinRuleMutation) SetV0(s string) {
	m.v0 = &s
}

// V0 returns the value of the "v0" field in the mutation.
func (m *CasbinRuleMutation) V0() (r string, exists bool) {
	v := m.v0
	if v == nil {
		return
	}
	return *v, true
}

// OldV0 returns the old "v0" field's value of the CasbinRule entity.
// If the CasbinRule object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CasbinRuleMutation) OldV0(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldV0 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldV0 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldV0: %w", err)
	}
	return oldValue.V0, nil
}

// ClearV0 clears the value of the "v0" field.
func (m *CasbinRuleMutation) ClearV0() {
	m.v0 = nil
	m.clearedFields[casbinrule.FieldV0] = struct{}{}
}

// V0Cleared returns if the "v0" field was cleared in this mutation.
func (m *CasbinRuleMutation) V0Cleared() bool {
	_, ok := m.clearedFields[casbinrule.FieldV0]
	return ok
}

// ResetV0 resets all changes to the "v0" field.
func (m *CasbinRuleMutation) ResetV0() {
	m.v0 = nil
	delete(m.clearedFields, casbinrule.FieldV0)
}

// SetV1 sets the "v1" field.
func (m *CasbinRuleMutation) SetV1(s string) {
	m.v1 = &s
}

// V1 returns the value of the "v1" field in the mutation.
func (m *CasbinRuleMutation) V1() (r string, exists bool) {
	v := m.v1
	if v == nil {
		return
	}
	return *v, true
}

// OldV1 returns the old "v1" field's value of the CasbinRule entity.
// If the CasbinRule object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CasbinRuleMutation) OldV1(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldV1 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldV1 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldV1: %w", err)
	}
	return oldValue.V1, nil
}

// ClearV1 clears the value of the "v1" field.
func (m *CasbinRuleMutation) ClearV1() {
	m.v1 = nil
	m.clearedFields[casbinrule.FieldV1] = struct{}{}
}

// V1Cleared returns if the "v1" field was cleared in this mutation.
func (m *CasbinRuleMutation) V1Cleared() bool {
	_, ok := m.clearedFields[casbinrule.FieldV1]
	return ok
}

// ResetV1 resets all changes to the "v1" field.
func (m *CasbinRuleMutation) ResetV1() {
	m.v1 = nil
	delete(m.clearedFields, casbinrule.FieldV1)
}

// SetV2 sets the "v2" field.
func (m *CasbinRuleMutation) SetV2(s string) {
	m.v2 = &s
}

// V2 returns the value of the "v2" field in the mutation.
func (m *CasbinRuleMutation) V2() (r string, exists bool) {
	v := m.v2
	if v == nil {
		return
	}
	return *v, true
}

// OldV2 returns the old "v2" field's value of the CasbinRule entity.
// If the CasbinRule object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CasbinRuleMutation) OldV2(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldV2 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldV2 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldV2: %w", err)
	}
	return oldValue.V2, nil
}

// ClearV2 clears the value of the "v2" field.
func (m *CasbinRuleMutation) ClearV2() {
	m.v2 = nil
	m.clearedFields[casbinrule.FieldV2] = struct{}{}
}

// V2Cleared returns if the "v2" field was cleared in this mutation.
func (m *CasbinRuleMutation) V2Cleared() bool {
	_, ok := m.clearedFields[casbinrule.FieldV2]
	return ok
}

// ResetV2 resets all changes to the "v2" field.
func (m *CasbinRuleMutation) ResetV2() {
	m.v2 = nil
	delete(m.clearedFields, casbinrule.FieldV2)
}

// SetV3 sets the "v3" field.
func (m *CasbinRuleMutation) SetV3(s string) {
	m.v3 = &s
}

// V3 returns the value of the "v3" field in the mutation.
func (m *CasbinRuleMutation) V3() (r string, exists bool) {
	v := m.v3
	if v == nil {
		return
	}
	return *v, true
}

// OldV3 returns the old "v3" field's value of the CasbinRule entity.
// If the CasbinRule object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CasbinRuleMutation) OldV3(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldV3 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldV3 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldV3: %w", err)
	}
	return oldValue.V3, nil
}

// ClearV3 clears the value of the "v3" field.
func (m *CasbinRuleMutation) ClearV3() {
	m.v3 = nil
	m.clearedFields[casbinrule.FieldV3] = struct{}{}
}

// V3Cleared returns if the "v3" field was cleared in this mutation.
func (m *CasbinRuleMutation) V3Cleared() bool {
	_, ok := m.clearedFields[casbinrule.FieldV3]
	return ok
}

// ResetV3 resets all changes to the "v3" field.
func (m *CasbinRuleMutation) ResetV3() {
	m.v3 = nil
	delete(m.clearedFields, casbinrule.FieldV3)
}

// SetV4 sets the "v4" field.
func (m *CasbinRuleMutation) SetV4(s string) {
	m.v4 = &s
}

// V4 returns the value of the "v4" field in the mutation.
func (m *CasbinRuleMutation) V4() (r string, exists bool) {
	v := m.v4
	if v == nil {
		return
	}
	return *v, true
}

// OldV4 returns the old "v4" field's value of the CasbinRule entity.
// If the CasbinRule object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CasbinRuleMutation) OldV4(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldV4 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldV4 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldV4: %w", err)
	}
	return oldValue.V4, nil
}

// ClearV4 clears the value of the "v4" field.
func (m *CasbinRuleMutation) ClearV4() {
	m.v4 = nil
	m.clearedFields[casbinrule.FieldV4] = struct{}{}
}

// V4Cleared returns if the "v4" field was cleared in this mutation.
func (m *CasbinRuleMutation) V4Cleared() bool {
	_, ok := m.clearedFields[casbinrule.FieldV4]
	return ok
}

// ResetV4 resets all changes to the "v4" field.
func (m *CasbinRuleMutation) ResetV4() {
	m.v4 = nil
	delete(m.clearedFields, casbinrule.FieldV4)
}

// SetV5 sets the "v5" field.
func (m *CasbinRuleMutation) SetV5(s string) {
	m.v5 = &s
}

// V5 returns the value of the "v5" field in the mutation.
func (m *CasbinRuleMutation) V5() (r string, exists bool) {
	v := m.v5
	if v == nil {
		return
	}
	return *v, true
}

// OldV5 returns the old "v5" field's value of the CasbinRule entity.
// If the CasbinRule object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CasbinRuleMutation) OldV5(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldV5 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldV5 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldV5: %w", err)
	}
	return oldValue.V5, nil
}

// ClearV5 clears the value of the "v5" field.
func (m *CasbinRuleMutation) ClearV5() {
	m.v5 = nil
	m.clearedFields[casbinrule.FieldV5] = struct{}{}
}

// V5Cleared returns if the "v5" field was cleared in this mutation.
func (m *CasbinRuleMutation) V5Cleared() bool {
	_, ok := m.clearedFields[casbinrule.FieldV5]
	return ok
}

// ResetV5 resets all changes to the "v5" field.
func (m *CasbinRuleMutation) ResetV5() {
	m.v5 = nil
	delete(m.clearedFields, casbinrule.FieldV5)
}

// Where appends a list predicates to the CasbinRuleMutation builder.
func (m *CasbinRuleMutation) Where(ps ...predicate.CasbinRule) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CasbinRuleMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CasbinRuleMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.CasbinRule, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CasbinRuleMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CasbinRuleMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (CasbinRule).
func (m *CasbinRuleMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CasbinRuleMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.p_type != nil {
		fields = append(fields, casbinrule.FieldPType)
	}
	if m.v0 != nil {
		fields = append(fields, casbinrule.FieldV0)
	}
	if m.v1 != nil {
		fields = append(fields, casbinrule.FieldV1)
	}
	if m.v2 != nil {
		fields = append(fields, casbinrule.FieldV2)
	}
	if m.v3 != nil {
		fields = append(fields, casbinrule.FieldV3)
	}
	if m.v4 != nil {
		fields = append(fields, casbinrule.FieldV4)
	}
	if m.v5 != nil {
		fields = append(fields, casbinrule.FieldV5)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CasbinRuleMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case casbinrule.FieldPType:
		return m.PType()
	case casbinrule.FieldV0:
		return m.V0()
	case casbinrule.FieldV1:
		return m.V1()
	case casbinrule.FieldV2:
		return m.V2()
	case casbinrule.FieldV3:
		return m.V3()
	case casbinrule.FieldV4:
		return m.V4()
	case casbinrule.FieldV5:
		return m.V5()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CasbinRuleMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case casbinrule.FieldPType:
		return m.OldPType(ctx)
	case casbinrule.FieldV0:
		return m.OldV0(ctx)
	case casbinrule.FieldV1:
		return m.OldV1(ctx)
	case casbinrule.FieldV2:
		return m.OldV2(ctx)
	case casbinrule.FieldV3:
		return m.OldV3(ctx)
	case casbinrule.FieldV4:
		return m.OldV4(ctx)
	case casbinrule.FieldV5:
		return m.OldV5(ctx)
	}
	return nil, fmt.Errorf("unknown CasbinRule field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CasbinRuleMutation) SetField(name string, value ent.Value) error {
	switch name {
	case casbinrule.FieldPType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPType(v)
		return nil
	case casbinrule.FieldV0:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetV0(v)
		return nil
	case casbinrule.FieldV1:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetV1(v)
		return nil
	case casbinrule.FieldV2:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetV2(v)
		return nil
	case casbinrule.FieldV3:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetV3(v)
		return nil
	case casbinrule.FieldV4:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetV4(v)
		return nil
	case casbinrule.FieldV5:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetV5(v)
		return nil
	}
	return fmt.Errorf("unknown CasbinRule field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CasbinRuleMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CasbinRuleMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CasbinRuleMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown CasbinRule numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CasbinRuleMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(casbinrule.FieldPType) {
		fields = append(fields, casbinrule.FieldPType)
	}
	if m.FieldCleared(casbinrule.FieldV0) {
		fields = append(fields, casbinrule.FieldV0)
	}
	if m.FieldCleared(casbinrule.FieldV1) {
		fields = append(fields, casbinrule.FieldV1)
	}
	if m.FieldCleared(casbinrule.FieldV2) {
		fields = append(fields, casbinrule.FieldV2)
	}
	if m.FieldCleared(casbinrule.FieldV3) {
		fields = append(fields, casbinrule.FieldV3)
	}
	if m.FieldCleared(casbinrule.FieldV4) {
		fields = append(fields, casbinrule.FieldV4)
	}
	if m.FieldCleared(casbinrule.FieldV5) {
		fields = append(fields, casbinrule.FieldV5)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CasbinRuleMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CasbinRuleMutation) ClearField(name string) error {
	switch name {
	case casbinrule.FieldPType:
		m.ClearPType()
		return nil
	case casbinrule.FieldV0:
		m.ClearV0()
		return nil
	case casbinrule.FieldV1:
		m.ClearV1()
		return nil
	case casbinrule.FieldV2:
		m.ClearV2()
		return nil
	case casbinrule.FieldV3:
		m.ClearV3()
		return nil
	case casbinrule.FieldV4:
		m.ClearV4()
		return nil
	case casbinrule.FieldV5:
		m.ClearV5()
		return nil
	}
	return fmt.Errorf("unknown CasbinRule nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CasbinRuleMutation) ResetField(name string) error {
	switch name {
	case casbinrule.FieldPType:
		m.ResetPType()
		return nil
	case casbinrule.FieldV0:
		m.ResetV0()
		return nil
	case casbinrule.FieldV1:
		m.ResetV1()
		return nil
	case casbinrule.FieldV2:
		m.ResetV2()
		return nil
	case casbinrule.FieldV3:
		m.ResetV3()
		return nil
	case casbinrule.FieldV4:
		m.ResetV4()
		return nil
	case casbinrule.FieldV5:
		m.ResetV5()
		return nil
	}
	return fmt.Errorf("unknown CasbinRule field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CasbinRuleMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CasbinRuleMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CasbinRuleMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CasbinRuleMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CasbinRuleMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CasbinRuleMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CasbinRuleMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown CasbinRule unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CasbinRuleMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown CasbinRule edge %s", name)
}

// CodeAuthMutation represents an operation that mutates the CodeAuth nodes in the graph.
type CodeAuthMutation struct {
	config
	op            Op
	typ           string
	id            *string
	code          *string
	email         *string
	logged        *bool
	created_at    *time.Time
	updated_at    *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*CodeAuth, error)
	predicates    []predicate.CodeAuth
}

var _ ent.Mutation = (*CodeAuthMutation)(nil)

// codeauthOption allows management of the mutation configuration using functional options.
type codeauthOption func(*CodeAuthMutation)

// newCodeAuthMutation creates new mutation for the CodeAuth entity.
func newCodeAuthMutation(c config, op Op, opts ...codeauthOption) *CodeAuthMutation {
	m := &CodeAuthMutation{
		config:        c,
		op:            op,
		typ:           TypeCodeAuth,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCodeAuthID sets the ID field of the mutation.
func withCodeAuthID(id string) codeauthOption {
	return func(m *CodeAuthMutation) {
		var (
			err   error
			once  sync.Once
			value *CodeAuth
		)
		m.oldValue = func(ctx context.Context) (*CodeAuth, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CodeAuth.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCodeAuth sets the old CodeAuth of the mutation.
func withCodeAuth(node *CodeAuth) codeauthOption {
	return func(m *CodeAuthMutation) {
		m.oldValue = func(context.Context) (*CodeAuth, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CodeAuthMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CodeAuthMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of CodeAuth entities.
func (m *CodeAuthMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CodeAuthMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CodeAuthMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().CodeAuth.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCode sets the "code" field.
func (m *CodeAuthMutation) SetCode(s string) {
	m.code = &s
}

// Code returns the value of the "code" field in the mutation.
func (m *CodeAuthMutation) Code() (r string, exists bool) {
	v := m.code
	if v == nil {
		return
	}
	return *v, true
}

// OldCode returns the old "code" field's value of the CodeAuth entity.
// If the CodeAuth object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CodeAuthMutation) OldCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCode: %w", err)
	}
	return oldValue.Code, nil
}

// ClearCode clears the value of the "code" field.
func (m *CodeAuthMutation) ClearCode() {
	m.code = nil
	m.clearedFields[codeauth.FieldCode] = struct{}{}
}

// CodeCleared returns if the "code" field was cleared in this mutation.
func (m *CodeAuthMutation) CodeCleared() bool {
	_, ok := m.clearedFields[codeauth.FieldCode]
	return ok
}

// ResetCode resets all changes to the "code" field.
func (m *CodeAuthMutation) ResetCode() {
	m.code = nil
	delete(m.clearedFields, codeauth.FieldCode)
}

// SetEmail sets the "email" field.
func (m *CodeAuthMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *CodeAuthMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the CodeAuth entity.
// If the CodeAuth object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CodeAuthMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ClearEmail clears the value of the "email" field.
func (m *CodeAuthMutation) ClearEmail() {
	m.email = nil
	m.clearedFields[codeauth.FieldEmail] = struct{}{}
}

// EmailCleared returns if the "email" field was cleared in this mutation.
func (m *CodeAuthMutation) EmailCleared() bool {
	_, ok := m.clearedFields[codeauth.FieldEmail]
	return ok
}

// ResetEmail resets all changes to the "email" field.
func (m *CodeAuthMutation) ResetEmail() {
	m.email = nil
	delete(m.clearedFields, codeauth.FieldEmail)
}

// SetLogged sets the "logged" field.
func (m *CodeAuthMutation) SetLogged(b bool) {
	m.logged = &b
}

// Logged returns the value of the "logged" field in the mutation.
func (m *CodeAuthMutation) Logged() (r bool, exists bool) {
	v := m.logged
	if v == nil {
		return
	}
	return *v, true
}

// OldLogged returns the old "logged" field's value of the CodeAuth entity.
// If the CodeAuth object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CodeAuthMutation) OldLogged(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLogged is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLogged requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLogged: %w", err)
	}
	return oldValue.Logged, nil
}

// ClearLogged clears the value of the "logged" field.
func (m *CodeAuthMutation) ClearLogged() {
	m.logged = nil
	m.clearedFields[codeauth.FieldLogged] = struct{}{}
}

// LoggedCleared returns if the "logged" field was cleared in this mutation.
func (m *CodeAuthMutation) LoggedCleared() bool {
	_, ok := m.clearedFields[codeauth.FieldLogged]
	return ok
}

// ResetLogged resets all changes to the "logged" field.
func (m *CodeAuthMutation) ResetLogged() {
	m.logged = nil
	delete(m.clearedFields, codeauth.FieldLogged)
}

// SetCreatedAt sets the "created_at" field.
func (m *CodeAuthMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *CodeAuthMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the CodeAuth entity.
// If the CodeAuth object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CodeAuthMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ClearCreatedAt clears the value of the "created_at" field.
func (m *CodeAuthMutation) ClearCreatedAt() {
	m.created_at = nil
	m.clearedFields[codeauth.FieldCreatedAt] = struct{}{}
}

// CreatedAtCleared returns if the "created_at" field was cleared in this mutation.
func (m *CodeAuthMutation) CreatedAtCleared() bool {
	_, ok := m.clearedFields[codeauth.FieldCreatedAt]
	return ok
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *CodeAuthMutation) ResetCreatedAt() {
	m.created_at = nil
	delete(m.clearedFields, codeauth.FieldCreatedAt)
}

// SetUpdatedAt sets the "updated_at" field.
func (m *CodeAuthMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *CodeAuthMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the CodeAuth entity.
// If the CodeAuth object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CodeAuthMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *CodeAuthMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[codeauth.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *CodeAuthMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[codeauth.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *CodeAuthMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, codeauth.FieldUpdatedAt)
}

// Where appends a list predicates to the CodeAuthMutation builder.
func (m *CodeAuthMutation) Where(ps ...predicate.CodeAuth) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CodeAuthMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CodeAuthMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.CodeAuth, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CodeAuthMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CodeAuthMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (CodeAuth).
func (m *CodeAuthMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CodeAuthMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.code != nil {
		fields = append(fields, codeauth.FieldCode)
	}
	if m.email != nil {
		fields = append(fields, codeauth.FieldEmail)
	}
	if m.logged != nil {
		fields = append(fields, codeauth.FieldLogged)
	}
	if m.created_at != nil {
		fields = append(fields, codeauth.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, codeauth.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CodeAuthMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case codeauth.FieldCode:
		return m.Code()
	case codeauth.FieldEmail:
		return m.Email()
	case codeauth.FieldLogged:
		return m.Logged()
	case codeauth.FieldCreatedAt:
		return m.CreatedAt()
	case codeauth.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CodeAuthMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case codeauth.FieldCode:
		return m.OldCode(ctx)
	case codeauth.FieldEmail:
		return m.OldEmail(ctx)
	case codeauth.FieldLogged:
		return m.OldLogged(ctx)
	case codeauth.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case codeauth.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown CodeAuth field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CodeAuthMutation) SetField(name string, value ent.Value) error {
	switch name {
	case codeauth.FieldCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCode(v)
		return nil
	case codeauth.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case codeauth.FieldLogged:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLogged(v)
		return nil
	case codeauth.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case codeauth.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown CodeAuth field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CodeAuthMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CodeAuthMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CodeAuthMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown CodeAuth numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CodeAuthMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(codeauth.FieldCode) {
		fields = append(fields, codeauth.FieldCode)
	}
	if m.FieldCleared(codeauth.FieldEmail) {
		fields = append(fields, codeauth.FieldEmail)
	}
	if m.FieldCleared(codeauth.FieldLogged) {
		fields = append(fields, codeauth.FieldLogged)
	}
	if m.FieldCleared(codeauth.FieldCreatedAt) {
		fields = append(fields, codeauth.FieldCreatedAt)
	}
	if m.FieldCleared(codeauth.FieldUpdatedAt) {
		fields = append(fields, codeauth.FieldUpdatedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CodeAuthMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CodeAuthMutation) ClearField(name string) error {
	switch name {
	case codeauth.FieldCode:
		m.ClearCode()
		return nil
	case codeauth.FieldEmail:
		m.ClearEmail()
		return nil
	case codeauth.FieldLogged:
		m.ClearLogged()
		return nil
	case codeauth.FieldCreatedAt:
		m.ClearCreatedAt()
		return nil
	case codeauth.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown CodeAuth nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CodeAuthMutation) ResetField(name string) error {
	switch name {
	case codeauth.FieldCode:
		m.ResetCode()
		return nil
	case codeauth.FieldEmail:
		m.ResetEmail()
		return nil
	case codeauth.FieldLogged:
		m.ResetLogged()
		return nil
	case codeauth.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case codeauth.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown CodeAuth field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CodeAuthMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CodeAuthMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CodeAuthMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CodeAuthMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CodeAuthMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CodeAuthMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CodeAuthMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown CodeAuth unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CodeAuthMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown CodeAuth edge %s", name)
}

// DomainMutation represents an operation that mutates the Domain nodes in the graph.
type DomainMutation struct {
	config
	op            Op
	typ           string
	id            *string
	name          *string
	title         *string
	url           *string
	logo          *string
	logo_alt      *string
	keywords      *string
	copyright     *string
	description   *string
	_order        *int32
	add_order     *int32
	disabled      *bool
	extras        *map[string]interface{}
	created_by    *string
	created_at    *time.Time
	updated_at    *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Domain, error)
	predicates    []predicate.Domain
}

var _ ent.Mutation = (*DomainMutation)(nil)

// domainOption allows management of the mutation configuration using functional options.
type domainOption func(*DomainMutation)

// newDomainMutation creates new mutation for the Domain entity.
func newDomainMutation(c config, op Op, opts ...domainOption) *DomainMutation {
	m := &DomainMutation{
		config:        c,
		op:            op,
		typ:           TypeDomain,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDomainID sets the ID field of the mutation.
func withDomainID(id string) domainOption {
	return func(m *DomainMutation) {
		var (
			err   error
			once  sync.Once
			value *Domain
		)
		m.oldValue = func(ctx context.Context) (*Domain, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Domain.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDomain sets the old Domain of the mutation.
func withDomain(node *Domain) domainOption {
	return func(m *DomainMutation) {
		m.oldValue = func(context.Context) (*Domain, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DomainMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DomainMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Domain entities.
func (m *DomainMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DomainMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DomainMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Domain.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *DomainMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *DomainMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Domain entity.
// If the Domain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DomainMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ClearName clears the value of the "name" field.
func (m *DomainMutation) ClearName() {
	m.name = nil
	m.clearedFields[domain.FieldName] = struct{}{}
}

// NameCleared returns if the "name" field was cleared in this mutation.
func (m *DomainMutation) NameCleared() bool {
	_, ok := m.clearedFields[domain.FieldName]
	return ok
}

// ResetName resets all changes to the "name" field.
func (m *DomainMutation) ResetName() {
	m.name = nil
	delete(m.clearedFields, domain.FieldName)
}

// SetTitle sets the "title" field.
func (m *DomainMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *DomainMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Domain entity.
// If the Domain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DomainMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ClearTitle clears the value of the "title" field.
func (m *DomainMutation) ClearTitle() {
	m.title = nil
	m.clearedFields[domain.FieldTitle] = struct{}{}
}

// TitleCleared returns if the "title" field was cleared in this mutation.
func (m *DomainMutation) TitleCleared() bool {
	_, ok := m.clearedFields[domain.FieldTitle]
	return ok
}

// ResetTitle resets all changes to the "title" field.
func (m *DomainMutation) ResetTitle() {
	m.title = nil
	delete(m.clearedFields, domain.FieldTitle)
}

// SetURL sets the "url" field.
func (m *DomainMutation) SetURL(s string) {
	m.url = &s
}

// URL returns the value of the "url" field in the mutation.
func (m *DomainMutation) URL() (r string, exists bool) {
	v := m.url
	if v == nil {
		return
	}
	return *v, true
}

// OldURL returns the old "url" field's value of the Domain entity.
// If the Domain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DomainMutation) OldURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldURL: %w", err)
	}
	return oldValue.URL, nil
}

// ClearURL clears the value of the "url" field.
func (m *DomainMutation) ClearURL() {
	m.url = nil
	m.clearedFields[domain.FieldURL] = struct{}{}
}

// URLCleared returns if the "url" field was cleared in this mutation.
func (m *DomainMutation) URLCleared() bool {
	_, ok := m.clearedFields[domain.FieldURL]
	return ok
}

// ResetURL resets all changes to the "url" field.
func (m *DomainMutation) ResetURL() {
	m.url = nil
	delete(m.clearedFields, domain.FieldURL)
}

// SetLogo sets the "logo" field.
func (m *DomainMutation) SetLogo(s string) {
	m.logo = &s
}

// Logo returns the value of the "logo" field in the mutation.
func (m *DomainMutation) Logo() (r string, exists bool) {
	v := m.logo
	if v == nil {
		return
	}
	return *v, true
}

// OldLogo returns the old "logo" field's value of the Domain entity.
// If the Domain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DomainMutation) OldLogo(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLogo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLogo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLogo: %w", err)
	}
	return oldValue.Logo, nil
}

// ClearLogo clears the value of the "logo" field.
func (m *DomainMutation) ClearLogo() {
	m.logo = nil
	m.clearedFields[domain.FieldLogo] = struct{}{}
}

// LogoCleared returns if the "logo" field was cleared in this mutation.
func (m *DomainMutation) LogoCleared() bool {
	_, ok := m.clearedFields[domain.FieldLogo]
	return ok
}

// ResetLogo resets all changes to the "logo" field.
func (m *DomainMutation) ResetLogo() {
	m.logo = nil
	delete(m.clearedFields, domain.FieldLogo)
}

// SetLogoAlt sets the "logo_alt" field.
func (m *DomainMutation) SetLogoAlt(s string) {
	m.logo_alt = &s
}

// LogoAlt returns the value of the "logo_alt" field in the mutation.
func (m *DomainMutation) LogoAlt() (r string, exists bool) {
	v := m.logo_alt
	if v == nil {
		return
	}
	return *v, true
}

// OldLogoAlt returns the old "logo_alt" field's value of the Domain entity.
// If the Domain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DomainMutation) OldLogoAlt(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLogoAlt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLogoAlt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLogoAlt: %w", err)
	}
	return oldValue.LogoAlt, nil
}

// ClearLogoAlt clears the value of the "logo_alt" field.
func (m *DomainMutation) ClearLogoAlt() {
	m.logo_alt = nil
	m.clearedFields[domain.FieldLogoAlt] = struct{}{}
}

// LogoAltCleared returns if the "logo_alt" field was cleared in this mutation.
func (m *DomainMutation) LogoAltCleared() bool {
	_, ok := m.clearedFields[domain.FieldLogoAlt]
	return ok
}

// ResetLogoAlt resets all changes to the "logo_alt" field.
func (m *DomainMutation) ResetLogoAlt() {
	m.logo_alt = nil
	delete(m.clearedFields, domain.FieldLogoAlt)
}

// SetKeywords sets the "keywords" field.
func (m *DomainMutation) SetKeywords(s string) {
	m.keywords = &s
}

// Keywords returns the value of the "keywords" field in the mutation.
func (m *DomainMutation) Keywords() (r string, exists bool) {
	v := m.keywords
	if v == nil {
		return
	}
	return *v, true
}

// OldKeywords returns the old "keywords" field's value of the Domain entity.
// If the Domain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DomainMutation) OldKeywords(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldKeywords is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldKeywords requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldKeywords: %w", err)
	}
	return oldValue.Keywords, nil
}

// ClearKeywords clears the value of the "keywords" field.
func (m *DomainMutation) ClearKeywords() {
	m.keywords = nil
	m.clearedFields[domain.FieldKeywords] = struct{}{}
}

// KeywordsCleared returns if the "keywords" field was cleared in this mutation.
func (m *DomainMutation) KeywordsCleared() bool {
	_, ok := m.clearedFields[domain.FieldKeywords]
	return ok
}

// ResetKeywords resets all changes to the "keywords" field.
func (m *DomainMutation) ResetKeywords() {
	m.keywords = nil
	delete(m.clearedFields, domain.FieldKeywords)
}

// SetCopyright sets the "copyright" field.
func (m *DomainMutation) SetCopyright(s string) {
	m.copyright = &s
}

// Copyright returns the value of the "copyright" field in the mutation.
func (m *DomainMutation) Copyright() (r string, exists bool) {
	v := m.copyright
	if v == nil {
		return
	}
	return *v, true
}

// OldCopyright returns the old "copyright" field's value of the Domain entity.
// If the Domain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DomainMutation) OldCopyright(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCopyright is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCopyright requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCopyright: %w", err)
	}
	return oldValue.Copyright, nil
}

// ClearCopyright clears the value of the "copyright" field.
func (m *DomainMutation) ClearCopyright() {
	m.copyright = nil
	m.clearedFields[domain.FieldCopyright] = struct{}{}
}

// CopyrightCleared returns if the "copyright" field was cleared in this mutation.
func (m *DomainMutation) CopyrightCleared() bool {
	_, ok := m.clearedFields[domain.FieldCopyright]
	return ok
}

// ResetCopyright resets all changes to the "copyright" field.
func (m *DomainMutation) ResetCopyright() {
	m.copyright = nil
	delete(m.clearedFields, domain.FieldCopyright)
}

// SetDescription sets the "description" field.
func (m *DomainMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *DomainMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Domain entity.
// If the Domain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DomainMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *DomainMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[domain.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *DomainMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[domain.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *DomainMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, domain.FieldDescription)
}

// SetOrder sets the "order" field.
func (m *DomainMutation) SetOrder(i int32) {
	m._order = &i
	m.add_order = nil
}

// Order returns the value of the "order" field in the mutation.
func (m *DomainMutation) Order() (r int32, exists bool) {
	v := m._order
	if v == nil {
		return
	}
	return *v, true
}

// OldOrder returns the old "order" field's value of the Domain entity.
// If the Domain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DomainMutation) OldOrder(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrder is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrder requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrder: %w", err)
	}
	return oldValue.Order, nil
}

// AddOrder adds i to the "order" field.
func (m *DomainMutation) AddOrder(i int32) {
	if m.add_order != nil {
		*m.add_order += i
	} else {
		m.add_order = &i
	}
}

// AddedOrder returns the value that was added to the "order" field in this mutation.
func (m *DomainMutation) AddedOrder() (r int32, exists bool) {
	v := m.add_order
	if v == nil {
		return
	}
	return *v, true
}

// ResetOrder resets all changes to the "order" field.
func (m *DomainMutation) ResetOrder() {
	m._order = nil
	m.add_order = nil
}

// SetDisabled sets the "disabled" field.
func (m *DomainMutation) SetDisabled(b bool) {
	m.disabled = &b
}

// Disabled returns the value of the "disabled" field in the mutation.
func (m *DomainMutation) Disabled() (r bool, exists bool) {
	v := m.disabled
	if v == nil {
		return
	}
	return *v, true
}

// OldDisabled returns the old "disabled" field's value of the Domain entity.
// If the Domain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DomainMutation) OldDisabled(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDisabled is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDisabled requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDisabled: %w", err)
	}
	return oldValue.Disabled, nil
}

// ClearDisabled clears the value of the "disabled" field.
func (m *DomainMutation) ClearDisabled() {
	m.disabled = nil
	m.clearedFields[domain.FieldDisabled] = struct{}{}
}

// DisabledCleared returns if the "disabled" field was cleared in this mutation.
func (m *DomainMutation) DisabledCleared() bool {
	_, ok := m.clearedFields[domain.FieldDisabled]
	return ok
}

// ResetDisabled resets all changes to the "disabled" field.
func (m *DomainMutation) ResetDisabled() {
	m.disabled = nil
	delete(m.clearedFields, domain.FieldDisabled)
}

// SetExtras sets the "extras" field.
func (m *DomainMutation) SetExtras(value map[string]interface{}) {
	m.extras = &value
}

// Extras returns the value of the "extras" field in the mutation.
func (m *DomainMutation) Extras() (r map[string]interface{}, exists bool) {
	v := m.extras
	if v == nil {
		return
	}
	return *v, true
}

// OldExtras returns the old "extras" field's value of the Domain entity.
// If the Domain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DomainMutation) OldExtras(ctx context.Context) (v map[string]interface{}, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExtras is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExtras requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExtras: %w", err)
	}
	return oldValue.Extras, nil
}

// ClearExtras clears the value of the "extras" field.
func (m *DomainMutation) ClearExtras() {
	m.extras = nil
	m.clearedFields[domain.FieldExtras] = struct{}{}
}

// ExtrasCleared returns if the "extras" field was cleared in this mutation.
func (m *DomainMutation) ExtrasCleared() bool {
	_, ok := m.clearedFields[domain.FieldExtras]
	return ok
}

// ResetExtras resets all changes to the "extras" field.
func (m *DomainMutation) ResetExtras() {
	m.extras = nil
	delete(m.clearedFields, domain.FieldExtras)
}

// SetCreatedBy sets the "created_by" field.
func (m *DomainMutation) SetCreatedBy(s string) {
	m.created_by = &s
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *DomainMutation) CreatedBy() (r string, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the Domain entity.
// If the Domain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DomainMutation) OldCreatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// ClearCreatedBy clears the value of the "created_by" field.
func (m *DomainMutation) ClearCreatedBy() {
	m.created_by = nil
	m.clearedFields[domain.FieldCreatedBy] = struct{}{}
}

// CreatedByCleared returns if the "created_by" field was cleared in this mutation.
func (m *DomainMutation) CreatedByCleared() bool {
	_, ok := m.clearedFields[domain.FieldCreatedBy]
	return ok
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *DomainMutation) ResetCreatedBy() {
	m.created_by = nil
	delete(m.clearedFields, domain.FieldCreatedBy)
}

// SetCreatedAt sets the "created_at" field.
func (m *DomainMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *DomainMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Domain entity.
// If the Domain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DomainMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ClearCreatedAt clears the value of the "created_at" field.
func (m *DomainMutation) ClearCreatedAt() {
	m.created_at = nil
	m.clearedFields[domain.FieldCreatedAt] = struct{}{}
}

// CreatedAtCleared returns if the "created_at" field was cleared in this mutation.
func (m *DomainMutation) CreatedAtCleared() bool {
	_, ok := m.clearedFields[domain.FieldCreatedAt]
	return ok
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *DomainMutation) ResetCreatedAt() {
	m.created_at = nil
	delete(m.clearedFields, domain.FieldCreatedAt)
}

// SetUpdatedAt sets the "updated_at" field.
func (m *DomainMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *DomainMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Domain entity.
// If the Domain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DomainMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *DomainMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[domain.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *DomainMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[domain.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *DomainMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, domain.FieldUpdatedAt)
}

// Where appends a list predicates to the DomainMutation builder.
func (m *DomainMutation) Where(ps ...predicate.Domain) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the DomainMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *DomainMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Domain, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *DomainMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *DomainMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Domain).
func (m *DomainMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DomainMutation) Fields() []string {
	fields := make([]string, 0, 14)
	if m.name != nil {
		fields = append(fields, domain.FieldName)
	}
	if m.title != nil {
		fields = append(fields, domain.FieldTitle)
	}
	if m.url != nil {
		fields = append(fields, domain.FieldURL)
	}
	if m.logo != nil {
		fields = append(fields, domain.FieldLogo)
	}
	if m.logo_alt != nil {
		fields = append(fields, domain.FieldLogoAlt)
	}
	if m.keywords != nil {
		fields = append(fields, domain.FieldKeywords)
	}
	if m.copyright != nil {
		fields = append(fields, domain.FieldCopyright)
	}
	if m.description != nil {
		fields = append(fields, domain.FieldDescription)
	}
	if m._order != nil {
		fields = append(fields, domain.FieldOrder)
	}
	if m.disabled != nil {
		fields = append(fields, domain.FieldDisabled)
	}
	if m.extras != nil {
		fields = append(fields, domain.FieldExtras)
	}
	if m.created_by != nil {
		fields = append(fields, domain.FieldCreatedBy)
	}
	if m.created_at != nil {
		fields = append(fields, domain.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, domain.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DomainMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case domain.FieldName:
		return m.Name()
	case domain.FieldTitle:
		return m.Title()
	case domain.FieldURL:
		return m.URL()
	case domain.FieldLogo:
		return m.Logo()
	case domain.FieldLogoAlt:
		return m.LogoAlt()
	case domain.FieldKeywords:
		return m.Keywords()
	case domain.FieldCopyright:
		return m.Copyright()
	case domain.FieldDescription:
		return m.Description()
	case domain.FieldOrder:
		return m.Order()
	case domain.FieldDisabled:
		return m.Disabled()
	case domain.FieldExtras:
		return m.Extras()
	case domain.FieldCreatedBy:
		return m.CreatedBy()
	case domain.FieldCreatedAt:
		return m.CreatedAt()
	case domain.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DomainMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case domain.FieldName:
		return m.OldName(ctx)
	case domain.FieldTitle:
		return m.OldTitle(ctx)
	case domain.FieldURL:
		return m.OldURL(ctx)
	case domain.FieldLogo:
		return m.OldLogo(ctx)
	case domain.FieldLogoAlt:
		return m.OldLogoAlt(ctx)
	case domain.FieldKeywords:
		return m.OldKeywords(ctx)
	case domain.FieldCopyright:
		return m.OldCopyright(ctx)
	case domain.FieldDescription:
		return m.OldDescription(ctx)
	case domain.FieldOrder:
		return m.OldOrder(ctx)
	case domain.FieldDisabled:
		return m.OldDisabled(ctx)
	case domain.FieldExtras:
		return m.OldExtras(ctx)
	case domain.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case domain.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case domain.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Domain field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DomainMutation) SetField(name string, value ent.Value) error {
	switch name {
	case domain.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case domain.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case domain.FieldURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetURL(v)
		return nil
	case domain.FieldLogo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLogo(v)
		return nil
	case domain.FieldLogoAlt:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLogoAlt(v)
		return nil
	case domain.FieldKeywords:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetKeywords(v)
		return nil
	case domain.FieldCopyright:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCopyright(v)
		return nil
	case domain.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case domain.FieldOrder:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrder(v)
		return nil
	case domain.FieldDisabled:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDisabled(v)
		return nil
	case domain.FieldExtras:
		v, ok := value.(map[string]interface{})
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExtras(v)
		return nil
	case domain.FieldCreatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case domain.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case domain.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Domain field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DomainMutation) AddedFields() []string {
	var fields []string
	if m.add_order != nil {
		fields = append(fields, domain.FieldOrder)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DomainMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case domain.FieldOrder:
		return m.AddedOrder()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DomainMutation) AddField(name string, value ent.Value) error {
	switch name {
	case domain.FieldOrder:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOrder(v)
		return nil
	}
	return fmt.Errorf("unknown Domain numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DomainMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(domain.FieldName) {
		fields = append(fields, domain.FieldName)
	}
	if m.FieldCleared(domain.FieldTitle) {
		fields = append(fields, domain.FieldTitle)
	}
	if m.FieldCleared(domain.FieldURL) {
		fields = append(fields, domain.FieldURL)
	}
	if m.FieldCleared(domain.FieldLogo) {
		fields = append(fields, domain.FieldLogo)
	}
	if m.FieldCleared(domain.FieldLogoAlt) {
		fields = append(fields, domain.FieldLogoAlt)
	}
	if m.FieldCleared(domain.FieldKeywords) {
		fields = append(fields, domain.FieldKeywords)
	}
	if m.FieldCleared(domain.FieldCopyright) {
		fields = append(fields, domain.FieldCopyright)
	}
	if m.FieldCleared(domain.FieldDescription) {
		fields = append(fields, domain.FieldDescription)
	}
	if m.FieldCleared(domain.FieldDisabled) {
		fields = append(fields, domain.FieldDisabled)
	}
	if m.FieldCleared(domain.FieldExtras) {
		fields = append(fields, domain.FieldExtras)
	}
	if m.FieldCleared(domain.FieldCreatedBy) {
		fields = append(fields, domain.FieldCreatedBy)
	}
	if m.FieldCleared(domain.FieldCreatedAt) {
		fields = append(fields, domain.FieldCreatedAt)
	}
	if m.FieldCleared(domain.FieldUpdatedAt) {
		fields = append(fields, domain.FieldUpdatedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DomainMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DomainMutation) ClearField(name string) error {
	switch name {
	case domain.FieldName:
		m.ClearName()
		return nil
	case domain.FieldTitle:
		m.ClearTitle()
		return nil
	case domain.FieldURL:
		m.ClearURL()
		return nil
	case domain.FieldLogo:
		m.ClearLogo()
		return nil
	case domain.FieldLogoAlt:
		m.ClearLogoAlt()
		return nil
	case domain.FieldKeywords:
		m.ClearKeywords()
		return nil
	case domain.FieldCopyright:
		m.ClearCopyright()
		return nil
	case domain.FieldDescription:
		m.ClearDescription()
		return nil
	case domain.FieldDisabled:
		m.ClearDisabled()
		return nil
	case domain.FieldExtras:
		m.ClearExtras()
		return nil
	case domain.FieldCreatedBy:
		m.ClearCreatedBy()
		return nil
	case domain.FieldCreatedAt:
		m.ClearCreatedAt()
		return nil
	case domain.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Domain nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DomainMutation) ResetField(name string) error {
	switch name {
	case domain.FieldName:
		m.ResetName()
		return nil
	case domain.FieldTitle:
		m.ResetTitle()
		return nil
	case domain.FieldURL:
		m.ResetURL()
		return nil
	case domain.FieldLogo:
		m.ResetLogo()
		return nil
	case domain.FieldLogoAlt:
		m.ResetLogoAlt()
		return nil
	case domain.FieldKeywords:
		m.ResetKeywords()
		return nil
	case domain.FieldCopyright:
		m.ResetCopyright()
		return nil
	case domain.FieldDescription:
		m.ResetDescription()
		return nil
	case domain.FieldOrder:
		m.ResetOrder()
		return nil
	case domain.FieldDisabled:
		m.ResetDisabled()
		return nil
	case domain.FieldExtras:
		m.ResetExtras()
		return nil
	case domain.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case domain.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case domain.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Domain field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DomainMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DomainMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DomainMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DomainMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DomainMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DomainMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DomainMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Domain unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DomainMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Domain edge %s", name)
}

// GroupMutation represents an operation that mutates the Group nodes in the graph.
type GroupMutation struct {
	config
	op            Op
	typ           string
	id            *string
	name          *string
	slug          *string
	disabled      *bool
	description   *string
	leader        *map[string]interface{}
	extras        *map[string]interface{}
	parent_id     *string
	domain_id     *string
	created_by    *string
	updated_by    *string
	created_at    *time.Time
	updated_at    *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Group, error)
	predicates    []predicate.Group
}

var _ ent.Mutation = (*GroupMutation)(nil)

// groupOption allows management of the mutation configuration using functional options.
type groupOption func(*GroupMutation)

// newGroupMutation creates new mutation for the Group entity.
func newGroupMutation(c config, op Op, opts ...groupOption) *GroupMutation {
	m := &GroupMutation{
		config:        c,
		op:            op,
		typ:           TypeGroup,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGroupID sets the ID field of the mutation.
func withGroupID(id string) groupOption {
	return func(m *GroupMutation) {
		var (
			err   error
			once  sync.Once
			value *Group
		)
		m.oldValue = func(ctx context.Context) (*Group, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Group.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGroup sets the old Group of the mutation.
func withGroup(node *Group) groupOption {
	return func(m *GroupMutation) {
		m.oldValue = func(context.Context) (*Group, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GroupMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GroupMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Group entities.
func (m *GroupMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GroupMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *GroupMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Group.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *GroupMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *GroupMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Group entity.
// If the Group object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ClearName clears the value of the "name" field.
func (m *GroupMutation) ClearName() {
	m.name = nil
	m.clearedFields[group.FieldName] = struct{}{}
}

// NameCleared returns if the "name" field was cleared in this mutation.
func (m *GroupMutation) NameCleared() bool {
	_, ok := m.clearedFields[group.FieldName]
	return ok
}

// ResetName resets all changes to the "name" field.
func (m *GroupMutation) ResetName() {
	m.name = nil
	delete(m.clearedFields, group.FieldName)
}

// SetSlug sets the "slug" field.
func (m *GroupMutation) SetSlug(s string) {
	m.slug = &s
}

// Slug returns the value of the "slug" field in the mutation.
func (m *GroupMutation) Slug() (r string, exists bool) {
	v := m.slug
	if v == nil {
		return
	}
	return *v, true
}

// OldSlug returns the old "slug" field's value of the Group entity.
// If the Group object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMutation) OldSlug(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSlug is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSlug requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSlug: %w", err)
	}
	return oldValue.Slug, nil
}

// ClearSlug clears the value of the "slug" field.
func (m *GroupMutation) ClearSlug() {
	m.slug = nil
	m.clearedFields[group.FieldSlug] = struct{}{}
}

// SlugCleared returns if the "slug" field was cleared in this mutation.
func (m *GroupMutation) SlugCleared() bool {
	_, ok := m.clearedFields[group.FieldSlug]
	return ok
}

// ResetSlug resets all changes to the "slug" field.
func (m *GroupMutation) ResetSlug() {
	m.slug = nil
	delete(m.clearedFields, group.FieldSlug)
}

// SetDisabled sets the "disabled" field.
func (m *GroupMutation) SetDisabled(b bool) {
	m.disabled = &b
}

// Disabled returns the value of the "disabled" field in the mutation.
func (m *GroupMutation) Disabled() (r bool, exists bool) {
	v := m.disabled
	if v == nil {
		return
	}
	return *v, true
}

// OldDisabled returns the old "disabled" field's value of the Group entity.
// If the Group object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMutation) OldDisabled(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDisabled is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDisabled requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDisabled: %w", err)
	}
	return oldValue.Disabled, nil
}

// ClearDisabled clears the value of the "disabled" field.
func (m *GroupMutation) ClearDisabled() {
	m.disabled = nil
	m.clearedFields[group.FieldDisabled] = struct{}{}
}

// DisabledCleared returns if the "disabled" field was cleared in this mutation.
func (m *GroupMutation) DisabledCleared() bool {
	_, ok := m.clearedFields[group.FieldDisabled]
	return ok
}

// ResetDisabled resets all changes to the "disabled" field.
func (m *GroupMutation) ResetDisabled() {
	m.disabled = nil
	delete(m.clearedFields, group.FieldDisabled)
}

// SetDescription sets the "description" field.
func (m *GroupMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *GroupMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Group entity.
// If the Group object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *GroupMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[group.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *GroupMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[group.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *GroupMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, group.FieldDescription)
}

// SetLeader sets the "leader" field.
func (m *GroupMutation) SetLeader(value map[string]interface{}) {
	m.leader = &value
}

// Leader returns the value of the "leader" field in the mutation.
func (m *GroupMutation) Leader() (r map[string]interface{}, exists bool) {
	v := m.leader
	if v == nil {
		return
	}
	return *v, true
}

// OldLeader returns the old "leader" field's value of the Group entity.
// If the Group object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMutation) OldLeader(ctx context.Context) (v map[string]interface{}, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLeader is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLeader requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLeader: %w", err)
	}
	return oldValue.Leader, nil
}

// ClearLeader clears the value of the "leader" field.
func (m *GroupMutation) ClearLeader() {
	m.leader = nil
	m.clearedFields[group.FieldLeader] = struct{}{}
}

// LeaderCleared returns if the "leader" field was cleared in this mutation.
func (m *GroupMutation) LeaderCleared() bool {
	_, ok := m.clearedFields[group.FieldLeader]
	return ok
}

// ResetLeader resets all changes to the "leader" field.
func (m *GroupMutation) ResetLeader() {
	m.leader = nil
	delete(m.clearedFields, group.FieldLeader)
}

// SetExtras sets the "extras" field.
func (m *GroupMutation) SetExtras(value map[string]interface{}) {
	m.extras = &value
}

// Extras returns the value of the "extras" field in the mutation.
func (m *GroupMutation) Extras() (r map[string]interface{}, exists bool) {
	v := m.extras
	if v == nil {
		return
	}
	return *v, true
}

// OldExtras returns the old "extras" field's value of the Group entity.
// If the Group object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMutation) OldExtras(ctx context.Context) (v map[string]interface{}, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExtras is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExtras requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExtras: %w", err)
	}
	return oldValue.Extras, nil
}

// ClearExtras clears the value of the "extras" field.
func (m *GroupMutation) ClearExtras() {
	m.extras = nil
	m.clearedFields[group.FieldExtras] = struct{}{}
}

// ExtrasCleared returns if the "extras" field was cleared in this mutation.
func (m *GroupMutation) ExtrasCleared() bool {
	_, ok := m.clearedFields[group.FieldExtras]
	return ok
}

// ResetExtras resets all changes to the "extras" field.
func (m *GroupMutation) ResetExtras() {
	m.extras = nil
	delete(m.clearedFields, group.FieldExtras)
}

// SetParentID sets the "parent_id" field.
func (m *GroupMutation) SetParentID(s string) {
	m.parent_id = &s
}

// ParentID returns the value of the "parent_id" field in the mutation.
func (m *GroupMutation) ParentID() (r string, exists bool) {
	v := m.parent_id
	if v == nil {
		return
	}
	return *v, true
}

// OldParentID returns the old "parent_id" field's value of the Group entity.
// If the Group object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMutation) OldParentID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldParentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldParentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldParentID: %w", err)
	}
	return oldValue.ParentID, nil
}

// ClearParentID clears the value of the "parent_id" field.
func (m *GroupMutation) ClearParentID() {
	m.parent_id = nil
	m.clearedFields[group.FieldParentID] = struct{}{}
}

// ParentIDCleared returns if the "parent_id" field was cleared in this mutation.
func (m *GroupMutation) ParentIDCleared() bool {
	_, ok := m.clearedFields[group.FieldParentID]
	return ok
}

// ResetParentID resets all changes to the "parent_id" field.
func (m *GroupMutation) ResetParentID() {
	m.parent_id = nil
	delete(m.clearedFields, group.FieldParentID)
}

// SetDomainID sets the "domain_id" field.
func (m *GroupMutation) SetDomainID(s string) {
	m.domain_id = &s
}

// DomainID returns the value of the "domain_id" field in the mutation.
func (m *GroupMutation) DomainID() (r string, exists bool) {
	v := m.domain_id
	if v == nil {
		return
	}
	return *v, true
}

// OldDomainID returns the old "domain_id" field's value of the Group entity.
// If the Group object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMutation) OldDomainID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDomainID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDomainID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDomainID: %w", err)
	}
	return oldValue.DomainID, nil
}

// ClearDomainID clears the value of the "domain_id" field.
func (m *GroupMutation) ClearDomainID() {
	m.domain_id = nil
	m.clearedFields[group.FieldDomainID] = struct{}{}
}

// DomainIDCleared returns if the "domain_id" field was cleared in this mutation.
func (m *GroupMutation) DomainIDCleared() bool {
	_, ok := m.clearedFields[group.FieldDomainID]
	return ok
}

// ResetDomainID resets all changes to the "domain_id" field.
func (m *GroupMutation) ResetDomainID() {
	m.domain_id = nil
	delete(m.clearedFields, group.FieldDomainID)
}

// SetCreatedBy sets the "created_by" field.
func (m *GroupMutation) SetCreatedBy(s string) {
	m.created_by = &s
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *GroupMutation) CreatedBy() (r string, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the Group entity.
// If the Group object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMutation) OldCreatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// ClearCreatedBy clears the value of the "created_by" field.
func (m *GroupMutation) ClearCreatedBy() {
	m.created_by = nil
	m.clearedFields[group.FieldCreatedBy] = struct{}{}
}

// CreatedByCleared returns if the "created_by" field was cleared in this mutation.
func (m *GroupMutation) CreatedByCleared() bool {
	_, ok := m.clearedFields[group.FieldCreatedBy]
	return ok
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *GroupMutation) ResetCreatedBy() {
	m.created_by = nil
	delete(m.clearedFields, group.FieldCreatedBy)
}

// SetUpdatedBy sets the "updated_by" field.
func (m *GroupMutation) SetUpdatedBy(s string) {
	m.updated_by = &s
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *GroupMutation) UpdatedBy() (r string, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the Group entity.
// If the Group object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMutation) OldUpdatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (m *GroupMutation) ClearUpdatedBy() {
	m.updated_by = nil
	m.clearedFields[group.FieldUpdatedBy] = struct{}{}
}

// UpdatedByCleared returns if the "updated_by" field was cleared in this mutation.
func (m *GroupMutation) UpdatedByCleared() bool {
	_, ok := m.clearedFields[group.FieldUpdatedBy]
	return ok
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *GroupMutation) ResetUpdatedBy() {
	m.updated_by = nil
	delete(m.clearedFields, group.FieldUpdatedBy)
}

// SetCreatedAt sets the "created_at" field.
func (m *GroupMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *GroupMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Group entity.
// If the Group object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ClearCreatedAt clears the value of the "created_at" field.
func (m *GroupMutation) ClearCreatedAt() {
	m.created_at = nil
	m.clearedFields[group.FieldCreatedAt] = struct{}{}
}

// CreatedAtCleared returns if the "created_at" field was cleared in this mutation.
func (m *GroupMutation) CreatedAtCleared() bool {
	_, ok := m.clearedFields[group.FieldCreatedAt]
	return ok
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *GroupMutation) ResetCreatedAt() {
	m.created_at = nil
	delete(m.clearedFields, group.FieldCreatedAt)
}

// SetUpdatedAt sets the "updated_at" field.
func (m *GroupMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *GroupMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Group entity.
// If the Group object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *GroupMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[group.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *GroupMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[group.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *GroupMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, group.FieldUpdatedAt)
}

// Where appends a list predicates to the GroupMutation builder.
func (m *GroupMutation) Where(ps ...predicate.Group) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the GroupMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *GroupMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Group, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *GroupMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *GroupMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Group).
func (m *GroupMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GroupMutation) Fields() []string {
	fields := make([]string, 0, 12)
	if m.name != nil {
		fields = append(fields, group.FieldName)
	}
	if m.slug != nil {
		fields = append(fields, group.FieldSlug)
	}
	if m.disabled != nil {
		fields = append(fields, group.FieldDisabled)
	}
	if m.description != nil {
		fields = append(fields, group.FieldDescription)
	}
	if m.leader != nil {
		fields = append(fields, group.FieldLeader)
	}
	if m.extras != nil {
		fields = append(fields, group.FieldExtras)
	}
	if m.parent_id != nil {
		fields = append(fields, group.FieldParentID)
	}
	if m.domain_id != nil {
		fields = append(fields, group.FieldDomainID)
	}
	if m.created_by != nil {
		fields = append(fields, group.FieldCreatedBy)
	}
	if m.updated_by != nil {
		fields = append(fields, group.FieldUpdatedBy)
	}
	if m.created_at != nil {
		fields = append(fields, group.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, group.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GroupMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case group.FieldName:
		return m.Name()
	case group.FieldSlug:
		return m.Slug()
	case group.FieldDisabled:
		return m.Disabled()
	case group.FieldDescription:
		return m.Description()
	case group.FieldLeader:
		return m.Leader()
	case group.FieldExtras:
		return m.Extras()
	case group.FieldParentID:
		return m.ParentID()
	case group.FieldDomainID:
		return m.DomainID()
	case group.FieldCreatedBy:
		return m.CreatedBy()
	case group.FieldUpdatedBy:
		return m.UpdatedBy()
	case group.FieldCreatedAt:
		return m.CreatedAt()
	case group.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GroupMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case group.FieldName:
		return m.OldName(ctx)
	case group.FieldSlug:
		return m.OldSlug(ctx)
	case group.FieldDisabled:
		return m.OldDisabled(ctx)
	case group.FieldDescription:
		return m.OldDescription(ctx)
	case group.FieldLeader:
		return m.OldLeader(ctx)
	case group.FieldExtras:
		return m.OldExtras(ctx)
	case group.FieldParentID:
		return m.OldParentID(ctx)
	case group.FieldDomainID:
		return m.OldDomainID(ctx)
	case group.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case group.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	case group.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case group.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Group field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GroupMutation) SetField(name string, value ent.Value) error {
	switch name {
	case group.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case group.FieldSlug:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSlug(v)
		return nil
	case group.FieldDisabled:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDisabled(v)
		return nil
	case group.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case group.FieldLeader:
		v, ok := value.(map[string]interface{})
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLeader(v)
		return nil
	case group.FieldExtras:
		v, ok := value.(map[string]interface{})
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExtras(v)
		return nil
	case group.FieldParentID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetParentID(v)
		return nil
	case group.FieldDomainID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDomainID(v)
		return nil
	case group.FieldCreatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case group.FieldUpdatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	case group.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case group.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Group field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GroupMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GroupMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GroupMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Group numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GroupMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(group.FieldName) {
		fields = append(fields, group.FieldName)
	}
	if m.FieldCleared(group.FieldSlug) {
		fields = append(fields, group.FieldSlug)
	}
	if m.FieldCleared(group.FieldDisabled) {
		fields = append(fields, group.FieldDisabled)
	}
	if m.FieldCleared(group.FieldDescription) {
		fields = append(fields, group.FieldDescription)
	}
	if m.FieldCleared(group.FieldLeader) {
		fields = append(fields, group.FieldLeader)
	}
	if m.FieldCleared(group.FieldExtras) {
		fields = append(fields, group.FieldExtras)
	}
	if m.FieldCleared(group.FieldParentID) {
		fields = append(fields, group.FieldParentID)
	}
	if m.FieldCleared(group.FieldDomainID) {
		fields = append(fields, group.FieldDomainID)
	}
	if m.FieldCleared(group.FieldCreatedBy) {
		fields = append(fields, group.FieldCreatedBy)
	}
	if m.FieldCleared(group.FieldUpdatedBy) {
		fields = append(fields, group.FieldUpdatedBy)
	}
	if m.FieldCleared(group.FieldCreatedAt) {
		fields = append(fields, group.FieldCreatedAt)
	}
	if m.FieldCleared(group.FieldUpdatedAt) {
		fields = append(fields, group.FieldUpdatedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GroupMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GroupMutation) ClearField(name string) error {
	switch name {
	case group.FieldName:
		m.ClearName()
		return nil
	case group.FieldSlug:
		m.ClearSlug()
		return nil
	case group.FieldDisabled:
		m.ClearDisabled()
		return nil
	case group.FieldDescription:
		m.ClearDescription()
		return nil
	case group.FieldLeader:
		m.ClearLeader()
		return nil
	case group.FieldExtras:
		m.ClearExtras()
		return nil
	case group.FieldParentID:
		m.ClearParentID()
		return nil
	case group.FieldDomainID:
		m.ClearDomainID()
		return nil
	case group.FieldCreatedBy:
		m.ClearCreatedBy()
		return nil
	case group.FieldUpdatedBy:
		m.ClearUpdatedBy()
		return nil
	case group.FieldCreatedAt:
		m.ClearCreatedAt()
		return nil
	case group.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Group nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GroupMutation) ResetField(name string) error {
	switch name {
	case group.FieldName:
		m.ResetName()
		return nil
	case group.FieldSlug:
		m.ResetSlug()
		return nil
	case group.FieldDisabled:
		m.ResetDisabled()
		return nil
	case group.FieldDescription:
		m.ResetDescription()
		return nil
	case group.FieldLeader:
		m.ResetLeader()
		return nil
	case group.FieldExtras:
		m.ResetExtras()
		return nil
	case group.FieldParentID:
		m.ResetParentID()
		return nil
	case group.FieldDomainID:
		m.ResetDomainID()
		return nil
	case group.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case group.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	case group.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case group.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Group field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GroupMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GroupMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GroupMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GroupMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GroupMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GroupMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GroupMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Group unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GroupMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Group edge %s", name)
}

// GroupRoleMutation represents an operation that mutates the GroupRole nodes in the graph.
type GroupRoleMutation struct {
	config
	op            Op
	typ           string
	id            *string
	role_id       *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*GroupRole, error)
	predicates    []predicate.GroupRole
}

var _ ent.Mutation = (*GroupRoleMutation)(nil)

// grouproleOption allows management of the mutation configuration using functional options.
type grouproleOption func(*GroupRoleMutation)

// newGroupRoleMutation creates new mutation for the GroupRole entity.
func newGroupRoleMutation(c config, op Op, opts ...grouproleOption) *GroupRoleMutation {
	m := &GroupRoleMutation{
		config:        c,
		op:            op,
		typ:           TypeGroupRole,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGroupRoleID sets the ID field of the mutation.
func withGroupRoleID(id string) grouproleOption {
	return func(m *GroupRoleMutation) {
		var (
			err   error
			once  sync.Once
			value *GroupRole
		)
		m.oldValue = func(ctx context.Context) (*GroupRole, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().GroupRole.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGroupRole sets the old GroupRole of the mutation.
func withGroupRole(node *GroupRole) grouproleOption {
	return func(m *GroupRoleMutation) {
		m.oldValue = func(context.Context) (*GroupRole, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GroupRoleMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GroupRoleMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of GroupRole entities.
func (m *GroupRoleMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GroupRoleMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *GroupRoleMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().GroupRole.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetRoleID sets the "role_id" field.
func (m *GroupRoleMutation) SetRoleID(s string) {
	m.role_id = &s
}

// RoleID returns the value of the "role_id" field in the mutation.
func (m *GroupRoleMutation) RoleID() (r string, exists bool) {
	v := m.role_id
	if v == nil {
		return
	}
	return *v, true
}

// OldRoleID returns the old "role_id" field's value of the GroupRole entity.
// If the GroupRole object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupRoleMutation) OldRoleID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRoleID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRoleID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRoleID: %w", err)
	}
	return oldValue.RoleID, nil
}

// ClearRoleID clears the value of the "role_id" field.
func (m *GroupRoleMutation) ClearRoleID() {
	m.role_id = nil
	m.clearedFields[grouprole.FieldRoleID] = struct{}{}
}

// RoleIDCleared returns if the "role_id" field was cleared in this mutation.
func (m *GroupRoleMutation) RoleIDCleared() bool {
	_, ok := m.clearedFields[grouprole.FieldRoleID]
	return ok
}

// ResetRoleID resets all changes to the "role_id" field.
func (m *GroupRoleMutation) ResetRoleID() {
	m.role_id = nil
	delete(m.clearedFields, grouprole.FieldRoleID)
}

// Where appends a list predicates to the GroupRoleMutation builder.
func (m *GroupRoleMutation) Where(ps ...predicate.GroupRole) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the GroupRoleMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *GroupRoleMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.GroupRole, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *GroupRoleMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *GroupRoleMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (GroupRole).
func (m *GroupRoleMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GroupRoleMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.role_id != nil {
		fields = append(fields, grouprole.FieldRoleID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GroupRoleMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case grouprole.FieldRoleID:
		return m.RoleID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GroupRoleMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case grouprole.FieldRoleID:
		return m.OldRoleID(ctx)
	}
	return nil, fmt.Errorf("unknown GroupRole field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GroupRoleMutation) SetField(name string, value ent.Value) error {
	switch name {
	case grouprole.FieldRoleID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRoleID(v)
		return nil
	}
	return fmt.Errorf("unknown GroupRole field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GroupRoleMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GroupRoleMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GroupRoleMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown GroupRole numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GroupRoleMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(grouprole.FieldRoleID) {
		fields = append(fields, grouprole.FieldRoleID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GroupRoleMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GroupRoleMutation) ClearField(name string) error {
	switch name {
	case grouprole.FieldRoleID:
		m.ClearRoleID()
		return nil
	}
	return fmt.Errorf("unknown GroupRole nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GroupRoleMutation) ResetField(name string) error {
	switch name {
	case grouprole.FieldRoleID:
		m.ResetRoleID()
		return nil
	}
	return fmt.Errorf("unknown GroupRole field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GroupRoleMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GroupRoleMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GroupRoleMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GroupRoleMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GroupRoleMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GroupRoleMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GroupRoleMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown GroupRole unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GroupRoleMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown GroupRole edge %s", name)
}

// ModuleMutation represents an operation that mutates the Module nodes in the graph.
type ModuleMutation struct {
	config
	op            Op
	typ           string
	id            *string
	name          *string
	title         *string
	slug          *string
	content       *string
	thumbnail     *string
	temp          *bool
	markdown      *bool
	private       *bool
	status        *int32
	addstatus     *int32
	released      *time.Time
	created_by    *string
	updated_by    *string
	created_at    *time.Time
	updated_at    *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Module, error)
	predicates    []predicate.Module
}

var _ ent.Mutation = (*ModuleMutation)(nil)

// moduleOption allows management of the mutation configuration using functional options.
type moduleOption func(*ModuleMutation)

// newModuleMutation creates new mutation for the Module entity.
func newModuleMutation(c config, op Op, opts ...moduleOption) *ModuleMutation {
	m := &ModuleMutation{
		config:        c,
		op:            op,
		typ:           TypeModule,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withModuleID sets the ID field of the mutation.
func withModuleID(id string) moduleOption {
	return func(m *ModuleMutation) {
		var (
			err   error
			once  sync.Once
			value *Module
		)
		m.oldValue = func(ctx context.Context) (*Module, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Module.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withModule sets the old Module of the mutation.
func withModule(node *Module) moduleOption {
	return func(m *ModuleMutation) {
		m.oldValue = func(context.Context) (*Module, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ModuleMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ModuleMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Module entities.
func (m *ModuleMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ModuleMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ModuleMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Module.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *ModuleMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ModuleMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Module entity.
// If the Module object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ModuleMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ClearName clears the value of the "name" field.
func (m *ModuleMutation) ClearName() {
	m.name = nil
	m.clearedFields[module.FieldName] = struct{}{}
}

// NameCleared returns if the "name" field was cleared in this mutation.
func (m *ModuleMutation) NameCleared() bool {
	_, ok := m.clearedFields[module.FieldName]
	return ok
}

// ResetName resets all changes to the "name" field.
func (m *ModuleMutation) ResetName() {
	m.name = nil
	delete(m.clearedFields, module.FieldName)
}

// SetTitle sets the "title" field.
func (m *ModuleMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *ModuleMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Module entity.
// If the Module object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ModuleMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ClearTitle clears the value of the "title" field.
func (m *ModuleMutation) ClearTitle() {
	m.title = nil
	m.clearedFields[module.FieldTitle] = struct{}{}
}

// TitleCleared returns if the "title" field was cleared in this mutation.
func (m *ModuleMutation) TitleCleared() bool {
	_, ok := m.clearedFields[module.FieldTitle]
	return ok
}

// ResetTitle resets all changes to the "title" field.
func (m *ModuleMutation) ResetTitle() {
	m.title = nil
	delete(m.clearedFields, module.FieldTitle)
}

// SetSlug sets the "slug" field.
func (m *ModuleMutation) SetSlug(s string) {
	m.slug = &s
}

// Slug returns the value of the "slug" field in the mutation.
func (m *ModuleMutation) Slug() (r string, exists bool) {
	v := m.slug
	if v == nil {
		return
	}
	return *v, true
}

// OldSlug returns the old "slug" field's value of the Module entity.
// If the Module object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ModuleMutation) OldSlug(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSlug is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSlug requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSlug: %w", err)
	}
	return oldValue.Slug, nil
}

// ClearSlug clears the value of the "slug" field.
func (m *ModuleMutation) ClearSlug() {
	m.slug = nil
	m.clearedFields[module.FieldSlug] = struct{}{}
}

// SlugCleared returns if the "slug" field was cleared in this mutation.
func (m *ModuleMutation) SlugCleared() bool {
	_, ok := m.clearedFields[module.FieldSlug]
	return ok
}

// ResetSlug resets all changes to the "slug" field.
func (m *ModuleMutation) ResetSlug() {
	m.slug = nil
	delete(m.clearedFields, module.FieldSlug)
}

// SetContent sets the "content" field.
func (m *ModuleMutation) SetContent(s string) {
	m.content = &s
}

// Content returns the value of the "content" field in the mutation.
func (m *ModuleMutation) Content() (r string, exists bool) {
	v := m.content
	if v == nil {
		return
	}
	return *v, true
}

// OldContent returns the old "content" field's value of the Module entity.
// If the Module object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ModuleMutation) OldContent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContent: %w", err)
	}
	return oldValue.Content, nil
}

// ClearContent clears the value of the "content" field.
func (m *ModuleMutation) ClearContent() {
	m.content = nil
	m.clearedFields[module.FieldContent] = struct{}{}
}

// ContentCleared returns if the "content" field was cleared in this mutation.
func (m *ModuleMutation) ContentCleared() bool {
	_, ok := m.clearedFields[module.FieldContent]
	return ok
}

// ResetContent resets all changes to the "content" field.
func (m *ModuleMutation) ResetContent() {
	m.content = nil
	delete(m.clearedFields, module.FieldContent)
}

// SetThumbnail sets the "thumbnail" field.
func (m *ModuleMutation) SetThumbnail(s string) {
	m.thumbnail = &s
}

// Thumbnail returns the value of the "thumbnail" field in the mutation.
func (m *ModuleMutation) Thumbnail() (r string, exists bool) {
	v := m.thumbnail
	if v == nil {
		return
	}
	return *v, true
}

// OldThumbnail returns the old "thumbnail" field's value of the Module entity.
// If the Module object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ModuleMutation) OldThumbnail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldThumbnail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldThumbnail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldThumbnail: %w", err)
	}
	return oldValue.Thumbnail, nil
}

// ClearThumbnail clears the value of the "thumbnail" field.
func (m *ModuleMutation) ClearThumbnail() {
	m.thumbnail = nil
	m.clearedFields[module.FieldThumbnail] = struct{}{}
}

// ThumbnailCleared returns if the "thumbnail" field was cleared in this mutation.
func (m *ModuleMutation) ThumbnailCleared() bool {
	_, ok := m.clearedFields[module.FieldThumbnail]
	return ok
}

// ResetThumbnail resets all changes to the "thumbnail" field.
func (m *ModuleMutation) ResetThumbnail() {
	m.thumbnail = nil
	delete(m.clearedFields, module.FieldThumbnail)
}

// SetTemp sets the "temp" field.
func (m *ModuleMutation) SetTemp(b bool) {
	m.temp = &b
}

// Temp returns the value of the "temp" field in the mutation.
func (m *ModuleMutation) Temp() (r bool, exists bool) {
	v := m.temp
	if v == nil {
		return
	}
	return *v, true
}

// OldTemp returns the old "temp" field's value of the Module entity.
// If the Module object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ModuleMutation) OldTemp(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTemp is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTemp requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTemp: %w", err)
	}
	return oldValue.Temp, nil
}

// ClearTemp clears the value of the "temp" field.
func (m *ModuleMutation) ClearTemp() {
	m.temp = nil
	m.clearedFields[module.FieldTemp] = struct{}{}
}

// TempCleared returns if the "temp" field was cleared in this mutation.
func (m *ModuleMutation) TempCleared() bool {
	_, ok := m.clearedFields[module.FieldTemp]
	return ok
}

// ResetTemp resets all changes to the "temp" field.
func (m *ModuleMutation) ResetTemp() {
	m.temp = nil
	delete(m.clearedFields, module.FieldTemp)
}

// SetMarkdown sets the "markdown" field.
func (m *ModuleMutation) SetMarkdown(b bool) {
	m.markdown = &b
}

// Markdown returns the value of the "markdown" field in the mutation.
func (m *ModuleMutation) Markdown() (r bool, exists bool) {
	v := m.markdown
	if v == nil {
		return
	}
	return *v, true
}

// OldMarkdown returns the old "markdown" field's value of the Module entity.
// If the Module object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ModuleMutation) OldMarkdown(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMarkdown is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMarkdown requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMarkdown: %w", err)
	}
	return oldValue.Markdown, nil
}

// ClearMarkdown clears the value of the "markdown" field.
func (m *ModuleMutation) ClearMarkdown() {
	m.markdown = nil
	m.clearedFields[module.FieldMarkdown] = struct{}{}
}

// MarkdownCleared returns if the "markdown" field was cleared in this mutation.
func (m *ModuleMutation) MarkdownCleared() bool {
	_, ok := m.clearedFields[module.FieldMarkdown]
	return ok
}

// ResetMarkdown resets all changes to the "markdown" field.
func (m *ModuleMutation) ResetMarkdown() {
	m.markdown = nil
	delete(m.clearedFields, module.FieldMarkdown)
}

// SetPrivate sets the "private" field.
func (m *ModuleMutation) SetPrivate(b bool) {
	m.private = &b
}

// Private returns the value of the "private" field in the mutation.
func (m *ModuleMutation) Private() (r bool, exists bool) {
	v := m.private
	if v == nil {
		return
	}
	return *v, true
}

// OldPrivate returns the old "private" field's value of the Module entity.
// If the Module object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ModuleMutation) OldPrivate(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPrivate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPrivate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrivate: %w", err)
	}
	return oldValue.Private, nil
}

// ClearPrivate clears the value of the "private" field.
func (m *ModuleMutation) ClearPrivate() {
	m.private = nil
	m.clearedFields[module.FieldPrivate] = struct{}{}
}

// PrivateCleared returns if the "private" field was cleared in this mutation.
func (m *ModuleMutation) PrivateCleared() bool {
	_, ok := m.clearedFields[module.FieldPrivate]
	return ok
}

// ResetPrivate resets all changes to the "private" field.
func (m *ModuleMutation) ResetPrivate() {
	m.private = nil
	delete(m.clearedFields, module.FieldPrivate)
}

// SetStatus sets the "status" field.
func (m *ModuleMutation) SetStatus(i int32) {
	m.status = &i
	m.addstatus = nil
}

// Status returns the value of the "status" field in the mutation.
func (m *ModuleMutation) Status() (r int32, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Module entity.
// If the Module object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ModuleMutation) OldStatus(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// AddStatus adds i to the "status" field.
func (m *ModuleMutation) AddStatus(i int32) {
	if m.addstatus != nil {
		*m.addstatus += i
	} else {
		m.addstatus = &i
	}
}

// AddedStatus returns the value that was added to the "status" field in this mutation.
func (m *ModuleMutation) AddedStatus() (r int32, exists bool) {
	v := m.addstatus
	if v == nil {
		return
	}
	return *v, true
}

// ResetStatus resets all changes to the "status" field.
func (m *ModuleMutation) ResetStatus() {
	m.status = nil
	m.addstatus = nil
}

// SetReleased sets the "released" field.
func (m *ModuleMutation) SetReleased(t time.Time) {
	m.released = &t
}

// Released returns the value of the "released" field in the mutation.
func (m *ModuleMutation) Released() (r time.Time, exists bool) {
	v := m.released
	if v == nil {
		return
	}
	return *v, true
}

// OldReleased returns the old "released" field's value of the Module entity.
// If the Module object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ModuleMutation) OldReleased(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReleased is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReleased requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReleased: %w", err)
	}
	return oldValue.Released, nil
}

// ClearReleased clears the value of the "released" field.
func (m *ModuleMutation) ClearReleased() {
	m.released = nil
	m.clearedFields[module.FieldReleased] = struct{}{}
}

// ReleasedCleared returns if the "released" field was cleared in this mutation.
func (m *ModuleMutation) ReleasedCleared() bool {
	_, ok := m.clearedFields[module.FieldReleased]
	return ok
}

// ResetReleased resets all changes to the "released" field.
func (m *ModuleMutation) ResetReleased() {
	m.released = nil
	delete(m.clearedFields, module.FieldReleased)
}

// SetCreatedBy sets the "created_by" field.
func (m *ModuleMutation) SetCreatedBy(s string) {
	m.created_by = &s
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *ModuleMutation) CreatedBy() (r string, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the Module entity.
// If the Module object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ModuleMutation) OldCreatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// ClearCreatedBy clears the value of the "created_by" field.
func (m *ModuleMutation) ClearCreatedBy() {
	m.created_by = nil
	m.clearedFields[module.FieldCreatedBy] = struct{}{}
}

// CreatedByCleared returns if the "created_by" field was cleared in this mutation.
func (m *ModuleMutation) CreatedByCleared() bool {
	_, ok := m.clearedFields[module.FieldCreatedBy]
	return ok
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *ModuleMutation) ResetCreatedBy() {
	m.created_by = nil
	delete(m.clearedFields, module.FieldCreatedBy)
}

// SetUpdatedBy sets the "updated_by" field.
func (m *ModuleMutation) SetUpdatedBy(s string) {
	m.updated_by = &s
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *ModuleMutation) UpdatedBy() (r string, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the Module entity.
// If the Module object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ModuleMutation) OldUpdatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (m *ModuleMutation) ClearUpdatedBy() {
	m.updated_by = nil
	m.clearedFields[module.FieldUpdatedBy] = struct{}{}
}

// UpdatedByCleared returns if the "updated_by" field was cleared in this mutation.
func (m *ModuleMutation) UpdatedByCleared() bool {
	_, ok := m.clearedFields[module.FieldUpdatedBy]
	return ok
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *ModuleMutation) ResetUpdatedBy() {
	m.updated_by = nil
	delete(m.clearedFields, module.FieldUpdatedBy)
}

// SetCreatedAt sets the "created_at" field.
func (m *ModuleMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ModuleMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Module entity.
// If the Module object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ModuleMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ClearCreatedAt clears the value of the "created_at" field.
func (m *ModuleMutation) ClearCreatedAt() {
	m.created_at = nil
	m.clearedFields[module.FieldCreatedAt] = struct{}{}
}

// CreatedAtCleared returns if the "created_at" field was cleared in this mutation.
func (m *ModuleMutation) CreatedAtCleared() bool {
	_, ok := m.clearedFields[module.FieldCreatedAt]
	return ok
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ModuleMutation) ResetCreatedAt() {
	m.created_at = nil
	delete(m.clearedFields, module.FieldCreatedAt)
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ModuleMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ModuleMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Module entity.
// If the Module object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ModuleMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *ModuleMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[module.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *ModuleMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[module.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ModuleMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, module.FieldUpdatedAt)
}

// Where appends a list predicates to the ModuleMutation builder.
func (m *ModuleMutation) Where(ps ...predicate.Module) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ModuleMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ModuleMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Module, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ModuleMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ModuleMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Module).
func (m *ModuleMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ModuleMutation) Fields() []string {
	fields := make([]string, 0, 14)
	if m.name != nil {
		fields = append(fields, module.FieldName)
	}
	if m.title != nil {
		fields = append(fields, module.FieldTitle)
	}
	if m.slug != nil {
		fields = append(fields, module.FieldSlug)
	}
	if m.content != nil {
		fields = append(fields, module.FieldContent)
	}
	if m.thumbnail != nil {
		fields = append(fields, module.FieldThumbnail)
	}
	if m.temp != nil {
		fields = append(fields, module.FieldTemp)
	}
	if m.markdown != nil {
		fields = append(fields, module.FieldMarkdown)
	}
	if m.private != nil {
		fields = append(fields, module.FieldPrivate)
	}
	if m.status != nil {
		fields = append(fields, module.FieldStatus)
	}
	if m.released != nil {
		fields = append(fields, module.FieldReleased)
	}
	if m.created_by != nil {
		fields = append(fields, module.FieldCreatedBy)
	}
	if m.updated_by != nil {
		fields = append(fields, module.FieldUpdatedBy)
	}
	if m.created_at != nil {
		fields = append(fields, module.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, module.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ModuleMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case module.FieldName:
		return m.Name()
	case module.FieldTitle:
		return m.Title()
	case module.FieldSlug:
		return m.Slug()
	case module.FieldContent:
		return m.Content()
	case module.FieldThumbnail:
		return m.Thumbnail()
	case module.FieldTemp:
		return m.Temp()
	case module.FieldMarkdown:
		return m.Markdown()
	case module.FieldPrivate:
		return m.Private()
	case module.FieldStatus:
		return m.Status()
	case module.FieldReleased:
		return m.Released()
	case module.FieldCreatedBy:
		return m.CreatedBy()
	case module.FieldUpdatedBy:
		return m.UpdatedBy()
	case module.FieldCreatedAt:
		return m.CreatedAt()
	case module.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ModuleMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case module.FieldName:
		return m.OldName(ctx)
	case module.FieldTitle:
		return m.OldTitle(ctx)
	case module.FieldSlug:
		return m.OldSlug(ctx)
	case module.FieldContent:
		return m.OldContent(ctx)
	case module.FieldThumbnail:
		return m.OldThumbnail(ctx)
	case module.FieldTemp:
		return m.OldTemp(ctx)
	case module.FieldMarkdown:
		return m.OldMarkdown(ctx)
	case module.FieldPrivate:
		return m.OldPrivate(ctx)
	case module.FieldStatus:
		return m.OldStatus(ctx)
	case module.FieldReleased:
		return m.OldReleased(ctx)
	case module.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case module.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	case module.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case module.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Module field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ModuleMutation) SetField(name string, value ent.Value) error {
	switch name {
	case module.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case module.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case module.FieldSlug:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSlug(v)
		return nil
	case module.FieldContent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContent(v)
		return nil
	case module.FieldThumbnail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetThumbnail(v)
		return nil
	case module.FieldTemp:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTemp(v)
		return nil
	case module.FieldMarkdown:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMarkdown(v)
		return nil
	case module.FieldPrivate:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrivate(v)
		return nil
	case module.FieldStatus:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case module.FieldReleased:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReleased(v)
		return nil
	case module.FieldCreatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case module.FieldUpdatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	case module.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case module.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Module field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ModuleMutation) AddedFields() []string {
	var fields []string
	if m.addstatus != nil {
		fields = append(fields, module.FieldStatus)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ModuleMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case module.FieldStatus:
		return m.AddedStatus()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ModuleMutation) AddField(name string, value ent.Value) error {
	switch name {
	case module.FieldStatus:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatus(v)
		return nil
	}
	return fmt.Errorf("unknown Module numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ModuleMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(module.FieldName) {
		fields = append(fields, module.FieldName)
	}
	if m.FieldCleared(module.FieldTitle) {
		fields = append(fields, module.FieldTitle)
	}
	if m.FieldCleared(module.FieldSlug) {
		fields = append(fields, module.FieldSlug)
	}
	if m.FieldCleared(module.FieldContent) {
		fields = append(fields, module.FieldContent)
	}
	if m.FieldCleared(module.FieldThumbnail) {
		fields = append(fields, module.FieldThumbnail)
	}
	if m.FieldCleared(module.FieldTemp) {
		fields = append(fields, module.FieldTemp)
	}
	if m.FieldCleared(module.FieldMarkdown) {
		fields = append(fields, module.FieldMarkdown)
	}
	if m.FieldCleared(module.FieldPrivate) {
		fields = append(fields, module.FieldPrivate)
	}
	if m.FieldCleared(module.FieldReleased) {
		fields = append(fields, module.FieldReleased)
	}
	if m.FieldCleared(module.FieldCreatedBy) {
		fields = append(fields, module.FieldCreatedBy)
	}
	if m.FieldCleared(module.FieldUpdatedBy) {
		fields = append(fields, module.FieldUpdatedBy)
	}
	if m.FieldCleared(module.FieldCreatedAt) {
		fields = append(fields, module.FieldCreatedAt)
	}
	if m.FieldCleared(module.FieldUpdatedAt) {
		fields = append(fields, module.FieldUpdatedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ModuleMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ModuleMutation) ClearField(name string) error {
	switch name {
	case module.FieldName:
		m.ClearName()
		return nil
	case module.FieldTitle:
		m.ClearTitle()
		return nil
	case module.FieldSlug:
		m.ClearSlug()
		return nil
	case module.FieldContent:
		m.ClearContent()
		return nil
	case module.FieldThumbnail:
		m.ClearThumbnail()
		return nil
	case module.FieldTemp:
		m.ClearTemp()
		return nil
	case module.FieldMarkdown:
		m.ClearMarkdown()
		return nil
	case module.FieldPrivate:
		m.ClearPrivate()
		return nil
	case module.FieldReleased:
		m.ClearReleased()
		return nil
	case module.FieldCreatedBy:
		m.ClearCreatedBy()
		return nil
	case module.FieldUpdatedBy:
		m.ClearUpdatedBy()
		return nil
	case module.FieldCreatedAt:
		m.ClearCreatedAt()
		return nil
	case module.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Module nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ModuleMutation) ResetField(name string) error {
	switch name {
	case module.FieldName:
		m.ResetName()
		return nil
	case module.FieldTitle:
		m.ResetTitle()
		return nil
	case module.FieldSlug:
		m.ResetSlug()
		return nil
	case module.FieldContent:
		m.ResetContent()
		return nil
	case module.FieldThumbnail:
		m.ResetThumbnail()
		return nil
	case module.FieldTemp:
		m.ResetTemp()
		return nil
	case module.FieldMarkdown:
		m.ResetMarkdown()
		return nil
	case module.FieldPrivate:
		m.ResetPrivate()
		return nil
	case module.FieldStatus:
		m.ResetStatus()
		return nil
	case module.FieldReleased:
		m.ResetReleased()
		return nil
	case module.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case module.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	case module.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case module.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Module field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ModuleMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ModuleMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ModuleMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ModuleMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ModuleMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ModuleMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ModuleMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Module unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ModuleMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Module edge %s", name)
}

// OAuthUserMutation represents an operation that mutates the OAuthUser nodes in the graph.
type OAuthUserMutation struct {
	config
	op            Op
	typ           string
	id            *string
	oauth_id      *string
	access_token  *string
	provider      *string
	user_id       *string
	created_at    *time.Time
	updated_at    *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*OAuthUser, error)
	predicates    []predicate.OAuthUser
}

var _ ent.Mutation = (*OAuthUserMutation)(nil)

// oauthuserOption allows management of the mutation configuration using functional options.
type oauthuserOption func(*OAuthUserMutation)

// newOAuthUserMutation creates new mutation for the OAuthUser entity.
func newOAuthUserMutation(c config, op Op, opts ...oauthuserOption) *OAuthUserMutation {
	m := &OAuthUserMutation{
		config:        c,
		op:            op,
		typ:           TypeOAuthUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withOAuthUserID sets the ID field of the mutation.
func withOAuthUserID(id string) oauthuserOption {
	return func(m *OAuthUserMutation) {
		var (
			err   error
			once  sync.Once
			value *OAuthUser
		)
		m.oldValue = func(ctx context.Context) (*OAuthUser, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().OAuthUser.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withOAuthUser sets the old OAuthUser of the mutation.
func withOAuthUser(node *OAuthUser) oauthuserOption {
	return func(m *OAuthUserMutation) {
		m.oldValue = func(context.Context) (*OAuthUser, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m OAuthUserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m OAuthUserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of OAuthUser entities.
func (m *OAuthUserMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *OAuthUserMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *OAuthUserMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().OAuthUser.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetOauthID sets the "oauth_id" field.
func (m *OAuthUserMutation) SetOauthID(s string) {
	m.oauth_id = &s
}

// OauthID returns the value of the "oauth_id" field in the mutation.
func (m *OAuthUserMutation) OauthID() (r string, exists bool) {
	v := m.oauth_id
	if v == nil {
		return
	}
	return *v, true
}

// OldOauthID returns the old "oauth_id" field's value of the OAuthUser entity.
// If the OAuthUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OAuthUserMutation) OldOauthID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOauthID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOauthID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOauthID: %w", err)
	}
	return oldValue.OauthID, nil
}

// ClearOauthID clears the value of the "oauth_id" field.
func (m *OAuthUserMutation) ClearOauthID() {
	m.oauth_id = nil
	m.clearedFields[oauthuser.FieldOauthID] = struct{}{}
}

// OauthIDCleared returns if the "oauth_id" field was cleared in this mutation.
func (m *OAuthUserMutation) OauthIDCleared() bool {
	_, ok := m.clearedFields[oauthuser.FieldOauthID]
	return ok
}

// ResetOauthID resets all changes to the "oauth_id" field.
func (m *OAuthUserMutation) ResetOauthID() {
	m.oauth_id = nil
	delete(m.clearedFields, oauthuser.FieldOauthID)
}

// SetAccessToken sets the "access_token" field.
func (m *OAuthUserMutation) SetAccessToken(s string) {
	m.access_token = &s
}

// AccessToken returns the value of the "access_token" field in the mutation.
func (m *OAuthUserMutation) AccessToken() (r string, exists bool) {
	v := m.access_token
	if v == nil {
		return
	}
	return *v, true
}

// OldAccessToken returns the old "access_token" field's value of the OAuthUser entity.
// If the OAuthUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OAuthUserMutation) OldAccessToken(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAccessToken is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAccessToken requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAccessToken: %w", err)
	}
	return oldValue.AccessToken, nil
}

// ResetAccessToken resets all changes to the "access_token" field.
func (m *OAuthUserMutation) ResetAccessToken() {
	m.access_token = nil
}

// SetProvider sets the "provider" field.
func (m *OAuthUserMutation) SetProvider(s string) {
	m.provider = &s
}

// Provider returns the value of the "provider" field in the mutation.
func (m *OAuthUserMutation) Provider() (r string, exists bool) {
	v := m.provider
	if v == nil {
		return
	}
	return *v, true
}

// OldProvider returns the old "provider" field's value of the OAuthUser entity.
// If the OAuthUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OAuthUserMutation) OldProvider(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProvider is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProvider requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProvider: %w", err)
	}
	return oldValue.Provider, nil
}

// ClearProvider clears the value of the "provider" field.
func (m *OAuthUserMutation) ClearProvider() {
	m.provider = nil
	m.clearedFields[oauthuser.FieldProvider] = struct{}{}
}

// ProviderCleared returns if the "provider" field was cleared in this mutation.
func (m *OAuthUserMutation) ProviderCleared() bool {
	_, ok := m.clearedFields[oauthuser.FieldProvider]
	return ok
}

// ResetProvider resets all changes to the "provider" field.
func (m *OAuthUserMutation) ResetProvider() {
	m.provider = nil
	delete(m.clearedFields, oauthuser.FieldProvider)
}

// SetUserID sets the "user_id" field.
func (m *OAuthUserMutation) SetUserID(s string) {
	m.user_id = &s
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *OAuthUserMutation) UserID() (r string, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the OAuthUser entity.
// If the OAuthUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OAuthUserMutation) OldUserID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ClearUserID clears the value of the "user_id" field.
func (m *OAuthUserMutation) ClearUserID() {
	m.user_id = nil
	m.clearedFields[oauthuser.FieldUserID] = struct{}{}
}

// UserIDCleared returns if the "user_id" field was cleared in this mutation.
func (m *OAuthUserMutation) UserIDCleared() bool {
	_, ok := m.clearedFields[oauthuser.FieldUserID]
	return ok
}

// ResetUserID resets all changes to the "user_id" field.
func (m *OAuthUserMutation) ResetUserID() {
	m.user_id = nil
	delete(m.clearedFields, oauthuser.FieldUserID)
}

// SetCreatedAt sets the "created_at" field.
func (m *OAuthUserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *OAuthUserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the OAuthUser entity.
// If the OAuthUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OAuthUserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ClearCreatedAt clears the value of the "created_at" field.
func (m *OAuthUserMutation) ClearCreatedAt() {
	m.created_at = nil
	m.clearedFields[oauthuser.FieldCreatedAt] = struct{}{}
}

// CreatedAtCleared returns if the "created_at" field was cleared in this mutation.
func (m *OAuthUserMutation) CreatedAtCleared() bool {
	_, ok := m.clearedFields[oauthuser.FieldCreatedAt]
	return ok
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *OAuthUserMutation) ResetCreatedAt() {
	m.created_at = nil
	delete(m.clearedFields, oauthuser.FieldCreatedAt)
}

// SetUpdatedAt sets the "updated_at" field.
func (m *OAuthUserMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *OAuthUserMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the OAuthUser entity.
// If the OAuthUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OAuthUserMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *OAuthUserMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[oauthuser.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *OAuthUserMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[oauthuser.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *OAuthUserMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, oauthuser.FieldUpdatedAt)
}

// Where appends a list predicates to the OAuthUserMutation builder.
func (m *OAuthUserMutation) Where(ps ...predicate.OAuthUser) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the OAuthUserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *OAuthUserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.OAuthUser, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *OAuthUserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *OAuthUserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (OAuthUser).
func (m *OAuthUserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *OAuthUserMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.oauth_id != nil {
		fields = append(fields, oauthuser.FieldOauthID)
	}
	if m.access_token != nil {
		fields = append(fields, oauthuser.FieldAccessToken)
	}
	if m.provider != nil {
		fields = append(fields, oauthuser.FieldProvider)
	}
	if m.user_id != nil {
		fields = append(fields, oauthuser.FieldUserID)
	}
	if m.created_at != nil {
		fields = append(fields, oauthuser.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, oauthuser.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *OAuthUserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case oauthuser.FieldOauthID:
		return m.OauthID()
	case oauthuser.FieldAccessToken:
		return m.AccessToken()
	case oauthuser.FieldProvider:
		return m.Provider()
	case oauthuser.FieldUserID:
		return m.UserID()
	case oauthuser.FieldCreatedAt:
		return m.CreatedAt()
	case oauthuser.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *OAuthUserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case oauthuser.FieldOauthID:
		return m.OldOauthID(ctx)
	case oauthuser.FieldAccessToken:
		return m.OldAccessToken(ctx)
	case oauthuser.FieldProvider:
		return m.OldProvider(ctx)
	case oauthuser.FieldUserID:
		return m.OldUserID(ctx)
	case oauthuser.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case oauthuser.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown OAuthUser field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OAuthUserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case oauthuser.FieldOauthID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOauthID(v)
		return nil
	case oauthuser.FieldAccessToken:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAccessToken(v)
		return nil
	case oauthuser.FieldProvider:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProvider(v)
		return nil
	case oauthuser.FieldUserID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case oauthuser.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case oauthuser.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown OAuthUser field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *OAuthUserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *OAuthUserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OAuthUserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown OAuthUser numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *OAuthUserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(oauthuser.FieldOauthID) {
		fields = append(fields, oauthuser.FieldOauthID)
	}
	if m.FieldCleared(oauthuser.FieldProvider) {
		fields = append(fields, oauthuser.FieldProvider)
	}
	if m.FieldCleared(oauthuser.FieldUserID) {
		fields = append(fields, oauthuser.FieldUserID)
	}
	if m.FieldCleared(oauthuser.FieldCreatedAt) {
		fields = append(fields, oauthuser.FieldCreatedAt)
	}
	if m.FieldCleared(oauthuser.FieldUpdatedAt) {
		fields = append(fields, oauthuser.FieldUpdatedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *OAuthUserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *OAuthUserMutation) ClearField(name string) error {
	switch name {
	case oauthuser.FieldOauthID:
		m.ClearOauthID()
		return nil
	case oauthuser.FieldProvider:
		m.ClearProvider()
		return nil
	case oauthuser.FieldUserID:
		m.ClearUserID()
		return nil
	case oauthuser.FieldCreatedAt:
		m.ClearCreatedAt()
		return nil
	case oauthuser.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown OAuthUser nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *OAuthUserMutation) ResetField(name string) error {
	switch name {
	case oauthuser.FieldOauthID:
		m.ResetOauthID()
		return nil
	case oauthuser.FieldAccessToken:
		m.ResetAccessToken()
		return nil
	case oauthuser.FieldProvider:
		m.ResetProvider()
		return nil
	case oauthuser.FieldUserID:
		m.ResetUserID()
		return nil
	case oauthuser.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case oauthuser.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown OAuthUser field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *OAuthUserMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *OAuthUserMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *OAuthUserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *OAuthUserMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *OAuthUserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *OAuthUserMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *OAuthUserMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown OAuthUser unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *OAuthUserMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown OAuthUser edge %s", name)
}

// PermissionMutation represents an operation that mutates the Permission nodes in the graph.
type PermissionMutation struct {
	config
	op            Op
	typ           string
	id            *string
	name          *string
	action        *string
	subject       *string
	description   *string
	_default      *bool
	disabled      *bool
	extras        *map[string]interface{}
	created_by    *string
	updated_by    *string
	created_at    *time.Time
	updated_at    *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Permission, error)
	predicates    []predicate.Permission
}

var _ ent.Mutation = (*PermissionMutation)(nil)

// permissionOption allows management of the mutation configuration using functional options.
type permissionOption func(*PermissionMutation)

// newPermissionMutation creates new mutation for the Permission entity.
func newPermissionMutation(c config, op Op, opts ...permissionOption) *PermissionMutation {
	m := &PermissionMutation{
		config:        c,
		op:            op,
		typ:           TypePermission,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPermissionID sets the ID field of the mutation.
func withPermissionID(id string) permissionOption {
	return func(m *PermissionMutation) {
		var (
			err   error
			once  sync.Once
			value *Permission
		)
		m.oldValue = func(ctx context.Context) (*Permission, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Permission.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPermission sets the old Permission of the mutation.
func withPermission(node *Permission) permissionOption {
	return func(m *PermissionMutation) {
		m.oldValue = func(context.Context) (*Permission, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PermissionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PermissionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Permission entities.
func (m *PermissionMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PermissionMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PermissionMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Permission.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *PermissionMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *PermissionMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Permission entity.
// If the Permission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PermissionMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ClearName clears the value of the "name" field.
func (m *PermissionMutation) ClearName() {
	m.name = nil
	m.clearedFields[permission.FieldName] = struct{}{}
}

// NameCleared returns if the "name" field was cleared in this mutation.
func (m *PermissionMutation) NameCleared() bool {
	_, ok := m.clearedFields[permission.FieldName]
	return ok
}

// ResetName resets all changes to the "name" field.
func (m *PermissionMutation) ResetName() {
	m.name = nil
	delete(m.clearedFields, permission.FieldName)
}

// SetAction sets the "action" field.
func (m *PermissionMutation) SetAction(s string) {
	m.action = &s
}

// Action returns the value of the "action" field in the mutation.
func (m *PermissionMutation) Action() (r string, exists bool) {
	v := m.action
	if v == nil {
		return
	}
	return *v, true
}

// OldAction returns the old "action" field's value of the Permission entity.
// If the Permission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PermissionMutation) OldAction(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAction is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAction requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAction: %w", err)
	}
	return oldValue.Action, nil
}

// ClearAction clears the value of the "action" field.
func (m *PermissionMutation) ClearAction() {
	m.action = nil
	m.clearedFields[permission.FieldAction] = struct{}{}
}

// ActionCleared returns if the "action" field was cleared in this mutation.
func (m *PermissionMutation) ActionCleared() bool {
	_, ok := m.clearedFields[permission.FieldAction]
	return ok
}

// ResetAction resets all changes to the "action" field.
func (m *PermissionMutation) ResetAction() {
	m.action = nil
	delete(m.clearedFields, permission.FieldAction)
}

// SetSubject sets the "subject" field.
func (m *PermissionMutation) SetSubject(s string) {
	m.subject = &s
}

// Subject returns the value of the "subject" field in the mutation.
func (m *PermissionMutation) Subject() (r string, exists bool) {
	v := m.subject
	if v == nil {
		return
	}
	return *v, true
}

// OldSubject returns the old "subject" field's value of the Permission entity.
// If the Permission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PermissionMutation) OldSubject(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSubject is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSubject requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSubject: %w", err)
	}
	return oldValue.Subject, nil
}

// ClearSubject clears the value of the "subject" field.
func (m *PermissionMutation) ClearSubject() {
	m.subject = nil
	m.clearedFields[permission.FieldSubject] = struct{}{}
}

// SubjectCleared returns if the "subject" field was cleared in this mutation.
func (m *PermissionMutation) SubjectCleared() bool {
	_, ok := m.clearedFields[permission.FieldSubject]
	return ok
}

// ResetSubject resets all changes to the "subject" field.
func (m *PermissionMutation) ResetSubject() {
	m.subject = nil
	delete(m.clearedFields, permission.FieldSubject)
}

// SetDescription sets the "description" field.
func (m *PermissionMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *PermissionMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Permission entity.
// If the Permission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PermissionMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *PermissionMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[permission.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *PermissionMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[permission.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *PermissionMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, permission.FieldDescription)
}

// SetDefault sets the "default" field.
func (m *PermissionMutation) SetDefault(b bool) {
	m._default = &b
}

// Default returns the value of the "default" field in the mutation.
func (m *PermissionMutation) Default() (r bool, exists bool) {
	v := m._default
	if v == nil {
		return
	}
	return *v, true
}

// OldDefault returns the old "default" field's value of the Permission entity.
// If the Permission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PermissionMutation) OldDefault(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDefault is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDefault requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDefault: %w", err)
	}
	return oldValue.Default, nil
}

// ClearDefault clears the value of the "default" field.
func (m *PermissionMutation) ClearDefault() {
	m._default = nil
	m.clearedFields[permission.FieldDefault] = struct{}{}
}

// DefaultCleared returns if the "default" field was cleared in this mutation.
func (m *PermissionMutation) DefaultCleared() bool {
	_, ok := m.clearedFields[permission.FieldDefault]
	return ok
}

// ResetDefault resets all changes to the "default" field.
func (m *PermissionMutation) ResetDefault() {
	m._default = nil
	delete(m.clearedFields, permission.FieldDefault)
}

// SetDisabled sets the "disabled" field.
func (m *PermissionMutation) SetDisabled(b bool) {
	m.disabled = &b
}

// Disabled returns the value of the "disabled" field in the mutation.
func (m *PermissionMutation) Disabled() (r bool, exists bool) {
	v := m.disabled
	if v == nil {
		return
	}
	return *v, true
}

// OldDisabled returns the old "disabled" field's value of the Permission entity.
// If the Permission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PermissionMutation) OldDisabled(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDisabled is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDisabled requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDisabled: %w", err)
	}
	return oldValue.Disabled, nil
}

// ClearDisabled clears the value of the "disabled" field.
func (m *PermissionMutation) ClearDisabled() {
	m.disabled = nil
	m.clearedFields[permission.FieldDisabled] = struct{}{}
}

// DisabledCleared returns if the "disabled" field was cleared in this mutation.
func (m *PermissionMutation) DisabledCleared() bool {
	_, ok := m.clearedFields[permission.FieldDisabled]
	return ok
}

// ResetDisabled resets all changes to the "disabled" field.
func (m *PermissionMutation) ResetDisabled() {
	m.disabled = nil
	delete(m.clearedFields, permission.FieldDisabled)
}

// SetExtras sets the "extras" field.
func (m *PermissionMutation) SetExtras(value map[string]interface{}) {
	m.extras = &value
}

// Extras returns the value of the "extras" field in the mutation.
func (m *PermissionMutation) Extras() (r map[string]interface{}, exists bool) {
	v := m.extras
	if v == nil {
		return
	}
	return *v, true
}

// OldExtras returns the old "extras" field's value of the Permission entity.
// If the Permission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PermissionMutation) OldExtras(ctx context.Context) (v map[string]interface{}, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExtras is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExtras requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExtras: %w", err)
	}
	return oldValue.Extras, nil
}

// ClearExtras clears the value of the "extras" field.
func (m *PermissionMutation) ClearExtras() {
	m.extras = nil
	m.clearedFields[permission.FieldExtras] = struct{}{}
}

// ExtrasCleared returns if the "extras" field was cleared in this mutation.
func (m *PermissionMutation) ExtrasCleared() bool {
	_, ok := m.clearedFields[permission.FieldExtras]
	return ok
}

// ResetExtras resets all changes to the "extras" field.
func (m *PermissionMutation) ResetExtras() {
	m.extras = nil
	delete(m.clearedFields, permission.FieldExtras)
}

// SetCreatedBy sets the "created_by" field.
func (m *PermissionMutation) SetCreatedBy(s string) {
	m.created_by = &s
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *PermissionMutation) CreatedBy() (r string, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the Permission entity.
// If the Permission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PermissionMutation) OldCreatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// ClearCreatedBy clears the value of the "created_by" field.
func (m *PermissionMutation) ClearCreatedBy() {
	m.created_by = nil
	m.clearedFields[permission.FieldCreatedBy] = struct{}{}
}

// CreatedByCleared returns if the "created_by" field was cleared in this mutation.
func (m *PermissionMutation) CreatedByCleared() bool {
	_, ok := m.clearedFields[permission.FieldCreatedBy]
	return ok
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *PermissionMutation) ResetCreatedBy() {
	m.created_by = nil
	delete(m.clearedFields, permission.FieldCreatedBy)
}

// SetUpdatedBy sets the "updated_by" field.
func (m *PermissionMutation) SetUpdatedBy(s string) {
	m.updated_by = &s
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *PermissionMutation) UpdatedBy() (r string, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the Permission entity.
// If the Permission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PermissionMutation) OldUpdatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (m *PermissionMutation) ClearUpdatedBy() {
	m.updated_by = nil
	m.clearedFields[permission.FieldUpdatedBy] = struct{}{}
}

// UpdatedByCleared returns if the "updated_by" field was cleared in this mutation.
func (m *PermissionMutation) UpdatedByCleared() bool {
	_, ok := m.clearedFields[permission.FieldUpdatedBy]
	return ok
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *PermissionMutation) ResetUpdatedBy() {
	m.updated_by = nil
	delete(m.clearedFields, permission.FieldUpdatedBy)
}

// SetCreatedAt sets the "created_at" field.
func (m *PermissionMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *PermissionMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Permission entity.
// If the Permission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PermissionMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ClearCreatedAt clears the value of the "created_at" field.
func (m *PermissionMutation) ClearCreatedAt() {
	m.created_at = nil
	m.clearedFields[permission.FieldCreatedAt] = struct{}{}
}

// CreatedAtCleared returns if the "created_at" field was cleared in this mutation.
func (m *PermissionMutation) CreatedAtCleared() bool {
	_, ok := m.clearedFields[permission.FieldCreatedAt]
	return ok
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *PermissionMutation) ResetCreatedAt() {
	m.created_at = nil
	delete(m.clearedFields, permission.FieldCreatedAt)
}

// SetUpdatedAt sets the "updated_at" field.
func (m *PermissionMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *PermissionMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Permission entity.
// If the Permission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PermissionMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *PermissionMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[permission.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *PermissionMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[permission.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *PermissionMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, permission.FieldUpdatedAt)
}

// Where appends a list predicates to the PermissionMutation builder.
func (m *PermissionMutation) Where(ps ...predicate.Permission) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PermissionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PermissionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Permission, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PermissionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PermissionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Permission).
func (m *PermissionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PermissionMutation) Fields() []string {
	fields := make([]string, 0, 11)
	if m.name != nil {
		fields = append(fields, permission.FieldName)
	}
	if m.action != nil {
		fields = append(fields, permission.FieldAction)
	}
	if m.subject != nil {
		fields = append(fields, permission.FieldSubject)
	}
	if m.description != nil {
		fields = append(fields, permission.FieldDescription)
	}
	if m._default != nil {
		fields = append(fields, permission.FieldDefault)
	}
	if m.disabled != nil {
		fields = append(fields, permission.FieldDisabled)
	}
	if m.extras != nil {
		fields = append(fields, permission.FieldExtras)
	}
	if m.created_by != nil {
		fields = append(fields, permission.FieldCreatedBy)
	}
	if m.updated_by != nil {
		fields = append(fields, permission.FieldUpdatedBy)
	}
	if m.created_at != nil {
		fields = append(fields, permission.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, permission.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PermissionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case permission.FieldName:
		return m.Name()
	case permission.FieldAction:
		return m.Action()
	case permission.FieldSubject:
		return m.Subject()
	case permission.FieldDescription:
		return m.Description()
	case permission.FieldDefault:
		return m.Default()
	case permission.FieldDisabled:
		return m.Disabled()
	case permission.FieldExtras:
		return m.Extras()
	case permission.FieldCreatedBy:
		return m.CreatedBy()
	case permission.FieldUpdatedBy:
		return m.UpdatedBy()
	case permission.FieldCreatedAt:
		return m.CreatedAt()
	case permission.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PermissionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case permission.FieldName:
		return m.OldName(ctx)
	case permission.FieldAction:
		return m.OldAction(ctx)
	case permission.FieldSubject:
		return m.OldSubject(ctx)
	case permission.FieldDescription:
		return m.OldDescription(ctx)
	case permission.FieldDefault:
		return m.OldDefault(ctx)
	case permission.FieldDisabled:
		return m.OldDisabled(ctx)
	case permission.FieldExtras:
		return m.OldExtras(ctx)
	case permission.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case permission.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	case permission.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case permission.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Permission field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PermissionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case permission.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case permission.FieldAction:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAction(v)
		return nil
	case permission.FieldSubject:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSubject(v)
		return nil
	case permission.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case permission.FieldDefault:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDefault(v)
		return nil
	case permission.FieldDisabled:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDisabled(v)
		return nil
	case permission.FieldExtras:
		v, ok := value.(map[string]interface{})
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExtras(v)
		return nil
	case permission.FieldCreatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case permission.FieldUpdatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	case permission.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case permission.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Permission field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PermissionMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PermissionMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PermissionMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Permission numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PermissionMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(permission.FieldName) {
		fields = append(fields, permission.FieldName)
	}
	if m.FieldCleared(permission.FieldAction) {
		fields = append(fields, permission.FieldAction)
	}
	if m.FieldCleared(permission.FieldSubject) {
		fields = append(fields, permission.FieldSubject)
	}
	if m.FieldCleared(permission.FieldDescription) {
		fields = append(fields, permission.FieldDescription)
	}
	if m.FieldCleared(permission.FieldDefault) {
		fields = append(fields, permission.FieldDefault)
	}
	if m.FieldCleared(permission.FieldDisabled) {
		fields = append(fields, permission.FieldDisabled)
	}
	if m.FieldCleared(permission.FieldExtras) {
		fields = append(fields, permission.FieldExtras)
	}
	if m.FieldCleared(permission.FieldCreatedBy) {
		fields = append(fields, permission.FieldCreatedBy)
	}
	if m.FieldCleared(permission.FieldUpdatedBy) {
		fields = append(fields, permission.FieldUpdatedBy)
	}
	if m.FieldCleared(permission.FieldCreatedAt) {
		fields = append(fields, permission.FieldCreatedAt)
	}
	if m.FieldCleared(permission.FieldUpdatedAt) {
		fields = append(fields, permission.FieldUpdatedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PermissionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PermissionMutation) ClearField(name string) error {
	switch name {
	case permission.FieldName:
		m.ClearName()
		return nil
	case permission.FieldAction:
		m.ClearAction()
		return nil
	case permission.FieldSubject:
		m.ClearSubject()
		return nil
	case permission.FieldDescription:
		m.ClearDescription()
		return nil
	case permission.FieldDefault:
		m.ClearDefault()
		return nil
	case permission.FieldDisabled:
		m.ClearDisabled()
		return nil
	case permission.FieldExtras:
		m.ClearExtras()
		return nil
	case permission.FieldCreatedBy:
		m.ClearCreatedBy()
		return nil
	case permission.FieldUpdatedBy:
		m.ClearUpdatedBy()
		return nil
	case permission.FieldCreatedAt:
		m.ClearCreatedAt()
		return nil
	case permission.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Permission nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PermissionMutation) ResetField(name string) error {
	switch name {
	case permission.FieldName:
		m.ResetName()
		return nil
	case permission.FieldAction:
		m.ResetAction()
		return nil
	case permission.FieldSubject:
		m.ResetSubject()
		return nil
	case permission.FieldDescription:
		m.ResetDescription()
		return nil
	case permission.FieldDefault:
		m.ResetDefault()
		return nil
	case permission.FieldDisabled:
		m.ResetDisabled()
		return nil
	case permission.FieldExtras:
		m.ResetExtras()
		return nil
	case permission.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case permission.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	case permission.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case permission.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Permission field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PermissionMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PermissionMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PermissionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PermissionMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PermissionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PermissionMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PermissionMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Permission unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PermissionMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Permission edge %s", name)
}

// RoleMutation represents an operation that mutates the Role nodes in the graph.
type RoleMutation struct {
	config
	op            Op
	typ           string
	id            *string
	name          *string
	slug          *string
	disabled      *bool
	description   *string
	extras        *map[string]interface{}
	created_by    *string
	updated_by    *string
	created_at    *time.Time
	updated_at    *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Role, error)
	predicates    []predicate.Role
}

var _ ent.Mutation = (*RoleMutation)(nil)

// roleOption allows management of the mutation configuration using functional options.
type roleOption func(*RoleMutation)

// newRoleMutation creates new mutation for the Role entity.
func newRoleMutation(c config, op Op, opts ...roleOption) *RoleMutation {
	m := &RoleMutation{
		config:        c,
		op:            op,
		typ:           TypeRole,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRoleID sets the ID field of the mutation.
func withRoleID(id string) roleOption {
	return func(m *RoleMutation) {
		var (
			err   error
			once  sync.Once
			value *Role
		)
		m.oldValue = func(ctx context.Context) (*Role, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Role.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRole sets the old Role of the mutation.
func withRole(node *Role) roleOption {
	return func(m *RoleMutation) {
		m.oldValue = func(context.Context) (*Role, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RoleMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RoleMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Role entities.
func (m *RoleMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *RoleMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *RoleMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Role.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *RoleMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *RoleMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Role entity.
// If the Role object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoleMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ClearName clears the value of the "name" field.
func (m *RoleMutation) ClearName() {
	m.name = nil
	m.clearedFields[role.FieldName] = struct{}{}
}

// NameCleared returns if the "name" field was cleared in this mutation.
func (m *RoleMutation) NameCleared() bool {
	_, ok := m.clearedFields[role.FieldName]
	return ok
}

// ResetName resets all changes to the "name" field.
func (m *RoleMutation) ResetName() {
	m.name = nil
	delete(m.clearedFields, role.FieldName)
}

// SetSlug sets the "slug" field.
func (m *RoleMutation) SetSlug(s string) {
	m.slug = &s
}

// Slug returns the value of the "slug" field in the mutation.
func (m *RoleMutation) Slug() (r string, exists bool) {
	v := m.slug
	if v == nil {
		return
	}
	return *v, true
}

// OldSlug returns the old "slug" field's value of the Role entity.
// If the Role object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoleMutation) OldSlug(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSlug is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSlug requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSlug: %w", err)
	}
	return oldValue.Slug, nil
}

// ClearSlug clears the value of the "slug" field.
func (m *RoleMutation) ClearSlug() {
	m.slug = nil
	m.clearedFields[role.FieldSlug] = struct{}{}
}

// SlugCleared returns if the "slug" field was cleared in this mutation.
func (m *RoleMutation) SlugCleared() bool {
	_, ok := m.clearedFields[role.FieldSlug]
	return ok
}

// ResetSlug resets all changes to the "slug" field.
func (m *RoleMutation) ResetSlug() {
	m.slug = nil
	delete(m.clearedFields, role.FieldSlug)
}

// SetDisabled sets the "disabled" field.
func (m *RoleMutation) SetDisabled(b bool) {
	m.disabled = &b
}

// Disabled returns the value of the "disabled" field in the mutation.
func (m *RoleMutation) Disabled() (r bool, exists bool) {
	v := m.disabled
	if v == nil {
		return
	}
	return *v, true
}

// OldDisabled returns the old "disabled" field's value of the Role entity.
// If the Role object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoleMutation) OldDisabled(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDisabled is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDisabled requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDisabled: %w", err)
	}
	return oldValue.Disabled, nil
}

// ClearDisabled clears the value of the "disabled" field.
func (m *RoleMutation) ClearDisabled() {
	m.disabled = nil
	m.clearedFields[role.FieldDisabled] = struct{}{}
}

// DisabledCleared returns if the "disabled" field was cleared in this mutation.
func (m *RoleMutation) DisabledCleared() bool {
	_, ok := m.clearedFields[role.FieldDisabled]
	return ok
}

// ResetDisabled resets all changes to the "disabled" field.
func (m *RoleMutation) ResetDisabled() {
	m.disabled = nil
	delete(m.clearedFields, role.FieldDisabled)
}

// SetDescription sets the "description" field.
func (m *RoleMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *RoleMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Role entity.
// If the Role object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoleMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *RoleMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[role.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *RoleMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[role.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *RoleMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, role.FieldDescription)
}

// SetExtras sets the "extras" field.
func (m *RoleMutation) SetExtras(value map[string]interface{}) {
	m.extras = &value
}

// Extras returns the value of the "extras" field in the mutation.
func (m *RoleMutation) Extras() (r map[string]interface{}, exists bool) {
	v := m.extras
	if v == nil {
		return
	}
	return *v, true
}

// OldExtras returns the old "extras" field's value of the Role entity.
// If the Role object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoleMutation) OldExtras(ctx context.Context) (v map[string]interface{}, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExtras is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExtras requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExtras: %w", err)
	}
	return oldValue.Extras, nil
}

// ClearExtras clears the value of the "extras" field.
func (m *RoleMutation) ClearExtras() {
	m.extras = nil
	m.clearedFields[role.FieldExtras] = struct{}{}
}

// ExtrasCleared returns if the "extras" field was cleared in this mutation.
func (m *RoleMutation) ExtrasCleared() bool {
	_, ok := m.clearedFields[role.FieldExtras]
	return ok
}

// ResetExtras resets all changes to the "extras" field.
func (m *RoleMutation) ResetExtras() {
	m.extras = nil
	delete(m.clearedFields, role.FieldExtras)
}

// SetCreatedBy sets the "created_by" field.
func (m *RoleMutation) SetCreatedBy(s string) {
	m.created_by = &s
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *RoleMutation) CreatedBy() (r string, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the Role entity.
// If the Role object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoleMutation) OldCreatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// ClearCreatedBy clears the value of the "created_by" field.
func (m *RoleMutation) ClearCreatedBy() {
	m.created_by = nil
	m.clearedFields[role.FieldCreatedBy] = struct{}{}
}

// CreatedByCleared returns if the "created_by" field was cleared in this mutation.
func (m *RoleMutation) CreatedByCleared() bool {
	_, ok := m.clearedFields[role.FieldCreatedBy]
	return ok
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *RoleMutation) ResetCreatedBy() {
	m.created_by = nil
	delete(m.clearedFields, role.FieldCreatedBy)
}

// SetUpdatedBy sets the "updated_by" field.
func (m *RoleMutation) SetUpdatedBy(s string) {
	m.updated_by = &s
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *RoleMutation) UpdatedBy() (r string, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the Role entity.
// If the Role object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoleMutation) OldUpdatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (m *RoleMutation) ClearUpdatedBy() {
	m.updated_by = nil
	m.clearedFields[role.FieldUpdatedBy] = struct{}{}
}

// UpdatedByCleared returns if the "updated_by" field was cleared in this mutation.
func (m *RoleMutation) UpdatedByCleared() bool {
	_, ok := m.clearedFields[role.FieldUpdatedBy]
	return ok
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *RoleMutation) ResetUpdatedBy() {
	m.updated_by = nil
	delete(m.clearedFields, role.FieldUpdatedBy)
}

// SetCreatedAt sets the "created_at" field.
func (m *RoleMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *RoleMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Role entity.
// If the Role object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoleMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ClearCreatedAt clears the value of the "created_at" field.
func (m *RoleMutation) ClearCreatedAt() {
	m.created_at = nil
	m.clearedFields[role.FieldCreatedAt] = struct{}{}
}

// CreatedAtCleared returns if the "created_at" field was cleared in this mutation.
func (m *RoleMutation) CreatedAtCleared() bool {
	_, ok := m.clearedFields[role.FieldCreatedAt]
	return ok
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *RoleMutation) ResetCreatedAt() {
	m.created_at = nil
	delete(m.clearedFields, role.FieldCreatedAt)
}

// SetUpdatedAt sets the "updated_at" field.
func (m *RoleMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *RoleMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Role entity.
// If the Role object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoleMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *RoleMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[role.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *RoleMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[role.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *RoleMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, role.FieldUpdatedAt)
}

// Where appends a list predicates to the RoleMutation builder.
func (m *RoleMutation) Where(ps ...predicate.Role) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the RoleMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *RoleMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Role, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *RoleMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *RoleMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Role).
func (m *RoleMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RoleMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.name != nil {
		fields = append(fields, role.FieldName)
	}
	if m.slug != nil {
		fields = append(fields, role.FieldSlug)
	}
	if m.disabled != nil {
		fields = append(fields, role.FieldDisabled)
	}
	if m.description != nil {
		fields = append(fields, role.FieldDescription)
	}
	if m.extras != nil {
		fields = append(fields, role.FieldExtras)
	}
	if m.created_by != nil {
		fields = append(fields, role.FieldCreatedBy)
	}
	if m.updated_by != nil {
		fields = append(fields, role.FieldUpdatedBy)
	}
	if m.created_at != nil {
		fields = append(fields, role.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, role.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RoleMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case role.FieldName:
		return m.Name()
	case role.FieldSlug:
		return m.Slug()
	case role.FieldDisabled:
		return m.Disabled()
	case role.FieldDescription:
		return m.Description()
	case role.FieldExtras:
		return m.Extras()
	case role.FieldCreatedBy:
		return m.CreatedBy()
	case role.FieldUpdatedBy:
		return m.UpdatedBy()
	case role.FieldCreatedAt:
		return m.CreatedAt()
	case role.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RoleMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case role.FieldName:
		return m.OldName(ctx)
	case role.FieldSlug:
		return m.OldSlug(ctx)
	case role.FieldDisabled:
		return m.OldDisabled(ctx)
	case role.FieldDescription:
		return m.OldDescription(ctx)
	case role.FieldExtras:
		return m.OldExtras(ctx)
	case role.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case role.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	case role.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case role.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Role field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RoleMutation) SetField(name string, value ent.Value) error {
	switch name {
	case role.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case role.FieldSlug:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSlug(v)
		return nil
	case role.FieldDisabled:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDisabled(v)
		return nil
	case role.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case role.FieldExtras:
		v, ok := value.(map[string]interface{})
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExtras(v)
		return nil
	case role.FieldCreatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case role.FieldUpdatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	case role.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case role.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Role field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RoleMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RoleMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RoleMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Role numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RoleMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(role.FieldName) {
		fields = append(fields, role.FieldName)
	}
	if m.FieldCleared(role.FieldSlug) {
		fields = append(fields, role.FieldSlug)
	}
	if m.FieldCleared(role.FieldDisabled) {
		fields = append(fields, role.FieldDisabled)
	}
	if m.FieldCleared(role.FieldDescription) {
		fields = append(fields, role.FieldDescription)
	}
	if m.FieldCleared(role.FieldExtras) {
		fields = append(fields, role.FieldExtras)
	}
	if m.FieldCleared(role.FieldCreatedBy) {
		fields = append(fields, role.FieldCreatedBy)
	}
	if m.FieldCleared(role.FieldUpdatedBy) {
		fields = append(fields, role.FieldUpdatedBy)
	}
	if m.FieldCleared(role.FieldCreatedAt) {
		fields = append(fields, role.FieldCreatedAt)
	}
	if m.FieldCleared(role.FieldUpdatedAt) {
		fields = append(fields, role.FieldUpdatedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RoleMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RoleMutation) ClearField(name string) error {
	switch name {
	case role.FieldName:
		m.ClearName()
		return nil
	case role.FieldSlug:
		m.ClearSlug()
		return nil
	case role.FieldDisabled:
		m.ClearDisabled()
		return nil
	case role.FieldDescription:
		m.ClearDescription()
		return nil
	case role.FieldExtras:
		m.ClearExtras()
		return nil
	case role.FieldCreatedBy:
		m.ClearCreatedBy()
		return nil
	case role.FieldUpdatedBy:
		m.ClearUpdatedBy()
		return nil
	case role.FieldCreatedAt:
		m.ClearCreatedAt()
		return nil
	case role.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Role nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RoleMutation) ResetField(name string) error {
	switch name {
	case role.FieldName:
		m.ResetName()
		return nil
	case role.FieldSlug:
		m.ResetSlug()
		return nil
	case role.FieldDisabled:
		m.ResetDisabled()
		return nil
	case role.FieldDescription:
		m.ResetDescription()
		return nil
	case role.FieldExtras:
		m.ResetExtras()
		return nil
	case role.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case role.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	case role.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case role.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Role field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RoleMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RoleMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RoleMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RoleMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RoleMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RoleMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RoleMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Role unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RoleMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Role edge %s", name)
}

// RolePermissionMutation represents an operation that mutates the RolePermission nodes in the graph.
type RolePermissionMutation struct {
	config
	op            Op
	typ           string
	id            *string
	permission_id *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*RolePermission, error)
	predicates    []predicate.RolePermission
}

var _ ent.Mutation = (*RolePermissionMutation)(nil)

// rolepermissionOption allows management of the mutation configuration using functional options.
type rolepermissionOption func(*RolePermissionMutation)

// newRolePermissionMutation creates new mutation for the RolePermission entity.
func newRolePermissionMutation(c config, op Op, opts ...rolepermissionOption) *RolePermissionMutation {
	m := &RolePermissionMutation{
		config:        c,
		op:            op,
		typ:           TypeRolePermission,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRolePermissionID sets the ID field of the mutation.
func withRolePermissionID(id string) rolepermissionOption {
	return func(m *RolePermissionMutation) {
		var (
			err   error
			once  sync.Once
			value *RolePermission
		)
		m.oldValue = func(ctx context.Context) (*RolePermission, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().RolePermission.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRolePermission sets the old RolePermission of the mutation.
func withRolePermission(node *RolePermission) rolepermissionOption {
	return func(m *RolePermissionMutation) {
		m.oldValue = func(context.Context) (*RolePermission, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RolePermissionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RolePermissionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of RolePermission entities.
func (m *RolePermissionMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *RolePermissionMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *RolePermissionMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().RolePermission.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetPermissionID sets the "permission_id" field.
func (m *RolePermissionMutation) SetPermissionID(s string) {
	m.permission_id = &s
}

// PermissionID returns the value of the "permission_id" field in the mutation.
func (m *RolePermissionMutation) PermissionID() (r string, exists bool) {
	v := m.permission_id
	if v == nil {
		return
	}
	return *v, true
}

// OldPermissionID returns the old "permission_id" field's value of the RolePermission entity.
// If the RolePermission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RolePermissionMutation) OldPermissionID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPermissionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPermissionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPermissionID: %w", err)
	}
	return oldValue.PermissionID, nil
}

// ClearPermissionID clears the value of the "permission_id" field.
func (m *RolePermissionMutation) ClearPermissionID() {
	m.permission_id = nil
	m.clearedFields[rolepermission.FieldPermissionID] = struct{}{}
}

// PermissionIDCleared returns if the "permission_id" field was cleared in this mutation.
func (m *RolePermissionMutation) PermissionIDCleared() bool {
	_, ok := m.clearedFields[rolepermission.FieldPermissionID]
	return ok
}

// ResetPermissionID resets all changes to the "permission_id" field.
func (m *RolePermissionMutation) ResetPermissionID() {
	m.permission_id = nil
	delete(m.clearedFields, rolepermission.FieldPermissionID)
}

// Where appends a list predicates to the RolePermissionMutation builder.
func (m *RolePermissionMutation) Where(ps ...predicate.RolePermission) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the RolePermissionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *RolePermissionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.RolePermission, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *RolePermissionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *RolePermissionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (RolePermission).
func (m *RolePermissionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RolePermissionMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.permission_id != nil {
		fields = append(fields, rolepermission.FieldPermissionID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RolePermissionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case rolepermission.FieldPermissionID:
		return m.PermissionID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RolePermissionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case rolepermission.FieldPermissionID:
		return m.OldPermissionID(ctx)
	}
	return nil, fmt.Errorf("unknown RolePermission field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RolePermissionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case rolepermission.FieldPermissionID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPermissionID(v)
		return nil
	}
	return fmt.Errorf("unknown RolePermission field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RolePermissionMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RolePermissionMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RolePermissionMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown RolePermission numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RolePermissionMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(rolepermission.FieldPermissionID) {
		fields = append(fields, rolepermission.FieldPermissionID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RolePermissionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RolePermissionMutation) ClearField(name string) error {
	switch name {
	case rolepermission.FieldPermissionID:
		m.ClearPermissionID()
		return nil
	}
	return fmt.Errorf("unknown RolePermission nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RolePermissionMutation) ResetField(name string) error {
	switch name {
	case rolepermission.FieldPermissionID:
		m.ResetPermissionID()
		return nil
	}
	return fmt.Errorf("unknown RolePermission field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RolePermissionMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RolePermissionMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RolePermissionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RolePermissionMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RolePermissionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RolePermissionMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RolePermissionMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown RolePermission unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RolePermissionMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown RolePermission edge %s", name)
}

// TaxonomyMutation represents an operation that mutates the Taxonomy nodes in the graph.
type TaxonomyMutation struct {
	config
	op            Op
	typ           string
	id            *string
	name          *string
	_type         *string
	slug          *string
	cover         *string
	thumbnail     *string
	color         *string
	icon          *string
	url           *string
	keywords      *string
	description   *string
	status        *int32
	addstatus     *int32
	extras        *map[string]interface{}
	parent_id     *string
	domain_id     *string
	created_by    *string
	updated_by    *string
	created_at    *time.Time
	updated_at    *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Taxonomy, error)
	predicates    []predicate.Taxonomy
}

var _ ent.Mutation = (*TaxonomyMutation)(nil)

// taxonomyOption allows management of the mutation configuration using functional options.
type taxonomyOption func(*TaxonomyMutation)

// newTaxonomyMutation creates new mutation for the Taxonomy entity.
func newTaxonomyMutation(c config, op Op, opts ...taxonomyOption) *TaxonomyMutation {
	m := &TaxonomyMutation{
		config:        c,
		op:            op,
		typ:           TypeTaxonomy,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTaxonomyID sets the ID field of the mutation.
func withTaxonomyID(id string) taxonomyOption {
	return func(m *TaxonomyMutation) {
		var (
			err   error
			once  sync.Once
			value *Taxonomy
		)
		m.oldValue = func(ctx context.Context) (*Taxonomy, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Taxonomy.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTaxonomy sets the old Taxonomy of the mutation.
func withTaxonomy(node *Taxonomy) taxonomyOption {
	return func(m *TaxonomyMutation) {
		m.oldValue = func(context.Context) (*Taxonomy, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TaxonomyMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TaxonomyMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Taxonomy entities.
func (m *TaxonomyMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TaxonomyMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TaxonomyMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Taxonomy.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *TaxonomyMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *TaxonomyMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Taxonomy entity.
// If the Taxonomy object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaxonomyMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ClearName clears the value of the "name" field.
func (m *TaxonomyMutation) ClearName() {
	m.name = nil
	m.clearedFields[taxonomy.FieldName] = struct{}{}
}

// NameCleared returns if the "name" field was cleared in this mutation.
func (m *TaxonomyMutation) NameCleared() bool {
	_, ok := m.clearedFields[taxonomy.FieldName]
	return ok
}

// ResetName resets all changes to the "name" field.
func (m *TaxonomyMutation) ResetName() {
	m.name = nil
	delete(m.clearedFields, taxonomy.FieldName)
}

// SetType sets the "type" field.
func (m *TaxonomyMutation) SetType(s string) {
	m._type = &s
}

// GetType returns the value of the "type" field in the mutation.
func (m *TaxonomyMutation) GetType() (r string, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Taxonomy entity.
// If the Taxonomy object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaxonomyMutation) OldType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ClearType clears the value of the "type" field.
func (m *TaxonomyMutation) ClearType() {
	m._type = nil
	m.clearedFields[taxonomy.FieldType] = struct{}{}
}

// TypeCleared returns if the "type" field was cleared in this mutation.
func (m *TaxonomyMutation) TypeCleared() bool {
	_, ok := m.clearedFields[taxonomy.FieldType]
	return ok
}

// ResetType resets all changes to the "type" field.
func (m *TaxonomyMutation) ResetType() {
	m._type = nil
	delete(m.clearedFields, taxonomy.FieldType)
}

// SetSlug sets the "slug" field.
func (m *TaxonomyMutation) SetSlug(s string) {
	m.slug = &s
}

// Slug returns the value of the "slug" field in the mutation.
func (m *TaxonomyMutation) Slug() (r string, exists bool) {
	v := m.slug
	if v == nil {
		return
	}
	return *v, true
}

// OldSlug returns the old "slug" field's value of the Taxonomy entity.
// If the Taxonomy object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaxonomyMutation) OldSlug(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSlug is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSlug requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSlug: %w", err)
	}
	return oldValue.Slug, nil
}

// ClearSlug clears the value of the "slug" field.
func (m *TaxonomyMutation) ClearSlug() {
	m.slug = nil
	m.clearedFields[taxonomy.FieldSlug] = struct{}{}
}

// SlugCleared returns if the "slug" field was cleared in this mutation.
func (m *TaxonomyMutation) SlugCleared() bool {
	_, ok := m.clearedFields[taxonomy.FieldSlug]
	return ok
}

// ResetSlug resets all changes to the "slug" field.
func (m *TaxonomyMutation) ResetSlug() {
	m.slug = nil
	delete(m.clearedFields, taxonomy.FieldSlug)
}

// SetCover sets the "cover" field.
func (m *TaxonomyMutation) SetCover(s string) {
	m.cover = &s
}

// Cover returns the value of the "cover" field in the mutation.
func (m *TaxonomyMutation) Cover() (r string, exists bool) {
	v := m.cover
	if v == nil {
		return
	}
	return *v, true
}

// OldCover returns the old "cover" field's value of the Taxonomy entity.
// If the Taxonomy object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaxonomyMutation) OldCover(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCover is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCover requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCover: %w", err)
	}
	return oldValue.Cover, nil
}

// ClearCover clears the value of the "cover" field.
func (m *TaxonomyMutation) ClearCover() {
	m.cover = nil
	m.clearedFields[taxonomy.FieldCover] = struct{}{}
}

// CoverCleared returns if the "cover" field was cleared in this mutation.
func (m *TaxonomyMutation) CoverCleared() bool {
	_, ok := m.clearedFields[taxonomy.FieldCover]
	return ok
}

// ResetCover resets all changes to the "cover" field.
func (m *TaxonomyMutation) ResetCover() {
	m.cover = nil
	delete(m.clearedFields, taxonomy.FieldCover)
}

// SetThumbnail sets the "thumbnail" field.
func (m *TaxonomyMutation) SetThumbnail(s string) {
	m.thumbnail = &s
}

// Thumbnail returns the value of the "thumbnail" field in the mutation.
func (m *TaxonomyMutation) Thumbnail() (r string, exists bool) {
	v := m.thumbnail
	if v == nil {
		return
	}
	return *v, true
}

// OldThumbnail returns the old "thumbnail" field's value of the Taxonomy entity.
// If the Taxonomy object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaxonomyMutation) OldThumbnail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldThumbnail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldThumbnail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldThumbnail: %w", err)
	}
	return oldValue.Thumbnail, nil
}

// ClearThumbnail clears the value of the "thumbnail" field.
func (m *TaxonomyMutation) ClearThumbnail() {
	m.thumbnail = nil
	m.clearedFields[taxonomy.FieldThumbnail] = struct{}{}
}

// ThumbnailCleared returns if the "thumbnail" field was cleared in this mutation.
func (m *TaxonomyMutation) ThumbnailCleared() bool {
	_, ok := m.clearedFields[taxonomy.FieldThumbnail]
	return ok
}

// ResetThumbnail resets all changes to the "thumbnail" field.
func (m *TaxonomyMutation) ResetThumbnail() {
	m.thumbnail = nil
	delete(m.clearedFields, taxonomy.FieldThumbnail)
}

// SetColor sets the "color" field.
func (m *TaxonomyMutation) SetColor(s string) {
	m.color = &s
}

// Color returns the value of the "color" field in the mutation.
func (m *TaxonomyMutation) Color() (r string, exists bool) {
	v := m.color
	if v == nil {
		return
	}
	return *v, true
}

// OldColor returns the old "color" field's value of the Taxonomy entity.
// If the Taxonomy object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaxonomyMutation) OldColor(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldColor is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldColor requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldColor: %w", err)
	}
	return oldValue.Color, nil
}

// ClearColor clears the value of the "color" field.
func (m *TaxonomyMutation) ClearColor() {
	m.color = nil
	m.clearedFields[taxonomy.FieldColor] = struct{}{}
}

// ColorCleared returns if the "color" field was cleared in this mutation.
func (m *TaxonomyMutation) ColorCleared() bool {
	_, ok := m.clearedFields[taxonomy.FieldColor]
	return ok
}

// ResetColor resets all changes to the "color" field.
func (m *TaxonomyMutation) ResetColor() {
	m.color = nil
	delete(m.clearedFields, taxonomy.FieldColor)
}

// SetIcon sets the "icon" field.
func (m *TaxonomyMutation) SetIcon(s string) {
	m.icon = &s
}

// Icon returns the value of the "icon" field in the mutation.
func (m *TaxonomyMutation) Icon() (r string, exists bool) {
	v := m.icon
	if v == nil {
		return
	}
	return *v, true
}

// OldIcon returns the old "icon" field's value of the Taxonomy entity.
// If the Taxonomy object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaxonomyMutation) OldIcon(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIcon is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIcon requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIcon: %w", err)
	}
	return oldValue.Icon, nil
}

// ClearIcon clears the value of the "icon" field.
func (m *TaxonomyMutation) ClearIcon() {
	m.icon = nil
	m.clearedFields[taxonomy.FieldIcon] = struct{}{}
}

// IconCleared returns if the "icon" field was cleared in this mutation.
func (m *TaxonomyMutation) IconCleared() bool {
	_, ok := m.clearedFields[taxonomy.FieldIcon]
	return ok
}

// ResetIcon resets all changes to the "icon" field.
func (m *TaxonomyMutation) ResetIcon() {
	m.icon = nil
	delete(m.clearedFields, taxonomy.FieldIcon)
}

// SetURL sets the "url" field.
func (m *TaxonomyMutation) SetURL(s string) {
	m.url = &s
}

// URL returns the value of the "url" field in the mutation.
func (m *TaxonomyMutation) URL() (r string, exists bool) {
	v := m.url
	if v == nil {
		return
	}
	return *v, true
}

// OldURL returns the old "url" field's value of the Taxonomy entity.
// If the Taxonomy object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaxonomyMutation) OldURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldURL: %w", err)
	}
	return oldValue.URL, nil
}

// ClearURL clears the value of the "url" field.
func (m *TaxonomyMutation) ClearURL() {
	m.url = nil
	m.clearedFields[taxonomy.FieldURL] = struct{}{}
}

// URLCleared returns if the "url" field was cleared in this mutation.
func (m *TaxonomyMutation) URLCleared() bool {
	_, ok := m.clearedFields[taxonomy.FieldURL]
	return ok
}

// ResetURL resets all changes to the "url" field.
func (m *TaxonomyMutation) ResetURL() {
	m.url = nil
	delete(m.clearedFields, taxonomy.FieldURL)
}

// SetKeywords sets the "keywords" field.
func (m *TaxonomyMutation) SetKeywords(s string) {
	m.keywords = &s
}

// Keywords returns the value of the "keywords" field in the mutation.
func (m *TaxonomyMutation) Keywords() (r string, exists bool) {
	v := m.keywords
	if v == nil {
		return
	}
	return *v, true
}

// OldKeywords returns the old "keywords" field's value of the Taxonomy entity.
// If the Taxonomy object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaxonomyMutation) OldKeywords(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldKeywords is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldKeywords requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldKeywords: %w", err)
	}
	return oldValue.Keywords, nil
}

// ClearKeywords clears the value of the "keywords" field.
func (m *TaxonomyMutation) ClearKeywords() {
	m.keywords = nil
	m.clearedFields[taxonomy.FieldKeywords] = struct{}{}
}

// KeywordsCleared returns if the "keywords" field was cleared in this mutation.
func (m *TaxonomyMutation) KeywordsCleared() bool {
	_, ok := m.clearedFields[taxonomy.FieldKeywords]
	return ok
}

// ResetKeywords resets all changes to the "keywords" field.
func (m *TaxonomyMutation) ResetKeywords() {
	m.keywords = nil
	delete(m.clearedFields, taxonomy.FieldKeywords)
}

// SetDescription sets the "description" field.
func (m *TaxonomyMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *TaxonomyMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Taxonomy entity.
// If the Taxonomy object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaxonomyMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *TaxonomyMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[taxonomy.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *TaxonomyMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[taxonomy.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *TaxonomyMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, taxonomy.FieldDescription)
}

// SetStatus sets the "status" field.
func (m *TaxonomyMutation) SetStatus(i int32) {
	m.status = &i
	m.addstatus = nil
}

// Status returns the value of the "status" field in the mutation.
func (m *TaxonomyMutation) Status() (r int32, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Taxonomy entity.
// If the Taxonomy object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaxonomyMutation) OldStatus(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// AddStatus adds i to the "status" field.
func (m *TaxonomyMutation) AddStatus(i int32) {
	if m.addstatus != nil {
		*m.addstatus += i
	} else {
		m.addstatus = &i
	}
}

// AddedStatus returns the value that was added to the "status" field in this mutation.
func (m *TaxonomyMutation) AddedStatus() (r int32, exists bool) {
	v := m.addstatus
	if v == nil {
		return
	}
	return *v, true
}

// ResetStatus resets all changes to the "status" field.
func (m *TaxonomyMutation) ResetStatus() {
	m.status = nil
	m.addstatus = nil
}

// SetExtras sets the "extras" field.
func (m *TaxonomyMutation) SetExtras(value map[string]interface{}) {
	m.extras = &value
}

// Extras returns the value of the "extras" field in the mutation.
func (m *TaxonomyMutation) Extras() (r map[string]interface{}, exists bool) {
	v := m.extras
	if v == nil {
		return
	}
	return *v, true
}

// OldExtras returns the old "extras" field's value of the Taxonomy entity.
// If the Taxonomy object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaxonomyMutation) OldExtras(ctx context.Context) (v map[string]interface{}, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExtras is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExtras requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExtras: %w", err)
	}
	return oldValue.Extras, nil
}

// ClearExtras clears the value of the "extras" field.
func (m *TaxonomyMutation) ClearExtras() {
	m.extras = nil
	m.clearedFields[taxonomy.FieldExtras] = struct{}{}
}

// ExtrasCleared returns if the "extras" field was cleared in this mutation.
func (m *TaxonomyMutation) ExtrasCleared() bool {
	_, ok := m.clearedFields[taxonomy.FieldExtras]
	return ok
}

// ResetExtras resets all changes to the "extras" field.
func (m *TaxonomyMutation) ResetExtras() {
	m.extras = nil
	delete(m.clearedFields, taxonomy.FieldExtras)
}

// SetParentID sets the "parent_id" field.
func (m *TaxonomyMutation) SetParentID(s string) {
	m.parent_id = &s
}

// ParentID returns the value of the "parent_id" field in the mutation.
func (m *TaxonomyMutation) ParentID() (r string, exists bool) {
	v := m.parent_id
	if v == nil {
		return
	}
	return *v, true
}

// OldParentID returns the old "parent_id" field's value of the Taxonomy entity.
// If the Taxonomy object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaxonomyMutation) OldParentID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldParentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldParentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldParentID: %w", err)
	}
	return oldValue.ParentID, nil
}

// ClearParentID clears the value of the "parent_id" field.
func (m *TaxonomyMutation) ClearParentID() {
	m.parent_id = nil
	m.clearedFields[taxonomy.FieldParentID] = struct{}{}
}

// ParentIDCleared returns if the "parent_id" field was cleared in this mutation.
func (m *TaxonomyMutation) ParentIDCleared() bool {
	_, ok := m.clearedFields[taxonomy.FieldParentID]
	return ok
}

// ResetParentID resets all changes to the "parent_id" field.
func (m *TaxonomyMutation) ResetParentID() {
	m.parent_id = nil
	delete(m.clearedFields, taxonomy.FieldParentID)
}

// SetDomainID sets the "domain_id" field.
func (m *TaxonomyMutation) SetDomainID(s string) {
	m.domain_id = &s
}

// DomainID returns the value of the "domain_id" field in the mutation.
func (m *TaxonomyMutation) DomainID() (r string, exists bool) {
	v := m.domain_id
	if v == nil {
		return
	}
	return *v, true
}

// OldDomainID returns the old "domain_id" field's value of the Taxonomy entity.
// If the Taxonomy object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaxonomyMutation) OldDomainID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDomainID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDomainID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDomainID: %w", err)
	}
	return oldValue.DomainID, nil
}

// ClearDomainID clears the value of the "domain_id" field.
func (m *TaxonomyMutation) ClearDomainID() {
	m.domain_id = nil
	m.clearedFields[taxonomy.FieldDomainID] = struct{}{}
}

// DomainIDCleared returns if the "domain_id" field was cleared in this mutation.
func (m *TaxonomyMutation) DomainIDCleared() bool {
	_, ok := m.clearedFields[taxonomy.FieldDomainID]
	return ok
}

// ResetDomainID resets all changes to the "domain_id" field.
func (m *TaxonomyMutation) ResetDomainID() {
	m.domain_id = nil
	delete(m.clearedFields, taxonomy.FieldDomainID)
}

// SetCreatedBy sets the "created_by" field.
func (m *TaxonomyMutation) SetCreatedBy(s string) {
	m.created_by = &s
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *TaxonomyMutation) CreatedBy() (r string, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the Taxonomy entity.
// If the Taxonomy object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaxonomyMutation) OldCreatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// ClearCreatedBy clears the value of the "created_by" field.
func (m *TaxonomyMutation) ClearCreatedBy() {
	m.created_by = nil
	m.clearedFields[taxonomy.FieldCreatedBy] = struct{}{}
}

// CreatedByCleared returns if the "created_by" field was cleared in this mutation.
func (m *TaxonomyMutation) CreatedByCleared() bool {
	_, ok := m.clearedFields[taxonomy.FieldCreatedBy]
	return ok
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *TaxonomyMutation) ResetCreatedBy() {
	m.created_by = nil
	delete(m.clearedFields, taxonomy.FieldCreatedBy)
}

// SetUpdatedBy sets the "updated_by" field.
func (m *TaxonomyMutation) SetUpdatedBy(s string) {
	m.updated_by = &s
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *TaxonomyMutation) UpdatedBy() (r string, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the Taxonomy entity.
// If the Taxonomy object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaxonomyMutation) OldUpdatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (m *TaxonomyMutation) ClearUpdatedBy() {
	m.updated_by = nil
	m.clearedFields[taxonomy.FieldUpdatedBy] = struct{}{}
}

// UpdatedByCleared returns if the "updated_by" field was cleared in this mutation.
func (m *TaxonomyMutation) UpdatedByCleared() bool {
	_, ok := m.clearedFields[taxonomy.FieldUpdatedBy]
	return ok
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *TaxonomyMutation) ResetUpdatedBy() {
	m.updated_by = nil
	delete(m.clearedFields, taxonomy.FieldUpdatedBy)
}

// SetCreatedAt sets the "created_at" field.
func (m *TaxonomyMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *TaxonomyMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Taxonomy entity.
// If the Taxonomy object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaxonomyMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ClearCreatedAt clears the value of the "created_at" field.
func (m *TaxonomyMutation) ClearCreatedAt() {
	m.created_at = nil
	m.clearedFields[taxonomy.FieldCreatedAt] = struct{}{}
}

// CreatedAtCleared returns if the "created_at" field was cleared in this mutation.
func (m *TaxonomyMutation) CreatedAtCleared() bool {
	_, ok := m.clearedFields[taxonomy.FieldCreatedAt]
	return ok
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *TaxonomyMutation) ResetCreatedAt() {
	m.created_at = nil
	delete(m.clearedFields, taxonomy.FieldCreatedAt)
}

// SetUpdatedAt sets the "updated_at" field.
func (m *TaxonomyMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *TaxonomyMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Taxonomy entity.
// If the Taxonomy object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaxonomyMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *TaxonomyMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[taxonomy.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *TaxonomyMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[taxonomy.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *TaxonomyMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, taxonomy.FieldUpdatedAt)
}

// Where appends a list predicates to the TaxonomyMutation builder.
func (m *TaxonomyMutation) Where(ps ...predicate.Taxonomy) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TaxonomyMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TaxonomyMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Taxonomy, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TaxonomyMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TaxonomyMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Taxonomy).
func (m *TaxonomyMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TaxonomyMutation) Fields() []string {
	fields := make([]string, 0, 18)
	if m.name != nil {
		fields = append(fields, taxonomy.FieldName)
	}
	if m._type != nil {
		fields = append(fields, taxonomy.FieldType)
	}
	if m.slug != nil {
		fields = append(fields, taxonomy.FieldSlug)
	}
	if m.cover != nil {
		fields = append(fields, taxonomy.FieldCover)
	}
	if m.thumbnail != nil {
		fields = append(fields, taxonomy.FieldThumbnail)
	}
	if m.color != nil {
		fields = append(fields, taxonomy.FieldColor)
	}
	if m.icon != nil {
		fields = append(fields, taxonomy.FieldIcon)
	}
	if m.url != nil {
		fields = append(fields, taxonomy.FieldURL)
	}
	if m.keywords != nil {
		fields = append(fields, taxonomy.FieldKeywords)
	}
	if m.description != nil {
		fields = append(fields, taxonomy.FieldDescription)
	}
	if m.status != nil {
		fields = append(fields, taxonomy.FieldStatus)
	}
	if m.extras != nil {
		fields = append(fields, taxonomy.FieldExtras)
	}
	if m.parent_id != nil {
		fields = append(fields, taxonomy.FieldParentID)
	}
	if m.domain_id != nil {
		fields = append(fields, taxonomy.FieldDomainID)
	}
	if m.created_by != nil {
		fields = append(fields, taxonomy.FieldCreatedBy)
	}
	if m.updated_by != nil {
		fields = append(fields, taxonomy.FieldUpdatedBy)
	}
	if m.created_at != nil {
		fields = append(fields, taxonomy.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, taxonomy.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TaxonomyMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case taxonomy.FieldName:
		return m.Name()
	case taxonomy.FieldType:
		return m.GetType()
	case taxonomy.FieldSlug:
		return m.Slug()
	case taxonomy.FieldCover:
		return m.Cover()
	case taxonomy.FieldThumbnail:
		return m.Thumbnail()
	case taxonomy.FieldColor:
		return m.Color()
	case taxonomy.FieldIcon:
		return m.Icon()
	case taxonomy.FieldURL:
		return m.URL()
	case taxonomy.FieldKeywords:
		return m.Keywords()
	case taxonomy.FieldDescription:
		return m.Description()
	case taxonomy.FieldStatus:
		return m.Status()
	case taxonomy.FieldExtras:
		return m.Extras()
	case taxonomy.FieldParentID:
		return m.ParentID()
	case taxonomy.FieldDomainID:
		return m.DomainID()
	case taxonomy.FieldCreatedBy:
		return m.CreatedBy()
	case taxonomy.FieldUpdatedBy:
		return m.UpdatedBy()
	case taxonomy.FieldCreatedAt:
		return m.CreatedAt()
	case taxonomy.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TaxonomyMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case taxonomy.FieldName:
		return m.OldName(ctx)
	case taxonomy.FieldType:
		return m.OldType(ctx)
	case taxonomy.FieldSlug:
		return m.OldSlug(ctx)
	case taxonomy.FieldCover:
		return m.OldCover(ctx)
	case taxonomy.FieldThumbnail:
		return m.OldThumbnail(ctx)
	case taxonomy.FieldColor:
		return m.OldColor(ctx)
	case taxonomy.FieldIcon:
		return m.OldIcon(ctx)
	case taxonomy.FieldURL:
		return m.OldURL(ctx)
	case taxonomy.FieldKeywords:
		return m.OldKeywords(ctx)
	case taxonomy.FieldDescription:
		return m.OldDescription(ctx)
	case taxonomy.FieldStatus:
		return m.OldStatus(ctx)
	case taxonomy.FieldExtras:
		return m.OldExtras(ctx)
	case taxonomy.FieldParentID:
		return m.OldParentID(ctx)
	case taxonomy.FieldDomainID:
		return m.OldDomainID(ctx)
	case taxonomy.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case taxonomy.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	case taxonomy.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case taxonomy.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Taxonomy field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TaxonomyMutation) SetField(name string, value ent.Value) error {
	switch name {
	case taxonomy.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case taxonomy.FieldType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case taxonomy.FieldSlug:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSlug(v)
		return nil
	case taxonomy.FieldCover:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCover(v)
		return nil
	case taxonomy.FieldThumbnail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetThumbnail(v)
		return nil
	case taxonomy.FieldColor:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetColor(v)
		return nil
	case taxonomy.FieldIcon:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIcon(v)
		return nil
	case taxonomy.FieldURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetURL(v)
		return nil
	case taxonomy.FieldKeywords:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetKeywords(v)
		return nil
	case taxonomy.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case taxonomy.FieldStatus:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case taxonomy.FieldExtras:
		v, ok := value.(map[string]interface{})
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExtras(v)
		return nil
	case taxonomy.FieldParentID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetParentID(v)
		return nil
	case taxonomy.FieldDomainID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDomainID(v)
		return nil
	case taxonomy.FieldCreatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case taxonomy.FieldUpdatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	case taxonomy.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case taxonomy.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Taxonomy field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TaxonomyMutation) AddedFields() []string {
	var fields []string
	if m.addstatus != nil {
		fields = append(fields, taxonomy.FieldStatus)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TaxonomyMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case taxonomy.FieldStatus:
		return m.AddedStatus()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TaxonomyMutation) AddField(name string, value ent.Value) error {
	switch name {
	case taxonomy.FieldStatus:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatus(v)
		return nil
	}
	return fmt.Errorf("unknown Taxonomy numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TaxonomyMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(taxonomy.FieldName) {
		fields = append(fields, taxonomy.FieldName)
	}
	if m.FieldCleared(taxonomy.FieldType) {
		fields = append(fields, taxonomy.FieldType)
	}
	if m.FieldCleared(taxonomy.FieldSlug) {
		fields = append(fields, taxonomy.FieldSlug)
	}
	if m.FieldCleared(taxonomy.FieldCover) {
		fields = append(fields, taxonomy.FieldCover)
	}
	if m.FieldCleared(taxonomy.FieldThumbnail) {
		fields = append(fields, taxonomy.FieldThumbnail)
	}
	if m.FieldCleared(taxonomy.FieldColor) {
		fields = append(fields, taxonomy.FieldColor)
	}
	if m.FieldCleared(taxonomy.FieldIcon) {
		fields = append(fields, taxonomy.FieldIcon)
	}
	if m.FieldCleared(taxonomy.FieldURL) {
		fields = append(fields, taxonomy.FieldURL)
	}
	if m.FieldCleared(taxonomy.FieldKeywords) {
		fields = append(fields, taxonomy.FieldKeywords)
	}
	if m.FieldCleared(taxonomy.FieldDescription) {
		fields = append(fields, taxonomy.FieldDescription)
	}
	if m.FieldCleared(taxonomy.FieldExtras) {
		fields = append(fields, taxonomy.FieldExtras)
	}
	if m.FieldCleared(taxonomy.FieldParentID) {
		fields = append(fields, taxonomy.FieldParentID)
	}
	if m.FieldCleared(taxonomy.FieldDomainID) {
		fields = append(fields, taxonomy.FieldDomainID)
	}
	if m.FieldCleared(taxonomy.FieldCreatedBy) {
		fields = append(fields, taxonomy.FieldCreatedBy)
	}
	if m.FieldCleared(taxonomy.FieldUpdatedBy) {
		fields = append(fields, taxonomy.FieldUpdatedBy)
	}
	if m.FieldCleared(taxonomy.FieldCreatedAt) {
		fields = append(fields, taxonomy.FieldCreatedAt)
	}
	if m.FieldCleared(taxonomy.FieldUpdatedAt) {
		fields = append(fields, taxonomy.FieldUpdatedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TaxonomyMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TaxonomyMutation) ClearField(name string) error {
	switch name {
	case taxonomy.FieldName:
		m.ClearName()
		return nil
	case taxonomy.FieldType:
		m.ClearType()
		return nil
	case taxonomy.FieldSlug:
		m.ClearSlug()
		return nil
	case taxonomy.FieldCover:
		m.ClearCover()
		return nil
	case taxonomy.FieldThumbnail:
		m.ClearThumbnail()
		return nil
	case taxonomy.FieldColor:
		m.ClearColor()
		return nil
	case taxonomy.FieldIcon:
		m.ClearIcon()
		return nil
	case taxonomy.FieldURL:
		m.ClearURL()
		return nil
	case taxonomy.FieldKeywords:
		m.ClearKeywords()
		return nil
	case taxonomy.FieldDescription:
		m.ClearDescription()
		return nil
	case taxonomy.FieldExtras:
		m.ClearExtras()
		return nil
	case taxonomy.FieldParentID:
		m.ClearParentID()
		return nil
	case taxonomy.FieldDomainID:
		m.ClearDomainID()
		return nil
	case taxonomy.FieldCreatedBy:
		m.ClearCreatedBy()
		return nil
	case taxonomy.FieldUpdatedBy:
		m.ClearUpdatedBy()
		return nil
	case taxonomy.FieldCreatedAt:
		m.ClearCreatedAt()
		return nil
	case taxonomy.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Taxonomy nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TaxonomyMutation) ResetField(name string) error {
	switch name {
	case taxonomy.FieldName:
		m.ResetName()
		return nil
	case taxonomy.FieldType:
		m.ResetType()
		return nil
	case taxonomy.FieldSlug:
		m.ResetSlug()
		return nil
	case taxonomy.FieldCover:
		m.ResetCover()
		return nil
	case taxonomy.FieldThumbnail:
		m.ResetThumbnail()
		return nil
	case taxonomy.FieldColor:
		m.ResetColor()
		return nil
	case taxonomy.FieldIcon:
		m.ResetIcon()
		return nil
	case taxonomy.FieldURL:
		m.ResetURL()
		return nil
	case taxonomy.FieldKeywords:
		m.ResetKeywords()
		return nil
	case taxonomy.FieldDescription:
		m.ResetDescription()
		return nil
	case taxonomy.FieldStatus:
		m.ResetStatus()
		return nil
	case taxonomy.FieldExtras:
		m.ResetExtras()
		return nil
	case taxonomy.FieldParentID:
		m.ResetParentID()
		return nil
	case taxonomy.FieldDomainID:
		m.ResetDomainID()
		return nil
	case taxonomy.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case taxonomy.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	case taxonomy.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case taxonomy.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Taxonomy field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TaxonomyMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TaxonomyMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TaxonomyMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TaxonomyMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TaxonomyMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TaxonomyMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TaxonomyMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Taxonomy unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TaxonomyMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Taxonomy edge %s", name)
}

// TaxonomyRelationMutation represents an operation that mutates the TaxonomyRelation nodes in the graph.
type TaxonomyRelationMutation struct {
	config
	op            Op
	typ           string
	id            *string
	taxonomy_id   *string
	_type         *string
	_order        *int32
	add_order     *int32
	created_by    *string
	created_at    *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*TaxonomyRelation, error)
	predicates    []predicate.TaxonomyRelation
}

var _ ent.Mutation = (*TaxonomyRelationMutation)(nil)

// taxonomyrelationOption allows management of the mutation configuration using functional options.
type taxonomyrelationOption func(*TaxonomyRelationMutation)

// newTaxonomyRelationMutation creates new mutation for the TaxonomyRelation entity.
func newTaxonomyRelationMutation(c config, op Op, opts ...taxonomyrelationOption) *TaxonomyRelationMutation {
	m := &TaxonomyRelationMutation{
		config:        c,
		op:            op,
		typ:           TypeTaxonomyRelation,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTaxonomyRelationID sets the ID field of the mutation.
func withTaxonomyRelationID(id string) taxonomyrelationOption {
	return func(m *TaxonomyRelationMutation) {
		var (
			err   error
			once  sync.Once
			value *TaxonomyRelation
		)
		m.oldValue = func(ctx context.Context) (*TaxonomyRelation, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().TaxonomyRelation.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTaxonomyRelation sets the old TaxonomyRelation of the mutation.
func withTaxonomyRelation(node *TaxonomyRelation) taxonomyrelationOption {
	return func(m *TaxonomyRelationMutation) {
		m.oldValue = func(context.Context) (*TaxonomyRelation, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TaxonomyRelationMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TaxonomyRelationMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of TaxonomyRelation entities.
func (m *TaxonomyRelationMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TaxonomyRelationMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TaxonomyRelationMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().TaxonomyRelation.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTaxonomyID sets the "taxonomy_id" field.
func (m *TaxonomyRelationMutation) SetTaxonomyID(s string) {
	m.taxonomy_id = &s
}

// TaxonomyID returns the value of the "taxonomy_id" field in the mutation.
func (m *TaxonomyRelationMutation) TaxonomyID() (r string, exists bool) {
	v := m.taxonomy_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTaxonomyID returns the old "taxonomy_id" field's value of the TaxonomyRelation entity.
// If the TaxonomyRelation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaxonomyRelationMutation) OldTaxonomyID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTaxonomyID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTaxonomyID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTaxonomyID: %w", err)
	}
	return oldValue.TaxonomyID, nil
}

// ClearTaxonomyID clears the value of the "taxonomy_id" field.
func (m *TaxonomyRelationMutation) ClearTaxonomyID() {
	m.taxonomy_id = nil
	m.clearedFields[taxonomyrelation.FieldTaxonomyID] = struct{}{}
}

// TaxonomyIDCleared returns if the "taxonomy_id" field was cleared in this mutation.
func (m *TaxonomyRelationMutation) TaxonomyIDCleared() bool {
	_, ok := m.clearedFields[taxonomyrelation.FieldTaxonomyID]
	return ok
}

// ResetTaxonomyID resets all changes to the "taxonomy_id" field.
func (m *TaxonomyRelationMutation) ResetTaxonomyID() {
	m.taxonomy_id = nil
	delete(m.clearedFields, taxonomyrelation.FieldTaxonomyID)
}

// SetType sets the "type" field.
func (m *TaxonomyRelationMutation) SetType(s string) {
	m._type = &s
}

// GetType returns the value of the "type" field in the mutation.
func (m *TaxonomyRelationMutation) GetType() (r string, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the TaxonomyRelation entity.
// If the TaxonomyRelation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaxonomyRelationMutation) OldType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ClearType clears the value of the "type" field.
func (m *TaxonomyRelationMutation) ClearType() {
	m._type = nil
	m.clearedFields[taxonomyrelation.FieldType] = struct{}{}
}

// TypeCleared returns if the "type" field was cleared in this mutation.
func (m *TaxonomyRelationMutation) TypeCleared() bool {
	_, ok := m.clearedFields[taxonomyrelation.FieldType]
	return ok
}

// ResetType resets all changes to the "type" field.
func (m *TaxonomyRelationMutation) ResetType() {
	m._type = nil
	delete(m.clearedFields, taxonomyrelation.FieldType)
}

// SetOrder sets the "order" field.
func (m *TaxonomyRelationMutation) SetOrder(i int32) {
	m._order = &i
	m.add_order = nil
}

// Order returns the value of the "order" field in the mutation.
func (m *TaxonomyRelationMutation) Order() (r int32, exists bool) {
	v := m._order
	if v == nil {
		return
	}
	return *v, true
}

// OldOrder returns the old "order" field's value of the TaxonomyRelation entity.
// If the TaxonomyRelation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaxonomyRelationMutation) OldOrder(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrder is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrder requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrder: %w", err)
	}
	return oldValue.Order, nil
}

// AddOrder adds i to the "order" field.
func (m *TaxonomyRelationMutation) AddOrder(i int32) {
	if m.add_order != nil {
		*m.add_order += i
	} else {
		m.add_order = &i
	}
}

// AddedOrder returns the value that was added to the "order" field in this mutation.
func (m *TaxonomyRelationMutation) AddedOrder() (r int32, exists bool) {
	v := m.add_order
	if v == nil {
		return
	}
	return *v, true
}

// ResetOrder resets all changes to the "order" field.
func (m *TaxonomyRelationMutation) ResetOrder() {
	m._order = nil
	m.add_order = nil
}

// SetCreatedBy sets the "created_by" field.
func (m *TaxonomyRelationMutation) SetCreatedBy(s string) {
	m.created_by = &s
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *TaxonomyRelationMutation) CreatedBy() (r string, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the TaxonomyRelation entity.
// If the TaxonomyRelation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaxonomyRelationMutation) OldCreatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// ClearCreatedBy clears the value of the "created_by" field.
func (m *TaxonomyRelationMutation) ClearCreatedBy() {
	m.created_by = nil
	m.clearedFields[taxonomyrelation.FieldCreatedBy] = struct{}{}
}

// CreatedByCleared returns if the "created_by" field was cleared in this mutation.
func (m *TaxonomyRelationMutation) CreatedByCleared() bool {
	_, ok := m.clearedFields[taxonomyrelation.FieldCreatedBy]
	return ok
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *TaxonomyRelationMutation) ResetCreatedBy() {
	m.created_by = nil
	delete(m.clearedFields, taxonomyrelation.FieldCreatedBy)
}

// SetCreatedAt sets the "created_at" field.
func (m *TaxonomyRelationMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *TaxonomyRelationMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the TaxonomyRelation entity.
// If the TaxonomyRelation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaxonomyRelationMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ClearCreatedAt clears the value of the "created_at" field.
func (m *TaxonomyRelationMutation) ClearCreatedAt() {
	m.created_at = nil
	m.clearedFields[taxonomyrelation.FieldCreatedAt] = struct{}{}
}

// CreatedAtCleared returns if the "created_at" field was cleared in this mutation.
func (m *TaxonomyRelationMutation) CreatedAtCleared() bool {
	_, ok := m.clearedFields[taxonomyrelation.FieldCreatedAt]
	return ok
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *TaxonomyRelationMutation) ResetCreatedAt() {
	m.created_at = nil
	delete(m.clearedFields, taxonomyrelation.FieldCreatedAt)
}

// Where appends a list predicates to the TaxonomyRelationMutation builder.
func (m *TaxonomyRelationMutation) Where(ps ...predicate.TaxonomyRelation) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TaxonomyRelationMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TaxonomyRelationMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.TaxonomyRelation, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TaxonomyRelationMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TaxonomyRelationMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (TaxonomyRelation).
func (m *TaxonomyRelationMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TaxonomyRelationMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.taxonomy_id != nil {
		fields = append(fields, taxonomyrelation.FieldTaxonomyID)
	}
	if m._type != nil {
		fields = append(fields, taxonomyrelation.FieldType)
	}
	if m._order != nil {
		fields = append(fields, taxonomyrelation.FieldOrder)
	}
	if m.created_by != nil {
		fields = append(fields, taxonomyrelation.FieldCreatedBy)
	}
	if m.created_at != nil {
		fields = append(fields, taxonomyrelation.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TaxonomyRelationMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case taxonomyrelation.FieldTaxonomyID:
		return m.TaxonomyID()
	case taxonomyrelation.FieldType:
		return m.GetType()
	case taxonomyrelation.FieldOrder:
		return m.Order()
	case taxonomyrelation.FieldCreatedBy:
		return m.CreatedBy()
	case taxonomyrelation.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TaxonomyRelationMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case taxonomyrelation.FieldTaxonomyID:
		return m.OldTaxonomyID(ctx)
	case taxonomyrelation.FieldType:
		return m.OldType(ctx)
	case taxonomyrelation.FieldOrder:
		return m.OldOrder(ctx)
	case taxonomyrelation.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case taxonomyrelation.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown TaxonomyRelation field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TaxonomyRelationMutation) SetField(name string, value ent.Value) error {
	switch name {
	case taxonomyrelation.FieldTaxonomyID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTaxonomyID(v)
		return nil
	case taxonomyrelation.FieldType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case taxonomyrelation.FieldOrder:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrder(v)
		return nil
	case taxonomyrelation.FieldCreatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case taxonomyrelation.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown TaxonomyRelation field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TaxonomyRelationMutation) AddedFields() []string {
	var fields []string
	if m.add_order != nil {
		fields = append(fields, taxonomyrelation.FieldOrder)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TaxonomyRelationMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case taxonomyrelation.FieldOrder:
		return m.AddedOrder()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TaxonomyRelationMutation) AddField(name string, value ent.Value) error {
	switch name {
	case taxonomyrelation.FieldOrder:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOrder(v)
		return nil
	}
	return fmt.Errorf("unknown TaxonomyRelation numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TaxonomyRelationMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(taxonomyrelation.FieldTaxonomyID) {
		fields = append(fields, taxonomyrelation.FieldTaxonomyID)
	}
	if m.FieldCleared(taxonomyrelation.FieldType) {
		fields = append(fields, taxonomyrelation.FieldType)
	}
	if m.FieldCleared(taxonomyrelation.FieldCreatedBy) {
		fields = append(fields, taxonomyrelation.FieldCreatedBy)
	}
	if m.FieldCleared(taxonomyrelation.FieldCreatedAt) {
		fields = append(fields, taxonomyrelation.FieldCreatedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TaxonomyRelationMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TaxonomyRelationMutation) ClearField(name string) error {
	switch name {
	case taxonomyrelation.FieldTaxonomyID:
		m.ClearTaxonomyID()
		return nil
	case taxonomyrelation.FieldType:
		m.ClearType()
		return nil
	case taxonomyrelation.FieldCreatedBy:
		m.ClearCreatedBy()
		return nil
	case taxonomyrelation.FieldCreatedAt:
		m.ClearCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown TaxonomyRelation nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TaxonomyRelationMutation) ResetField(name string) error {
	switch name {
	case taxonomyrelation.FieldTaxonomyID:
		m.ResetTaxonomyID()
		return nil
	case taxonomyrelation.FieldType:
		m.ResetType()
		return nil
	case taxonomyrelation.FieldOrder:
		m.ResetOrder()
		return nil
	case taxonomyrelation.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case taxonomyrelation.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown TaxonomyRelation field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TaxonomyRelationMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TaxonomyRelationMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TaxonomyRelationMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TaxonomyRelationMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TaxonomyRelationMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TaxonomyRelationMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TaxonomyRelationMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown TaxonomyRelation unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TaxonomyRelationMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown TaxonomyRelation edge %s", name)
}

// TopicMutation represents an operation that mutates the Topic nodes in the graph.
type TopicMutation struct {
	config
	op            Op
	typ           string
	id            *string
	name          *string
	title         *string
	slug          *string
	content       *string
	thumbnail     *string
	temp          *bool
	markdown      *bool
	private       *bool
	status        *int32
	addstatus     *int32
	released      *time.Time
	taxonomy_id   *string
	domain_id     *string
	created_by    *string
	updated_by    *string
	created_at    *time.Time
	updated_at    *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Topic, error)
	predicates    []predicate.Topic
}

var _ ent.Mutation = (*TopicMutation)(nil)

// topicOption allows management of the mutation configuration using functional options.
type topicOption func(*TopicMutation)

// newTopicMutation creates new mutation for the Topic entity.
func newTopicMutation(c config, op Op, opts ...topicOption) *TopicMutation {
	m := &TopicMutation{
		config:        c,
		op:            op,
		typ:           TypeTopic,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTopicID sets the ID field of the mutation.
func withTopicID(id string) topicOption {
	return func(m *TopicMutation) {
		var (
			err   error
			once  sync.Once
			value *Topic
		)
		m.oldValue = func(ctx context.Context) (*Topic, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Topic.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTopic sets the old Topic of the mutation.
func withTopic(node *Topic) topicOption {
	return func(m *TopicMutation) {
		m.oldValue = func(context.Context) (*Topic, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TopicMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TopicMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Topic entities.
func (m *TopicMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TopicMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TopicMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Topic.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *TopicMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *TopicMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Topic entity.
// If the Topic object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TopicMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ClearName clears the value of the "name" field.
func (m *TopicMutation) ClearName() {
	m.name = nil
	m.clearedFields[topic.FieldName] = struct{}{}
}

// NameCleared returns if the "name" field was cleared in this mutation.
func (m *TopicMutation) NameCleared() bool {
	_, ok := m.clearedFields[topic.FieldName]
	return ok
}

// ResetName resets all changes to the "name" field.
func (m *TopicMutation) ResetName() {
	m.name = nil
	delete(m.clearedFields, topic.FieldName)
}

// SetTitle sets the "title" field.
func (m *TopicMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *TopicMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Topic entity.
// If the Topic object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TopicMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ClearTitle clears the value of the "title" field.
func (m *TopicMutation) ClearTitle() {
	m.title = nil
	m.clearedFields[topic.FieldTitle] = struct{}{}
}

// TitleCleared returns if the "title" field was cleared in this mutation.
func (m *TopicMutation) TitleCleared() bool {
	_, ok := m.clearedFields[topic.FieldTitle]
	return ok
}

// ResetTitle resets all changes to the "title" field.
func (m *TopicMutation) ResetTitle() {
	m.title = nil
	delete(m.clearedFields, topic.FieldTitle)
}

// SetSlug sets the "slug" field.
func (m *TopicMutation) SetSlug(s string) {
	m.slug = &s
}

// Slug returns the value of the "slug" field in the mutation.
func (m *TopicMutation) Slug() (r string, exists bool) {
	v := m.slug
	if v == nil {
		return
	}
	return *v, true
}

// OldSlug returns the old "slug" field's value of the Topic entity.
// If the Topic object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TopicMutation) OldSlug(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSlug is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSlug requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSlug: %w", err)
	}
	return oldValue.Slug, nil
}

// ClearSlug clears the value of the "slug" field.
func (m *TopicMutation) ClearSlug() {
	m.slug = nil
	m.clearedFields[topic.FieldSlug] = struct{}{}
}

// SlugCleared returns if the "slug" field was cleared in this mutation.
func (m *TopicMutation) SlugCleared() bool {
	_, ok := m.clearedFields[topic.FieldSlug]
	return ok
}

// ResetSlug resets all changes to the "slug" field.
func (m *TopicMutation) ResetSlug() {
	m.slug = nil
	delete(m.clearedFields, topic.FieldSlug)
}

// SetContent sets the "content" field.
func (m *TopicMutation) SetContent(s string) {
	m.content = &s
}

// Content returns the value of the "content" field in the mutation.
func (m *TopicMutation) Content() (r string, exists bool) {
	v := m.content
	if v == nil {
		return
	}
	return *v, true
}

// OldContent returns the old "content" field's value of the Topic entity.
// If the Topic object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TopicMutation) OldContent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContent: %w", err)
	}
	return oldValue.Content, nil
}

// ClearContent clears the value of the "content" field.
func (m *TopicMutation) ClearContent() {
	m.content = nil
	m.clearedFields[topic.FieldContent] = struct{}{}
}

// ContentCleared returns if the "content" field was cleared in this mutation.
func (m *TopicMutation) ContentCleared() bool {
	_, ok := m.clearedFields[topic.FieldContent]
	return ok
}

// ResetContent resets all changes to the "content" field.
func (m *TopicMutation) ResetContent() {
	m.content = nil
	delete(m.clearedFields, topic.FieldContent)
}

// SetThumbnail sets the "thumbnail" field.
func (m *TopicMutation) SetThumbnail(s string) {
	m.thumbnail = &s
}

// Thumbnail returns the value of the "thumbnail" field in the mutation.
func (m *TopicMutation) Thumbnail() (r string, exists bool) {
	v := m.thumbnail
	if v == nil {
		return
	}
	return *v, true
}

// OldThumbnail returns the old "thumbnail" field's value of the Topic entity.
// If the Topic object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TopicMutation) OldThumbnail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldThumbnail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldThumbnail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldThumbnail: %w", err)
	}
	return oldValue.Thumbnail, nil
}

// ClearThumbnail clears the value of the "thumbnail" field.
func (m *TopicMutation) ClearThumbnail() {
	m.thumbnail = nil
	m.clearedFields[topic.FieldThumbnail] = struct{}{}
}

// ThumbnailCleared returns if the "thumbnail" field was cleared in this mutation.
func (m *TopicMutation) ThumbnailCleared() bool {
	_, ok := m.clearedFields[topic.FieldThumbnail]
	return ok
}

// ResetThumbnail resets all changes to the "thumbnail" field.
func (m *TopicMutation) ResetThumbnail() {
	m.thumbnail = nil
	delete(m.clearedFields, topic.FieldThumbnail)
}

// SetTemp sets the "temp" field.
func (m *TopicMutation) SetTemp(b bool) {
	m.temp = &b
}

// Temp returns the value of the "temp" field in the mutation.
func (m *TopicMutation) Temp() (r bool, exists bool) {
	v := m.temp
	if v == nil {
		return
	}
	return *v, true
}

// OldTemp returns the old "temp" field's value of the Topic entity.
// If the Topic object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TopicMutation) OldTemp(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTemp is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTemp requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTemp: %w", err)
	}
	return oldValue.Temp, nil
}

// ClearTemp clears the value of the "temp" field.
func (m *TopicMutation) ClearTemp() {
	m.temp = nil
	m.clearedFields[topic.FieldTemp] = struct{}{}
}

// TempCleared returns if the "temp" field was cleared in this mutation.
func (m *TopicMutation) TempCleared() bool {
	_, ok := m.clearedFields[topic.FieldTemp]
	return ok
}

// ResetTemp resets all changes to the "temp" field.
func (m *TopicMutation) ResetTemp() {
	m.temp = nil
	delete(m.clearedFields, topic.FieldTemp)
}

// SetMarkdown sets the "markdown" field.
func (m *TopicMutation) SetMarkdown(b bool) {
	m.markdown = &b
}

// Markdown returns the value of the "markdown" field in the mutation.
func (m *TopicMutation) Markdown() (r bool, exists bool) {
	v := m.markdown
	if v == nil {
		return
	}
	return *v, true
}

// OldMarkdown returns the old "markdown" field's value of the Topic entity.
// If the Topic object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TopicMutation) OldMarkdown(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMarkdown is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMarkdown requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMarkdown: %w", err)
	}
	return oldValue.Markdown, nil
}

// ClearMarkdown clears the value of the "markdown" field.
func (m *TopicMutation) ClearMarkdown() {
	m.markdown = nil
	m.clearedFields[topic.FieldMarkdown] = struct{}{}
}

// MarkdownCleared returns if the "markdown" field was cleared in this mutation.
func (m *TopicMutation) MarkdownCleared() bool {
	_, ok := m.clearedFields[topic.FieldMarkdown]
	return ok
}

// ResetMarkdown resets all changes to the "markdown" field.
func (m *TopicMutation) ResetMarkdown() {
	m.markdown = nil
	delete(m.clearedFields, topic.FieldMarkdown)
}

// SetPrivate sets the "private" field.
func (m *TopicMutation) SetPrivate(b bool) {
	m.private = &b
}

// Private returns the value of the "private" field in the mutation.
func (m *TopicMutation) Private() (r bool, exists bool) {
	v := m.private
	if v == nil {
		return
	}
	return *v, true
}

// OldPrivate returns the old "private" field's value of the Topic entity.
// If the Topic object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TopicMutation) OldPrivate(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPrivate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPrivate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrivate: %w", err)
	}
	return oldValue.Private, nil
}

// ClearPrivate clears the value of the "private" field.
func (m *TopicMutation) ClearPrivate() {
	m.private = nil
	m.clearedFields[topic.FieldPrivate] = struct{}{}
}

// PrivateCleared returns if the "private" field was cleared in this mutation.
func (m *TopicMutation) PrivateCleared() bool {
	_, ok := m.clearedFields[topic.FieldPrivate]
	return ok
}

// ResetPrivate resets all changes to the "private" field.
func (m *TopicMutation) ResetPrivate() {
	m.private = nil
	delete(m.clearedFields, topic.FieldPrivate)
}

// SetStatus sets the "status" field.
func (m *TopicMutation) SetStatus(i int32) {
	m.status = &i
	m.addstatus = nil
}

// Status returns the value of the "status" field in the mutation.
func (m *TopicMutation) Status() (r int32, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Topic entity.
// If the Topic object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TopicMutation) OldStatus(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// AddStatus adds i to the "status" field.
func (m *TopicMutation) AddStatus(i int32) {
	if m.addstatus != nil {
		*m.addstatus += i
	} else {
		m.addstatus = &i
	}
}

// AddedStatus returns the value that was added to the "status" field in this mutation.
func (m *TopicMutation) AddedStatus() (r int32, exists bool) {
	v := m.addstatus
	if v == nil {
		return
	}
	return *v, true
}

// ResetStatus resets all changes to the "status" field.
func (m *TopicMutation) ResetStatus() {
	m.status = nil
	m.addstatus = nil
}

// SetReleased sets the "released" field.
func (m *TopicMutation) SetReleased(t time.Time) {
	m.released = &t
}

// Released returns the value of the "released" field in the mutation.
func (m *TopicMutation) Released() (r time.Time, exists bool) {
	v := m.released
	if v == nil {
		return
	}
	return *v, true
}

// OldReleased returns the old "released" field's value of the Topic entity.
// If the Topic object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TopicMutation) OldReleased(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReleased is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReleased requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReleased: %w", err)
	}
	return oldValue.Released, nil
}

// ClearReleased clears the value of the "released" field.
func (m *TopicMutation) ClearReleased() {
	m.released = nil
	m.clearedFields[topic.FieldReleased] = struct{}{}
}

// ReleasedCleared returns if the "released" field was cleared in this mutation.
func (m *TopicMutation) ReleasedCleared() bool {
	_, ok := m.clearedFields[topic.FieldReleased]
	return ok
}

// ResetReleased resets all changes to the "released" field.
func (m *TopicMutation) ResetReleased() {
	m.released = nil
	delete(m.clearedFields, topic.FieldReleased)
}

// SetTaxonomyID sets the "taxonomy_id" field.
func (m *TopicMutation) SetTaxonomyID(s string) {
	m.taxonomy_id = &s
}

// TaxonomyID returns the value of the "taxonomy_id" field in the mutation.
func (m *TopicMutation) TaxonomyID() (r string, exists bool) {
	v := m.taxonomy_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTaxonomyID returns the old "taxonomy_id" field's value of the Topic entity.
// If the Topic object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TopicMutation) OldTaxonomyID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTaxonomyID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTaxonomyID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTaxonomyID: %w", err)
	}
	return oldValue.TaxonomyID, nil
}

// ClearTaxonomyID clears the value of the "taxonomy_id" field.
func (m *TopicMutation) ClearTaxonomyID() {
	m.taxonomy_id = nil
	m.clearedFields[topic.FieldTaxonomyID] = struct{}{}
}

// TaxonomyIDCleared returns if the "taxonomy_id" field was cleared in this mutation.
func (m *TopicMutation) TaxonomyIDCleared() bool {
	_, ok := m.clearedFields[topic.FieldTaxonomyID]
	return ok
}

// ResetTaxonomyID resets all changes to the "taxonomy_id" field.
func (m *TopicMutation) ResetTaxonomyID() {
	m.taxonomy_id = nil
	delete(m.clearedFields, topic.FieldTaxonomyID)
}

// SetDomainID sets the "domain_id" field.
func (m *TopicMutation) SetDomainID(s string) {
	m.domain_id = &s
}

// DomainID returns the value of the "domain_id" field in the mutation.
func (m *TopicMutation) DomainID() (r string, exists bool) {
	v := m.domain_id
	if v == nil {
		return
	}
	return *v, true
}

// OldDomainID returns the old "domain_id" field's value of the Topic entity.
// If the Topic object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TopicMutation) OldDomainID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDomainID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDomainID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDomainID: %w", err)
	}
	return oldValue.DomainID, nil
}

// ClearDomainID clears the value of the "domain_id" field.
func (m *TopicMutation) ClearDomainID() {
	m.domain_id = nil
	m.clearedFields[topic.FieldDomainID] = struct{}{}
}

// DomainIDCleared returns if the "domain_id" field was cleared in this mutation.
func (m *TopicMutation) DomainIDCleared() bool {
	_, ok := m.clearedFields[topic.FieldDomainID]
	return ok
}

// ResetDomainID resets all changes to the "domain_id" field.
func (m *TopicMutation) ResetDomainID() {
	m.domain_id = nil
	delete(m.clearedFields, topic.FieldDomainID)
}

// SetCreatedBy sets the "created_by" field.
func (m *TopicMutation) SetCreatedBy(s string) {
	m.created_by = &s
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *TopicMutation) CreatedBy() (r string, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the Topic entity.
// If the Topic object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TopicMutation) OldCreatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// ClearCreatedBy clears the value of the "created_by" field.
func (m *TopicMutation) ClearCreatedBy() {
	m.created_by = nil
	m.clearedFields[topic.FieldCreatedBy] = struct{}{}
}

// CreatedByCleared returns if the "created_by" field was cleared in this mutation.
func (m *TopicMutation) CreatedByCleared() bool {
	_, ok := m.clearedFields[topic.FieldCreatedBy]
	return ok
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *TopicMutation) ResetCreatedBy() {
	m.created_by = nil
	delete(m.clearedFields, topic.FieldCreatedBy)
}

// SetUpdatedBy sets the "updated_by" field.
func (m *TopicMutation) SetUpdatedBy(s string) {
	m.updated_by = &s
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *TopicMutation) UpdatedBy() (r string, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the Topic entity.
// If the Topic object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TopicMutation) OldUpdatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (m *TopicMutation) ClearUpdatedBy() {
	m.updated_by = nil
	m.clearedFields[topic.FieldUpdatedBy] = struct{}{}
}

// UpdatedByCleared returns if the "updated_by" field was cleared in this mutation.
func (m *TopicMutation) UpdatedByCleared() bool {
	_, ok := m.clearedFields[topic.FieldUpdatedBy]
	return ok
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *TopicMutation) ResetUpdatedBy() {
	m.updated_by = nil
	delete(m.clearedFields, topic.FieldUpdatedBy)
}

// SetCreatedAt sets the "created_at" field.
func (m *TopicMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *TopicMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Topic entity.
// If the Topic object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TopicMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ClearCreatedAt clears the value of the "created_at" field.
func (m *TopicMutation) ClearCreatedAt() {
	m.created_at = nil
	m.clearedFields[topic.FieldCreatedAt] = struct{}{}
}

// CreatedAtCleared returns if the "created_at" field was cleared in this mutation.
func (m *TopicMutation) CreatedAtCleared() bool {
	_, ok := m.clearedFields[topic.FieldCreatedAt]
	return ok
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *TopicMutation) ResetCreatedAt() {
	m.created_at = nil
	delete(m.clearedFields, topic.FieldCreatedAt)
}

// SetUpdatedAt sets the "updated_at" field.
func (m *TopicMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *TopicMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Topic entity.
// If the Topic object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TopicMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *TopicMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[topic.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *TopicMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[topic.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *TopicMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, topic.FieldUpdatedAt)
}

// Where appends a list predicates to the TopicMutation builder.
func (m *TopicMutation) Where(ps ...predicate.Topic) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TopicMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TopicMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Topic, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TopicMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TopicMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Topic).
func (m *TopicMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TopicMutation) Fields() []string {
	fields := make([]string, 0, 16)
	if m.name != nil {
		fields = append(fields, topic.FieldName)
	}
	if m.title != nil {
		fields = append(fields, topic.FieldTitle)
	}
	if m.slug != nil {
		fields = append(fields, topic.FieldSlug)
	}
	if m.content != nil {
		fields = append(fields, topic.FieldContent)
	}
	if m.thumbnail != nil {
		fields = append(fields, topic.FieldThumbnail)
	}
	if m.temp != nil {
		fields = append(fields, topic.FieldTemp)
	}
	if m.markdown != nil {
		fields = append(fields, topic.FieldMarkdown)
	}
	if m.private != nil {
		fields = append(fields, topic.FieldPrivate)
	}
	if m.status != nil {
		fields = append(fields, topic.FieldStatus)
	}
	if m.released != nil {
		fields = append(fields, topic.FieldReleased)
	}
	if m.taxonomy_id != nil {
		fields = append(fields, topic.FieldTaxonomyID)
	}
	if m.domain_id != nil {
		fields = append(fields, topic.FieldDomainID)
	}
	if m.created_by != nil {
		fields = append(fields, topic.FieldCreatedBy)
	}
	if m.updated_by != nil {
		fields = append(fields, topic.FieldUpdatedBy)
	}
	if m.created_at != nil {
		fields = append(fields, topic.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, topic.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TopicMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case topic.FieldName:
		return m.Name()
	case topic.FieldTitle:
		return m.Title()
	case topic.FieldSlug:
		return m.Slug()
	case topic.FieldContent:
		return m.Content()
	case topic.FieldThumbnail:
		return m.Thumbnail()
	case topic.FieldTemp:
		return m.Temp()
	case topic.FieldMarkdown:
		return m.Markdown()
	case topic.FieldPrivate:
		return m.Private()
	case topic.FieldStatus:
		return m.Status()
	case topic.FieldReleased:
		return m.Released()
	case topic.FieldTaxonomyID:
		return m.TaxonomyID()
	case topic.FieldDomainID:
		return m.DomainID()
	case topic.FieldCreatedBy:
		return m.CreatedBy()
	case topic.FieldUpdatedBy:
		return m.UpdatedBy()
	case topic.FieldCreatedAt:
		return m.CreatedAt()
	case topic.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TopicMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case topic.FieldName:
		return m.OldName(ctx)
	case topic.FieldTitle:
		return m.OldTitle(ctx)
	case topic.FieldSlug:
		return m.OldSlug(ctx)
	case topic.FieldContent:
		return m.OldContent(ctx)
	case topic.FieldThumbnail:
		return m.OldThumbnail(ctx)
	case topic.FieldTemp:
		return m.OldTemp(ctx)
	case topic.FieldMarkdown:
		return m.OldMarkdown(ctx)
	case topic.FieldPrivate:
		return m.OldPrivate(ctx)
	case topic.FieldStatus:
		return m.OldStatus(ctx)
	case topic.FieldReleased:
		return m.OldReleased(ctx)
	case topic.FieldTaxonomyID:
		return m.OldTaxonomyID(ctx)
	case topic.FieldDomainID:
		return m.OldDomainID(ctx)
	case topic.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case topic.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	case topic.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case topic.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Topic field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TopicMutation) SetField(name string, value ent.Value) error {
	switch name {
	case topic.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case topic.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case topic.FieldSlug:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSlug(v)
		return nil
	case topic.FieldContent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContent(v)
		return nil
	case topic.FieldThumbnail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetThumbnail(v)
		return nil
	case topic.FieldTemp:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTemp(v)
		return nil
	case topic.FieldMarkdown:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMarkdown(v)
		return nil
	case topic.FieldPrivate:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrivate(v)
		return nil
	case topic.FieldStatus:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case topic.FieldReleased:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReleased(v)
		return nil
	case topic.FieldTaxonomyID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTaxonomyID(v)
		return nil
	case topic.FieldDomainID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDomainID(v)
		return nil
	case topic.FieldCreatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case topic.FieldUpdatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	case topic.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case topic.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Topic field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TopicMutation) AddedFields() []string {
	var fields []string
	if m.addstatus != nil {
		fields = append(fields, topic.FieldStatus)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TopicMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case topic.FieldStatus:
		return m.AddedStatus()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TopicMutation) AddField(name string, value ent.Value) error {
	switch name {
	case topic.FieldStatus:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatus(v)
		return nil
	}
	return fmt.Errorf("unknown Topic numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TopicMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(topic.FieldName) {
		fields = append(fields, topic.FieldName)
	}
	if m.FieldCleared(topic.FieldTitle) {
		fields = append(fields, topic.FieldTitle)
	}
	if m.FieldCleared(topic.FieldSlug) {
		fields = append(fields, topic.FieldSlug)
	}
	if m.FieldCleared(topic.FieldContent) {
		fields = append(fields, topic.FieldContent)
	}
	if m.FieldCleared(topic.FieldThumbnail) {
		fields = append(fields, topic.FieldThumbnail)
	}
	if m.FieldCleared(topic.FieldTemp) {
		fields = append(fields, topic.FieldTemp)
	}
	if m.FieldCleared(topic.FieldMarkdown) {
		fields = append(fields, topic.FieldMarkdown)
	}
	if m.FieldCleared(topic.FieldPrivate) {
		fields = append(fields, topic.FieldPrivate)
	}
	if m.FieldCleared(topic.FieldReleased) {
		fields = append(fields, topic.FieldReleased)
	}
	if m.FieldCleared(topic.FieldTaxonomyID) {
		fields = append(fields, topic.FieldTaxonomyID)
	}
	if m.FieldCleared(topic.FieldDomainID) {
		fields = append(fields, topic.FieldDomainID)
	}
	if m.FieldCleared(topic.FieldCreatedBy) {
		fields = append(fields, topic.FieldCreatedBy)
	}
	if m.FieldCleared(topic.FieldUpdatedBy) {
		fields = append(fields, topic.FieldUpdatedBy)
	}
	if m.FieldCleared(topic.FieldCreatedAt) {
		fields = append(fields, topic.FieldCreatedAt)
	}
	if m.FieldCleared(topic.FieldUpdatedAt) {
		fields = append(fields, topic.FieldUpdatedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TopicMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TopicMutation) ClearField(name string) error {
	switch name {
	case topic.FieldName:
		m.ClearName()
		return nil
	case topic.FieldTitle:
		m.ClearTitle()
		return nil
	case topic.FieldSlug:
		m.ClearSlug()
		return nil
	case topic.FieldContent:
		m.ClearContent()
		return nil
	case topic.FieldThumbnail:
		m.ClearThumbnail()
		return nil
	case topic.FieldTemp:
		m.ClearTemp()
		return nil
	case topic.FieldMarkdown:
		m.ClearMarkdown()
		return nil
	case topic.FieldPrivate:
		m.ClearPrivate()
		return nil
	case topic.FieldReleased:
		m.ClearReleased()
		return nil
	case topic.FieldTaxonomyID:
		m.ClearTaxonomyID()
		return nil
	case topic.FieldDomainID:
		m.ClearDomainID()
		return nil
	case topic.FieldCreatedBy:
		m.ClearCreatedBy()
		return nil
	case topic.FieldUpdatedBy:
		m.ClearUpdatedBy()
		return nil
	case topic.FieldCreatedAt:
		m.ClearCreatedAt()
		return nil
	case topic.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Topic nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TopicMutation) ResetField(name string) error {
	switch name {
	case topic.FieldName:
		m.ResetName()
		return nil
	case topic.FieldTitle:
		m.ResetTitle()
		return nil
	case topic.FieldSlug:
		m.ResetSlug()
		return nil
	case topic.FieldContent:
		m.ResetContent()
		return nil
	case topic.FieldThumbnail:
		m.ResetThumbnail()
		return nil
	case topic.FieldTemp:
		m.ResetTemp()
		return nil
	case topic.FieldMarkdown:
		m.ResetMarkdown()
		return nil
	case topic.FieldPrivate:
		m.ResetPrivate()
		return nil
	case topic.FieldStatus:
		m.ResetStatus()
		return nil
	case topic.FieldReleased:
		m.ResetReleased()
		return nil
	case topic.FieldTaxonomyID:
		m.ResetTaxonomyID()
		return nil
	case topic.FieldDomainID:
		m.ResetDomainID()
		return nil
	case topic.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case topic.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	case topic.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case topic.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Topic field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TopicMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TopicMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TopicMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TopicMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TopicMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TopicMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TopicMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Topic unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TopicMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Topic edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op            Op
	typ           string
	id            *string
	username      *string
	password      *string
	email         *string
	phone         *string
	is_certified  *bool
	is_admin      *bool
	status        *int32
	addstatus     *int32
	extras        *map[string]interface{}
	created_at    *time.Time
	updated_at    *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*User, error)
	predicates    []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id string) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUsername sets the "username" field.
func (m *UserMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *UserMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ClearUsername clears the value of the "username" field.
func (m *UserMutation) ClearUsername() {
	m.username = nil
	m.clearedFields[user.FieldUsername] = struct{}{}
}

// UsernameCleared returns if the "username" field was cleared in this mutation.
func (m *UserMutation) UsernameCleared() bool {
	_, ok := m.clearedFields[user.FieldUsername]
	return ok
}

// ResetUsername resets all changes to the "username" field.
func (m *UserMutation) ResetUsername() {
	m.username = nil
	delete(m.clearedFields, user.FieldUsername)
}

// SetPassword sets the "password" field.
func (m *UserMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *UserMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ClearPassword clears the value of the "password" field.
func (m *UserMutation) ClearPassword() {
	m.password = nil
	m.clearedFields[user.FieldPassword] = struct{}{}
}

// PasswordCleared returns if the "password" field was cleared in this mutation.
func (m *UserMutation) PasswordCleared() bool {
	_, ok := m.clearedFields[user.FieldPassword]
	return ok
}

// ResetPassword resets all changes to the "password" field.
func (m *UserMutation) ResetPassword() {
	m.password = nil
	delete(m.clearedFields, user.FieldPassword)
}

// SetEmail sets the "email" field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ClearEmail clears the value of the "email" field.
func (m *UserMutation) ClearEmail() {
	m.email = nil
	m.clearedFields[user.FieldEmail] = struct{}{}
}

// EmailCleared returns if the "email" field was cleared in this mutation.
func (m *UserMutation) EmailCleared() bool {
	_, ok := m.clearedFields[user.FieldEmail]
	return ok
}

// ResetEmail resets all changes to the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
	delete(m.clearedFields, user.FieldEmail)
}

// SetPhone sets the "phone" field.
func (m *UserMutation) SetPhone(s string) {
	m.phone = &s
}

// Phone returns the value of the "phone" field in the mutation.
func (m *UserMutation) Phone() (r string, exists bool) {
	v := m.phone
	if v == nil {
		return
	}
	return *v, true
}

// OldPhone returns the old "phone" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPhone(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhone is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhone requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhone: %w", err)
	}
	return oldValue.Phone, nil
}

// ClearPhone clears the value of the "phone" field.
func (m *UserMutation) ClearPhone() {
	m.phone = nil
	m.clearedFields[user.FieldPhone] = struct{}{}
}

// PhoneCleared returns if the "phone" field was cleared in this mutation.
func (m *UserMutation) PhoneCleared() bool {
	_, ok := m.clearedFields[user.FieldPhone]
	return ok
}

// ResetPhone resets all changes to the "phone" field.
func (m *UserMutation) ResetPhone() {
	m.phone = nil
	delete(m.clearedFields, user.FieldPhone)
}

// SetIsCertified sets the "is_certified" field.
func (m *UserMutation) SetIsCertified(b bool) {
	m.is_certified = &b
}

// IsCertified returns the value of the "is_certified" field in the mutation.
func (m *UserMutation) IsCertified() (r bool, exists bool) {
	v := m.is_certified
	if v == nil {
		return
	}
	return *v, true
}

// OldIsCertified returns the old "is_certified" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldIsCertified(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsCertified is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsCertified requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsCertified: %w", err)
	}
	return oldValue.IsCertified, nil
}

// ClearIsCertified clears the value of the "is_certified" field.
func (m *UserMutation) ClearIsCertified() {
	m.is_certified = nil
	m.clearedFields[user.FieldIsCertified] = struct{}{}
}

// IsCertifiedCleared returns if the "is_certified" field was cleared in this mutation.
func (m *UserMutation) IsCertifiedCleared() bool {
	_, ok := m.clearedFields[user.FieldIsCertified]
	return ok
}

// ResetIsCertified resets all changes to the "is_certified" field.
func (m *UserMutation) ResetIsCertified() {
	m.is_certified = nil
	delete(m.clearedFields, user.FieldIsCertified)
}

// SetIsAdmin sets the "is_admin" field.
func (m *UserMutation) SetIsAdmin(b bool) {
	m.is_admin = &b
}

// IsAdmin returns the value of the "is_admin" field in the mutation.
func (m *UserMutation) IsAdmin() (r bool, exists bool) {
	v := m.is_admin
	if v == nil {
		return
	}
	return *v, true
}

// OldIsAdmin returns the old "is_admin" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldIsAdmin(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsAdmin is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsAdmin requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsAdmin: %w", err)
	}
	return oldValue.IsAdmin, nil
}

// ClearIsAdmin clears the value of the "is_admin" field.
func (m *UserMutation) ClearIsAdmin() {
	m.is_admin = nil
	m.clearedFields[user.FieldIsAdmin] = struct{}{}
}

// IsAdminCleared returns if the "is_admin" field was cleared in this mutation.
func (m *UserMutation) IsAdminCleared() bool {
	_, ok := m.clearedFields[user.FieldIsAdmin]
	return ok
}

// ResetIsAdmin resets all changes to the "is_admin" field.
func (m *UserMutation) ResetIsAdmin() {
	m.is_admin = nil
	delete(m.clearedFields, user.FieldIsAdmin)
}

// SetStatus sets the "status" field.
func (m *UserMutation) SetStatus(i int32) {
	m.status = &i
	m.addstatus = nil
}

// Status returns the value of the "status" field in the mutation.
func (m *UserMutation) Status() (r int32, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldStatus(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// AddStatus adds i to the "status" field.
func (m *UserMutation) AddStatus(i int32) {
	if m.addstatus != nil {
		*m.addstatus += i
	} else {
		m.addstatus = &i
	}
}

// AddedStatus returns the value that was added to the "status" field in this mutation.
func (m *UserMutation) AddedStatus() (r int32, exists bool) {
	v := m.addstatus
	if v == nil {
		return
	}
	return *v, true
}

// ResetStatus resets all changes to the "status" field.
func (m *UserMutation) ResetStatus() {
	m.status = nil
	m.addstatus = nil
}

// SetExtras sets the "extras" field.
func (m *UserMutation) SetExtras(value map[string]interface{}) {
	m.extras = &value
}

// Extras returns the value of the "extras" field in the mutation.
func (m *UserMutation) Extras() (r map[string]interface{}, exists bool) {
	v := m.extras
	if v == nil {
		return
	}
	return *v, true
}

// OldExtras returns the old "extras" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldExtras(ctx context.Context) (v map[string]interface{}, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExtras is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExtras requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExtras: %w", err)
	}
	return oldValue.Extras, nil
}

// ClearExtras clears the value of the "extras" field.
func (m *UserMutation) ClearExtras() {
	m.extras = nil
	m.clearedFields[user.FieldExtras] = struct{}{}
}

// ExtrasCleared returns if the "extras" field was cleared in this mutation.
func (m *UserMutation) ExtrasCleared() bool {
	_, ok := m.clearedFields[user.FieldExtras]
	return ok
}

// ResetExtras resets all changes to the "extras" field.
func (m *UserMutation) ResetExtras() {
	m.extras = nil
	delete(m.clearedFields, user.FieldExtras)
}

// SetCreatedAt sets the "created_at" field.
func (m *UserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ClearCreatedAt clears the value of the "created_at" field.
func (m *UserMutation) ClearCreatedAt() {
	m.created_at = nil
	m.clearedFields[user.FieldCreatedAt] = struct{}{}
}

// CreatedAtCleared returns if the "created_at" field was cleared in this mutation.
func (m *UserMutation) CreatedAtCleared() bool {
	_, ok := m.clearedFields[user.FieldCreatedAt]
	return ok
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserMutation) ResetCreatedAt() {
	m.created_at = nil
	delete(m.clearedFields, user.FieldCreatedAt)
}

// SetUpdatedAt sets the "updated_at" field.
func (m *UserMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *UserMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *UserMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[user.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *UserMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[user.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *UserMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, user.FieldUpdatedAt)
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.username != nil {
		fields = append(fields, user.FieldUsername)
	}
	if m.password != nil {
		fields = append(fields, user.FieldPassword)
	}
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m.phone != nil {
		fields = append(fields, user.FieldPhone)
	}
	if m.is_certified != nil {
		fields = append(fields, user.FieldIsCertified)
	}
	if m.is_admin != nil {
		fields = append(fields, user.FieldIsAdmin)
	}
	if m.status != nil {
		fields = append(fields, user.FieldStatus)
	}
	if m.extras != nil {
		fields = append(fields, user.FieldExtras)
	}
	if m.created_at != nil {
		fields = append(fields, user.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, user.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldUsername:
		return m.Username()
	case user.FieldPassword:
		return m.Password()
	case user.FieldEmail:
		return m.Email()
	case user.FieldPhone:
		return m.Phone()
	case user.FieldIsCertified:
		return m.IsCertified()
	case user.FieldIsAdmin:
		return m.IsAdmin()
	case user.FieldStatus:
		return m.Status()
	case user.FieldExtras:
		return m.Extras()
	case user.FieldCreatedAt:
		return m.CreatedAt()
	case user.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldUsername:
		return m.OldUsername(ctx)
	case user.FieldPassword:
		return m.OldPassword(ctx)
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldPhone:
		return m.OldPhone(ctx)
	case user.FieldIsCertified:
		return m.OldIsCertified(ctx)
	case user.FieldIsAdmin:
		return m.OldIsAdmin(ctx)
	case user.FieldStatus:
		return m.OldStatus(ctx)
	case user.FieldExtras:
		return m.OldExtras(ctx)
	case user.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case user.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case user.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldPhone:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhone(v)
		return nil
	case user.FieldIsCertified:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsCertified(v)
		return nil
	case user.FieldIsAdmin:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsAdmin(v)
		return nil
	case user.FieldStatus:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case user.FieldExtras:
		v, ok := value.(map[string]interface{})
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExtras(v)
		return nil
	case user.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case user.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	var fields []string
	if m.addstatus != nil {
		fields = append(fields, user.FieldStatus)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case user.FieldStatus:
		return m.AddedStatus()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	case user.FieldStatus:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatus(v)
		return nil
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(user.FieldUsername) {
		fields = append(fields, user.FieldUsername)
	}
	if m.FieldCleared(user.FieldPassword) {
		fields = append(fields, user.FieldPassword)
	}
	if m.FieldCleared(user.FieldEmail) {
		fields = append(fields, user.FieldEmail)
	}
	if m.FieldCleared(user.FieldPhone) {
		fields = append(fields, user.FieldPhone)
	}
	if m.FieldCleared(user.FieldIsCertified) {
		fields = append(fields, user.FieldIsCertified)
	}
	if m.FieldCleared(user.FieldIsAdmin) {
		fields = append(fields, user.FieldIsAdmin)
	}
	if m.FieldCleared(user.FieldExtras) {
		fields = append(fields, user.FieldExtras)
	}
	if m.FieldCleared(user.FieldCreatedAt) {
		fields = append(fields, user.FieldCreatedAt)
	}
	if m.FieldCleared(user.FieldUpdatedAt) {
		fields = append(fields, user.FieldUpdatedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	switch name {
	case user.FieldUsername:
		m.ClearUsername()
		return nil
	case user.FieldPassword:
		m.ClearPassword()
		return nil
	case user.FieldEmail:
		m.ClearEmail()
		return nil
	case user.FieldPhone:
		m.ClearPhone()
		return nil
	case user.FieldIsCertified:
		m.ClearIsCertified()
		return nil
	case user.FieldIsAdmin:
		m.ClearIsAdmin()
		return nil
	case user.FieldExtras:
		m.ClearExtras()
		return nil
	case user.FieldCreatedAt:
		m.ClearCreatedAt()
		return nil
	case user.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldUsername:
		m.ResetUsername()
		return nil
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldPhone:
		m.ResetPhone()
		return nil
	case user.FieldIsCertified:
		m.ResetIsCertified()
		return nil
	case user.FieldIsAdmin:
		m.ResetIsAdmin()
		return nil
	case user.FieldStatus:
		m.ResetStatus()
		return nil
	case user.FieldExtras:
		m.ResetExtras()
		return nil
	case user.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case user.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown User edge %s", name)
}

// UserDomainMutation represents an operation that mutates the UserDomain nodes in the graph.
type UserDomainMutation struct {
	config
	op            Op
	typ           string
	id            *string
	domain_id     *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*UserDomain, error)
	predicates    []predicate.UserDomain
}

var _ ent.Mutation = (*UserDomainMutation)(nil)

// userdomainOption allows management of the mutation configuration using functional options.
type userdomainOption func(*UserDomainMutation)

// newUserDomainMutation creates new mutation for the UserDomain entity.
func newUserDomainMutation(c config, op Op, opts ...userdomainOption) *UserDomainMutation {
	m := &UserDomainMutation{
		config:        c,
		op:            op,
		typ:           TypeUserDomain,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserDomainID sets the ID field of the mutation.
func withUserDomainID(id string) userdomainOption {
	return func(m *UserDomainMutation) {
		var (
			err   error
			once  sync.Once
			value *UserDomain
		)
		m.oldValue = func(ctx context.Context) (*UserDomain, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().UserDomain.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUserDomain sets the old UserDomain of the mutation.
func withUserDomain(node *UserDomain) userdomainOption {
	return func(m *UserDomainMutation) {
		m.oldValue = func(context.Context) (*UserDomain, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserDomainMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserDomainMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of UserDomain entities.
func (m *UserDomainMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserDomainMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserDomainMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().UserDomain.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetDomainID sets the "domain_id" field.
func (m *UserDomainMutation) SetDomainID(s string) {
	m.domain_id = &s
}

// DomainID returns the value of the "domain_id" field in the mutation.
func (m *UserDomainMutation) DomainID() (r string, exists bool) {
	v := m.domain_id
	if v == nil {
		return
	}
	return *v, true
}

// OldDomainID returns the old "domain_id" field's value of the UserDomain entity.
// If the UserDomain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserDomainMutation) OldDomainID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDomainID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDomainID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDomainID: %w", err)
	}
	return oldValue.DomainID, nil
}

// ClearDomainID clears the value of the "domain_id" field.
func (m *UserDomainMutation) ClearDomainID() {
	m.domain_id = nil
	m.clearedFields[userdomain.FieldDomainID] = struct{}{}
}

// DomainIDCleared returns if the "domain_id" field was cleared in this mutation.
func (m *UserDomainMutation) DomainIDCleared() bool {
	_, ok := m.clearedFields[userdomain.FieldDomainID]
	return ok
}

// ResetDomainID resets all changes to the "domain_id" field.
func (m *UserDomainMutation) ResetDomainID() {
	m.domain_id = nil
	delete(m.clearedFields, userdomain.FieldDomainID)
}

// Where appends a list predicates to the UserDomainMutation builder.
func (m *UserDomainMutation) Where(ps ...predicate.UserDomain) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserDomainMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserDomainMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.UserDomain, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserDomainMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserDomainMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (UserDomain).
func (m *UserDomainMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserDomainMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.domain_id != nil {
		fields = append(fields, userdomain.FieldDomainID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserDomainMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case userdomain.FieldDomainID:
		return m.DomainID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserDomainMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case userdomain.FieldDomainID:
		return m.OldDomainID(ctx)
	}
	return nil, fmt.Errorf("unknown UserDomain field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserDomainMutation) SetField(name string, value ent.Value) error {
	switch name {
	case userdomain.FieldDomainID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDomainID(v)
		return nil
	}
	return fmt.Errorf("unknown UserDomain field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserDomainMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserDomainMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserDomainMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown UserDomain numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserDomainMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(userdomain.FieldDomainID) {
		fields = append(fields, userdomain.FieldDomainID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserDomainMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserDomainMutation) ClearField(name string) error {
	switch name {
	case userdomain.FieldDomainID:
		m.ClearDomainID()
		return nil
	}
	return fmt.Errorf("unknown UserDomain nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserDomainMutation) ResetField(name string) error {
	switch name {
	case userdomain.FieldDomainID:
		m.ResetDomainID()
		return nil
	}
	return fmt.Errorf("unknown UserDomain field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserDomainMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserDomainMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserDomainMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserDomainMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserDomainMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserDomainMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserDomainMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown UserDomain unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserDomainMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown UserDomain edge %s", name)
}

// UserDomainRoleMutation represents an operation that mutates the UserDomainRole nodes in the graph.
type UserDomainRoleMutation struct {
	config
	op            Op
	typ           string
	id            *string
	domain_id     *string
	role_id       *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*UserDomainRole, error)
	predicates    []predicate.UserDomainRole
}

var _ ent.Mutation = (*UserDomainRoleMutation)(nil)

// userdomainroleOption allows management of the mutation configuration using functional options.
type userdomainroleOption func(*UserDomainRoleMutation)

// newUserDomainRoleMutation creates new mutation for the UserDomainRole entity.
func newUserDomainRoleMutation(c config, op Op, opts ...userdomainroleOption) *UserDomainRoleMutation {
	m := &UserDomainRoleMutation{
		config:        c,
		op:            op,
		typ:           TypeUserDomainRole,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserDomainRoleID sets the ID field of the mutation.
func withUserDomainRoleID(id string) userdomainroleOption {
	return func(m *UserDomainRoleMutation) {
		var (
			err   error
			once  sync.Once
			value *UserDomainRole
		)
		m.oldValue = func(ctx context.Context) (*UserDomainRole, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().UserDomainRole.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUserDomainRole sets the old UserDomainRole of the mutation.
func withUserDomainRole(node *UserDomainRole) userdomainroleOption {
	return func(m *UserDomainRoleMutation) {
		m.oldValue = func(context.Context) (*UserDomainRole, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserDomainRoleMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserDomainRoleMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of UserDomainRole entities.
func (m *UserDomainRoleMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserDomainRoleMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserDomainRoleMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().UserDomainRole.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetDomainID sets the "domain_id" field.
func (m *UserDomainRoleMutation) SetDomainID(s string) {
	m.domain_id = &s
}

// DomainID returns the value of the "domain_id" field in the mutation.
func (m *UserDomainRoleMutation) DomainID() (r string, exists bool) {
	v := m.domain_id
	if v == nil {
		return
	}
	return *v, true
}

// OldDomainID returns the old "domain_id" field's value of the UserDomainRole entity.
// If the UserDomainRole object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserDomainRoleMutation) OldDomainID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDomainID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDomainID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDomainID: %w", err)
	}
	return oldValue.DomainID, nil
}

// ClearDomainID clears the value of the "domain_id" field.
func (m *UserDomainRoleMutation) ClearDomainID() {
	m.domain_id = nil
	m.clearedFields[userdomainrole.FieldDomainID] = struct{}{}
}

// DomainIDCleared returns if the "domain_id" field was cleared in this mutation.
func (m *UserDomainRoleMutation) DomainIDCleared() bool {
	_, ok := m.clearedFields[userdomainrole.FieldDomainID]
	return ok
}

// ResetDomainID resets all changes to the "domain_id" field.
func (m *UserDomainRoleMutation) ResetDomainID() {
	m.domain_id = nil
	delete(m.clearedFields, userdomainrole.FieldDomainID)
}

// SetRoleID sets the "role_id" field.
func (m *UserDomainRoleMutation) SetRoleID(s string) {
	m.role_id = &s
}

// RoleID returns the value of the "role_id" field in the mutation.
func (m *UserDomainRoleMutation) RoleID() (r string, exists bool) {
	v := m.role_id
	if v == nil {
		return
	}
	return *v, true
}

// OldRoleID returns the old "role_id" field's value of the UserDomainRole entity.
// If the UserDomainRole object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserDomainRoleMutation) OldRoleID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRoleID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRoleID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRoleID: %w", err)
	}
	return oldValue.RoleID, nil
}

// ClearRoleID clears the value of the "role_id" field.
func (m *UserDomainRoleMutation) ClearRoleID() {
	m.role_id = nil
	m.clearedFields[userdomainrole.FieldRoleID] = struct{}{}
}

// RoleIDCleared returns if the "role_id" field was cleared in this mutation.
func (m *UserDomainRoleMutation) RoleIDCleared() bool {
	_, ok := m.clearedFields[userdomainrole.FieldRoleID]
	return ok
}

// ResetRoleID resets all changes to the "role_id" field.
func (m *UserDomainRoleMutation) ResetRoleID() {
	m.role_id = nil
	delete(m.clearedFields, userdomainrole.FieldRoleID)
}

// Where appends a list predicates to the UserDomainRoleMutation builder.
func (m *UserDomainRoleMutation) Where(ps ...predicate.UserDomainRole) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserDomainRoleMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserDomainRoleMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.UserDomainRole, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserDomainRoleMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserDomainRoleMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (UserDomainRole).
func (m *UserDomainRoleMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserDomainRoleMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.domain_id != nil {
		fields = append(fields, userdomainrole.FieldDomainID)
	}
	if m.role_id != nil {
		fields = append(fields, userdomainrole.FieldRoleID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserDomainRoleMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case userdomainrole.FieldDomainID:
		return m.DomainID()
	case userdomainrole.FieldRoleID:
		return m.RoleID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserDomainRoleMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case userdomainrole.FieldDomainID:
		return m.OldDomainID(ctx)
	case userdomainrole.FieldRoleID:
		return m.OldRoleID(ctx)
	}
	return nil, fmt.Errorf("unknown UserDomainRole field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserDomainRoleMutation) SetField(name string, value ent.Value) error {
	switch name {
	case userdomainrole.FieldDomainID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDomainID(v)
		return nil
	case userdomainrole.FieldRoleID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRoleID(v)
		return nil
	}
	return fmt.Errorf("unknown UserDomainRole field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserDomainRoleMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserDomainRoleMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserDomainRoleMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown UserDomainRole numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserDomainRoleMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(userdomainrole.FieldDomainID) {
		fields = append(fields, userdomainrole.FieldDomainID)
	}
	if m.FieldCleared(userdomainrole.FieldRoleID) {
		fields = append(fields, userdomainrole.FieldRoleID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserDomainRoleMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserDomainRoleMutation) ClearField(name string) error {
	switch name {
	case userdomainrole.FieldDomainID:
		m.ClearDomainID()
		return nil
	case userdomainrole.FieldRoleID:
		m.ClearRoleID()
		return nil
	}
	return fmt.Errorf("unknown UserDomainRole nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserDomainRoleMutation) ResetField(name string) error {
	switch name {
	case userdomainrole.FieldDomainID:
		m.ResetDomainID()
		return nil
	case userdomainrole.FieldRoleID:
		m.ResetRoleID()
		return nil
	}
	return fmt.Errorf("unknown UserDomainRole field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserDomainRoleMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserDomainRoleMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserDomainRoleMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserDomainRoleMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserDomainRoleMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserDomainRoleMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserDomainRoleMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown UserDomainRole unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserDomainRoleMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown UserDomainRole edge %s", name)
}

// UserGroupMutation represents an operation that mutates the UserGroup nodes in the graph.
type UserGroupMutation struct {
	config
	op            Op
	typ           string
	id            *string
	group_id      *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*UserGroup, error)
	predicates    []predicate.UserGroup
}

var _ ent.Mutation = (*UserGroupMutation)(nil)

// usergroupOption allows management of the mutation configuration using functional options.
type usergroupOption func(*UserGroupMutation)

// newUserGroupMutation creates new mutation for the UserGroup entity.
func newUserGroupMutation(c config, op Op, opts ...usergroupOption) *UserGroupMutation {
	m := &UserGroupMutation{
		config:        c,
		op:            op,
		typ:           TypeUserGroup,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserGroupID sets the ID field of the mutation.
func withUserGroupID(id string) usergroupOption {
	return func(m *UserGroupMutation) {
		var (
			err   error
			once  sync.Once
			value *UserGroup
		)
		m.oldValue = func(ctx context.Context) (*UserGroup, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().UserGroup.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUserGroup sets the old UserGroup of the mutation.
func withUserGroup(node *UserGroup) usergroupOption {
	return func(m *UserGroupMutation) {
		m.oldValue = func(context.Context) (*UserGroup, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserGroupMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserGroupMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of UserGroup entities.
func (m *UserGroupMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserGroupMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserGroupMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().UserGroup.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetGroupID sets the "group_id" field.
func (m *UserGroupMutation) SetGroupID(s string) {
	m.group_id = &s
}

// GroupID returns the value of the "group_id" field in the mutation.
func (m *UserGroupMutation) GroupID() (r string, exists bool) {
	v := m.group_id
	if v == nil {
		return
	}
	return *v, true
}

// OldGroupID returns the old "group_id" field's value of the UserGroup entity.
// If the UserGroup object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserGroupMutation) OldGroupID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGroupID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGroupID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGroupID: %w", err)
	}
	return oldValue.GroupID, nil
}

// ClearGroupID clears the value of the "group_id" field.
func (m *UserGroupMutation) ClearGroupID() {
	m.group_id = nil
	m.clearedFields[usergroup.FieldGroupID] = struct{}{}
}

// GroupIDCleared returns if the "group_id" field was cleared in this mutation.
func (m *UserGroupMutation) GroupIDCleared() bool {
	_, ok := m.clearedFields[usergroup.FieldGroupID]
	return ok
}

// ResetGroupID resets all changes to the "group_id" field.
func (m *UserGroupMutation) ResetGroupID() {
	m.group_id = nil
	delete(m.clearedFields, usergroup.FieldGroupID)
}

// Where appends a list predicates to the UserGroupMutation builder.
func (m *UserGroupMutation) Where(ps ...predicate.UserGroup) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserGroupMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserGroupMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.UserGroup, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserGroupMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserGroupMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (UserGroup).
func (m *UserGroupMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserGroupMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.group_id != nil {
		fields = append(fields, usergroup.FieldGroupID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserGroupMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case usergroup.FieldGroupID:
		return m.GroupID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserGroupMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case usergroup.FieldGroupID:
		return m.OldGroupID(ctx)
	}
	return nil, fmt.Errorf("unknown UserGroup field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserGroupMutation) SetField(name string, value ent.Value) error {
	switch name {
	case usergroup.FieldGroupID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGroupID(v)
		return nil
	}
	return fmt.Errorf("unknown UserGroup field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserGroupMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserGroupMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserGroupMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown UserGroup numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserGroupMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(usergroup.FieldGroupID) {
		fields = append(fields, usergroup.FieldGroupID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserGroupMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserGroupMutation) ClearField(name string) error {
	switch name {
	case usergroup.FieldGroupID:
		m.ClearGroupID()
		return nil
	}
	return fmt.Errorf("unknown UserGroup nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserGroupMutation) ResetField(name string) error {
	switch name {
	case usergroup.FieldGroupID:
		m.ResetGroupID()
		return nil
	}
	return fmt.Errorf("unknown UserGroup field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserGroupMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserGroupMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserGroupMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserGroupMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserGroupMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserGroupMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserGroupMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown UserGroup unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserGroupMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown UserGroup edge %s", name)
}

// UserProfileMutation represents an operation that mutates the UserProfile nodes in the graph.
type UserProfileMutation struct {
	config
	op            Op
	typ           string
	id            *string
	display_name  *string
	short_bio     *string
	about         *string
	links         *[]map[string]interface{}
	appendlinks   []map[string]interface{}
	thumbnail     *string
	extras        *map[string]interface{}
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*UserProfile, error)
	predicates    []predicate.UserProfile
}

var _ ent.Mutation = (*UserProfileMutation)(nil)

// userprofileOption allows management of the mutation configuration using functional options.
type userprofileOption func(*UserProfileMutation)

// newUserProfileMutation creates new mutation for the UserProfile entity.
func newUserProfileMutation(c config, op Op, opts ...userprofileOption) *UserProfileMutation {
	m := &UserProfileMutation{
		config:        c,
		op:            op,
		typ:           TypeUserProfile,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserProfileID sets the ID field of the mutation.
func withUserProfileID(id string) userprofileOption {
	return func(m *UserProfileMutation) {
		var (
			err   error
			once  sync.Once
			value *UserProfile
		)
		m.oldValue = func(ctx context.Context) (*UserProfile, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().UserProfile.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUserProfile sets the old UserProfile of the mutation.
func withUserProfile(node *UserProfile) userprofileOption {
	return func(m *UserProfileMutation) {
		m.oldValue = func(context.Context) (*UserProfile, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserProfileMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserProfileMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of UserProfile entities.
func (m *UserProfileMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserProfileMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserProfileMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().UserProfile.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetDisplayName sets the "display_name" field.
func (m *UserProfileMutation) SetDisplayName(s string) {
	m.display_name = &s
}

// DisplayName returns the value of the "display_name" field in the mutation.
func (m *UserProfileMutation) DisplayName() (r string, exists bool) {
	v := m.display_name
	if v == nil {
		return
	}
	return *v, true
}

// OldDisplayName returns the old "display_name" field's value of the UserProfile entity.
// If the UserProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserProfileMutation) OldDisplayName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDisplayName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDisplayName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDisplayName: %w", err)
	}
	return oldValue.DisplayName, nil
}

// ClearDisplayName clears the value of the "display_name" field.
func (m *UserProfileMutation) ClearDisplayName() {
	m.display_name = nil
	m.clearedFields[userprofile.FieldDisplayName] = struct{}{}
}

// DisplayNameCleared returns if the "display_name" field was cleared in this mutation.
func (m *UserProfileMutation) DisplayNameCleared() bool {
	_, ok := m.clearedFields[userprofile.FieldDisplayName]
	return ok
}

// ResetDisplayName resets all changes to the "display_name" field.
func (m *UserProfileMutation) ResetDisplayName() {
	m.display_name = nil
	delete(m.clearedFields, userprofile.FieldDisplayName)
}

// SetShortBio sets the "short_bio" field.
func (m *UserProfileMutation) SetShortBio(s string) {
	m.short_bio = &s
}

// ShortBio returns the value of the "short_bio" field in the mutation.
func (m *UserProfileMutation) ShortBio() (r string, exists bool) {
	v := m.short_bio
	if v == nil {
		return
	}
	return *v, true
}

// OldShortBio returns the old "short_bio" field's value of the UserProfile entity.
// If the UserProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserProfileMutation) OldShortBio(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldShortBio is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldShortBio requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldShortBio: %w", err)
	}
	return oldValue.ShortBio, nil
}

// ClearShortBio clears the value of the "short_bio" field.
func (m *UserProfileMutation) ClearShortBio() {
	m.short_bio = nil
	m.clearedFields[userprofile.FieldShortBio] = struct{}{}
}

// ShortBioCleared returns if the "short_bio" field was cleared in this mutation.
func (m *UserProfileMutation) ShortBioCleared() bool {
	_, ok := m.clearedFields[userprofile.FieldShortBio]
	return ok
}

// ResetShortBio resets all changes to the "short_bio" field.
func (m *UserProfileMutation) ResetShortBio() {
	m.short_bio = nil
	delete(m.clearedFields, userprofile.FieldShortBio)
}

// SetAbout sets the "about" field.
func (m *UserProfileMutation) SetAbout(s string) {
	m.about = &s
}

// About returns the value of the "about" field in the mutation.
func (m *UserProfileMutation) About() (r string, exists bool) {
	v := m.about
	if v == nil {
		return
	}
	return *v, true
}

// OldAbout returns the old "about" field's value of the UserProfile entity.
// If the UserProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserProfileMutation) OldAbout(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAbout is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAbout requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAbout: %w", err)
	}
	return oldValue.About, nil
}

// ClearAbout clears the value of the "about" field.
func (m *UserProfileMutation) ClearAbout() {
	m.about = nil
	m.clearedFields[userprofile.FieldAbout] = struct{}{}
}

// AboutCleared returns if the "about" field was cleared in this mutation.
func (m *UserProfileMutation) AboutCleared() bool {
	_, ok := m.clearedFields[userprofile.FieldAbout]
	return ok
}

// ResetAbout resets all changes to the "about" field.
func (m *UserProfileMutation) ResetAbout() {
	m.about = nil
	delete(m.clearedFields, userprofile.FieldAbout)
}

// SetLinks sets the "links" field.
func (m *UserProfileMutation) SetLinks(value []map[string]interface{}) {
	m.links = &value
	m.appendlinks = nil
}

// Links returns the value of the "links" field in the mutation.
func (m *UserProfileMutation) Links() (r []map[string]interface{}, exists bool) {
	v := m.links
	if v == nil {
		return
	}
	return *v, true
}

// OldLinks returns the old "links" field's value of the UserProfile entity.
// If the UserProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserProfileMutation) OldLinks(ctx context.Context) (v []map[string]interface{}, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLinks is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLinks requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLinks: %w", err)
	}
	return oldValue.Links, nil
}

// AppendLinks adds value to the "links" field.
func (m *UserProfileMutation) AppendLinks(value []map[string]interface{}) {
	m.appendlinks = append(m.appendlinks, value...)
}

// AppendedLinks returns the list of values that were appended to the "links" field in this mutation.
func (m *UserProfileMutation) AppendedLinks() ([]map[string]interface{}, bool) {
	if len(m.appendlinks) == 0 {
		return nil, false
	}
	return m.appendlinks, true
}

// ClearLinks clears the value of the "links" field.
func (m *UserProfileMutation) ClearLinks() {
	m.links = nil
	m.appendlinks = nil
	m.clearedFields[userprofile.FieldLinks] = struct{}{}
}

// LinksCleared returns if the "links" field was cleared in this mutation.
func (m *UserProfileMutation) LinksCleared() bool {
	_, ok := m.clearedFields[userprofile.FieldLinks]
	return ok
}

// ResetLinks resets all changes to the "links" field.
func (m *UserProfileMutation) ResetLinks() {
	m.links = nil
	m.appendlinks = nil
	delete(m.clearedFields, userprofile.FieldLinks)
}

// SetThumbnail sets the "thumbnail" field.
func (m *UserProfileMutation) SetThumbnail(s string) {
	m.thumbnail = &s
}

// Thumbnail returns the value of the "thumbnail" field in the mutation.
func (m *UserProfileMutation) Thumbnail() (r string, exists bool) {
	v := m.thumbnail
	if v == nil {
		return
	}
	return *v, true
}

// OldThumbnail returns the old "thumbnail" field's value of the UserProfile entity.
// If the UserProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserProfileMutation) OldThumbnail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldThumbnail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldThumbnail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldThumbnail: %w", err)
	}
	return oldValue.Thumbnail, nil
}

// ClearThumbnail clears the value of the "thumbnail" field.
func (m *UserProfileMutation) ClearThumbnail() {
	m.thumbnail = nil
	m.clearedFields[userprofile.FieldThumbnail] = struct{}{}
}

// ThumbnailCleared returns if the "thumbnail" field was cleared in this mutation.
func (m *UserProfileMutation) ThumbnailCleared() bool {
	_, ok := m.clearedFields[userprofile.FieldThumbnail]
	return ok
}

// ResetThumbnail resets all changes to the "thumbnail" field.
func (m *UserProfileMutation) ResetThumbnail() {
	m.thumbnail = nil
	delete(m.clearedFields, userprofile.FieldThumbnail)
}

// SetExtras sets the "extras" field.
func (m *UserProfileMutation) SetExtras(value map[string]interface{}) {
	m.extras = &value
}

// Extras returns the value of the "extras" field in the mutation.
func (m *UserProfileMutation) Extras() (r map[string]interface{}, exists bool) {
	v := m.extras
	if v == nil {
		return
	}
	return *v, true
}

// OldExtras returns the old "extras" field's value of the UserProfile entity.
// If the UserProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserProfileMutation) OldExtras(ctx context.Context) (v map[string]interface{}, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExtras is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExtras requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExtras: %w", err)
	}
	return oldValue.Extras, nil
}

// ClearExtras clears the value of the "extras" field.
func (m *UserProfileMutation) ClearExtras() {
	m.extras = nil
	m.clearedFields[userprofile.FieldExtras] = struct{}{}
}

// ExtrasCleared returns if the "extras" field was cleared in this mutation.
func (m *UserProfileMutation) ExtrasCleared() bool {
	_, ok := m.clearedFields[userprofile.FieldExtras]
	return ok
}

// ResetExtras resets all changes to the "extras" field.
func (m *UserProfileMutation) ResetExtras() {
	m.extras = nil
	delete(m.clearedFields, userprofile.FieldExtras)
}

// Where appends a list predicates to the UserProfileMutation builder.
func (m *UserProfileMutation) Where(ps ...predicate.UserProfile) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserProfileMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserProfileMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.UserProfile, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserProfileMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserProfileMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (UserProfile).
func (m *UserProfileMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserProfileMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.display_name != nil {
		fields = append(fields, userprofile.FieldDisplayName)
	}
	if m.short_bio != nil {
		fields = append(fields, userprofile.FieldShortBio)
	}
	if m.about != nil {
		fields = append(fields, userprofile.FieldAbout)
	}
	if m.links != nil {
		fields = append(fields, userprofile.FieldLinks)
	}
	if m.thumbnail != nil {
		fields = append(fields, userprofile.FieldThumbnail)
	}
	if m.extras != nil {
		fields = append(fields, userprofile.FieldExtras)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserProfileMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case userprofile.FieldDisplayName:
		return m.DisplayName()
	case userprofile.FieldShortBio:
		return m.ShortBio()
	case userprofile.FieldAbout:
		return m.About()
	case userprofile.FieldLinks:
		return m.Links()
	case userprofile.FieldThumbnail:
		return m.Thumbnail()
	case userprofile.FieldExtras:
		return m.Extras()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserProfileMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case userprofile.FieldDisplayName:
		return m.OldDisplayName(ctx)
	case userprofile.FieldShortBio:
		return m.OldShortBio(ctx)
	case userprofile.FieldAbout:
		return m.OldAbout(ctx)
	case userprofile.FieldLinks:
		return m.OldLinks(ctx)
	case userprofile.FieldThumbnail:
		return m.OldThumbnail(ctx)
	case userprofile.FieldExtras:
		return m.OldExtras(ctx)
	}
	return nil, fmt.Errorf("unknown UserProfile field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserProfileMutation) SetField(name string, value ent.Value) error {
	switch name {
	case userprofile.FieldDisplayName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDisplayName(v)
		return nil
	case userprofile.FieldShortBio:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetShortBio(v)
		return nil
	case userprofile.FieldAbout:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAbout(v)
		return nil
	case userprofile.FieldLinks:
		v, ok := value.([]map[string]interface{})
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLinks(v)
		return nil
	case userprofile.FieldThumbnail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetThumbnail(v)
		return nil
	case userprofile.FieldExtras:
		v, ok := value.(map[string]interface{})
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExtras(v)
		return nil
	}
	return fmt.Errorf("unknown UserProfile field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserProfileMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserProfileMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserProfileMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown UserProfile numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserProfileMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(userprofile.FieldDisplayName) {
		fields = append(fields, userprofile.FieldDisplayName)
	}
	if m.FieldCleared(userprofile.FieldShortBio) {
		fields = append(fields, userprofile.FieldShortBio)
	}
	if m.FieldCleared(userprofile.FieldAbout) {
		fields = append(fields, userprofile.FieldAbout)
	}
	if m.FieldCleared(userprofile.FieldLinks) {
		fields = append(fields, userprofile.FieldLinks)
	}
	if m.FieldCleared(userprofile.FieldThumbnail) {
		fields = append(fields, userprofile.FieldThumbnail)
	}
	if m.FieldCleared(userprofile.FieldExtras) {
		fields = append(fields, userprofile.FieldExtras)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserProfileMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserProfileMutation) ClearField(name string) error {
	switch name {
	case userprofile.FieldDisplayName:
		m.ClearDisplayName()
		return nil
	case userprofile.FieldShortBio:
		m.ClearShortBio()
		return nil
	case userprofile.FieldAbout:
		m.ClearAbout()
		return nil
	case userprofile.FieldLinks:
		m.ClearLinks()
		return nil
	case userprofile.FieldThumbnail:
		m.ClearThumbnail()
		return nil
	case userprofile.FieldExtras:
		m.ClearExtras()
		return nil
	}
	return fmt.Errorf("unknown UserProfile nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserProfileMutation) ResetField(name string) error {
	switch name {
	case userprofile.FieldDisplayName:
		m.ResetDisplayName()
		return nil
	case userprofile.FieldShortBio:
		m.ResetShortBio()
		return nil
	case userprofile.FieldAbout:
		m.ResetAbout()
		return nil
	case userprofile.FieldLinks:
		m.ResetLinks()
		return nil
	case userprofile.FieldThumbnail:
		m.ResetThumbnail()
		return nil
	case userprofile.FieldExtras:
		m.ResetExtras()
		return nil
	}
	return fmt.Errorf("unknown UserProfile field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserProfileMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserProfileMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserProfileMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserProfileMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserProfileMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserProfileMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserProfileMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown UserProfile unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserProfileMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown UserProfile edge %s", name)
}

// UserRoleMutation represents an operation that mutates the UserRole nodes in the graph.
type UserRoleMutation struct {
	config
	op            Op
	typ           string
	id            *string
	role_id       *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*UserRole, error)
	predicates    []predicate.UserRole
}

var _ ent.Mutation = (*UserRoleMutation)(nil)

// userroleOption allows management of the mutation configuration using functional options.
type userroleOption func(*UserRoleMutation)

// newUserRoleMutation creates new mutation for the UserRole entity.
func newUserRoleMutation(c config, op Op, opts ...userroleOption) *UserRoleMutation {
	m := &UserRoleMutation{
		config:        c,
		op:            op,
		typ:           TypeUserRole,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserRoleID sets the ID field of the mutation.
func withUserRoleID(id string) userroleOption {
	return func(m *UserRoleMutation) {
		var (
			err   error
			once  sync.Once
			value *UserRole
		)
		m.oldValue = func(ctx context.Context) (*UserRole, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().UserRole.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUserRole sets the old UserRole of the mutation.
func withUserRole(node *UserRole) userroleOption {
	return func(m *UserRoleMutation) {
		m.oldValue = func(context.Context) (*UserRole, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserRoleMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserRoleMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of UserRole entities.
func (m *UserRoleMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserRoleMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserRoleMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().UserRole.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetRoleID sets the "role_id" field.
func (m *UserRoleMutation) SetRoleID(s string) {
	m.role_id = &s
}

// RoleID returns the value of the "role_id" field in the mutation.
func (m *UserRoleMutation) RoleID() (r string, exists bool) {
	v := m.role_id
	if v == nil {
		return
	}
	return *v, true
}

// OldRoleID returns the old "role_id" field's value of the UserRole entity.
// If the UserRole object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserRoleMutation) OldRoleID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRoleID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRoleID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRoleID: %w", err)
	}
	return oldValue.RoleID, nil
}

// ClearRoleID clears the value of the "role_id" field.
func (m *UserRoleMutation) ClearRoleID() {
	m.role_id = nil
	m.clearedFields[userrole.FieldRoleID] = struct{}{}
}

// RoleIDCleared returns if the "role_id" field was cleared in this mutation.
func (m *UserRoleMutation) RoleIDCleared() bool {
	_, ok := m.clearedFields[userrole.FieldRoleID]
	return ok
}

// ResetRoleID resets all changes to the "role_id" field.
func (m *UserRoleMutation) ResetRoleID() {
	m.role_id = nil
	delete(m.clearedFields, userrole.FieldRoleID)
}

// Where appends a list predicates to the UserRoleMutation builder.
func (m *UserRoleMutation) Where(ps ...predicate.UserRole) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserRoleMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserRoleMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.UserRole, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserRoleMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserRoleMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (UserRole).
func (m *UserRoleMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserRoleMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.role_id != nil {
		fields = append(fields, userrole.FieldRoleID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserRoleMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case userrole.FieldRoleID:
		return m.RoleID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserRoleMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case userrole.FieldRoleID:
		return m.OldRoleID(ctx)
	}
	return nil, fmt.Errorf("unknown UserRole field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserRoleMutation) SetField(name string, value ent.Value) error {
	switch name {
	case userrole.FieldRoleID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRoleID(v)
		return nil
	}
	return fmt.Errorf("unknown UserRole field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserRoleMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserRoleMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserRoleMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown UserRole numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserRoleMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(userrole.FieldRoleID) {
		fields = append(fields, userrole.FieldRoleID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserRoleMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserRoleMutation) ClearField(name string) error {
	switch name {
	case userrole.FieldRoleID:
		m.ClearRoleID()
		return nil
	}
	return fmt.Errorf("unknown UserRole nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserRoleMutation) ResetField(name string) error {
	switch name {
	case userrole.FieldRoleID:
		m.ResetRoleID()
		return nil
	}
	return fmt.Errorf("unknown UserRole field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserRoleMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserRoleMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserRoleMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserRoleMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserRoleMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserRoleMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserRoleMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown UserRole unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserRoleMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown UserRole edge %s", name)
}
