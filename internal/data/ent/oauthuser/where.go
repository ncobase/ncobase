// Code generated by ent, DO NOT EDIT.

package oauthuser

import (
	"stocms/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.OAuthUser {
	return predicate.OAuthUser(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.OAuthUser {
	return predicate.OAuthUser(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.OAuthUser {
	return predicate.OAuthUser(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.OAuthUser {
	return predicate.OAuthUser(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.OAuthUser {
	return predicate.OAuthUser(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.OAuthUser {
	return predicate.OAuthUser(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.OAuthUser {
	return predicate.OAuthUser(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.OAuthUser {
	return predicate.OAuthUser(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.OAuthUser {
	return predicate.OAuthUser(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.OAuthUser {
	return predicate.OAuthUser(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.OAuthUser {
	return predicate.OAuthUser(sql.FieldContainsFold(FieldID, id))
}

// OauthID applies equality check predicate on the "oauth_id" field. It's identical to OauthIDEQ.
func OauthID(v string) predicate.OAuthUser {
	return predicate.OAuthUser(sql.FieldEQ(FieldOauthID, v))
}

// AccessToken applies equality check predicate on the "access_token" field. It's identical to AccessTokenEQ.
func AccessToken(v string) predicate.OAuthUser {
	return predicate.OAuthUser(sql.FieldEQ(FieldAccessToken, v))
}

// Provider applies equality check predicate on the "provider" field. It's identical to ProviderEQ.
func Provider(v string) predicate.OAuthUser {
	return predicate.OAuthUser(sql.FieldEQ(FieldProvider, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v string) predicate.OAuthUser {
	return predicate.OAuthUser(sql.FieldEQ(FieldUserID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.OAuthUser {
	return predicate.OAuthUser(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.OAuthUser {
	return predicate.OAuthUser(sql.FieldEQ(FieldUpdatedAt, v))
}

// OauthIDEQ applies the EQ predicate on the "oauth_id" field.
func OauthIDEQ(v string) predicate.OAuthUser {
	return predicate.OAuthUser(sql.FieldEQ(FieldOauthID, v))
}

// OauthIDNEQ applies the NEQ predicate on the "oauth_id" field.
func OauthIDNEQ(v string) predicate.OAuthUser {
	return predicate.OAuthUser(sql.FieldNEQ(FieldOauthID, v))
}

// OauthIDIn applies the In predicate on the "oauth_id" field.
func OauthIDIn(vs ...string) predicate.OAuthUser {
	return predicate.OAuthUser(sql.FieldIn(FieldOauthID, vs...))
}

// OauthIDNotIn applies the NotIn predicate on the "oauth_id" field.
func OauthIDNotIn(vs ...string) predicate.OAuthUser {
	return predicate.OAuthUser(sql.FieldNotIn(FieldOauthID, vs...))
}

// OauthIDGT applies the GT predicate on the "oauth_id" field.
func OauthIDGT(v string) predicate.OAuthUser {
	return predicate.OAuthUser(sql.FieldGT(FieldOauthID, v))
}

// OauthIDGTE applies the GTE predicate on the "oauth_id" field.
func OauthIDGTE(v string) predicate.OAuthUser {
	return predicate.OAuthUser(sql.FieldGTE(FieldOauthID, v))
}

// OauthIDLT applies the LT predicate on the "oauth_id" field.
func OauthIDLT(v string) predicate.OAuthUser {
	return predicate.OAuthUser(sql.FieldLT(FieldOauthID, v))
}

// OauthIDLTE applies the LTE predicate on the "oauth_id" field.
func OauthIDLTE(v string) predicate.OAuthUser {
	return predicate.OAuthUser(sql.FieldLTE(FieldOauthID, v))
}

// OauthIDContains applies the Contains predicate on the "oauth_id" field.
func OauthIDContains(v string) predicate.OAuthUser {
	return predicate.OAuthUser(sql.FieldContains(FieldOauthID, v))
}

// OauthIDHasPrefix applies the HasPrefix predicate on the "oauth_id" field.
func OauthIDHasPrefix(v string) predicate.OAuthUser {
	return predicate.OAuthUser(sql.FieldHasPrefix(FieldOauthID, v))
}

// OauthIDHasSuffix applies the HasSuffix predicate on the "oauth_id" field.
func OauthIDHasSuffix(v string) predicate.OAuthUser {
	return predicate.OAuthUser(sql.FieldHasSuffix(FieldOauthID, v))
}

// OauthIDIsNil applies the IsNil predicate on the "oauth_id" field.
func OauthIDIsNil() predicate.OAuthUser {
	return predicate.OAuthUser(sql.FieldIsNull(FieldOauthID))
}

// OauthIDNotNil applies the NotNil predicate on the "oauth_id" field.
func OauthIDNotNil() predicate.OAuthUser {
	return predicate.OAuthUser(sql.FieldNotNull(FieldOauthID))
}

// OauthIDEqualFold applies the EqualFold predicate on the "oauth_id" field.
func OauthIDEqualFold(v string) predicate.OAuthUser {
	return predicate.OAuthUser(sql.FieldEqualFold(FieldOauthID, v))
}

// OauthIDContainsFold applies the ContainsFold predicate on the "oauth_id" field.
func OauthIDContainsFold(v string) predicate.OAuthUser {
	return predicate.OAuthUser(sql.FieldContainsFold(FieldOauthID, v))
}

// AccessTokenEQ applies the EQ predicate on the "access_token" field.
func AccessTokenEQ(v string) predicate.OAuthUser {
	return predicate.OAuthUser(sql.FieldEQ(FieldAccessToken, v))
}

// AccessTokenNEQ applies the NEQ predicate on the "access_token" field.
func AccessTokenNEQ(v string) predicate.OAuthUser {
	return predicate.OAuthUser(sql.FieldNEQ(FieldAccessToken, v))
}

// AccessTokenIn applies the In predicate on the "access_token" field.
func AccessTokenIn(vs ...string) predicate.OAuthUser {
	return predicate.OAuthUser(sql.FieldIn(FieldAccessToken, vs...))
}

// AccessTokenNotIn applies the NotIn predicate on the "access_token" field.
func AccessTokenNotIn(vs ...string) predicate.OAuthUser {
	return predicate.OAuthUser(sql.FieldNotIn(FieldAccessToken, vs...))
}

// AccessTokenGT applies the GT predicate on the "access_token" field.
func AccessTokenGT(v string) predicate.OAuthUser {
	return predicate.OAuthUser(sql.FieldGT(FieldAccessToken, v))
}

// AccessTokenGTE applies the GTE predicate on the "access_token" field.
func AccessTokenGTE(v string) predicate.OAuthUser {
	return predicate.OAuthUser(sql.FieldGTE(FieldAccessToken, v))
}

// AccessTokenLT applies the LT predicate on the "access_token" field.
func AccessTokenLT(v string) predicate.OAuthUser {
	return predicate.OAuthUser(sql.FieldLT(FieldAccessToken, v))
}

// AccessTokenLTE applies the LTE predicate on the "access_token" field.
func AccessTokenLTE(v string) predicate.OAuthUser {
	return predicate.OAuthUser(sql.FieldLTE(FieldAccessToken, v))
}

// AccessTokenContains applies the Contains predicate on the "access_token" field.
func AccessTokenContains(v string) predicate.OAuthUser {
	return predicate.OAuthUser(sql.FieldContains(FieldAccessToken, v))
}

// AccessTokenHasPrefix applies the HasPrefix predicate on the "access_token" field.
func AccessTokenHasPrefix(v string) predicate.OAuthUser {
	return predicate.OAuthUser(sql.FieldHasPrefix(FieldAccessToken, v))
}

// AccessTokenHasSuffix applies the HasSuffix predicate on the "access_token" field.
func AccessTokenHasSuffix(v string) predicate.OAuthUser {
	return predicate.OAuthUser(sql.FieldHasSuffix(FieldAccessToken, v))
}

// AccessTokenEqualFold applies the EqualFold predicate on the "access_token" field.
func AccessTokenEqualFold(v string) predicate.OAuthUser {
	return predicate.OAuthUser(sql.FieldEqualFold(FieldAccessToken, v))
}

// AccessTokenContainsFold applies the ContainsFold predicate on the "access_token" field.
func AccessTokenContainsFold(v string) predicate.OAuthUser {
	return predicate.OAuthUser(sql.FieldContainsFold(FieldAccessToken, v))
}

// ProviderEQ applies the EQ predicate on the "provider" field.
func ProviderEQ(v string) predicate.OAuthUser {
	return predicate.OAuthUser(sql.FieldEQ(FieldProvider, v))
}

// ProviderNEQ applies the NEQ predicate on the "provider" field.
func ProviderNEQ(v string) predicate.OAuthUser {
	return predicate.OAuthUser(sql.FieldNEQ(FieldProvider, v))
}

// ProviderIn applies the In predicate on the "provider" field.
func ProviderIn(vs ...string) predicate.OAuthUser {
	return predicate.OAuthUser(sql.FieldIn(FieldProvider, vs...))
}

// ProviderNotIn applies the NotIn predicate on the "provider" field.
func ProviderNotIn(vs ...string) predicate.OAuthUser {
	return predicate.OAuthUser(sql.FieldNotIn(FieldProvider, vs...))
}

// ProviderGT applies the GT predicate on the "provider" field.
func ProviderGT(v string) predicate.OAuthUser {
	return predicate.OAuthUser(sql.FieldGT(FieldProvider, v))
}

// ProviderGTE applies the GTE predicate on the "provider" field.
func ProviderGTE(v string) predicate.OAuthUser {
	return predicate.OAuthUser(sql.FieldGTE(FieldProvider, v))
}

// ProviderLT applies the LT predicate on the "provider" field.
func ProviderLT(v string) predicate.OAuthUser {
	return predicate.OAuthUser(sql.FieldLT(FieldProvider, v))
}

// ProviderLTE applies the LTE predicate on the "provider" field.
func ProviderLTE(v string) predicate.OAuthUser {
	return predicate.OAuthUser(sql.FieldLTE(FieldProvider, v))
}

// ProviderContains applies the Contains predicate on the "provider" field.
func ProviderContains(v string) predicate.OAuthUser {
	return predicate.OAuthUser(sql.FieldContains(FieldProvider, v))
}

// ProviderHasPrefix applies the HasPrefix predicate on the "provider" field.
func ProviderHasPrefix(v string) predicate.OAuthUser {
	return predicate.OAuthUser(sql.FieldHasPrefix(FieldProvider, v))
}

// ProviderHasSuffix applies the HasSuffix predicate on the "provider" field.
func ProviderHasSuffix(v string) predicate.OAuthUser {
	return predicate.OAuthUser(sql.FieldHasSuffix(FieldProvider, v))
}

// ProviderIsNil applies the IsNil predicate on the "provider" field.
func ProviderIsNil() predicate.OAuthUser {
	return predicate.OAuthUser(sql.FieldIsNull(FieldProvider))
}

// ProviderNotNil applies the NotNil predicate on the "provider" field.
func ProviderNotNil() predicate.OAuthUser {
	return predicate.OAuthUser(sql.FieldNotNull(FieldProvider))
}

// ProviderEqualFold applies the EqualFold predicate on the "provider" field.
func ProviderEqualFold(v string) predicate.OAuthUser {
	return predicate.OAuthUser(sql.FieldEqualFold(FieldProvider, v))
}

// ProviderContainsFold applies the ContainsFold predicate on the "provider" field.
func ProviderContainsFold(v string) predicate.OAuthUser {
	return predicate.OAuthUser(sql.FieldContainsFold(FieldProvider, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v string) predicate.OAuthUser {
	return predicate.OAuthUser(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v string) predicate.OAuthUser {
	return predicate.OAuthUser(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...string) predicate.OAuthUser {
	return predicate.OAuthUser(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...string) predicate.OAuthUser {
	return predicate.OAuthUser(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v string) predicate.OAuthUser {
	return predicate.OAuthUser(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v string) predicate.OAuthUser {
	return predicate.OAuthUser(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v string) predicate.OAuthUser {
	return predicate.OAuthUser(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v string) predicate.OAuthUser {
	return predicate.OAuthUser(sql.FieldLTE(FieldUserID, v))
}

// UserIDContains applies the Contains predicate on the "user_id" field.
func UserIDContains(v string) predicate.OAuthUser {
	return predicate.OAuthUser(sql.FieldContains(FieldUserID, v))
}

// UserIDHasPrefix applies the HasPrefix predicate on the "user_id" field.
func UserIDHasPrefix(v string) predicate.OAuthUser {
	return predicate.OAuthUser(sql.FieldHasPrefix(FieldUserID, v))
}

// UserIDHasSuffix applies the HasSuffix predicate on the "user_id" field.
func UserIDHasSuffix(v string) predicate.OAuthUser {
	return predicate.OAuthUser(sql.FieldHasSuffix(FieldUserID, v))
}

// UserIDIsNil applies the IsNil predicate on the "user_id" field.
func UserIDIsNil() predicate.OAuthUser {
	return predicate.OAuthUser(sql.FieldIsNull(FieldUserID))
}

// UserIDNotNil applies the NotNil predicate on the "user_id" field.
func UserIDNotNil() predicate.OAuthUser {
	return predicate.OAuthUser(sql.FieldNotNull(FieldUserID))
}

// UserIDEqualFold applies the EqualFold predicate on the "user_id" field.
func UserIDEqualFold(v string) predicate.OAuthUser {
	return predicate.OAuthUser(sql.FieldEqualFold(FieldUserID, v))
}

// UserIDContainsFold applies the ContainsFold predicate on the "user_id" field.
func UserIDContainsFold(v string) predicate.OAuthUser {
	return predicate.OAuthUser(sql.FieldContainsFold(FieldUserID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.OAuthUser {
	return predicate.OAuthUser(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.OAuthUser {
	return predicate.OAuthUser(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.OAuthUser {
	return predicate.OAuthUser(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.OAuthUser {
	return predicate.OAuthUser(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.OAuthUser {
	return predicate.OAuthUser(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.OAuthUser {
	return predicate.OAuthUser(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.OAuthUser {
	return predicate.OAuthUser(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.OAuthUser {
	return predicate.OAuthUser(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.OAuthUser {
	return predicate.OAuthUser(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.OAuthUser {
	return predicate.OAuthUser(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.OAuthUser {
	return predicate.OAuthUser(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.OAuthUser {
	return predicate.OAuthUser(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.OAuthUser {
	return predicate.OAuthUser(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.OAuthUser {
	return predicate.OAuthUser(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.OAuthUser {
	return predicate.OAuthUser(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.OAuthUser {
	return predicate.OAuthUser(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.OAuthUser {
	return predicate.OAuthUser(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.OAuthUser {
	return predicate.OAuthUser(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.OAuthUser {
	return predicate.OAuthUser(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.OAuthUser {
	return predicate.OAuthUser(sql.FieldNotNull(FieldUpdatedAt))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.OAuthUser) predicate.OAuthUser {
	return predicate.OAuthUser(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.OAuthUser) predicate.OAuthUser {
	return predicate.OAuthUser(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.OAuthUser) predicate.OAuthUser {
	return predicate.OAuthUser(sql.NotPredicates(p))
}
