// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"stocms/internal/data/ent/predicate"
	"stocms/internal/data/ent/resource"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ResourceUpdate is the builder for updating Resource entities.
type ResourceUpdate struct {
	config
	hooks    []Hook
	mutation *ResourceMutation
}

// Where appends a list predicates to the ResourceUpdate builder.
func (ru *ResourceUpdate) Where(ps ...predicate.Resource) *ResourceUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetName sets the "name" field.
func (ru *ResourceUpdate) SetName(s string) *ResourceUpdate {
	ru.mutation.SetName(s)
	return ru
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ru *ResourceUpdate) SetNillableName(s *string) *ResourceUpdate {
	if s != nil {
		ru.SetName(*s)
	}
	return ru
}

// ClearName clears the value of the "name" field.
func (ru *ResourceUpdate) ClearName() *ResourceUpdate {
	ru.mutation.ClearName()
	return ru
}

// SetPath sets the "path" field.
func (ru *ResourceUpdate) SetPath(s string) *ResourceUpdate {
	ru.mutation.SetPath(s)
	return ru
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (ru *ResourceUpdate) SetNillablePath(s *string) *ResourceUpdate {
	if s != nil {
		ru.SetPath(*s)
	}
	return ru
}

// ClearPath clears the value of the "path" field.
func (ru *ResourceUpdate) ClearPath() *ResourceUpdate {
	ru.mutation.ClearPath()
	return ru
}

// SetType sets the "type" field.
func (ru *ResourceUpdate) SetType(s string) *ResourceUpdate {
	ru.mutation.SetType(s)
	return ru
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ru *ResourceUpdate) SetNillableType(s *string) *ResourceUpdate {
	if s != nil {
		ru.SetType(*s)
	}
	return ru
}

// ClearType clears the value of the "type" field.
func (ru *ResourceUpdate) ClearType() *ResourceUpdate {
	ru.mutation.ClearType()
	return ru
}

// SetSize sets the "size" field.
func (ru *ResourceUpdate) SetSize(i int64) *ResourceUpdate {
	ru.mutation.ResetSize()
	ru.mutation.SetSize(i)
	return ru
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (ru *ResourceUpdate) SetNillableSize(i *int64) *ResourceUpdate {
	if i != nil {
		ru.SetSize(*i)
	}
	return ru
}

// AddSize adds i to the "size" field.
func (ru *ResourceUpdate) AddSize(i int64) *ResourceUpdate {
	ru.mutation.AddSize(i)
	return ru
}

// SetStorage sets the "storage" field.
func (ru *ResourceUpdate) SetStorage(s string) *ResourceUpdate {
	ru.mutation.SetStorage(s)
	return ru
}

// SetNillableStorage sets the "storage" field if the given value is not nil.
func (ru *ResourceUpdate) SetNillableStorage(s *string) *ResourceUpdate {
	if s != nil {
		ru.SetStorage(*s)
	}
	return ru
}

// ClearStorage clears the value of the "storage" field.
func (ru *ResourceUpdate) ClearStorage() *ResourceUpdate {
	ru.mutation.ClearStorage()
	return ru
}

// SetObjectID sets the "object_id" field.
func (ru *ResourceUpdate) SetObjectID(s string) *ResourceUpdate {
	ru.mutation.SetObjectID(s)
	return ru
}

// SetNillableObjectID sets the "object_id" field if the given value is not nil.
func (ru *ResourceUpdate) SetNillableObjectID(s *string) *ResourceUpdate {
	if s != nil {
		ru.SetObjectID(*s)
	}
	return ru
}

// ClearObjectID clears the value of the "object_id" field.
func (ru *ResourceUpdate) ClearObjectID() *ResourceUpdate {
	ru.mutation.ClearObjectID()
	return ru
}

// SetDomainID sets the "domain_id" field.
func (ru *ResourceUpdate) SetDomainID(s string) *ResourceUpdate {
	ru.mutation.SetDomainID(s)
	return ru
}

// SetNillableDomainID sets the "domain_id" field if the given value is not nil.
func (ru *ResourceUpdate) SetNillableDomainID(s *string) *ResourceUpdate {
	if s != nil {
		ru.SetDomainID(*s)
	}
	return ru
}

// ClearDomainID clears the value of the "domain_id" field.
func (ru *ResourceUpdate) ClearDomainID() *ResourceUpdate {
	ru.mutation.ClearDomainID()
	return ru
}

// SetExtras sets the "extras" field.
func (ru *ResourceUpdate) SetExtras(m map[string]interface{}) *ResourceUpdate {
	ru.mutation.SetExtras(m)
	return ru
}

// ClearExtras clears the value of the "extras" field.
func (ru *ResourceUpdate) ClearExtras() *ResourceUpdate {
	ru.mutation.ClearExtras()
	return ru
}

// SetCreatedBy sets the "created_by" field.
func (ru *ResourceUpdate) SetCreatedBy(s string) *ResourceUpdate {
	ru.mutation.SetCreatedBy(s)
	return ru
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (ru *ResourceUpdate) SetNillableCreatedBy(s *string) *ResourceUpdate {
	if s != nil {
		ru.SetCreatedBy(*s)
	}
	return ru
}

// ClearCreatedBy clears the value of the "created_by" field.
func (ru *ResourceUpdate) ClearCreatedBy() *ResourceUpdate {
	ru.mutation.ClearCreatedBy()
	return ru
}

// SetUpdatedBy sets the "updated_by" field.
func (ru *ResourceUpdate) SetUpdatedBy(s string) *ResourceUpdate {
	ru.mutation.SetUpdatedBy(s)
	return ru
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ru *ResourceUpdate) SetNillableUpdatedBy(s *string) *ResourceUpdate {
	if s != nil {
		ru.SetUpdatedBy(*s)
	}
	return ru
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (ru *ResourceUpdate) ClearUpdatedBy() *ResourceUpdate {
	ru.mutation.ClearUpdatedBy()
	return ru
}

// SetUpdatedAt sets the "updated_at" field.
func (ru *ResourceUpdate) SetUpdatedAt(t time.Time) *ResourceUpdate {
	ru.mutation.SetUpdatedAt(t)
	return ru
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (ru *ResourceUpdate) ClearUpdatedAt() *ResourceUpdate {
	ru.mutation.ClearUpdatedAt()
	return ru
}

// Mutation returns the ResourceMutation object of the builder.
func (ru *ResourceUpdate) Mutation() *ResourceMutation {
	return ru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *ResourceUpdate) Save(ctx context.Context) (int, error) {
	ru.defaults()
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *ResourceUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *ResourceUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *ResourceUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ru *ResourceUpdate) defaults() {
	if _, ok := ru.mutation.UpdatedAt(); !ok && !ru.mutation.UpdatedAtCleared() {
		v := resource.UpdateDefaultUpdatedAt()
		ru.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ru *ResourceUpdate) check() error {
	if v, ok := ru.mutation.ObjectID(); ok {
		if err := resource.ObjectIDValidator(v); err != nil {
			return &ValidationError{Name: "object_id", err: fmt.Errorf(`ent: validator failed for field "Resource.object_id": %w`, err)}
		}
	}
	if v, ok := ru.mutation.DomainID(); ok {
		if err := resource.DomainIDValidator(v); err != nil {
			return &ValidationError{Name: "domain_id", err: fmt.Errorf(`ent: validator failed for field "Resource.domain_id": %w`, err)}
		}
	}
	if v, ok := ru.mutation.CreatedBy(); ok {
		if err := resource.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "Resource.created_by": %w`, err)}
		}
	}
	if v, ok := ru.mutation.UpdatedBy(); ok {
		if err := resource.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "Resource.updated_by": %w`, err)}
		}
	}
	return nil
}

func (ru *ResourceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(resource.Table, resource.Columns, sqlgraph.NewFieldSpec(resource.FieldID, field.TypeString))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.Name(); ok {
		_spec.SetField(resource.FieldName, field.TypeString, value)
	}
	if ru.mutation.NameCleared() {
		_spec.ClearField(resource.FieldName, field.TypeString)
	}
	if value, ok := ru.mutation.Path(); ok {
		_spec.SetField(resource.FieldPath, field.TypeString, value)
	}
	if ru.mutation.PathCleared() {
		_spec.ClearField(resource.FieldPath, field.TypeString)
	}
	if value, ok := ru.mutation.GetType(); ok {
		_spec.SetField(resource.FieldType, field.TypeString, value)
	}
	if ru.mutation.TypeCleared() {
		_spec.ClearField(resource.FieldType, field.TypeString)
	}
	if value, ok := ru.mutation.Size(); ok {
		_spec.SetField(resource.FieldSize, field.TypeInt64, value)
	}
	if value, ok := ru.mutation.AddedSize(); ok {
		_spec.AddField(resource.FieldSize, field.TypeInt64, value)
	}
	if value, ok := ru.mutation.Storage(); ok {
		_spec.SetField(resource.FieldStorage, field.TypeString, value)
	}
	if ru.mutation.StorageCleared() {
		_spec.ClearField(resource.FieldStorage, field.TypeString)
	}
	if value, ok := ru.mutation.ObjectID(); ok {
		_spec.SetField(resource.FieldObjectID, field.TypeString, value)
	}
	if ru.mutation.ObjectIDCleared() {
		_spec.ClearField(resource.FieldObjectID, field.TypeString)
	}
	if value, ok := ru.mutation.DomainID(); ok {
		_spec.SetField(resource.FieldDomainID, field.TypeString, value)
	}
	if ru.mutation.DomainIDCleared() {
		_spec.ClearField(resource.FieldDomainID, field.TypeString)
	}
	if value, ok := ru.mutation.Extras(); ok {
		_spec.SetField(resource.FieldExtras, field.TypeJSON, value)
	}
	if ru.mutation.ExtrasCleared() {
		_spec.ClearField(resource.FieldExtras, field.TypeJSON)
	}
	if value, ok := ru.mutation.CreatedBy(); ok {
		_spec.SetField(resource.FieldCreatedBy, field.TypeString, value)
	}
	if ru.mutation.CreatedByCleared() {
		_spec.ClearField(resource.FieldCreatedBy, field.TypeString)
	}
	if value, ok := ru.mutation.UpdatedBy(); ok {
		_spec.SetField(resource.FieldUpdatedBy, field.TypeString, value)
	}
	if ru.mutation.UpdatedByCleared() {
		_spec.ClearField(resource.FieldUpdatedBy, field.TypeString)
	}
	if ru.mutation.CreatedAtCleared() {
		_spec.ClearField(resource.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := ru.mutation.UpdatedAt(); ok {
		_spec.SetField(resource.FieldUpdatedAt, field.TypeTime, value)
	}
	if ru.mutation.UpdatedAtCleared() {
		_spec.ClearField(resource.FieldUpdatedAt, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{resource.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// ResourceUpdateOne is the builder for updating a single Resource entity.
type ResourceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ResourceMutation
}

// SetName sets the "name" field.
func (ruo *ResourceUpdateOne) SetName(s string) *ResourceUpdateOne {
	ruo.mutation.SetName(s)
	return ruo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ruo *ResourceUpdateOne) SetNillableName(s *string) *ResourceUpdateOne {
	if s != nil {
		ruo.SetName(*s)
	}
	return ruo
}

// ClearName clears the value of the "name" field.
func (ruo *ResourceUpdateOne) ClearName() *ResourceUpdateOne {
	ruo.mutation.ClearName()
	return ruo
}

// SetPath sets the "path" field.
func (ruo *ResourceUpdateOne) SetPath(s string) *ResourceUpdateOne {
	ruo.mutation.SetPath(s)
	return ruo
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (ruo *ResourceUpdateOne) SetNillablePath(s *string) *ResourceUpdateOne {
	if s != nil {
		ruo.SetPath(*s)
	}
	return ruo
}

// ClearPath clears the value of the "path" field.
func (ruo *ResourceUpdateOne) ClearPath() *ResourceUpdateOne {
	ruo.mutation.ClearPath()
	return ruo
}

// SetType sets the "type" field.
func (ruo *ResourceUpdateOne) SetType(s string) *ResourceUpdateOne {
	ruo.mutation.SetType(s)
	return ruo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ruo *ResourceUpdateOne) SetNillableType(s *string) *ResourceUpdateOne {
	if s != nil {
		ruo.SetType(*s)
	}
	return ruo
}

// ClearType clears the value of the "type" field.
func (ruo *ResourceUpdateOne) ClearType() *ResourceUpdateOne {
	ruo.mutation.ClearType()
	return ruo
}

// SetSize sets the "size" field.
func (ruo *ResourceUpdateOne) SetSize(i int64) *ResourceUpdateOne {
	ruo.mutation.ResetSize()
	ruo.mutation.SetSize(i)
	return ruo
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (ruo *ResourceUpdateOne) SetNillableSize(i *int64) *ResourceUpdateOne {
	if i != nil {
		ruo.SetSize(*i)
	}
	return ruo
}

// AddSize adds i to the "size" field.
func (ruo *ResourceUpdateOne) AddSize(i int64) *ResourceUpdateOne {
	ruo.mutation.AddSize(i)
	return ruo
}

// SetStorage sets the "storage" field.
func (ruo *ResourceUpdateOne) SetStorage(s string) *ResourceUpdateOne {
	ruo.mutation.SetStorage(s)
	return ruo
}

// SetNillableStorage sets the "storage" field if the given value is not nil.
func (ruo *ResourceUpdateOne) SetNillableStorage(s *string) *ResourceUpdateOne {
	if s != nil {
		ruo.SetStorage(*s)
	}
	return ruo
}

// ClearStorage clears the value of the "storage" field.
func (ruo *ResourceUpdateOne) ClearStorage() *ResourceUpdateOne {
	ruo.mutation.ClearStorage()
	return ruo
}

// SetObjectID sets the "object_id" field.
func (ruo *ResourceUpdateOne) SetObjectID(s string) *ResourceUpdateOne {
	ruo.mutation.SetObjectID(s)
	return ruo
}

// SetNillableObjectID sets the "object_id" field if the given value is not nil.
func (ruo *ResourceUpdateOne) SetNillableObjectID(s *string) *ResourceUpdateOne {
	if s != nil {
		ruo.SetObjectID(*s)
	}
	return ruo
}

// ClearObjectID clears the value of the "object_id" field.
func (ruo *ResourceUpdateOne) ClearObjectID() *ResourceUpdateOne {
	ruo.mutation.ClearObjectID()
	return ruo
}

// SetDomainID sets the "domain_id" field.
func (ruo *ResourceUpdateOne) SetDomainID(s string) *ResourceUpdateOne {
	ruo.mutation.SetDomainID(s)
	return ruo
}

// SetNillableDomainID sets the "domain_id" field if the given value is not nil.
func (ruo *ResourceUpdateOne) SetNillableDomainID(s *string) *ResourceUpdateOne {
	if s != nil {
		ruo.SetDomainID(*s)
	}
	return ruo
}

// ClearDomainID clears the value of the "domain_id" field.
func (ruo *ResourceUpdateOne) ClearDomainID() *ResourceUpdateOne {
	ruo.mutation.ClearDomainID()
	return ruo
}

// SetExtras sets the "extras" field.
func (ruo *ResourceUpdateOne) SetExtras(m map[string]interface{}) *ResourceUpdateOne {
	ruo.mutation.SetExtras(m)
	return ruo
}

// ClearExtras clears the value of the "extras" field.
func (ruo *ResourceUpdateOne) ClearExtras() *ResourceUpdateOne {
	ruo.mutation.ClearExtras()
	return ruo
}

// SetCreatedBy sets the "created_by" field.
func (ruo *ResourceUpdateOne) SetCreatedBy(s string) *ResourceUpdateOne {
	ruo.mutation.SetCreatedBy(s)
	return ruo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (ruo *ResourceUpdateOne) SetNillableCreatedBy(s *string) *ResourceUpdateOne {
	if s != nil {
		ruo.SetCreatedBy(*s)
	}
	return ruo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (ruo *ResourceUpdateOne) ClearCreatedBy() *ResourceUpdateOne {
	ruo.mutation.ClearCreatedBy()
	return ruo
}

// SetUpdatedBy sets the "updated_by" field.
func (ruo *ResourceUpdateOne) SetUpdatedBy(s string) *ResourceUpdateOne {
	ruo.mutation.SetUpdatedBy(s)
	return ruo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ruo *ResourceUpdateOne) SetNillableUpdatedBy(s *string) *ResourceUpdateOne {
	if s != nil {
		ruo.SetUpdatedBy(*s)
	}
	return ruo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (ruo *ResourceUpdateOne) ClearUpdatedBy() *ResourceUpdateOne {
	ruo.mutation.ClearUpdatedBy()
	return ruo
}

// SetUpdatedAt sets the "updated_at" field.
func (ruo *ResourceUpdateOne) SetUpdatedAt(t time.Time) *ResourceUpdateOne {
	ruo.mutation.SetUpdatedAt(t)
	return ruo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (ruo *ResourceUpdateOne) ClearUpdatedAt() *ResourceUpdateOne {
	ruo.mutation.ClearUpdatedAt()
	return ruo
}

// Mutation returns the ResourceMutation object of the builder.
func (ruo *ResourceUpdateOne) Mutation() *ResourceMutation {
	return ruo.mutation
}

// Where appends a list predicates to the ResourceUpdate builder.
func (ruo *ResourceUpdateOne) Where(ps ...predicate.Resource) *ResourceUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *ResourceUpdateOne) Select(field string, fields ...string) *ResourceUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Resource entity.
func (ruo *ResourceUpdateOne) Save(ctx context.Context) (*Resource, error) {
	ruo.defaults()
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *ResourceUpdateOne) SaveX(ctx context.Context) *Resource {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *ResourceUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *ResourceUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ruo *ResourceUpdateOne) defaults() {
	if _, ok := ruo.mutation.UpdatedAt(); !ok && !ruo.mutation.UpdatedAtCleared() {
		v := resource.UpdateDefaultUpdatedAt()
		ruo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruo *ResourceUpdateOne) check() error {
	if v, ok := ruo.mutation.ObjectID(); ok {
		if err := resource.ObjectIDValidator(v); err != nil {
			return &ValidationError{Name: "object_id", err: fmt.Errorf(`ent: validator failed for field "Resource.object_id": %w`, err)}
		}
	}
	if v, ok := ruo.mutation.DomainID(); ok {
		if err := resource.DomainIDValidator(v); err != nil {
			return &ValidationError{Name: "domain_id", err: fmt.Errorf(`ent: validator failed for field "Resource.domain_id": %w`, err)}
		}
	}
	if v, ok := ruo.mutation.CreatedBy(); ok {
		if err := resource.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "Resource.created_by": %w`, err)}
		}
	}
	if v, ok := ruo.mutation.UpdatedBy(); ok {
		if err := resource.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "Resource.updated_by": %w`, err)}
		}
	}
	return nil
}

func (ruo *ResourceUpdateOne) sqlSave(ctx context.Context) (_node *Resource, err error) {
	if err := ruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(resource.Table, resource.Columns, sqlgraph.NewFieldSpec(resource.FieldID, field.TypeString))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Resource.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, resource.FieldID)
		for _, f := range fields {
			if !resource.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != resource.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.Name(); ok {
		_spec.SetField(resource.FieldName, field.TypeString, value)
	}
	if ruo.mutation.NameCleared() {
		_spec.ClearField(resource.FieldName, field.TypeString)
	}
	if value, ok := ruo.mutation.Path(); ok {
		_spec.SetField(resource.FieldPath, field.TypeString, value)
	}
	if ruo.mutation.PathCleared() {
		_spec.ClearField(resource.FieldPath, field.TypeString)
	}
	if value, ok := ruo.mutation.GetType(); ok {
		_spec.SetField(resource.FieldType, field.TypeString, value)
	}
	if ruo.mutation.TypeCleared() {
		_spec.ClearField(resource.FieldType, field.TypeString)
	}
	if value, ok := ruo.mutation.Size(); ok {
		_spec.SetField(resource.FieldSize, field.TypeInt64, value)
	}
	if value, ok := ruo.mutation.AddedSize(); ok {
		_spec.AddField(resource.FieldSize, field.TypeInt64, value)
	}
	if value, ok := ruo.mutation.Storage(); ok {
		_spec.SetField(resource.FieldStorage, field.TypeString, value)
	}
	if ruo.mutation.StorageCleared() {
		_spec.ClearField(resource.FieldStorage, field.TypeString)
	}
	if value, ok := ruo.mutation.ObjectID(); ok {
		_spec.SetField(resource.FieldObjectID, field.TypeString, value)
	}
	if ruo.mutation.ObjectIDCleared() {
		_spec.ClearField(resource.FieldObjectID, field.TypeString)
	}
	if value, ok := ruo.mutation.DomainID(); ok {
		_spec.SetField(resource.FieldDomainID, field.TypeString, value)
	}
	if ruo.mutation.DomainIDCleared() {
		_spec.ClearField(resource.FieldDomainID, field.TypeString)
	}
	if value, ok := ruo.mutation.Extras(); ok {
		_spec.SetField(resource.FieldExtras, field.TypeJSON, value)
	}
	if ruo.mutation.ExtrasCleared() {
		_spec.ClearField(resource.FieldExtras, field.TypeJSON)
	}
	if value, ok := ruo.mutation.CreatedBy(); ok {
		_spec.SetField(resource.FieldCreatedBy, field.TypeString, value)
	}
	if ruo.mutation.CreatedByCleared() {
		_spec.ClearField(resource.FieldCreatedBy, field.TypeString)
	}
	if value, ok := ruo.mutation.UpdatedBy(); ok {
		_spec.SetField(resource.FieldUpdatedBy, field.TypeString, value)
	}
	if ruo.mutation.UpdatedByCleared() {
		_spec.ClearField(resource.FieldUpdatedBy, field.TypeString)
	}
	if ruo.mutation.CreatedAtCleared() {
		_spec.ClearField(resource.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := ruo.mutation.UpdatedAt(); ok {
		_spec.SetField(resource.FieldUpdatedAt, field.TypeTime, value)
	}
	if ruo.mutation.UpdatedAtCleared() {
		_spec.ClearField(resource.FieldUpdatedAt, field.TypeTime)
	}
	_node = &Resource{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{resource.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
