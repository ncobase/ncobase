// Code generated by ent, DO NOT EDIT.

package rolepermission

import (
	"stocms/internal/data/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.RolePermission {
	return predicate.RolePermission(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.RolePermission {
	return predicate.RolePermission(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.RolePermission {
	return predicate.RolePermission(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.RolePermission {
	return predicate.RolePermission(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.RolePermission {
	return predicate.RolePermission(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.RolePermission {
	return predicate.RolePermission(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.RolePermission {
	return predicate.RolePermission(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.RolePermission {
	return predicate.RolePermission(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.RolePermission {
	return predicate.RolePermission(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.RolePermission {
	return predicate.RolePermission(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.RolePermission {
	return predicate.RolePermission(sql.FieldContainsFold(FieldID, id))
}

// PermissionID applies equality check predicate on the "permission_id" field. It's identical to PermissionIDEQ.
func PermissionID(v string) predicate.RolePermission {
	return predicate.RolePermission(sql.FieldEQ(FieldPermissionID, v))
}

// PermissionIDEQ applies the EQ predicate on the "permission_id" field.
func PermissionIDEQ(v string) predicate.RolePermission {
	return predicate.RolePermission(sql.FieldEQ(FieldPermissionID, v))
}

// PermissionIDNEQ applies the NEQ predicate on the "permission_id" field.
func PermissionIDNEQ(v string) predicate.RolePermission {
	return predicate.RolePermission(sql.FieldNEQ(FieldPermissionID, v))
}

// PermissionIDIn applies the In predicate on the "permission_id" field.
func PermissionIDIn(vs ...string) predicate.RolePermission {
	return predicate.RolePermission(sql.FieldIn(FieldPermissionID, vs...))
}

// PermissionIDNotIn applies the NotIn predicate on the "permission_id" field.
func PermissionIDNotIn(vs ...string) predicate.RolePermission {
	return predicate.RolePermission(sql.FieldNotIn(FieldPermissionID, vs...))
}

// PermissionIDGT applies the GT predicate on the "permission_id" field.
func PermissionIDGT(v string) predicate.RolePermission {
	return predicate.RolePermission(sql.FieldGT(FieldPermissionID, v))
}

// PermissionIDGTE applies the GTE predicate on the "permission_id" field.
func PermissionIDGTE(v string) predicate.RolePermission {
	return predicate.RolePermission(sql.FieldGTE(FieldPermissionID, v))
}

// PermissionIDLT applies the LT predicate on the "permission_id" field.
func PermissionIDLT(v string) predicate.RolePermission {
	return predicate.RolePermission(sql.FieldLT(FieldPermissionID, v))
}

// PermissionIDLTE applies the LTE predicate on the "permission_id" field.
func PermissionIDLTE(v string) predicate.RolePermission {
	return predicate.RolePermission(sql.FieldLTE(FieldPermissionID, v))
}

// PermissionIDContains applies the Contains predicate on the "permission_id" field.
func PermissionIDContains(v string) predicate.RolePermission {
	return predicate.RolePermission(sql.FieldContains(FieldPermissionID, v))
}

// PermissionIDHasPrefix applies the HasPrefix predicate on the "permission_id" field.
func PermissionIDHasPrefix(v string) predicate.RolePermission {
	return predicate.RolePermission(sql.FieldHasPrefix(FieldPermissionID, v))
}

// PermissionIDHasSuffix applies the HasSuffix predicate on the "permission_id" field.
func PermissionIDHasSuffix(v string) predicate.RolePermission {
	return predicate.RolePermission(sql.FieldHasSuffix(FieldPermissionID, v))
}

// PermissionIDIsNil applies the IsNil predicate on the "permission_id" field.
func PermissionIDIsNil() predicate.RolePermission {
	return predicate.RolePermission(sql.FieldIsNull(FieldPermissionID))
}

// PermissionIDNotNil applies the NotNil predicate on the "permission_id" field.
func PermissionIDNotNil() predicate.RolePermission {
	return predicate.RolePermission(sql.FieldNotNull(FieldPermissionID))
}

// PermissionIDEqualFold applies the EqualFold predicate on the "permission_id" field.
func PermissionIDEqualFold(v string) predicate.RolePermission {
	return predicate.RolePermission(sql.FieldEqualFold(FieldPermissionID, v))
}

// PermissionIDContainsFold applies the ContainsFold predicate on the "permission_id" field.
func PermissionIDContainsFold(v string) predicate.RolePermission {
	return predicate.RolePermission(sql.FieldContainsFold(FieldPermissionID, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.RolePermission) predicate.RolePermission {
	return predicate.RolePermission(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.RolePermission) predicate.RolePermission {
	return predicate.RolePermission(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.RolePermission) predicate.RolePermission {
	return predicate.RolePermission(sql.NotPredicates(p))
}
