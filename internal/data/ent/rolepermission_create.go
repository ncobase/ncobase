// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"ncobase/internal/data/ent/rolepermission"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RolePermissionCreate is the builder for creating a RolePermission entity.
type RolePermissionCreate struct {
	config
	mutation *RolePermissionMutation
	hooks    []Hook
}

// SetPermissionID sets the "permission_id" field.
func (rpc *RolePermissionCreate) SetPermissionID(s string) *RolePermissionCreate {
	rpc.mutation.SetPermissionID(s)
	return rpc
}

// SetNillablePermissionID sets the "permission_id" field if the given value is not nil.
func (rpc *RolePermissionCreate) SetNillablePermissionID(s *string) *RolePermissionCreate {
	if s != nil {
		rpc.SetPermissionID(*s)
	}
	return rpc
}

// SetID sets the "id" field.
func (rpc *RolePermissionCreate) SetID(s string) *RolePermissionCreate {
	rpc.mutation.SetID(s)
	return rpc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (rpc *RolePermissionCreate) SetNillableID(s *string) *RolePermissionCreate {
	if s != nil {
		rpc.SetID(*s)
	}
	return rpc
}

// Mutation returns the RolePermissionMutation object of the builder.
func (rpc *RolePermissionCreate) Mutation() *RolePermissionMutation {
	return rpc.mutation
}

// Save creates the RolePermission in the database.
func (rpc *RolePermissionCreate) Save(ctx context.Context) (*RolePermission, error) {
	rpc.defaults()
	return withHooks(ctx, rpc.sqlSave, rpc.mutation, rpc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rpc *RolePermissionCreate) SaveX(ctx context.Context) *RolePermission {
	v, err := rpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rpc *RolePermissionCreate) Exec(ctx context.Context) error {
	_, err := rpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rpc *RolePermissionCreate) ExecX(ctx context.Context) {
	if err := rpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rpc *RolePermissionCreate) defaults() {
	if _, ok := rpc.mutation.ID(); !ok {
		v := rolepermission.DefaultID()
		rpc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rpc *RolePermissionCreate) check() error {
	if v, ok := rpc.mutation.PermissionID(); ok {
		if err := rolepermission.PermissionIDValidator(v); err != nil {
			return &ValidationError{Name: "permission_id", err: fmt.Errorf(`ent: validator failed for field "RolePermission.permission_id": %w`, err)}
		}
	}
	return nil
}

func (rpc *RolePermissionCreate) sqlSave(ctx context.Context) (*RolePermission, error) {
	if err := rpc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected RolePermission.ID type: %T", _spec.ID.Value)
		}
	}
	rpc.mutation.id = &_node.ID
	rpc.mutation.done = true
	return _node, nil
}

func (rpc *RolePermissionCreate) createSpec() (*RolePermission, *sqlgraph.CreateSpec) {
	var (
		_node = &RolePermission{config: rpc.config}
		_spec = sqlgraph.NewCreateSpec(rolepermission.Table, sqlgraph.NewFieldSpec(rolepermission.FieldID, field.TypeString))
	)
	if id, ok := rpc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := rpc.mutation.PermissionID(); ok {
		_spec.SetField(rolepermission.FieldPermissionID, field.TypeString, value)
		_node.PermissionID = value
	}
	return _node, _spec
}

// RolePermissionCreateBulk is the builder for creating many RolePermission entities in bulk.
type RolePermissionCreateBulk struct {
	config
	err      error
	builders []*RolePermissionCreate
}

// Save creates the RolePermission entities in the database.
func (rpcb *RolePermissionCreateBulk) Save(ctx context.Context) ([]*RolePermission, error) {
	if rpcb.err != nil {
		return nil, rpcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rpcb.builders))
	nodes := make([]*RolePermission, len(rpcb.builders))
	mutators := make([]Mutator, len(rpcb.builders))
	for i := range rpcb.builders {
		func(i int, root context.Context) {
			builder := rpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RolePermissionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rpcb *RolePermissionCreateBulk) SaveX(ctx context.Context) []*RolePermission {
	v, err := rpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rpcb *RolePermissionCreateBulk) Exec(ctx context.Context) error {
	_, err := rpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rpcb *RolePermissionCreateBulk) ExecX(ctx context.Context) {
	if err := rpcb.Exec(ctx); err != nil {
		panic(err)
	}
}
