// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"stocms/internal/data/ent/predicate"
	"stocms/internal/data/ent/rolepermission"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RolePermissionUpdate is the builder for updating RolePermission entities.
type RolePermissionUpdate struct {
	config
	hooks    []Hook
	mutation *RolePermissionMutation
}

// Where appends a list predicates to the RolePermissionUpdate builder.
func (rpu *RolePermissionUpdate) Where(ps ...predicate.RolePermission) *RolePermissionUpdate {
	rpu.mutation.Where(ps...)
	return rpu
}

// SetPermissionID sets the "permission_id" field.
func (rpu *RolePermissionUpdate) SetPermissionID(s string) *RolePermissionUpdate {
	rpu.mutation.SetPermissionID(s)
	return rpu
}

// SetNillablePermissionID sets the "permission_id" field if the given value is not nil.
func (rpu *RolePermissionUpdate) SetNillablePermissionID(s *string) *RolePermissionUpdate {
	if s != nil {
		rpu.SetPermissionID(*s)
	}
	return rpu
}

// ClearPermissionID clears the value of the "permission_id" field.
func (rpu *RolePermissionUpdate) ClearPermissionID() *RolePermissionUpdate {
	rpu.mutation.ClearPermissionID()
	return rpu
}

// Mutation returns the RolePermissionMutation object of the builder.
func (rpu *RolePermissionUpdate) Mutation() *RolePermissionMutation {
	return rpu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rpu *RolePermissionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, rpu.sqlSave, rpu.mutation, rpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rpu *RolePermissionUpdate) SaveX(ctx context.Context) int {
	affected, err := rpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rpu *RolePermissionUpdate) Exec(ctx context.Context) error {
	_, err := rpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rpu *RolePermissionUpdate) ExecX(ctx context.Context) {
	if err := rpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rpu *RolePermissionUpdate) check() error {
	if v, ok := rpu.mutation.PermissionID(); ok {
		if err := rolepermission.PermissionIDValidator(v); err != nil {
			return &ValidationError{Name: "permission_id", err: fmt.Errorf(`ent: validator failed for field "RolePermission.permission_id": %w`, err)}
		}
	}
	return nil
}

func (rpu *RolePermissionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := rpu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(rolepermission.Table, rolepermission.Columns, sqlgraph.NewFieldSpec(rolepermission.FieldID, field.TypeString))
	if ps := rpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rpu.mutation.PermissionID(); ok {
		_spec.SetField(rolepermission.FieldPermissionID, field.TypeString, value)
	}
	if rpu.mutation.PermissionIDCleared() {
		_spec.ClearField(rolepermission.FieldPermissionID, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rolepermission.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rpu.mutation.done = true
	return n, nil
}

// RolePermissionUpdateOne is the builder for updating a single RolePermission entity.
type RolePermissionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RolePermissionMutation
}

// SetPermissionID sets the "permission_id" field.
func (rpuo *RolePermissionUpdateOne) SetPermissionID(s string) *RolePermissionUpdateOne {
	rpuo.mutation.SetPermissionID(s)
	return rpuo
}

// SetNillablePermissionID sets the "permission_id" field if the given value is not nil.
func (rpuo *RolePermissionUpdateOne) SetNillablePermissionID(s *string) *RolePermissionUpdateOne {
	if s != nil {
		rpuo.SetPermissionID(*s)
	}
	return rpuo
}

// ClearPermissionID clears the value of the "permission_id" field.
func (rpuo *RolePermissionUpdateOne) ClearPermissionID() *RolePermissionUpdateOne {
	rpuo.mutation.ClearPermissionID()
	return rpuo
}

// Mutation returns the RolePermissionMutation object of the builder.
func (rpuo *RolePermissionUpdateOne) Mutation() *RolePermissionMutation {
	return rpuo.mutation
}

// Where appends a list predicates to the RolePermissionUpdate builder.
func (rpuo *RolePermissionUpdateOne) Where(ps ...predicate.RolePermission) *RolePermissionUpdateOne {
	rpuo.mutation.Where(ps...)
	return rpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rpuo *RolePermissionUpdateOne) Select(field string, fields ...string) *RolePermissionUpdateOne {
	rpuo.fields = append([]string{field}, fields...)
	return rpuo
}

// Save executes the query and returns the updated RolePermission entity.
func (rpuo *RolePermissionUpdateOne) Save(ctx context.Context) (*RolePermission, error) {
	return withHooks(ctx, rpuo.sqlSave, rpuo.mutation, rpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rpuo *RolePermissionUpdateOne) SaveX(ctx context.Context) *RolePermission {
	node, err := rpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rpuo *RolePermissionUpdateOne) Exec(ctx context.Context) error {
	_, err := rpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rpuo *RolePermissionUpdateOne) ExecX(ctx context.Context) {
	if err := rpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rpuo *RolePermissionUpdateOne) check() error {
	if v, ok := rpuo.mutation.PermissionID(); ok {
		if err := rolepermission.PermissionIDValidator(v); err != nil {
			return &ValidationError{Name: "permission_id", err: fmt.Errorf(`ent: validator failed for field "RolePermission.permission_id": %w`, err)}
		}
	}
	return nil
}

func (rpuo *RolePermissionUpdateOne) sqlSave(ctx context.Context) (_node *RolePermission, err error) {
	if err := rpuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(rolepermission.Table, rolepermission.Columns, sqlgraph.NewFieldSpec(rolepermission.FieldID, field.TypeString))
	id, ok := rpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "RolePermission.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, rolepermission.FieldID)
		for _, f := range fields {
			if !rolepermission.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != rolepermission.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rpuo.mutation.PermissionID(); ok {
		_spec.SetField(rolepermission.FieldPermissionID, field.TypeString, value)
	}
	if rpuo.mutation.PermissionIDCleared() {
		_spec.ClearField(rolepermission.FieldPermissionID, field.TypeString)
	}
	_node = &RolePermission{config: rpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rolepermission.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rpuo.mutation.done = true
	return _node, nil
}
