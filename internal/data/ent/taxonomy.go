// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"stocms/internal/data/ent/taxonomy"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Taxonomy is the model entity for the Taxonomy schema.
type Taxonomy struct {
	config `json:"-"`
	// ID of the ent.
	// primary key
	ID string `json:"id,omitempty"`
	// name
	Name string `json:"name,omitempty"`
	// type
	Type string `json:"type,omitempty"`
	// slug / alias
	Slug string `json:"slug,omitempty"`
	// cover
	Cover string `json:"cover,omitempty"`
	// thumbnail
	Thumbnail string `json:"thumbnail,omitempty"`
	// color
	Color string `json:"color,omitempty"`
	// icon
	Icon string `json:"icon,omitempty"`
	// url, website / link...
	URL string `json:"url,omitempty"`
	// keywords
	Keywords string `json:"keywords,omitempty"`
	// description
	Description string `json:"description,omitempty"`
	// status: 0 activated, 1 unactivated, 2 disabled
	Status int32 `json:"status,omitempty"`
	// Extend properties
	Extras map[string]interface{} `json:"extras,omitempty"`
	// parent id
	ParentID string `json:"parent_id,omitempty"`
	// domain id
	DomainID string `json:"domain_id,omitempty"`
	// ID of the creator
	CreatedBy string `json:"created_by,omitempty"`
	// ID of the person who last updated the entity
	UpdatedBy string `json:"updated_by,omitempty"`
	// ID of the person who deleted the entity
	DeletedBy string `json:"deleted_by,omitempty"`
	// created at
	CreatedAt time.Time `json:"created_at,omitempty"`
	// updated at
	UpdatedAt    time.Time `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Taxonomy) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case taxonomy.FieldExtras:
			values[i] = new([]byte)
		case taxonomy.FieldStatus:
			values[i] = new(sql.NullInt64)
		case taxonomy.FieldID, taxonomy.FieldName, taxonomy.FieldType, taxonomy.FieldSlug, taxonomy.FieldCover, taxonomy.FieldThumbnail, taxonomy.FieldColor, taxonomy.FieldIcon, taxonomy.FieldURL, taxonomy.FieldKeywords, taxonomy.FieldDescription, taxonomy.FieldParentID, taxonomy.FieldDomainID, taxonomy.FieldCreatedBy, taxonomy.FieldUpdatedBy, taxonomy.FieldDeletedBy:
			values[i] = new(sql.NullString)
		case taxonomy.FieldCreatedAt, taxonomy.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Taxonomy fields.
func (t *Taxonomy) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case taxonomy.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				t.ID = value.String
			}
		case taxonomy.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				t.Name = value.String
			}
		case taxonomy.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				t.Type = value.String
			}
		case taxonomy.FieldSlug:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field slug", values[i])
			} else if value.Valid {
				t.Slug = value.String
			}
		case taxonomy.FieldCover:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cover", values[i])
			} else if value.Valid {
				t.Cover = value.String
			}
		case taxonomy.FieldThumbnail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field thumbnail", values[i])
			} else if value.Valid {
				t.Thumbnail = value.String
			}
		case taxonomy.FieldColor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field color", values[i])
			} else if value.Valid {
				t.Color = value.String
			}
		case taxonomy.FieldIcon:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field icon", values[i])
			} else if value.Valid {
				t.Icon = value.String
			}
		case taxonomy.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				t.URL = value.String
			}
		case taxonomy.FieldKeywords:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field keywords", values[i])
			} else if value.Valid {
				t.Keywords = value.String
			}
		case taxonomy.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				t.Description = value.String
			}
		case taxonomy.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				t.Status = int32(value.Int64)
			}
		case taxonomy.FieldExtras:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field extras", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &t.Extras); err != nil {
					return fmt.Errorf("unmarshal field extras: %w", err)
				}
			}
		case taxonomy.FieldParentID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field parent_id", values[i])
			} else if value.Valid {
				t.ParentID = value.String
			}
		case taxonomy.FieldDomainID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field domain_id", values[i])
			} else if value.Valid {
				t.DomainID = value.String
			}
		case taxonomy.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				t.CreatedBy = value.String
			}
		case taxonomy.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				t.UpdatedBy = value.String
			}
		case taxonomy.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				t.DeletedBy = value.String
			}
		case taxonomy.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				t.CreatedAt = value.Time
			}
		case taxonomy.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				t.UpdatedAt = value.Time
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Taxonomy.
// This includes values selected through modifiers, order, etc.
func (t *Taxonomy) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// Update returns a builder for updating this Taxonomy.
// Note that you need to call Taxonomy.Unwrap() before calling this method if this Taxonomy
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Taxonomy) Update() *TaxonomyUpdateOne {
	return NewTaxonomyClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Taxonomy entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Taxonomy) Unwrap() *Taxonomy {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Taxonomy is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Taxonomy) String() string {
	var builder strings.Builder
	builder.WriteString("Taxonomy(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("name=")
	builder.WriteString(t.Name)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(t.Type)
	builder.WriteString(", ")
	builder.WriteString("slug=")
	builder.WriteString(t.Slug)
	builder.WriteString(", ")
	builder.WriteString("cover=")
	builder.WriteString(t.Cover)
	builder.WriteString(", ")
	builder.WriteString("thumbnail=")
	builder.WriteString(t.Thumbnail)
	builder.WriteString(", ")
	builder.WriteString("color=")
	builder.WriteString(t.Color)
	builder.WriteString(", ")
	builder.WriteString("icon=")
	builder.WriteString(t.Icon)
	builder.WriteString(", ")
	builder.WriteString("url=")
	builder.WriteString(t.URL)
	builder.WriteString(", ")
	builder.WriteString("keywords=")
	builder.WriteString(t.Keywords)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(t.Description)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", t.Status))
	builder.WriteString(", ")
	builder.WriteString("extras=")
	builder.WriteString(fmt.Sprintf("%v", t.Extras))
	builder.WriteString(", ")
	builder.WriteString("parent_id=")
	builder.WriteString(t.ParentID)
	builder.WriteString(", ")
	builder.WriteString("domain_id=")
	builder.WriteString(t.DomainID)
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(t.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(t.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(t.DeletedBy)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(t.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(t.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Taxonomies is a parsable slice of Taxonomy.
type Taxonomies []*Taxonomy
