// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"stocms/internal/data/ent/taxonomyrelations"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TaxonomyRelationsCreate is the builder for creating a TaxonomyRelations entity.
type TaxonomyRelationsCreate struct {
	config
	mutation *TaxonomyRelationsMutation
	hooks    []Hook
}

// SetTaxonomyID sets the "taxonomy_id" field.
func (trc *TaxonomyRelationsCreate) SetTaxonomyID(s string) *TaxonomyRelationsCreate {
	trc.mutation.SetTaxonomyID(s)
	return trc
}

// SetNillableTaxonomyID sets the "taxonomy_id" field if the given value is not nil.
func (trc *TaxonomyRelationsCreate) SetNillableTaxonomyID(s *string) *TaxonomyRelationsCreate {
	if s != nil {
		trc.SetTaxonomyID(*s)
	}
	return trc
}

// SetType sets the "type" field.
func (trc *TaxonomyRelationsCreate) SetType(s string) *TaxonomyRelationsCreate {
	trc.mutation.SetType(s)
	return trc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (trc *TaxonomyRelationsCreate) SetNillableType(s *string) *TaxonomyRelationsCreate {
	if s != nil {
		trc.SetType(*s)
	}
	return trc
}

// SetOrder sets the "order" field.
func (trc *TaxonomyRelationsCreate) SetOrder(i int32) *TaxonomyRelationsCreate {
	trc.mutation.SetOrder(i)
	return trc
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (trc *TaxonomyRelationsCreate) SetNillableOrder(i *int32) *TaxonomyRelationsCreate {
	if i != nil {
		trc.SetOrder(*i)
	}
	return trc
}

// SetCreatedBy sets the "created_by" field.
func (trc *TaxonomyRelationsCreate) SetCreatedBy(s string) *TaxonomyRelationsCreate {
	trc.mutation.SetCreatedBy(s)
	return trc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (trc *TaxonomyRelationsCreate) SetNillableCreatedBy(s *string) *TaxonomyRelationsCreate {
	if s != nil {
		trc.SetCreatedBy(*s)
	}
	return trc
}

// SetCreatedAt sets the "created_at" field.
func (trc *TaxonomyRelationsCreate) SetCreatedAt(t time.Time) *TaxonomyRelationsCreate {
	trc.mutation.SetCreatedAt(t)
	return trc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (trc *TaxonomyRelationsCreate) SetNillableCreatedAt(t *time.Time) *TaxonomyRelationsCreate {
	if t != nil {
		trc.SetCreatedAt(*t)
	}
	return trc
}

// SetID sets the "id" field.
func (trc *TaxonomyRelationsCreate) SetID(s string) *TaxonomyRelationsCreate {
	trc.mutation.SetID(s)
	return trc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (trc *TaxonomyRelationsCreate) SetNillableID(s *string) *TaxonomyRelationsCreate {
	if s != nil {
		trc.SetID(*s)
	}
	return trc
}

// Mutation returns the TaxonomyRelationsMutation object of the builder.
func (trc *TaxonomyRelationsCreate) Mutation() *TaxonomyRelationsMutation {
	return trc.mutation
}

// Save creates the TaxonomyRelations in the database.
func (trc *TaxonomyRelationsCreate) Save(ctx context.Context) (*TaxonomyRelations, error) {
	trc.defaults()
	return withHooks(ctx, trc.sqlSave, trc.mutation, trc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (trc *TaxonomyRelationsCreate) SaveX(ctx context.Context) *TaxonomyRelations {
	v, err := trc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (trc *TaxonomyRelationsCreate) Exec(ctx context.Context) error {
	_, err := trc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (trc *TaxonomyRelationsCreate) ExecX(ctx context.Context) {
	if err := trc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (trc *TaxonomyRelationsCreate) defaults() {
	if _, ok := trc.mutation.Order(); !ok {
		v := taxonomyrelations.DefaultOrder
		trc.mutation.SetOrder(v)
	}
	if _, ok := trc.mutation.CreatedAt(); !ok {
		v := taxonomyrelations.DefaultCreatedAt()
		trc.mutation.SetCreatedAt(v)
	}
	if _, ok := trc.mutation.ID(); !ok {
		v := taxonomyrelations.DefaultID()
		trc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (trc *TaxonomyRelationsCreate) check() error {
	if v, ok := trc.mutation.TaxonomyID(); ok {
		if err := taxonomyrelations.TaxonomyIDValidator(v); err != nil {
			return &ValidationError{Name: "taxonomy_id", err: fmt.Errorf(`ent: validator failed for field "TaxonomyRelations.taxonomy_id": %w`, err)}
		}
	}
	if _, ok := trc.mutation.Order(); !ok {
		return &ValidationError{Name: "order", err: errors.New(`ent: missing required field "TaxonomyRelations.order"`)}
	}
	if v, ok := trc.mutation.Order(); ok {
		if err := taxonomyrelations.OrderValidator(v); err != nil {
			return &ValidationError{Name: "order", err: fmt.Errorf(`ent: validator failed for field "TaxonomyRelations.order": %w`, err)}
		}
	}
	if v, ok := trc.mutation.CreatedBy(); ok {
		if err := taxonomyrelations.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "TaxonomyRelations.created_by": %w`, err)}
		}
	}
	return nil
}

func (trc *TaxonomyRelationsCreate) sqlSave(ctx context.Context) (*TaxonomyRelations, error) {
	if err := trc.check(); err != nil {
		return nil, err
	}
	_node, _spec := trc.createSpec()
	if err := sqlgraph.CreateNode(ctx, trc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected TaxonomyRelations.ID type: %T", _spec.ID.Value)
		}
	}
	trc.mutation.id = &_node.ID
	trc.mutation.done = true
	return _node, nil
}

func (trc *TaxonomyRelationsCreate) createSpec() (*TaxonomyRelations, *sqlgraph.CreateSpec) {
	var (
		_node = &TaxonomyRelations{config: trc.config}
		_spec = sqlgraph.NewCreateSpec(taxonomyrelations.Table, sqlgraph.NewFieldSpec(taxonomyrelations.FieldID, field.TypeString))
	)
	if id, ok := trc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := trc.mutation.TaxonomyID(); ok {
		_spec.SetField(taxonomyrelations.FieldTaxonomyID, field.TypeString, value)
		_node.TaxonomyID = value
	}
	if value, ok := trc.mutation.GetType(); ok {
		_spec.SetField(taxonomyrelations.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := trc.mutation.Order(); ok {
		_spec.SetField(taxonomyrelations.FieldOrder, field.TypeInt32, value)
		_node.Order = value
	}
	if value, ok := trc.mutation.CreatedBy(); ok {
		_spec.SetField(taxonomyrelations.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := trc.mutation.CreatedAt(); ok {
		_spec.SetField(taxonomyrelations.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	return _node, _spec
}

// TaxonomyRelationsCreateBulk is the builder for creating many TaxonomyRelations entities in bulk.
type TaxonomyRelationsCreateBulk struct {
	config
	err      error
	builders []*TaxonomyRelationsCreate
}

// Save creates the TaxonomyRelations entities in the database.
func (trcb *TaxonomyRelationsCreateBulk) Save(ctx context.Context) ([]*TaxonomyRelations, error) {
	if trcb.err != nil {
		return nil, trcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(trcb.builders))
	nodes := make([]*TaxonomyRelations, len(trcb.builders))
	mutators := make([]Mutator, len(trcb.builders))
	for i := range trcb.builders {
		func(i int, root context.Context) {
			builder := trcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TaxonomyRelationsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, trcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, trcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, trcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (trcb *TaxonomyRelationsCreateBulk) SaveX(ctx context.Context) []*TaxonomyRelations {
	v, err := trcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (trcb *TaxonomyRelationsCreateBulk) Exec(ctx context.Context) error {
	_, err := trcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (trcb *TaxonomyRelationsCreateBulk) ExecX(ctx context.Context) {
	if err := trcb.Exec(ctx); err != nil {
		panic(err)
	}
}
