// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"stocms/internal/data/ent/predicate"
	"stocms/internal/data/ent/taxonomyrelations"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TaxonomyRelationsUpdate is the builder for updating TaxonomyRelations entities.
type TaxonomyRelationsUpdate struct {
	config
	hooks    []Hook
	mutation *TaxonomyRelationsMutation
}

// Where appends a list predicates to the TaxonomyRelationsUpdate builder.
func (tru *TaxonomyRelationsUpdate) Where(ps ...predicate.TaxonomyRelations) *TaxonomyRelationsUpdate {
	tru.mutation.Where(ps...)
	return tru
}

// SetTaxonomyID sets the "taxonomy_id" field.
func (tru *TaxonomyRelationsUpdate) SetTaxonomyID(s string) *TaxonomyRelationsUpdate {
	tru.mutation.SetTaxonomyID(s)
	return tru
}

// SetNillableTaxonomyID sets the "taxonomy_id" field if the given value is not nil.
func (tru *TaxonomyRelationsUpdate) SetNillableTaxonomyID(s *string) *TaxonomyRelationsUpdate {
	if s != nil {
		tru.SetTaxonomyID(*s)
	}
	return tru
}

// ClearTaxonomyID clears the value of the "taxonomy_id" field.
func (tru *TaxonomyRelationsUpdate) ClearTaxonomyID() *TaxonomyRelationsUpdate {
	tru.mutation.ClearTaxonomyID()
	return tru
}

// SetType sets the "type" field.
func (tru *TaxonomyRelationsUpdate) SetType(s string) *TaxonomyRelationsUpdate {
	tru.mutation.SetType(s)
	return tru
}

// SetNillableType sets the "type" field if the given value is not nil.
func (tru *TaxonomyRelationsUpdate) SetNillableType(s *string) *TaxonomyRelationsUpdate {
	if s != nil {
		tru.SetType(*s)
	}
	return tru
}

// ClearType clears the value of the "type" field.
func (tru *TaxonomyRelationsUpdate) ClearType() *TaxonomyRelationsUpdate {
	tru.mutation.ClearType()
	return tru
}

// SetObjectID sets the "object_id" field.
func (tru *TaxonomyRelationsUpdate) SetObjectID(s string) *TaxonomyRelationsUpdate {
	tru.mutation.SetObjectID(s)
	return tru
}

// SetNillableObjectID sets the "object_id" field if the given value is not nil.
func (tru *TaxonomyRelationsUpdate) SetNillableObjectID(s *string) *TaxonomyRelationsUpdate {
	if s != nil {
		tru.SetObjectID(*s)
	}
	return tru
}

// ClearObjectID clears the value of the "object_id" field.
func (tru *TaxonomyRelationsUpdate) ClearObjectID() *TaxonomyRelationsUpdate {
	tru.mutation.ClearObjectID()
	return tru
}

// SetOrder sets the "order" field.
func (tru *TaxonomyRelationsUpdate) SetOrder(i int32) *TaxonomyRelationsUpdate {
	tru.mutation.ResetOrder()
	tru.mutation.SetOrder(i)
	return tru
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (tru *TaxonomyRelationsUpdate) SetNillableOrder(i *int32) *TaxonomyRelationsUpdate {
	if i != nil {
		tru.SetOrder(*i)
	}
	return tru
}

// AddOrder adds i to the "order" field.
func (tru *TaxonomyRelationsUpdate) AddOrder(i int32) *TaxonomyRelationsUpdate {
	tru.mutation.AddOrder(i)
	return tru
}

// SetCreatedBy sets the "created_by" field.
func (tru *TaxonomyRelationsUpdate) SetCreatedBy(s string) *TaxonomyRelationsUpdate {
	tru.mutation.SetCreatedBy(s)
	return tru
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (tru *TaxonomyRelationsUpdate) SetNillableCreatedBy(s *string) *TaxonomyRelationsUpdate {
	if s != nil {
		tru.SetCreatedBy(*s)
	}
	return tru
}

// ClearCreatedBy clears the value of the "created_by" field.
func (tru *TaxonomyRelationsUpdate) ClearCreatedBy() *TaxonomyRelationsUpdate {
	tru.mutation.ClearCreatedBy()
	return tru
}

// Mutation returns the TaxonomyRelationsMutation object of the builder.
func (tru *TaxonomyRelationsUpdate) Mutation() *TaxonomyRelationsMutation {
	return tru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tru *TaxonomyRelationsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tru.sqlSave, tru.mutation, tru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tru *TaxonomyRelationsUpdate) SaveX(ctx context.Context) int {
	affected, err := tru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tru *TaxonomyRelationsUpdate) Exec(ctx context.Context) error {
	_, err := tru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tru *TaxonomyRelationsUpdate) ExecX(ctx context.Context) {
	if err := tru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tru *TaxonomyRelationsUpdate) check() error {
	if v, ok := tru.mutation.TaxonomyID(); ok {
		if err := taxonomyrelations.TaxonomyIDValidator(v); err != nil {
			return &ValidationError{Name: "taxonomy_id", err: fmt.Errorf(`ent: validator failed for field "TaxonomyRelations.taxonomy_id": %w`, err)}
		}
	}
	if v, ok := tru.mutation.ObjectID(); ok {
		if err := taxonomyrelations.ObjectIDValidator(v); err != nil {
			return &ValidationError{Name: "object_id", err: fmt.Errorf(`ent: validator failed for field "TaxonomyRelations.object_id": %w`, err)}
		}
	}
	if v, ok := tru.mutation.Order(); ok {
		if err := taxonomyrelations.OrderValidator(v); err != nil {
			return &ValidationError{Name: "order", err: fmt.Errorf(`ent: validator failed for field "TaxonomyRelations.order": %w`, err)}
		}
	}
	if v, ok := tru.mutation.CreatedBy(); ok {
		if err := taxonomyrelations.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "TaxonomyRelations.created_by": %w`, err)}
		}
	}
	return nil
}

func (tru *TaxonomyRelationsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(taxonomyrelations.Table, taxonomyrelations.Columns, sqlgraph.NewFieldSpec(taxonomyrelations.FieldID, field.TypeString))
	if ps := tru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tru.mutation.TaxonomyID(); ok {
		_spec.SetField(taxonomyrelations.FieldTaxonomyID, field.TypeString, value)
	}
	if tru.mutation.TaxonomyIDCleared() {
		_spec.ClearField(taxonomyrelations.FieldTaxonomyID, field.TypeString)
	}
	if value, ok := tru.mutation.GetType(); ok {
		_spec.SetField(taxonomyrelations.FieldType, field.TypeString, value)
	}
	if tru.mutation.TypeCleared() {
		_spec.ClearField(taxonomyrelations.FieldType, field.TypeString)
	}
	if value, ok := tru.mutation.ObjectID(); ok {
		_spec.SetField(taxonomyrelations.FieldObjectID, field.TypeString, value)
	}
	if tru.mutation.ObjectIDCleared() {
		_spec.ClearField(taxonomyrelations.FieldObjectID, field.TypeString)
	}
	if value, ok := tru.mutation.Order(); ok {
		_spec.SetField(taxonomyrelations.FieldOrder, field.TypeInt32, value)
	}
	if value, ok := tru.mutation.AddedOrder(); ok {
		_spec.AddField(taxonomyrelations.FieldOrder, field.TypeInt32, value)
	}
	if value, ok := tru.mutation.CreatedBy(); ok {
		_spec.SetField(taxonomyrelations.FieldCreatedBy, field.TypeString, value)
	}
	if tru.mutation.CreatedByCleared() {
		_spec.ClearField(taxonomyrelations.FieldCreatedBy, field.TypeString)
	}
	if tru.mutation.CreatedAtCleared() {
		_spec.ClearField(taxonomyrelations.FieldCreatedAt, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{taxonomyrelations.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tru.mutation.done = true
	return n, nil
}

// TaxonomyRelationsUpdateOne is the builder for updating a single TaxonomyRelations entity.
type TaxonomyRelationsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TaxonomyRelationsMutation
}

// SetTaxonomyID sets the "taxonomy_id" field.
func (truo *TaxonomyRelationsUpdateOne) SetTaxonomyID(s string) *TaxonomyRelationsUpdateOne {
	truo.mutation.SetTaxonomyID(s)
	return truo
}

// SetNillableTaxonomyID sets the "taxonomy_id" field if the given value is not nil.
func (truo *TaxonomyRelationsUpdateOne) SetNillableTaxonomyID(s *string) *TaxonomyRelationsUpdateOne {
	if s != nil {
		truo.SetTaxonomyID(*s)
	}
	return truo
}

// ClearTaxonomyID clears the value of the "taxonomy_id" field.
func (truo *TaxonomyRelationsUpdateOne) ClearTaxonomyID() *TaxonomyRelationsUpdateOne {
	truo.mutation.ClearTaxonomyID()
	return truo
}

// SetType sets the "type" field.
func (truo *TaxonomyRelationsUpdateOne) SetType(s string) *TaxonomyRelationsUpdateOne {
	truo.mutation.SetType(s)
	return truo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (truo *TaxonomyRelationsUpdateOne) SetNillableType(s *string) *TaxonomyRelationsUpdateOne {
	if s != nil {
		truo.SetType(*s)
	}
	return truo
}

// ClearType clears the value of the "type" field.
func (truo *TaxonomyRelationsUpdateOne) ClearType() *TaxonomyRelationsUpdateOne {
	truo.mutation.ClearType()
	return truo
}

// SetObjectID sets the "object_id" field.
func (truo *TaxonomyRelationsUpdateOne) SetObjectID(s string) *TaxonomyRelationsUpdateOne {
	truo.mutation.SetObjectID(s)
	return truo
}

// SetNillableObjectID sets the "object_id" field if the given value is not nil.
func (truo *TaxonomyRelationsUpdateOne) SetNillableObjectID(s *string) *TaxonomyRelationsUpdateOne {
	if s != nil {
		truo.SetObjectID(*s)
	}
	return truo
}

// ClearObjectID clears the value of the "object_id" field.
func (truo *TaxonomyRelationsUpdateOne) ClearObjectID() *TaxonomyRelationsUpdateOne {
	truo.mutation.ClearObjectID()
	return truo
}

// SetOrder sets the "order" field.
func (truo *TaxonomyRelationsUpdateOne) SetOrder(i int32) *TaxonomyRelationsUpdateOne {
	truo.mutation.ResetOrder()
	truo.mutation.SetOrder(i)
	return truo
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (truo *TaxonomyRelationsUpdateOne) SetNillableOrder(i *int32) *TaxonomyRelationsUpdateOne {
	if i != nil {
		truo.SetOrder(*i)
	}
	return truo
}

// AddOrder adds i to the "order" field.
func (truo *TaxonomyRelationsUpdateOne) AddOrder(i int32) *TaxonomyRelationsUpdateOne {
	truo.mutation.AddOrder(i)
	return truo
}

// SetCreatedBy sets the "created_by" field.
func (truo *TaxonomyRelationsUpdateOne) SetCreatedBy(s string) *TaxonomyRelationsUpdateOne {
	truo.mutation.SetCreatedBy(s)
	return truo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (truo *TaxonomyRelationsUpdateOne) SetNillableCreatedBy(s *string) *TaxonomyRelationsUpdateOne {
	if s != nil {
		truo.SetCreatedBy(*s)
	}
	return truo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (truo *TaxonomyRelationsUpdateOne) ClearCreatedBy() *TaxonomyRelationsUpdateOne {
	truo.mutation.ClearCreatedBy()
	return truo
}

// Mutation returns the TaxonomyRelationsMutation object of the builder.
func (truo *TaxonomyRelationsUpdateOne) Mutation() *TaxonomyRelationsMutation {
	return truo.mutation
}

// Where appends a list predicates to the TaxonomyRelationsUpdate builder.
func (truo *TaxonomyRelationsUpdateOne) Where(ps ...predicate.TaxonomyRelations) *TaxonomyRelationsUpdateOne {
	truo.mutation.Where(ps...)
	return truo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (truo *TaxonomyRelationsUpdateOne) Select(field string, fields ...string) *TaxonomyRelationsUpdateOne {
	truo.fields = append([]string{field}, fields...)
	return truo
}

// Save executes the query and returns the updated TaxonomyRelations entity.
func (truo *TaxonomyRelationsUpdateOne) Save(ctx context.Context) (*TaxonomyRelations, error) {
	return withHooks(ctx, truo.sqlSave, truo.mutation, truo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (truo *TaxonomyRelationsUpdateOne) SaveX(ctx context.Context) *TaxonomyRelations {
	node, err := truo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (truo *TaxonomyRelationsUpdateOne) Exec(ctx context.Context) error {
	_, err := truo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (truo *TaxonomyRelationsUpdateOne) ExecX(ctx context.Context) {
	if err := truo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (truo *TaxonomyRelationsUpdateOne) check() error {
	if v, ok := truo.mutation.TaxonomyID(); ok {
		if err := taxonomyrelations.TaxonomyIDValidator(v); err != nil {
			return &ValidationError{Name: "taxonomy_id", err: fmt.Errorf(`ent: validator failed for field "TaxonomyRelations.taxonomy_id": %w`, err)}
		}
	}
	if v, ok := truo.mutation.ObjectID(); ok {
		if err := taxonomyrelations.ObjectIDValidator(v); err != nil {
			return &ValidationError{Name: "object_id", err: fmt.Errorf(`ent: validator failed for field "TaxonomyRelations.object_id": %w`, err)}
		}
	}
	if v, ok := truo.mutation.Order(); ok {
		if err := taxonomyrelations.OrderValidator(v); err != nil {
			return &ValidationError{Name: "order", err: fmt.Errorf(`ent: validator failed for field "TaxonomyRelations.order": %w`, err)}
		}
	}
	if v, ok := truo.mutation.CreatedBy(); ok {
		if err := taxonomyrelations.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "TaxonomyRelations.created_by": %w`, err)}
		}
	}
	return nil
}

func (truo *TaxonomyRelationsUpdateOne) sqlSave(ctx context.Context) (_node *TaxonomyRelations, err error) {
	if err := truo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(taxonomyrelations.Table, taxonomyrelations.Columns, sqlgraph.NewFieldSpec(taxonomyrelations.FieldID, field.TypeString))
	id, ok := truo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TaxonomyRelations.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := truo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, taxonomyrelations.FieldID)
		for _, f := range fields {
			if !taxonomyrelations.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != taxonomyrelations.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := truo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := truo.mutation.TaxonomyID(); ok {
		_spec.SetField(taxonomyrelations.FieldTaxonomyID, field.TypeString, value)
	}
	if truo.mutation.TaxonomyIDCleared() {
		_spec.ClearField(taxonomyrelations.FieldTaxonomyID, field.TypeString)
	}
	if value, ok := truo.mutation.GetType(); ok {
		_spec.SetField(taxonomyrelations.FieldType, field.TypeString, value)
	}
	if truo.mutation.TypeCleared() {
		_spec.ClearField(taxonomyrelations.FieldType, field.TypeString)
	}
	if value, ok := truo.mutation.ObjectID(); ok {
		_spec.SetField(taxonomyrelations.FieldObjectID, field.TypeString, value)
	}
	if truo.mutation.ObjectIDCleared() {
		_spec.ClearField(taxonomyrelations.FieldObjectID, field.TypeString)
	}
	if value, ok := truo.mutation.Order(); ok {
		_spec.SetField(taxonomyrelations.FieldOrder, field.TypeInt32, value)
	}
	if value, ok := truo.mutation.AddedOrder(); ok {
		_spec.AddField(taxonomyrelations.FieldOrder, field.TypeInt32, value)
	}
	if value, ok := truo.mutation.CreatedBy(); ok {
		_spec.SetField(taxonomyrelations.FieldCreatedBy, field.TypeString, value)
	}
	if truo.mutation.CreatedByCleared() {
		_spec.ClearField(taxonomyrelations.FieldCreatedBy, field.TypeString)
	}
	if truo.mutation.CreatedAtCleared() {
		_spec.ClearField(taxonomyrelations.FieldCreatedAt, field.TypeTime)
	}
	_node = &TaxonomyRelations{config: truo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, truo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{taxonomyrelations.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	truo.mutation.done = true
	return _node, nil
}
