// Code generated by ent, DO NOT EDIT.

package topic

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the topic type in the database.
	Label = "topic"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldSlug holds the string denoting the slug field in the database.
	FieldSlug = "slug"
	// FieldContent holds the string denoting the content field in the database.
	FieldContent = "content"
	// FieldThumbnail holds the string denoting the thumbnail field in the database.
	FieldThumbnail = "thumbnail"
	// FieldTemp holds the string denoting the temp field in the database.
	FieldTemp = "temp"
	// FieldMarkdown holds the string denoting the markdown field in the database.
	FieldMarkdown = "markdown"
	// FieldPrivate holds the string denoting the private field in the database.
	FieldPrivate = "private"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldReleased holds the string denoting the released field in the database.
	FieldReleased = "released"
	// FieldTaxonomyID holds the string denoting the taxonomy_id field in the database.
	FieldTaxonomyID = "taxonomy_id"
	// FieldDomainID holds the string denoting the domain_id field in the database.
	FieldDomainID = "domain_id"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// Table holds the table name of the topic in the database.
	Table = "sc_topic"
)

// Columns holds all SQL columns for topic fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldTitle,
	FieldSlug,
	FieldContent,
	FieldThumbnail,
	FieldTemp,
	FieldMarkdown,
	FieldPrivate,
	FieldStatus,
	FieldReleased,
	FieldTaxonomyID,
	FieldDomainID,
	FieldCreatedBy,
	FieldUpdatedBy,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus int32
	// StatusValidator is a validator for the "status" field. It is called by the builders before save.
	StatusValidator func(int32) error
	// TaxonomyIDValidator is a validator for the "taxonomy_id" field. It is called by the builders before save.
	TaxonomyIDValidator func(string) error
	// DomainIDValidator is a validator for the "domain_id" field. It is called by the builders before save.
	DomainIDValidator func(string) error
	// CreatedByValidator is a validator for the "created_by" field. It is called by the builders before save.
	CreatedByValidator func(string) error
	// UpdatedByValidator is a validator for the "updated_by" field. It is called by the builders before save.
	UpdatedByValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
)

// OrderOption defines the ordering options for the Topic queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// BySlug orders the results by the slug field.
func BySlug(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSlug, opts...).ToFunc()
}

// ByContent orders the results by the content field.
func ByContent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContent, opts...).ToFunc()
}

// ByThumbnail orders the results by the thumbnail field.
func ByThumbnail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldThumbnail, opts...).ToFunc()
}

// ByTemp orders the results by the temp field.
func ByTemp(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTemp, opts...).ToFunc()
}

// ByMarkdown orders the results by the markdown field.
func ByMarkdown(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMarkdown, opts...).ToFunc()
}

// ByPrivate orders the results by the private field.
func ByPrivate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrivate, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByReleased orders the results by the released field.
func ByReleased(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReleased, opts...).ToFunc()
}

// ByTaxonomyID orders the results by the taxonomy_id field.
func ByTaxonomyID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTaxonomyID, opts...).ToFunc()
}

// ByDomainID orders the results by the domain_id field.
func ByDomainID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDomainID, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the updated_by field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}
