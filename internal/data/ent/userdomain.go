// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"stocms/internal/data/ent/userdomain"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// UserDomain is the model entity for the UserDomain schema.
type UserDomain struct {
	config `json:"-"`
	// ID of the ent.
	// user primary key alias
	ID string `json:"id,omitempty"`
	// domain id
	DomainID     string `json:"domain_id,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserDomain) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case userdomain.FieldID, userdomain.FieldDomainID:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserDomain fields.
func (ud *UserDomain) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userdomain.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				ud.ID = value.String
			}
		case userdomain.FieldDomainID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field domain_id", values[i])
			} else if value.Valid {
				ud.DomainID = value.String
			}
		default:
			ud.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserDomain.
// This includes values selected through modifiers, order, etc.
func (ud *UserDomain) Value(name string) (ent.Value, error) {
	return ud.selectValues.Get(name)
}

// Update returns a builder for updating this UserDomain.
// Note that you need to call UserDomain.Unwrap() before calling this method if this UserDomain
// was returned from a transaction, and the transaction was committed or rolled back.
func (ud *UserDomain) Update() *UserDomainUpdateOne {
	return NewUserDomainClient(ud.config).UpdateOne(ud)
}

// Unwrap unwraps the UserDomain entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ud *UserDomain) Unwrap() *UserDomain {
	_tx, ok := ud.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserDomain is not a transactional entity")
	}
	ud.config.driver = _tx.drv
	return ud
}

// String implements the fmt.Stringer.
func (ud *UserDomain) String() string {
	var builder strings.Builder
	builder.WriteString("UserDomain(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ud.ID))
	builder.WriteString("domain_id=")
	builder.WriteString(ud.DomainID)
	builder.WriteByte(')')
	return builder.String()
}

// UserDomains is a parsable slice of UserDomain.
type UserDomains []*UserDomain
