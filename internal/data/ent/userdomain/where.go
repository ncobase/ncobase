// Code generated by ent, DO NOT EDIT.

package userdomain

import (
	"stocms/internal/data/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.UserDomain {
	return predicate.UserDomain(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.UserDomain {
	return predicate.UserDomain(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.UserDomain {
	return predicate.UserDomain(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.UserDomain {
	return predicate.UserDomain(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.UserDomain {
	return predicate.UserDomain(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.UserDomain {
	return predicate.UserDomain(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.UserDomain {
	return predicate.UserDomain(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.UserDomain {
	return predicate.UserDomain(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.UserDomain {
	return predicate.UserDomain(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.UserDomain {
	return predicate.UserDomain(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.UserDomain {
	return predicate.UserDomain(sql.FieldContainsFold(FieldID, id))
}

// DomainID applies equality check predicate on the "domain_id" field. It's identical to DomainIDEQ.
func DomainID(v string) predicate.UserDomain {
	return predicate.UserDomain(sql.FieldEQ(FieldDomainID, v))
}

// DomainIDEQ applies the EQ predicate on the "domain_id" field.
func DomainIDEQ(v string) predicate.UserDomain {
	return predicate.UserDomain(sql.FieldEQ(FieldDomainID, v))
}

// DomainIDNEQ applies the NEQ predicate on the "domain_id" field.
func DomainIDNEQ(v string) predicate.UserDomain {
	return predicate.UserDomain(sql.FieldNEQ(FieldDomainID, v))
}

// DomainIDIn applies the In predicate on the "domain_id" field.
func DomainIDIn(vs ...string) predicate.UserDomain {
	return predicate.UserDomain(sql.FieldIn(FieldDomainID, vs...))
}

// DomainIDNotIn applies the NotIn predicate on the "domain_id" field.
func DomainIDNotIn(vs ...string) predicate.UserDomain {
	return predicate.UserDomain(sql.FieldNotIn(FieldDomainID, vs...))
}

// DomainIDGT applies the GT predicate on the "domain_id" field.
func DomainIDGT(v string) predicate.UserDomain {
	return predicate.UserDomain(sql.FieldGT(FieldDomainID, v))
}

// DomainIDGTE applies the GTE predicate on the "domain_id" field.
func DomainIDGTE(v string) predicate.UserDomain {
	return predicate.UserDomain(sql.FieldGTE(FieldDomainID, v))
}

// DomainIDLT applies the LT predicate on the "domain_id" field.
func DomainIDLT(v string) predicate.UserDomain {
	return predicate.UserDomain(sql.FieldLT(FieldDomainID, v))
}

// DomainIDLTE applies the LTE predicate on the "domain_id" field.
func DomainIDLTE(v string) predicate.UserDomain {
	return predicate.UserDomain(sql.FieldLTE(FieldDomainID, v))
}

// DomainIDContains applies the Contains predicate on the "domain_id" field.
func DomainIDContains(v string) predicate.UserDomain {
	return predicate.UserDomain(sql.FieldContains(FieldDomainID, v))
}

// DomainIDHasPrefix applies the HasPrefix predicate on the "domain_id" field.
func DomainIDHasPrefix(v string) predicate.UserDomain {
	return predicate.UserDomain(sql.FieldHasPrefix(FieldDomainID, v))
}

// DomainIDHasSuffix applies the HasSuffix predicate on the "domain_id" field.
func DomainIDHasSuffix(v string) predicate.UserDomain {
	return predicate.UserDomain(sql.FieldHasSuffix(FieldDomainID, v))
}

// DomainIDIsNil applies the IsNil predicate on the "domain_id" field.
func DomainIDIsNil() predicate.UserDomain {
	return predicate.UserDomain(sql.FieldIsNull(FieldDomainID))
}

// DomainIDNotNil applies the NotNil predicate on the "domain_id" field.
func DomainIDNotNil() predicate.UserDomain {
	return predicate.UserDomain(sql.FieldNotNull(FieldDomainID))
}

// DomainIDEqualFold applies the EqualFold predicate on the "domain_id" field.
func DomainIDEqualFold(v string) predicate.UserDomain {
	return predicate.UserDomain(sql.FieldEqualFold(FieldDomainID, v))
}

// DomainIDContainsFold applies the ContainsFold predicate on the "domain_id" field.
func DomainIDContainsFold(v string) predicate.UserDomain {
	return predicate.UserDomain(sql.FieldContainsFold(FieldDomainID, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserDomain) predicate.UserDomain {
	return predicate.UserDomain(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserDomain) predicate.UserDomain {
	return predicate.UserDomain(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserDomain) predicate.UserDomain {
	return predicate.UserDomain(sql.NotPredicates(p))
}
