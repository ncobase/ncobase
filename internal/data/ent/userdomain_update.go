// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/internal/data/ent/predicate"
	"ncobase/internal/data/ent/userdomain"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserDomainUpdate is the builder for updating UserDomain entities.
type UserDomainUpdate struct {
	config
	hooks    []Hook
	mutation *UserDomainMutation
}

// Where appends a list predicates to the UserDomainUpdate builder.
func (udu *UserDomainUpdate) Where(ps ...predicate.UserDomain) *UserDomainUpdate {
	udu.mutation.Where(ps...)
	return udu
}

// SetDomainID sets the "domain_id" field.
func (udu *UserDomainUpdate) SetDomainID(s string) *UserDomainUpdate {
	udu.mutation.SetDomainID(s)
	return udu
}

// SetNillableDomainID sets the "domain_id" field if the given value is not nil.
func (udu *UserDomainUpdate) SetNillableDomainID(s *string) *UserDomainUpdate {
	if s != nil {
		udu.SetDomainID(*s)
	}
	return udu
}

// ClearDomainID clears the value of the "domain_id" field.
func (udu *UserDomainUpdate) ClearDomainID() *UserDomainUpdate {
	udu.mutation.ClearDomainID()
	return udu
}

// Mutation returns the UserDomainMutation object of the builder.
func (udu *UserDomainUpdate) Mutation() *UserDomainMutation {
	return udu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (udu *UserDomainUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, udu.sqlSave, udu.mutation, udu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (udu *UserDomainUpdate) SaveX(ctx context.Context) int {
	affected, err := udu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (udu *UserDomainUpdate) Exec(ctx context.Context) error {
	_, err := udu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (udu *UserDomainUpdate) ExecX(ctx context.Context) {
	if err := udu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (udu *UserDomainUpdate) check() error {
	if v, ok := udu.mutation.DomainID(); ok {
		if err := userdomain.DomainIDValidator(v); err != nil {
			return &ValidationError{Name: "domain_id", err: fmt.Errorf(`ent: validator failed for field "UserDomain.domain_id": %w`, err)}
		}
	}
	return nil
}

func (udu *UserDomainUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := udu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(userdomain.Table, userdomain.Columns, sqlgraph.NewFieldSpec(userdomain.FieldID, field.TypeString))
	if ps := udu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := udu.mutation.DomainID(); ok {
		_spec.SetField(userdomain.FieldDomainID, field.TypeString, value)
	}
	if udu.mutation.DomainIDCleared() {
		_spec.ClearField(userdomain.FieldDomainID, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, udu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userdomain.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	udu.mutation.done = true
	return n, nil
}

// UserDomainUpdateOne is the builder for updating a single UserDomain entity.
type UserDomainUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserDomainMutation
}

// SetDomainID sets the "domain_id" field.
func (uduo *UserDomainUpdateOne) SetDomainID(s string) *UserDomainUpdateOne {
	uduo.mutation.SetDomainID(s)
	return uduo
}

// SetNillableDomainID sets the "domain_id" field if the given value is not nil.
func (uduo *UserDomainUpdateOne) SetNillableDomainID(s *string) *UserDomainUpdateOne {
	if s != nil {
		uduo.SetDomainID(*s)
	}
	return uduo
}

// ClearDomainID clears the value of the "domain_id" field.
func (uduo *UserDomainUpdateOne) ClearDomainID() *UserDomainUpdateOne {
	uduo.mutation.ClearDomainID()
	return uduo
}

// Mutation returns the UserDomainMutation object of the builder.
func (uduo *UserDomainUpdateOne) Mutation() *UserDomainMutation {
	return uduo.mutation
}

// Where appends a list predicates to the UserDomainUpdate builder.
func (uduo *UserDomainUpdateOne) Where(ps ...predicate.UserDomain) *UserDomainUpdateOne {
	uduo.mutation.Where(ps...)
	return uduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uduo *UserDomainUpdateOne) Select(field string, fields ...string) *UserDomainUpdateOne {
	uduo.fields = append([]string{field}, fields...)
	return uduo
}

// Save executes the query and returns the updated UserDomain entity.
func (uduo *UserDomainUpdateOne) Save(ctx context.Context) (*UserDomain, error) {
	return withHooks(ctx, uduo.sqlSave, uduo.mutation, uduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uduo *UserDomainUpdateOne) SaveX(ctx context.Context) *UserDomain {
	node, err := uduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uduo *UserDomainUpdateOne) Exec(ctx context.Context) error {
	_, err := uduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uduo *UserDomainUpdateOne) ExecX(ctx context.Context) {
	if err := uduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uduo *UserDomainUpdateOne) check() error {
	if v, ok := uduo.mutation.DomainID(); ok {
		if err := userdomain.DomainIDValidator(v); err != nil {
			return &ValidationError{Name: "domain_id", err: fmt.Errorf(`ent: validator failed for field "UserDomain.domain_id": %w`, err)}
		}
	}
	return nil
}

func (uduo *UserDomainUpdateOne) sqlSave(ctx context.Context) (_node *UserDomain, err error) {
	if err := uduo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(userdomain.Table, userdomain.Columns, sqlgraph.NewFieldSpec(userdomain.FieldID, field.TypeString))
	id, ok := uduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserDomain.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userdomain.FieldID)
		for _, f := range fields {
			if !userdomain.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userdomain.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uduo.mutation.DomainID(); ok {
		_spec.SetField(userdomain.FieldDomainID, field.TypeString, value)
	}
	if uduo.mutation.DomainIDCleared() {
		_spec.ClearField(userdomain.FieldDomainID, field.TypeString)
	}
	_node = &UserDomain{config: uduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userdomain.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uduo.mutation.done = true
	return _node, nil
}
