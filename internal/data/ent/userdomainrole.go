// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"stocms/internal/data/ent/userdomainrole"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// UserDomainRole is the model entity for the UserDomainRole schema.
type UserDomainRole struct {
	config `json:"-"`
	// ID of the ent.
	// user primary key alias
	ID string `json:"id,omitempty"`
	// domain id
	DomainID string `json:"domain_id,omitempty"`
	// role id
	RoleID       string `json:"role_id,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserDomainRole) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case userdomainrole.FieldID, userdomainrole.FieldDomainID, userdomainrole.FieldRoleID:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserDomainRole fields.
func (udr *UserDomainRole) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userdomainrole.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				udr.ID = value.String
			}
		case userdomainrole.FieldDomainID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field domain_id", values[i])
			} else if value.Valid {
				udr.DomainID = value.String
			}
		case userdomainrole.FieldRoleID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field role_id", values[i])
			} else if value.Valid {
				udr.RoleID = value.String
			}
		default:
			udr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserDomainRole.
// This includes values selected through modifiers, order, etc.
func (udr *UserDomainRole) Value(name string) (ent.Value, error) {
	return udr.selectValues.Get(name)
}

// Update returns a builder for updating this UserDomainRole.
// Note that you need to call UserDomainRole.Unwrap() before calling this method if this UserDomainRole
// was returned from a transaction, and the transaction was committed or rolled back.
func (udr *UserDomainRole) Update() *UserDomainRoleUpdateOne {
	return NewUserDomainRoleClient(udr.config).UpdateOne(udr)
}

// Unwrap unwraps the UserDomainRole entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (udr *UserDomainRole) Unwrap() *UserDomainRole {
	_tx, ok := udr.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserDomainRole is not a transactional entity")
	}
	udr.config.driver = _tx.drv
	return udr
}

// String implements the fmt.Stringer.
func (udr *UserDomainRole) String() string {
	var builder strings.Builder
	builder.WriteString("UserDomainRole(")
	builder.WriteString(fmt.Sprintf("id=%v, ", udr.ID))
	builder.WriteString("domain_id=")
	builder.WriteString(udr.DomainID)
	builder.WriteString(", ")
	builder.WriteString("role_id=")
	builder.WriteString(udr.RoleID)
	builder.WriteByte(')')
	return builder.String()
}

// UserDomainRoles is a parsable slice of UserDomainRole.
type UserDomainRoles []*UserDomainRole
