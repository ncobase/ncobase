// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"stocms/internal/data/ent/userdomainrole"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserDomainRoleCreate is the builder for creating a UserDomainRole entity.
type UserDomainRoleCreate struct {
	config
	mutation *UserDomainRoleMutation
	hooks    []Hook
}

// SetDomainID sets the "domain_id" field.
func (udrc *UserDomainRoleCreate) SetDomainID(s string) *UserDomainRoleCreate {
	udrc.mutation.SetDomainID(s)
	return udrc
}

// SetNillableDomainID sets the "domain_id" field if the given value is not nil.
func (udrc *UserDomainRoleCreate) SetNillableDomainID(s *string) *UserDomainRoleCreate {
	if s != nil {
		udrc.SetDomainID(*s)
	}
	return udrc
}

// SetRoleID sets the "role_id" field.
func (udrc *UserDomainRoleCreate) SetRoleID(s string) *UserDomainRoleCreate {
	udrc.mutation.SetRoleID(s)
	return udrc
}

// SetNillableRoleID sets the "role_id" field if the given value is not nil.
func (udrc *UserDomainRoleCreate) SetNillableRoleID(s *string) *UserDomainRoleCreate {
	if s != nil {
		udrc.SetRoleID(*s)
	}
	return udrc
}

// SetID sets the "id" field.
func (udrc *UserDomainRoleCreate) SetID(s string) *UserDomainRoleCreate {
	udrc.mutation.SetID(s)
	return udrc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (udrc *UserDomainRoleCreate) SetNillableID(s *string) *UserDomainRoleCreate {
	if s != nil {
		udrc.SetID(*s)
	}
	return udrc
}

// Mutation returns the UserDomainRoleMutation object of the builder.
func (udrc *UserDomainRoleCreate) Mutation() *UserDomainRoleMutation {
	return udrc.mutation
}

// Save creates the UserDomainRole in the database.
func (udrc *UserDomainRoleCreate) Save(ctx context.Context) (*UserDomainRole, error) {
	udrc.defaults()
	return withHooks(ctx, udrc.sqlSave, udrc.mutation, udrc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (udrc *UserDomainRoleCreate) SaveX(ctx context.Context) *UserDomainRole {
	v, err := udrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (udrc *UserDomainRoleCreate) Exec(ctx context.Context) error {
	_, err := udrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (udrc *UserDomainRoleCreate) ExecX(ctx context.Context) {
	if err := udrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (udrc *UserDomainRoleCreate) defaults() {
	if _, ok := udrc.mutation.ID(); !ok {
		v := userdomainrole.DefaultID()
		udrc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (udrc *UserDomainRoleCreate) check() error {
	if v, ok := udrc.mutation.DomainID(); ok {
		if err := userdomainrole.DomainIDValidator(v); err != nil {
			return &ValidationError{Name: "domain_id", err: fmt.Errorf(`ent: validator failed for field "UserDomainRole.domain_id": %w`, err)}
		}
	}
	if v, ok := udrc.mutation.RoleID(); ok {
		if err := userdomainrole.RoleIDValidator(v); err != nil {
			return &ValidationError{Name: "role_id", err: fmt.Errorf(`ent: validator failed for field "UserDomainRole.role_id": %w`, err)}
		}
	}
	return nil
}

func (udrc *UserDomainRoleCreate) sqlSave(ctx context.Context) (*UserDomainRole, error) {
	if err := udrc.check(); err != nil {
		return nil, err
	}
	_node, _spec := udrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, udrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected UserDomainRole.ID type: %T", _spec.ID.Value)
		}
	}
	udrc.mutation.id = &_node.ID
	udrc.mutation.done = true
	return _node, nil
}

func (udrc *UserDomainRoleCreate) createSpec() (*UserDomainRole, *sqlgraph.CreateSpec) {
	var (
		_node = &UserDomainRole{config: udrc.config}
		_spec = sqlgraph.NewCreateSpec(userdomainrole.Table, sqlgraph.NewFieldSpec(userdomainrole.FieldID, field.TypeString))
	)
	if id, ok := udrc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := udrc.mutation.DomainID(); ok {
		_spec.SetField(userdomainrole.FieldDomainID, field.TypeString, value)
		_node.DomainID = value
	}
	if value, ok := udrc.mutation.RoleID(); ok {
		_spec.SetField(userdomainrole.FieldRoleID, field.TypeString, value)
		_node.RoleID = value
	}
	return _node, _spec
}

// UserDomainRoleCreateBulk is the builder for creating many UserDomainRole entities in bulk.
type UserDomainRoleCreateBulk struct {
	config
	err      error
	builders []*UserDomainRoleCreate
}

// Save creates the UserDomainRole entities in the database.
func (udrcb *UserDomainRoleCreateBulk) Save(ctx context.Context) ([]*UserDomainRole, error) {
	if udrcb.err != nil {
		return nil, udrcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(udrcb.builders))
	nodes := make([]*UserDomainRole, len(udrcb.builders))
	mutators := make([]Mutator, len(udrcb.builders))
	for i := range udrcb.builders {
		func(i int, root context.Context) {
			builder := udrcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserDomainRoleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, udrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, udrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, udrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (udrcb *UserDomainRoleCreateBulk) SaveX(ctx context.Context) []*UserDomainRole {
	v, err := udrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (udrcb *UserDomainRoleCreateBulk) Exec(ctx context.Context) error {
	_, err := udrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (udrcb *UserDomainRoleCreateBulk) ExecX(ctx context.Context) {
	if err := udrcb.Exec(ctx); err != nil {
		panic(err)
	}
}
