// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"stocms/internal/data/ent/predicate"
	"stocms/internal/data/ent/userdomainrole"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserDomainRoleDelete is the builder for deleting a UserDomainRole entity.
type UserDomainRoleDelete struct {
	config
	hooks    []Hook
	mutation *UserDomainRoleMutation
}

// Where appends a list predicates to the UserDomainRoleDelete builder.
func (udrd *UserDomainRoleDelete) Where(ps ...predicate.UserDomainRole) *UserDomainRoleDelete {
	udrd.mutation.Where(ps...)
	return udrd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (udrd *UserDomainRoleDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, udrd.sqlExec, udrd.mutation, udrd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (udrd *UserDomainRoleDelete) ExecX(ctx context.Context) int {
	n, err := udrd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (udrd *UserDomainRoleDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(userdomainrole.Table, sqlgraph.NewFieldSpec(userdomainrole.FieldID, field.TypeString))
	if ps := udrd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, udrd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	udrd.mutation.done = true
	return affected, err
}

// UserDomainRoleDeleteOne is the builder for deleting a single UserDomainRole entity.
type UserDomainRoleDeleteOne struct {
	udrd *UserDomainRoleDelete
}

// Where appends a list predicates to the UserDomainRoleDelete builder.
func (udrdo *UserDomainRoleDeleteOne) Where(ps ...predicate.UserDomainRole) *UserDomainRoleDeleteOne {
	udrdo.udrd.mutation.Where(ps...)
	return udrdo
}

// Exec executes the deletion query.
func (udrdo *UserDomainRoleDeleteOne) Exec(ctx context.Context) error {
	n, err := udrdo.udrd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{userdomainrole.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (udrdo *UserDomainRoleDeleteOne) ExecX(ctx context.Context) {
	if err := udrdo.Exec(ctx); err != nil {
		panic(err)
	}
}
