// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/internal/data/ent/predicate"
	"ncobase/internal/data/ent/userdomainrole"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserDomainRoleUpdate is the builder for updating UserDomainRole entities.
type UserDomainRoleUpdate struct {
	config
	hooks    []Hook
	mutation *UserDomainRoleMutation
}

// Where appends a list predicates to the UserDomainRoleUpdate builder.
func (udru *UserDomainRoleUpdate) Where(ps ...predicate.UserDomainRole) *UserDomainRoleUpdate {
	udru.mutation.Where(ps...)
	return udru
}

// SetDomainID sets the "domain_id" field.
func (udru *UserDomainRoleUpdate) SetDomainID(s string) *UserDomainRoleUpdate {
	udru.mutation.SetDomainID(s)
	return udru
}

// SetNillableDomainID sets the "domain_id" field if the given value is not nil.
func (udru *UserDomainRoleUpdate) SetNillableDomainID(s *string) *UserDomainRoleUpdate {
	if s != nil {
		udru.SetDomainID(*s)
	}
	return udru
}

// ClearDomainID clears the value of the "domain_id" field.
func (udru *UserDomainRoleUpdate) ClearDomainID() *UserDomainRoleUpdate {
	udru.mutation.ClearDomainID()
	return udru
}

// SetRoleID sets the "role_id" field.
func (udru *UserDomainRoleUpdate) SetRoleID(s string) *UserDomainRoleUpdate {
	udru.mutation.SetRoleID(s)
	return udru
}

// SetNillableRoleID sets the "role_id" field if the given value is not nil.
func (udru *UserDomainRoleUpdate) SetNillableRoleID(s *string) *UserDomainRoleUpdate {
	if s != nil {
		udru.SetRoleID(*s)
	}
	return udru
}

// ClearRoleID clears the value of the "role_id" field.
func (udru *UserDomainRoleUpdate) ClearRoleID() *UserDomainRoleUpdate {
	udru.mutation.ClearRoleID()
	return udru
}

// Mutation returns the UserDomainRoleMutation object of the builder.
func (udru *UserDomainRoleUpdate) Mutation() *UserDomainRoleMutation {
	return udru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (udru *UserDomainRoleUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, udru.sqlSave, udru.mutation, udru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (udru *UserDomainRoleUpdate) SaveX(ctx context.Context) int {
	affected, err := udru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (udru *UserDomainRoleUpdate) Exec(ctx context.Context) error {
	_, err := udru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (udru *UserDomainRoleUpdate) ExecX(ctx context.Context) {
	if err := udru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (udru *UserDomainRoleUpdate) check() error {
	if v, ok := udru.mutation.DomainID(); ok {
		if err := userdomainrole.DomainIDValidator(v); err != nil {
			return &ValidationError{Name: "domain_id", err: fmt.Errorf(`ent: validator failed for field "UserDomainRole.domain_id": %w`, err)}
		}
	}
	if v, ok := udru.mutation.RoleID(); ok {
		if err := userdomainrole.RoleIDValidator(v); err != nil {
			return &ValidationError{Name: "role_id", err: fmt.Errorf(`ent: validator failed for field "UserDomainRole.role_id": %w`, err)}
		}
	}
	return nil
}

func (udru *UserDomainRoleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := udru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(userdomainrole.Table, userdomainrole.Columns, sqlgraph.NewFieldSpec(userdomainrole.FieldID, field.TypeString))
	if ps := udru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := udru.mutation.DomainID(); ok {
		_spec.SetField(userdomainrole.FieldDomainID, field.TypeString, value)
	}
	if udru.mutation.DomainIDCleared() {
		_spec.ClearField(userdomainrole.FieldDomainID, field.TypeString)
	}
	if value, ok := udru.mutation.RoleID(); ok {
		_spec.SetField(userdomainrole.FieldRoleID, field.TypeString, value)
	}
	if udru.mutation.RoleIDCleared() {
		_spec.ClearField(userdomainrole.FieldRoleID, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, udru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userdomainrole.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	udru.mutation.done = true
	return n, nil
}

// UserDomainRoleUpdateOne is the builder for updating a single UserDomainRole entity.
type UserDomainRoleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserDomainRoleMutation
}

// SetDomainID sets the "domain_id" field.
func (udruo *UserDomainRoleUpdateOne) SetDomainID(s string) *UserDomainRoleUpdateOne {
	udruo.mutation.SetDomainID(s)
	return udruo
}

// SetNillableDomainID sets the "domain_id" field if the given value is not nil.
func (udruo *UserDomainRoleUpdateOne) SetNillableDomainID(s *string) *UserDomainRoleUpdateOne {
	if s != nil {
		udruo.SetDomainID(*s)
	}
	return udruo
}

// ClearDomainID clears the value of the "domain_id" field.
func (udruo *UserDomainRoleUpdateOne) ClearDomainID() *UserDomainRoleUpdateOne {
	udruo.mutation.ClearDomainID()
	return udruo
}

// SetRoleID sets the "role_id" field.
func (udruo *UserDomainRoleUpdateOne) SetRoleID(s string) *UserDomainRoleUpdateOne {
	udruo.mutation.SetRoleID(s)
	return udruo
}

// SetNillableRoleID sets the "role_id" field if the given value is not nil.
func (udruo *UserDomainRoleUpdateOne) SetNillableRoleID(s *string) *UserDomainRoleUpdateOne {
	if s != nil {
		udruo.SetRoleID(*s)
	}
	return udruo
}

// ClearRoleID clears the value of the "role_id" field.
func (udruo *UserDomainRoleUpdateOne) ClearRoleID() *UserDomainRoleUpdateOne {
	udruo.mutation.ClearRoleID()
	return udruo
}

// Mutation returns the UserDomainRoleMutation object of the builder.
func (udruo *UserDomainRoleUpdateOne) Mutation() *UserDomainRoleMutation {
	return udruo.mutation
}

// Where appends a list predicates to the UserDomainRoleUpdate builder.
func (udruo *UserDomainRoleUpdateOne) Where(ps ...predicate.UserDomainRole) *UserDomainRoleUpdateOne {
	udruo.mutation.Where(ps...)
	return udruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (udruo *UserDomainRoleUpdateOne) Select(field string, fields ...string) *UserDomainRoleUpdateOne {
	udruo.fields = append([]string{field}, fields...)
	return udruo
}

// Save executes the query and returns the updated UserDomainRole entity.
func (udruo *UserDomainRoleUpdateOne) Save(ctx context.Context) (*UserDomainRole, error) {
	return withHooks(ctx, udruo.sqlSave, udruo.mutation, udruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (udruo *UserDomainRoleUpdateOne) SaveX(ctx context.Context) *UserDomainRole {
	node, err := udruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (udruo *UserDomainRoleUpdateOne) Exec(ctx context.Context) error {
	_, err := udruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (udruo *UserDomainRoleUpdateOne) ExecX(ctx context.Context) {
	if err := udruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (udruo *UserDomainRoleUpdateOne) check() error {
	if v, ok := udruo.mutation.DomainID(); ok {
		if err := userdomainrole.DomainIDValidator(v); err != nil {
			return &ValidationError{Name: "domain_id", err: fmt.Errorf(`ent: validator failed for field "UserDomainRole.domain_id": %w`, err)}
		}
	}
	if v, ok := udruo.mutation.RoleID(); ok {
		if err := userdomainrole.RoleIDValidator(v); err != nil {
			return &ValidationError{Name: "role_id", err: fmt.Errorf(`ent: validator failed for field "UserDomainRole.role_id": %w`, err)}
		}
	}
	return nil
}

func (udruo *UserDomainRoleUpdateOne) sqlSave(ctx context.Context) (_node *UserDomainRole, err error) {
	if err := udruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(userdomainrole.Table, userdomainrole.Columns, sqlgraph.NewFieldSpec(userdomainrole.FieldID, field.TypeString))
	id, ok := udruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserDomainRole.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := udruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userdomainrole.FieldID)
		for _, f := range fields {
			if !userdomainrole.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userdomainrole.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := udruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := udruo.mutation.DomainID(); ok {
		_spec.SetField(userdomainrole.FieldDomainID, field.TypeString, value)
	}
	if udruo.mutation.DomainIDCleared() {
		_spec.ClearField(userdomainrole.FieldDomainID, field.TypeString)
	}
	if value, ok := udruo.mutation.RoleID(); ok {
		_spec.SetField(userdomainrole.FieldRoleID, field.TypeString, value)
	}
	if udruo.mutation.RoleIDCleared() {
		_spec.ClearField(userdomainrole.FieldRoleID, field.TypeString)
	}
	_node = &UserDomainRole{config: udruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, udruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userdomainrole.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	udruo.mutation.done = true
	return _node, nil
}
