// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/internal/data/ent/predicate"
	"ncobase/internal/data/ent/usertenant"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserTenantUpdate is the builder for updating UserTenant entities.
type UserTenantUpdate struct {
	config
	hooks    []Hook
	mutation *UserTenantMutation
}

// Where appends a list predicates to the UserTenantUpdate builder.
func (utu *UserTenantUpdate) Where(ps ...predicate.UserTenant) *UserTenantUpdate {
	utu.mutation.Where(ps...)
	return utu
}

// SetTenantID sets the "tenant_id" field.
func (utu *UserTenantUpdate) SetTenantID(s string) *UserTenantUpdate {
	utu.mutation.SetTenantID(s)
	return utu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (utu *UserTenantUpdate) SetNillableTenantID(s *string) *UserTenantUpdate {
	if s != nil {
		utu.SetTenantID(*s)
	}
	return utu
}

// ClearTenantID clears the value of the "tenant_id" field.
func (utu *UserTenantUpdate) ClearTenantID() *UserTenantUpdate {
	utu.mutation.ClearTenantID()
	return utu
}

// Mutation returns the UserTenantMutation object of the builder.
func (utu *UserTenantUpdate) Mutation() *UserTenantMutation {
	return utu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (utu *UserTenantUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, utu.sqlSave, utu.mutation, utu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (utu *UserTenantUpdate) SaveX(ctx context.Context) int {
	affected, err := utu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (utu *UserTenantUpdate) Exec(ctx context.Context) error {
	_, err := utu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (utu *UserTenantUpdate) ExecX(ctx context.Context) {
	if err := utu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (utu *UserTenantUpdate) check() error {
	if v, ok := utu.mutation.TenantID(); ok {
		if err := usertenant.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "UserTenant.tenant_id": %w`, err)}
		}
	}
	return nil
}

func (utu *UserTenantUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := utu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(usertenant.Table, usertenant.Columns, sqlgraph.NewFieldSpec(usertenant.FieldID, field.TypeString))
	if ps := utu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := utu.mutation.TenantID(); ok {
		_spec.SetField(usertenant.FieldTenantID, field.TypeString, value)
	}
	if utu.mutation.TenantIDCleared() {
		_spec.ClearField(usertenant.FieldTenantID, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, utu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usertenant.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	utu.mutation.done = true
	return n, nil
}

// UserTenantUpdateOne is the builder for updating a single UserTenant entity.
type UserTenantUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserTenantMutation
}

// SetTenantID sets the "tenant_id" field.
func (utuo *UserTenantUpdateOne) SetTenantID(s string) *UserTenantUpdateOne {
	utuo.mutation.SetTenantID(s)
	return utuo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (utuo *UserTenantUpdateOne) SetNillableTenantID(s *string) *UserTenantUpdateOne {
	if s != nil {
		utuo.SetTenantID(*s)
	}
	return utuo
}

// ClearTenantID clears the value of the "tenant_id" field.
func (utuo *UserTenantUpdateOne) ClearTenantID() *UserTenantUpdateOne {
	utuo.mutation.ClearTenantID()
	return utuo
}

// Mutation returns the UserTenantMutation object of the builder.
func (utuo *UserTenantUpdateOne) Mutation() *UserTenantMutation {
	return utuo.mutation
}

// Where appends a list predicates to the UserTenantUpdate builder.
func (utuo *UserTenantUpdateOne) Where(ps ...predicate.UserTenant) *UserTenantUpdateOne {
	utuo.mutation.Where(ps...)
	return utuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (utuo *UserTenantUpdateOne) Select(field string, fields ...string) *UserTenantUpdateOne {
	utuo.fields = append([]string{field}, fields...)
	return utuo
}

// Save executes the query and returns the updated UserTenant entity.
func (utuo *UserTenantUpdateOne) Save(ctx context.Context) (*UserTenant, error) {
	return withHooks(ctx, utuo.sqlSave, utuo.mutation, utuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (utuo *UserTenantUpdateOne) SaveX(ctx context.Context) *UserTenant {
	node, err := utuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (utuo *UserTenantUpdateOne) Exec(ctx context.Context) error {
	_, err := utuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (utuo *UserTenantUpdateOne) ExecX(ctx context.Context) {
	if err := utuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (utuo *UserTenantUpdateOne) check() error {
	if v, ok := utuo.mutation.TenantID(); ok {
		if err := usertenant.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "UserTenant.tenant_id": %w`, err)}
		}
	}
	return nil
}

func (utuo *UserTenantUpdateOne) sqlSave(ctx context.Context) (_node *UserTenant, err error) {
	if err := utuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(usertenant.Table, usertenant.Columns, sqlgraph.NewFieldSpec(usertenant.FieldID, field.TypeString))
	id, ok := utuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserTenant.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := utuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, usertenant.FieldID)
		for _, f := range fields {
			if !usertenant.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != usertenant.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := utuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := utuo.mutation.TenantID(); ok {
		_spec.SetField(usertenant.FieldTenantID, field.TypeString, value)
	}
	if utuo.mutation.TenantIDCleared() {
		_spec.ClearField(usertenant.FieldTenantID, field.TypeString)
	}
	_node = &UserTenant{config: utuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, utuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usertenant.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	utuo.mutation.done = true
	return _node, nil
}
