// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"ncobase/internal/data/ent/usertenantrole"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserTenantRoleCreate is the builder for creating a UserTenantRole entity.
type UserTenantRoleCreate struct {
	config
	mutation *UserTenantRoleMutation
	hooks    []Hook
}

// SetTenantID sets the "tenant_id" field.
func (utrc *UserTenantRoleCreate) SetTenantID(s string) *UserTenantRoleCreate {
	utrc.mutation.SetTenantID(s)
	return utrc
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (utrc *UserTenantRoleCreate) SetNillableTenantID(s *string) *UserTenantRoleCreate {
	if s != nil {
		utrc.SetTenantID(*s)
	}
	return utrc
}

// SetRoleID sets the "role_id" field.
func (utrc *UserTenantRoleCreate) SetRoleID(s string) *UserTenantRoleCreate {
	utrc.mutation.SetRoleID(s)
	return utrc
}

// SetNillableRoleID sets the "role_id" field if the given value is not nil.
func (utrc *UserTenantRoleCreate) SetNillableRoleID(s *string) *UserTenantRoleCreate {
	if s != nil {
		utrc.SetRoleID(*s)
	}
	return utrc
}

// SetID sets the "id" field.
func (utrc *UserTenantRoleCreate) SetID(s string) *UserTenantRoleCreate {
	utrc.mutation.SetID(s)
	return utrc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (utrc *UserTenantRoleCreate) SetNillableID(s *string) *UserTenantRoleCreate {
	if s != nil {
		utrc.SetID(*s)
	}
	return utrc
}

// Mutation returns the UserTenantRoleMutation object of the builder.
func (utrc *UserTenantRoleCreate) Mutation() *UserTenantRoleMutation {
	return utrc.mutation
}

// Save creates the UserTenantRole in the database.
func (utrc *UserTenantRoleCreate) Save(ctx context.Context) (*UserTenantRole, error) {
	utrc.defaults()
	return withHooks(ctx, utrc.sqlSave, utrc.mutation, utrc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (utrc *UserTenantRoleCreate) SaveX(ctx context.Context) *UserTenantRole {
	v, err := utrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (utrc *UserTenantRoleCreate) Exec(ctx context.Context) error {
	_, err := utrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (utrc *UserTenantRoleCreate) ExecX(ctx context.Context) {
	if err := utrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (utrc *UserTenantRoleCreate) defaults() {
	if _, ok := utrc.mutation.ID(); !ok {
		v := usertenantrole.DefaultID()
		utrc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (utrc *UserTenantRoleCreate) check() error {
	if v, ok := utrc.mutation.TenantID(); ok {
		if err := usertenantrole.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "UserTenantRole.tenant_id": %w`, err)}
		}
	}
	if v, ok := utrc.mutation.RoleID(); ok {
		if err := usertenantrole.RoleIDValidator(v); err != nil {
			return &ValidationError{Name: "role_id", err: fmt.Errorf(`ent: validator failed for field "UserTenantRole.role_id": %w`, err)}
		}
	}
	return nil
}

func (utrc *UserTenantRoleCreate) sqlSave(ctx context.Context) (*UserTenantRole, error) {
	if err := utrc.check(); err != nil {
		return nil, err
	}
	_node, _spec := utrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, utrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected UserTenantRole.ID type: %T", _spec.ID.Value)
		}
	}
	utrc.mutation.id = &_node.ID
	utrc.mutation.done = true
	return _node, nil
}

func (utrc *UserTenantRoleCreate) createSpec() (*UserTenantRole, *sqlgraph.CreateSpec) {
	var (
		_node = &UserTenantRole{config: utrc.config}
		_spec = sqlgraph.NewCreateSpec(usertenantrole.Table, sqlgraph.NewFieldSpec(usertenantrole.FieldID, field.TypeString))
	)
	if id, ok := utrc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := utrc.mutation.TenantID(); ok {
		_spec.SetField(usertenantrole.FieldTenantID, field.TypeString, value)
		_node.TenantID = value
	}
	if value, ok := utrc.mutation.RoleID(); ok {
		_spec.SetField(usertenantrole.FieldRoleID, field.TypeString, value)
		_node.RoleID = value
	}
	return _node, _spec
}

// UserTenantRoleCreateBulk is the builder for creating many UserTenantRole entities in bulk.
type UserTenantRoleCreateBulk struct {
	config
	err      error
	builders []*UserTenantRoleCreate
}

// Save creates the UserTenantRole entities in the database.
func (utrcb *UserTenantRoleCreateBulk) Save(ctx context.Context) ([]*UserTenantRole, error) {
	if utrcb.err != nil {
		return nil, utrcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(utrcb.builders))
	nodes := make([]*UserTenantRole, len(utrcb.builders))
	mutators := make([]Mutator, len(utrcb.builders))
	for i := range utrcb.builders {
		func(i int, root context.Context) {
			builder := utrcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserTenantRoleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, utrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, utrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, utrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (utrcb *UserTenantRoleCreateBulk) SaveX(ctx context.Context) []*UserTenantRole {
	v, err := utrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (utrcb *UserTenantRoleCreateBulk) Exec(ctx context.Context) error {
	_, err := utrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (utrcb *UserTenantRoleCreateBulk) ExecX(ctx context.Context) {
	if err := utrcb.Exec(ctx); err != nil {
		panic(err)
	}
}
