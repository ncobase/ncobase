package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.47

import (
	"context"
	"errors"
	"stocms/internal/data/structs"
	"stocms/internal/graphql/types"
	"stocms/internal/helper"
)

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input types.LoginInput) (*types.AuthPayload, error) {
	c, _ := helper.GetGinContext(ctx)
	resp, err := r.Svc.LoginService(c, &structs.LoginBody{
		Username: input.Username,
		Password: input.Password,
	})
	if err != nil {
		return nil, err
	}

	data, ok := resp.Data.(map[string]any)
	if !ok {
		return nil, errors.New("invalid response data format")
	}

	id, idOK := data["id"].(string)
	token, tokenOK := data["access_token"].(string)

	if !idOK || !tokenOK {
		return nil, errors.New("invalid response data format")
	}

	return &types.AuthPayload{
		ID:          &id,
		AccessToken: &token,
	}, nil
}

// Register is the resolver for the register field.
func (r *mutationResolver) Register(ctx context.Context, input types.RegisterInput) (*types.AuthPayload, error) {
	c, _ := helper.GetGinContext(ctx)
	resp, err := r.Svc.RegisterService(c, &structs.RegisterBody{
		CommonRegisterBody: structs.CommonRegisterBody{
			DisplayName: input.DisplayName,
			Username:    input.Username,
			Phone:       *input.Phone,
			ShortBio:    *input.ShortBio,
		},
		RegisterToken: input.RegisterToken,
	})
	if err != nil {
		return nil, err
	}

	data, ok := resp.Data.(map[string]any)
	if !ok {
		return nil, errors.New("invalid response data format")
	}

	id, idOK := data["id"].(string)
	token, tokenOK := data["access_token"].(string)

	if !idOK || !tokenOK {
		return nil, errors.New("invalid response data format")
	}

	return &types.AuthPayload{
		ID:          &id,
		AccessToken: &token,
	}, nil
}

// SendAuthorizeCode is the resolver for the sendAuthorizeCode field.
func (r *mutationResolver) SendAuthorizeCode(ctx context.Context, input types.SendCodeInput) (*bool, error) {
	c, _ := helper.GetGinContext(ctx)
	resp, err := r.Svc.SendCodeService(c, &structs.SendCodeBody{
		Email: *input.Email,
		Phone: *input.Phone,
	})
	if err != nil {
		return nil, err
	}

	data, ok := resp.Data.(map[string]any)
	if !ok {
		return nil, errors.New("invalid response data format")
	}

	registered, registeredOK := data["registered"].(bool)

	if !registeredOK {
		return nil, errors.New("invalid response data format")
	}

	return &registered, nil
}

// Authorize is the resolver for the authorize field.
func (r *mutationResolver) Authorize(ctx context.Context, code string) (*types.AuthPayload, error) {
	c, _ := helper.GetGinContext(ctx)
	resp, err := r.Svc.CodeAuthService(c, code)
	if err != nil {
		return nil, err
	}

	data, ok := resp.Data.(map[string]any)
	if !ok {
		return nil, errors.New("invalid response data format")
	}

	id, idOK := data["id"].(string)
	token, tokenOK := data["access_token"].(string)

	if !idOK || !tokenOK {
		return nil, errors.New("invalid response data format")
	}

	return &types.AuthPayload{
		ID:          &id,
		AccessToken: &token,
	}, nil
}
