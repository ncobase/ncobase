package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.47

import (
	"context"
	"stocms/internal/data/structs"
	"stocms/internal/graphql/types"
	"stocms/internal/helper"

	"github.com/jinzhu/copier"
)

// UpdatePassword is the resolver for the update_password field.
func (r *mutationResolver) UpdatePassword(ctx context.Context, input *types.UpdatePassword) (*types.RStruct, error) {
	c, _ := helper.GetGinContext(ctx)
	resp, err := r.Svc.UpdatePasswordService(c, &structs.UserRequestBody{OldPassword: *input.OldPassword, NewPassword: *input.NewPassword})
	if err != nil {
		return nil, err
	}

	return &types.RStruct{
		Message: &resp.Message,
	}, nil
}

// Account is the resolver for the account field.
func (r *queryResolver) Account(ctx context.Context) (*types.User, error) {
	c, _ := helper.GetGinContext(ctx)
	resp, err := r.Svc.ReadMeService(c)
	if err != nil {
		return nil, err
	}
	var user types.User
	err = copier.Copy(&user, resp.Data)
	if err != nil {
		return nil, err
	}
	return &user, nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*types.User, error) {
	c, _ := helper.GetGinContext(ctx)
	resp, err := r.Svc.ReadUserService(c, id)
	if err != nil {
		return nil, err
	}
	var user types.User
	err = copier.Copy(&user, resp.Data)
	if err != nil {
		return nil, err
	}
	return &user, nil
}
