// Code generated by ent, DO NOT EDIT.

package counter

import (
	"ncobase/counter/data/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Counter {
	return predicate.Counter(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Counter {
	return predicate.Counter(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Counter {
	return predicate.Counter(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Counter {
	return predicate.Counter(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Counter {
	return predicate.Counter(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Counter {
	return predicate.Counter(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Counter {
	return predicate.Counter(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Counter {
	return predicate.Counter(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Counter {
	return predicate.Counter(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Counter {
	return predicate.Counter(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Counter {
	return predicate.Counter(sql.FieldContainsFold(FieldID, id))
}

// Identifier applies equality check predicate on the "identifier" field. It's identical to IdentifierEQ.
func Identifier(v string) predicate.Counter {
	return predicate.Counter(sql.FieldEQ(FieldIdentifier, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Counter {
	return predicate.Counter(sql.FieldEQ(FieldName, v))
}

// Prefix applies equality check predicate on the "prefix" field. It's identical to PrefixEQ.
func Prefix(v string) predicate.Counter {
	return predicate.Counter(sql.FieldEQ(FieldPrefix, v))
}

// Suffix applies equality check predicate on the "suffix" field. It's identical to SuffixEQ.
func Suffix(v string) predicate.Counter {
	return predicate.Counter(sql.FieldEQ(FieldSuffix, v))
}

// StartValue applies equality check predicate on the "start_value" field. It's identical to StartValueEQ.
func StartValue(v int) predicate.Counter {
	return predicate.Counter(sql.FieldEQ(FieldStartValue, v))
}

// IncrementStep applies equality check predicate on the "increment_step" field. It's identical to IncrementStepEQ.
func IncrementStep(v int) predicate.Counter {
	return predicate.Counter(sql.FieldEQ(FieldIncrementStep, v))
}

// DateFormat applies equality check predicate on the "date_format" field. It's identical to DateFormatEQ.
func DateFormat(v string) predicate.Counter {
	return predicate.Counter(sql.FieldEQ(FieldDateFormat, v))
}

// CurrentValue applies equality check predicate on the "current_value" field. It's identical to CurrentValueEQ.
func CurrentValue(v int) predicate.Counter {
	return predicate.Counter(sql.FieldEQ(FieldCurrentValue, v))
}

// Disabled applies equality check predicate on the "disabled" field. It's identical to DisabledEQ.
func Disabled(v bool) predicate.Counter {
	return predicate.Counter(sql.FieldEQ(FieldDisabled, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Counter {
	return predicate.Counter(sql.FieldEQ(FieldDescription, v))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v string) predicate.Counter {
	return predicate.Counter(sql.FieldEQ(FieldTenantID, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v string) predicate.Counter {
	return predicate.Counter(sql.FieldEQ(FieldCreatedBy, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v string) predicate.Counter {
	return predicate.Counter(sql.FieldEQ(FieldUpdatedBy, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v int64) predicate.Counter {
	return predicate.Counter(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v int64) predicate.Counter {
	return predicate.Counter(sql.FieldEQ(FieldUpdatedAt, v))
}

// IdentifierEQ applies the EQ predicate on the "identifier" field.
func IdentifierEQ(v string) predicate.Counter {
	return predicate.Counter(sql.FieldEQ(FieldIdentifier, v))
}

// IdentifierNEQ applies the NEQ predicate on the "identifier" field.
func IdentifierNEQ(v string) predicate.Counter {
	return predicate.Counter(sql.FieldNEQ(FieldIdentifier, v))
}

// IdentifierIn applies the In predicate on the "identifier" field.
func IdentifierIn(vs ...string) predicate.Counter {
	return predicate.Counter(sql.FieldIn(FieldIdentifier, vs...))
}

// IdentifierNotIn applies the NotIn predicate on the "identifier" field.
func IdentifierNotIn(vs ...string) predicate.Counter {
	return predicate.Counter(sql.FieldNotIn(FieldIdentifier, vs...))
}

// IdentifierGT applies the GT predicate on the "identifier" field.
func IdentifierGT(v string) predicate.Counter {
	return predicate.Counter(sql.FieldGT(FieldIdentifier, v))
}

// IdentifierGTE applies the GTE predicate on the "identifier" field.
func IdentifierGTE(v string) predicate.Counter {
	return predicate.Counter(sql.FieldGTE(FieldIdentifier, v))
}

// IdentifierLT applies the LT predicate on the "identifier" field.
func IdentifierLT(v string) predicate.Counter {
	return predicate.Counter(sql.FieldLT(FieldIdentifier, v))
}

// IdentifierLTE applies the LTE predicate on the "identifier" field.
func IdentifierLTE(v string) predicate.Counter {
	return predicate.Counter(sql.FieldLTE(FieldIdentifier, v))
}

// IdentifierContains applies the Contains predicate on the "identifier" field.
func IdentifierContains(v string) predicate.Counter {
	return predicate.Counter(sql.FieldContains(FieldIdentifier, v))
}

// IdentifierHasPrefix applies the HasPrefix predicate on the "identifier" field.
func IdentifierHasPrefix(v string) predicate.Counter {
	return predicate.Counter(sql.FieldHasPrefix(FieldIdentifier, v))
}

// IdentifierHasSuffix applies the HasSuffix predicate on the "identifier" field.
func IdentifierHasSuffix(v string) predicate.Counter {
	return predicate.Counter(sql.FieldHasSuffix(FieldIdentifier, v))
}

// IdentifierIsNil applies the IsNil predicate on the "identifier" field.
func IdentifierIsNil() predicate.Counter {
	return predicate.Counter(sql.FieldIsNull(FieldIdentifier))
}

// IdentifierNotNil applies the NotNil predicate on the "identifier" field.
func IdentifierNotNil() predicate.Counter {
	return predicate.Counter(sql.FieldNotNull(FieldIdentifier))
}

// IdentifierEqualFold applies the EqualFold predicate on the "identifier" field.
func IdentifierEqualFold(v string) predicate.Counter {
	return predicate.Counter(sql.FieldEqualFold(FieldIdentifier, v))
}

// IdentifierContainsFold applies the ContainsFold predicate on the "identifier" field.
func IdentifierContainsFold(v string) predicate.Counter {
	return predicate.Counter(sql.FieldContainsFold(FieldIdentifier, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Counter {
	return predicate.Counter(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Counter {
	return predicate.Counter(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Counter {
	return predicate.Counter(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Counter {
	return predicate.Counter(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Counter {
	return predicate.Counter(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Counter {
	return predicate.Counter(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Counter {
	return predicate.Counter(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Counter {
	return predicate.Counter(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Counter {
	return predicate.Counter(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Counter {
	return predicate.Counter(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Counter {
	return predicate.Counter(sql.FieldHasSuffix(FieldName, v))
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.Counter {
	return predicate.Counter(sql.FieldIsNull(FieldName))
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.Counter {
	return predicate.Counter(sql.FieldNotNull(FieldName))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Counter {
	return predicate.Counter(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Counter {
	return predicate.Counter(sql.FieldContainsFold(FieldName, v))
}

// PrefixEQ applies the EQ predicate on the "prefix" field.
func PrefixEQ(v string) predicate.Counter {
	return predicate.Counter(sql.FieldEQ(FieldPrefix, v))
}

// PrefixNEQ applies the NEQ predicate on the "prefix" field.
func PrefixNEQ(v string) predicate.Counter {
	return predicate.Counter(sql.FieldNEQ(FieldPrefix, v))
}

// PrefixIn applies the In predicate on the "prefix" field.
func PrefixIn(vs ...string) predicate.Counter {
	return predicate.Counter(sql.FieldIn(FieldPrefix, vs...))
}

// PrefixNotIn applies the NotIn predicate on the "prefix" field.
func PrefixNotIn(vs ...string) predicate.Counter {
	return predicate.Counter(sql.FieldNotIn(FieldPrefix, vs...))
}

// PrefixGT applies the GT predicate on the "prefix" field.
func PrefixGT(v string) predicate.Counter {
	return predicate.Counter(sql.FieldGT(FieldPrefix, v))
}

// PrefixGTE applies the GTE predicate on the "prefix" field.
func PrefixGTE(v string) predicate.Counter {
	return predicate.Counter(sql.FieldGTE(FieldPrefix, v))
}

// PrefixLT applies the LT predicate on the "prefix" field.
func PrefixLT(v string) predicate.Counter {
	return predicate.Counter(sql.FieldLT(FieldPrefix, v))
}

// PrefixLTE applies the LTE predicate on the "prefix" field.
func PrefixLTE(v string) predicate.Counter {
	return predicate.Counter(sql.FieldLTE(FieldPrefix, v))
}

// PrefixContains applies the Contains predicate on the "prefix" field.
func PrefixContains(v string) predicate.Counter {
	return predicate.Counter(sql.FieldContains(FieldPrefix, v))
}

// PrefixHasPrefix applies the HasPrefix predicate on the "prefix" field.
func PrefixHasPrefix(v string) predicate.Counter {
	return predicate.Counter(sql.FieldHasPrefix(FieldPrefix, v))
}

// PrefixHasSuffix applies the HasSuffix predicate on the "prefix" field.
func PrefixHasSuffix(v string) predicate.Counter {
	return predicate.Counter(sql.FieldHasSuffix(FieldPrefix, v))
}

// PrefixIsNil applies the IsNil predicate on the "prefix" field.
func PrefixIsNil() predicate.Counter {
	return predicate.Counter(sql.FieldIsNull(FieldPrefix))
}

// PrefixNotNil applies the NotNil predicate on the "prefix" field.
func PrefixNotNil() predicate.Counter {
	return predicate.Counter(sql.FieldNotNull(FieldPrefix))
}

// PrefixEqualFold applies the EqualFold predicate on the "prefix" field.
func PrefixEqualFold(v string) predicate.Counter {
	return predicate.Counter(sql.FieldEqualFold(FieldPrefix, v))
}

// PrefixContainsFold applies the ContainsFold predicate on the "prefix" field.
func PrefixContainsFold(v string) predicate.Counter {
	return predicate.Counter(sql.FieldContainsFold(FieldPrefix, v))
}

// SuffixEQ applies the EQ predicate on the "suffix" field.
func SuffixEQ(v string) predicate.Counter {
	return predicate.Counter(sql.FieldEQ(FieldSuffix, v))
}

// SuffixNEQ applies the NEQ predicate on the "suffix" field.
func SuffixNEQ(v string) predicate.Counter {
	return predicate.Counter(sql.FieldNEQ(FieldSuffix, v))
}

// SuffixIn applies the In predicate on the "suffix" field.
func SuffixIn(vs ...string) predicate.Counter {
	return predicate.Counter(sql.FieldIn(FieldSuffix, vs...))
}

// SuffixNotIn applies the NotIn predicate on the "suffix" field.
func SuffixNotIn(vs ...string) predicate.Counter {
	return predicate.Counter(sql.FieldNotIn(FieldSuffix, vs...))
}

// SuffixGT applies the GT predicate on the "suffix" field.
func SuffixGT(v string) predicate.Counter {
	return predicate.Counter(sql.FieldGT(FieldSuffix, v))
}

// SuffixGTE applies the GTE predicate on the "suffix" field.
func SuffixGTE(v string) predicate.Counter {
	return predicate.Counter(sql.FieldGTE(FieldSuffix, v))
}

// SuffixLT applies the LT predicate on the "suffix" field.
func SuffixLT(v string) predicate.Counter {
	return predicate.Counter(sql.FieldLT(FieldSuffix, v))
}

// SuffixLTE applies the LTE predicate on the "suffix" field.
func SuffixLTE(v string) predicate.Counter {
	return predicate.Counter(sql.FieldLTE(FieldSuffix, v))
}

// SuffixContains applies the Contains predicate on the "suffix" field.
func SuffixContains(v string) predicate.Counter {
	return predicate.Counter(sql.FieldContains(FieldSuffix, v))
}

// SuffixHasPrefix applies the HasPrefix predicate on the "suffix" field.
func SuffixHasPrefix(v string) predicate.Counter {
	return predicate.Counter(sql.FieldHasPrefix(FieldSuffix, v))
}

// SuffixHasSuffix applies the HasSuffix predicate on the "suffix" field.
func SuffixHasSuffix(v string) predicate.Counter {
	return predicate.Counter(sql.FieldHasSuffix(FieldSuffix, v))
}

// SuffixIsNil applies the IsNil predicate on the "suffix" field.
func SuffixIsNil() predicate.Counter {
	return predicate.Counter(sql.FieldIsNull(FieldSuffix))
}

// SuffixNotNil applies the NotNil predicate on the "suffix" field.
func SuffixNotNil() predicate.Counter {
	return predicate.Counter(sql.FieldNotNull(FieldSuffix))
}

// SuffixEqualFold applies the EqualFold predicate on the "suffix" field.
func SuffixEqualFold(v string) predicate.Counter {
	return predicate.Counter(sql.FieldEqualFold(FieldSuffix, v))
}

// SuffixContainsFold applies the ContainsFold predicate on the "suffix" field.
func SuffixContainsFold(v string) predicate.Counter {
	return predicate.Counter(sql.FieldContainsFold(FieldSuffix, v))
}

// StartValueEQ applies the EQ predicate on the "start_value" field.
func StartValueEQ(v int) predicate.Counter {
	return predicate.Counter(sql.FieldEQ(FieldStartValue, v))
}

// StartValueNEQ applies the NEQ predicate on the "start_value" field.
func StartValueNEQ(v int) predicate.Counter {
	return predicate.Counter(sql.FieldNEQ(FieldStartValue, v))
}

// StartValueIn applies the In predicate on the "start_value" field.
func StartValueIn(vs ...int) predicate.Counter {
	return predicate.Counter(sql.FieldIn(FieldStartValue, vs...))
}

// StartValueNotIn applies the NotIn predicate on the "start_value" field.
func StartValueNotIn(vs ...int) predicate.Counter {
	return predicate.Counter(sql.FieldNotIn(FieldStartValue, vs...))
}

// StartValueGT applies the GT predicate on the "start_value" field.
func StartValueGT(v int) predicate.Counter {
	return predicate.Counter(sql.FieldGT(FieldStartValue, v))
}

// StartValueGTE applies the GTE predicate on the "start_value" field.
func StartValueGTE(v int) predicate.Counter {
	return predicate.Counter(sql.FieldGTE(FieldStartValue, v))
}

// StartValueLT applies the LT predicate on the "start_value" field.
func StartValueLT(v int) predicate.Counter {
	return predicate.Counter(sql.FieldLT(FieldStartValue, v))
}

// StartValueLTE applies the LTE predicate on the "start_value" field.
func StartValueLTE(v int) predicate.Counter {
	return predicate.Counter(sql.FieldLTE(FieldStartValue, v))
}

// IncrementStepEQ applies the EQ predicate on the "increment_step" field.
func IncrementStepEQ(v int) predicate.Counter {
	return predicate.Counter(sql.FieldEQ(FieldIncrementStep, v))
}

// IncrementStepNEQ applies the NEQ predicate on the "increment_step" field.
func IncrementStepNEQ(v int) predicate.Counter {
	return predicate.Counter(sql.FieldNEQ(FieldIncrementStep, v))
}

// IncrementStepIn applies the In predicate on the "increment_step" field.
func IncrementStepIn(vs ...int) predicate.Counter {
	return predicate.Counter(sql.FieldIn(FieldIncrementStep, vs...))
}

// IncrementStepNotIn applies the NotIn predicate on the "increment_step" field.
func IncrementStepNotIn(vs ...int) predicate.Counter {
	return predicate.Counter(sql.FieldNotIn(FieldIncrementStep, vs...))
}

// IncrementStepGT applies the GT predicate on the "increment_step" field.
func IncrementStepGT(v int) predicate.Counter {
	return predicate.Counter(sql.FieldGT(FieldIncrementStep, v))
}

// IncrementStepGTE applies the GTE predicate on the "increment_step" field.
func IncrementStepGTE(v int) predicate.Counter {
	return predicate.Counter(sql.FieldGTE(FieldIncrementStep, v))
}

// IncrementStepLT applies the LT predicate on the "increment_step" field.
func IncrementStepLT(v int) predicate.Counter {
	return predicate.Counter(sql.FieldLT(FieldIncrementStep, v))
}

// IncrementStepLTE applies the LTE predicate on the "increment_step" field.
func IncrementStepLTE(v int) predicate.Counter {
	return predicate.Counter(sql.FieldLTE(FieldIncrementStep, v))
}

// DateFormatEQ applies the EQ predicate on the "date_format" field.
func DateFormatEQ(v string) predicate.Counter {
	return predicate.Counter(sql.FieldEQ(FieldDateFormat, v))
}

// DateFormatNEQ applies the NEQ predicate on the "date_format" field.
func DateFormatNEQ(v string) predicate.Counter {
	return predicate.Counter(sql.FieldNEQ(FieldDateFormat, v))
}

// DateFormatIn applies the In predicate on the "date_format" field.
func DateFormatIn(vs ...string) predicate.Counter {
	return predicate.Counter(sql.FieldIn(FieldDateFormat, vs...))
}

// DateFormatNotIn applies the NotIn predicate on the "date_format" field.
func DateFormatNotIn(vs ...string) predicate.Counter {
	return predicate.Counter(sql.FieldNotIn(FieldDateFormat, vs...))
}

// DateFormatGT applies the GT predicate on the "date_format" field.
func DateFormatGT(v string) predicate.Counter {
	return predicate.Counter(sql.FieldGT(FieldDateFormat, v))
}

// DateFormatGTE applies the GTE predicate on the "date_format" field.
func DateFormatGTE(v string) predicate.Counter {
	return predicate.Counter(sql.FieldGTE(FieldDateFormat, v))
}

// DateFormatLT applies the LT predicate on the "date_format" field.
func DateFormatLT(v string) predicate.Counter {
	return predicate.Counter(sql.FieldLT(FieldDateFormat, v))
}

// DateFormatLTE applies the LTE predicate on the "date_format" field.
func DateFormatLTE(v string) predicate.Counter {
	return predicate.Counter(sql.FieldLTE(FieldDateFormat, v))
}

// DateFormatContains applies the Contains predicate on the "date_format" field.
func DateFormatContains(v string) predicate.Counter {
	return predicate.Counter(sql.FieldContains(FieldDateFormat, v))
}

// DateFormatHasPrefix applies the HasPrefix predicate on the "date_format" field.
func DateFormatHasPrefix(v string) predicate.Counter {
	return predicate.Counter(sql.FieldHasPrefix(FieldDateFormat, v))
}

// DateFormatHasSuffix applies the HasSuffix predicate on the "date_format" field.
func DateFormatHasSuffix(v string) predicate.Counter {
	return predicate.Counter(sql.FieldHasSuffix(FieldDateFormat, v))
}

// DateFormatIsNil applies the IsNil predicate on the "date_format" field.
func DateFormatIsNil() predicate.Counter {
	return predicate.Counter(sql.FieldIsNull(FieldDateFormat))
}

// DateFormatNotNil applies the NotNil predicate on the "date_format" field.
func DateFormatNotNil() predicate.Counter {
	return predicate.Counter(sql.FieldNotNull(FieldDateFormat))
}

// DateFormatEqualFold applies the EqualFold predicate on the "date_format" field.
func DateFormatEqualFold(v string) predicate.Counter {
	return predicate.Counter(sql.FieldEqualFold(FieldDateFormat, v))
}

// DateFormatContainsFold applies the ContainsFold predicate on the "date_format" field.
func DateFormatContainsFold(v string) predicate.Counter {
	return predicate.Counter(sql.FieldContainsFold(FieldDateFormat, v))
}

// CurrentValueEQ applies the EQ predicate on the "current_value" field.
func CurrentValueEQ(v int) predicate.Counter {
	return predicate.Counter(sql.FieldEQ(FieldCurrentValue, v))
}

// CurrentValueNEQ applies the NEQ predicate on the "current_value" field.
func CurrentValueNEQ(v int) predicate.Counter {
	return predicate.Counter(sql.FieldNEQ(FieldCurrentValue, v))
}

// CurrentValueIn applies the In predicate on the "current_value" field.
func CurrentValueIn(vs ...int) predicate.Counter {
	return predicate.Counter(sql.FieldIn(FieldCurrentValue, vs...))
}

// CurrentValueNotIn applies the NotIn predicate on the "current_value" field.
func CurrentValueNotIn(vs ...int) predicate.Counter {
	return predicate.Counter(sql.FieldNotIn(FieldCurrentValue, vs...))
}

// CurrentValueGT applies the GT predicate on the "current_value" field.
func CurrentValueGT(v int) predicate.Counter {
	return predicate.Counter(sql.FieldGT(FieldCurrentValue, v))
}

// CurrentValueGTE applies the GTE predicate on the "current_value" field.
func CurrentValueGTE(v int) predicate.Counter {
	return predicate.Counter(sql.FieldGTE(FieldCurrentValue, v))
}

// CurrentValueLT applies the LT predicate on the "current_value" field.
func CurrentValueLT(v int) predicate.Counter {
	return predicate.Counter(sql.FieldLT(FieldCurrentValue, v))
}

// CurrentValueLTE applies the LTE predicate on the "current_value" field.
func CurrentValueLTE(v int) predicate.Counter {
	return predicate.Counter(sql.FieldLTE(FieldCurrentValue, v))
}

// DisabledEQ applies the EQ predicate on the "disabled" field.
func DisabledEQ(v bool) predicate.Counter {
	return predicate.Counter(sql.FieldEQ(FieldDisabled, v))
}

// DisabledNEQ applies the NEQ predicate on the "disabled" field.
func DisabledNEQ(v bool) predicate.Counter {
	return predicate.Counter(sql.FieldNEQ(FieldDisabled, v))
}

// DisabledIsNil applies the IsNil predicate on the "disabled" field.
func DisabledIsNil() predicate.Counter {
	return predicate.Counter(sql.FieldIsNull(FieldDisabled))
}

// DisabledNotNil applies the NotNil predicate on the "disabled" field.
func DisabledNotNil() predicate.Counter {
	return predicate.Counter(sql.FieldNotNull(FieldDisabled))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Counter {
	return predicate.Counter(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Counter {
	return predicate.Counter(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Counter {
	return predicate.Counter(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Counter {
	return predicate.Counter(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Counter {
	return predicate.Counter(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Counter {
	return predicate.Counter(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Counter {
	return predicate.Counter(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Counter {
	return predicate.Counter(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Counter {
	return predicate.Counter(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Counter {
	return predicate.Counter(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Counter {
	return predicate.Counter(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Counter {
	return predicate.Counter(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Counter {
	return predicate.Counter(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Counter {
	return predicate.Counter(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Counter {
	return predicate.Counter(sql.FieldContainsFold(FieldDescription, v))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v string) predicate.Counter {
	return predicate.Counter(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v string) predicate.Counter {
	return predicate.Counter(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...string) predicate.Counter {
	return predicate.Counter(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...string) predicate.Counter {
	return predicate.Counter(sql.FieldNotIn(FieldTenantID, vs...))
}

// TenantIDGT applies the GT predicate on the "tenant_id" field.
func TenantIDGT(v string) predicate.Counter {
	return predicate.Counter(sql.FieldGT(FieldTenantID, v))
}

// TenantIDGTE applies the GTE predicate on the "tenant_id" field.
func TenantIDGTE(v string) predicate.Counter {
	return predicate.Counter(sql.FieldGTE(FieldTenantID, v))
}

// TenantIDLT applies the LT predicate on the "tenant_id" field.
func TenantIDLT(v string) predicate.Counter {
	return predicate.Counter(sql.FieldLT(FieldTenantID, v))
}

// TenantIDLTE applies the LTE predicate on the "tenant_id" field.
func TenantIDLTE(v string) predicate.Counter {
	return predicate.Counter(sql.FieldLTE(FieldTenantID, v))
}

// TenantIDContains applies the Contains predicate on the "tenant_id" field.
func TenantIDContains(v string) predicate.Counter {
	return predicate.Counter(sql.FieldContains(FieldTenantID, v))
}

// TenantIDHasPrefix applies the HasPrefix predicate on the "tenant_id" field.
func TenantIDHasPrefix(v string) predicate.Counter {
	return predicate.Counter(sql.FieldHasPrefix(FieldTenantID, v))
}

// TenantIDHasSuffix applies the HasSuffix predicate on the "tenant_id" field.
func TenantIDHasSuffix(v string) predicate.Counter {
	return predicate.Counter(sql.FieldHasSuffix(FieldTenantID, v))
}

// TenantIDIsNil applies the IsNil predicate on the "tenant_id" field.
func TenantIDIsNil() predicate.Counter {
	return predicate.Counter(sql.FieldIsNull(FieldTenantID))
}

// TenantIDNotNil applies the NotNil predicate on the "tenant_id" field.
func TenantIDNotNil() predicate.Counter {
	return predicate.Counter(sql.FieldNotNull(FieldTenantID))
}

// TenantIDEqualFold applies the EqualFold predicate on the "tenant_id" field.
func TenantIDEqualFold(v string) predicate.Counter {
	return predicate.Counter(sql.FieldEqualFold(FieldTenantID, v))
}

// TenantIDContainsFold applies the ContainsFold predicate on the "tenant_id" field.
func TenantIDContainsFold(v string) predicate.Counter {
	return predicate.Counter(sql.FieldContainsFold(FieldTenantID, v))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v string) predicate.Counter {
	return predicate.Counter(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v string) predicate.Counter {
	return predicate.Counter(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...string) predicate.Counter {
	return predicate.Counter(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...string) predicate.Counter {
	return predicate.Counter(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v string) predicate.Counter {
	return predicate.Counter(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v string) predicate.Counter {
	return predicate.Counter(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v string) predicate.Counter {
	return predicate.Counter(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v string) predicate.Counter {
	return predicate.Counter(sql.FieldLTE(FieldCreatedBy, v))
}

// CreatedByContains applies the Contains predicate on the "created_by" field.
func CreatedByContains(v string) predicate.Counter {
	return predicate.Counter(sql.FieldContains(FieldCreatedBy, v))
}

// CreatedByHasPrefix applies the HasPrefix predicate on the "created_by" field.
func CreatedByHasPrefix(v string) predicate.Counter {
	return predicate.Counter(sql.FieldHasPrefix(FieldCreatedBy, v))
}

// CreatedByHasSuffix applies the HasSuffix predicate on the "created_by" field.
func CreatedByHasSuffix(v string) predicate.Counter {
	return predicate.Counter(sql.FieldHasSuffix(FieldCreatedBy, v))
}

// CreatedByIsNil applies the IsNil predicate on the "created_by" field.
func CreatedByIsNil() predicate.Counter {
	return predicate.Counter(sql.FieldIsNull(FieldCreatedBy))
}

// CreatedByNotNil applies the NotNil predicate on the "created_by" field.
func CreatedByNotNil() predicate.Counter {
	return predicate.Counter(sql.FieldNotNull(FieldCreatedBy))
}

// CreatedByEqualFold applies the EqualFold predicate on the "created_by" field.
func CreatedByEqualFold(v string) predicate.Counter {
	return predicate.Counter(sql.FieldEqualFold(FieldCreatedBy, v))
}

// CreatedByContainsFold applies the ContainsFold predicate on the "created_by" field.
func CreatedByContainsFold(v string) predicate.Counter {
	return predicate.Counter(sql.FieldContainsFold(FieldCreatedBy, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v string) predicate.Counter {
	return predicate.Counter(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v string) predicate.Counter {
	return predicate.Counter(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...string) predicate.Counter {
	return predicate.Counter(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...string) predicate.Counter {
	return predicate.Counter(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v string) predicate.Counter {
	return predicate.Counter(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v string) predicate.Counter {
	return predicate.Counter(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v string) predicate.Counter {
	return predicate.Counter(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v string) predicate.Counter {
	return predicate.Counter(sql.FieldLTE(FieldUpdatedBy, v))
}

// UpdatedByContains applies the Contains predicate on the "updated_by" field.
func UpdatedByContains(v string) predicate.Counter {
	return predicate.Counter(sql.FieldContains(FieldUpdatedBy, v))
}

// UpdatedByHasPrefix applies the HasPrefix predicate on the "updated_by" field.
func UpdatedByHasPrefix(v string) predicate.Counter {
	return predicate.Counter(sql.FieldHasPrefix(FieldUpdatedBy, v))
}

// UpdatedByHasSuffix applies the HasSuffix predicate on the "updated_by" field.
func UpdatedByHasSuffix(v string) predicate.Counter {
	return predicate.Counter(sql.FieldHasSuffix(FieldUpdatedBy, v))
}

// UpdatedByIsNil applies the IsNil predicate on the "updated_by" field.
func UpdatedByIsNil() predicate.Counter {
	return predicate.Counter(sql.FieldIsNull(FieldUpdatedBy))
}

// UpdatedByNotNil applies the NotNil predicate on the "updated_by" field.
func UpdatedByNotNil() predicate.Counter {
	return predicate.Counter(sql.FieldNotNull(FieldUpdatedBy))
}

// UpdatedByEqualFold applies the EqualFold predicate on the "updated_by" field.
func UpdatedByEqualFold(v string) predicate.Counter {
	return predicate.Counter(sql.FieldEqualFold(FieldUpdatedBy, v))
}

// UpdatedByContainsFold applies the ContainsFold predicate on the "updated_by" field.
func UpdatedByContainsFold(v string) predicate.Counter {
	return predicate.Counter(sql.FieldContainsFold(FieldUpdatedBy, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v int64) predicate.Counter {
	return predicate.Counter(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v int64) predicate.Counter {
	return predicate.Counter(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...int64) predicate.Counter {
	return predicate.Counter(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...int64) predicate.Counter {
	return predicate.Counter(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v int64) predicate.Counter {
	return predicate.Counter(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v int64) predicate.Counter {
	return predicate.Counter(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v int64) predicate.Counter {
	return predicate.Counter(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v int64) predicate.Counter {
	return predicate.Counter(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.Counter {
	return predicate.Counter(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.Counter {
	return predicate.Counter(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v int64) predicate.Counter {
	return predicate.Counter(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v int64) predicate.Counter {
	return predicate.Counter(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...int64) predicate.Counter {
	return predicate.Counter(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...int64) predicate.Counter {
	return predicate.Counter(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v int64) predicate.Counter {
	return predicate.Counter(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v int64) predicate.Counter {
	return predicate.Counter(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v int64) predicate.Counter {
	return predicate.Counter(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v int64) predicate.Counter {
	return predicate.Counter(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.Counter {
	return predicate.Counter(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.Counter {
	return predicate.Counter(sql.FieldNotNull(FieldUpdatedAt))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Counter) predicate.Counter {
	return predicate.Counter(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Counter) predicate.Counter {
	return predicate.Counter(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Counter) predicate.Counter {
	return predicate.Counter(sql.NotPredicates(p))
}
