// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/counter/data/ent/counter"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CounterCreate is the builder for creating a Counter entity.
type CounterCreate struct {
	config
	mutation *CounterMutation
	hooks    []Hook
}

// SetIdentifier sets the "identifier" field.
func (cc *CounterCreate) SetIdentifier(s string) *CounterCreate {
	cc.mutation.SetIdentifier(s)
	return cc
}

// SetNillableIdentifier sets the "identifier" field if the given value is not nil.
func (cc *CounterCreate) SetNillableIdentifier(s *string) *CounterCreate {
	if s != nil {
		cc.SetIdentifier(*s)
	}
	return cc
}

// SetName sets the "name" field.
func (cc *CounterCreate) SetName(s string) *CounterCreate {
	cc.mutation.SetName(s)
	return cc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cc *CounterCreate) SetNillableName(s *string) *CounterCreate {
	if s != nil {
		cc.SetName(*s)
	}
	return cc
}

// SetPrefix sets the "prefix" field.
func (cc *CounterCreate) SetPrefix(s string) *CounterCreate {
	cc.mutation.SetPrefix(s)
	return cc
}

// SetNillablePrefix sets the "prefix" field if the given value is not nil.
func (cc *CounterCreate) SetNillablePrefix(s *string) *CounterCreate {
	if s != nil {
		cc.SetPrefix(*s)
	}
	return cc
}

// SetSuffix sets the "suffix" field.
func (cc *CounterCreate) SetSuffix(s string) *CounterCreate {
	cc.mutation.SetSuffix(s)
	return cc
}

// SetNillableSuffix sets the "suffix" field if the given value is not nil.
func (cc *CounterCreate) SetNillableSuffix(s *string) *CounterCreate {
	if s != nil {
		cc.SetSuffix(*s)
	}
	return cc
}

// SetStartValue sets the "start_value" field.
func (cc *CounterCreate) SetStartValue(i int) *CounterCreate {
	cc.mutation.SetStartValue(i)
	return cc
}

// SetNillableStartValue sets the "start_value" field if the given value is not nil.
func (cc *CounterCreate) SetNillableStartValue(i *int) *CounterCreate {
	if i != nil {
		cc.SetStartValue(*i)
	}
	return cc
}

// SetIncrementStep sets the "increment_step" field.
func (cc *CounterCreate) SetIncrementStep(i int) *CounterCreate {
	cc.mutation.SetIncrementStep(i)
	return cc
}

// SetNillableIncrementStep sets the "increment_step" field if the given value is not nil.
func (cc *CounterCreate) SetNillableIncrementStep(i *int) *CounterCreate {
	if i != nil {
		cc.SetIncrementStep(*i)
	}
	return cc
}

// SetDateFormat sets the "date_format" field.
func (cc *CounterCreate) SetDateFormat(s string) *CounterCreate {
	cc.mutation.SetDateFormat(s)
	return cc
}

// SetNillableDateFormat sets the "date_format" field if the given value is not nil.
func (cc *CounterCreate) SetNillableDateFormat(s *string) *CounterCreate {
	if s != nil {
		cc.SetDateFormat(*s)
	}
	return cc
}

// SetCurrentValue sets the "current_value" field.
func (cc *CounterCreate) SetCurrentValue(i int) *CounterCreate {
	cc.mutation.SetCurrentValue(i)
	return cc
}

// SetNillableCurrentValue sets the "current_value" field if the given value is not nil.
func (cc *CounterCreate) SetNillableCurrentValue(i *int) *CounterCreate {
	if i != nil {
		cc.SetCurrentValue(*i)
	}
	return cc
}

// SetDisabled sets the "disabled" field.
func (cc *CounterCreate) SetDisabled(b bool) *CounterCreate {
	cc.mutation.SetDisabled(b)
	return cc
}

// SetNillableDisabled sets the "disabled" field if the given value is not nil.
func (cc *CounterCreate) SetNillableDisabled(b *bool) *CounterCreate {
	if b != nil {
		cc.SetDisabled(*b)
	}
	return cc
}

// SetDescription sets the "description" field.
func (cc *CounterCreate) SetDescription(s string) *CounterCreate {
	cc.mutation.SetDescription(s)
	return cc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cc *CounterCreate) SetNillableDescription(s *string) *CounterCreate {
	if s != nil {
		cc.SetDescription(*s)
	}
	return cc
}

// SetSpaceID sets the "space_id" field.
func (cc *CounterCreate) SetSpaceID(s string) *CounterCreate {
	cc.mutation.SetSpaceID(s)
	return cc
}

// SetNillableSpaceID sets the "space_id" field if the given value is not nil.
func (cc *CounterCreate) SetNillableSpaceID(s *string) *CounterCreate {
	if s != nil {
		cc.SetSpaceID(*s)
	}
	return cc
}

// SetCreatedBy sets the "created_by" field.
func (cc *CounterCreate) SetCreatedBy(s string) *CounterCreate {
	cc.mutation.SetCreatedBy(s)
	return cc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (cc *CounterCreate) SetNillableCreatedBy(s *string) *CounterCreate {
	if s != nil {
		cc.SetCreatedBy(*s)
	}
	return cc
}

// SetUpdatedBy sets the "updated_by" field.
func (cc *CounterCreate) SetUpdatedBy(s string) *CounterCreate {
	cc.mutation.SetUpdatedBy(s)
	return cc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (cc *CounterCreate) SetNillableUpdatedBy(s *string) *CounterCreate {
	if s != nil {
		cc.SetUpdatedBy(*s)
	}
	return cc
}

// SetCreatedAt sets the "created_at" field.
func (cc *CounterCreate) SetCreatedAt(i int64) *CounterCreate {
	cc.mutation.SetCreatedAt(i)
	return cc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cc *CounterCreate) SetNillableCreatedAt(i *int64) *CounterCreate {
	if i != nil {
		cc.SetCreatedAt(*i)
	}
	return cc
}

// SetUpdatedAt sets the "updated_at" field.
func (cc *CounterCreate) SetUpdatedAt(i int64) *CounterCreate {
	cc.mutation.SetUpdatedAt(i)
	return cc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cc *CounterCreate) SetNillableUpdatedAt(i *int64) *CounterCreate {
	if i != nil {
		cc.SetUpdatedAt(*i)
	}
	return cc
}

// SetID sets the "id" field.
func (cc *CounterCreate) SetID(s string) *CounterCreate {
	cc.mutation.SetID(s)
	return cc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (cc *CounterCreate) SetNillableID(s *string) *CounterCreate {
	if s != nil {
		cc.SetID(*s)
	}
	return cc
}

// Mutation returns the CounterMutation object of the builder.
func (cc *CounterCreate) Mutation() *CounterMutation {
	return cc.mutation
}

// Save creates the Counter in the database.
func (cc *CounterCreate) Save(ctx context.Context) (*Counter, error) {
	cc.defaults()
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CounterCreate) SaveX(ctx context.Context) *Counter {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CounterCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CounterCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *CounterCreate) defaults() {
	if _, ok := cc.mutation.StartValue(); !ok {
		v := counter.DefaultStartValue
		cc.mutation.SetStartValue(v)
	}
	if _, ok := cc.mutation.IncrementStep(); !ok {
		v := counter.DefaultIncrementStep
		cc.mutation.SetIncrementStep(v)
	}
	if _, ok := cc.mutation.DateFormat(); !ok {
		v := counter.DefaultDateFormat
		cc.mutation.SetDateFormat(v)
	}
	if _, ok := cc.mutation.CurrentValue(); !ok {
		v := counter.DefaultCurrentValue
		cc.mutation.SetCurrentValue(v)
	}
	if _, ok := cc.mutation.Disabled(); !ok {
		v := counter.DefaultDisabled
		cc.mutation.SetDisabled(v)
	}
	if _, ok := cc.mutation.CreatedAt(); !ok {
		v := counter.DefaultCreatedAt()
		cc.mutation.SetCreatedAt(v)
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		v := counter.DefaultUpdatedAt()
		cc.mutation.SetUpdatedAt(v)
	}
	if _, ok := cc.mutation.ID(); !ok {
		v := counter.DefaultID()
		cc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CounterCreate) check() error {
	if v, ok := cc.mutation.Identifier(); ok {
		if err := counter.IdentifierValidator(v); err != nil {
			return &ValidationError{Name: "identifier", err: fmt.Errorf(`ent: validator failed for field "Counter.identifier": %w`, err)}
		}
	}
	if _, ok := cc.mutation.StartValue(); !ok {
		return &ValidationError{Name: "start_value", err: errors.New(`ent: missing required field "Counter.start_value"`)}
	}
	if _, ok := cc.mutation.IncrementStep(); !ok {
		return &ValidationError{Name: "increment_step", err: errors.New(`ent: missing required field "Counter.increment_step"`)}
	}
	if _, ok := cc.mutation.CurrentValue(); !ok {
		return &ValidationError{Name: "current_value", err: errors.New(`ent: missing required field "Counter.current_value"`)}
	}
	if v, ok := cc.mutation.ID(); ok {
		if err := counter.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Counter.id": %w`, err)}
		}
	}
	return nil
}

func (cc *CounterCreate) sqlSave(ctx context.Context) (*Counter, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Counter.ID type: %T", _spec.ID.Value)
		}
	}
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *CounterCreate) createSpec() (*Counter, *sqlgraph.CreateSpec) {
	var (
		_node = &Counter{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(counter.Table, sqlgraph.NewFieldSpec(counter.FieldID, field.TypeString))
	)
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cc.mutation.Identifier(); ok {
		_spec.SetField(counter.FieldIdentifier, field.TypeString, value)
		_node.Identifier = value
	}
	if value, ok := cc.mutation.Name(); ok {
		_spec.SetField(counter.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := cc.mutation.Prefix(); ok {
		_spec.SetField(counter.FieldPrefix, field.TypeString, value)
		_node.Prefix = value
	}
	if value, ok := cc.mutation.Suffix(); ok {
		_spec.SetField(counter.FieldSuffix, field.TypeString, value)
		_node.Suffix = value
	}
	if value, ok := cc.mutation.StartValue(); ok {
		_spec.SetField(counter.FieldStartValue, field.TypeInt, value)
		_node.StartValue = value
	}
	if value, ok := cc.mutation.IncrementStep(); ok {
		_spec.SetField(counter.FieldIncrementStep, field.TypeInt, value)
		_node.IncrementStep = value
	}
	if value, ok := cc.mutation.DateFormat(); ok {
		_spec.SetField(counter.FieldDateFormat, field.TypeString, value)
		_node.DateFormat = value
	}
	if value, ok := cc.mutation.CurrentValue(); ok {
		_spec.SetField(counter.FieldCurrentValue, field.TypeInt, value)
		_node.CurrentValue = value
	}
	if value, ok := cc.mutation.Disabled(); ok {
		_spec.SetField(counter.FieldDisabled, field.TypeBool, value)
		_node.Disabled = value
	}
	if value, ok := cc.mutation.Description(); ok {
		_spec.SetField(counter.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := cc.mutation.SpaceID(); ok {
		_spec.SetField(counter.FieldSpaceID, field.TypeString, value)
		_node.SpaceID = value
	}
	if value, ok := cc.mutation.CreatedBy(); ok {
		_spec.SetField(counter.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := cc.mutation.UpdatedBy(); ok {
		_spec.SetField(counter.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := cc.mutation.CreatedAt(); ok {
		_spec.SetField(counter.FieldCreatedAt, field.TypeInt64, value)
		_node.CreatedAt = value
	}
	if value, ok := cc.mutation.UpdatedAt(); ok {
		_spec.SetField(counter.FieldUpdatedAt, field.TypeInt64, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// CounterCreateBulk is the builder for creating many Counter entities in bulk.
type CounterCreateBulk struct {
	config
	err      error
	builders []*CounterCreate
}

// Save creates the Counter entities in the database.
func (ccb *CounterCreateBulk) Save(ctx context.Context) ([]*Counter, error) {
	if ccb.err != nil {
		return nil, ccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Counter, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CounterMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CounterCreateBulk) SaveX(ctx context.Context) []*Counter {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CounterCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CounterCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}
