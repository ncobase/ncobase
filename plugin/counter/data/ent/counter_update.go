// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/counter/data/ent/counter"
	"ncobase/counter/data/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CounterUpdate is the builder for updating Counter entities.
type CounterUpdate struct {
	config
	hooks    []Hook
	mutation *CounterMutation
}

// Where appends a list predicates to the CounterUpdate builder.
func (cu *CounterUpdate) Where(ps ...predicate.Counter) *CounterUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetIdentifier sets the "identifier" field.
func (cu *CounterUpdate) SetIdentifier(s string) *CounterUpdate {
	cu.mutation.SetIdentifier(s)
	return cu
}

// SetNillableIdentifier sets the "identifier" field if the given value is not nil.
func (cu *CounterUpdate) SetNillableIdentifier(s *string) *CounterUpdate {
	if s != nil {
		cu.SetIdentifier(*s)
	}
	return cu
}

// ClearIdentifier clears the value of the "identifier" field.
func (cu *CounterUpdate) ClearIdentifier() *CounterUpdate {
	cu.mutation.ClearIdentifier()
	return cu
}

// SetName sets the "name" field.
func (cu *CounterUpdate) SetName(s string) *CounterUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cu *CounterUpdate) SetNillableName(s *string) *CounterUpdate {
	if s != nil {
		cu.SetName(*s)
	}
	return cu
}

// ClearName clears the value of the "name" field.
func (cu *CounterUpdate) ClearName() *CounterUpdate {
	cu.mutation.ClearName()
	return cu
}

// SetPrefix sets the "prefix" field.
func (cu *CounterUpdate) SetPrefix(s string) *CounterUpdate {
	cu.mutation.SetPrefix(s)
	return cu
}

// SetNillablePrefix sets the "prefix" field if the given value is not nil.
func (cu *CounterUpdate) SetNillablePrefix(s *string) *CounterUpdate {
	if s != nil {
		cu.SetPrefix(*s)
	}
	return cu
}

// ClearPrefix clears the value of the "prefix" field.
func (cu *CounterUpdate) ClearPrefix() *CounterUpdate {
	cu.mutation.ClearPrefix()
	return cu
}

// SetSuffix sets the "suffix" field.
func (cu *CounterUpdate) SetSuffix(s string) *CounterUpdate {
	cu.mutation.SetSuffix(s)
	return cu
}

// SetNillableSuffix sets the "suffix" field if the given value is not nil.
func (cu *CounterUpdate) SetNillableSuffix(s *string) *CounterUpdate {
	if s != nil {
		cu.SetSuffix(*s)
	}
	return cu
}

// ClearSuffix clears the value of the "suffix" field.
func (cu *CounterUpdate) ClearSuffix() *CounterUpdate {
	cu.mutation.ClearSuffix()
	return cu
}

// SetStartValue sets the "start_value" field.
func (cu *CounterUpdate) SetStartValue(i int) *CounterUpdate {
	cu.mutation.ResetStartValue()
	cu.mutation.SetStartValue(i)
	return cu
}

// SetNillableStartValue sets the "start_value" field if the given value is not nil.
func (cu *CounterUpdate) SetNillableStartValue(i *int) *CounterUpdate {
	if i != nil {
		cu.SetStartValue(*i)
	}
	return cu
}

// AddStartValue adds i to the "start_value" field.
func (cu *CounterUpdate) AddStartValue(i int) *CounterUpdate {
	cu.mutation.AddStartValue(i)
	return cu
}

// SetIncrementStep sets the "increment_step" field.
func (cu *CounterUpdate) SetIncrementStep(i int) *CounterUpdate {
	cu.mutation.ResetIncrementStep()
	cu.mutation.SetIncrementStep(i)
	return cu
}

// SetNillableIncrementStep sets the "increment_step" field if the given value is not nil.
func (cu *CounterUpdate) SetNillableIncrementStep(i *int) *CounterUpdate {
	if i != nil {
		cu.SetIncrementStep(*i)
	}
	return cu
}

// AddIncrementStep adds i to the "increment_step" field.
func (cu *CounterUpdate) AddIncrementStep(i int) *CounterUpdate {
	cu.mutation.AddIncrementStep(i)
	return cu
}

// SetDateFormat sets the "date_format" field.
func (cu *CounterUpdate) SetDateFormat(s string) *CounterUpdate {
	cu.mutation.SetDateFormat(s)
	return cu
}

// SetNillableDateFormat sets the "date_format" field if the given value is not nil.
func (cu *CounterUpdate) SetNillableDateFormat(s *string) *CounterUpdate {
	if s != nil {
		cu.SetDateFormat(*s)
	}
	return cu
}

// ClearDateFormat clears the value of the "date_format" field.
func (cu *CounterUpdate) ClearDateFormat() *CounterUpdate {
	cu.mutation.ClearDateFormat()
	return cu
}

// SetCurrentValue sets the "current_value" field.
func (cu *CounterUpdate) SetCurrentValue(i int) *CounterUpdate {
	cu.mutation.ResetCurrentValue()
	cu.mutation.SetCurrentValue(i)
	return cu
}

// SetNillableCurrentValue sets the "current_value" field if the given value is not nil.
func (cu *CounterUpdate) SetNillableCurrentValue(i *int) *CounterUpdate {
	if i != nil {
		cu.SetCurrentValue(*i)
	}
	return cu
}

// AddCurrentValue adds i to the "current_value" field.
func (cu *CounterUpdate) AddCurrentValue(i int) *CounterUpdate {
	cu.mutation.AddCurrentValue(i)
	return cu
}

// SetDisabled sets the "disabled" field.
func (cu *CounterUpdate) SetDisabled(b bool) *CounterUpdate {
	cu.mutation.SetDisabled(b)
	return cu
}

// SetNillableDisabled sets the "disabled" field if the given value is not nil.
func (cu *CounterUpdate) SetNillableDisabled(b *bool) *CounterUpdate {
	if b != nil {
		cu.SetDisabled(*b)
	}
	return cu
}

// ClearDisabled clears the value of the "disabled" field.
func (cu *CounterUpdate) ClearDisabled() *CounterUpdate {
	cu.mutation.ClearDisabled()
	return cu
}

// SetDescription sets the "description" field.
func (cu *CounterUpdate) SetDescription(s string) *CounterUpdate {
	cu.mutation.SetDescription(s)
	return cu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cu *CounterUpdate) SetNillableDescription(s *string) *CounterUpdate {
	if s != nil {
		cu.SetDescription(*s)
	}
	return cu
}

// ClearDescription clears the value of the "description" field.
func (cu *CounterUpdate) ClearDescription() *CounterUpdate {
	cu.mutation.ClearDescription()
	return cu
}

// SetSpaceID sets the "space_id" field.
func (cu *CounterUpdate) SetSpaceID(s string) *CounterUpdate {
	cu.mutation.SetSpaceID(s)
	return cu
}

// SetNillableSpaceID sets the "space_id" field if the given value is not nil.
func (cu *CounterUpdate) SetNillableSpaceID(s *string) *CounterUpdate {
	if s != nil {
		cu.SetSpaceID(*s)
	}
	return cu
}

// ClearSpaceID clears the value of the "space_id" field.
func (cu *CounterUpdate) ClearSpaceID() *CounterUpdate {
	cu.mutation.ClearSpaceID()
	return cu
}

// SetCreatedBy sets the "created_by" field.
func (cu *CounterUpdate) SetCreatedBy(s string) *CounterUpdate {
	cu.mutation.SetCreatedBy(s)
	return cu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (cu *CounterUpdate) SetNillableCreatedBy(s *string) *CounterUpdate {
	if s != nil {
		cu.SetCreatedBy(*s)
	}
	return cu
}

// ClearCreatedBy clears the value of the "created_by" field.
func (cu *CounterUpdate) ClearCreatedBy() *CounterUpdate {
	cu.mutation.ClearCreatedBy()
	return cu
}

// SetUpdatedBy sets the "updated_by" field.
func (cu *CounterUpdate) SetUpdatedBy(s string) *CounterUpdate {
	cu.mutation.SetUpdatedBy(s)
	return cu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (cu *CounterUpdate) SetNillableUpdatedBy(s *string) *CounterUpdate {
	if s != nil {
		cu.SetUpdatedBy(*s)
	}
	return cu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (cu *CounterUpdate) ClearUpdatedBy() *CounterUpdate {
	cu.mutation.ClearUpdatedBy()
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *CounterUpdate) SetUpdatedAt(i int64) *CounterUpdate {
	cu.mutation.ResetUpdatedAt()
	cu.mutation.SetUpdatedAt(i)
	return cu
}

// AddUpdatedAt adds i to the "updated_at" field.
func (cu *CounterUpdate) AddUpdatedAt(i int64) *CounterUpdate {
	cu.mutation.AddUpdatedAt(i)
	return cu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (cu *CounterUpdate) ClearUpdatedAt() *CounterUpdate {
	cu.mutation.ClearUpdatedAt()
	return cu
}

// Mutation returns the CounterMutation object of the builder.
func (cu *CounterUpdate) Mutation() *CounterMutation {
	return cu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CounterUpdate) Save(ctx context.Context) (int, error) {
	cu.defaults()
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CounterUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CounterUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CounterUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *CounterUpdate) defaults() {
	if _, ok := cu.mutation.UpdatedAt(); !ok && !cu.mutation.UpdatedAtCleared() {
		v := counter.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CounterUpdate) check() error {
	if v, ok := cu.mutation.Identifier(); ok {
		if err := counter.IdentifierValidator(v); err != nil {
			return &ValidationError{Name: "identifier", err: fmt.Errorf(`ent: validator failed for field "Counter.identifier": %w`, err)}
		}
	}
	return nil
}

func (cu *CounterUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(counter.Table, counter.Columns, sqlgraph.NewFieldSpec(counter.FieldID, field.TypeString))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Identifier(); ok {
		_spec.SetField(counter.FieldIdentifier, field.TypeString, value)
	}
	if cu.mutation.IdentifierCleared() {
		_spec.ClearField(counter.FieldIdentifier, field.TypeString)
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.SetField(counter.FieldName, field.TypeString, value)
	}
	if cu.mutation.NameCleared() {
		_spec.ClearField(counter.FieldName, field.TypeString)
	}
	if value, ok := cu.mutation.Prefix(); ok {
		_spec.SetField(counter.FieldPrefix, field.TypeString, value)
	}
	if cu.mutation.PrefixCleared() {
		_spec.ClearField(counter.FieldPrefix, field.TypeString)
	}
	if value, ok := cu.mutation.Suffix(); ok {
		_spec.SetField(counter.FieldSuffix, field.TypeString, value)
	}
	if cu.mutation.SuffixCleared() {
		_spec.ClearField(counter.FieldSuffix, field.TypeString)
	}
	if value, ok := cu.mutation.StartValue(); ok {
		_spec.SetField(counter.FieldStartValue, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedStartValue(); ok {
		_spec.AddField(counter.FieldStartValue, field.TypeInt, value)
	}
	if value, ok := cu.mutation.IncrementStep(); ok {
		_spec.SetField(counter.FieldIncrementStep, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedIncrementStep(); ok {
		_spec.AddField(counter.FieldIncrementStep, field.TypeInt, value)
	}
	if value, ok := cu.mutation.DateFormat(); ok {
		_spec.SetField(counter.FieldDateFormat, field.TypeString, value)
	}
	if cu.mutation.DateFormatCleared() {
		_spec.ClearField(counter.FieldDateFormat, field.TypeString)
	}
	if value, ok := cu.mutation.CurrentValue(); ok {
		_spec.SetField(counter.FieldCurrentValue, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedCurrentValue(); ok {
		_spec.AddField(counter.FieldCurrentValue, field.TypeInt, value)
	}
	if value, ok := cu.mutation.Disabled(); ok {
		_spec.SetField(counter.FieldDisabled, field.TypeBool, value)
	}
	if cu.mutation.DisabledCleared() {
		_spec.ClearField(counter.FieldDisabled, field.TypeBool)
	}
	if value, ok := cu.mutation.Description(); ok {
		_spec.SetField(counter.FieldDescription, field.TypeString, value)
	}
	if cu.mutation.DescriptionCleared() {
		_spec.ClearField(counter.FieldDescription, field.TypeString)
	}
	if value, ok := cu.mutation.SpaceID(); ok {
		_spec.SetField(counter.FieldSpaceID, field.TypeString, value)
	}
	if cu.mutation.SpaceIDCleared() {
		_spec.ClearField(counter.FieldSpaceID, field.TypeString)
	}
	if value, ok := cu.mutation.CreatedBy(); ok {
		_spec.SetField(counter.FieldCreatedBy, field.TypeString, value)
	}
	if cu.mutation.CreatedByCleared() {
		_spec.ClearField(counter.FieldCreatedBy, field.TypeString)
	}
	if value, ok := cu.mutation.UpdatedBy(); ok {
		_spec.SetField(counter.FieldUpdatedBy, field.TypeString, value)
	}
	if cu.mutation.UpdatedByCleared() {
		_spec.ClearField(counter.FieldUpdatedBy, field.TypeString)
	}
	if cu.mutation.CreatedAtCleared() {
		_spec.ClearField(counter.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.SetField(counter.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := cu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(counter.FieldUpdatedAt, field.TypeInt64, value)
	}
	if cu.mutation.UpdatedAtCleared() {
		_spec.ClearField(counter.FieldUpdatedAt, field.TypeInt64)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{counter.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CounterUpdateOne is the builder for updating a single Counter entity.
type CounterUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CounterMutation
}

// SetIdentifier sets the "identifier" field.
func (cuo *CounterUpdateOne) SetIdentifier(s string) *CounterUpdateOne {
	cuo.mutation.SetIdentifier(s)
	return cuo
}

// SetNillableIdentifier sets the "identifier" field if the given value is not nil.
func (cuo *CounterUpdateOne) SetNillableIdentifier(s *string) *CounterUpdateOne {
	if s != nil {
		cuo.SetIdentifier(*s)
	}
	return cuo
}

// ClearIdentifier clears the value of the "identifier" field.
func (cuo *CounterUpdateOne) ClearIdentifier() *CounterUpdateOne {
	cuo.mutation.ClearIdentifier()
	return cuo
}

// SetName sets the "name" field.
func (cuo *CounterUpdateOne) SetName(s string) *CounterUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cuo *CounterUpdateOne) SetNillableName(s *string) *CounterUpdateOne {
	if s != nil {
		cuo.SetName(*s)
	}
	return cuo
}

// ClearName clears the value of the "name" field.
func (cuo *CounterUpdateOne) ClearName() *CounterUpdateOne {
	cuo.mutation.ClearName()
	return cuo
}

// SetPrefix sets the "prefix" field.
func (cuo *CounterUpdateOne) SetPrefix(s string) *CounterUpdateOne {
	cuo.mutation.SetPrefix(s)
	return cuo
}

// SetNillablePrefix sets the "prefix" field if the given value is not nil.
func (cuo *CounterUpdateOne) SetNillablePrefix(s *string) *CounterUpdateOne {
	if s != nil {
		cuo.SetPrefix(*s)
	}
	return cuo
}

// ClearPrefix clears the value of the "prefix" field.
func (cuo *CounterUpdateOne) ClearPrefix() *CounterUpdateOne {
	cuo.mutation.ClearPrefix()
	return cuo
}

// SetSuffix sets the "suffix" field.
func (cuo *CounterUpdateOne) SetSuffix(s string) *CounterUpdateOne {
	cuo.mutation.SetSuffix(s)
	return cuo
}

// SetNillableSuffix sets the "suffix" field if the given value is not nil.
func (cuo *CounterUpdateOne) SetNillableSuffix(s *string) *CounterUpdateOne {
	if s != nil {
		cuo.SetSuffix(*s)
	}
	return cuo
}

// ClearSuffix clears the value of the "suffix" field.
func (cuo *CounterUpdateOne) ClearSuffix() *CounterUpdateOne {
	cuo.mutation.ClearSuffix()
	return cuo
}

// SetStartValue sets the "start_value" field.
func (cuo *CounterUpdateOne) SetStartValue(i int) *CounterUpdateOne {
	cuo.mutation.ResetStartValue()
	cuo.mutation.SetStartValue(i)
	return cuo
}

// SetNillableStartValue sets the "start_value" field if the given value is not nil.
func (cuo *CounterUpdateOne) SetNillableStartValue(i *int) *CounterUpdateOne {
	if i != nil {
		cuo.SetStartValue(*i)
	}
	return cuo
}

// AddStartValue adds i to the "start_value" field.
func (cuo *CounterUpdateOne) AddStartValue(i int) *CounterUpdateOne {
	cuo.mutation.AddStartValue(i)
	return cuo
}

// SetIncrementStep sets the "increment_step" field.
func (cuo *CounterUpdateOne) SetIncrementStep(i int) *CounterUpdateOne {
	cuo.mutation.ResetIncrementStep()
	cuo.mutation.SetIncrementStep(i)
	return cuo
}

// SetNillableIncrementStep sets the "increment_step" field if the given value is not nil.
func (cuo *CounterUpdateOne) SetNillableIncrementStep(i *int) *CounterUpdateOne {
	if i != nil {
		cuo.SetIncrementStep(*i)
	}
	return cuo
}

// AddIncrementStep adds i to the "increment_step" field.
func (cuo *CounterUpdateOne) AddIncrementStep(i int) *CounterUpdateOne {
	cuo.mutation.AddIncrementStep(i)
	return cuo
}

// SetDateFormat sets the "date_format" field.
func (cuo *CounterUpdateOne) SetDateFormat(s string) *CounterUpdateOne {
	cuo.mutation.SetDateFormat(s)
	return cuo
}

// SetNillableDateFormat sets the "date_format" field if the given value is not nil.
func (cuo *CounterUpdateOne) SetNillableDateFormat(s *string) *CounterUpdateOne {
	if s != nil {
		cuo.SetDateFormat(*s)
	}
	return cuo
}

// ClearDateFormat clears the value of the "date_format" field.
func (cuo *CounterUpdateOne) ClearDateFormat() *CounterUpdateOne {
	cuo.mutation.ClearDateFormat()
	return cuo
}

// SetCurrentValue sets the "current_value" field.
func (cuo *CounterUpdateOne) SetCurrentValue(i int) *CounterUpdateOne {
	cuo.mutation.ResetCurrentValue()
	cuo.mutation.SetCurrentValue(i)
	return cuo
}

// SetNillableCurrentValue sets the "current_value" field if the given value is not nil.
func (cuo *CounterUpdateOne) SetNillableCurrentValue(i *int) *CounterUpdateOne {
	if i != nil {
		cuo.SetCurrentValue(*i)
	}
	return cuo
}

// AddCurrentValue adds i to the "current_value" field.
func (cuo *CounterUpdateOne) AddCurrentValue(i int) *CounterUpdateOne {
	cuo.mutation.AddCurrentValue(i)
	return cuo
}

// SetDisabled sets the "disabled" field.
func (cuo *CounterUpdateOne) SetDisabled(b bool) *CounterUpdateOne {
	cuo.mutation.SetDisabled(b)
	return cuo
}

// SetNillableDisabled sets the "disabled" field if the given value is not nil.
func (cuo *CounterUpdateOne) SetNillableDisabled(b *bool) *CounterUpdateOne {
	if b != nil {
		cuo.SetDisabled(*b)
	}
	return cuo
}

// ClearDisabled clears the value of the "disabled" field.
func (cuo *CounterUpdateOne) ClearDisabled() *CounterUpdateOne {
	cuo.mutation.ClearDisabled()
	return cuo
}

// SetDescription sets the "description" field.
func (cuo *CounterUpdateOne) SetDescription(s string) *CounterUpdateOne {
	cuo.mutation.SetDescription(s)
	return cuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cuo *CounterUpdateOne) SetNillableDescription(s *string) *CounterUpdateOne {
	if s != nil {
		cuo.SetDescription(*s)
	}
	return cuo
}

// ClearDescription clears the value of the "description" field.
func (cuo *CounterUpdateOne) ClearDescription() *CounterUpdateOne {
	cuo.mutation.ClearDescription()
	return cuo
}

// SetSpaceID sets the "space_id" field.
func (cuo *CounterUpdateOne) SetSpaceID(s string) *CounterUpdateOne {
	cuo.mutation.SetSpaceID(s)
	return cuo
}

// SetNillableSpaceID sets the "space_id" field if the given value is not nil.
func (cuo *CounterUpdateOne) SetNillableSpaceID(s *string) *CounterUpdateOne {
	if s != nil {
		cuo.SetSpaceID(*s)
	}
	return cuo
}

// ClearSpaceID clears the value of the "space_id" field.
func (cuo *CounterUpdateOne) ClearSpaceID() *CounterUpdateOne {
	cuo.mutation.ClearSpaceID()
	return cuo
}

// SetCreatedBy sets the "created_by" field.
func (cuo *CounterUpdateOne) SetCreatedBy(s string) *CounterUpdateOne {
	cuo.mutation.SetCreatedBy(s)
	return cuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (cuo *CounterUpdateOne) SetNillableCreatedBy(s *string) *CounterUpdateOne {
	if s != nil {
		cuo.SetCreatedBy(*s)
	}
	return cuo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (cuo *CounterUpdateOne) ClearCreatedBy() *CounterUpdateOne {
	cuo.mutation.ClearCreatedBy()
	return cuo
}

// SetUpdatedBy sets the "updated_by" field.
func (cuo *CounterUpdateOne) SetUpdatedBy(s string) *CounterUpdateOne {
	cuo.mutation.SetUpdatedBy(s)
	return cuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (cuo *CounterUpdateOne) SetNillableUpdatedBy(s *string) *CounterUpdateOne {
	if s != nil {
		cuo.SetUpdatedBy(*s)
	}
	return cuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (cuo *CounterUpdateOne) ClearUpdatedBy() *CounterUpdateOne {
	cuo.mutation.ClearUpdatedBy()
	return cuo
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *CounterUpdateOne) SetUpdatedAt(i int64) *CounterUpdateOne {
	cuo.mutation.ResetUpdatedAt()
	cuo.mutation.SetUpdatedAt(i)
	return cuo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (cuo *CounterUpdateOne) AddUpdatedAt(i int64) *CounterUpdateOne {
	cuo.mutation.AddUpdatedAt(i)
	return cuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (cuo *CounterUpdateOne) ClearUpdatedAt() *CounterUpdateOne {
	cuo.mutation.ClearUpdatedAt()
	return cuo
}

// Mutation returns the CounterMutation object of the builder.
func (cuo *CounterUpdateOne) Mutation() *CounterMutation {
	return cuo.mutation
}

// Where appends a list predicates to the CounterUpdate builder.
func (cuo *CounterUpdateOne) Where(ps ...predicate.Counter) *CounterUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CounterUpdateOne) Select(field string, fields ...string) *CounterUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Counter entity.
func (cuo *CounterUpdateOne) Save(ctx context.Context) (*Counter, error) {
	cuo.defaults()
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CounterUpdateOne) SaveX(ctx context.Context) *Counter {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CounterUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CounterUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *CounterUpdateOne) defaults() {
	if _, ok := cuo.mutation.UpdatedAt(); !ok && !cuo.mutation.UpdatedAtCleared() {
		v := counter.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CounterUpdateOne) check() error {
	if v, ok := cuo.mutation.Identifier(); ok {
		if err := counter.IdentifierValidator(v); err != nil {
			return &ValidationError{Name: "identifier", err: fmt.Errorf(`ent: validator failed for field "Counter.identifier": %w`, err)}
		}
	}
	return nil
}

func (cuo *CounterUpdateOne) sqlSave(ctx context.Context) (_node *Counter, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(counter.Table, counter.Columns, sqlgraph.NewFieldSpec(counter.FieldID, field.TypeString))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Counter.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, counter.FieldID)
		for _, f := range fields {
			if !counter.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != counter.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Identifier(); ok {
		_spec.SetField(counter.FieldIdentifier, field.TypeString, value)
	}
	if cuo.mutation.IdentifierCleared() {
		_spec.ClearField(counter.FieldIdentifier, field.TypeString)
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.SetField(counter.FieldName, field.TypeString, value)
	}
	if cuo.mutation.NameCleared() {
		_spec.ClearField(counter.FieldName, field.TypeString)
	}
	if value, ok := cuo.mutation.Prefix(); ok {
		_spec.SetField(counter.FieldPrefix, field.TypeString, value)
	}
	if cuo.mutation.PrefixCleared() {
		_spec.ClearField(counter.FieldPrefix, field.TypeString)
	}
	if value, ok := cuo.mutation.Suffix(); ok {
		_spec.SetField(counter.FieldSuffix, field.TypeString, value)
	}
	if cuo.mutation.SuffixCleared() {
		_spec.ClearField(counter.FieldSuffix, field.TypeString)
	}
	if value, ok := cuo.mutation.StartValue(); ok {
		_spec.SetField(counter.FieldStartValue, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedStartValue(); ok {
		_spec.AddField(counter.FieldStartValue, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.IncrementStep(); ok {
		_spec.SetField(counter.FieldIncrementStep, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedIncrementStep(); ok {
		_spec.AddField(counter.FieldIncrementStep, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.DateFormat(); ok {
		_spec.SetField(counter.FieldDateFormat, field.TypeString, value)
	}
	if cuo.mutation.DateFormatCleared() {
		_spec.ClearField(counter.FieldDateFormat, field.TypeString)
	}
	if value, ok := cuo.mutation.CurrentValue(); ok {
		_spec.SetField(counter.FieldCurrentValue, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedCurrentValue(); ok {
		_spec.AddField(counter.FieldCurrentValue, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.Disabled(); ok {
		_spec.SetField(counter.FieldDisabled, field.TypeBool, value)
	}
	if cuo.mutation.DisabledCleared() {
		_spec.ClearField(counter.FieldDisabled, field.TypeBool)
	}
	if value, ok := cuo.mutation.Description(); ok {
		_spec.SetField(counter.FieldDescription, field.TypeString, value)
	}
	if cuo.mutation.DescriptionCleared() {
		_spec.ClearField(counter.FieldDescription, field.TypeString)
	}
	if value, ok := cuo.mutation.SpaceID(); ok {
		_spec.SetField(counter.FieldSpaceID, field.TypeString, value)
	}
	if cuo.mutation.SpaceIDCleared() {
		_spec.ClearField(counter.FieldSpaceID, field.TypeString)
	}
	if value, ok := cuo.mutation.CreatedBy(); ok {
		_spec.SetField(counter.FieldCreatedBy, field.TypeString, value)
	}
	if cuo.mutation.CreatedByCleared() {
		_spec.ClearField(counter.FieldCreatedBy, field.TypeString)
	}
	if value, ok := cuo.mutation.UpdatedBy(); ok {
		_spec.SetField(counter.FieldUpdatedBy, field.TypeString, value)
	}
	if cuo.mutation.UpdatedByCleared() {
		_spec.ClearField(counter.FieldUpdatedBy, field.TypeString)
	}
	if cuo.mutation.CreatedAtCleared() {
		_spec.ClearField(counter.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.SetField(counter.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := cuo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(counter.FieldUpdatedAt, field.TypeInt64, value)
	}
	if cuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(counter.FieldUpdatedAt, field.TypeInt64)
	}
	_node = &Counter{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{counter.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
