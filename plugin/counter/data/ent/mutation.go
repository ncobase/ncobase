// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/counter/data/ent/counter"
	"ncobase/counter/data/ent/predicate"
	"sync"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeCounter = "Counter"
)

// CounterMutation represents an operation that mutates the Counter nodes in the graph.
type CounterMutation struct {
	config
	op                Op
	typ               string
	id                *string
	identifier        *string
	name              *string
	prefix            *string
	suffix            *string
	start_value       *int
	addstart_value    *int
	increment_step    *int
	addincrement_step *int
	date_format       *string
	current_value     *int
	addcurrent_value  *int
	disabled          *bool
	description       *string
	space_id          *string
	created_by        *string
	updated_by        *string
	created_at        *int64
	addcreated_at     *int64
	updated_at        *int64
	addupdated_at     *int64
	clearedFields     map[string]struct{}
	done              bool
	oldValue          func(context.Context) (*Counter, error)
	predicates        []predicate.Counter
}

var _ ent.Mutation = (*CounterMutation)(nil)

// counterOption allows management of the mutation configuration using functional options.
type counterOption func(*CounterMutation)

// newCounterMutation creates new mutation for the Counter entity.
func newCounterMutation(c config, op Op, opts ...counterOption) *CounterMutation {
	m := &CounterMutation{
		config:        c,
		op:            op,
		typ:           TypeCounter,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCounterID sets the ID field of the mutation.
func withCounterID(id string) counterOption {
	return func(m *CounterMutation) {
		var (
			err   error
			once  sync.Once
			value *Counter
		)
		m.oldValue = func(ctx context.Context) (*Counter, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Counter.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCounter sets the old Counter of the mutation.
func withCounter(node *Counter) counterOption {
	return func(m *CounterMutation) {
		m.oldValue = func(context.Context) (*Counter, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CounterMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CounterMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Counter entities.
func (m *CounterMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CounterMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CounterMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Counter.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetIdentifier sets the "identifier" field.
func (m *CounterMutation) SetIdentifier(s string) {
	m.identifier = &s
}

// Identifier returns the value of the "identifier" field in the mutation.
func (m *CounterMutation) Identifier() (r string, exists bool) {
	v := m.identifier
	if v == nil {
		return
	}
	return *v, true
}

// OldIdentifier returns the old "identifier" field's value of the Counter entity.
// If the Counter object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CounterMutation) OldIdentifier(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIdentifier is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIdentifier requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIdentifier: %w", err)
	}
	return oldValue.Identifier, nil
}

// ClearIdentifier clears the value of the "identifier" field.
func (m *CounterMutation) ClearIdentifier() {
	m.identifier = nil
	m.clearedFields[counter.FieldIdentifier] = struct{}{}
}

// IdentifierCleared returns if the "identifier" field was cleared in this mutation.
func (m *CounterMutation) IdentifierCleared() bool {
	_, ok := m.clearedFields[counter.FieldIdentifier]
	return ok
}

// ResetIdentifier resets all changes to the "identifier" field.
func (m *CounterMutation) ResetIdentifier() {
	m.identifier = nil
	delete(m.clearedFields, counter.FieldIdentifier)
}

// SetName sets the "name" field.
func (m *CounterMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *CounterMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Counter entity.
// If the Counter object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CounterMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ClearName clears the value of the "name" field.
func (m *CounterMutation) ClearName() {
	m.name = nil
	m.clearedFields[counter.FieldName] = struct{}{}
}

// NameCleared returns if the "name" field was cleared in this mutation.
func (m *CounterMutation) NameCleared() bool {
	_, ok := m.clearedFields[counter.FieldName]
	return ok
}

// ResetName resets all changes to the "name" field.
func (m *CounterMutation) ResetName() {
	m.name = nil
	delete(m.clearedFields, counter.FieldName)
}

// SetPrefix sets the "prefix" field.
func (m *CounterMutation) SetPrefix(s string) {
	m.prefix = &s
}

// Prefix returns the value of the "prefix" field in the mutation.
func (m *CounterMutation) Prefix() (r string, exists bool) {
	v := m.prefix
	if v == nil {
		return
	}
	return *v, true
}

// OldPrefix returns the old "prefix" field's value of the Counter entity.
// If the Counter object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CounterMutation) OldPrefix(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPrefix is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPrefix requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrefix: %w", err)
	}
	return oldValue.Prefix, nil
}

// ClearPrefix clears the value of the "prefix" field.
func (m *CounterMutation) ClearPrefix() {
	m.prefix = nil
	m.clearedFields[counter.FieldPrefix] = struct{}{}
}

// PrefixCleared returns if the "prefix" field was cleared in this mutation.
func (m *CounterMutation) PrefixCleared() bool {
	_, ok := m.clearedFields[counter.FieldPrefix]
	return ok
}

// ResetPrefix resets all changes to the "prefix" field.
func (m *CounterMutation) ResetPrefix() {
	m.prefix = nil
	delete(m.clearedFields, counter.FieldPrefix)
}

// SetSuffix sets the "suffix" field.
func (m *CounterMutation) SetSuffix(s string) {
	m.suffix = &s
}

// Suffix returns the value of the "suffix" field in the mutation.
func (m *CounterMutation) Suffix() (r string, exists bool) {
	v := m.suffix
	if v == nil {
		return
	}
	return *v, true
}

// OldSuffix returns the old "suffix" field's value of the Counter entity.
// If the Counter object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CounterMutation) OldSuffix(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSuffix is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSuffix requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSuffix: %w", err)
	}
	return oldValue.Suffix, nil
}

// ClearSuffix clears the value of the "suffix" field.
func (m *CounterMutation) ClearSuffix() {
	m.suffix = nil
	m.clearedFields[counter.FieldSuffix] = struct{}{}
}

// SuffixCleared returns if the "suffix" field was cleared in this mutation.
func (m *CounterMutation) SuffixCleared() bool {
	_, ok := m.clearedFields[counter.FieldSuffix]
	return ok
}

// ResetSuffix resets all changes to the "suffix" field.
func (m *CounterMutation) ResetSuffix() {
	m.suffix = nil
	delete(m.clearedFields, counter.FieldSuffix)
}

// SetStartValue sets the "start_value" field.
func (m *CounterMutation) SetStartValue(i int) {
	m.start_value = &i
	m.addstart_value = nil
}

// StartValue returns the value of the "start_value" field in the mutation.
func (m *CounterMutation) StartValue() (r int, exists bool) {
	v := m.start_value
	if v == nil {
		return
	}
	return *v, true
}

// OldStartValue returns the old "start_value" field's value of the Counter entity.
// If the Counter object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CounterMutation) OldStartValue(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStartValue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStartValue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartValue: %w", err)
	}
	return oldValue.StartValue, nil
}

// AddStartValue adds i to the "start_value" field.
func (m *CounterMutation) AddStartValue(i int) {
	if m.addstart_value != nil {
		*m.addstart_value += i
	} else {
		m.addstart_value = &i
	}
}

// AddedStartValue returns the value that was added to the "start_value" field in this mutation.
func (m *CounterMutation) AddedStartValue() (r int, exists bool) {
	v := m.addstart_value
	if v == nil {
		return
	}
	return *v, true
}

// ResetStartValue resets all changes to the "start_value" field.
func (m *CounterMutation) ResetStartValue() {
	m.start_value = nil
	m.addstart_value = nil
}

// SetIncrementStep sets the "increment_step" field.
func (m *CounterMutation) SetIncrementStep(i int) {
	m.increment_step = &i
	m.addincrement_step = nil
}

// IncrementStep returns the value of the "increment_step" field in the mutation.
func (m *CounterMutation) IncrementStep() (r int, exists bool) {
	v := m.increment_step
	if v == nil {
		return
	}
	return *v, true
}

// OldIncrementStep returns the old "increment_step" field's value of the Counter entity.
// If the Counter object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CounterMutation) OldIncrementStep(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIncrementStep is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIncrementStep requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIncrementStep: %w", err)
	}
	return oldValue.IncrementStep, nil
}

// AddIncrementStep adds i to the "increment_step" field.
func (m *CounterMutation) AddIncrementStep(i int) {
	if m.addincrement_step != nil {
		*m.addincrement_step += i
	} else {
		m.addincrement_step = &i
	}
}

// AddedIncrementStep returns the value that was added to the "increment_step" field in this mutation.
func (m *CounterMutation) AddedIncrementStep() (r int, exists bool) {
	v := m.addincrement_step
	if v == nil {
		return
	}
	return *v, true
}

// ResetIncrementStep resets all changes to the "increment_step" field.
func (m *CounterMutation) ResetIncrementStep() {
	m.increment_step = nil
	m.addincrement_step = nil
}

// SetDateFormat sets the "date_format" field.
func (m *CounterMutation) SetDateFormat(s string) {
	m.date_format = &s
}

// DateFormat returns the value of the "date_format" field in the mutation.
func (m *CounterMutation) DateFormat() (r string, exists bool) {
	v := m.date_format
	if v == nil {
		return
	}
	return *v, true
}

// OldDateFormat returns the old "date_format" field's value of the Counter entity.
// If the Counter object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CounterMutation) OldDateFormat(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDateFormat is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDateFormat requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDateFormat: %w", err)
	}
	return oldValue.DateFormat, nil
}

// ClearDateFormat clears the value of the "date_format" field.
func (m *CounterMutation) ClearDateFormat() {
	m.date_format = nil
	m.clearedFields[counter.FieldDateFormat] = struct{}{}
}

// DateFormatCleared returns if the "date_format" field was cleared in this mutation.
func (m *CounterMutation) DateFormatCleared() bool {
	_, ok := m.clearedFields[counter.FieldDateFormat]
	return ok
}

// ResetDateFormat resets all changes to the "date_format" field.
func (m *CounterMutation) ResetDateFormat() {
	m.date_format = nil
	delete(m.clearedFields, counter.FieldDateFormat)
}

// SetCurrentValue sets the "current_value" field.
func (m *CounterMutation) SetCurrentValue(i int) {
	m.current_value = &i
	m.addcurrent_value = nil
}

// CurrentValue returns the value of the "current_value" field in the mutation.
func (m *CounterMutation) CurrentValue() (r int, exists bool) {
	v := m.current_value
	if v == nil {
		return
	}
	return *v, true
}

// OldCurrentValue returns the old "current_value" field's value of the Counter entity.
// If the Counter object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CounterMutation) OldCurrentValue(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCurrentValue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCurrentValue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCurrentValue: %w", err)
	}
	return oldValue.CurrentValue, nil
}

// AddCurrentValue adds i to the "current_value" field.
func (m *CounterMutation) AddCurrentValue(i int) {
	if m.addcurrent_value != nil {
		*m.addcurrent_value += i
	} else {
		m.addcurrent_value = &i
	}
}

// AddedCurrentValue returns the value that was added to the "current_value" field in this mutation.
func (m *CounterMutation) AddedCurrentValue() (r int, exists bool) {
	v := m.addcurrent_value
	if v == nil {
		return
	}
	return *v, true
}

// ResetCurrentValue resets all changes to the "current_value" field.
func (m *CounterMutation) ResetCurrentValue() {
	m.current_value = nil
	m.addcurrent_value = nil
}

// SetDisabled sets the "disabled" field.
func (m *CounterMutation) SetDisabled(b bool) {
	m.disabled = &b
}

// Disabled returns the value of the "disabled" field in the mutation.
func (m *CounterMutation) Disabled() (r bool, exists bool) {
	v := m.disabled
	if v == nil {
		return
	}
	return *v, true
}

// OldDisabled returns the old "disabled" field's value of the Counter entity.
// If the Counter object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CounterMutation) OldDisabled(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDisabled is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDisabled requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDisabled: %w", err)
	}
	return oldValue.Disabled, nil
}

// ClearDisabled clears the value of the "disabled" field.
func (m *CounterMutation) ClearDisabled() {
	m.disabled = nil
	m.clearedFields[counter.FieldDisabled] = struct{}{}
}

// DisabledCleared returns if the "disabled" field was cleared in this mutation.
func (m *CounterMutation) DisabledCleared() bool {
	_, ok := m.clearedFields[counter.FieldDisabled]
	return ok
}

// ResetDisabled resets all changes to the "disabled" field.
func (m *CounterMutation) ResetDisabled() {
	m.disabled = nil
	delete(m.clearedFields, counter.FieldDisabled)
}

// SetDescription sets the "description" field.
func (m *CounterMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *CounterMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Counter entity.
// If the Counter object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CounterMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *CounterMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[counter.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *CounterMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[counter.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *CounterMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, counter.FieldDescription)
}

// SetSpaceID sets the "space_id" field.
func (m *CounterMutation) SetSpaceID(s string) {
	m.space_id = &s
}

// SpaceID returns the value of the "space_id" field in the mutation.
func (m *CounterMutation) SpaceID() (r string, exists bool) {
	v := m.space_id
	if v == nil {
		return
	}
	return *v, true
}

// OldSpaceID returns the old "space_id" field's value of the Counter entity.
// If the Counter object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CounterMutation) OldSpaceID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSpaceID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSpaceID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSpaceID: %w", err)
	}
	return oldValue.SpaceID, nil
}

// ClearSpaceID clears the value of the "space_id" field.
func (m *CounterMutation) ClearSpaceID() {
	m.space_id = nil
	m.clearedFields[counter.FieldSpaceID] = struct{}{}
}

// SpaceIDCleared returns if the "space_id" field was cleared in this mutation.
func (m *CounterMutation) SpaceIDCleared() bool {
	_, ok := m.clearedFields[counter.FieldSpaceID]
	return ok
}

// ResetSpaceID resets all changes to the "space_id" field.
func (m *CounterMutation) ResetSpaceID() {
	m.space_id = nil
	delete(m.clearedFields, counter.FieldSpaceID)
}

// SetCreatedBy sets the "created_by" field.
func (m *CounterMutation) SetCreatedBy(s string) {
	m.created_by = &s
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *CounterMutation) CreatedBy() (r string, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the Counter entity.
// If the Counter object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CounterMutation) OldCreatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// ClearCreatedBy clears the value of the "created_by" field.
func (m *CounterMutation) ClearCreatedBy() {
	m.created_by = nil
	m.clearedFields[counter.FieldCreatedBy] = struct{}{}
}

// CreatedByCleared returns if the "created_by" field was cleared in this mutation.
func (m *CounterMutation) CreatedByCleared() bool {
	_, ok := m.clearedFields[counter.FieldCreatedBy]
	return ok
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *CounterMutation) ResetCreatedBy() {
	m.created_by = nil
	delete(m.clearedFields, counter.FieldCreatedBy)
}

// SetUpdatedBy sets the "updated_by" field.
func (m *CounterMutation) SetUpdatedBy(s string) {
	m.updated_by = &s
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *CounterMutation) UpdatedBy() (r string, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the Counter entity.
// If the Counter object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CounterMutation) OldUpdatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (m *CounterMutation) ClearUpdatedBy() {
	m.updated_by = nil
	m.clearedFields[counter.FieldUpdatedBy] = struct{}{}
}

// UpdatedByCleared returns if the "updated_by" field was cleared in this mutation.
func (m *CounterMutation) UpdatedByCleared() bool {
	_, ok := m.clearedFields[counter.FieldUpdatedBy]
	return ok
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *CounterMutation) ResetUpdatedBy() {
	m.updated_by = nil
	delete(m.clearedFields, counter.FieldUpdatedBy)
}

// SetCreatedAt sets the "created_at" field.
func (m *CounterMutation) SetCreatedAt(i int64) {
	m.created_at = &i
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *CounterMutation) CreatedAt() (r int64, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Counter entity.
// If the Counter object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CounterMutation) OldCreatedAt(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds i to the "created_at" field.
func (m *CounterMutation) AddCreatedAt(i int64) {
	if m.addcreated_at != nil {
		*m.addcreated_at += i
	} else {
		m.addcreated_at = &i
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *CounterMutation) AddedCreatedAt() (r int64, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ClearCreatedAt clears the value of the "created_at" field.
func (m *CounterMutation) ClearCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
	m.clearedFields[counter.FieldCreatedAt] = struct{}{}
}

// CreatedAtCleared returns if the "created_at" field was cleared in this mutation.
func (m *CounterMutation) CreatedAtCleared() bool {
	_, ok := m.clearedFields[counter.FieldCreatedAt]
	return ok
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *CounterMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
	delete(m.clearedFields, counter.FieldCreatedAt)
}

// SetUpdatedAt sets the "updated_at" field.
func (m *CounterMutation) SetUpdatedAt(i int64) {
	m.updated_at = &i
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *CounterMutation) UpdatedAt() (r int64, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Counter entity.
// If the Counter object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CounterMutation) OldUpdatedAt(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds i to the "updated_at" field.
func (m *CounterMutation) AddUpdatedAt(i int64) {
	if m.addupdated_at != nil {
		*m.addupdated_at += i
	} else {
		m.addupdated_at = &i
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *CounterMutation) AddedUpdatedAt() (r int64, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *CounterMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
	m.clearedFields[counter.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *CounterMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[counter.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *CounterMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
	delete(m.clearedFields, counter.FieldUpdatedAt)
}

// Where appends a list predicates to the CounterMutation builder.
func (m *CounterMutation) Where(ps ...predicate.Counter) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CounterMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CounterMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Counter, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CounterMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CounterMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Counter).
func (m *CounterMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CounterMutation) Fields() []string {
	fields := make([]string, 0, 15)
	if m.identifier != nil {
		fields = append(fields, counter.FieldIdentifier)
	}
	if m.name != nil {
		fields = append(fields, counter.FieldName)
	}
	if m.prefix != nil {
		fields = append(fields, counter.FieldPrefix)
	}
	if m.suffix != nil {
		fields = append(fields, counter.FieldSuffix)
	}
	if m.start_value != nil {
		fields = append(fields, counter.FieldStartValue)
	}
	if m.increment_step != nil {
		fields = append(fields, counter.FieldIncrementStep)
	}
	if m.date_format != nil {
		fields = append(fields, counter.FieldDateFormat)
	}
	if m.current_value != nil {
		fields = append(fields, counter.FieldCurrentValue)
	}
	if m.disabled != nil {
		fields = append(fields, counter.FieldDisabled)
	}
	if m.description != nil {
		fields = append(fields, counter.FieldDescription)
	}
	if m.space_id != nil {
		fields = append(fields, counter.FieldSpaceID)
	}
	if m.created_by != nil {
		fields = append(fields, counter.FieldCreatedBy)
	}
	if m.updated_by != nil {
		fields = append(fields, counter.FieldUpdatedBy)
	}
	if m.created_at != nil {
		fields = append(fields, counter.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, counter.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CounterMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case counter.FieldIdentifier:
		return m.Identifier()
	case counter.FieldName:
		return m.Name()
	case counter.FieldPrefix:
		return m.Prefix()
	case counter.FieldSuffix:
		return m.Suffix()
	case counter.FieldStartValue:
		return m.StartValue()
	case counter.FieldIncrementStep:
		return m.IncrementStep()
	case counter.FieldDateFormat:
		return m.DateFormat()
	case counter.FieldCurrentValue:
		return m.CurrentValue()
	case counter.FieldDisabled:
		return m.Disabled()
	case counter.FieldDescription:
		return m.Description()
	case counter.FieldSpaceID:
		return m.SpaceID()
	case counter.FieldCreatedBy:
		return m.CreatedBy()
	case counter.FieldUpdatedBy:
		return m.UpdatedBy()
	case counter.FieldCreatedAt:
		return m.CreatedAt()
	case counter.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CounterMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case counter.FieldIdentifier:
		return m.OldIdentifier(ctx)
	case counter.FieldName:
		return m.OldName(ctx)
	case counter.FieldPrefix:
		return m.OldPrefix(ctx)
	case counter.FieldSuffix:
		return m.OldSuffix(ctx)
	case counter.FieldStartValue:
		return m.OldStartValue(ctx)
	case counter.FieldIncrementStep:
		return m.OldIncrementStep(ctx)
	case counter.FieldDateFormat:
		return m.OldDateFormat(ctx)
	case counter.FieldCurrentValue:
		return m.OldCurrentValue(ctx)
	case counter.FieldDisabled:
		return m.OldDisabled(ctx)
	case counter.FieldDescription:
		return m.OldDescription(ctx)
	case counter.FieldSpaceID:
		return m.OldSpaceID(ctx)
	case counter.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case counter.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	case counter.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case counter.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Counter field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CounterMutation) SetField(name string, value ent.Value) error {
	switch name {
	case counter.FieldIdentifier:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIdentifier(v)
		return nil
	case counter.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case counter.FieldPrefix:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrefix(v)
		return nil
	case counter.FieldSuffix:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSuffix(v)
		return nil
	case counter.FieldStartValue:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartValue(v)
		return nil
	case counter.FieldIncrementStep:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIncrementStep(v)
		return nil
	case counter.FieldDateFormat:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDateFormat(v)
		return nil
	case counter.FieldCurrentValue:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCurrentValue(v)
		return nil
	case counter.FieldDisabled:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDisabled(v)
		return nil
	case counter.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case counter.FieldSpaceID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSpaceID(v)
		return nil
	case counter.FieldCreatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case counter.FieldUpdatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	case counter.FieldCreatedAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case counter.FieldUpdatedAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Counter field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CounterMutation) AddedFields() []string {
	var fields []string
	if m.addstart_value != nil {
		fields = append(fields, counter.FieldStartValue)
	}
	if m.addincrement_step != nil {
		fields = append(fields, counter.FieldIncrementStep)
	}
	if m.addcurrent_value != nil {
		fields = append(fields, counter.FieldCurrentValue)
	}
	if m.addcreated_at != nil {
		fields = append(fields, counter.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, counter.FieldUpdatedAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CounterMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case counter.FieldStartValue:
		return m.AddedStartValue()
	case counter.FieldIncrementStep:
		return m.AddedIncrementStep()
	case counter.FieldCurrentValue:
		return m.AddedCurrentValue()
	case counter.FieldCreatedAt:
		return m.AddedCreatedAt()
	case counter.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CounterMutation) AddField(name string, value ent.Value) error {
	switch name {
	case counter.FieldStartValue:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStartValue(v)
		return nil
	case counter.FieldIncrementStep:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddIncrementStep(v)
		return nil
	case counter.FieldCurrentValue:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCurrentValue(v)
		return nil
	case counter.FieldCreatedAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case counter.FieldUpdatedAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Counter numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CounterMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(counter.FieldIdentifier) {
		fields = append(fields, counter.FieldIdentifier)
	}
	if m.FieldCleared(counter.FieldName) {
		fields = append(fields, counter.FieldName)
	}
	if m.FieldCleared(counter.FieldPrefix) {
		fields = append(fields, counter.FieldPrefix)
	}
	if m.FieldCleared(counter.FieldSuffix) {
		fields = append(fields, counter.FieldSuffix)
	}
	if m.FieldCleared(counter.FieldDateFormat) {
		fields = append(fields, counter.FieldDateFormat)
	}
	if m.FieldCleared(counter.FieldDisabled) {
		fields = append(fields, counter.FieldDisabled)
	}
	if m.FieldCleared(counter.FieldDescription) {
		fields = append(fields, counter.FieldDescription)
	}
	if m.FieldCleared(counter.FieldSpaceID) {
		fields = append(fields, counter.FieldSpaceID)
	}
	if m.FieldCleared(counter.FieldCreatedBy) {
		fields = append(fields, counter.FieldCreatedBy)
	}
	if m.FieldCleared(counter.FieldUpdatedBy) {
		fields = append(fields, counter.FieldUpdatedBy)
	}
	if m.FieldCleared(counter.FieldCreatedAt) {
		fields = append(fields, counter.FieldCreatedAt)
	}
	if m.FieldCleared(counter.FieldUpdatedAt) {
		fields = append(fields, counter.FieldUpdatedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CounterMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CounterMutation) ClearField(name string) error {
	switch name {
	case counter.FieldIdentifier:
		m.ClearIdentifier()
		return nil
	case counter.FieldName:
		m.ClearName()
		return nil
	case counter.FieldPrefix:
		m.ClearPrefix()
		return nil
	case counter.FieldSuffix:
		m.ClearSuffix()
		return nil
	case counter.FieldDateFormat:
		m.ClearDateFormat()
		return nil
	case counter.FieldDisabled:
		m.ClearDisabled()
		return nil
	case counter.FieldDescription:
		m.ClearDescription()
		return nil
	case counter.FieldSpaceID:
		m.ClearSpaceID()
		return nil
	case counter.FieldCreatedBy:
		m.ClearCreatedBy()
		return nil
	case counter.FieldUpdatedBy:
		m.ClearUpdatedBy()
		return nil
	case counter.FieldCreatedAt:
		m.ClearCreatedAt()
		return nil
	case counter.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Counter nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CounterMutation) ResetField(name string) error {
	switch name {
	case counter.FieldIdentifier:
		m.ResetIdentifier()
		return nil
	case counter.FieldName:
		m.ResetName()
		return nil
	case counter.FieldPrefix:
		m.ResetPrefix()
		return nil
	case counter.FieldSuffix:
		m.ResetSuffix()
		return nil
	case counter.FieldStartValue:
		m.ResetStartValue()
		return nil
	case counter.FieldIncrementStep:
		m.ResetIncrementStep()
		return nil
	case counter.FieldDateFormat:
		m.ResetDateFormat()
		return nil
	case counter.FieldCurrentValue:
		m.ResetCurrentValue()
		return nil
	case counter.FieldDisabled:
		m.ResetDisabled()
		return nil
	case counter.FieldDescription:
		m.ResetDescription()
		return nil
	case counter.FieldSpaceID:
		m.ResetSpaceID()
		return nil
	case counter.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case counter.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	case counter.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case counter.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Counter field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CounterMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CounterMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CounterMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CounterMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CounterMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CounterMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CounterMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Counter unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CounterMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Counter edge %s", name)
}
