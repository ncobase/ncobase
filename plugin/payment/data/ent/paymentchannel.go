// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"ncobase/payment/data/ent/paymentchannel"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// PaymentChannel is the model entity for the PaymentChannel schema.
type PaymentChannel struct {
	config `json:"-"`
	// ID of the ent.
	// primary key
	ID string `json:"id,omitempty"`
	// name
	Name string `json:"name,omitempty"`
	// description
	Description string `json:"description,omitempty"`
	// Extend properties
	Extras map[string]interface{} `json:"extras,omitempty"`
	// id of the creator
	CreatedBy string `json:"created_by,omitempty"`
	// id of the last updater
	UpdatedBy string `json:"updated_by,omitempty"`
	// created at
	CreatedAt int64 `json:"created_at,omitempty"`
	// updated at
	UpdatedAt int64 `json:"updated_at,omitempty"`
	// Payment provider (stripe, paypal, alipay, wechatpay, etc.)
	Provider string `json:"provider,omitempty"`
	// Payment channel status (active, disabled, testing)
	Status string `json:"status,omitempty"`
	// Whether this is the default channel for the provider
	IsDefault bool `json:"is_default,omitempty"`
	// Supported payment types (one_time, subscription, recurring)
	SupportedTypes []string `json:"supported_types,omitempty"`
	// Provider-specific configuration
	Config map[string]interface{} `json:"config,omitempty"`
	// Tenant ID if multi-tenant support is enabled
	TenantID     string `json:"tenant_id,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PaymentChannel) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case paymentchannel.FieldExtras, paymentchannel.FieldSupportedTypes, paymentchannel.FieldConfig:
			values[i] = new([]byte)
		case paymentchannel.FieldIsDefault:
			values[i] = new(sql.NullBool)
		case paymentchannel.FieldCreatedAt, paymentchannel.FieldUpdatedAt:
			values[i] = new(sql.NullInt64)
		case paymentchannel.FieldID, paymentchannel.FieldName, paymentchannel.FieldDescription, paymentchannel.FieldCreatedBy, paymentchannel.FieldUpdatedBy, paymentchannel.FieldProvider, paymentchannel.FieldStatus, paymentchannel.FieldTenantID:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PaymentChannel fields.
func (pc *PaymentChannel) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case paymentchannel.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				pc.ID = value.String
			}
		case paymentchannel.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pc.Name = value.String
			}
		case paymentchannel.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				pc.Description = value.String
			}
		case paymentchannel.FieldExtras:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field extras", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pc.Extras); err != nil {
					return fmt.Errorf("unmarshal field extras: %w", err)
				}
			}
		case paymentchannel.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				pc.CreatedBy = value.String
			}
		case paymentchannel.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				pc.UpdatedBy = value.String
			}
		case paymentchannel.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pc.CreatedAt = value.Int64
			}
		case paymentchannel.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pc.UpdatedAt = value.Int64
			}
		case paymentchannel.FieldProvider:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field provider", values[i])
			} else if value.Valid {
				pc.Provider = value.String
			}
		case paymentchannel.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				pc.Status = value.String
			}
		case paymentchannel.FieldIsDefault:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_default", values[i])
			} else if value.Valid {
				pc.IsDefault = value.Bool
			}
		case paymentchannel.FieldSupportedTypes:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field supported_types", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pc.SupportedTypes); err != nil {
					return fmt.Errorf("unmarshal field supported_types: %w", err)
				}
			}
		case paymentchannel.FieldConfig:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field config", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pc.Config); err != nil {
					return fmt.Errorf("unmarshal field config: %w", err)
				}
			}
		case paymentchannel.FieldTenantID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				pc.TenantID = value.String
			}
		default:
			pc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PaymentChannel.
// This includes values selected through modifiers, order, etc.
func (pc *PaymentChannel) Value(name string) (ent.Value, error) {
	return pc.selectValues.Get(name)
}

// Update returns a builder for updating this PaymentChannel.
// Note that you need to call PaymentChannel.Unwrap() before calling this method if this PaymentChannel
// was returned from a transaction, and the transaction was committed or rolled back.
func (pc *PaymentChannel) Update() *PaymentChannelUpdateOne {
	return NewPaymentChannelClient(pc.config).UpdateOne(pc)
}

// Unwrap unwraps the PaymentChannel entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pc *PaymentChannel) Unwrap() *PaymentChannel {
	_tx, ok := pc.config.driver.(*txDriver)
	if !ok {
		panic("ent: PaymentChannel is not a transactional entity")
	}
	pc.config.driver = _tx.drv
	return pc
}

// String implements the fmt.Stringer.
func (pc *PaymentChannel) String() string {
	var builder strings.Builder
	builder.WriteString("PaymentChannel(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pc.ID))
	builder.WriteString("name=")
	builder.WriteString(pc.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(pc.Description)
	builder.WriteString(", ")
	builder.WriteString("extras=")
	builder.WriteString(fmt.Sprintf("%v", pc.Extras))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(pc.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(pc.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", pc.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", pc.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("provider=")
	builder.WriteString(pc.Provider)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(pc.Status)
	builder.WriteString(", ")
	builder.WriteString("is_default=")
	builder.WriteString(fmt.Sprintf("%v", pc.IsDefault))
	builder.WriteString(", ")
	builder.WriteString("supported_types=")
	builder.WriteString(fmt.Sprintf("%v", pc.SupportedTypes))
	builder.WriteString(", ")
	builder.WriteString("config=")
	builder.WriteString(fmt.Sprintf("%v", pc.Config))
	builder.WriteString(", ")
	builder.WriteString("tenant_id=")
	builder.WriteString(pc.TenantID)
	builder.WriteByte(')')
	return builder.String()
}

// PaymentChannels is a parsable slice of PaymentChannel.
type PaymentChannels []*PaymentChannel
