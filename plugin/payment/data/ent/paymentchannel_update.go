// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/payment/data/ent/paymentchannel"
	"ncobase/payment/data/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// PaymentChannelUpdate is the builder for updating PaymentChannel entities.
type PaymentChannelUpdate struct {
	config
	hooks    []Hook
	mutation *PaymentChannelMutation
}

// Where appends a list predicates to the PaymentChannelUpdate builder.
func (pcu *PaymentChannelUpdate) Where(ps ...predicate.PaymentChannel) *PaymentChannelUpdate {
	pcu.mutation.Where(ps...)
	return pcu
}

// SetName sets the "name" field.
func (pcu *PaymentChannelUpdate) SetName(s string) *PaymentChannelUpdate {
	pcu.mutation.SetName(s)
	return pcu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pcu *PaymentChannelUpdate) SetNillableName(s *string) *PaymentChannelUpdate {
	if s != nil {
		pcu.SetName(*s)
	}
	return pcu
}

// ClearName clears the value of the "name" field.
func (pcu *PaymentChannelUpdate) ClearName() *PaymentChannelUpdate {
	pcu.mutation.ClearName()
	return pcu
}

// SetDescription sets the "description" field.
func (pcu *PaymentChannelUpdate) SetDescription(s string) *PaymentChannelUpdate {
	pcu.mutation.SetDescription(s)
	return pcu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pcu *PaymentChannelUpdate) SetNillableDescription(s *string) *PaymentChannelUpdate {
	if s != nil {
		pcu.SetDescription(*s)
	}
	return pcu
}

// ClearDescription clears the value of the "description" field.
func (pcu *PaymentChannelUpdate) ClearDescription() *PaymentChannelUpdate {
	pcu.mutation.ClearDescription()
	return pcu
}

// SetExtras sets the "extras" field.
func (pcu *PaymentChannelUpdate) SetExtras(m map[string]interface{}) *PaymentChannelUpdate {
	pcu.mutation.SetExtras(m)
	return pcu
}

// ClearExtras clears the value of the "extras" field.
func (pcu *PaymentChannelUpdate) ClearExtras() *PaymentChannelUpdate {
	pcu.mutation.ClearExtras()
	return pcu
}

// SetCreatedBy sets the "created_by" field.
func (pcu *PaymentChannelUpdate) SetCreatedBy(s string) *PaymentChannelUpdate {
	pcu.mutation.SetCreatedBy(s)
	return pcu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (pcu *PaymentChannelUpdate) SetNillableCreatedBy(s *string) *PaymentChannelUpdate {
	if s != nil {
		pcu.SetCreatedBy(*s)
	}
	return pcu
}

// ClearCreatedBy clears the value of the "created_by" field.
func (pcu *PaymentChannelUpdate) ClearCreatedBy() *PaymentChannelUpdate {
	pcu.mutation.ClearCreatedBy()
	return pcu
}

// SetUpdatedBy sets the "updated_by" field.
func (pcu *PaymentChannelUpdate) SetUpdatedBy(s string) *PaymentChannelUpdate {
	pcu.mutation.SetUpdatedBy(s)
	return pcu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (pcu *PaymentChannelUpdate) SetNillableUpdatedBy(s *string) *PaymentChannelUpdate {
	if s != nil {
		pcu.SetUpdatedBy(*s)
	}
	return pcu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (pcu *PaymentChannelUpdate) ClearUpdatedBy() *PaymentChannelUpdate {
	pcu.mutation.ClearUpdatedBy()
	return pcu
}

// SetUpdatedAt sets the "updated_at" field.
func (pcu *PaymentChannelUpdate) SetUpdatedAt(i int64) *PaymentChannelUpdate {
	pcu.mutation.ResetUpdatedAt()
	pcu.mutation.SetUpdatedAt(i)
	return pcu
}

// AddUpdatedAt adds i to the "updated_at" field.
func (pcu *PaymentChannelUpdate) AddUpdatedAt(i int64) *PaymentChannelUpdate {
	pcu.mutation.AddUpdatedAt(i)
	return pcu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (pcu *PaymentChannelUpdate) ClearUpdatedAt() *PaymentChannelUpdate {
	pcu.mutation.ClearUpdatedAt()
	return pcu
}

// SetProvider sets the "provider" field.
func (pcu *PaymentChannelUpdate) SetProvider(s string) *PaymentChannelUpdate {
	pcu.mutation.SetProvider(s)
	return pcu
}

// SetNillableProvider sets the "provider" field if the given value is not nil.
func (pcu *PaymentChannelUpdate) SetNillableProvider(s *string) *PaymentChannelUpdate {
	if s != nil {
		pcu.SetProvider(*s)
	}
	return pcu
}

// SetStatus sets the "status" field.
func (pcu *PaymentChannelUpdate) SetStatus(s string) *PaymentChannelUpdate {
	pcu.mutation.SetStatus(s)
	return pcu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pcu *PaymentChannelUpdate) SetNillableStatus(s *string) *PaymentChannelUpdate {
	if s != nil {
		pcu.SetStatus(*s)
	}
	return pcu
}

// SetIsDefault sets the "is_default" field.
func (pcu *PaymentChannelUpdate) SetIsDefault(b bool) *PaymentChannelUpdate {
	pcu.mutation.SetIsDefault(b)
	return pcu
}

// SetNillableIsDefault sets the "is_default" field if the given value is not nil.
func (pcu *PaymentChannelUpdate) SetNillableIsDefault(b *bool) *PaymentChannelUpdate {
	if b != nil {
		pcu.SetIsDefault(*b)
	}
	return pcu
}

// SetSupportedTypes sets the "supported_types" field.
func (pcu *PaymentChannelUpdate) SetSupportedTypes(s []string) *PaymentChannelUpdate {
	pcu.mutation.SetSupportedTypes(s)
	return pcu
}

// AppendSupportedTypes appends s to the "supported_types" field.
func (pcu *PaymentChannelUpdate) AppendSupportedTypes(s []string) *PaymentChannelUpdate {
	pcu.mutation.AppendSupportedTypes(s)
	return pcu
}

// SetConfig sets the "config" field.
func (pcu *PaymentChannelUpdate) SetConfig(m map[string]interface{}) *PaymentChannelUpdate {
	pcu.mutation.SetConfig(m)
	return pcu
}

// SetTenantID sets the "tenant_id" field.
func (pcu *PaymentChannelUpdate) SetTenantID(s string) *PaymentChannelUpdate {
	pcu.mutation.SetTenantID(s)
	return pcu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (pcu *PaymentChannelUpdate) SetNillableTenantID(s *string) *PaymentChannelUpdate {
	if s != nil {
		pcu.SetTenantID(*s)
	}
	return pcu
}

// ClearTenantID clears the value of the "tenant_id" field.
func (pcu *PaymentChannelUpdate) ClearTenantID() *PaymentChannelUpdate {
	pcu.mutation.ClearTenantID()
	return pcu
}

// Mutation returns the PaymentChannelMutation object of the builder.
func (pcu *PaymentChannelUpdate) Mutation() *PaymentChannelMutation {
	return pcu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pcu *PaymentChannelUpdate) Save(ctx context.Context) (int, error) {
	pcu.defaults()
	return withHooks(ctx, pcu.sqlSave, pcu.mutation, pcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pcu *PaymentChannelUpdate) SaveX(ctx context.Context) int {
	affected, err := pcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pcu *PaymentChannelUpdate) Exec(ctx context.Context) error {
	_, err := pcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcu *PaymentChannelUpdate) ExecX(ctx context.Context) {
	if err := pcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pcu *PaymentChannelUpdate) defaults() {
	if _, ok := pcu.mutation.UpdatedAt(); !ok && !pcu.mutation.UpdatedAtCleared() {
		v := paymentchannel.UpdateDefaultUpdatedAt()
		pcu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pcu *PaymentChannelUpdate) check() error {
	if v, ok := pcu.mutation.Provider(); ok {
		if err := paymentchannel.ProviderValidator(v); err != nil {
			return &ValidationError{Name: "provider", err: fmt.Errorf(`ent: validator failed for field "PaymentChannel.provider": %w`, err)}
		}
	}
	return nil
}

func (pcu *PaymentChannelUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pcu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(paymentchannel.Table, paymentchannel.Columns, sqlgraph.NewFieldSpec(paymentchannel.FieldID, field.TypeString))
	if ps := pcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pcu.mutation.Name(); ok {
		_spec.SetField(paymentchannel.FieldName, field.TypeString, value)
	}
	if pcu.mutation.NameCleared() {
		_spec.ClearField(paymentchannel.FieldName, field.TypeString)
	}
	if value, ok := pcu.mutation.Description(); ok {
		_spec.SetField(paymentchannel.FieldDescription, field.TypeString, value)
	}
	if pcu.mutation.DescriptionCleared() {
		_spec.ClearField(paymentchannel.FieldDescription, field.TypeString)
	}
	if value, ok := pcu.mutation.Extras(); ok {
		_spec.SetField(paymentchannel.FieldExtras, field.TypeJSON, value)
	}
	if pcu.mutation.ExtrasCleared() {
		_spec.ClearField(paymentchannel.FieldExtras, field.TypeJSON)
	}
	if value, ok := pcu.mutation.CreatedBy(); ok {
		_spec.SetField(paymentchannel.FieldCreatedBy, field.TypeString, value)
	}
	if pcu.mutation.CreatedByCleared() {
		_spec.ClearField(paymentchannel.FieldCreatedBy, field.TypeString)
	}
	if value, ok := pcu.mutation.UpdatedBy(); ok {
		_spec.SetField(paymentchannel.FieldUpdatedBy, field.TypeString, value)
	}
	if pcu.mutation.UpdatedByCleared() {
		_spec.ClearField(paymentchannel.FieldUpdatedBy, field.TypeString)
	}
	if pcu.mutation.CreatedAtCleared() {
		_spec.ClearField(paymentchannel.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := pcu.mutation.UpdatedAt(); ok {
		_spec.SetField(paymentchannel.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := pcu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(paymentchannel.FieldUpdatedAt, field.TypeInt64, value)
	}
	if pcu.mutation.UpdatedAtCleared() {
		_spec.ClearField(paymentchannel.FieldUpdatedAt, field.TypeInt64)
	}
	if value, ok := pcu.mutation.Provider(); ok {
		_spec.SetField(paymentchannel.FieldProvider, field.TypeString, value)
	}
	if value, ok := pcu.mutation.Status(); ok {
		_spec.SetField(paymentchannel.FieldStatus, field.TypeString, value)
	}
	if value, ok := pcu.mutation.IsDefault(); ok {
		_spec.SetField(paymentchannel.FieldIsDefault, field.TypeBool, value)
	}
	if value, ok := pcu.mutation.SupportedTypes(); ok {
		_spec.SetField(paymentchannel.FieldSupportedTypes, field.TypeJSON, value)
	}
	if value, ok := pcu.mutation.AppendedSupportedTypes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, paymentchannel.FieldSupportedTypes, value)
		})
	}
	if value, ok := pcu.mutation.Config(); ok {
		_spec.SetField(paymentchannel.FieldConfig, field.TypeJSON, value)
	}
	if value, ok := pcu.mutation.TenantID(); ok {
		_spec.SetField(paymentchannel.FieldTenantID, field.TypeString, value)
	}
	if pcu.mutation.TenantIDCleared() {
		_spec.ClearField(paymentchannel.FieldTenantID, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{paymentchannel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pcu.mutation.done = true
	return n, nil
}

// PaymentChannelUpdateOne is the builder for updating a single PaymentChannel entity.
type PaymentChannelUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PaymentChannelMutation
}

// SetName sets the "name" field.
func (pcuo *PaymentChannelUpdateOne) SetName(s string) *PaymentChannelUpdateOne {
	pcuo.mutation.SetName(s)
	return pcuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pcuo *PaymentChannelUpdateOne) SetNillableName(s *string) *PaymentChannelUpdateOne {
	if s != nil {
		pcuo.SetName(*s)
	}
	return pcuo
}

// ClearName clears the value of the "name" field.
func (pcuo *PaymentChannelUpdateOne) ClearName() *PaymentChannelUpdateOne {
	pcuo.mutation.ClearName()
	return pcuo
}

// SetDescription sets the "description" field.
func (pcuo *PaymentChannelUpdateOne) SetDescription(s string) *PaymentChannelUpdateOne {
	pcuo.mutation.SetDescription(s)
	return pcuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pcuo *PaymentChannelUpdateOne) SetNillableDescription(s *string) *PaymentChannelUpdateOne {
	if s != nil {
		pcuo.SetDescription(*s)
	}
	return pcuo
}

// ClearDescription clears the value of the "description" field.
func (pcuo *PaymentChannelUpdateOne) ClearDescription() *PaymentChannelUpdateOne {
	pcuo.mutation.ClearDescription()
	return pcuo
}

// SetExtras sets the "extras" field.
func (pcuo *PaymentChannelUpdateOne) SetExtras(m map[string]interface{}) *PaymentChannelUpdateOne {
	pcuo.mutation.SetExtras(m)
	return pcuo
}

// ClearExtras clears the value of the "extras" field.
func (pcuo *PaymentChannelUpdateOne) ClearExtras() *PaymentChannelUpdateOne {
	pcuo.mutation.ClearExtras()
	return pcuo
}

// SetCreatedBy sets the "created_by" field.
func (pcuo *PaymentChannelUpdateOne) SetCreatedBy(s string) *PaymentChannelUpdateOne {
	pcuo.mutation.SetCreatedBy(s)
	return pcuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (pcuo *PaymentChannelUpdateOne) SetNillableCreatedBy(s *string) *PaymentChannelUpdateOne {
	if s != nil {
		pcuo.SetCreatedBy(*s)
	}
	return pcuo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (pcuo *PaymentChannelUpdateOne) ClearCreatedBy() *PaymentChannelUpdateOne {
	pcuo.mutation.ClearCreatedBy()
	return pcuo
}

// SetUpdatedBy sets the "updated_by" field.
func (pcuo *PaymentChannelUpdateOne) SetUpdatedBy(s string) *PaymentChannelUpdateOne {
	pcuo.mutation.SetUpdatedBy(s)
	return pcuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (pcuo *PaymentChannelUpdateOne) SetNillableUpdatedBy(s *string) *PaymentChannelUpdateOne {
	if s != nil {
		pcuo.SetUpdatedBy(*s)
	}
	return pcuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (pcuo *PaymentChannelUpdateOne) ClearUpdatedBy() *PaymentChannelUpdateOne {
	pcuo.mutation.ClearUpdatedBy()
	return pcuo
}

// SetUpdatedAt sets the "updated_at" field.
func (pcuo *PaymentChannelUpdateOne) SetUpdatedAt(i int64) *PaymentChannelUpdateOne {
	pcuo.mutation.ResetUpdatedAt()
	pcuo.mutation.SetUpdatedAt(i)
	return pcuo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (pcuo *PaymentChannelUpdateOne) AddUpdatedAt(i int64) *PaymentChannelUpdateOne {
	pcuo.mutation.AddUpdatedAt(i)
	return pcuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (pcuo *PaymentChannelUpdateOne) ClearUpdatedAt() *PaymentChannelUpdateOne {
	pcuo.mutation.ClearUpdatedAt()
	return pcuo
}

// SetProvider sets the "provider" field.
func (pcuo *PaymentChannelUpdateOne) SetProvider(s string) *PaymentChannelUpdateOne {
	pcuo.mutation.SetProvider(s)
	return pcuo
}

// SetNillableProvider sets the "provider" field if the given value is not nil.
func (pcuo *PaymentChannelUpdateOne) SetNillableProvider(s *string) *PaymentChannelUpdateOne {
	if s != nil {
		pcuo.SetProvider(*s)
	}
	return pcuo
}

// SetStatus sets the "status" field.
func (pcuo *PaymentChannelUpdateOne) SetStatus(s string) *PaymentChannelUpdateOne {
	pcuo.mutation.SetStatus(s)
	return pcuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pcuo *PaymentChannelUpdateOne) SetNillableStatus(s *string) *PaymentChannelUpdateOne {
	if s != nil {
		pcuo.SetStatus(*s)
	}
	return pcuo
}

// SetIsDefault sets the "is_default" field.
func (pcuo *PaymentChannelUpdateOne) SetIsDefault(b bool) *PaymentChannelUpdateOne {
	pcuo.mutation.SetIsDefault(b)
	return pcuo
}

// SetNillableIsDefault sets the "is_default" field if the given value is not nil.
func (pcuo *PaymentChannelUpdateOne) SetNillableIsDefault(b *bool) *PaymentChannelUpdateOne {
	if b != nil {
		pcuo.SetIsDefault(*b)
	}
	return pcuo
}

// SetSupportedTypes sets the "supported_types" field.
func (pcuo *PaymentChannelUpdateOne) SetSupportedTypes(s []string) *PaymentChannelUpdateOne {
	pcuo.mutation.SetSupportedTypes(s)
	return pcuo
}

// AppendSupportedTypes appends s to the "supported_types" field.
func (pcuo *PaymentChannelUpdateOne) AppendSupportedTypes(s []string) *PaymentChannelUpdateOne {
	pcuo.mutation.AppendSupportedTypes(s)
	return pcuo
}

// SetConfig sets the "config" field.
func (pcuo *PaymentChannelUpdateOne) SetConfig(m map[string]interface{}) *PaymentChannelUpdateOne {
	pcuo.mutation.SetConfig(m)
	return pcuo
}

// SetTenantID sets the "tenant_id" field.
func (pcuo *PaymentChannelUpdateOne) SetTenantID(s string) *PaymentChannelUpdateOne {
	pcuo.mutation.SetTenantID(s)
	return pcuo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (pcuo *PaymentChannelUpdateOne) SetNillableTenantID(s *string) *PaymentChannelUpdateOne {
	if s != nil {
		pcuo.SetTenantID(*s)
	}
	return pcuo
}

// ClearTenantID clears the value of the "tenant_id" field.
func (pcuo *PaymentChannelUpdateOne) ClearTenantID() *PaymentChannelUpdateOne {
	pcuo.mutation.ClearTenantID()
	return pcuo
}

// Mutation returns the PaymentChannelMutation object of the builder.
func (pcuo *PaymentChannelUpdateOne) Mutation() *PaymentChannelMutation {
	return pcuo.mutation
}

// Where appends a list predicates to the PaymentChannelUpdate builder.
func (pcuo *PaymentChannelUpdateOne) Where(ps ...predicate.PaymentChannel) *PaymentChannelUpdateOne {
	pcuo.mutation.Where(ps...)
	return pcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pcuo *PaymentChannelUpdateOne) Select(field string, fields ...string) *PaymentChannelUpdateOne {
	pcuo.fields = append([]string{field}, fields...)
	return pcuo
}

// Save executes the query and returns the updated PaymentChannel entity.
func (pcuo *PaymentChannelUpdateOne) Save(ctx context.Context) (*PaymentChannel, error) {
	pcuo.defaults()
	return withHooks(ctx, pcuo.sqlSave, pcuo.mutation, pcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pcuo *PaymentChannelUpdateOne) SaveX(ctx context.Context) *PaymentChannel {
	node, err := pcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pcuo *PaymentChannelUpdateOne) Exec(ctx context.Context) error {
	_, err := pcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcuo *PaymentChannelUpdateOne) ExecX(ctx context.Context) {
	if err := pcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pcuo *PaymentChannelUpdateOne) defaults() {
	if _, ok := pcuo.mutation.UpdatedAt(); !ok && !pcuo.mutation.UpdatedAtCleared() {
		v := paymentchannel.UpdateDefaultUpdatedAt()
		pcuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pcuo *PaymentChannelUpdateOne) check() error {
	if v, ok := pcuo.mutation.Provider(); ok {
		if err := paymentchannel.ProviderValidator(v); err != nil {
			return &ValidationError{Name: "provider", err: fmt.Errorf(`ent: validator failed for field "PaymentChannel.provider": %w`, err)}
		}
	}
	return nil
}

func (pcuo *PaymentChannelUpdateOne) sqlSave(ctx context.Context) (_node *PaymentChannel, err error) {
	if err := pcuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(paymentchannel.Table, paymentchannel.Columns, sqlgraph.NewFieldSpec(paymentchannel.FieldID, field.TypeString))
	id, ok := pcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PaymentChannel.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, paymentchannel.FieldID)
		for _, f := range fields {
			if !paymentchannel.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != paymentchannel.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pcuo.mutation.Name(); ok {
		_spec.SetField(paymentchannel.FieldName, field.TypeString, value)
	}
	if pcuo.mutation.NameCleared() {
		_spec.ClearField(paymentchannel.FieldName, field.TypeString)
	}
	if value, ok := pcuo.mutation.Description(); ok {
		_spec.SetField(paymentchannel.FieldDescription, field.TypeString, value)
	}
	if pcuo.mutation.DescriptionCleared() {
		_spec.ClearField(paymentchannel.FieldDescription, field.TypeString)
	}
	if value, ok := pcuo.mutation.Extras(); ok {
		_spec.SetField(paymentchannel.FieldExtras, field.TypeJSON, value)
	}
	if pcuo.mutation.ExtrasCleared() {
		_spec.ClearField(paymentchannel.FieldExtras, field.TypeJSON)
	}
	if value, ok := pcuo.mutation.CreatedBy(); ok {
		_spec.SetField(paymentchannel.FieldCreatedBy, field.TypeString, value)
	}
	if pcuo.mutation.CreatedByCleared() {
		_spec.ClearField(paymentchannel.FieldCreatedBy, field.TypeString)
	}
	if value, ok := pcuo.mutation.UpdatedBy(); ok {
		_spec.SetField(paymentchannel.FieldUpdatedBy, field.TypeString, value)
	}
	if pcuo.mutation.UpdatedByCleared() {
		_spec.ClearField(paymentchannel.FieldUpdatedBy, field.TypeString)
	}
	if pcuo.mutation.CreatedAtCleared() {
		_spec.ClearField(paymentchannel.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := pcuo.mutation.UpdatedAt(); ok {
		_spec.SetField(paymentchannel.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := pcuo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(paymentchannel.FieldUpdatedAt, field.TypeInt64, value)
	}
	if pcuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(paymentchannel.FieldUpdatedAt, field.TypeInt64)
	}
	if value, ok := pcuo.mutation.Provider(); ok {
		_spec.SetField(paymentchannel.FieldProvider, field.TypeString, value)
	}
	if value, ok := pcuo.mutation.Status(); ok {
		_spec.SetField(paymentchannel.FieldStatus, field.TypeString, value)
	}
	if value, ok := pcuo.mutation.IsDefault(); ok {
		_spec.SetField(paymentchannel.FieldIsDefault, field.TypeBool, value)
	}
	if value, ok := pcuo.mutation.SupportedTypes(); ok {
		_spec.SetField(paymentchannel.FieldSupportedTypes, field.TypeJSON, value)
	}
	if value, ok := pcuo.mutation.AppendedSupportedTypes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, paymentchannel.FieldSupportedTypes, value)
		})
	}
	if value, ok := pcuo.mutation.Config(); ok {
		_spec.SetField(paymentchannel.FieldConfig, field.TypeJSON, value)
	}
	if value, ok := pcuo.mutation.TenantID(); ok {
		_spec.SetField(paymentchannel.FieldTenantID, field.TypeString, value)
	}
	if pcuo.mutation.TenantIDCleared() {
		_spec.ClearField(paymentchannel.FieldTenantID, field.TypeString)
	}
	_node = &PaymentChannel{config: pcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{paymentchannel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pcuo.mutation.done = true
	return _node, nil
}
