// Code generated by ent, DO NOT EDIT.

package paymentlog

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the paymentlog type in the database.
	Label = "payment_log"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldExtras holds the string denoting the extras field in the database.
	FieldExtras = "extras"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldOrderID holds the string denoting the order_id field in the database.
	FieldOrderID = "order_id"
	// FieldChannelID holds the string denoting the channel_id field in the database.
	FieldChannelID = "channel_id"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldStatusBefore holds the string denoting the status_before field in the database.
	FieldStatusBefore = "status_before"
	// FieldStatusAfter holds the string denoting the status_after field in the database.
	FieldStatusAfter = "status_after"
	// FieldRequestData holds the string denoting the request_data field in the database.
	FieldRequestData = "request_data"
	// FieldResponseData holds the string denoting the response_data field in the database.
	FieldResponseData = "response_data"
	// FieldIP holds the string denoting the ip field in the database.
	FieldIP = "ip"
	// FieldUserAgent holds the string denoting the user_agent field in the database.
	FieldUserAgent = "user_agent"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldError holds the string denoting the error field in the database.
	FieldError = "error"
	// EdgeOrder holds the string denoting the order edge name in mutations.
	EdgeOrder = "order"
	// Table holds the table name of the paymentlog in the database.
	Table = "ncse_pay_log"
	// OrderTable is the table that holds the order relation/edge.
	OrderTable = "ncse_pay_log"
	// OrderInverseTable is the table name for the PaymentOrder entity.
	// It exists in this package in order to avoid circular dependency with the "paymentorder" package.
	OrderInverseTable = "ncse_pay_order"
	// OrderColumn is the table column denoting the order relation/edge.
	OrderColumn = "order_id"
)

// Columns holds all SQL columns for paymentlog fields.
var Columns = []string{
	FieldID,
	FieldExtras,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldOrderID,
	FieldChannelID,
	FieldType,
	FieldStatusBefore,
	FieldStatusAfter,
	FieldRequestData,
	FieldResponseData,
	FieldIP,
	FieldUserAgent,
	FieldUserID,
	FieldError,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultExtras holds the default value on creation for the "extras" field.
	DefaultExtras map[string]interface{}
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() int64
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() int64
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() int64
	// OrderIDValidator is a validator for the "order_id" field. It is called by the builders before save.
	OrderIDValidator func(string) error
	// ChannelIDValidator is a validator for the "channel_id" field. It is called by the builders before save.
	ChannelIDValidator func(string) error
	// TypeValidator is a validator for the "type" field. It is called by the builders before save.
	TypeValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)

// OrderOption defines the ordering options for the PaymentLog queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByOrderID orders the results by the order_id field.
func ByOrderID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderID, opts...).ToFunc()
}

// ByChannelID orders the results by the channel_id field.
func ByChannelID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChannelID, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByStatusBefore orders the results by the status_before field.
func ByStatusBefore(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatusBefore, opts...).ToFunc()
}

// ByStatusAfter orders the results by the status_after field.
func ByStatusAfter(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatusAfter, opts...).ToFunc()
}

// ByRequestData orders the results by the request_data field.
func ByRequestData(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRequestData, opts...).ToFunc()
}

// ByResponseData orders the results by the response_data field.
func ByResponseData(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResponseData, opts...).ToFunc()
}

// ByIP orders the results by the ip field.
func ByIP(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIP, opts...).ToFunc()
}

// ByUserAgent orders the results by the user_agent field.
func ByUserAgent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserAgent, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByError orders the results by the error field.
func ByError(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldError, opts...).ToFunc()
}

// ByOrderField orders the results by order field.
func ByOrderField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrderStep(), sql.OrderByField(field, opts...))
	}
}
func newOrderStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrderInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, OrderTable, OrderColumn),
	)
}
