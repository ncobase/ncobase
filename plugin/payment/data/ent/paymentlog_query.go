// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"
	"ncobase/payment/data/ent/paymentlog"
	"ncobase/payment/data/ent/paymentorder"
	"ncobase/payment/data/ent/predicate"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PaymentLogQuery is the builder for querying PaymentLog entities.
type PaymentLogQuery struct {
	config
	ctx        *QueryContext
	order      []paymentlog.OrderOption
	inters     []Interceptor
	predicates []predicate.PaymentLog
	withOrder  *PaymentOrderQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the PaymentLogQuery builder.
func (plq *PaymentLogQuery) Where(ps ...predicate.PaymentLog) *PaymentLogQuery {
	plq.predicates = append(plq.predicates, ps...)
	return plq
}

// Limit the number of records to be returned by this query.
func (plq *PaymentLogQuery) Limit(limit int) *PaymentLogQuery {
	plq.ctx.Limit = &limit
	return plq
}

// Offset to start from.
func (plq *PaymentLogQuery) Offset(offset int) *PaymentLogQuery {
	plq.ctx.Offset = &offset
	return plq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (plq *PaymentLogQuery) Unique(unique bool) *PaymentLogQuery {
	plq.ctx.Unique = &unique
	return plq
}

// Order specifies how the records should be ordered.
func (plq *PaymentLogQuery) Order(o ...paymentlog.OrderOption) *PaymentLogQuery {
	plq.order = append(plq.order, o...)
	return plq
}

// QueryOrder chains the current query on the "order" edge.
func (plq *PaymentLogQuery) QueryOrder() *PaymentOrderQuery {
	query := (&PaymentOrderClient{config: plq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := plq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := plq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(paymentlog.Table, paymentlog.FieldID, selector),
			sqlgraph.To(paymentorder.Table, paymentorder.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, paymentlog.OrderTable, paymentlog.OrderColumn),
		)
		fromU = sqlgraph.SetNeighbors(plq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first PaymentLog entity from the query.
// Returns a *NotFoundError when no PaymentLog was found.
func (plq *PaymentLogQuery) First(ctx context.Context) (*PaymentLog, error) {
	nodes, err := plq.Limit(1).All(setContextOp(ctx, plq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{paymentlog.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (plq *PaymentLogQuery) FirstX(ctx context.Context) *PaymentLog {
	node, err := plq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first PaymentLog ID from the query.
// Returns a *NotFoundError when no PaymentLog ID was found.
func (plq *PaymentLogQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = plq.Limit(1).IDs(setContextOp(ctx, plq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{paymentlog.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (plq *PaymentLogQuery) FirstIDX(ctx context.Context) string {
	id, err := plq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single PaymentLog entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one PaymentLog entity is found.
// Returns a *NotFoundError when no PaymentLog entities are found.
func (plq *PaymentLogQuery) Only(ctx context.Context) (*PaymentLog, error) {
	nodes, err := plq.Limit(2).All(setContextOp(ctx, plq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{paymentlog.Label}
	default:
		return nil, &NotSingularError{paymentlog.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (plq *PaymentLogQuery) OnlyX(ctx context.Context) *PaymentLog {
	node, err := plq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only PaymentLog ID in the query.
// Returns a *NotSingularError when more than one PaymentLog ID is found.
// Returns a *NotFoundError when no entities are found.
func (plq *PaymentLogQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = plq.Limit(2).IDs(setContextOp(ctx, plq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{paymentlog.Label}
	default:
		err = &NotSingularError{paymentlog.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (plq *PaymentLogQuery) OnlyIDX(ctx context.Context) string {
	id, err := plq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of PaymentLogs.
func (plq *PaymentLogQuery) All(ctx context.Context) ([]*PaymentLog, error) {
	ctx = setContextOp(ctx, plq.ctx, ent.OpQueryAll)
	if err := plq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*PaymentLog, *PaymentLogQuery]()
	return withInterceptors[[]*PaymentLog](ctx, plq, qr, plq.inters)
}

// AllX is like All, but panics if an error occurs.
func (plq *PaymentLogQuery) AllX(ctx context.Context) []*PaymentLog {
	nodes, err := plq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of PaymentLog IDs.
func (plq *PaymentLogQuery) IDs(ctx context.Context) (ids []string, err error) {
	if plq.ctx.Unique == nil && plq.path != nil {
		plq.Unique(true)
	}
	ctx = setContextOp(ctx, plq.ctx, ent.OpQueryIDs)
	if err = plq.Select(paymentlog.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (plq *PaymentLogQuery) IDsX(ctx context.Context) []string {
	ids, err := plq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (plq *PaymentLogQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, plq.ctx, ent.OpQueryCount)
	if err := plq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, plq, querierCount[*PaymentLogQuery](), plq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (plq *PaymentLogQuery) CountX(ctx context.Context) int {
	count, err := plq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (plq *PaymentLogQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, plq.ctx, ent.OpQueryExist)
	switch _, err := plq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (plq *PaymentLogQuery) ExistX(ctx context.Context) bool {
	exist, err := plq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the PaymentLogQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (plq *PaymentLogQuery) Clone() *PaymentLogQuery {
	if plq == nil {
		return nil
	}
	return &PaymentLogQuery{
		config:     plq.config,
		ctx:        plq.ctx.Clone(),
		order:      append([]paymentlog.OrderOption{}, plq.order...),
		inters:     append([]Interceptor{}, plq.inters...),
		predicates: append([]predicate.PaymentLog{}, plq.predicates...),
		withOrder:  plq.withOrder.Clone(),
		// clone intermediate query.
		sql:  plq.sql.Clone(),
		path: plq.path,
	}
}

// WithOrder tells the query-builder to eager-load the nodes that are connected to
// the "order" edge. The optional arguments are used to configure the query builder of the edge.
func (plq *PaymentLogQuery) WithOrder(opts ...func(*PaymentOrderQuery)) *PaymentLogQuery {
	query := (&PaymentOrderClient{config: plq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	plq.withOrder = query
	return plq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Extras map[string]interface {} `json:"extras,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.PaymentLog.Query().
//		GroupBy(paymentlog.FieldExtras).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (plq *PaymentLogQuery) GroupBy(field string, fields ...string) *PaymentLogGroupBy {
	plq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &PaymentLogGroupBy{build: plq}
	grbuild.flds = &plq.ctx.Fields
	grbuild.label = paymentlog.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Extras map[string]interface {} `json:"extras,omitempty"`
//	}
//
//	client.PaymentLog.Query().
//		Select(paymentlog.FieldExtras).
//		Scan(ctx, &v)
func (plq *PaymentLogQuery) Select(fields ...string) *PaymentLogSelect {
	plq.ctx.Fields = append(plq.ctx.Fields, fields...)
	sbuild := &PaymentLogSelect{PaymentLogQuery: plq}
	sbuild.label = paymentlog.Label
	sbuild.flds, sbuild.scan = &plq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a PaymentLogSelect configured with the given aggregations.
func (plq *PaymentLogQuery) Aggregate(fns ...AggregateFunc) *PaymentLogSelect {
	return plq.Select().Aggregate(fns...)
}

func (plq *PaymentLogQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range plq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, plq); err != nil {
				return err
			}
		}
	}
	for _, f := range plq.ctx.Fields {
		if !paymentlog.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if plq.path != nil {
		prev, err := plq.path(ctx)
		if err != nil {
			return err
		}
		plq.sql = prev
	}
	return nil
}

func (plq *PaymentLogQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*PaymentLog, error) {
	var (
		nodes       = []*PaymentLog{}
		_spec       = plq.querySpec()
		loadedTypes = [1]bool{
			plq.withOrder != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*PaymentLog).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &PaymentLog{config: plq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, plq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := plq.withOrder; query != nil {
		if err := plq.loadOrder(ctx, query, nodes, nil,
			func(n *PaymentLog, e *PaymentOrder) { n.Edges.Order = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (plq *PaymentLogQuery) loadOrder(ctx context.Context, query *PaymentOrderQuery, nodes []*PaymentLog, init func(*PaymentLog), assign func(*PaymentLog, *PaymentOrder)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*PaymentLog)
	for i := range nodes {
		fk := nodes[i].OrderID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(paymentorder.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "order_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (plq *PaymentLogQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := plq.querySpec()
	_spec.Node.Columns = plq.ctx.Fields
	if len(plq.ctx.Fields) > 0 {
		_spec.Unique = plq.ctx.Unique != nil && *plq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, plq.driver, _spec)
}

func (plq *PaymentLogQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(paymentlog.Table, paymentlog.Columns, sqlgraph.NewFieldSpec(paymentlog.FieldID, field.TypeString))
	_spec.From = plq.sql
	if unique := plq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if plq.path != nil {
		_spec.Unique = true
	}
	if fields := plq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, paymentlog.FieldID)
		for i := range fields {
			if fields[i] != paymentlog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if plq.withOrder != nil {
			_spec.Node.AddColumnOnce(paymentlog.FieldOrderID)
		}
	}
	if ps := plq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := plq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := plq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := plq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (plq *PaymentLogQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(plq.driver.Dialect())
	t1 := builder.Table(paymentlog.Table)
	columns := plq.ctx.Fields
	if len(columns) == 0 {
		columns = paymentlog.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if plq.sql != nil {
		selector = plq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if plq.ctx.Unique != nil && *plq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range plq.predicates {
		p(selector)
	}
	for _, p := range plq.order {
		p(selector)
	}
	if offset := plq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := plq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// PaymentLogGroupBy is the group-by builder for PaymentLog entities.
type PaymentLogGroupBy struct {
	selector
	build *PaymentLogQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (plgb *PaymentLogGroupBy) Aggregate(fns ...AggregateFunc) *PaymentLogGroupBy {
	plgb.fns = append(plgb.fns, fns...)
	return plgb
}

// Scan applies the selector query and scans the result into the given value.
func (plgb *PaymentLogGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, plgb.build.ctx, ent.OpQueryGroupBy)
	if err := plgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PaymentLogQuery, *PaymentLogGroupBy](ctx, plgb.build, plgb, plgb.build.inters, v)
}

func (plgb *PaymentLogGroupBy) sqlScan(ctx context.Context, root *PaymentLogQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(plgb.fns))
	for _, fn := range plgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*plgb.flds)+len(plgb.fns))
		for _, f := range *plgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*plgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := plgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// PaymentLogSelect is the builder for selecting fields of PaymentLog entities.
type PaymentLogSelect struct {
	*PaymentLogQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (pls *PaymentLogSelect) Aggregate(fns ...AggregateFunc) *PaymentLogSelect {
	pls.fns = append(pls.fns, fns...)
	return pls
}

// Scan applies the selector query and scans the result into the given value.
func (pls *PaymentLogSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, pls.ctx, ent.OpQuerySelect)
	if err := pls.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PaymentLogQuery, *PaymentLogSelect](ctx, pls.PaymentLogQuery, pls, pls.inters, v)
}

func (pls *PaymentLogSelect) sqlScan(ctx context.Context, root *PaymentLogQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(pls.fns))
	for _, fn := range pls.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*pls.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pls.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
