// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/payment/data/ent/paymentlog"
	"ncobase/payment/data/ent/paymentorder"
	"ncobase/payment/data/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PaymentLogUpdate is the builder for updating PaymentLog entities.
type PaymentLogUpdate struct {
	config
	hooks    []Hook
	mutation *PaymentLogMutation
}

// Where appends a list predicates to the PaymentLogUpdate builder.
func (plu *PaymentLogUpdate) Where(ps ...predicate.PaymentLog) *PaymentLogUpdate {
	plu.mutation.Where(ps...)
	return plu
}

// SetExtras sets the "extras" field.
func (plu *PaymentLogUpdate) SetExtras(m map[string]interface{}) *PaymentLogUpdate {
	plu.mutation.SetExtras(m)
	return plu
}

// ClearExtras clears the value of the "extras" field.
func (plu *PaymentLogUpdate) ClearExtras() *PaymentLogUpdate {
	plu.mutation.ClearExtras()
	return plu
}

// SetUpdatedAt sets the "updated_at" field.
func (plu *PaymentLogUpdate) SetUpdatedAt(i int64) *PaymentLogUpdate {
	plu.mutation.ResetUpdatedAt()
	plu.mutation.SetUpdatedAt(i)
	return plu
}

// AddUpdatedAt adds i to the "updated_at" field.
func (plu *PaymentLogUpdate) AddUpdatedAt(i int64) *PaymentLogUpdate {
	plu.mutation.AddUpdatedAt(i)
	return plu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (plu *PaymentLogUpdate) ClearUpdatedAt() *PaymentLogUpdate {
	plu.mutation.ClearUpdatedAt()
	return plu
}

// SetOrderID sets the "order_id" field.
func (plu *PaymentLogUpdate) SetOrderID(s string) *PaymentLogUpdate {
	plu.mutation.SetOrderID(s)
	return plu
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (plu *PaymentLogUpdate) SetNillableOrderID(s *string) *PaymentLogUpdate {
	if s != nil {
		plu.SetOrderID(*s)
	}
	return plu
}

// SetChannelID sets the "channel_id" field.
func (plu *PaymentLogUpdate) SetChannelID(s string) *PaymentLogUpdate {
	plu.mutation.SetChannelID(s)
	return plu
}

// SetNillableChannelID sets the "channel_id" field if the given value is not nil.
func (plu *PaymentLogUpdate) SetNillableChannelID(s *string) *PaymentLogUpdate {
	if s != nil {
		plu.SetChannelID(*s)
	}
	return plu
}

// SetType sets the "type" field.
func (plu *PaymentLogUpdate) SetType(s string) *PaymentLogUpdate {
	plu.mutation.SetType(s)
	return plu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (plu *PaymentLogUpdate) SetNillableType(s *string) *PaymentLogUpdate {
	if s != nil {
		plu.SetType(*s)
	}
	return plu
}

// SetStatusBefore sets the "status_before" field.
func (plu *PaymentLogUpdate) SetStatusBefore(s string) *PaymentLogUpdate {
	plu.mutation.SetStatusBefore(s)
	return plu
}

// SetNillableStatusBefore sets the "status_before" field if the given value is not nil.
func (plu *PaymentLogUpdate) SetNillableStatusBefore(s *string) *PaymentLogUpdate {
	if s != nil {
		plu.SetStatusBefore(*s)
	}
	return plu
}

// ClearStatusBefore clears the value of the "status_before" field.
func (plu *PaymentLogUpdate) ClearStatusBefore() *PaymentLogUpdate {
	plu.mutation.ClearStatusBefore()
	return plu
}

// SetStatusAfter sets the "status_after" field.
func (plu *PaymentLogUpdate) SetStatusAfter(s string) *PaymentLogUpdate {
	plu.mutation.SetStatusAfter(s)
	return plu
}

// SetNillableStatusAfter sets the "status_after" field if the given value is not nil.
func (plu *PaymentLogUpdate) SetNillableStatusAfter(s *string) *PaymentLogUpdate {
	if s != nil {
		plu.SetStatusAfter(*s)
	}
	return plu
}

// ClearStatusAfter clears the value of the "status_after" field.
func (plu *PaymentLogUpdate) ClearStatusAfter() *PaymentLogUpdate {
	plu.mutation.ClearStatusAfter()
	return plu
}

// SetRequestData sets the "request_data" field.
func (plu *PaymentLogUpdate) SetRequestData(s string) *PaymentLogUpdate {
	plu.mutation.SetRequestData(s)
	return plu
}

// SetNillableRequestData sets the "request_data" field if the given value is not nil.
func (plu *PaymentLogUpdate) SetNillableRequestData(s *string) *PaymentLogUpdate {
	if s != nil {
		plu.SetRequestData(*s)
	}
	return plu
}

// ClearRequestData clears the value of the "request_data" field.
func (plu *PaymentLogUpdate) ClearRequestData() *PaymentLogUpdate {
	plu.mutation.ClearRequestData()
	return plu
}

// SetResponseData sets the "response_data" field.
func (plu *PaymentLogUpdate) SetResponseData(s string) *PaymentLogUpdate {
	plu.mutation.SetResponseData(s)
	return plu
}

// SetNillableResponseData sets the "response_data" field if the given value is not nil.
func (plu *PaymentLogUpdate) SetNillableResponseData(s *string) *PaymentLogUpdate {
	if s != nil {
		plu.SetResponseData(*s)
	}
	return plu
}

// ClearResponseData clears the value of the "response_data" field.
func (plu *PaymentLogUpdate) ClearResponseData() *PaymentLogUpdate {
	plu.mutation.ClearResponseData()
	return plu
}

// SetIP sets the "ip" field.
func (plu *PaymentLogUpdate) SetIP(s string) *PaymentLogUpdate {
	plu.mutation.SetIP(s)
	return plu
}

// SetNillableIP sets the "ip" field if the given value is not nil.
func (plu *PaymentLogUpdate) SetNillableIP(s *string) *PaymentLogUpdate {
	if s != nil {
		plu.SetIP(*s)
	}
	return plu
}

// ClearIP clears the value of the "ip" field.
func (plu *PaymentLogUpdate) ClearIP() *PaymentLogUpdate {
	plu.mutation.ClearIP()
	return plu
}

// SetUserAgent sets the "user_agent" field.
func (plu *PaymentLogUpdate) SetUserAgent(s string) *PaymentLogUpdate {
	plu.mutation.SetUserAgent(s)
	return plu
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (plu *PaymentLogUpdate) SetNillableUserAgent(s *string) *PaymentLogUpdate {
	if s != nil {
		plu.SetUserAgent(*s)
	}
	return plu
}

// ClearUserAgent clears the value of the "user_agent" field.
func (plu *PaymentLogUpdate) ClearUserAgent() *PaymentLogUpdate {
	plu.mutation.ClearUserAgent()
	return plu
}

// SetUserID sets the "user_id" field.
func (plu *PaymentLogUpdate) SetUserID(s string) *PaymentLogUpdate {
	plu.mutation.SetUserID(s)
	return plu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (plu *PaymentLogUpdate) SetNillableUserID(s *string) *PaymentLogUpdate {
	if s != nil {
		plu.SetUserID(*s)
	}
	return plu
}

// ClearUserID clears the value of the "user_id" field.
func (plu *PaymentLogUpdate) ClearUserID() *PaymentLogUpdate {
	plu.mutation.ClearUserID()
	return plu
}

// SetError sets the "error" field.
func (plu *PaymentLogUpdate) SetError(s string) *PaymentLogUpdate {
	plu.mutation.SetError(s)
	return plu
}

// SetNillableError sets the "error" field if the given value is not nil.
func (plu *PaymentLogUpdate) SetNillableError(s *string) *PaymentLogUpdate {
	if s != nil {
		plu.SetError(*s)
	}
	return plu
}

// ClearError clears the value of the "error" field.
func (plu *PaymentLogUpdate) ClearError() *PaymentLogUpdate {
	plu.mutation.ClearError()
	return plu
}

// SetOrder sets the "order" edge to the PaymentOrder entity.
func (plu *PaymentLogUpdate) SetOrder(p *PaymentOrder) *PaymentLogUpdate {
	return plu.SetOrderID(p.ID)
}

// Mutation returns the PaymentLogMutation object of the builder.
func (plu *PaymentLogUpdate) Mutation() *PaymentLogMutation {
	return plu.mutation
}

// ClearOrder clears the "order" edge to the PaymentOrder entity.
func (plu *PaymentLogUpdate) ClearOrder() *PaymentLogUpdate {
	plu.mutation.ClearOrder()
	return plu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (plu *PaymentLogUpdate) Save(ctx context.Context) (int, error) {
	plu.defaults()
	return withHooks(ctx, plu.sqlSave, plu.mutation, plu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (plu *PaymentLogUpdate) SaveX(ctx context.Context) int {
	affected, err := plu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (plu *PaymentLogUpdate) Exec(ctx context.Context) error {
	_, err := plu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (plu *PaymentLogUpdate) ExecX(ctx context.Context) {
	if err := plu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (plu *PaymentLogUpdate) defaults() {
	if _, ok := plu.mutation.UpdatedAt(); !ok && !plu.mutation.UpdatedAtCleared() {
		v := paymentlog.UpdateDefaultUpdatedAt()
		plu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (plu *PaymentLogUpdate) check() error {
	if v, ok := plu.mutation.OrderID(); ok {
		if err := paymentlog.OrderIDValidator(v); err != nil {
			return &ValidationError{Name: "order_id", err: fmt.Errorf(`ent: validator failed for field "PaymentLog.order_id": %w`, err)}
		}
	}
	if v, ok := plu.mutation.ChannelID(); ok {
		if err := paymentlog.ChannelIDValidator(v); err != nil {
			return &ValidationError{Name: "channel_id", err: fmt.Errorf(`ent: validator failed for field "PaymentLog.channel_id": %w`, err)}
		}
	}
	if v, ok := plu.mutation.GetType(); ok {
		if err := paymentlog.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "PaymentLog.type": %w`, err)}
		}
	}
	if plu.mutation.OrderCleared() && len(plu.mutation.OrderIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PaymentLog.order"`)
	}
	return nil
}

func (plu *PaymentLogUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := plu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(paymentlog.Table, paymentlog.Columns, sqlgraph.NewFieldSpec(paymentlog.FieldID, field.TypeString))
	if ps := plu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := plu.mutation.Extras(); ok {
		_spec.SetField(paymentlog.FieldExtras, field.TypeJSON, value)
	}
	if plu.mutation.ExtrasCleared() {
		_spec.ClearField(paymentlog.FieldExtras, field.TypeJSON)
	}
	if plu.mutation.CreatedAtCleared() {
		_spec.ClearField(paymentlog.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := plu.mutation.UpdatedAt(); ok {
		_spec.SetField(paymentlog.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := plu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(paymentlog.FieldUpdatedAt, field.TypeInt64, value)
	}
	if plu.mutation.UpdatedAtCleared() {
		_spec.ClearField(paymentlog.FieldUpdatedAt, field.TypeInt64)
	}
	if value, ok := plu.mutation.ChannelID(); ok {
		_spec.SetField(paymentlog.FieldChannelID, field.TypeString, value)
	}
	if value, ok := plu.mutation.GetType(); ok {
		_spec.SetField(paymentlog.FieldType, field.TypeString, value)
	}
	if value, ok := plu.mutation.StatusBefore(); ok {
		_spec.SetField(paymentlog.FieldStatusBefore, field.TypeString, value)
	}
	if plu.mutation.StatusBeforeCleared() {
		_spec.ClearField(paymentlog.FieldStatusBefore, field.TypeString)
	}
	if value, ok := plu.mutation.StatusAfter(); ok {
		_spec.SetField(paymentlog.FieldStatusAfter, field.TypeString, value)
	}
	if plu.mutation.StatusAfterCleared() {
		_spec.ClearField(paymentlog.FieldStatusAfter, field.TypeString)
	}
	if value, ok := plu.mutation.RequestData(); ok {
		_spec.SetField(paymentlog.FieldRequestData, field.TypeString, value)
	}
	if plu.mutation.RequestDataCleared() {
		_spec.ClearField(paymentlog.FieldRequestData, field.TypeString)
	}
	if value, ok := plu.mutation.ResponseData(); ok {
		_spec.SetField(paymentlog.FieldResponseData, field.TypeString, value)
	}
	if plu.mutation.ResponseDataCleared() {
		_spec.ClearField(paymentlog.FieldResponseData, field.TypeString)
	}
	if value, ok := plu.mutation.IP(); ok {
		_spec.SetField(paymentlog.FieldIP, field.TypeString, value)
	}
	if plu.mutation.IPCleared() {
		_spec.ClearField(paymentlog.FieldIP, field.TypeString)
	}
	if value, ok := plu.mutation.UserAgent(); ok {
		_spec.SetField(paymentlog.FieldUserAgent, field.TypeString, value)
	}
	if plu.mutation.UserAgentCleared() {
		_spec.ClearField(paymentlog.FieldUserAgent, field.TypeString)
	}
	if value, ok := plu.mutation.UserID(); ok {
		_spec.SetField(paymentlog.FieldUserID, field.TypeString, value)
	}
	if plu.mutation.UserIDCleared() {
		_spec.ClearField(paymentlog.FieldUserID, field.TypeString)
	}
	if value, ok := plu.mutation.Error(); ok {
		_spec.SetField(paymentlog.FieldError, field.TypeString, value)
	}
	if plu.mutation.ErrorCleared() {
		_spec.ClearField(paymentlog.FieldError, field.TypeString)
	}
	if plu.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   paymentlog.OrderTable,
			Columns: []string{paymentlog.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentorder.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := plu.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   paymentlog.OrderTable,
			Columns: []string{paymentlog.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentorder.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, plu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{paymentlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	plu.mutation.done = true
	return n, nil
}

// PaymentLogUpdateOne is the builder for updating a single PaymentLog entity.
type PaymentLogUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PaymentLogMutation
}

// SetExtras sets the "extras" field.
func (pluo *PaymentLogUpdateOne) SetExtras(m map[string]interface{}) *PaymentLogUpdateOne {
	pluo.mutation.SetExtras(m)
	return pluo
}

// ClearExtras clears the value of the "extras" field.
func (pluo *PaymentLogUpdateOne) ClearExtras() *PaymentLogUpdateOne {
	pluo.mutation.ClearExtras()
	return pluo
}

// SetUpdatedAt sets the "updated_at" field.
func (pluo *PaymentLogUpdateOne) SetUpdatedAt(i int64) *PaymentLogUpdateOne {
	pluo.mutation.ResetUpdatedAt()
	pluo.mutation.SetUpdatedAt(i)
	return pluo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (pluo *PaymentLogUpdateOne) AddUpdatedAt(i int64) *PaymentLogUpdateOne {
	pluo.mutation.AddUpdatedAt(i)
	return pluo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (pluo *PaymentLogUpdateOne) ClearUpdatedAt() *PaymentLogUpdateOne {
	pluo.mutation.ClearUpdatedAt()
	return pluo
}

// SetOrderID sets the "order_id" field.
func (pluo *PaymentLogUpdateOne) SetOrderID(s string) *PaymentLogUpdateOne {
	pluo.mutation.SetOrderID(s)
	return pluo
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (pluo *PaymentLogUpdateOne) SetNillableOrderID(s *string) *PaymentLogUpdateOne {
	if s != nil {
		pluo.SetOrderID(*s)
	}
	return pluo
}

// SetChannelID sets the "channel_id" field.
func (pluo *PaymentLogUpdateOne) SetChannelID(s string) *PaymentLogUpdateOne {
	pluo.mutation.SetChannelID(s)
	return pluo
}

// SetNillableChannelID sets the "channel_id" field if the given value is not nil.
func (pluo *PaymentLogUpdateOne) SetNillableChannelID(s *string) *PaymentLogUpdateOne {
	if s != nil {
		pluo.SetChannelID(*s)
	}
	return pluo
}

// SetType sets the "type" field.
func (pluo *PaymentLogUpdateOne) SetType(s string) *PaymentLogUpdateOne {
	pluo.mutation.SetType(s)
	return pluo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (pluo *PaymentLogUpdateOne) SetNillableType(s *string) *PaymentLogUpdateOne {
	if s != nil {
		pluo.SetType(*s)
	}
	return pluo
}

// SetStatusBefore sets the "status_before" field.
func (pluo *PaymentLogUpdateOne) SetStatusBefore(s string) *PaymentLogUpdateOne {
	pluo.mutation.SetStatusBefore(s)
	return pluo
}

// SetNillableStatusBefore sets the "status_before" field if the given value is not nil.
func (pluo *PaymentLogUpdateOne) SetNillableStatusBefore(s *string) *PaymentLogUpdateOne {
	if s != nil {
		pluo.SetStatusBefore(*s)
	}
	return pluo
}

// ClearStatusBefore clears the value of the "status_before" field.
func (pluo *PaymentLogUpdateOne) ClearStatusBefore() *PaymentLogUpdateOne {
	pluo.mutation.ClearStatusBefore()
	return pluo
}

// SetStatusAfter sets the "status_after" field.
func (pluo *PaymentLogUpdateOne) SetStatusAfter(s string) *PaymentLogUpdateOne {
	pluo.mutation.SetStatusAfter(s)
	return pluo
}

// SetNillableStatusAfter sets the "status_after" field if the given value is not nil.
func (pluo *PaymentLogUpdateOne) SetNillableStatusAfter(s *string) *PaymentLogUpdateOne {
	if s != nil {
		pluo.SetStatusAfter(*s)
	}
	return pluo
}

// ClearStatusAfter clears the value of the "status_after" field.
func (pluo *PaymentLogUpdateOne) ClearStatusAfter() *PaymentLogUpdateOne {
	pluo.mutation.ClearStatusAfter()
	return pluo
}

// SetRequestData sets the "request_data" field.
func (pluo *PaymentLogUpdateOne) SetRequestData(s string) *PaymentLogUpdateOne {
	pluo.mutation.SetRequestData(s)
	return pluo
}

// SetNillableRequestData sets the "request_data" field if the given value is not nil.
func (pluo *PaymentLogUpdateOne) SetNillableRequestData(s *string) *PaymentLogUpdateOne {
	if s != nil {
		pluo.SetRequestData(*s)
	}
	return pluo
}

// ClearRequestData clears the value of the "request_data" field.
func (pluo *PaymentLogUpdateOne) ClearRequestData() *PaymentLogUpdateOne {
	pluo.mutation.ClearRequestData()
	return pluo
}

// SetResponseData sets the "response_data" field.
func (pluo *PaymentLogUpdateOne) SetResponseData(s string) *PaymentLogUpdateOne {
	pluo.mutation.SetResponseData(s)
	return pluo
}

// SetNillableResponseData sets the "response_data" field if the given value is not nil.
func (pluo *PaymentLogUpdateOne) SetNillableResponseData(s *string) *PaymentLogUpdateOne {
	if s != nil {
		pluo.SetResponseData(*s)
	}
	return pluo
}

// ClearResponseData clears the value of the "response_data" field.
func (pluo *PaymentLogUpdateOne) ClearResponseData() *PaymentLogUpdateOne {
	pluo.mutation.ClearResponseData()
	return pluo
}

// SetIP sets the "ip" field.
func (pluo *PaymentLogUpdateOne) SetIP(s string) *PaymentLogUpdateOne {
	pluo.mutation.SetIP(s)
	return pluo
}

// SetNillableIP sets the "ip" field if the given value is not nil.
func (pluo *PaymentLogUpdateOne) SetNillableIP(s *string) *PaymentLogUpdateOne {
	if s != nil {
		pluo.SetIP(*s)
	}
	return pluo
}

// ClearIP clears the value of the "ip" field.
func (pluo *PaymentLogUpdateOne) ClearIP() *PaymentLogUpdateOne {
	pluo.mutation.ClearIP()
	return pluo
}

// SetUserAgent sets the "user_agent" field.
func (pluo *PaymentLogUpdateOne) SetUserAgent(s string) *PaymentLogUpdateOne {
	pluo.mutation.SetUserAgent(s)
	return pluo
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (pluo *PaymentLogUpdateOne) SetNillableUserAgent(s *string) *PaymentLogUpdateOne {
	if s != nil {
		pluo.SetUserAgent(*s)
	}
	return pluo
}

// ClearUserAgent clears the value of the "user_agent" field.
func (pluo *PaymentLogUpdateOne) ClearUserAgent() *PaymentLogUpdateOne {
	pluo.mutation.ClearUserAgent()
	return pluo
}

// SetUserID sets the "user_id" field.
func (pluo *PaymentLogUpdateOne) SetUserID(s string) *PaymentLogUpdateOne {
	pluo.mutation.SetUserID(s)
	return pluo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (pluo *PaymentLogUpdateOne) SetNillableUserID(s *string) *PaymentLogUpdateOne {
	if s != nil {
		pluo.SetUserID(*s)
	}
	return pluo
}

// ClearUserID clears the value of the "user_id" field.
func (pluo *PaymentLogUpdateOne) ClearUserID() *PaymentLogUpdateOne {
	pluo.mutation.ClearUserID()
	return pluo
}

// SetError sets the "error" field.
func (pluo *PaymentLogUpdateOne) SetError(s string) *PaymentLogUpdateOne {
	pluo.mutation.SetError(s)
	return pluo
}

// SetNillableError sets the "error" field if the given value is not nil.
func (pluo *PaymentLogUpdateOne) SetNillableError(s *string) *PaymentLogUpdateOne {
	if s != nil {
		pluo.SetError(*s)
	}
	return pluo
}

// ClearError clears the value of the "error" field.
func (pluo *PaymentLogUpdateOne) ClearError() *PaymentLogUpdateOne {
	pluo.mutation.ClearError()
	return pluo
}

// SetOrder sets the "order" edge to the PaymentOrder entity.
func (pluo *PaymentLogUpdateOne) SetOrder(p *PaymentOrder) *PaymentLogUpdateOne {
	return pluo.SetOrderID(p.ID)
}

// Mutation returns the PaymentLogMutation object of the builder.
func (pluo *PaymentLogUpdateOne) Mutation() *PaymentLogMutation {
	return pluo.mutation
}

// ClearOrder clears the "order" edge to the PaymentOrder entity.
func (pluo *PaymentLogUpdateOne) ClearOrder() *PaymentLogUpdateOne {
	pluo.mutation.ClearOrder()
	return pluo
}

// Where appends a list predicates to the PaymentLogUpdate builder.
func (pluo *PaymentLogUpdateOne) Where(ps ...predicate.PaymentLog) *PaymentLogUpdateOne {
	pluo.mutation.Where(ps...)
	return pluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pluo *PaymentLogUpdateOne) Select(field string, fields ...string) *PaymentLogUpdateOne {
	pluo.fields = append([]string{field}, fields...)
	return pluo
}

// Save executes the query and returns the updated PaymentLog entity.
func (pluo *PaymentLogUpdateOne) Save(ctx context.Context) (*PaymentLog, error) {
	pluo.defaults()
	return withHooks(ctx, pluo.sqlSave, pluo.mutation, pluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pluo *PaymentLogUpdateOne) SaveX(ctx context.Context) *PaymentLog {
	node, err := pluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pluo *PaymentLogUpdateOne) Exec(ctx context.Context) error {
	_, err := pluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pluo *PaymentLogUpdateOne) ExecX(ctx context.Context) {
	if err := pluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pluo *PaymentLogUpdateOne) defaults() {
	if _, ok := pluo.mutation.UpdatedAt(); !ok && !pluo.mutation.UpdatedAtCleared() {
		v := paymentlog.UpdateDefaultUpdatedAt()
		pluo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pluo *PaymentLogUpdateOne) check() error {
	if v, ok := pluo.mutation.OrderID(); ok {
		if err := paymentlog.OrderIDValidator(v); err != nil {
			return &ValidationError{Name: "order_id", err: fmt.Errorf(`ent: validator failed for field "PaymentLog.order_id": %w`, err)}
		}
	}
	if v, ok := pluo.mutation.ChannelID(); ok {
		if err := paymentlog.ChannelIDValidator(v); err != nil {
			return &ValidationError{Name: "channel_id", err: fmt.Errorf(`ent: validator failed for field "PaymentLog.channel_id": %w`, err)}
		}
	}
	if v, ok := pluo.mutation.GetType(); ok {
		if err := paymentlog.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "PaymentLog.type": %w`, err)}
		}
	}
	if pluo.mutation.OrderCleared() && len(pluo.mutation.OrderIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PaymentLog.order"`)
	}
	return nil
}

func (pluo *PaymentLogUpdateOne) sqlSave(ctx context.Context) (_node *PaymentLog, err error) {
	if err := pluo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(paymentlog.Table, paymentlog.Columns, sqlgraph.NewFieldSpec(paymentlog.FieldID, field.TypeString))
	id, ok := pluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PaymentLog.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, paymentlog.FieldID)
		for _, f := range fields {
			if !paymentlog.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != paymentlog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pluo.mutation.Extras(); ok {
		_spec.SetField(paymentlog.FieldExtras, field.TypeJSON, value)
	}
	if pluo.mutation.ExtrasCleared() {
		_spec.ClearField(paymentlog.FieldExtras, field.TypeJSON)
	}
	if pluo.mutation.CreatedAtCleared() {
		_spec.ClearField(paymentlog.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := pluo.mutation.UpdatedAt(); ok {
		_spec.SetField(paymentlog.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := pluo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(paymentlog.FieldUpdatedAt, field.TypeInt64, value)
	}
	if pluo.mutation.UpdatedAtCleared() {
		_spec.ClearField(paymentlog.FieldUpdatedAt, field.TypeInt64)
	}
	if value, ok := pluo.mutation.ChannelID(); ok {
		_spec.SetField(paymentlog.FieldChannelID, field.TypeString, value)
	}
	if value, ok := pluo.mutation.GetType(); ok {
		_spec.SetField(paymentlog.FieldType, field.TypeString, value)
	}
	if value, ok := pluo.mutation.StatusBefore(); ok {
		_spec.SetField(paymentlog.FieldStatusBefore, field.TypeString, value)
	}
	if pluo.mutation.StatusBeforeCleared() {
		_spec.ClearField(paymentlog.FieldStatusBefore, field.TypeString)
	}
	if value, ok := pluo.mutation.StatusAfter(); ok {
		_spec.SetField(paymentlog.FieldStatusAfter, field.TypeString, value)
	}
	if pluo.mutation.StatusAfterCleared() {
		_spec.ClearField(paymentlog.FieldStatusAfter, field.TypeString)
	}
	if value, ok := pluo.mutation.RequestData(); ok {
		_spec.SetField(paymentlog.FieldRequestData, field.TypeString, value)
	}
	if pluo.mutation.RequestDataCleared() {
		_spec.ClearField(paymentlog.FieldRequestData, field.TypeString)
	}
	if value, ok := pluo.mutation.ResponseData(); ok {
		_spec.SetField(paymentlog.FieldResponseData, field.TypeString, value)
	}
	if pluo.mutation.ResponseDataCleared() {
		_spec.ClearField(paymentlog.FieldResponseData, field.TypeString)
	}
	if value, ok := pluo.mutation.IP(); ok {
		_spec.SetField(paymentlog.FieldIP, field.TypeString, value)
	}
	if pluo.mutation.IPCleared() {
		_spec.ClearField(paymentlog.FieldIP, field.TypeString)
	}
	if value, ok := pluo.mutation.UserAgent(); ok {
		_spec.SetField(paymentlog.FieldUserAgent, field.TypeString, value)
	}
	if pluo.mutation.UserAgentCleared() {
		_spec.ClearField(paymentlog.FieldUserAgent, field.TypeString)
	}
	if value, ok := pluo.mutation.UserID(); ok {
		_spec.SetField(paymentlog.FieldUserID, field.TypeString, value)
	}
	if pluo.mutation.UserIDCleared() {
		_spec.ClearField(paymentlog.FieldUserID, field.TypeString)
	}
	if value, ok := pluo.mutation.Error(); ok {
		_spec.SetField(paymentlog.FieldError, field.TypeString, value)
	}
	if pluo.mutation.ErrorCleared() {
		_spec.ClearField(paymentlog.FieldError, field.TypeString)
	}
	if pluo.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   paymentlog.OrderTable,
			Columns: []string{paymentlog.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentorder.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pluo.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   paymentlog.OrderTable,
			Columns: []string{paymentlog.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentorder.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PaymentLog{config: pluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{paymentlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pluo.mutation.done = true
	return _node, nil
}
