// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/payment/data/ent/paymentlog"
	"ncobase/payment/data/ent/paymentorder"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PaymentOrderCreate is the builder for creating a PaymentOrder entity.
type PaymentOrderCreate struct {
	config
	mutation *PaymentOrderMutation
	hooks    []Hook
}

// SetExtras sets the "extras" field.
func (poc *PaymentOrderCreate) SetExtras(m map[string]interface{}) *PaymentOrderCreate {
	poc.mutation.SetExtras(m)
	return poc
}

// SetCreatedBy sets the "created_by" field.
func (poc *PaymentOrderCreate) SetCreatedBy(s string) *PaymentOrderCreate {
	poc.mutation.SetCreatedBy(s)
	return poc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (poc *PaymentOrderCreate) SetNillableCreatedBy(s *string) *PaymentOrderCreate {
	if s != nil {
		poc.SetCreatedBy(*s)
	}
	return poc
}

// SetUpdatedBy sets the "updated_by" field.
func (poc *PaymentOrderCreate) SetUpdatedBy(s string) *PaymentOrderCreate {
	poc.mutation.SetUpdatedBy(s)
	return poc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (poc *PaymentOrderCreate) SetNillableUpdatedBy(s *string) *PaymentOrderCreate {
	if s != nil {
		poc.SetUpdatedBy(*s)
	}
	return poc
}

// SetCreatedAt sets the "created_at" field.
func (poc *PaymentOrderCreate) SetCreatedAt(i int64) *PaymentOrderCreate {
	poc.mutation.SetCreatedAt(i)
	return poc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (poc *PaymentOrderCreate) SetNillableCreatedAt(i *int64) *PaymentOrderCreate {
	if i != nil {
		poc.SetCreatedAt(*i)
	}
	return poc
}

// SetUpdatedAt sets the "updated_at" field.
func (poc *PaymentOrderCreate) SetUpdatedAt(i int64) *PaymentOrderCreate {
	poc.mutation.SetUpdatedAt(i)
	return poc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (poc *PaymentOrderCreate) SetNillableUpdatedAt(i *int64) *PaymentOrderCreate {
	if i != nil {
		poc.SetUpdatedAt(*i)
	}
	return poc
}

// SetOrderNumber sets the "order_number" field.
func (poc *PaymentOrderCreate) SetOrderNumber(s string) *PaymentOrderCreate {
	poc.mutation.SetOrderNumber(s)
	return poc
}

// SetAmount sets the "amount" field.
func (poc *PaymentOrderCreate) SetAmount(f float64) *PaymentOrderCreate {
	poc.mutation.SetAmount(f)
	return poc
}

// SetCurrency sets the "currency" field.
func (poc *PaymentOrderCreate) SetCurrency(s string) *PaymentOrderCreate {
	poc.mutation.SetCurrency(s)
	return poc
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (poc *PaymentOrderCreate) SetNillableCurrency(s *string) *PaymentOrderCreate {
	if s != nil {
		poc.SetCurrency(*s)
	}
	return poc
}

// SetStatus sets the "status" field.
func (poc *PaymentOrderCreate) SetStatus(s string) *PaymentOrderCreate {
	poc.mutation.SetStatus(s)
	return poc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (poc *PaymentOrderCreate) SetNillableStatus(s *string) *PaymentOrderCreate {
	if s != nil {
		poc.SetStatus(*s)
	}
	return poc
}

// SetType sets the "type" field.
func (poc *PaymentOrderCreate) SetType(s string) *PaymentOrderCreate {
	poc.mutation.SetType(s)
	return poc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (poc *PaymentOrderCreate) SetNillableType(s *string) *PaymentOrderCreate {
	if s != nil {
		poc.SetType(*s)
	}
	return poc
}

// SetChannelID sets the "channel_id" field.
func (poc *PaymentOrderCreate) SetChannelID(s string) *PaymentOrderCreate {
	poc.mutation.SetChannelID(s)
	return poc
}

// SetUserID sets the "user_id" field.
func (poc *PaymentOrderCreate) SetUserID(s string) *PaymentOrderCreate {
	poc.mutation.SetUserID(s)
	return poc
}

// SetTenantID sets the "tenant_id" field.
func (poc *PaymentOrderCreate) SetTenantID(s string) *PaymentOrderCreate {
	poc.mutation.SetTenantID(s)
	return poc
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (poc *PaymentOrderCreate) SetNillableTenantID(s *string) *PaymentOrderCreate {
	if s != nil {
		poc.SetTenantID(*s)
	}
	return poc
}

// SetProductID sets the "product_id" field.
func (poc *PaymentOrderCreate) SetProductID(s string) *PaymentOrderCreate {
	poc.mutation.SetProductID(s)
	return poc
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (poc *PaymentOrderCreate) SetNillableProductID(s *string) *PaymentOrderCreate {
	if s != nil {
		poc.SetProductID(*s)
	}
	return poc
}

// SetSubscriptionID sets the "subscription_id" field.
func (poc *PaymentOrderCreate) SetSubscriptionID(s string) *PaymentOrderCreate {
	poc.mutation.SetSubscriptionID(s)
	return poc
}

// SetNillableSubscriptionID sets the "subscription_id" field if the given value is not nil.
func (poc *PaymentOrderCreate) SetNillableSubscriptionID(s *string) *PaymentOrderCreate {
	if s != nil {
		poc.SetSubscriptionID(*s)
	}
	return poc
}

// SetExpiresAt sets the "expires_at" field.
func (poc *PaymentOrderCreate) SetExpiresAt(t time.Time) *PaymentOrderCreate {
	poc.mutation.SetExpiresAt(t)
	return poc
}

// SetPaidAt sets the "paid_at" field.
func (poc *PaymentOrderCreate) SetPaidAt(t time.Time) *PaymentOrderCreate {
	poc.mutation.SetPaidAt(t)
	return poc
}

// SetNillablePaidAt sets the "paid_at" field if the given value is not nil.
func (poc *PaymentOrderCreate) SetNillablePaidAt(t *time.Time) *PaymentOrderCreate {
	if t != nil {
		poc.SetPaidAt(*t)
	}
	return poc
}

// SetProviderRef sets the "provider_ref" field.
func (poc *PaymentOrderCreate) SetProviderRef(s string) *PaymentOrderCreate {
	poc.mutation.SetProviderRef(s)
	return poc
}

// SetNillableProviderRef sets the "provider_ref" field if the given value is not nil.
func (poc *PaymentOrderCreate) SetNillableProviderRef(s *string) *PaymentOrderCreate {
	if s != nil {
		poc.SetProviderRef(*s)
	}
	return poc
}

// SetDescription sets the "description" field.
func (poc *PaymentOrderCreate) SetDescription(s string) *PaymentOrderCreate {
	poc.mutation.SetDescription(s)
	return poc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (poc *PaymentOrderCreate) SetNillableDescription(s *string) *PaymentOrderCreate {
	if s != nil {
		poc.SetDescription(*s)
	}
	return poc
}

// SetID sets the "id" field.
func (poc *PaymentOrderCreate) SetID(s string) *PaymentOrderCreate {
	poc.mutation.SetID(s)
	return poc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (poc *PaymentOrderCreate) SetNillableID(s *string) *PaymentOrderCreate {
	if s != nil {
		poc.SetID(*s)
	}
	return poc
}

// AddLogIDs adds the "logs" edge to the PaymentLog entity by IDs.
func (poc *PaymentOrderCreate) AddLogIDs(ids ...string) *PaymentOrderCreate {
	poc.mutation.AddLogIDs(ids...)
	return poc
}

// AddLogs adds the "logs" edges to the PaymentLog entity.
func (poc *PaymentOrderCreate) AddLogs(p ...*PaymentLog) *PaymentOrderCreate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return poc.AddLogIDs(ids...)
}

// Mutation returns the PaymentOrderMutation object of the builder.
func (poc *PaymentOrderCreate) Mutation() *PaymentOrderMutation {
	return poc.mutation
}

// Save creates the PaymentOrder in the database.
func (poc *PaymentOrderCreate) Save(ctx context.Context) (*PaymentOrder, error) {
	poc.defaults()
	return withHooks(ctx, poc.sqlSave, poc.mutation, poc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (poc *PaymentOrderCreate) SaveX(ctx context.Context) *PaymentOrder {
	v, err := poc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (poc *PaymentOrderCreate) Exec(ctx context.Context) error {
	_, err := poc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (poc *PaymentOrderCreate) ExecX(ctx context.Context) {
	if err := poc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (poc *PaymentOrderCreate) defaults() {
	if _, ok := poc.mutation.Extras(); !ok {
		v := paymentorder.DefaultExtras
		poc.mutation.SetExtras(v)
	}
	if _, ok := poc.mutation.CreatedAt(); !ok {
		v := paymentorder.DefaultCreatedAt()
		poc.mutation.SetCreatedAt(v)
	}
	if _, ok := poc.mutation.UpdatedAt(); !ok {
		v := paymentorder.DefaultUpdatedAt()
		poc.mutation.SetUpdatedAt(v)
	}
	if _, ok := poc.mutation.Currency(); !ok {
		v := paymentorder.DefaultCurrency
		poc.mutation.SetCurrency(v)
	}
	if _, ok := poc.mutation.Status(); !ok {
		v := paymentorder.DefaultStatus
		poc.mutation.SetStatus(v)
	}
	if _, ok := poc.mutation.GetType(); !ok {
		v := paymentorder.DefaultType
		poc.mutation.SetType(v)
	}
	if _, ok := poc.mutation.ID(); !ok {
		v := paymentorder.DefaultID()
		poc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (poc *PaymentOrderCreate) check() error {
	if _, ok := poc.mutation.OrderNumber(); !ok {
		return &ValidationError{Name: "order_number", err: errors.New(`ent: missing required field "PaymentOrder.order_number"`)}
	}
	if v, ok := poc.mutation.OrderNumber(); ok {
		if err := paymentorder.OrderNumberValidator(v); err != nil {
			return &ValidationError{Name: "order_number", err: fmt.Errorf(`ent: validator failed for field "PaymentOrder.order_number": %w`, err)}
		}
	}
	if _, ok := poc.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New(`ent: missing required field "PaymentOrder.amount"`)}
	}
	if v, ok := poc.mutation.Amount(); ok {
		if err := paymentorder.AmountValidator(v); err != nil {
			return &ValidationError{Name: "amount", err: fmt.Errorf(`ent: validator failed for field "PaymentOrder.amount": %w`, err)}
		}
	}
	if _, ok := poc.mutation.Currency(); !ok {
		return &ValidationError{Name: "currency", err: errors.New(`ent: missing required field "PaymentOrder.currency"`)}
	}
	if _, ok := poc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "PaymentOrder.status"`)}
	}
	if _, ok := poc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "PaymentOrder.type"`)}
	}
	if _, ok := poc.mutation.ChannelID(); !ok {
		return &ValidationError{Name: "channel_id", err: errors.New(`ent: missing required field "PaymentOrder.channel_id"`)}
	}
	if v, ok := poc.mutation.ChannelID(); ok {
		if err := paymentorder.ChannelIDValidator(v); err != nil {
			return &ValidationError{Name: "channel_id", err: fmt.Errorf(`ent: validator failed for field "PaymentOrder.channel_id": %w`, err)}
		}
	}
	if _, ok := poc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "PaymentOrder.user_id"`)}
	}
	if v, ok := poc.mutation.UserID(); ok {
		if err := paymentorder.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "PaymentOrder.user_id": %w`, err)}
		}
	}
	if _, ok := poc.mutation.ExpiresAt(); !ok {
		return &ValidationError{Name: "expires_at", err: errors.New(`ent: missing required field "PaymentOrder.expires_at"`)}
	}
	if v, ok := poc.mutation.ID(); ok {
		if err := paymentorder.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "PaymentOrder.id": %w`, err)}
		}
	}
	return nil
}

func (poc *PaymentOrderCreate) sqlSave(ctx context.Context) (*PaymentOrder, error) {
	if err := poc.check(); err != nil {
		return nil, err
	}
	_node, _spec := poc.createSpec()
	if err := sqlgraph.CreateNode(ctx, poc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected PaymentOrder.ID type: %T", _spec.ID.Value)
		}
	}
	poc.mutation.id = &_node.ID
	poc.mutation.done = true
	return _node, nil
}

func (poc *PaymentOrderCreate) createSpec() (*PaymentOrder, *sqlgraph.CreateSpec) {
	var (
		_node = &PaymentOrder{config: poc.config}
		_spec = sqlgraph.NewCreateSpec(paymentorder.Table, sqlgraph.NewFieldSpec(paymentorder.FieldID, field.TypeString))
	)
	if id, ok := poc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := poc.mutation.Extras(); ok {
		_spec.SetField(paymentorder.FieldExtras, field.TypeJSON, value)
		_node.Extras = value
	}
	if value, ok := poc.mutation.CreatedBy(); ok {
		_spec.SetField(paymentorder.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := poc.mutation.UpdatedBy(); ok {
		_spec.SetField(paymentorder.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := poc.mutation.CreatedAt(); ok {
		_spec.SetField(paymentorder.FieldCreatedAt, field.TypeInt64, value)
		_node.CreatedAt = value
	}
	if value, ok := poc.mutation.UpdatedAt(); ok {
		_spec.SetField(paymentorder.FieldUpdatedAt, field.TypeInt64, value)
		_node.UpdatedAt = value
	}
	if value, ok := poc.mutation.OrderNumber(); ok {
		_spec.SetField(paymentorder.FieldOrderNumber, field.TypeString, value)
		_node.OrderNumber = value
	}
	if value, ok := poc.mutation.Amount(); ok {
		_spec.SetField(paymentorder.FieldAmount, field.TypeFloat64, value)
		_node.Amount = value
	}
	if value, ok := poc.mutation.Currency(); ok {
		_spec.SetField(paymentorder.FieldCurrency, field.TypeString, value)
		_node.Currency = value
	}
	if value, ok := poc.mutation.Status(); ok {
		_spec.SetField(paymentorder.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := poc.mutation.GetType(); ok {
		_spec.SetField(paymentorder.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := poc.mutation.ChannelID(); ok {
		_spec.SetField(paymentorder.FieldChannelID, field.TypeString, value)
		_node.ChannelID = value
	}
	if value, ok := poc.mutation.UserID(); ok {
		_spec.SetField(paymentorder.FieldUserID, field.TypeString, value)
		_node.UserID = value
	}
	if value, ok := poc.mutation.TenantID(); ok {
		_spec.SetField(paymentorder.FieldTenantID, field.TypeString, value)
		_node.TenantID = value
	}
	if value, ok := poc.mutation.ProductID(); ok {
		_spec.SetField(paymentorder.FieldProductID, field.TypeString, value)
		_node.ProductID = value
	}
	if value, ok := poc.mutation.SubscriptionID(); ok {
		_spec.SetField(paymentorder.FieldSubscriptionID, field.TypeString, value)
		_node.SubscriptionID = value
	}
	if value, ok := poc.mutation.ExpiresAt(); ok {
		_spec.SetField(paymentorder.FieldExpiresAt, field.TypeTime, value)
		_node.ExpiresAt = value
	}
	if value, ok := poc.mutation.PaidAt(); ok {
		_spec.SetField(paymentorder.FieldPaidAt, field.TypeTime, value)
		_node.PaidAt = &value
	}
	if value, ok := poc.mutation.ProviderRef(); ok {
		_spec.SetField(paymentorder.FieldProviderRef, field.TypeString, value)
		_node.ProviderRef = value
	}
	if value, ok := poc.mutation.Description(); ok {
		_spec.SetField(paymentorder.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if nodes := poc.mutation.LogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   paymentorder.LogsTable,
			Columns: []string{paymentorder.LogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentlog.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PaymentOrderCreateBulk is the builder for creating many PaymentOrder entities in bulk.
type PaymentOrderCreateBulk struct {
	config
	err      error
	builders []*PaymentOrderCreate
}

// Save creates the PaymentOrder entities in the database.
func (pocb *PaymentOrderCreateBulk) Save(ctx context.Context) ([]*PaymentOrder, error) {
	if pocb.err != nil {
		return nil, pocb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pocb.builders))
	nodes := make([]*PaymentOrder, len(pocb.builders))
	mutators := make([]Mutator, len(pocb.builders))
	for i := range pocb.builders {
		func(i int, root context.Context) {
			builder := pocb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PaymentOrderMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pocb *PaymentOrderCreateBulk) SaveX(ctx context.Context) []*PaymentOrder {
	v, err := pocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pocb *PaymentOrderCreateBulk) Exec(ctx context.Context) error {
	_, err := pocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pocb *PaymentOrderCreateBulk) ExecX(ctx context.Context) {
	if err := pocb.Exec(ctx); err != nil {
		panic(err)
	}
}
