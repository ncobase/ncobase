// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/payment/data/ent/paymentlog"
	"ncobase/payment/data/ent/paymentorder"
	"ncobase/payment/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PaymentOrderUpdate is the builder for updating PaymentOrder entities.
type PaymentOrderUpdate struct {
	config
	hooks    []Hook
	mutation *PaymentOrderMutation
}

// Where appends a list predicates to the PaymentOrderUpdate builder.
func (pou *PaymentOrderUpdate) Where(ps ...predicate.PaymentOrder) *PaymentOrderUpdate {
	pou.mutation.Where(ps...)
	return pou
}

// SetExtras sets the "extras" field.
func (pou *PaymentOrderUpdate) SetExtras(m map[string]interface{}) *PaymentOrderUpdate {
	pou.mutation.SetExtras(m)
	return pou
}

// ClearExtras clears the value of the "extras" field.
func (pou *PaymentOrderUpdate) ClearExtras() *PaymentOrderUpdate {
	pou.mutation.ClearExtras()
	return pou
}

// SetCreatedBy sets the "created_by" field.
func (pou *PaymentOrderUpdate) SetCreatedBy(s string) *PaymentOrderUpdate {
	pou.mutation.SetCreatedBy(s)
	return pou
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (pou *PaymentOrderUpdate) SetNillableCreatedBy(s *string) *PaymentOrderUpdate {
	if s != nil {
		pou.SetCreatedBy(*s)
	}
	return pou
}

// ClearCreatedBy clears the value of the "created_by" field.
func (pou *PaymentOrderUpdate) ClearCreatedBy() *PaymentOrderUpdate {
	pou.mutation.ClearCreatedBy()
	return pou
}

// SetUpdatedBy sets the "updated_by" field.
func (pou *PaymentOrderUpdate) SetUpdatedBy(s string) *PaymentOrderUpdate {
	pou.mutation.SetUpdatedBy(s)
	return pou
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (pou *PaymentOrderUpdate) SetNillableUpdatedBy(s *string) *PaymentOrderUpdate {
	if s != nil {
		pou.SetUpdatedBy(*s)
	}
	return pou
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (pou *PaymentOrderUpdate) ClearUpdatedBy() *PaymentOrderUpdate {
	pou.mutation.ClearUpdatedBy()
	return pou
}

// SetUpdatedAt sets the "updated_at" field.
func (pou *PaymentOrderUpdate) SetUpdatedAt(i int64) *PaymentOrderUpdate {
	pou.mutation.ResetUpdatedAt()
	pou.mutation.SetUpdatedAt(i)
	return pou
}

// AddUpdatedAt adds i to the "updated_at" field.
func (pou *PaymentOrderUpdate) AddUpdatedAt(i int64) *PaymentOrderUpdate {
	pou.mutation.AddUpdatedAt(i)
	return pou
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (pou *PaymentOrderUpdate) ClearUpdatedAt() *PaymentOrderUpdate {
	pou.mutation.ClearUpdatedAt()
	return pou
}

// SetOrderNumber sets the "order_number" field.
func (pou *PaymentOrderUpdate) SetOrderNumber(s string) *PaymentOrderUpdate {
	pou.mutation.SetOrderNumber(s)
	return pou
}

// SetNillableOrderNumber sets the "order_number" field if the given value is not nil.
func (pou *PaymentOrderUpdate) SetNillableOrderNumber(s *string) *PaymentOrderUpdate {
	if s != nil {
		pou.SetOrderNumber(*s)
	}
	return pou
}

// SetAmount sets the "amount" field.
func (pou *PaymentOrderUpdate) SetAmount(f float64) *PaymentOrderUpdate {
	pou.mutation.ResetAmount()
	pou.mutation.SetAmount(f)
	return pou
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (pou *PaymentOrderUpdate) SetNillableAmount(f *float64) *PaymentOrderUpdate {
	if f != nil {
		pou.SetAmount(*f)
	}
	return pou
}

// AddAmount adds f to the "amount" field.
func (pou *PaymentOrderUpdate) AddAmount(f float64) *PaymentOrderUpdate {
	pou.mutation.AddAmount(f)
	return pou
}

// SetCurrency sets the "currency" field.
func (pou *PaymentOrderUpdate) SetCurrency(s string) *PaymentOrderUpdate {
	pou.mutation.SetCurrency(s)
	return pou
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (pou *PaymentOrderUpdate) SetNillableCurrency(s *string) *PaymentOrderUpdate {
	if s != nil {
		pou.SetCurrency(*s)
	}
	return pou
}

// SetStatus sets the "status" field.
func (pou *PaymentOrderUpdate) SetStatus(s string) *PaymentOrderUpdate {
	pou.mutation.SetStatus(s)
	return pou
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pou *PaymentOrderUpdate) SetNillableStatus(s *string) *PaymentOrderUpdate {
	if s != nil {
		pou.SetStatus(*s)
	}
	return pou
}

// SetType sets the "type" field.
func (pou *PaymentOrderUpdate) SetType(s string) *PaymentOrderUpdate {
	pou.mutation.SetType(s)
	return pou
}

// SetNillableType sets the "type" field if the given value is not nil.
func (pou *PaymentOrderUpdate) SetNillableType(s *string) *PaymentOrderUpdate {
	if s != nil {
		pou.SetType(*s)
	}
	return pou
}

// SetChannelID sets the "channel_id" field.
func (pou *PaymentOrderUpdate) SetChannelID(s string) *PaymentOrderUpdate {
	pou.mutation.SetChannelID(s)
	return pou
}

// SetNillableChannelID sets the "channel_id" field if the given value is not nil.
func (pou *PaymentOrderUpdate) SetNillableChannelID(s *string) *PaymentOrderUpdate {
	if s != nil {
		pou.SetChannelID(*s)
	}
	return pou
}

// SetUserID sets the "user_id" field.
func (pou *PaymentOrderUpdate) SetUserID(s string) *PaymentOrderUpdate {
	pou.mutation.SetUserID(s)
	return pou
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (pou *PaymentOrderUpdate) SetNillableUserID(s *string) *PaymentOrderUpdate {
	if s != nil {
		pou.SetUserID(*s)
	}
	return pou
}

// SetSpaceID sets the "space_id" field.
func (pou *PaymentOrderUpdate) SetSpaceID(s string) *PaymentOrderUpdate {
	pou.mutation.SetSpaceID(s)
	return pou
}

// SetNillableSpaceID sets the "space_id" field if the given value is not nil.
func (pou *PaymentOrderUpdate) SetNillableSpaceID(s *string) *PaymentOrderUpdate {
	if s != nil {
		pou.SetSpaceID(*s)
	}
	return pou
}

// ClearSpaceID clears the value of the "space_id" field.
func (pou *PaymentOrderUpdate) ClearSpaceID() *PaymentOrderUpdate {
	pou.mutation.ClearSpaceID()
	return pou
}

// SetProductID sets the "product_id" field.
func (pou *PaymentOrderUpdate) SetProductID(s string) *PaymentOrderUpdate {
	pou.mutation.SetProductID(s)
	return pou
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (pou *PaymentOrderUpdate) SetNillableProductID(s *string) *PaymentOrderUpdate {
	if s != nil {
		pou.SetProductID(*s)
	}
	return pou
}

// ClearProductID clears the value of the "product_id" field.
func (pou *PaymentOrderUpdate) ClearProductID() *PaymentOrderUpdate {
	pou.mutation.ClearProductID()
	return pou
}

// SetSubscriptionID sets the "subscription_id" field.
func (pou *PaymentOrderUpdate) SetSubscriptionID(s string) *PaymentOrderUpdate {
	pou.mutation.SetSubscriptionID(s)
	return pou
}

// SetNillableSubscriptionID sets the "subscription_id" field if the given value is not nil.
func (pou *PaymentOrderUpdate) SetNillableSubscriptionID(s *string) *PaymentOrderUpdate {
	if s != nil {
		pou.SetSubscriptionID(*s)
	}
	return pou
}

// ClearSubscriptionID clears the value of the "subscription_id" field.
func (pou *PaymentOrderUpdate) ClearSubscriptionID() *PaymentOrderUpdate {
	pou.mutation.ClearSubscriptionID()
	return pou
}

// SetExpiresAt sets the "expires_at" field.
func (pou *PaymentOrderUpdate) SetExpiresAt(t time.Time) *PaymentOrderUpdate {
	pou.mutation.SetExpiresAt(t)
	return pou
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (pou *PaymentOrderUpdate) SetNillableExpiresAt(t *time.Time) *PaymentOrderUpdate {
	if t != nil {
		pou.SetExpiresAt(*t)
	}
	return pou
}

// SetPaidAt sets the "paid_at" field.
func (pou *PaymentOrderUpdate) SetPaidAt(t time.Time) *PaymentOrderUpdate {
	pou.mutation.SetPaidAt(t)
	return pou
}

// SetNillablePaidAt sets the "paid_at" field if the given value is not nil.
func (pou *PaymentOrderUpdate) SetNillablePaidAt(t *time.Time) *PaymentOrderUpdate {
	if t != nil {
		pou.SetPaidAt(*t)
	}
	return pou
}

// ClearPaidAt clears the value of the "paid_at" field.
func (pou *PaymentOrderUpdate) ClearPaidAt() *PaymentOrderUpdate {
	pou.mutation.ClearPaidAt()
	return pou
}

// SetProviderRef sets the "provider_ref" field.
func (pou *PaymentOrderUpdate) SetProviderRef(s string) *PaymentOrderUpdate {
	pou.mutation.SetProviderRef(s)
	return pou
}

// SetNillableProviderRef sets the "provider_ref" field if the given value is not nil.
func (pou *PaymentOrderUpdate) SetNillableProviderRef(s *string) *PaymentOrderUpdate {
	if s != nil {
		pou.SetProviderRef(*s)
	}
	return pou
}

// ClearProviderRef clears the value of the "provider_ref" field.
func (pou *PaymentOrderUpdate) ClearProviderRef() *PaymentOrderUpdate {
	pou.mutation.ClearProviderRef()
	return pou
}

// SetDescription sets the "description" field.
func (pou *PaymentOrderUpdate) SetDescription(s string) *PaymentOrderUpdate {
	pou.mutation.SetDescription(s)
	return pou
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pou *PaymentOrderUpdate) SetNillableDescription(s *string) *PaymentOrderUpdate {
	if s != nil {
		pou.SetDescription(*s)
	}
	return pou
}

// ClearDescription clears the value of the "description" field.
func (pou *PaymentOrderUpdate) ClearDescription() *PaymentOrderUpdate {
	pou.mutation.ClearDescription()
	return pou
}

// AddLogIDs adds the "logs" edge to the PaymentLog entity by IDs.
func (pou *PaymentOrderUpdate) AddLogIDs(ids ...string) *PaymentOrderUpdate {
	pou.mutation.AddLogIDs(ids...)
	return pou
}

// AddLogs adds the "logs" edges to the PaymentLog entity.
func (pou *PaymentOrderUpdate) AddLogs(p ...*PaymentLog) *PaymentOrderUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pou.AddLogIDs(ids...)
}

// Mutation returns the PaymentOrderMutation object of the builder.
func (pou *PaymentOrderUpdate) Mutation() *PaymentOrderMutation {
	return pou.mutation
}

// ClearLogs clears all "logs" edges to the PaymentLog entity.
func (pou *PaymentOrderUpdate) ClearLogs() *PaymentOrderUpdate {
	pou.mutation.ClearLogs()
	return pou
}

// RemoveLogIDs removes the "logs" edge to PaymentLog entities by IDs.
func (pou *PaymentOrderUpdate) RemoveLogIDs(ids ...string) *PaymentOrderUpdate {
	pou.mutation.RemoveLogIDs(ids...)
	return pou
}

// RemoveLogs removes "logs" edges to PaymentLog entities.
func (pou *PaymentOrderUpdate) RemoveLogs(p ...*PaymentLog) *PaymentOrderUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pou.RemoveLogIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pou *PaymentOrderUpdate) Save(ctx context.Context) (int, error) {
	pou.defaults()
	return withHooks(ctx, pou.sqlSave, pou.mutation, pou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pou *PaymentOrderUpdate) SaveX(ctx context.Context) int {
	affected, err := pou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pou *PaymentOrderUpdate) Exec(ctx context.Context) error {
	_, err := pou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pou *PaymentOrderUpdate) ExecX(ctx context.Context) {
	if err := pou.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pou *PaymentOrderUpdate) defaults() {
	if _, ok := pou.mutation.UpdatedAt(); !ok && !pou.mutation.UpdatedAtCleared() {
		v := paymentorder.UpdateDefaultUpdatedAt()
		pou.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pou *PaymentOrderUpdate) check() error {
	if v, ok := pou.mutation.OrderNumber(); ok {
		if err := paymentorder.OrderNumberValidator(v); err != nil {
			return &ValidationError{Name: "order_number", err: fmt.Errorf(`ent: validator failed for field "PaymentOrder.order_number": %w`, err)}
		}
	}
	if v, ok := pou.mutation.Amount(); ok {
		if err := paymentorder.AmountValidator(v); err != nil {
			return &ValidationError{Name: "amount", err: fmt.Errorf(`ent: validator failed for field "PaymentOrder.amount": %w`, err)}
		}
	}
	if v, ok := pou.mutation.ChannelID(); ok {
		if err := paymentorder.ChannelIDValidator(v); err != nil {
			return &ValidationError{Name: "channel_id", err: fmt.Errorf(`ent: validator failed for field "PaymentOrder.channel_id": %w`, err)}
		}
	}
	if v, ok := pou.mutation.UserID(); ok {
		if err := paymentorder.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "PaymentOrder.user_id": %w`, err)}
		}
	}
	return nil
}

func (pou *PaymentOrderUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pou.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(paymentorder.Table, paymentorder.Columns, sqlgraph.NewFieldSpec(paymentorder.FieldID, field.TypeString))
	if ps := pou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pou.mutation.Extras(); ok {
		_spec.SetField(paymentorder.FieldExtras, field.TypeJSON, value)
	}
	if pou.mutation.ExtrasCleared() {
		_spec.ClearField(paymentorder.FieldExtras, field.TypeJSON)
	}
	if value, ok := pou.mutation.CreatedBy(); ok {
		_spec.SetField(paymentorder.FieldCreatedBy, field.TypeString, value)
	}
	if pou.mutation.CreatedByCleared() {
		_spec.ClearField(paymentorder.FieldCreatedBy, field.TypeString)
	}
	if value, ok := pou.mutation.UpdatedBy(); ok {
		_spec.SetField(paymentorder.FieldUpdatedBy, field.TypeString, value)
	}
	if pou.mutation.UpdatedByCleared() {
		_spec.ClearField(paymentorder.FieldUpdatedBy, field.TypeString)
	}
	if pou.mutation.CreatedAtCleared() {
		_spec.ClearField(paymentorder.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := pou.mutation.UpdatedAt(); ok {
		_spec.SetField(paymentorder.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := pou.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(paymentorder.FieldUpdatedAt, field.TypeInt64, value)
	}
	if pou.mutation.UpdatedAtCleared() {
		_spec.ClearField(paymentorder.FieldUpdatedAt, field.TypeInt64)
	}
	if value, ok := pou.mutation.OrderNumber(); ok {
		_spec.SetField(paymentorder.FieldOrderNumber, field.TypeString, value)
	}
	if value, ok := pou.mutation.Amount(); ok {
		_spec.SetField(paymentorder.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := pou.mutation.AddedAmount(); ok {
		_spec.AddField(paymentorder.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := pou.mutation.Currency(); ok {
		_spec.SetField(paymentorder.FieldCurrency, field.TypeString, value)
	}
	if value, ok := pou.mutation.Status(); ok {
		_spec.SetField(paymentorder.FieldStatus, field.TypeString, value)
	}
	if value, ok := pou.mutation.GetType(); ok {
		_spec.SetField(paymentorder.FieldType, field.TypeString, value)
	}
	if value, ok := pou.mutation.ChannelID(); ok {
		_spec.SetField(paymentorder.FieldChannelID, field.TypeString, value)
	}
	if value, ok := pou.mutation.UserID(); ok {
		_spec.SetField(paymentorder.FieldUserID, field.TypeString, value)
	}
	if value, ok := pou.mutation.SpaceID(); ok {
		_spec.SetField(paymentorder.FieldSpaceID, field.TypeString, value)
	}
	if pou.mutation.SpaceIDCleared() {
		_spec.ClearField(paymentorder.FieldSpaceID, field.TypeString)
	}
	if value, ok := pou.mutation.ProductID(); ok {
		_spec.SetField(paymentorder.FieldProductID, field.TypeString, value)
	}
	if pou.mutation.ProductIDCleared() {
		_spec.ClearField(paymentorder.FieldProductID, field.TypeString)
	}
	if value, ok := pou.mutation.SubscriptionID(); ok {
		_spec.SetField(paymentorder.FieldSubscriptionID, field.TypeString, value)
	}
	if pou.mutation.SubscriptionIDCleared() {
		_spec.ClearField(paymentorder.FieldSubscriptionID, field.TypeString)
	}
	if value, ok := pou.mutation.ExpiresAt(); ok {
		_spec.SetField(paymentorder.FieldExpiresAt, field.TypeTime, value)
	}
	if value, ok := pou.mutation.PaidAt(); ok {
		_spec.SetField(paymentorder.FieldPaidAt, field.TypeTime, value)
	}
	if pou.mutation.PaidAtCleared() {
		_spec.ClearField(paymentorder.FieldPaidAt, field.TypeTime)
	}
	if value, ok := pou.mutation.ProviderRef(); ok {
		_spec.SetField(paymentorder.FieldProviderRef, field.TypeString, value)
	}
	if pou.mutation.ProviderRefCleared() {
		_spec.ClearField(paymentorder.FieldProviderRef, field.TypeString)
	}
	if value, ok := pou.mutation.Description(); ok {
		_spec.SetField(paymentorder.FieldDescription, field.TypeString, value)
	}
	if pou.mutation.DescriptionCleared() {
		_spec.ClearField(paymentorder.FieldDescription, field.TypeString)
	}
	if pou.mutation.LogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   paymentorder.LogsTable,
			Columns: []string{paymentorder.LogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentlog.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pou.mutation.RemovedLogsIDs(); len(nodes) > 0 && !pou.mutation.LogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   paymentorder.LogsTable,
			Columns: []string{paymentorder.LogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentlog.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pou.mutation.LogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   paymentorder.LogsTable,
			Columns: []string{paymentorder.LogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentlog.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{paymentorder.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pou.mutation.done = true
	return n, nil
}

// PaymentOrderUpdateOne is the builder for updating a single PaymentOrder entity.
type PaymentOrderUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PaymentOrderMutation
}

// SetExtras sets the "extras" field.
func (pouo *PaymentOrderUpdateOne) SetExtras(m map[string]interface{}) *PaymentOrderUpdateOne {
	pouo.mutation.SetExtras(m)
	return pouo
}

// ClearExtras clears the value of the "extras" field.
func (pouo *PaymentOrderUpdateOne) ClearExtras() *PaymentOrderUpdateOne {
	pouo.mutation.ClearExtras()
	return pouo
}

// SetCreatedBy sets the "created_by" field.
func (pouo *PaymentOrderUpdateOne) SetCreatedBy(s string) *PaymentOrderUpdateOne {
	pouo.mutation.SetCreatedBy(s)
	return pouo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (pouo *PaymentOrderUpdateOne) SetNillableCreatedBy(s *string) *PaymentOrderUpdateOne {
	if s != nil {
		pouo.SetCreatedBy(*s)
	}
	return pouo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (pouo *PaymentOrderUpdateOne) ClearCreatedBy() *PaymentOrderUpdateOne {
	pouo.mutation.ClearCreatedBy()
	return pouo
}

// SetUpdatedBy sets the "updated_by" field.
func (pouo *PaymentOrderUpdateOne) SetUpdatedBy(s string) *PaymentOrderUpdateOne {
	pouo.mutation.SetUpdatedBy(s)
	return pouo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (pouo *PaymentOrderUpdateOne) SetNillableUpdatedBy(s *string) *PaymentOrderUpdateOne {
	if s != nil {
		pouo.SetUpdatedBy(*s)
	}
	return pouo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (pouo *PaymentOrderUpdateOne) ClearUpdatedBy() *PaymentOrderUpdateOne {
	pouo.mutation.ClearUpdatedBy()
	return pouo
}

// SetUpdatedAt sets the "updated_at" field.
func (pouo *PaymentOrderUpdateOne) SetUpdatedAt(i int64) *PaymentOrderUpdateOne {
	pouo.mutation.ResetUpdatedAt()
	pouo.mutation.SetUpdatedAt(i)
	return pouo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (pouo *PaymentOrderUpdateOne) AddUpdatedAt(i int64) *PaymentOrderUpdateOne {
	pouo.mutation.AddUpdatedAt(i)
	return pouo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (pouo *PaymentOrderUpdateOne) ClearUpdatedAt() *PaymentOrderUpdateOne {
	pouo.mutation.ClearUpdatedAt()
	return pouo
}

// SetOrderNumber sets the "order_number" field.
func (pouo *PaymentOrderUpdateOne) SetOrderNumber(s string) *PaymentOrderUpdateOne {
	pouo.mutation.SetOrderNumber(s)
	return pouo
}

// SetNillableOrderNumber sets the "order_number" field if the given value is not nil.
func (pouo *PaymentOrderUpdateOne) SetNillableOrderNumber(s *string) *PaymentOrderUpdateOne {
	if s != nil {
		pouo.SetOrderNumber(*s)
	}
	return pouo
}

// SetAmount sets the "amount" field.
func (pouo *PaymentOrderUpdateOne) SetAmount(f float64) *PaymentOrderUpdateOne {
	pouo.mutation.ResetAmount()
	pouo.mutation.SetAmount(f)
	return pouo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (pouo *PaymentOrderUpdateOne) SetNillableAmount(f *float64) *PaymentOrderUpdateOne {
	if f != nil {
		pouo.SetAmount(*f)
	}
	return pouo
}

// AddAmount adds f to the "amount" field.
func (pouo *PaymentOrderUpdateOne) AddAmount(f float64) *PaymentOrderUpdateOne {
	pouo.mutation.AddAmount(f)
	return pouo
}

// SetCurrency sets the "currency" field.
func (pouo *PaymentOrderUpdateOne) SetCurrency(s string) *PaymentOrderUpdateOne {
	pouo.mutation.SetCurrency(s)
	return pouo
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (pouo *PaymentOrderUpdateOne) SetNillableCurrency(s *string) *PaymentOrderUpdateOne {
	if s != nil {
		pouo.SetCurrency(*s)
	}
	return pouo
}

// SetStatus sets the "status" field.
func (pouo *PaymentOrderUpdateOne) SetStatus(s string) *PaymentOrderUpdateOne {
	pouo.mutation.SetStatus(s)
	return pouo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pouo *PaymentOrderUpdateOne) SetNillableStatus(s *string) *PaymentOrderUpdateOne {
	if s != nil {
		pouo.SetStatus(*s)
	}
	return pouo
}

// SetType sets the "type" field.
func (pouo *PaymentOrderUpdateOne) SetType(s string) *PaymentOrderUpdateOne {
	pouo.mutation.SetType(s)
	return pouo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (pouo *PaymentOrderUpdateOne) SetNillableType(s *string) *PaymentOrderUpdateOne {
	if s != nil {
		pouo.SetType(*s)
	}
	return pouo
}

// SetChannelID sets the "channel_id" field.
func (pouo *PaymentOrderUpdateOne) SetChannelID(s string) *PaymentOrderUpdateOne {
	pouo.mutation.SetChannelID(s)
	return pouo
}

// SetNillableChannelID sets the "channel_id" field if the given value is not nil.
func (pouo *PaymentOrderUpdateOne) SetNillableChannelID(s *string) *PaymentOrderUpdateOne {
	if s != nil {
		pouo.SetChannelID(*s)
	}
	return pouo
}

// SetUserID sets the "user_id" field.
func (pouo *PaymentOrderUpdateOne) SetUserID(s string) *PaymentOrderUpdateOne {
	pouo.mutation.SetUserID(s)
	return pouo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (pouo *PaymentOrderUpdateOne) SetNillableUserID(s *string) *PaymentOrderUpdateOne {
	if s != nil {
		pouo.SetUserID(*s)
	}
	return pouo
}

// SetSpaceID sets the "space_id" field.
func (pouo *PaymentOrderUpdateOne) SetSpaceID(s string) *PaymentOrderUpdateOne {
	pouo.mutation.SetSpaceID(s)
	return pouo
}

// SetNillableSpaceID sets the "space_id" field if the given value is not nil.
func (pouo *PaymentOrderUpdateOne) SetNillableSpaceID(s *string) *PaymentOrderUpdateOne {
	if s != nil {
		pouo.SetSpaceID(*s)
	}
	return pouo
}

// ClearSpaceID clears the value of the "space_id" field.
func (pouo *PaymentOrderUpdateOne) ClearSpaceID() *PaymentOrderUpdateOne {
	pouo.mutation.ClearSpaceID()
	return pouo
}

// SetProductID sets the "product_id" field.
func (pouo *PaymentOrderUpdateOne) SetProductID(s string) *PaymentOrderUpdateOne {
	pouo.mutation.SetProductID(s)
	return pouo
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (pouo *PaymentOrderUpdateOne) SetNillableProductID(s *string) *PaymentOrderUpdateOne {
	if s != nil {
		pouo.SetProductID(*s)
	}
	return pouo
}

// ClearProductID clears the value of the "product_id" field.
func (pouo *PaymentOrderUpdateOne) ClearProductID() *PaymentOrderUpdateOne {
	pouo.mutation.ClearProductID()
	return pouo
}

// SetSubscriptionID sets the "subscription_id" field.
func (pouo *PaymentOrderUpdateOne) SetSubscriptionID(s string) *PaymentOrderUpdateOne {
	pouo.mutation.SetSubscriptionID(s)
	return pouo
}

// SetNillableSubscriptionID sets the "subscription_id" field if the given value is not nil.
func (pouo *PaymentOrderUpdateOne) SetNillableSubscriptionID(s *string) *PaymentOrderUpdateOne {
	if s != nil {
		pouo.SetSubscriptionID(*s)
	}
	return pouo
}

// ClearSubscriptionID clears the value of the "subscription_id" field.
func (pouo *PaymentOrderUpdateOne) ClearSubscriptionID() *PaymentOrderUpdateOne {
	pouo.mutation.ClearSubscriptionID()
	return pouo
}

// SetExpiresAt sets the "expires_at" field.
func (pouo *PaymentOrderUpdateOne) SetExpiresAt(t time.Time) *PaymentOrderUpdateOne {
	pouo.mutation.SetExpiresAt(t)
	return pouo
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (pouo *PaymentOrderUpdateOne) SetNillableExpiresAt(t *time.Time) *PaymentOrderUpdateOne {
	if t != nil {
		pouo.SetExpiresAt(*t)
	}
	return pouo
}

// SetPaidAt sets the "paid_at" field.
func (pouo *PaymentOrderUpdateOne) SetPaidAt(t time.Time) *PaymentOrderUpdateOne {
	pouo.mutation.SetPaidAt(t)
	return pouo
}

// SetNillablePaidAt sets the "paid_at" field if the given value is not nil.
func (pouo *PaymentOrderUpdateOne) SetNillablePaidAt(t *time.Time) *PaymentOrderUpdateOne {
	if t != nil {
		pouo.SetPaidAt(*t)
	}
	return pouo
}

// ClearPaidAt clears the value of the "paid_at" field.
func (pouo *PaymentOrderUpdateOne) ClearPaidAt() *PaymentOrderUpdateOne {
	pouo.mutation.ClearPaidAt()
	return pouo
}

// SetProviderRef sets the "provider_ref" field.
func (pouo *PaymentOrderUpdateOne) SetProviderRef(s string) *PaymentOrderUpdateOne {
	pouo.mutation.SetProviderRef(s)
	return pouo
}

// SetNillableProviderRef sets the "provider_ref" field if the given value is not nil.
func (pouo *PaymentOrderUpdateOne) SetNillableProviderRef(s *string) *PaymentOrderUpdateOne {
	if s != nil {
		pouo.SetProviderRef(*s)
	}
	return pouo
}

// ClearProviderRef clears the value of the "provider_ref" field.
func (pouo *PaymentOrderUpdateOne) ClearProviderRef() *PaymentOrderUpdateOne {
	pouo.mutation.ClearProviderRef()
	return pouo
}

// SetDescription sets the "description" field.
func (pouo *PaymentOrderUpdateOne) SetDescription(s string) *PaymentOrderUpdateOne {
	pouo.mutation.SetDescription(s)
	return pouo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pouo *PaymentOrderUpdateOne) SetNillableDescription(s *string) *PaymentOrderUpdateOne {
	if s != nil {
		pouo.SetDescription(*s)
	}
	return pouo
}

// ClearDescription clears the value of the "description" field.
func (pouo *PaymentOrderUpdateOne) ClearDescription() *PaymentOrderUpdateOne {
	pouo.mutation.ClearDescription()
	return pouo
}

// AddLogIDs adds the "logs" edge to the PaymentLog entity by IDs.
func (pouo *PaymentOrderUpdateOne) AddLogIDs(ids ...string) *PaymentOrderUpdateOne {
	pouo.mutation.AddLogIDs(ids...)
	return pouo
}

// AddLogs adds the "logs" edges to the PaymentLog entity.
func (pouo *PaymentOrderUpdateOne) AddLogs(p ...*PaymentLog) *PaymentOrderUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pouo.AddLogIDs(ids...)
}

// Mutation returns the PaymentOrderMutation object of the builder.
func (pouo *PaymentOrderUpdateOne) Mutation() *PaymentOrderMutation {
	return pouo.mutation
}

// ClearLogs clears all "logs" edges to the PaymentLog entity.
func (pouo *PaymentOrderUpdateOne) ClearLogs() *PaymentOrderUpdateOne {
	pouo.mutation.ClearLogs()
	return pouo
}

// RemoveLogIDs removes the "logs" edge to PaymentLog entities by IDs.
func (pouo *PaymentOrderUpdateOne) RemoveLogIDs(ids ...string) *PaymentOrderUpdateOne {
	pouo.mutation.RemoveLogIDs(ids...)
	return pouo
}

// RemoveLogs removes "logs" edges to PaymentLog entities.
func (pouo *PaymentOrderUpdateOne) RemoveLogs(p ...*PaymentLog) *PaymentOrderUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pouo.RemoveLogIDs(ids...)
}

// Where appends a list predicates to the PaymentOrderUpdate builder.
func (pouo *PaymentOrderUpdateOne) Where(ps ...predicate.PaymentOrder) *PaymentOrderUpdateOne {
	pouo.mutation.Where(ps...)
	return pouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pouo *PaymentOrderUpdateOne) Select(field string, fields ...string) *PaymentOrderUpdateOne {
	pouo.fields = append([]string{field}, fields...)
	return pouo
}

// Save executes the query and returns the updated PaymentOrder entity.
func (pouo *PaymentOrderUpdateOne) Save(ctx context.Context) (*PaymentOrder, error) {
	pouo.defaults()
	return withHooks(ctx, pouo.sqlSave, pouo.mutation, pouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pouo *PaymentOrderUpdateOne) SaveX(ctx context.Context) *PaymentOrder {
	node, err := pouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pouo *PaymentOrderUpdateOne) Exec(ctx context.Context) error {
	_, err := pouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pouo *PaymentOrderUpdateOne) ExecX(ctx context.Context) {
	if err := pouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pouo *PaymentOrderUpdateOne) defaults() {
	if _, ok := pouo.mutation.UpdatedAt(); !ok && !pouo.mutation.UpdatedAtCleared() {
		v := paymentorder.UpdateDefaultUpdatedAt()
		pouo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pouo *PaymentOrderUpdateOne) check() error {
	if v, ok := pouo.mutation.OrderNumber(); ok {
		if err := paymentorder.OrderNumberValidator(v); err != nil {
			return &ValidationError{Name: "order_number", err: fmt.Errorf(`ent: validator failed for field "PaymentOrder.order_number": %w`, err)}
		}
	}
	if v, ok := pouo.mutation.Amount(); ok {
		if err := paymentorder.AmountValidator(v); err != nil {
			return &ValidationError{Name: "amount", err: fmt.Errorf(`ent: validator failed for field "PaymentOrder.amount": %w`, err)}
		}
	}
	if v, ok := pouo.mutation.ChannelID(); ok {
		if err := paymentorder.ChannelIDValidator(v); err != nil {
			return &ValidationError{Name: "channel_id", err: fmt.Errorf(`ent: validator failed for field "PaymentOrder.channel_id": %w`, err)}
		}
	}
	if v, ok := pouo.mutation.UserID(); ok {
		if err := paymentorder.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "PaymentOrder.user_id": %w`, err)}
		}
	}
	return nil
}

func (pouo *PaymentOrderUpdateOne) sqlSave(ctx context.Context) (_node *PaymentOrder, err error) {
	if err := pouo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(paymentorder.Table, paymentorder.Columns, sqlgraph.NewFieldSpec(paymentorder.FieldID, field.TypeString))
	id, ok := pouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PaymentOrder.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, paymentorder.FieldID)
		for _, f := range fields {
			if !paymentorder.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != paymentorder.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pouo.mutation.Extras(); ok {
		_spec.SetField(paymentorder.FieldExtras, field.TypeJSON, value)
	}
	if pouo.mutation.ExtrasCleared() {
		_spec.ClearField(paymentorder.FieldExtras, field.TypeJSON)
	}
	if value, ok := pouo.mutation.CreatedBy(); ok {
		_spec.SetField(paymentorder.FieldCreatedBy, field.TypeString, value)
	}
	if pouo.mutation.CreatedByCleared() {
		_spec.ClearField(paymentorder.FieldCreatedBy, field.TypeString)
	}
	if value, ok := pouo.mutation.UpdatedBy(); ok {
		_spec.SetField(paymentorder.FieldUpdatedBy, field.TypeString, value)
	}
	if pouo.mutation.UpdatedByCleared() {
		_spec.ClearField(paymentorder.FieldUpdatedBy, field.TypeString)
	}
	if pouo.mutation.CreatedAtCleared() {
		_spec.ClearField(paymentorder.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := pouo.mutation.UpdatedAt(); ok {
		_spec.SetField(paymentorder.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := pouo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(paymentorder.FieldUpdatedAt, field.TypeInt64, value)
	}
	if pouo.mutation.UpdatedAtCleared() {
		_spec.ClearField(paymentorder.FieldUpdatedAt, field.TypeInt64)
	}
	if value, ok := pouo.mutation.OrderNumber(); ok {
		_spec.SetField(paymentorder.FieldOrderNumber, field.TypeString, value)
	}
	if value, ok := pouo.mutation.Amount(); ok {
		_spec.SetField(paymentorder.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := pouo.mutation.AddedAmount(); ok {
		_spec.AddField(paymentorder.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := pouo.mutation.Currency(); ok {
		_spec.SetField(paymentorder.FieldCurrency, field.TypeString, value)
	}
	if value, ok := pouo.mutation.Status(); ok {
		_spec.SetField(paymentorder.FieldStatus, field.TypeString, value)
	}
	if value, ok := pouo.mutation.GetType(); ok {
		_spec.SetField(paymentorder.FieldType, field.TypeString, value)
	}
	if value, ok := pouo.mutation.ChannelID(); ok {
		_spec.SetField(paymentorder.FieldChannelID, field.TypeString, value)
	}
	if value, ok := pouo.mutation.UserID(); ok {
		_spec.SetField(paymentorder.FieldUserID, field.TypeString, value)
	}
	if value, ok := pouo.mutation.SpaceID(); ok {
		_spec.SetField(paymentorder.FieldSpaceID, field.TypeString, value)
	}
	if pouo.mutation.SpaceIDCleared() {
		_spec.ClearField(paymentorder.FieldSpaceID, field.TypeString)
	}
	if value, ok := pouo.mutation.ProductID(); ok {
		_spec.SetField(paymentorder.FieldProductID, field.TypeString, value)
	}
	if pouo.mutation.ProductIDCleared() {
		_spec.ClearField(paymentorder.FieldProductID, field.TypeString)
	}
	if value, ok := pouo.mutation.SubscriptionID(); ok {
		_spec.SetField(paymentorder.FieldSubscriptionID, field.TypeString, value)
	}
	if pouo.mutation.SubscriptionIDCleared() {
		_spec.ClearField(paymentorder.FieldSubscriptionID, field.TypeString)
	}
	if value, ok := pouo.mutation.ExpiresAt(); ok {
		_spec.SetField(paymentorder.FieldExpiresAt, field.TypeTime, value)
	}
	if value, ok := pouo.mutation.PaidAt(); ok {
		_spec.SetField(paymentorder.FieldPaidAt, field.TypeTime, value)
	}
	if pouo.mutation.PaidAtCleared() {
		_spec.ClearField(paymentorder.FieldPaidAt, field.TypeTime)
	}
	if value, ok := pouo.mutation.ProviderRef(); ok {
		_spec.SetField(paymentorder.FieldProviderRef, field.TypeString, value)
	}
	if pouo.mutation.ProviderRefCleared() {
		_spec.ClearField(paymentorder.FieldProviderRef, field.TypeString)
	}
	if value, ok := pouo.mutation.Description(); ok {
		_spec.SetField(paymentorder.FieldDescription, field.TypeString, value)
	}
	if pouo.mutation.DescriptionCleared() {
		_spec.ClearField(paymentorder.FieldDescription, field.TypeString)
	}
	if pouo.mutation.LogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   paymentorder.LogsTable,
			Columns: []string{paymentorder.LogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentlog.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pouo.mutation.RemovedLogsIDs(); len(nodes) > 0 && !pouo.mutation.LogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   paymentorder.LogsTable,
			Columns: []string{paymentorder.LogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentlog.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pouo.mutation.LogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   paymentorder.LogsTable,
			Columns: []string{paymentorder.LogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentlog.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PaymentOrder{config: pouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{paymentorder.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pouo.mutation.done = true
	return _node, nil
}
