// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"ncobase/payment/data/ent/paymentproduct"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// PaymentProduct is the model entity for the PaymentProduct schema.
type PaymentProduct struct {
	config `json:"-"`
	// ID of the ent.
	// primary key
	ID string `json:"id,omitempty"`
	// name
	Name string `json:"name,omitempty"`
	// description
	Description string `json:"description,omitempty"`
	// Extend properties
	Extras map[string]interface{} `json:"extras,omitempty"`
	// id of the creator
	CreatedBy string `json:"created_by,omitempty"`
	// id of the last updater
	UpdatedBy string `json:"updated_by,omitempty"`
	// created at
	CreatedAt int64 `json:"created_at,omitempty"`
	// updated at
	UpdatedAt int64 `json:"updated_at,omitempty"`
	// PaymentProduct status (active, disabled, draft)
	Status string `json:"status,omitempty"`
	// Pricing type (one_time, recurring, usage_based, tiered_usage)
	PricingType string `json:"pricing_type,omitempty"`
	// Base price amount
	Price float64 `json:"price,omitempty"`
	// Currency code (USD, EUR, GBP, etc.)
	Currency string `json:"currency,omitempty"`
	// Billing interval for recurring payments (daily, weekly, monthly, yearly)
	BillingInterval string `json:"billing_interval,omitempty"`
	// Number of trial days for recurring subscriptions
	TrialDays int `json:"trial_days,omitempty"`
	// List of features included in the product
	Features []string `json:"features,omitempty"`
	// Space ID
	SpaceID string `json:"space_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PaymentProductQuery when eager-loading is set.
	Edges        PaymentProductEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PaymentProductEdges holds the relations/edges for other nodes in the graph.
type PaymentProductEdges struct {
	// Subscriptions holds the value of the subscriptions edge.
	Subscriptions []*PaymentSubscription `json:"subscriptions,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// SubscriptionsOrErr returns the Subscriptions value or an error if the edge
// was not loaded in eager-loading.
func (e PaymentProductEdges) SubscriptionsOrErr() ([]*PaymentSubscription, error) {
	if e.loadedTypes[0] {
		return e.Subscriptions, nil
	}
	return nil, &NotLoadedError{edge: "subscriptions"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PaymentProduct) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case paymentproduct.FieldExtras, paymentproduct.FieldFeatures:
			values[i] = new([]byte)
		case paymentproduct.FieldPrice:
			values[i] = new(sql.NullFloat64)
		case paymentproduct.FieldCreatedAt, paymentproduct.FieldUpdatedAt, paymentproduct.FieldTrialDays:
			values[i] = new(sql.NullInt64)
		case paymentproduct.FieldID, paymentproduct.FieldName, paymentproduct.FieldDescription, paymentproduct.FieldCreatedBy, paymentproduct.FieldUpdatedBy, paymentproduct.FieldStatus, paymentproduct.FieldPricingType, paymentproduct.FieldCurrency, paymentproduct.FieldBillingInterval, paymentproduct.FieldSpaceID:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PaymentProduct fields.
func (pp *PaymentProduct) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case paymentproduct.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				pp.ID = value.String
			}
		case paymentproduct.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pp.Name = value.String
			}
		case paymentproduct.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				pp.Description = value.String
			}
		case paymentproduct.FieldExtras:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field extras", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pp.Extras); err != nil {
					return fmt.Errorf("unmarshal field extras: %w", err)
				}
			}
		case paymentproduct.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				pp.CreatedBy = value.String
			}
		case paymentproduct.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				pp.UpdatedBy = value.String
			}
		case paymentproduct.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pp.CreatedAt = value.Int64
			}
		case paymentproduct.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pp.UpdatedAt = value.Int64
			}
		case paymentproduct.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				pp.Status = value.String
			}
		case paymentproduct.FieldPricingType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field pricing_type", values[i])
			} else if value.Valid {
				pp.PricingType = value.String
			}
		case paymentproduct.FieldPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				pp.Price = value.Float64
			}
		case paymentproduct.FieldCurrency:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field currency", values[i])
			} else if value.Valid {
				pp.Currency = value.String
			}
		case paymentproduct.FieldBillingInterval:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field billing_interval", values[i])
			} else if value.Valid {
				pp.BillingInterval = value.String
			}
		case paymentproduct.FieldTrialDays:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field trial_days", values[i])
			} else if value.Valid {
				pp.TrialDays = int(value.Int64)
			}
		case paymentproduct.FieldFeatures:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field features", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pp.Features); err != nil {
					return fmt.Errorf("unmarshal field features: %w", err)
				}
			}
		case paymentproduct.FieldSpaceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field space_id", values[i])
			} else if value.Valid {
				pp.SpaceID = value.String
			}
		default:
			pp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PaymentProduct.
// This includes values selected through modifiers, order, etc.
func (pp *PaymentProduct) Value(name string) (ent.Value, error) {
	return pp.selectValues.Get(name)
}

// QuerySubscriptions queries the "subscriptions" edge of the PaymentProduct entity.
func (pp *PaymentProduct) QuerySubscriptions() *PaymentSubscriptionQuery {
	return NewPaymentProductClient(pp.config).QuerySubscriptions(pp)
}

// Update returns a builder for updating this PaymentProduct.
// Note that you need to call PaymentProduct.Unwrap() before calling this method if this PaymentProduct
// was returned from a transaction, and the transaction was committed or rolled back.
func (pp *PaymentProduct) Update() *PaymentProductUpdateOne {
	return NewPaymentProductClient(pp.config).UpdateOne(pp)
}

// Unwrap unwraps the PaymentProduct entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pp *PaymentProduct) Unwrap() *PaymentProduct {
	_tx, ok := pp.config.driver.(*txDriver)
	if !ok {
		panic("ent: PaymentProduct is not a transactional entity")
	}
	pp.config.driver = _tx.drv
	return pp
}

// String implements the fmt.Stringer.
func (pp *PaymentProduct) String() string {
	var builder strings.Builder
	builder.WriteString("PaymentProduct(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pp.ID))
	builder.WriteString("name=")
	builder.WriteString(pp.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(pp.Description)
	builder.WriteString(", ")
	builder.WriteString("extras=")
	builder.WriteString(fmt.Sprintf("%v", pp.Extras))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(pp.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(pp.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", pp.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", pp.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(pp.Status)
	builder.WriteString(", ")
	builder.WriteString("pricing_type=")
	builder.WriteString(pp.PricingType)
	builder.WriteString(", ")
	builder.WriteString("price=")
	builder.WriteString(fmt.Sprintf("%v", pp.Price))
	builder.WriteString(", ")
	builder.WriteString("currency=")
	builder.WriteString(pp.Currency)
	builder.WriteString(", ")
	builder.WriteString("billing_interval=")
	builder.WriteString(pp.BillingInterval)
	builder.WriteString(", ")
	builder.WriteString("trial_days=")
	builder.WriteString(fmt.Sprintf("%v", pp.TrialDays))
	builder.WriteString(", ")
	builder.WriteString("features=")
	builder.WriteString(fmt.Sprintf("%v", pp.Features))
	builder.WriteString(", ")
	builder.WriteString("space_id=")
	builder.WriteString(pp.SpaceID)
	builder.WriteByte(')')
	return builder.String()
}

// PaymentProducts is a parsable slice of PaymentProduct.
type PaymentProducts []*PaymentProduct
