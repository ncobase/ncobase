// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/payment/data/ent/paymentproduct"
	"ncobase/payment/data/ent/paymentsubscription"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PaymentProductCreate is the builder for creating a PaymentProduct entity.
type PaymentProductCreate struct {
	config
	mutation *PaymentProductMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (ppc *PaymentProductCreate) SetName(s string) *PaymentProductCreate {
	ppc.mutation.SetName(s)
	return ppc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ppc *PaymentProductCreate) SetNillableName(s *string) *PaymentProductCreate {
	if s != nil {
		ppc.SetName(*s)
	}
	return ppc
}

// SetDescription sets the "description" field.
func (ppc *PaymentProductCreate) SetDescription(s string) *PaymentProductCreate {
	ppc.mutation.SetDescription(s)
	return ppc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ppc *PaymentProductCreate) SetNillableDescription(s *string) *PaymentProductCreate {
	if s != nil {
		ppc.SetDescription(*s)
	}
	return ppc
}

// SetExtras sets the "extras" field.
func (ppc *PaymentProductCreate) SetExtras(m map[string]interface{}) *PaymentProductCreate {
	ppc.mutation.SetExtras(m)
	return ppc
}

// SetCreatedBy sets the "created_by" field.
func (ppc *PaymentProductCreate) SetCreatedBy(s string) *PaymentProductCreate {
	ppc.mutation.SetCreatedBy(s)
	return ppc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (ppc *PaymentProductCreate) SetNillableCreatedBy(s *string) *PaymentProductCreate {
	if s != nil {
		ppc.SetCreatedBy(*s)
	}
	return ppc
}

// SetUpdatedBy sets the "updated_by" field.
func (ppc *PaymentProductCreate) SetUpdatedBy(s string) *PaymentProductCreate {
	ppc.mutation.SetUpdatedBy(s)
	return ppc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ppc *PaymentProductCreate) SetNillableUpdatedBy(s *string) *PaymentProductCreate {
	if s != nil {
		ppc.SetUpdatedBy(*s)
	}
	return ppc
}

// SetCreatedAt sets the "created_at" field.
func (ppc *PaymentProductCreate) SetCreatedAt(i int64) *PaymentProductCreate {
	ppc.mutation.SetCreatedAt(i)
	return ppc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ppc *PaymentProductCreate) SetNillableCreatedAt(i *int64) *PaymentProductCreate {
	if i != nil {
		ppc.SetCreatedAt(*i)
	}
	return ppc
}

// SetUpdatedAt sets the "updated_at" field.
func (ppc *PaymentProductCreate) SetUpdatedAt(i int64) *PaymentProductCreate {
	ppc.mutation.SetUpdatedAt(i)
	return ppc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ppc *PaymentProductCreate) SetNillableUpdatedAt(i *int64) *PaymentProductCreate {
	if i != nil {
		ppc.SetUpdatedAt(*i)
	}
	return ppc
}

// SetStatus sets the "status" field.
func (ppc *PaymentProductCreate) SetStatus(s string) *PaymentProductCreate {
	ppc.mutation.SetStatus(s)
	return ppc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ppc *PaymentProductCreate) SetNillableStatus(s *string) *PaymentProductCreate {
	if s != nil {
		ppc.SetStatus(*s)
	}
	return ppc
}

// SetPricingType sets the "pricing_type" field.
func (ppc *PaymentProductCreate) SetPricingType(s string) *PaymentProductCreate {
	ppc.mutation.SetPricingType(s)
	return ppc
}

// SetNillablePricingType sets the "pricing_type" field if the given value is not nil.
func (ppc *PaymentProductCreate) SetNillablePricingType(s *string) *PaymentProductCreate {
	if s != nil {
		ppc.SetPricingType(*s)
	}
	return ppc
}

// SetPrice sets the "price" field.
func (ppc *PaymentProductCreate) SetPrice(f float64) *PaymentProductCreate {
	ppc.mutation.SetPrice(f)
	return ppc
}

// SetCurrency sets the "currency" field.
func (ppc *PaymentProductCreate) SetCurrency(s string) *PaymentProductCreate {
	ppc.mutation.SetCurrency(s)
	return ppc
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (ppc *PaymentProductCreate) SetNillableCurrency(s *string) *PaymentProductCreate {
	if s != nil {
		ppc.SetCurrency(*s)
	}
	return ppc
}

// SetBillingInterval sets the "billing_interval" field.
func (ppc *PaymentProductCreate) SetBillingInterval(s string) *PaymentProductCreate {
	ppc.mutation.SetBillingInterval(s)
	return ppc
}

// SetNillableBillingInterval sets the "billing_interval" field if the given value is not nil.
func (ppc *PaymentProductCreate) SetNillableBillingInterval(s *string) *PaymentProductCreate {
	if s != nil {
		ppc.SetBillingInterval(*s)
	}
	return ppc
}

// SetTrialDays sets the "trial_days" field.
func (ppc *PaymentProductCreate) SetTrialDays(i int) *PaymentProductCreate {
	ppc.mutation.SetTrialDays(i)
	return ppc
}

// SetNillableTrialDays sets the "trial_days" field if the given value is not nil.
func (ppc *PaymentProductCreate) SetNillableTrialDays(i *int) *PaymentProductCreate {
	if i != nil {
		ppc.SetTrialDays(*i)
	}
	return ppc
}

// SetFeatures sets the "features" field.
func (ppc *PaymentProductCreate) SetFeatures(s []string) *PaymentProductCreate {
	ppc.mutation.SetFeatures(s)
	return ppc
}

// SetTenantID sets the "tenant_id" field.
func (ppc *PaymentProductCreate) SetTenantID(s string) *PaymentProductCreate {
	ppc.mutation.SetTenantID(s)
	return ppc
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (ppc *PaymentProductCreate) SetNillableTenantID(s *string) *PaymentProductCreate {
	if s != nil {
		ppc.SetTenantID(*s)
	}
	return ppc
}

// SetID sets the "id" field.
func (ppc *PaymentProductCreate) SetID(s string) *PaymentProductCreate {
	ppc.mutation.SetID(s)
	return ppc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ppc *PaymentProductCreate) SetNillableID(s *string) *PaymentProductCreate {
	if s != nil {
		ppc.SetID(*s)
	}
	return ppc
}

// AddSubscriptionIDs adds the "subscriptions" edge to the PaymentSubscription entity by IDs.
func (ppc *PaymentProductCreate) AddSubscriptionIDs(ids ...string) *PaymentProductCreate {
	ppc.mutation.AddSubscriptionIDs(ids...)
	return ppc
}

// AddSubscriptions adds the "subscriptions" edges to the PaymentSubscription entity.
func (ppc *PaymentProductCreate) AddSubscriptions(p ...*PaymentSubscription) *PaymentProductCreate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ppc.AddSubscriptionIDs(ids...)
}

// Mutation returns the PaymentProductMutation object of the builder.
func (ppc *PaymentProductCreate) Mutation() *PaymentProductMutation {
	return ppc.mutation
}

// Save creates the PaymentProduct in the database.
func (ppc *PaymentProductCreate) Save(ctx context.Context) (*PaymentProduct, error) {
	ppc.defaults()
	return withHooks(ctx, ppc.sqlSave, ppc.mutation, ppc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ppc *PaymentProductCreate) SaveX(ctx context.Context) *PaymentProduct {
	v, err := ppc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ppc *PaymentProductCreate) Exec(ctx context.Context) error {
	_, err := ppc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ppc *PaymentProductCreate) ExecX(ctx context.Context) {
	if err := ppc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ppc *PaymentProductCreate) defaults() {
	if _, ok := ppc.mutation.Extras(); !ok {
		v := paymentproduct.DefaultExtras
		ppc.mutation.SetExtras(v)
	}
	if _, ok := ppc.mutation.CreatedAt(); !ok {
		v := paymentproduct.DefaultCreatedAt()
		ppc.mutation.SetCreatedAt(v)
	}
	if _, ok := ppc.mutation.UpdatedAt(); !ok {
		v := paymentproduct.DefaultUpdatedAt()
		ppc.mutation.SetUpdatedAt(v)
	}
	if _, ok := ppc.mutation.Status(); !ok {
		v := paymentproduct.DefaultStatus
		ppc.mutation.SetStatus(v)
	}
	if _, ok := ppc.mutation.PricingType(); !ok {
		v := paymentproduct.DefaultPricingType
		ppc.mutation.SetPricingType(v)
	}
	if _, ok := ppc.mutation.Currency(); !ok {
		v := paymentproduct.DefaultCurrency
		ppc.mutation.SetCurrency(v)
	}
	if _, ok := ppc.mutation.TrialDays(); !ok {
		v := paymentproduct.DefaultTrialDays
		ppc.mutation.SetTrialDays(v)
	}
	if _, ok := ppc.mutation.ID(); !ok {
		v := paymentproduct.DefaultID()
		ppc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ppc *PaymentProductCreate) check() error {
	if v, ok := ppc.mutation.CreatedBy(); ok {
		if err := paymentproduct.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "PaymentProduct.created_by": %w`, err)}
		}
	}
	if v, ok := ppc.mutation.UpdatedBy(); ok {
		if err := paymentproduct.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "PaymentProduct.updated_by": %w`, err)}
		}
	}
	if _, ok := ppc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "PaymentProduct.status"`)}
	}
	if _, ok := ppc.mutation.PricingType(); !ok {
		return &ValidationError{Name: "pricing_type", err: errors.New(`ent: missing required field "PaymentProduct.pricing_type"`)}
	}
	if _, ok := ppc.mutation.Price(); !ok {
		return &ValidationError{Name: "price", err: errors.New(`ent: missing required field "PaymentProduct.price"`)}
	}
	if v, ok := ppc.mutation.Price(); ok {
		if err := paymentproduct.PriceValidator(v); err != nil {
			return &ValidationError{Name: "price", err: fmt.Errorf(`ent: validator failed for field "PaymentProduct.price": %w`, err)}
		}
	}
	if _, ok := ppc.mutation.Currency(); !ok {
		return &ValidationError{Name: "currency", err: errors.New(`ent: missing required field "PaymentProduct.currency"`)}
	}
	if _, ok := ppc.mutation.TrialDays(); !ok {
		return &ValidationError{Name: "trial_days", err: errors.New(`ent: missing required field "PaymentProduct.trial_days"`)}
	}
	if _, ok := ppc.mutation.Features(); !ok {
		return &ValidationError{Name: "features", err: errors.New(`ent: missing required field "PaymentProduct.features"`)}
	}
	if v, ok := ppc.mutation.ID(); ok {
		if err := paymentproduct.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "PaymentProduct.id": %w`, err)}
		}
	}
	return nil
}

func (ppc *PaymentProductCreate) sqlSave(ctx context.Context) (*PaymentProduct, error) {
	if err := ppc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ppc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ppc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected PaymentProduct.ID type: %T", _spec.ID.Value)
		}
	}
	ppc.mutation.id = &_node.ID
	ppc.mutation.done = true
	return _node, nil
}

func (ppc *PaymentProductCreate) createSpec() (*PaymentProduct, *sqlgraph.CreateSpec) {
	var (
		_node = &PaymentProduct{config: ppc.config}
		_spec = sqlgraph.NewCreateSpec(paymentproduct.Table, sqlgraph.NewFieldSpec(paymentproduct.FieldID, field.TypeString))
	)
	if id, ok := ppc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ppc.mutation.Name(); ok {
		_spec.SetField(paymentproduct.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ppc.mutation.Description(); ok {
		_spec.SetField(paymentproduct.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := ppc.mutation.Extras(); ok {
		_spec.SetField(paymentproduct.FieldExtras, field.TypeJSON, value)
		_node.Extras = value
	}
	if value, ok := ppc.mutation.CreatedBy(); ok {
		_spec.SetField(paymentproduct.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := ppc.mutation.UpdatedBy(); ok {
		_spec.SetField(paymentproduct.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := ppc.mutation.CreatedAt(); ok {
		_spec.SetField(paymentproduct.FieldCreatedAt, field.TypeInt64, value)
		_node.CreatedAt = value
	}
	if value, ok := ppc.mutation.UpdatedAt(); ok {
		_spec.SetField(paymentproduct.FieldUpdatedAt, field.TypeInt64, value)
		_node.UpdatedAt = value
	}
	if value, ok := ppc.mutation.Status(); ok {
		_spec.SetField(paymentproduct.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := ppc.mutation.PricingType(); ok {
		_spec.SetField(paymentproduct.FieldPricingType, field.TypeString, value)
		_node.PricingType = value
	}
	if value, ok := ppc.mutation.Price(); ok {
		_spec.SetField(paymentproduct.FieldPrice, field.TypeFloat64, value)
		_node.Price = value
	}
	if value, ok := ppc.mutation.Currency(); ok {
		_spec.SetField(paymentproduct.FieldCurrency, field.TypeString, value)
		_node.Currency = value
	}
	if value, ok := ppc.mutation.BillingInterval(); ok {
		_spec.SetField(paymentproduct.FieldBillingInterval, field.TypeString, value)
		_node.BillingInterval = value
	}
	if value, ok := ppc.mutation.TrialDays(); ok {
		_spec.SetField(paymentproduct.FieldTrialDays, field.TypeInt, value)
		_node.TrialDays = value
	}
	if value, ok := ppc.mutation.Features(); ok {
		_spec.SetField(paymentproduct.FieldFeatures, field.TypeJSON, value)
		_node.Features = value
	}
	if value, ok := ppc.mutation.TenantID(); ok {
		_spec.SetField(paymentproduct.FieldTenantID, field.TypeString, value)
		_node.TenantID = value
	}
	if nodes := ppc.mutation.SubscriptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   paymentproduct.SubscriptionsTable,
			Columns: []string{paymentproduct.SubscriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentsubscription.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PaymentProductCreateBulk is the builder for creating many PaymentProduct entities in bulk.
type PaymentProductCreateBulk struct {
	config
	err      error
	builders []*PaymentProductCreate
}

// Save creates the PaymentProduct entities in the database.
func (ppcb *PaymentProductCreateBulk) Save(ctx context.Context) ([]*PaymentProduct, error) {
	if ppcb.err != nil {
		return nil, ppcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ppcb.builders))
	nodes := make([]*PaymentProduct, len(ppcb.builders))
	mutators := make([]Mutator, len(ppcb.builders))
	for i := range ppcb.builders {
		func(i int, root context.Context) {
			builder := ppcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PaymentProductMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ppcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ppcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ppcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ppcb *PaymentProductCreateBulk) SaveX(ctx context.Context) []*PaymentProduct {
	v, err := ppcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ppcb *PaymentProductCreateBulk) Exec(ctx context.Context) error {
	_, err := ppcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ppcb *PaymentProductCreateBulk) ExecX(ctx context.Context) {
	if err := ppcb.Exec(ctx); err != nil {
		panic(err)
	}
}
