// Code generated by ent, DO NOT EDIT.

package paymentsubscription

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the paymentsubscription type in the database.
	Label = "payment_subscription"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldExtras holds the string denoting the extras field in the database.
	FieldExtras = "extras"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldSpaceID holds the string denoting the space_id field in the database.
	FieldSpaceID = "space_id"
	// FieldProductID holds the string denoting the product_id field in the database.
	FieldProductID = "product_id"
	// FieldChannelID holds the string denoting the channel_id field in the database.
	FieldChannelID = "channel_id"
	// FieldCurrentPeriodStart holds the string denoting the current_period_start field in the database.
	FieldCurrentPeriodStart = "current_period_start"
	// FieldCurrentPeriodEnd holds the string denoting the current_period_end field in the database.
	FieldCurrentPeriodEnd = "current_period_end"
	// FieldCancelAt holds the string denoting the cancel_at field in the database.
	FieldCancelAt = "cancel_at"
	// FieldCancelledAt holds the string denoting the cancelled_at field in the database.
	FieldCancelledAt = "cancelled_at"
	// FieldTrialStart holds the string denoting the trial_start field in the database.
	FieldTrialStart = "trial_start"
	// FieldTrialEnd holds the string denoting the trial_end field in the database.
	FieldTrialEnd = "trial_end"
	// FieldProviderRef holds the string denoting the provider_ref field in the database.
	FieldProviderRef = "provider_ref"
	// EdgeProduct holds the string denoting the product edge name in mutations.
	EdgeProduct = "product"
	// Table holds the table name of the paymentsubscription in the database.
	Table = "ncse_pay_subscription"
	// ProductTable is the table that holds the product relation/edge.
	ProductTable = "ncse_pay_subscription"
	// ProductInverseTable is the table name for the PaymentProduct entity.
	// It exists in this package in order to avoid circular dependency with the "paymentproduct" package.
	ProductInverseTable = "ncse_pay_product"
	// ProductColumn is the table column denoting the product relation/edge.
	ProductColumn = "product_id"
)

// Columns holds all SQL columns for paymentsubscription fields.
var Columns = []string{
	FieldID,
	FieldExtras,
	FieldCreatedBy,
	FieldUpdatedBy,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldStatus,
	FieldUserID,
	FieldSpaceID,
	FieldProductID,
	FieldChannelID,
	FieldCurrentPeriodStart,
	FieldCurrentPeriodEnd,
	FieldCancelAt,
	FieldCancelledAt,
	FieldTrialStart,
	FieldTrialEnd,
	FieldProviderRef,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultExtras holds the default value on creation for the "extras" field.
	DefaultExtras map[string]interface{}
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() int64
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() int64
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() int64
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus string
	// UserIDValidator is a validator for the "user_id" field. It is called by the builders before save.
	UserIDValidator func(string) error
	// ProductIDValidator is a validator for the "product_id" field. It is called by the builders before save.
	ProductIDValidator func(string) error
	// ChannelIDValidator is a validator for the "channel_id" field. It is called by the builders before save.
	ChannelIDValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)

// OrderOption defines the ordering options for the PaymentSubscription queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the updated_by field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// BySpaceID orders the results by the space_id field.
func BySpaceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSpaceID, opts...).ToFunc()
}

// ByProductID orders the results by the product_id field.
func ByProductID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProductID, opts...).ToFunc()
}

// ByChannelID orders the results by the channel_id field.
func ByChannelID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChannelID, opts...).ToFunc()
}

// ByCurrentPeriodStart orders the results by the current_period_start field.
func ByCurrentPeriodStart(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCurrentPeriodStart, opts...).ToFunc()
}

// ByCurrentPeriodEnd orders the results by the current_period_end field.
func ByCurrentPeriodEnd(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCurrentPeriodEnd, opts...).ToFunc()
}

// ByCancelAt orders the results by the cancel_at field.
func ByCancelAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCancelAt, opts...).ToFunc()
}

// ByCancelledAt orders the results by the cancelled_at field.
func ByCancelledAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCancelledAt, opts...).ToFunc()
}

// ByTrialStart orders the results by the trial_start field.
func ByTrialStart(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTrialStart, opts...).ToFunc()
}

// ByTrialEnd orders the results by the trial_end field.
func ByTrialEnd(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTrialEnd, opts...).ToFunc()
}

// ByProviderRef orders the results by the provider_ref field.
func ByProviderRef(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProviderRef, opts...).ToFunc()
}

// ByProductField orders the results by product field.
func ByProductField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProductStep(), sql.OrderByField(field, opts...))
	}
}
func newProductStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProductInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ProductTable, ProductColumn),
	)
}
