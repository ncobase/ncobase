// Code generated by ent, DO NOT EDIT.

package paymentsubscription

import (
	"ncobase/payment/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldContainsFold(FieldID, id))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldEQ(FieldCreatedBy, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldEQ(FieldUpdatedBy, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v int64) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v int64) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldEQ(FieldUpdatedAt, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldEQ(FieldStatus, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldEQ(FieldUserID, v))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldEQ(FieldTenantID, v))
}

// ProductID applies equality check predicate on the "product_id" field. It's identical to ProductIDEQ.
func ProductID(v string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldEQ(FieldProductID, v))
}

// ChannelID applies equality check predicate on the "channel_id" field. It's identical to ChannelIDEQ.
func ChannelID(v string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldEQ(FieldChannelID, v))
}

// CurrentPeriodStart applies equality check predicate on the "current_period_start" field. It's identical to CurrentPeriodStartEQ.
func CurrentPeriodStart(v time.Time) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldEQ(FieldCurrentPeriodStart, v))
}

// CurrentPeriodEnd applies equality check predicate on the "current_period_end" field. It's identical to CurrentPeriodEndEQ.
func CurrentPeriodEnd(v time.Time) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldEQ(FieldCurrentPeriodEnd, v))
}

// CancelAt applies equality check predicate on the "cancel_at" field. It's identical to CancelAtEQ.
func CancelAt(v time.Time) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldEQ(FieldCancelAt, v))
}

// CancelledAt applies equality check predicate on the "cancelled_at" field. It's identical to CancelledAtEQ.
func CancelledAt(v time.Time) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldEQ(FieldCancelledAt, v))
}

// TrialStart applies equality check predicate on the "trial_start" field. It's identical to TrialStartEQ.
func TrialStart(v time.Time) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldEQ(FieldTrialStart, v))
}

// TrialEnd applies equality check predicate on the "trial_end" field. It's identical to TrialEndEQ.
func TrialEnd(v time.Time) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldEQ(FieldTrialEnd, v))
}

// ProviderRef applies equality check predicate on the "provider_ref" field. It's identical to ProviderRefEQ.
func ProviderRef(v string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldEQ(FieldProviderRef, v))
}

// ExtrasIsNil applies the IsNil predicate on the "extras" field.
func ExtrasIsNil() predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldIsNull(FieldExtras))
}

// ExtrasNotNil applies the NotNil predicate on the "extras" field.
func ExtrasNotNil() predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldNotNull(FieldExtras))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldLTE(FieldCreatedBy, v))
}

// CreatedByContains applies the Contains predicate on the "created_by" field.
func CreatedByContains(v string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldContains(FieldCreatedBy, v))
}

// CreatedByHasPrefix applies the HasPrefix predicate on the "created_by" field.
func CreatedByHasPrefix(v string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldHasPrefix(FieldCreatedBy, v))
}

// CreatedByHasSuffix applies the HasSuffix predicate on the "created_by" field.
func CreatedByHasSuffix(v string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldHasSuffix(FieldCreatedBy, v))
}

// CreatedByIsNil applies the IsNil predicate on the "created_by" field.
func CreatedByIsNil() predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldIsNull(FieldCreatedBy))
}

// CreatedByNotNil applies the NotNil predicate on the "created_by" field.
func CreatedByNotNil() predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldNotNull(FieldCreatedBy))
}

// CreatedByEqualFold applies the EqualFold predicate on the "created_by" field.
func CreatedByEqualFold(v string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldEqualFold(FieldCreatedBy, v))
}

// CreatedByContainsFold applies the ContainsFold predicate on the "created_by" field.
func CreatedByContainsFold(v string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldContainsFold(FieldCreatedBy, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldLTE(FieldUpdatedBy, v))
}

// UpdatedByContains applies the Contains predicate on the "updated_by" field.
func UpdatedByContains(v string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldContains(FieldUpdatedBy, v))
}

// UpdatedByHasPrefix applies the HasPrefix predicate on the "updated_by" field.
func UpdatedByHasPrefix(v string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldHasPrefix(FieldUpdatedBy, v))
}

// UpdatedByHasSuffix applies the HasSuffix predicate on the "updated_by" field.
func UpdatedByHasSuffix(v string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldHasSuffix(FieldUpdatedBy, v))
}

// UpdatedByIsNil applies the IsNil predicate on the "updated_by" field.
func UpdatedByIsNil() predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldIsNull(FieldUpdatedBy))
}

// UpdatedByNotNil applies the NotNil predicate on the "updated_by" field.
func UpdatedByNotNil() predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldNotNull(FieldUpdatedBy))
}

// UpdatedByEqualFold applies the EqualFold predicate on the "updated_by" field.
func UpdatedByEqualFold(v string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldEqualFold(FieldUpdatedBy, v))
}

// UpdatedByContainsFold applies the ContainsFold predicate on the "updated_by" field.
func UpdatedByContainsFold(v string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldContainsFold(FieldUpdatedBy, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v int64) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v int64) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...int64) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...int64) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v int64) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v int64) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v int64) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v int64) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v int64) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v int64) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...int64) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...int64) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v int64) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v int64) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v int64) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v int64) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldNotNull(FieldUpdatedAt))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldContainsFold(FieldStatus, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldLTE(FieldUserID, v))
}

// UserIDContains applies the Contains predicate on the "user_id" field.
func UserIDContains(v string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldContains(FieldUserID, v))
}

// UserIDHasPrefix applies the HasPrefix predicate on the "user_id" field.
func UserIDHasPrefix(v string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldHasPrefix(FieldUserID, v))
}

// UserIDHasSuffix applies the HasSuffix predicate on the "user_id" field.
func UserIDHasSuffix(v string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldHasSuffix(FieldUserID, v))
}

// UserIDEqualFold applies the EqualFold predicate on the "user_id" field.
func UserIDEqualFold(v string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldEqualFold(FieldUserID, v))
}

// UserIDContainsFold applies the ContainsFold predicate on the "user_id" field.
func UserIDContainsFold(v string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldContainsFold(FieldUserID, v))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldNotIn(FieldTenantID, vs...))
}

// TenantIDGT applies the GT predicate on the "tenant_id" field.
func TenantIDGT(v string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldGT(FieldTenantID, v))
}

// TenantIDGTE applies the GTE predicate on the "tenant_id" field.
func TenantIDGTE(v string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldGTE(FieldTenantID, v))
}

// TenantIDLT applies the LT predicate on the "tenant_id" field.
func TenantIDLT(v string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldLT(FieldTenantID, v))
}

// TenantIDLTE applies the LTE predicate on the "tenant_id" field.
func TenantIDLTE(v string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldLTE(FieldTenantID, v))
}

// TenantIDContains applies the Contains predicate on the "tenant_id" field.
func TenantIDContains(v string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldContains(FieldTenantID, v))
}

// TenantIDHasPrefix applies the HasPrefix predicate on the "tenant_id" field.
func TenantIDHasPrefix(v string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldHasPrefix(FieldTenantID, v))
}

// TenantIDHasSuffix applies the HasSuffix predicate on the "tenant_id" field.
func TenantIDHasSuffix(v string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldHasSuffix(FieldTenantID, v))
}

// TenantIDIsNil applies the IsNil predicate on the "tenant_id" field.
func TenantIDIsNil() predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldIsNull(FieldTenantID))
}

// TenantIDNotNil applies the NotNil predicate on the "tenant_id" field.
func TenantIDNotNil() predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldNotNull(FieldTenantID))
}

// TenantIDEqualFold applies the EqualFold predicate on the "tenant_id" field.
func TenantIDEqualFold(v string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldEqualFold(FieldTenantID, v))
}

// TenantIDContainsFold applies the ContainsFold predicate on the "tenant_id" field.
func TenantIDContainsFold(v string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldContainsFold(FieldTenantID, v))
}

// ProductIDEQ applies the EQ predicate on the "product_id" field.
func ProductIDEQ(v string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldEQ(FieldProductID, v))
}

// ProductIDNEQ applies the NEQ predicate on the "product_id" field.
func ProductIDNEQ(v string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldNEQ(FieldProductID, v))
}

// ProductIDIn applies the In predicate on the "product_id" field.
func ProductIDIn(vs ...string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldIn(FieldProductID, vs...))
}

// ProductIDNotIn applies the NotIn predicate on the "product_id" field.
func ProductIDNotIn(vs ...string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldNotIn(FieldProductID, vs...))
}

// ProductIDGT applies the GT predicate on the "product_id" field.
func ProductIDGT(v string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldGT(FieldProductID, v))
}

// ProductIDGTE applies the GTE predicate on the "product_id" field.
func ProductIDGTE(v string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldGTE(FieldProductID, v))
}

// ProductIDLT applies the LT predicate on the "product_id" field.
func ProductIDLT(v string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldLT(FieldProductID, v))
}

// ProductIDLTE applies the LTE predicate on the "product_id" field.
func ProductIDLTE(v string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldLTE(FieldProductID, v))
}

// ProductIDContains applies the Contains predicate on the "product_id" field.
func ProductIDContains(v string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldContains(FieldProductID, v))
}

// ProductIDHasPrefix applies the HasPrefix predicate on the "product_id" field.
func ProductIDHasPrefix(v string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldHasPrefix(FieldProductID, v))
}

// ProductIDHasSuffix applies the HasSuffix predicate on the "product_id" field.
func ProductIDHasSuffix(v string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldHasSuffix(FieldProductID, v))
}

// ProductIDEqualFold applies the EqualFold predicate on the "product_id" field.
func ProductIDEqualFold(v string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldEqualFold(FieldProductID, v))
}

// ProductIDContainsFold applies the ContainsFold predicate on the "product_id" field.
func ProductIDContainsFold(v string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldContainsFold(FieldProductID, v))
}

// ChannelIDEQ applies the EQ predicate on the "channel_id" field.
func ChannelIDEQ(v string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldEQ(FieldChannelID, v))
}

// ChannelIDNEQ applies the NEQ predicate on the "channel_id" field.
func ChannelIDNEQ(v string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldNEQ(FieldChannelID, v))
}

// ChannelIDIn applies the In predicate on the "channel_id" field.
func ChannelIDIn(vs ...string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldIn(FieldChannelID, vs...))
}

// ChannelIDNotIn applies the NotIn predicate on the "channel_id" field.
func ChannelIDNotIn(vs ...string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldNotIn(FieldChannelID, vs...))
}

// ChannelIDGT applies the GT predicate on the "channel_id" field.
func ChannelIDGT(v string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldGT(FieldChannelID, v))
}

// ChannelIDGTE applies the GTE predicate on the "channel_id" field.
func ChannelIDGTE(v string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldGTE(FieldChannelID, v))
}

// ChannelIDLT applies the LT predicate on the "channel_id" field.
func ChannelIDLT(v string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldLT(FieldChannelID, v))
}

// ChannelIDLTE applies the LTE predicate on the "channel_id" field.
func ChannelIDLTE(v string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldLTE(FieldChannelID, v))
}

// ChannelIDContains applies the Contains predicate on the "channel_id" field.
func ChannelIDContains(v string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldContains(FieldChannelID, v))
}

// ChannelIDHasPrefix applies the HasPrefix predicate on the "channel_id" field.
func ChannelIDHasPrefix(v string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldHasPrefix(FieldChannelID, v))
}

// ChannelIDHasSuffix applies the HasSuffix predicate on the "channel_id" field.
func ChannelIDHasSuffix(v string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldHasSuffix(FieldChannelID, v))
}

// ChannelIDEqualFold applies the EqualFold predicate on the "channel_id" field.
func ChannelIDEqualFold(v string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldEqualFold(FieldChannelID, v))
}

// ChannelIDContainsFold applies the ContainsFold predicate on the "channel_id" field.
func ChannelIDContainsFold(v string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldContainsFold(FieldChannelID, v))
}

// CurrentPeriodStartEQ applies the EQ predicate on the "current_period_start" field.
func CurrentPeriodStartEQ(v time.Time) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldEQ(FieldCurrentPeriodStart, v))
}

// CurrentPeriodStartNEQ applies the NEQ predicate on the "current_period_start" field.
func CurrentPeriodStartNEQ(v time.Time) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldNEQ(FieldCurrentPeriodStart, v))
}

// CurrentPeriodStartIn applies the In predicate on the "current_period_start" field.
func CurrentPeriodStartIn(vs ...time.Time) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldIn(FieldCurrentPeriodStart, vs...))
}

// CurrentPeriodStartNotIn applies the NotIn predicate on the "current_period_start" field.
func CurrentPeriodStartNotIn(vs ...time.Time) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldNotIn(FieldCurrentPeriodStart, vs...))
}

// CurrentPeriodStartGT applies the GT predicate on the "current_period_start" field.
func CurrentPeriodStartGT(v time.Time) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldGT(FieldCurrentPeriodStart, v))
}

// CurrentPeriodStartGTE applies the GTE predicate on the "current_period_start" field.
func CurrentPeriodStartGTE(v time.Time) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldGTE(FieldCurrentPeriodStart, v))
}

// CurrentPeriodStartLT applies the LT predicate on the "current_period_start" field.
func CurrentPeriodStartLT(v time.Time) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldLT(FieldCurrentPeriodStart, v))
}

// CurrentPeriodStartLTE applies the LTE predicate on the "current_period_start" field.
func CurrentPeriodStartLTE(v time.Time) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldLTE(FieldCurrentPeriodStart, v))
}

// CurrentPeriodEndEQ applies the EQ predicate on the "current_period_end" field.
func CurrentPeriodEndEQ(v time.Time) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldEQ(FieldCurrentPeriodEnd, v))
}

// CurrentPeriodEndNEQ applies the NEQ predicate on the "current_period_end" field.
func CurrentPeriodEndNEQ(v time.Time) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldNEQ(FieldCurrentPeriodEnd, v))
}

// CurrentPeriodEndIn applies the In predicate on the "current_period_end" field.
func CurrentPeriodEndIn(vs ...time.Time) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldIn(FieldCurrentPeriodEnd, vs...))
}

// CurrentPeriodEndNotIn applies the NotIn predicate on the "current_period_end" field.
func CurrentPeriodEndNotIn(vs ...time.Time) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldNotIn(FieldCurrentPeriodEnd, vs...))
}

// CurrentPeriodEndGT applies the GT predicate on the "current_period_end" field.
func CurrentPeriodEndGT(v time.Time) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldGT(FieldCurrentPeriodEnd, v))
}

// CurrentPeriodEndGTE applies the GTE predicate on the "current_period_end" field.
func CurrentPeriodEndGTE(v time.Time) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldGTE(FieldCurrentPeriodEnd, v))
}

// CurrentPeriodEndLT applies the LT predicate on the "current_period_end" field.
func CurrentPeriodEndLT(v time.Time) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldLT(FieldCurrentPeriodEnd, v))
}

// CurrentPeriodEndLTE applies the LTE predicate on the "current_period_end" field.
func CurrentPeriodEndLTE(v time.Time) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldLTE(FieldCurrentPeriodEnd, v))
}

// CancelAtEQ applies the EQ predicate on the "cancel_at" field.
func CancelAtEQ(v time.Time) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldEQ(FieldCancelAt, v))
}

// CancelAtNEQ applies the NEQ predicate on the "cancel_at" field.
func CancelAtNEQ(v time.Time) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldNEQ(FieldCancelAt, v))
}

// CancelAtIn applies the In predicate on the "cancel_at" field.
func CancelAtIn(vs ...time.Time) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldIn(FieldCancelAt, vs...))
}

// CancelAtNotIn applies the NotIn predicate on the "cancel_at" field.
func CancelAtNotIn(vs ...time.Time) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldNotIn(FieldCancelAt, vs...))
}

// CancelAtGT applies the GT predicate on the "cancel_at" field.
func CancelAtGT(v time.Time) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldGT(FieldCancelAt, v))
}

// CancelAtGTE applies the GTE predicate on the "cancel_at" field.
func CancelAtGTE(v time.Time) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldGTE(FieldCancelAt, v))
}

// CancelAtLT applies the LT predicate on the "cancel_at" field.
func CancelAtLT(v time.Time) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldLT(FieldCancelAt, v))
}

// CancelAtLTE applies the LTE predicate on the "cancel_at" field.
func CancelAtLTE(v time.Time) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldLTE(FieldCancelAt, v))
}

// CancelAtIsNil applies the IsNil predicate on the "cancel_at" field.
func CancelAtIsNil() predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldIsNull(FieldCancelAt))
}

// CancelAtNotNil applies the NotNil predicate on the "cancel_at" field.
func CancelAtNotNil() predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldNotNull(FieldCancelAt))
}

// CancelledAtEQ applies the EQ predicate on the "cancelled_at" field.
func CancelledAtEQ(v time.Time) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldEQ(FieldCancelledAt, v))
}

// CancelledAtNEQ applies the NEQ predicate on the "cancelled_at" field.
func CancelledAtNEQ(v time.Time) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldNEQ(FieldCancelledAt, v))
}

// CancelledAtIn applies the In predicate on the "cancelled_at" field.
func CancelledAtIn(vs ...time.Time) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldIn(FieldCancelledAt, vs...))
}

// CancelledAtNotIn applies the NotIn predicate on the "cancelled_at" field.
func CancelledAtNotIn(vs ...time.Time) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldNotIn(FieldCancelledAt, vs...))
}

// CancelledAtGT applies the GT predicate on the "cancelled_at" field.
func CancelledAtGT(v time.Time) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldGT(FieldCancelledAt, v))
}

// CancelledAtGTE applies the GTE predicate on the "cancelled_at" field.
func CancelledAtGTE(v time.Time) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldGTE(FieldCancelledAt, v))
}

// CancelledAtLT applies the LT predicate on the "cancelled_at" field.
func CancelledAtLT(v time.Time) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldLT(FieldCancelledAt, v))
}

// CancelledAtLTE applies the LTE predicate on the "cancelled_at" field.
func CancelledAtLTE(v time.Time) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldLTE(FieldCancelledAt, v))
}

// CancelledAtIsNil applies the IsNil predicate on the "cancelled_at" field.
func CancelledAtIsNil() predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldIsNull(FieldCancelledAt))
}

// CancelledAtNotNil applies the NotNil predicate on the "cancelled_at" field.
func CancelledAtNotNil() predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldNotNull(FieldCancelledAt))
}

// TrialStartEQ applies the EQ predicate on the "trial_start" field.
func TrialStartEQ(v time.Time) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldEQ(FieldTrialStart, v))
}

// TrialStartNEQ applies the NEQ predicate on the "trial_start" field.
func TrialStartNEQ(v time.Time) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldNEQ(FieldTrialStart, v))
}

// TrialStartIn applies the In predicate on the "trial_start" field.
func TrialStartIn(vs ...time.Time) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldIn(FieldTrialStart, vs...))
}

// TrialStartNotIn applies the NotIn predicate on the "trial_start" field.
func TrialStartNotIn(vs ...time.Time) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldNotIn(FieldTrialStart, vs...))
}

// TrialStartGT applies the GT predicate on the "trial_start" field.
func TrialStartGT(v time.Time) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldGT(FieldTrialStart, v))
}

// TrialStartGTE applies the GTE predicate on the "trial_start" field.
func TrialStartGTE(v time.Time) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldGTE(FieldTrialStart, v))
}

// TrialStartLT applies the LT predicate on the "trial_start" field.
func TrialStartLT(v time.Time) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldLT(FieldTrialStart, v))
}

// TrialStartLTE applies the LTE predicate on the "trial_start" field.
func TrialStartLTE(v time.Time) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldLTE(FieldTrialStart, v))
}

// TrialStartIsNil applies the IsNil predicate on the "trial_start" field.
func TrialStartIsNil() predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldIsNull(FieldTrialStart))
}

// TrialStartNotNil applies the NotNil predicate on the "trial_start" field.
func TrialStartNotNil() predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldNotNull(FieldTrialStart))
}

// TrialEndEQ applies the EQ predicate on the "trial_end" field.
func TrialEndEQ(v time.Time) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldEQ(FieldTrialEnd, v))
}

// TrialEndNEQ applies the NEQ predicate on the "trial_end" field.
func TrialEndNEQ(v time.Time) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldNEQ(FieldTrialEnd, v))
}

// TrialEndIn applies the In predicate on the "trial_end" field.
func TrialEndIn(vs ...time.Time) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldIn(FieldTrialEnd, vs...))
}

// TrialEndNotIn applies the NotIn predicate on the "trial_end" field.
func TrialEndNotIn(vs ...time.Time) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldNotIn(FieldTrialEnd, vs...))
}

// TrialEndGT applies the GT predicate on the "trial_end" field.
func TrialEndGT(v time.Time) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldGT(FieldTrialEnd, v))
}

// TrialEndGTE applies the GTE predicate on the "trial_end" field.
func TrialEndGTE(v time.Time) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldGTE(FieldTrialEnd, v))
}

// TrialEndLT applies the LT predicate on the "trial_end" field.
func TrialEndLT(v time.Time) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldLT(FieldTrialEnd, v))
}

// TrialEndLTE applies the LTE predicate on the "trial_end" field.
func TrialEndLTE(v time.Time) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldLTE(FieldTrialEnd, v))
}

// TrialEndIsNil applies the IsNil predicate on the "trial_end" field.
func TrialEndIsNil() predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldIsNull(FieldTrialEnd))
}

// TrialEndNotNil applies the NotNil predicate on the "trial_end" field.
func TrialEndNotNil() predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldNotNull(FieldTrialEnd))
}

// ProviderRefEQ applies the EQ predicate on the "provider_ref" field.
func ProviderRefEQ(v string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldEQ(FieldProviderRef, v))
}

// ProviderRefNEQ applies the NEQ predicate on the "provider_ref" field.
func ProviderRefNEQ(v string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldNEQ(FieldProviderRef, v))
}

// ProviderRefIn applies the In predicate on the "provider_ref" field.
func ProviderRefIn(vs ...string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldIn(FieldProviderRef, vs...))
}

// ProviderRefNotIn applies the NotIn predicate on the "provider_ref" field.
func ProviderRefNotIn(vs ...string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldNotIn(FieldProviderRef, vs...))
}

// ProviderRefGT applies the GT predicate on the "provider_ref" field.
func ProviderRefGT(v string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldGT(FieldProviderRef, v))
}

// ProviderRefGTE applies the GTE predicate on the "provider_ref" field.
func ProviderRefGTE(v string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldGTE(FieldProviderRef, v))
}

// ProviderRefLT applies the LT predicate on the "provider_ref" field.
func ProviderRefLT(v string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldLT(FieldProviderRef, v))
}

// ProviderRefLTE applies the LTE predicate on the "provider_ref" field.
func ProviderRefLTE(v string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldLTE(FieldProviderRef, v))
}

// ProviderRefContains applies the Contains predicate on the "provider_ref" field.
func ProviderRefContains(v string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldContains(FieldProviderRef, v))
}

// ProviderRefHasPrefix applies the HasPrefix predicate on the "provider_ref" field.
func ProviderRefHasPrefix(v string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldHasPrefix(FieldProviderRef, v))
}

// ProviderRefHasSuffix applies the HasSuffix predicate on the "provider_ref" field.
func ProviderRefHasSuffix(v string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldHasSuffix(FieldProviderRef, v))
}

// ProviderRefIsNil applies the IsNil predicate on the "provider_ref" field.
func ProviderRefIsNil() predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldIsNull(FieldProviderRef))
}

// ProviderRefNotNil applies the NotNil predicate on the "provider_ref" field.
func ProviderRefNotNil() predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldNotNull(FieldProviderRef))
}

// ProviderRefEqualFold applies the EqualFold predicate on the "provider_ref" field.
func ProviderRefEqualFold(v string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldEqualFold(FieldProviderRef, v))
}

// ProviderRefContainsFold applies the ContainsFold predicate on the "provider_ref" field.
func ProviderRefContainsFold(v string) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.FieldContainsFold(FieldProviderRef, v))
}

// HasProduct applies the HasEdge predicate on the "product" edge.
func HasProduct() predicate.PaymentSubscription {
	return predicate.PaymentSubscription(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProductTable, ProductColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProductWith applies the HasEdge predicate on the "product" edge with a given conditions (other predicates).
func HasProductWith(preds ...predicate.PaymentProduct) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(func(s *sql.Selector) {
		step := newProductStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PaymentSubscription) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PaymentSubscription) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PaymentSubscription) predicate.PaymentSubscription {
	return predicate.PaymentSubscription(sql.NotPredicates(p))
}
