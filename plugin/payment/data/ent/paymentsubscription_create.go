// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/payment/data/ent/paymentproduct"
	"ncobase/payment/data/ent/paymentsubscription"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PaymentSubscriptionCreate is the builder for creating a PaymentSubscription entity.
type PaymentSubscriptionCreate struct {
	config
	mutation *PaymentSubscriptionMutation
	hooks    []Hook
}

// SetExtras sets the "extras" field.
func (psc *PaymentSubscriptionCreate) SetExtras(m map[string]interface{}) *PaymentSubscriptionCreate {
	psc.mutation.SetExtras(m)
	return psc
}

// SetCreatedBy sets the "created_by" field.
func (psc *PaymentSubscriptionCreate) SetCreatedBy(s string) *PaymentSubscriptionCreate {
	psc.mutation.SetCreatedBy(s)
	return psc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (psc *PaymentSubscriptionCreate) SetNillableCreatedBy(s *string) *PaymentSubscriptionCreate {
	if s != nil {
		psc.SetCreatedBy(*s)
	}
	return psc
}

// SetUpdatedBy sets the "updated_by" field.
func (psc *PaymentSubscriptionCreate) SetUpdatedBy(s string) *PaymentSubscriptionCreate {
	psc.mutation.SetUpdatedBy(s)
	return psc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (psc *PaymentSubscriptionCreate) SetNillableUpdatedBy(s *string) *PaymentSubscriptionCreate {
	if s != nil {
		psc.SetUpdatedBy(*s)
	}
	return psc
}

// SetCreatedAt sets the "created_at" field.
func (psc *PaymentSubscriptionCreate) SetCreatedAt(i int64) *PaymentSubscriptionCreate {
	psc.mutation.SetCreatedAt(i)
	return psc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (psc *PaymentSubscriptionCreate) SetNillableCreatedAt(i *int64) *PaymentSubscriptionCreate {
	if i != nil {
		psc.SetCreatedAt(*i)
	}
	return psc
}

// SetUpdatedAt sets the "updated_at" field.
func (psc *PaymentSubscriptionCreate) SetUpdatedAt(i int64) *PaymentSubscriptionCreate {
	psc.mutation.SetUpdatedAt(i)
	return psc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (psc *PaymentSubscriptionCreate) SetNillableUpdatedAt(i *int64) *PaymentSubscriptionCreate {
	if i != nil {
		psc.SetUpdatedAt(*i)
	}
	return psc
}

// SetStatus sets the "status" field.
func (psc *PaymentSubscriptionCreate) SetStatus(s string) *PaymentSubscriptionCreate {
	psc.mutation.SetStatus(s)
	return psc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (psc *PaymentSubscriptionCreate) SetNillableStatus(s *string) *PaymentSubscriptionCreate {
	if s != nil {
		psc.SetStatus(*s)
	}
	return psc
}

// SetUserID sets the "user_id" field.
func (psc *PaymentSubscriptionCreate) SetUserID(s string) *PaymentSubscriptionCreate {
	psc.mutation.SetUserID(s)
	return psc
}

// SetTenantID sets the "tenant_id" field.
func (psc *PaymentSubscriptionCreate) SetTenantID(s string) *PaymentSubscriptionCreate {
	psc.mutation.SetTenantID(s)
	return psc
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (psc *PaymentSubscriptionCreate) SetNillableTenantID(s *string) *PaymentSubscriptionCreate {
	if s != nil {
		psc.SetTenantID(*s)
	}
	return psc
}

// SetProductID sets the "product_id" field.
func (psc *PaymentSubscriptionCreate) SetProductID(s string) *PaymentSubscriptionCreate {
	psc.mutation.SetProductID(s)
	return psc
}

// SetChannelID sets the "channel_id" field.
func (psc *PaymentSubscriptionCreate) SetChannelID(s string) *PaymentSubscriptionCreate {
	psc.mutation.SetChannelID(s)
	return psc
}

// SetCurrentPeriodStart sets the "current_period_start" field.
func (psc *PaymentSubscriptionCreate) SetCurrentPeriodStart(t time.Time) *PaymentSubscriptionCreate {
	psc.mutation.SetCurrentPeriodStart(t)
	return psc
}

// SetCurrentPeriodEnd sets the "current_period_end" field.
func (psc *PaymentSubscriptionCreate) SetCurrentPeriodEnd(t time.Time) *PaymentSubscriptionCreate {
	psc.mutation.SetCurrentPeriodEnd(t)
	return psc
}

// SetCancelAt sets the "cancel_at" field.
func (psc *PaymentSubscriptionCreate) SetCancelAt(t time.Time) *PaymentSubscriptionCreate {
	psc.mutation.SetCancelAt(t)
	return psc
}

// SetNillableCancelAt sets the "cancel_at" field if the given value is not nil.
func (psc *PaymentSubscriptionCreate) SetNillableCancelAt(t *time.Time) *PaymentSubscriptionCreate {
	if t != nil {
		psc.SetCancelAt(*t)
	}
	return psc
}

// SetCancelledAt sets the "cancelled_at" field.
func (psc *PaymentSubscriptionCreate) SetCancelledAt(t time.Time) *PaymentSubscriptionCreate {
	psc.mutation.SetCancelledAt(t)
	return psc
}

// SetNillableCancelledAt sets the "cancelled_at" field if the given value is not nil.
func (psc *PaymentSubscriptionCreate) SetNillableCancelledAt(t *time.Time) *PaymentSubscriptionCreate {
	if t != nil {
		psc.SetCancelledAt(*t)
	}
	return psc
}

// SetTrialStart sets the "trial_start" field.
func (psc *PaymentSubscriptionCreate) SetTrialStart(t time.Time) *PaymentSubscriptionCreate {
	psc.mutation.SetTrialStart(t)
	return psc
}

// SetNillableTrialStart sets the "trial_start" field if the given value is not nil.
func (psc *PaymentSubscriptionCreate) SetNillableTrialStart(t *time.Time) *PaymentSubscriptionCreate {
	if t != nil {
		psc.SetTrialStart(*t)
	}
	return psc
}

// SetTrialEnd sets the "trial_end" field.
func (psc *PaymentSubscriptionCreate) SetTrialEnd(t time.Time) *PaymentSubscriptionCreate {
	psc.mutation.SetTrialEnd(t)
	return psc
}

// SetNillableTrialEnd sets the "trial_end" field if the given value is not nil.
func (psc *PaymentSubscriptionCreate) SetNillableTrialEnd(t *time.Time) *PaymentSubscriptionCreate {
	if t != nil {
		psc.SetTrialEnd(*t)
	}
	return psc
}

// SetProviderRef sets the "provider_ref" field.
func (psc *PaymentSubscriptionCreate) SetProviderRef(s string) *PaymentSubscriptionCreate {
	psc.mutation.SetProviderRef(s)
	return psc
}

// SetNillableProviderRef sets the "provider_ref" field if the given value is not nil.
func (psc *PaymentSubscriptionCreate) SetNillableProviderRef(s *string) *PaymentSubscriptionCreate {
	if s != nil {
		psc.SetProviderRef(*s)
	}
	return psc
}

// SetID sets the "id" field.
func (psc *PaymentSubscriptionCreate) SetID(s string) *PaymentSubscriptionCreate {
	psc.mutation.SetID(s)
	return psc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (psc *PaymentSubscriptionCreate) SetNillableID(s *string) *PaymentSubscriptionCreate {
	if s != nil {
		psc.SetID(*s)
	}
	return psc
}

// SetProduct sets the "product" edge to the PaymentProduct entity.
func (psc *PaymentSubscriptionCreate) SetProduct(p *PaymentProduct) *PaymentSubscriptionCreate {
	return psc.SetProductID(p.ID)
}

// Mutation returns the PaymentSubscriptionMutation object of the builder.
func (psc *PaymentSubscriptionCreate) Mutation() *PaymentSubscriptionMutation {
	return psc.mutation
}

// Save creates the PaymentSubscription in the database.
func (psc *PaymentSubscriptionCreate) Save(ctx context.Context) (*PaymentSubscription, error) {
	psc.defaults()
	return withHooks(ctx, psc.sqlSave, psc.mutation, psc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (psc *PaymentSubscriptionCreate) SaveX(ctx context.Context) *PaymentSubscription {
	v, err := psc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (psc *PaymentSubscriptionCreate) Exec(ctx context.Context) error {
	_, err := psc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psc *PaymentSubscriptionCreate) ExecX(ctx context.Context) {
	if err := psc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (psc *PaymentSubscriptionCreate) defaults() {
	if _, ok := psc.mutation.Extras(); !ok {
		v := paymentsubscription.DefaultExtras
		psc.mutation.SetExtras(v)
	}
	if _, ok := psc.mutation.CreatedAt(); !ok {
		v := paymentsubscription.DefaultCreatedAt()
		psc.mutation.SetCreatedAt(v)
	}
	if _, ok := psc.mutation.UpdatedAt(); !ok {
		v := paymentsubscription.DefaultUpdatedAt()
		psc.mutation.SetUpdatedAt(v)
	}
	if _, ok := psc.mutation.Status(); !ok {
		v := paymentsubscription.DefaultStatus
		psc.mutation.SetStatus(v)
	}
	if _, ok := psc.mutation.ID(); !ok {
		v := paymentsubscription.DefaultID()
		psc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (psc *PaymentSubscriptionCreate) check() error {
	if v, ok := psc.mutation.CreatedBy(); ok {
		if err := paymentsubscription.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "PaymentSubscription.created_by": %w`, err)}
		}
	}
	if v, ok := psc.mutation.UpdatedBy(); ok {
		if err := paymentsubscription.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "PaymentSubscription.updated_by": %w`, err)}
		}
	}
	if _, ok := psc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "PaymentSubscription.status"`)}
	}
	if _, ok := psc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "PaymentSubscription.user_id"`)}
	}
	if v, ok := psc.mutation.UserID(); ok {
		if err := paymentsubscription.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "PaymentSubscription.user_id": %w`, err)}
		}
	}
	if _, ok := psc.mutation.ProductID(); !ok {
		return &ValidationError{Name: "product_id", err: errors.New(`ent: missing required field "PaymentSubscription.product_id"`)}
	}
	if v, ok := psc.mutation.ProductID(); ok {
		if err := paymentsubscription.ProductIDValidator(v); err != nil {
			return &ValidationError{Name: "product_id", err: fmt.Errorf(`ent: validator failed for field "PaymentSubscription.product_id": %w`, err)}
		}
	}
	if _, ok := psc.mutation.ChannelID(); !ok {
		return &ValidationError{Name: "channel_id", err: errors.New(`ent: missing required field "PaymentSubscription.channel_id"`)}
	}
	if v, ok := psc.mutation.ChannelID(); ok {
		if err := paymentsubscription.ChannelIDValidator(v); err != nil {
			return &ValidationError{Name: "channel_id", err: fmt.Errorf(`ent: validator failed for field "PaymentSubscription.channel_id": %w`, err)}
		}
	}
	if _, ok := psc.mutation.CurrentPeriodStart(); !ok {
		return &ValidationError{Name: "current_period_start", err: errors.New(`ent: missing required field "PaymentSubscription.current_period_start"`)}
	}
	if _, ok := psc.mutation.CurrentPeriodEnd(); !ok {
		return &ValidationError{Name: "current_period_end", err: errors.New(`ent: missing required field "PaymentSubscription.current_period_end"`)}
	}
	if v, ok := psc.mutation.ID(); ok {
		if err := paymentsubscription.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "PaymentSubscription.id": %w`, err)}
		}
	}
	if len(psc.mutation.ProductIDs()) == 0 {
		return &ValidationError{Name: "product", err: errors.New(`ent: missing required edge "PaymentSubscription.product"`)}
	}
	return nil
}

func (psc *PaymentSubscriptionCreate) sqlSave(ctx context.Context) (*PaymentSubscription, error) {
	if err := psc.check(); err != nil {
		return nil, err
	}
	_node, _spec := psc.createSpec()
	if err := sqlgraph.CreateNode(ctx, psc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected PaymentSubscription.ID type: %T", _spec.ID.Value)
		}
	}
	psc.mutation.id = &_node.ID
	psc.mutation.done = true
	return _node, nil
}

func (psc *PaymentSubscriptionCreate) createSpec() (*PaymentSubscription, *sqlgraph.CreateSpec) {
	var (
		_node = &PaymentSubscription{config: psc.config}
		_spec = sqlgraph.NewCreateSpec(paymentsubscription.Table, sqlgraph.NewFieldSpec(paymentsubscription.FieldID, field.TypeString))
	)
	if id, ok := psc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := psc.mutation.Extras(); ok {
		_spec.SetField(paymentsubscription.FieldExtras, field.TypeJSON, value)
		_node.Extras = value
	}
	if value, ok := psc.mutation.CreatedBy(); ok {
		_spec.SetField(paymentsubscription.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := psc.mutation.UpdatedBy(); ok {
		_spec.SetField(paymentsubscription.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := psc.mutation.CreatedAt(); ok {
		_spec.SetField(paymentsubscription.FieldCreatedAt, field.TypeInt64, value)
		_node.CreatedAt = value
	}
	if value, ok := psc.mutation.UpdatedAt(); ok {
		_spec.SetField(paymentsubscription.FieldUpdatedAt, field.TypeInt64, value)
		_node.UpdatedAt = value
	}
	if value, ok := psc.mutation.Status(); ok {
		_spec.SetField(paymentsubscription.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := psc.mutation.UserID(); ok {
		_spec.SetField(paymentsubscription.FieldUserID, field.TypeString, value)
		_node.UserID = value
	}
	if value, ok := psc.mutation.TenantID(); ok {
		_spec.SetField(paymentsubscription.FieldTenantID, field.TypeString, value)
		_node.TenantID = value
	}
	if value, ok := psc.mutation.ChannelID(); ok {
		_spec.SetField(paymentsubscription.FieldChannelID, field.TypeString, value)
		_node.ChannelID = value
	}
	if value, ok := psc.mutation.CurrentPeriodStart(); ok {
		_spec.SetField(paymentsubscription.FieldCurrentPeriodStart, field.TypeTime, value)
		_node.CurrentPeriodStart = value
	}
	if value, ok := psc.mutation.CurrentPeriodEnd(); ok {
		_spec.SetField(paymentsubscription.FieldCurrentPeriodEnd, field.TypeTime, value)
		_node.CurrentPeriodEnd = value
	}
	if value, ok := psc.mutation.CancelAt(); ok {
		_spec.SetField(paymentsubscription.FieldCancelAt, field.TypeTime, value)
		_node.CancelAt = &value
	}
	if value, ok := psc.mutation.CancelledAt(); ok {
		_spec.SetField(paymentsubscription.FieldCancelledAt, field.TypeTime, value)
		_node.CancelledAt = &value
	}
	if value, ok := psc.mutation.TrialStart(); ok {
		_spec.SetField(paymentsubscription.FieldTrialStart, field.TypeTime, value)
		_node.TrialStart = &value
	}
	if value, ok := psc.mutation.TrialEnd(); ok {
		_spec.SetField(paymentsubscription.FieldTrialEnd, field.TypeTime, value)
		_node.TrialEnd = &value
	}
	if value, ok := psc.mutation.ProviderRef(); ok {
		_spec.SetField(paymentsubscription.FieldProviderRef, field.TypeString, value)
		_node.ProviderRef = value
	}
	if nodes := psc.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   paymentsubscription.ProductTable,
			Columns: []string{paymentsubscription.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentproduct.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ProductID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PaymentSubscriptionCreateBulk is the builder for creating many PaymentSubscription entities in bulk.
type PaymentSubscriptionCreateBulk struct {
	config
	err      error
	builders []*PaymentSubscriptionCreate
}

// Save creates the PaymentSubscription entities in the database.
func (pscb *PaymentSubscriptionCreateBulk) Save(ctx context.Context) ([]*PaymentSubscription, error) {
	if pscb.err != nil {
		return nil, pscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pscb.builders))
	nodes := make([]*PaymentSubscription, len(pscb.builders))
	mutators := make([]Mutator, len(pscb.builders))
	for i := range pscb.builders {
		func(i int, root context.Context) {
			builder := pscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PaymentSubscriptionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pscb *PaymentSubscriptionCreateBulk) SaveX(ctx context.Context) []*PaymentSubscription {
	v, err := pscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pscb *PaymentSubscriptionCreateBulk) Exec(ctx context.Context) error {
	_, err := pscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pscb *PaymentSubscriptionCreateBulk) ExecX(ctx context.Context) {
	if err := pscb.Exec(ctx); err != nil {
		panic(err)
	}
}
