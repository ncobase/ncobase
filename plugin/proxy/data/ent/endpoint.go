// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"ncobase/proxy/data/ent/endpoint"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Endpoint is the model entity for the Endpoint schema.
type Endpoint struct {
	config `json:"-"`
	// ID of the ent.
	// primary key
	ID string `json:"id,omitempty"`
	// name
	Name string `json:"name,omitempty"`
	// description
	Description string `json:"description,omitempty"`
	// is disabled
	Disabled bool `json:"disabled,omitempty"`
	// Extend properties
	Extras map[string]interface{} `json:"extras,omitempty"`
	// id of the creator
	CreatedBy string `json:"created_by,omitempty"`
	// id of the last updater
	UpdatedBy string `json:"updated_by,omitempty"`
	// created at
	CreatedAt int64 `json:"created_at,omitempty"`
	// updated at
	UpdatedAt int64 `json:"updated_at,omitempty"`
	// Base URL of the third-party API endpoint
	BaseURL string `json:"base_url,omitempty"`
	// Protocol (HTTP, HTTPS, WS, WSS, TCP, UDP)
	Protocol string `json:"protocol,omitempty"`
	// Authentication type (None, Basic, Bearer, OAuth, ApiKey)
	AuthType string `json:"auth_type,omitempty"`
	// Authentication configuration in JSON format
	AuthConfig string `json:"auth_config,omitempty"`
	// Request timeout in seconds
	Timeout int `json:"timeout,omitempty"`
	// Whether to use circuit breaker for this endpoint
	UseCircuitBreaker bool `json:"use_circuit_breaker,omitempty"`
	// Number of retry attempts
	RetryCount int `json:"retry_count,omitempty"`
	// Whether to validate SSL certificates
	ValidateSsl bool `json:"validate_ssl,omitempty"`
	// Whether to log request details
	LogRequests bool `json:"log_requests,omitempty"`
	// Whether to log response details
	LogResponses bool `json:"log_responses,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Endpoint) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case endpoint.FieldExtras:
			values[i] = new([]byte)
		case endpoint.FieldDisabled, endpoint.FieldUseCircuitBreaker, endpoint.FieldValidateSsl, endpoint.FieldLogRequests, endpoint.FieldLogResponses:
			values[i] = new(sql.NullBool)
		case endpoint.FieldCreatedAt, endpoint.FieldUpdatedAt, endpoint.FieldTimeout, endpoint.FieldRetryCount:
			values[i] = new(sql.NullInt64)
		case endpoint.FieldID, endpoint.FieldName, endpoint.FieldDescription, endpoint.FieldCreatedBy, endpoint.FieldUpdatedBy, endpoint.FieldBaseURL, endpoint.FieldProtocol, endpoint.FieldAuthType, endpoint.FieldAuthConfig:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Endpoint fields.
func (e *Endpoint) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case endpoint.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				e.ID = value.String
			}
		case endpoint.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				e.Name = value.String
			}
		case endpoint.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				e.Description = value.String
			}
		case endpoint.FieldDisabled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field disabled", values[i])
			} else if value.Valid {
				e.Disabled = value.Bool
			}
		case endpoint.FieldExtras:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field extras", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &e.Extras); err != nil {
					return fmt.Errorf("unmarshal field extras: %w", err)
				}
			}
		case endpoint.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				e.CreatedBy = value.String
			}
		case endpoint.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				e.UpdatedBy = value.String
			}
		case endpoint.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				e.CreatedAt = value.Int64
			}
		case endpoint.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				e.UpdatedAt = value.Int64
			}
		case endpoint.FieldBaseURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field base_url", values[i])
			} else if value.Valid {
				e.BaseURL = value.String
			}
		case endpoint.FieldProtocol:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field protocol", values[i])
			} else if value.Valid {
				e.Protocol = value.String
			}
		case endpoint.FieldAuthType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field auth_type", values[i])
			} else if value.Valid {
				e.AuthType = value.String
			}
		case endpoint.FieldAuthConfig:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field auth_config", values[i])
			} else if value.Valid {
				e.AuthConfig = value.String
			}
		case endpoint.FieldTimeout:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field timeout", values[i])
			} else if value.Valid {
				e.Timeout = int(value.Int64)
			}
		case endpoint.FieldUseCircuitBreaker:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field use_circuit_breaker", values[i])
			} else if value.Valid {
				e.UseCircuitBreaker = value.Bool
			}
		case endpoint.FieldRetryCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field retry_count", values[i])
			} else if value.Valid {
				e.RetryCount = int(value.Int64)
			}
		case endpoint.FieldValidateSsl:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field validate_ssl", values[i])
			} else if value.Valid {
				e.ValidateSsl = value.Bool
			}
		case endpoint.FieldLogRequests:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field log_requests", values[i])
			} else if value.Valid {
				e.LogRequests = value.Bool
			}
		case endpoint.FieldLogResponses:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field log_responses", values[i])
			} else if value.Valid {
				e.LogResponses = value.Bool
			}
		default:
			e.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Endpoint.
// This includes values selected through modifiers, order, etc.
func (e *Endpoint) Value(name string) (ent.Value, error) {
	return e.selectValues.Get(name)
}

// Update returns a builder for updating this Endpoint.
// Note that you need to call Endpoint.Unwrap() before calling this method if this Endpoint
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Endpoint) Update() *EndpointUpdateOne {
	return NewEndpointClient(e.config).UpdateOne(e)
}

// Unwrap unwraps the Endpoint entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *Endpoint) Unwrap() *Endpoint {
	_tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Endpoint is not a transactional entity")
	}
	e.config.driver = _tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Endpoint) String() string {
	var builder strings.Builder
	builder.WriteString("Endpoint(")
	builder.WriteString(fmt.Sprintf("id=%v, ", e.ID))
	builder.WriteString("name=")
	builder.WriteString(e.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(e.Description)
	builder.WriteString(", ")
	builder.WriteString("disabled=")
	builder.WriteString(fmt.Sprintf("%v", e.Disabled))
	builder.WriteString(", ")
	builder.WriteString("extras=")
	builder.WriteString(fmt.Sprintf("%v", e.Extras))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(e.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(e.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", e.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", e.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("base_url=")
	builder.WriteString(e.BaseURL)
	builder.WriteString(", ")
	builder.WriteString("protocol=")
	builder.WriteString(e.Protocol)
	builder.WriteString(", ")
	builder.WriteString("auth_type=")
	builder.WriteString(e.AuthType)
	builder.WriteString(", ")
	builder.WriteString("auth_config=")
	builder.WriteString(e.AuthConfig)
	builder.WriteString(", ")
	builder.WriteString("timeout=")
	builder.WriteString(fmt.Sprintf("%v", e.Timeout))
	builder.WriteString(", ")
	builder.WriteString("use_circuit_breaker=")
	builder.WriteString(fmt.Sprintf("%v", e.UseCircuitBreaker))
	builder.WriteString(", ")
	builder.WriteString("retry_count=")
	builder.WriteString(fmt.Sprintf("%v", e.RetryCount))
	builder.WriteString(", ")
	builder.WriteString("validate_ssl=")
	builder.WriteString(fmt.Sprintf("%v", e.ValidateSsl))
	builder.WriteString(", ")
	builder.WriteString("log_requests=")
	builder.WriteString(fmt.Sprintf("%v", e.LogRequests))
	builder.WriteString(", ")
	builder.WriteString("log_responses=")
	builder.WriteString(fmt.Sprintf("%v", e.LogResponses))
	builder.WriteByte(')')
	return builder.String()
}

// Endpoints is a parsable slice of Endpoint.
type Endpoints []*Endpoint
