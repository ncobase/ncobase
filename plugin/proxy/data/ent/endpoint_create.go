// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/proxy/data/ent/endpoint"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EndpointCreate is the builder for creating a Endpoint entity.
type EndpointCreate struct {
	config
	mutation *EndpointMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (ec *EndpointCreate) SetName(s string) *EndpointCreate {
	ec.mutation.SetName(s)
	return ec
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ec *EndpointCreate) SetNillableName(s *string) *EndpointCreate {
	if s != nil {
		ec.SetName(*s)
	}
	return ec
}

// SetDescription sets the "description" field.
func (ec *EndpointCreate) SetDescription(s string) *EndpointCreate {
	ec.mutation.SetDescription(s)
	return ec
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ec *EndpointCreate) SetNillableDescription(s *string) *EndpointCreate {
	if s != nil {
		ec.SetDescription(*s)
	}
	return ec
}

// SetDisabled sets the "disabled" field.
func (ec *EndpointCreate) SetDisabled(b bool) *EndpointCreate {
	ec.mutation.SetDisabled(b)
	return ec
}

// SetNillableDisabled sets the "disabled" field if the given value is not nil.
func (ec *EndpointCreate) SetNillableDisabled(b *bool) *EndpointCreate {
	if b != nil {
		ec.SetDisabled(*b)
	}
	return ec
}

// SetExtras sets the "extras" field.
func (ec *EndpointCreate) SetExtras(m map[string]interface{}) *EndpointCreate {
	ec.mutation.SetExtras(m)
	return ec
}

// SetCreatedBy sets the "created_by" field.
func (ec *EndpointCreate) SetCreatedBy(s string) *EndpointCreate {
	ec.mutation.SetCreatedBy(s)
	return ec
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (ec *EndpointCreate) SetNillableCreatedBy(s *string) *EndpointCreate {
	if s != nil {
		ec.SetCreatedBy(*s)
	}
	return ec
}

// SetUpdatedBy sets the "updated_by" field.
func (ec *EndpointCreate) SetUpdatedBy(s string) *EndpointCreate {
	ec.mutation.SetUpdatedBy(s)
	return ec
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ec *EndpointCreate) SetNillableUpdatedBy(s *string) *EndpointCreate {
	if s != nil {
		ec.SetUpdatedBy(*s)
	}
	return ec
}

// SetCreatedAt sets the "created_at" field.
func (ec *EndpointCreate) SetCreatedAt(i int64) *EndpointCreate {
	ec.mutation.SetCreatedAt(i)
	return ec
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ec *EndpointCreate) SetNillableCreatedAt(i *int64) *EndpointCreate {
	if i != nil {
		ec.SetCreatedAt(*i)
	}
	return ec
}

// SetUpdatedAt sets the "updated_at" field.
func (ec *EndpointCreate) SetUpdatedAt(i int64) *EndpointCreate {
	ec.mutation.SetUpdatedAt(i)
	return ec
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ec *EndpointCreate) SetNillableUpdatedAt(i *int64) *EndpointCreate {
	if i != nil {
		ec.SetUpdatedAt(*i)
	}
	return ec
}

// SetBaseURL sets the "base_url" field.
func (ec *EndpointCreate) SetBaseURL(s string) *EndpointCreate {
	ec.mutation.SetBaseURL(s)
	return ec
}

// SetProtocol sets the "protocol" field.
func (ec *EndpointCreate) SetProtocol(s string) *EndpointCreate {
	ec.mutation.SetProtocol(s)
	return ec
}

// SetNillableProtocol sets the "protocol" field if the given value is not nil.
func (ec *EndpointCreate) SetNillableProtocol(s *string) *EndpointCreate {
	if s != nil {
		ec.SetProtocol(*s)
	}
	return ec
}

// SetAuthType sets the "auth_type" field.
func (ec *EndpointCreate) SetAuthType(s string) *EndpointCreate {
	ec.mutation.SetAuthType(s)
	return ec
}

// SetNillableAuthType sets the "auth_type" field if the given value is not nil.
func (ec *EndpointCreate) SetNillableAuthType(s *string) *EndpointCreate {
	if s != nil {
		ec.SetAuthType(*s)
	}
	return ec
}

// SetAuthConfig sets the "auth_config" field.
func (ec *EndpointCreate) SetAuthConfig(s string) *EndpointCreate {
	ec.mutation.SetAuthConfig(s)
	return ec
}

// SetNillableAuthConfig sets the "auth_config" field if the given value is not nil.
func (ec *EndpointCreate) SetNillableAuthConfig(s *string) *EndpointCreate {
	if s != nil {
		ec.SetAuthConfig(*s)
	}
	return ec
}

// SetTimeout sets the "timeout" field.
func (ec *EndpointCreate) SetTimeout(i int) *EndpointCreate {
	ec.mutation.SetTimeout(i)
	return ec
}

// SetNillableTimeout sets the "timeout" field if the given value is not nil.
func (ec *EndpointCreate) SetNillableTimeout(i *int) *EndpointCreate {
	if i != nil {
		ec.SetTimeout(*i)
	}
	return ec
}

// SetUseCircuitBreaker sets the "use_circuit_breaker" field.
func (ec *EndpointCreate) SetUseCircuitBreaker(b bool) *EndpointCreate {
	ec.mutation.SetUseCircuitBreaker(b)
	return ec
}

// SetNillableUseCircuitBreaker sets the "use_circuit_breaker" field if the given value is not nil.
func (ec *EndpointCreate) SetNillableUseCircuitBreaker(b *bool) *EndpointCreate {
	if b != nil {
		ec.SetUseCircuitBreaker(*b)
	}
	return ec
}

// SetRetryCount sets the "retry_count" field.
func (ec *EndpointCreate) SetRetryCount(i int) *EndpointCreate {
	ec.mutation.SetRetryCount(i)
	return ec
}

// SetNillableRetryCount sets the "retry_count" field if the given value is not nil.
func (ec *EndpointCreate) SetNillableRetryCount(i *int) *EndpointCreate {
	if i != nil {
		ec.SetRetryCount(*i)
	}
	return ec
}

// SetValidateSsl sets the "validate_ssl" field.
func (ec *EndpointCreate) SetValidateSsl(b bool) *EndpointCreate {
	ec.mutation.SetValidateSsl(b)
	return ec
}

// SetNillableValidateSsl sets the "validate_ssl" field if the given value is not nil.
func (ec *EndpointCreate) SetNillableValidateSsl(b *bool) *EndpointCreate {
	if b != nil {
		ec.SetValidateSsl(*b)
	}
	return ec
}

// SetLogRequests sets the "log_requests" field.
func (ec *EndpointCreate) SetLogRequests(b bool) *EndpointCreate {
	ec.mutation.SetLogRequests(b)
	return ec
}

// SetNillableLogRequests sets the "log_requests" field if the given value is not nil.
func (ec *EndpointCreate) SetNillableLogRequests(b *bool) *EndpointCreate {
	if b != nil {
		ec.SetLogRequests(*b)
	}
	return ec
}

// SetLogResponses sets the "log_responses" field.
func (ec *EndpointCreate) SetLogResponses(b bool) *EndpointCreate {
	ec.mutation.SetLogResponses(b)
	return ec
}

// SetNillableLogResponses sets the "log_responses" field if the given value is not nil.
func (ec *EndpointCreate) SetNillableLogResponses(b *bool) *EndpointCreate {
	if b != nil {
		ec.SetLogResponses(*b)
	}
	return ec
}

// SetID sets the "id" field.
func (ec *EndpointCreate) SetID(s string) *EndpointCreate {
	ec.mutation.SetID(s)
	return ec
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ec *EndpointCreate) SetNillableID(s *string) *EndpointCreate {
	if s != nil {
		ec.SetID(*s)
	}
	return ec
}

// Mutation returns the EndpointMutation object of the builder.
func (ec *EndpointCreate) Mutation() *EndpointMutation {
	return ec.mutation
}

// Save creates the Endpoint in the database.
func (ec *EndpointCreate) Save(ctx context.Context) (*Endpoint, error) {
	ec.defaults()
	return withHooks(ctx, ec.sqlSave, ec.mutation, ec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ec *EndpointCreate) SaveX(ctx context.Context) *Endpoint {
	v, err := ec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ec *EndpointCreate) Exec(ctx context.Context) error {
	_, err := ec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ec *EndpointCreate) ExecX(ctx context.Context) {
	if err := ec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ec *EndpointCreate) defaults() {
	if _, ok := ec.mutation.Disabled(); !ok {
		v := endpoint.DefaultDisabled
		ec.mutation.SetDisabled(v)
	}
	if _, ok := ec.mutation.Extras(); !ok {
		v := endpoint.DefaultExtras
		ec.mutation.SetExtras(v)
	}
	if _, ok := ec.mutation.CreatedAt(); !ok {
		v := endpoint.DefaultCreatedAt()
		ec.mutation.SetCreatedAt(v)
	}
	if _, ok := ec.mutation.UpdatedAt(); !ok {
		v := endpoint.DefaultUpdatedAt()
		ec.mutation.SetUpdatedAt(v)
	}
	if _, ok := ec.mutation.Protocol(); !ok {
		v := endpoint.DefaultProtocol
		ec.mutation.SetProtocol(v)
	}
	if _, ok := ec.mutation.AuthType(); !ok {
		v := endpoint.DefaultAuthType
		ec.mutation.SetAuthType(v)
	}
	if _, ok := ec.mutation.Timeout(); !ok {
		v := endpoint.DefaultTimeout
		ec.mutation.SetTimeout(v)
	}
	if _, ok := ec.mutation.UseCircuitBreaker(); !ok {
		v := endpoint.DefaultUseCircuitBreaker
		ec.mutation.SetUseCircuitBreaker(v)
	}
	if _, ok := ec.mutation.RetryCount(); !ok {
		v := endpoint.DefaultRetryCount
		ec.mutation.SetRetryCount(v)
	}
	if _, ok := ec.mutation.ValidateSsl(); !ok {
		v := endpoint.DefaultValidateSsl
		ec.mutation.SetValidateSsl(v)
	}
	if _, ok := ec.mutation.LogRequests(); !ok {
		v := endpoint.DefaultLogRequests
		ec.mutation.SetLogRequests(v)
	}
	if _, ok := ec.mutation.LogResponses(); !ok {
		v := endpoint.DefaultLogResponses
		ec.mutation.SetLogResponses(v)
	}
	if _, ok := ec.mutation.ID(); !ok {
		v := endpoint.DefaultID()
		ec.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ec *EndpointCreate) check() error {
	if v, ok := ec.mutation.CreatedBy(); ok {
		if err := endpoint.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "Endpoint.created_by": %w`, err)}
		}
	}
	if v, ok := ec.mutation.UpdatedBy(); ok {
		if err := endpoint.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "Endpoint.updated_by": %w`, err)}
		}
	}
	if _, ok := ec.mutation.BaseURL(); !ok {
		return &ValidationError{Name: "base_url", err: errors.New(`ent: missing required field "Endpoint.base_url"`)}
	}
	if v, ok := ec.mutation.BaseURL(); ok {
		if err := endpoint.BaseURLValidator(v); err != nil {
			return &ValidationError{Name: "base_url", err: fmt.Errorf(`ent: validator failed for field "Endpoint.base_url": %w`, err)}
		}
	}
	if _, ok := ec.mutation.Protocol(); !ok {
		return &ValidationError{Name: "protocol", err: errors.New(`ent: missing required field "Endpoint.protocol"`)}
	}
	if _, ok := ec.mutation.AuthType(); !ok {
		return &ValidationError{Name: "auth_type", err: errors.New(`ent: missing required field "Endpoint.auth_type"`)}
	}
	if _, ok := ec.mutation.Timeout(); !ok {
		return &ValidationError{Name: "timeout", err: errors.New(`ent: missing required field "Endpoint.timeout"`)}
	}
	if _, ok := ec.mutation.UseCircuitBreaker(); !ok {
		return &ValidationError{Name: "use_circuit_breaker", err: errors.New(`ent: missing required field "Endpoint.use_circuit_breaker"`)}
	}
	if _, ok := ec.mutation.RetryCount(); !ok {
		return &ValidationError{Name: "retry_count", err: errors.New(`ent: missing required field "Endpoint.retry_count"`)}
	}
	if _, ok := ec.mutation.ValidateSsl(); !ok {
		return &ValidationError{Name: "validate_ssl", err: errors.New(`ent: missing required field "Endpoint.validate_ssl"`)}
	}
	if _, ok := ec.mutation.LogRequests(); !ok {
		return &ValidationError{Name: "log_requests", err: errors.New(`ent: missing required field "Endpoint.log_requests"`)}
	}
	if _, ok := ec.mutation.LogResponses(); !ok {
		return &ValidationError{Name: "log_responses", err: errors.New(`ent: missing required field "Endpoint.log_responses"`)}
	}
	if v, ok := ec.mutation.ID(); ok {
		if err := endpoint.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Endpoint.id": %w`, err)}
		}
	}
	return nil
}

func (ec *EndpointCreate) sqlSave(ctx context.Context) (*Endpoint, error) {
	if err := ec.check(); err != nil {
		return nil, err
	}
	_node, _spec := ec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Endpoint.ID type: %T", _spec.ID.Value)
		}
	}
	ec.mutation.id = &_node.ID
	ec.mutation.done = true
	return _node, nil
}

func (ec *EndpointCreate) createSpec() (*Endpoint, *sqlgraph.CreateSpec) {
	var (
		_node = &Endpoint{config: ec.config}
		_spec = sqlgraph.NewCreateSpec(endpoint.Table, sqlgraph.NewFieldSpec(endpoint.FieldID, field.TypeString))
	)
	if id, ok := ec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ec.mutation.Name(); ok {
		_spec.SetField(endpoint.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ec.mutation.Description(); ok {
		_spec.SetField(endpoint.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := ec.mutation.Disabled(); ok {
		_spec.SetField(endpoint.FieldDisabled, field.TypeBool, value)
		_node.Disabled = value
	}
	if value, ok := ec.mutation.Extras(); ok {
		_spec.SetField(endpoint.FieldExtras, field.TypeJSON, value)
		_node.Extras = value
	}
	if value, ok := ec.mutation.CreatedBy(); ok {
		_spec.SetField(endpoint.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := ec.mutation.UpdatedBy(); ok {
		_spec.SetField(endpoint.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := ec.mutation.CreatedAt(); ok {
		_spec.SetField(endpoint.FieldCreatedAt, field.TypeInt64, value)
		_node.CreatedAt = value
	}
	if value, ok := ec.mutation.UpdatedAt(); ok {
		_spec.SetField(endpoint.FieldUpdatedAt, field.TypeInt64, value)
		_node.UpdatedAt = value
	}
	if value, ok := ec.mutation.BaseURL(); ok {
		_spec.SetField(endpoint.FieldBaseURL, field.TypeString, value)
		_node.BaseURL = value
	}
	if value, ok := ec.mutation.Protocol(); ok {
		_spec.SetField(endpoint.FieldProtocol, field.TypeString, value)
		_node.Protocol = value
	}
	if value, ok := ec.mutation.AuthType(); ok {
		_spec.SetField(endpoint.FieldAuthType, field.TypeString, value)
		_node.AuthType = value
	}
	if value, ok := ec.mutation.AuthConfig(); ok {
		_spec.SetField(endpoint.FieldAuthConfig, field.TypeString, value)
		_node.AuthConfig = value
	}
	if value, ok := ec.mutation.Timeout(); ok {
		_spec.SetField(endpoint.FieldTimeout, field.TypeInt, value)
		_node.Timeout = value
	}
	if value, ok := ec.mutation.UseCircuitBreaker(); ok {
		_spec.SetField(endpoint.FieldUseCircuitBreaker, field.TypeBool, value)
		_node.UseCircuitBreaker = value
	}
	if value, ok := ec.mutation.RetryCount(); ok {
		_spec.SetField(endpoint.FieldRetryCount, field.TypeInt, value)
		_node.RetryCount = value
	}
	if value, ok := ec.mutation.ValidateSsl(); ok {
		_spec.SetField(endpoint.FieldValidateSsl, field.TypeBool, value)
		_node.ValidateSsl = value
	}
	if value, ok := ec.mutation.LogRequests(); ok {
		_spec.SetField(endpoint.FieldLogRequests, field.TypeBool, value)
		_node.LogRequests = value
	}
	if value, ok := ec.mutation.LogResponses(); ok {
		_spec.SetField(endpoint.FieldLogResponses, field.TypeBool, value)
		_node.LogResponses = value
	}
	return _node, _spec
}

// EndpointCreateBulk is the builder for creating many Endpoint entities in bulk.
type EndpointCreateBulk struct {
	config
	err      error
	builders []*EndpointCreate
}

// Save creates the Endpoint entities in the database.
func (ecb *EndpointCreateBulk) Save(ctx context.Context) ([]*Endpoint, error) {
	if ecb.err != nil {
		return nil, ecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ecb.builders))
	nodes := make([]*Endpoint, len(ecb.builders))
	mutators := make([]Mutator, len(ecb.builders))
	for i := range ecb.builders {
		func(i int, root context.Context) {
			builder := ecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EndpointMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ecb *EndpointCreateBulk) SaveX(ctx context.Context) []*Endpoint {
	v, err := ecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ecb *EndpointCreateBulk) Exec(ctx context.Context) error {
	_, err := ecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecb *EndpointCreateBulk) ExecX(ctx context.Context) {
	if err := ecb.Exec(ctx); err != nil {
		panic(err)
	}
}
