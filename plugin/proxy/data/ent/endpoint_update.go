// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/proxy/data/ent/endpoint"
	"ncobase/proxy/data/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EndpointUpdate is the builder for updating Endpoint entities.
type EndpointUpdate struct {
	config
	hooks    []Hook
	mutation *EndpointMutation
}

// Where appends a list predicates to the EndpointUpdate builder.
func (eu *EndpointUpdate) Where(ps ...predicate.Endpoint) *EndpointUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetName sets the "name" field.
func (eu *EndpointUpdate) SetName(s string) *EndpointUpdate {
	eu.mutation.SetName(s)
	return eu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (eu *EndpointUpdate) SetNillableName(s *string) *EndpointUpdate {
	if s != nil {
		eu.SetName(*s)
	}
	return eu
}

// ClearName clears the value of the "name" field.
func (eu *EndpointUpdate) ClearName() *EndpointUpdate {
	eu.mutation.ClearName()
	return eu
}

// SetDescription sets the "description" field.
func (eu *EndpointUpdate) SetDescription(s string) *EndpointUpdate {
	eu.mutation.SetDescription(s)
	return eu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (eu *EndpointUpdate) SetNillableDescription(s *string) *EndpointUpdate {
	if s != nil {
		eu.SetDescription(*s)
	}
	return eu
}

// ClearDescription clears the value of the "description" field.
func (eu *EndpointUpdate) ClearDescription() *EndpointUpdate {
	eu.mutation.ClearDescription()
	return eu
}

// SetDisabled sets the "disabled" field.
func (eu *EndpointUpdate) SetDisabled(b bool) *EndpointUpdate {
	eu.mutation.SetDisabled(b)
	return eu
}

// SetNillableDisabled sets the "disabled" field if the given value is not nil.
func (eu *EndpointUpdate) SetNillableDisabled(b *bool) *EndpointUpdate {
	if b != nil {
		eu.SetDisabled(*b)
	}
	return eu
}

// ClearDisabled clears the value of the "disabled" field.
func (eu *EndpointUpdate) ClearDisabled() *EndpointUpdate {
	eu.mutation.ClearDisabled()
	return eu
}

// SetExtras sets the "extras" field.
func (eu *EndpointUpdate) SetExtras(m map[string]interface{}) *EndpointUpdate {
	eu.mutation.SetExtras(m)
	return eu
}

// ClearExtras clears the value of the "extras" field.
func (eu *EndpointUpdate) ClearExtras() *EndpointUpdate {
	eu.mutation.ClearExtras()
	return eu
}

// SetCreatedBy sets the "created_by" field.
func (eu *EndpointUpdate) SetCreatedBy(s string) *EndpointUpdate {
	eu.mutation.SetCreatedBy(s)
	return eu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (eu *EndpointUpdate) SetNillableCreatedBy(s *string) *EndpointUpdate {
	if s != nil {
		eu.SetCreatedBy(*s)
	}
	return eu
}

// ClearCreatedBy clears the value of the "created_by" field.
func (eu *EndpointUpdate) ClearCreatedBy() *EndpointUpdate {
	eu.mutation.ClearCreatedBy()
	return eu
}

// SetUpdatedBy sets the "updated_by" field.
func (eu *EndpointUpdate) SetUpdatedBy(s string) *EndpointUpdate {
	eu.mutation.SetUpdatedBy(s)
	return eu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (eu *EndpointUpdate) SetNillableUpdatedBy(s *string) *EndpointUpdate {
	if s != nil {
		eu.SetUpdatedBy(*s)
	}
	return eu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (eu *EndpointUpdate) ClearUpdatedBy() *EndpointUpdate {
	eu.mutation.ClearUpdatedBy()
	return eu
}

// SetUpdatedAt sets the "updated_at" field.
func (eu *EndpointUpdate) SetUpdatedAt(i int64) *EndpointUpdate {
	eu.mutation.ResetUpdatedAt()
	eu.mutation.SetUpdatedAt(i)
	return eu
}

// AddUpdatedAt adds i to the "updated_at" field.
func (eu *EndpointUpdate) AddUpdatedAt(i int64) *EndpointUpdate {
	eu.mutation.AddUpdatedAt(i)
	return eu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (eu *EndpointUpdate) ClearUpdatedAt() *EndpointUpdate {
	eu.mutation.ClearUpdatedAt()
	return eu
}

// SetBaseURL sets the "base_url" field.
func (eu *EndpointUpdate) SetBaseURL(s string) *EndpointUpdate {
	eu.mutation.SetBaseURL(s)
	return eu
}

// SetNillableBaseURL sets the "base_url" field if the given value is not nil.
func (eu *EndpointUpdate) SetNillableBaseURL(s *string) *EndpointUpdate {
	if s != nil {
		eu.SetBaseURL(*s)
	}
	return eu
}

// SetProtocol sets the "protocol" field.
func (eu *EndpointUpdate) SetProtocol(s string) *EndpointUpdate {
	eu.mutation.SetProtocol(s)
	return eu
}

// SetNillableProtocol sets the "protocol" field if the given value is not nil.
func (eu *EndpointUpdate) SetNillableProtocol(s *string) *EndpointUpdate {
	if s != nil {
		eu.SetProtocol(*s)
	}
	return eu
}

// SetAuthType sets the "auth_type" field.
func (eu *EndpointUpdate) SetAuthType(s string) *EndpointUpdate {
	eu.mutation.SetAuthType(s)
	return eu
}

// SetNillableAuthType sets the "auth_type" field if the given value is not nil.
func (eu *EndpointUpdate) SetNillableAuthType(s *string) *EndpointUpdate {
	if s != nil {
		eu.SetAuthType(*s)
	}
	return eu
}

// SetAuthConfig sets the "auth_config" field.
func (eu *EndpointUpdate) SetAuthConfig(s string) *EndpointUpdate {
	eu.mutation.SetAuthConfig(s)
	return eu
}

// SetNillableAuthConfig sets the "auth_config" field if the given value is not nil.
func (eu *EndpointUpdate) SetNillableAuthConfig(s *string) *EndpointUpdate {
	if s != nil {
		eu.SetAuthConfig(*s)
	}
	return eu
}

// ClearAuthConfig clears the value of the "auth_config" field.
func (eu *EndpointUpdate) ClearAuthConfig() *EndpointUpdate {
	eu.mutation.ClearAuthConfig()
	return eu
}

// SetTimeout sets the "timeout" field.
func (eu *EndpointUpdate) SetTimeout(i int) *EndpointUpdate {
	eu.mutation.ResetTimeout()
	eu.mutation.SetTimeout(i)
	return eu
}

// SetNillableTimeout sets the "timeout" field if the given value is not nil.
func (eu *EndpointUpdate) SetNillableTimeout(i *int) *EndpointUpdate {
	if i != nil {
		eu.SetTimeout(*i)
	}
	return eu
}

// AddTimeout adds i to the "timeout" field.
func (eu *EndpointUpdate) AddTimeout(i int) *EndpointUpdate {
	eu.mutation.AddTimeout(i)
	return eu
}

// SetUseCircuitBreaker sets the "use_circuit_breaker" field.
func (eu *EndpointUpdate) SetUseCircuitBreaker(b bool) *EndpointUpdate {
	eu.mutation.SetUseCircuitBreaker(b)
	return eu
}

// SetNillableUseCircuitBreaker sets the "use_circuit_breaker" field if the given value is not nil.
func (eu *EndpointUpdate) SetNillableUseCircuitBreaker(b *bool) *EndpointUpdate {
	if b != nil {
		eu.SetUseCircuitBreaker(*b)
	}
	return eu
}

// SetRetryCount sets the "retry_count" field.
func (eu *EndpointUpdate) SetRetryCount(i int) *EndpointUpdate {
	eu.mutation.ResetRetryCount()
	eu.mutation.SetRetryCount(i)
	return eu
}

// SetNillableRetryCount sets the "retry_count" field if the given value is not nil.
func (eu *EndpointUpdate) SetNillableRetryCount(i *int) *EndpointUpdate {
	if i != nil {
		eu.SetRetryCount(*i)
	}
	return eu
}

// AddRetryCount adds i to the "retry_count" field.
func (eu *EndpointUpdate) AddRetryCount(i int) *EndpointUpdate {
	eu.mutation.AddRetryCount(i)
	return eu
}

// SetValidateSsl sets the "validate_ssl" field.
func (eu *EndpointUpdate) SetValidateSsl(b bool) *EndpointUpdate {
	eu.mutation.SetValidateSsl(b)
	return eu
}

// SetNillableValidateSsl sets the "validate_ssl" field if the given value is not nil.
func (eu *EndpointUpdate) SetNillableValidateSsl(b *bool) *EndpointUpdate {
	if b != nil {
		eu.SetValidateSsl(*b)
	}
	return eu
}

// SetLogRequests sets the "log_requests" field.
func (eu *EndpointUpdate) SetLogRequests(b bool) *EndpointUpdate {
	eu.mutation.SetLogRequests(b)
	return eu
}

// SetNillableLogRequests sets the "log_requests" field if the given value is not nil.
func (eu *EndpointUpdate) SetNillableLogRequests(b *bool) *EndpointUpdate {
	if b != nil {
		eu.SetLogRequests(*b)
	}
	return eu
}

// SetLogResponses sets the "log_responses" field.
func (eu *EndpointUpdate) SetLogResponses(b bool) *EndpointUpdate {
	eu.mutation.SetLogResponses(b)
	return eu
}

// SetNillableLogResponses sets the "log_responses" field if the given value is not nil.
func (eu *EndpointUpdate) SetNillableLogResponses(b *bool) *EndpointUpdate {
	if b != nil {
		eu.SetLogResponses(*b)
	}
	return eu
}

// Mutation returns the EndpointMutation object of the builder.
func (eu *EndpointUpdate) Mutation() *EndpointMutation {
	return eu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *EndpointUpdate) Save(ctx context.Context) (int, error) {
	eu.defaults()
	return withHooks(ctx, eu.sqlSave, eu.mutation, eu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EndpointUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EndpointUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EndpointUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (eu *EndpointUpdate) defaults() {
	if _, ok := eu.mutation.UpdatedAt(); !ok && !eu.mutation.UpdatedAtCleared() {
		v := endpoint.UpdateDefaultUpdatedAt()
		eu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eu *EndpointUpdate) check() error {
	if v, ok := eu.mutation.CreatedBy(); ok {
		if err := endpoint.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "Endpoint.created_by": %w`, err)}
		}
	}
	if v, ok := eu.mutation.UpdatedBy(); ok {
		if err := endpoint.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "Endpoint.updated_by": %w`, err)}
		}
	}
	if v, ok := eu.mutation.BaseURL(); ok {
		if err := endpoint.BaseURLValidator(v); err != nil {
			return &ValidationError{Name: "base_url", err: fmt.Errorf(`ent: validator failed for field "Endpoint.base_url": %w`, err)}
		}
	}
	return nil
}

func (eu *EndpointUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := eu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(endpoint.Table, endpoint.Columns, sqlgraph.NewFieldSpec(endpoint.FieldID, field.TypeString))
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.Name(); ok {
		_spec.SetField(endpoint.FieldName, field.TypeString, value)
	}
	if eu.mutation.NameCleared() {
		_spec.ClearField(endpoint.FieldName, field.TypeString)
	}
	if value, ok := eu.mutation.Description(); ok {
		_spec.SetField(endpoint.FieldDescription, field.TypeString, value)
	}
	if eu.mutation.DescriptionCleared() {
		_spec.ClearField(endpoint.FieldDescription, field.TypeString)
	}
	if value, ok := eu.mutation.Disabled(); ok {
		_spec.SetField(endpoint.FieldDisabled, field.TypeBool, value)
	}
	if eu.mutation.DisabledCleared() {
		_spec.ClearField(endpoint.FieldDisabled, field.TypeBool)
	}
	if value, ok := eu.mutation.Extras(); ok {
		_spec.SetField(endpoint.FieldExtras, field.TypeJSON, value)
	}
	if eu.mutation.ExtrasCleared() {
		_spec.ClearField(endpoint.FieldExtras, field.TypeJSON)
	}
	if value, ok := eu.mutation.CreatedBy(); ok {
		_spec.SetField(endpoint.FieldCreatedBy, field.TypeString, value)
	}
	if eu.mutation.CreatedByCleared() {
		_spec.ClearField(endpoint.FieldCreatedBy, field.TypeString)
	}
	if value, ok := eu.mutation.UpdatedBy(); ok {
		_spec.SetField(endpoint.FieldUpdatedBy, field.TypeString, value)
	}
	if eu.mutation.UpdatedByCleared() {
		_spec.ClearField(endpoint.FieldUpdatedBy, field.TypeString)
	}
	if eu.mutation.CreatedAtCleared() {
		_spec.ClearField(endpoint.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := eu.mutation.UpdatedAt(); ok {
		_spec.SetField(endpoint.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := eu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(endpoint.FieldUpdatedAt, field.TypeInt64, value)
	}
	if eu.mutation.UpdatedAtCleared() {
		_spec.ClearField(endpoint.FieldUpdatedAt, field.TypeInt64)
	}
	if value, ok := eu.mutation.BaseURL(); ok {
		_spec.SetField(endpoint.FieldBaseURL, field.TypeString, value)
	}
	if value, ok := eu.mutation.Protocol(); ok {
		_spec.SetField(endpoint.FieldProtocol, field.TypeString, value)
	}
	if value, ok := eu.mutation.AuthType(); ok {
		_spec.SetField(endpoint.FieldAuthType, field.TypeString, value)
	}
	if value, ok := eu.mutation.AuthConfig(); ok {
		_spec.SetField(endpoint.FieldAuthConfig, field.TypeString, value)
	}
	if eu.mutation.AuthConfigCleared() {
		_spec.ClearField(endpoint.FieldAuthConfig, field.TypeString)
	}
	if value, ok := eu.mutation.Timeout(); ok {
		_spec.SetField(endpoint.FieldTimeout, field.TypeInt, value)
	}
	if value, ok := eu.mutation.AddedTimeout(); ok {
		_spec.AddField(endpoint.FieldTimeout, field.TypeInt, value)
	}
	if value, ok := eu.mutation.UseCircuitBreaker(); ok {
		_spec.SetField(endpoint.FieldUseCircuitBreaker, field.TypeBool, value)
	}
	if value, ok := eu.mutation.RetryCount(); ok {
		_spec.SetField(endpoint.FieldRetryCount, field.TypeInt, value)
	}
	if value, ok := eu.mutation.AddedRetryCount(); ok {
		_spec.AddField(endpoint.FieldRetryCount, field.TypeInt, value)
	}
	if value, ok := eu.mutation.ValidateSsl(); ok {
		_spec.SetField(endpoint.FieldValidateSsl, field.TypeBool, value)
	}
	if value, ok := eu.mutation.LogRequests(); ok {
		_spec.SetField(endpoint.FieldLogRequests, field.TypeBool, value)
	}
	if value, ok := eu.mutation.LogResponses(); ok {
		_spec.SetField(endpoint.FieldLogResponses, field.TypeBool, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{endpoint.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eu.mutation.done = true
	return n, nil
}

// EndpointUpdateOne is the builder for updating a single Endpoint entity.
type EndpointUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EndpointMutation
}

// SetName sets the "name" field.
func (euo *EndpointUpdateOne) SetName(s string) *EndpointUpdateOne {
	euo.mutation.SetName(s)
	return euo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (euo *EndpointUpdateOne) SetNillableName(s *string) *EndpointUpdateOne {
	if s != nil {
		euo.SetName(*s)
	}
	return euo
}

// ClearName clears the value of the "name" field.
func (euo *EndpointUpdateOne) ClearName() *EndpointUpdateOne {
	euo.mutation.ClearName()
	return euo
}

// SetDescription sets the "description" field.
func (euo *EndpointUpdateOne) SetDescription(s string) *EndpointUpdateOne {
	euo.mutation.SetDescription(s)
	return euo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (euo *EndpointUpdateOne) SetNillableDescription(s *string) *EndpointUpdateOne {
	if s != nil {
		euo.SetDescription(*s)
	}
	return euo
}

// ClearDescription clears the value of the "description" field.
func (euo *EndpointUpdateOne) ClearDescription() *EndpointUpdateOne {
	euo.mutation.ClearDescription()
	return euo
}

// SetDisabled sets the "disabled" field.
func (euo *EndpointUpdateOne) SetDisabled(b bool) *EndpointUpdateOne {
	euo.mutation.SetDisabled(b)
	return euo
}

// SetNillableDisabled sets the "disabled" field if the given value is not nil.
func (euo *EndpointUpdateOne) SetNillableDisabled(b *bool) *EndpointUpdateOne {
	if b != nil {
		euo.SetDisabled(*b)
	}
	return euo
}

// ClearDisabled clears the value of the "disabled" field.
func (euo *EndpointUpdateOne) ClearDisabled() *EndpointUpdateOne {
	euo.mutation.ClearDisabled()
	return euo
}

// SetExtras sets the "extras" field.
func (euo *EndpointUpdateOne) SetExtras(m map[string]interface{}) *EndpointUpdateOne {
	euo.mutation.SetExtras(m)
	return euo
}

// ClearExtras clears the value of the "extras" field.
func (euo *EndpointUpdateOne) ClearExtras() *EndpointUpdateOne {
	euo.mutation.ClearExtras()
	return euo
}

// SetCreatedBy sets the "created_by" field.
func (euo *EndpointUpdateOne) SetCreatedBy(s string) *EndpointUpdateOne {
	euo.mutation.SetCreatedBy(s)
	return euo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (euo *EndpointUpdateOne) SetNillableCreatedBy(s *string) *EndpointUpdateOne {
	if s != nil {
		euo.SetCreatedBy(*s)
	}
	return euo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (euo *EndpointUpdateOne) ClearCreatedBy() *EndpointUpdateOne {
	euo.mutation.ClearCreatedBy()
	return euo
}

// SetUpdatedBy sets the "updated_by" field.
func (euo *EndpointUpdateOne) SetUpdatedBy(s string) *EndpointUpdateOne {
	euo.mutation.SetUpdatedBy(s)
	return euo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (euo *EndpointUpdateOne) SetNillableUpdatedBy(s *string) *EndpointUpdateOne {
	if s != nil {
		euo.SetUpdatedBy(*s)
	}
	return euo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (euo *EndpointUpdateOne) ClearUpdatedBy() *EndpointUpdateOne {
	euo.mutation.ClearUpdatedBy()
	return euo
}

// SetUpdatedAt sets the "updated_at" field.
func (euo *EndpointUpdateOne) SetUpdatedAt(i int64) *EndpointUpdateOne {
	euo.mutation.ResetUpdatedAt()
	euo.mutation.SetUpdatedAt(i)
	return euo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (euo *EndpointUpdateOne) AddUpdatedAt(i int64) *EndpointUpdateOne {
	euo.mutation.AddUpdatedAt(i)
	return euo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (euo *EndpointUpdateOne) ClearUpdatedAt() *EndpointUpdateOne {
	euo.mutation.ClearUpdatedAt()
	return euo
}

// SetBaseURL sets the "base_url" field.
func (euo *EndpointUpdateOne) SetBaseURL(s string) *EndpointUpdateOne {
	euo.mutation.SetBaseURL(s)
	return euo
}

// SetNillableBaseURL sets the "base_url" field if the given value is not nil.
func (euo *EndpointUpdateOne) SetNillableBaseURL(s *string) *EndpointUpdateOne {
	if s != nil {
		euo.SetBaseURL(*s)
	}
	return euo
}

// SetProtocol sets the "protocol" field.
func (euo *EndpointUpdateOne) SetProtocol(s string) *EndpointUpdateOne {
	euo.mutation.SetProtocol(s)
	return euo
}

// SetNillableProtocol sets the "protocol" field if the given value is not nil.
func (euo *EndpointUpdateOne) SetNillableProtocol(s *string) *EndpointUpdateOne {
	if s != nil {
		euo.SetProtocol(*s)
	}
	return euo
}

// SetAuthType sets the "auth_type" field.
func (euo *EndpointUpdateOne) SetAuthType(s string) *EndpointUpdateOne {
	euo.mutation.SetAuthType(s)
	return euo
}

// SetNillableAuthType sets the "auth_type" field if the given value is not nil.
func (euo *EndpointUpdateOne) SetNillableAuthType(s *string) *EndpointUpdateOne {
	if s != nil {
		euo.SetAuthType(*s)
	}
	return euo
}

// SetAuthConfig sets the "auth_config" field.
func (euo *EndpointUpdateOne) SetAuthConfig(s string) *EndpointUpdateOne {
	euo.mutation.SetAuthConfig(s)
	return euo
}

// SetNillableAuthConfig sets the "auth_config" field if the given value is not nil.
func (euo *EndpointUpdateOne) SetNillableAuthConfig(s *string) *EndpointUpdateOne {
	if s != nil {
		euo.SetAuthConfig(*s)
	}
	return euo
}

// ClearAuthConfig clears the value of the "auth_config" field.
func (euo *EndpointUpdateOne) ClearAuthConfig() *EndpointUpdateOne {
	euo.mutation.ClearAuthConfig()
	return euo
}

// SetTimeout sets the "timeout" field.
func (euo *EndpointUpdateOne) SetTimeout(i int) *EndpointUpdateOne {
	euo.mutation.ResetTimeout()
	euo.mutation.SetTimeout(i)
	return euo
}

// SetNillableTimeout sets the "timeout" field if the given value is not nil.
func (euo *EndpointUpdateOne) SetNillableTimeout(i *int) *EndpointUpdateOne {
	if i != nil {
		euo.SetTimeout(*i)
	}
	return euo
}

// AddTimeout adds i to the "timeout" field.
func (euo *EndpointUpdateOne) AddTimeout(i int) *EndpointUpdateOne {
	euo.mutation.AddTimeout(i)
	return euo
}

// SetUseCircuitBreaker sets the "use_circuit_breaker" field.
func (euo *EndpointUpdateOne) SetUseCircuitBreaker(b bool) *EndpointUpdateOne {
	euo.mutation.SetUseCircuitBreaker(b)
	return euo
}

// SetNillableUseCircuitBreaker sets the "use_circuit_breaker" field if the given value is not nil.
func (euo *EndpointUpdateOne) SetNillableUseCircuitBreaker(b *bool) *EndpointUpdateOne {
	if b != nil {
		euo.SetUseCircuitBreaker(*b)
	}
	return euo
}

// SetRetryCount sets the "retry_count" field.
func (euo *EndpointUpdateOne) SetRetryCount(i int) *EndpointUpdateOne {
	euo.mutation.ResetRetryCount()
	euo.mutation.SetRetryCount(i)
	return euo
}

// SetNillableRetryCount sets the "retry_count" field if the given value is not nil.
func (euo *EndpointUpdateOne) SetNillableRetryCount(i *int) *EndpointUpdateOne {
	if i != nil {
		euo.SetRetryCount(*i)
	}
	return euo
}

// AddRetryCount adds i to the "retry_count" field.
func (euo *EndpointUpdateOne) AddRetryCount(i int) *EndpointUpdateOne {
	euo.mutation.AddRetryCount(i)
	return euo
}

// SetValidateSsl sets the "validate_ssl" field.
func (euo *EndpointUpdateOne) SetValidateSsl(b bool) *EndpointUpdateOne {
	euo.mutation.SetValidateSsl(b)
	return euo
}

// SetNillableValidateSsl sets the "validate_ssl" field if the given value is not nil.
func (euo *EndpointUpdateOne) SetNillableValidateSsl(b *bool) *EndpointUpdateOne {
	if b != nil {
		euo.SetValidateSsl(*b)
	}
	return euo
}

// SetLogRequests sets the "log_requests" field.
func (euo *EndpointUpdateOne) SetLogRequests(b bool) *EndpointUpdateOne {
	euo.mutation.SetLogRequests(b)
	return euo
}

// SetNillableLogRequests sets the "log_requests" field if the given value is not nil.
func (euo *EndpointUpdateOne) SetNillableLogRequests(b *bool) *EndpointUpdateOne {
	if b != nil {
		euo.SetLogRequests(*b)
	}
	return euo
}

// SetLogResponses sets the "log_responses" field.
func (euo *EndpointUpdateOne) SetLogResponses(b bool) *EndpointUpdateOne {
	euo.mutation.SetLogResponses(b)
	return euo
}

// SetNillableLogResponses sets the "log_responses" field if the given value is not nil.
func (euo *EndpointUpdateOne) SetNillableLogResponses(b *bool) *EndpointUpdateOne {
	if b != nil {
		euo.SetLogResponses(*b)
	}
	return euo
}

// Mutation returns the EndpointMutation object of the builder.
func (euo *EndpointUpdateOne) Mutation() *EndpointMutation {
	return euo.mutation
}

// Where appends a list predicates to the EndpointUpdate builder.
func (euo *EndpointUpdateOne) Where(ps ...predicate.Endpoint) *EndpointUpdateOne {
	euo.mutation.Where(ps...)
	return euo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *EndpointUpdateOne) Select(field string, fields ...string) *EndpointUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Endpoint entity.
func (euo *EndpointUpdateOne) Save(ctx context.Context) (*Endpoint, error) {
	euo.defaults()
	return withHooks(ctx, euo.sqlSave, euo.mutation, euo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EndpointUpdateOne) SaveX(ctx context.Context) *Endpoint {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *EndpointUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EndpointUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (euo *EndpointUpdateOne) defaults() {
	if _, ok := euo.mutation.UpdatedAt(); !ok && !euo.mutation.UpdatedAtCleared() {
		v := endpoint.UpdateDefaultUpdatedAt()
		euo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (euo *EndpointUpdateOne) check() error {
	if v, ok := euo.mutation.CreatedBy(); ok {
		if err := endpoint.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "Endpoint.created_by": %w`, err)}
		}
	}
	if v, ok := euo.mutation.UpdatedBy(); ok {
		if err := endpoint.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "Endpoint.updated_by": %w`, err)}
		}
	}
	if v, ok := euo.mutation.BaseURL(); ok {
		if err := endpoint.BaseURLValidator(v); err != nil {
			return &ValidationError{Name: "base_url", err: fmt.Errorf(`ent: validator failed for field "Endpoint.base_url": %w`, err)}
		}
	}
	return nil
}

func (euo *EndpointUpdateOne) sqlSave(ctx context.Context) (_node *Endpoint, err error) {
	if err := euo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(endpoint.Table, endpoint.Columns, sqlgraph.NewFieldSpec(endpoint.FieldID, field.TypeString))
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Endpoint.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, endpoint.FieldID)
		for _, f := range fields {
			if !endpoint.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != endpoint.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.Name(); ok {
		_spec.SetField(endpoint.FieldName, field.TypeString, value)
	}
	if euo.mutation.NameCleared() {
		_spec.ClearField(endpoint.FieldName, field.TypeString)
	}
	if value, ok := euo.mutation.Description(); ok {
		_spec.SetField(endpoint.FieldDescription, field.TypeString, value)
	}
	if euo.mutation.DescriptionCleared() {
		_spec.ClearField(endpoint.FieldDescription, field.TypeString)
	}
	if value, ok := euo.mutation.Disabled(); ok {
		_spec.SetField(endpoint.FieldDisabled, field.TypeBool, value)
	}
	if euo.mutation.DisabledCleared() {
		_spec.ClearField(endpoint.FieldDisabled, field.TypeBool)
	}
	if value, ok := euo.mutation.Extras(); ok {
		_spec.SetField(endpoint.FieldExtras, field.TypeJSON, value)
	}
	if euo.mutation.ExtrasCleared() {
		_spec.ClearField(endpoint.FieldExtras, field.TypeJSON)
	}
	if value, ok := euo.mutation.CreatedBy(); ok {
		_spec.SetField(endpoint.FieldCreatedBy, field.TypeString, value)
	}
	if euo.mutation.CreatedByCleared() {
		_spec.ClearField(endpoint.FieldCreatedBy, field.TypeString)
	}
	if value, ok := euo.mutation.UpdatedBy(); ok {
		_spec.SetField(endpoint.FieldUpdatedBy, field.TypeString, value)
	}
	if euo.mutation.UpdatedByCleared() {
		_spec.ClearField(endpoint.FieldUpdatedBy, field.TypeString)
	}
	if euo.mutation.CreatedAtCleared() {
		_spec.ClearField(endpoint.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := euo.mutation.UpdatedAt(); ok {
		_spec.SetField(endpoint.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := euo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(endpoint.FieldUpdatedAt, field.TypeInt64, value)
	}
	if euo.mutation.UpdatedAtCleared() {
		_spec.ClearField(endpoint.FieldUpdatedAt, field.TypeInt64)
	}
	if value, ok := euo.mutation.BaseURL(); ok {
		_spec.SetField(endpoint.FieldBaseURL, field.TypeString, value)
	}
	if value, ok := euo.mutation.Protocol(); ok {
		_spec.SetField(endpoint.FieldProtocol, field.TypeString, value)
	}
	if value, ok := euo.mutation.AuthType(); ok {
		_spec.SetField(endpoint.FieldAuthType, field.TypeString, value)
	}
	if value, ok := euo.mutation.AuthConfig(); ok {
		_spec.SetField(endpoint.FieldAuthConfig, field.TypeString, value)
	}
	if euo.mutation.AuthConfigCleared() {
		_spec.ClearField(endpoint.FieldAuthConfig, field.TypeString)
	}
	if value, ok := euo.mutation.Timeout(); ok {
		_spec.SetField(endpoint.FieldTimeout, field.TypeInt, value)
	}
	if value, ok := euo.mutation.AddedTimeout(); ok {
		_spec.AddField(endpoint.FieldTimeout, field.TypeInt, value)
	}
	if value, ok := euo.mutation.UseCircuitBreaker(); ok {
		_spec.SetField(endpoint.FieldUseCircuitBreaker, field.TypeBool, value)
	}
	if value, ok := euo.mutation.RetryCount(); ok {
		_spec.SetField(endpoint.FieldRetryCount, field.TypeInt, value)
	}
	if value, ok := euo.mutation.AddedRetryCount(); ok {
		_spec.AddField(endpoint.FieldRetryCount, field.TypeInt, value)
	}
	if value, ok := euo.mutation.ValidateSsl(); ok {
		_spec.SetField(endpoint.FieldValidateSsl, field.TypeBool, value)
	}
	if value, ok := euo.mutation.LogRequests(); ok {
		_spec.SetField(endpoint.FieldLogRequests, field.TypeBool, value)
	}
	if value, ok := euo.mutation.LogResponses(); ok {
		_spec.SetField(endpoint.FieldLogResponses, field.TypeBool, value)
	}
	_node = &Endpoint{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{endpoint.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	euo.mutation.done = true
	return _node, nil
}
