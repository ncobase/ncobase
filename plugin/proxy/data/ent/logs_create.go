// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/proxy/data/ent/logs"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LogsCreate is the builder for creating a Logs entity.
type LogsCreate struct {
	config
	mutation *LogsMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (lc *LogsCreate) SetCreatedAt(i int64) *LogsCreate {
	lc.mutation.SetCreatedAt(i)
	return lc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (lc *LogsCreate) SetNillableCreatedAt(i *int64) *LogsCreate {
	if i != nil {
		lc.SetCreatedAt(*i)
	}
	return lc
}

// SetUpdatedAt sets the "updated_at" field.
func (lc *LogsCreate) SetUpdatedAt(i int64) *LogsCreate {
	lc.mutation.SetUpdatedAt(i)
	return lc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (lc *LogsCreate) SetNillableUpdatedAt(i *int64) *LogsCreate {
	if i != nil {
		lc.SetUpdatedAt(*i)
	}
	return lc
}

// SetEndpointID sets the "endpoint_id" field.
func (lc *LogsCreate) SetEndpointID(s string) *LogsCreate {
	lc.mutation.SetEndpointID(s)
	return lc
}

// SetRouteID sets the "route_id" field.
func (lc *LogsCreate) SetRouteID(s string) *LogsCreate {
	lc.mutation.SetRouteID(s)
	return lc
}

// SetRequestMethod sets the "request_method" field.
func (lc *LogsCreate) SetRequestMethod(s string) *LogsCreate {
	lc.mutation.SetRequestMethod(s)
	return lc
}

// SetRequestPath sets the "request_path" field.
func (lc *LogsCreate) SetRequestPath(s string) *LogsCreate {
	lc.mutation.SetRequestPath(s)
	return lc
}

// SetRequestHeaders sets the "request_headers" field.
func (lc *LogsCreate) SetRequestHeaders(s string) *LogsCreate {
	lc.mutation.SetRequestHeaders(s)
	return lc
}

// SetNillableRequestHeaders sets the "request_headers" field if the given value is not nil.
func (lc *LogsCreate) SetNillableRequestHeaders(s *string) *LogsCreate {
	if s != nil {
		lc.SetRequestHeaders(*s)
	}
	return lc
}

// SetRequestBody sets the "request_body" field.
func (lc *LogsCreate) SetRequestBody(s string) *LogsCreate {
	lc.mutation.SetRequestBody(s)
	return lc
}

// SetNillableRequestBody sets the "request_body" field if the given value is not nil.
func (lc *LogsCreate) SetNillableRequestBody(s *string) *LogsCreate {
	if s != nil {
		lc.SetRequestBody(*s)
	}
	return lc
}

// SetStatusCode sets the "status_code" field.
func (lc *LogsCreate) SetStatusCode(i int) *LogsCreate {
	lc.mutation.SetStatusCode(i)
	return lc
}

// SetResponseHeaders sets the "response_headers" field.
func (lc *LogsCreate) SetResponseHeaders(s string) *LogsCreate {
	lc.mutation.SetResponseHeaders(s)
	return lc
}

// SetNillableResponseHeaders sets the "response_headers" field if the given value is not nil.
func (lc *LogsCreate) SetNillableResponseHeaders(s *string) *LogsCreate {
	if s != nil {
		lc.SetResponseHeaders(*s)
	}
	return lc
}

// SetResponseBody sets the "response_body" field.
func (lc *LogsCreate) SetResponseBody(s string) *LogsCreate {
	lc.mutation.SetResponseBody(s)
	return lc
}

// SetNillableResponseBody sets the "response_body" field if the given value is not nil.
func (lc *LogsCreate) SetNillableResponseBody(s *string) *LogsCreate {
	if s != nil {
		lc.SetResponseBody(*s)
	}
	return lc
}

// SetDuration sets the "duration" field.
func (lc *LogsCreate) SetDuration(i int) *LogsCreate {
	lc.mutation.SetDuration(i)
	return lc
}

// SetError sets the "error" field.
func (lc *LogsCreate) SetError(s string) *LogsCreate {
	lc.mutation.SetError(s)
	return lc
}

// SetNillableError sets the "error" field if the given value is not nil.
func (lc *LogsCreate) SetNillableError(s *string) *LogsCreate {
	if s != nil {
		lc.SetError(*s)
	}
	return lc
}

// SetClientIP sets the "client_ip" field.
func (lc *LogsCreate) SetClientIP(s string) *LogsCreate {
	lc.mutation.SetClientIP(s)
	return lc
}

// SetNillableClientIP sets the "client_ip" field if the given value is not nil.
func (lc *LogsCreate) SetNillableClientIP(s *string) *LogsCreate {
	if s != nil {
		lc.SetClientIP(*s)
	}
	return lc
}

// SetUserID sets the "user_id" field.
func (lc *LogsCreate) SetUserID(s string) *LogsCreate {
	lc.mutation.SetUserID(s)
	return lc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (lc *LogsCreate) SetNillableUserID(s *string) *LogsCreate {
	if s != nil {
		lc.SetUserID(*s)
	}
	return lc
}

// SetID sets the "id" field.
func (lc *LogsCreate) SetID(s string) *LogsCreate {
	lc.mutation.SetID(s)
	return lc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (lc *LogsCreate) SetNillableID(s *string) *LogsCreate {
	if s != nil {
		lc.SetID(*s)
	}
	return lc
}

// Mutation returns the LogsMutation object of the builder.
func (lc *LogsCreate) Mutation() *LogsMutation {
	return lc.mutation
}

// Save creates the Logs in the database.
func (lc *LogsCreate) Save(ctx context.Context) (*Logs, error) {
	lc.defaults()
	return withHooks(ctx, lc.sqlSave, lc.mutation, lc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (lc *LogsCreate) SaveX(ctx context.Context) *Logs {
	v, err := lc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lc *LogsCreate) Exec(ctx context.Context) error {
	_, err := lc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lc *LogsCreate) ExecX(ctx context.Context) {
	if err := lc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lc *LogsCreate) defaults() {
	if _, ok := lc.mutation.CreatedAt(); !ok {
		v := logs.DefaultCreatedAt()
		lc.mutation.SetCreatedAt(v)
	}
	if _, ok := lc.mutation.UpdatedAt(); !ok {
		v := logs.DefaultUpdatedAt()
		lc.mutation.SetUpdatedAt(v)
	}
	if _, ok := lc.mutation.ID(); !ok {
		v := logs.DefaultID()
		lc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lc *LogsCreate) check() error {
	if _, ok := lc.mutation.EndpointID(); !ok {
		return &ValidationError{Name: "endpoint_id", err: errors.New(`ent: missing required field "Logs.endpoint_id"`)}
	}
	if _, ok := lc.mutation.RouteID(); !ok {
		return &ValidationError{Name: "route_id", err: errors.New(`ent: missing required field "Logs.route_id"`)}
	}
	if _, ok := lc.mutation.RequestMethod(); !ok {
		return &ValidationError{Name: "request_method", err: errors.New(`ent: missing required field "Logs.request_method"`)}
	}
	if _, ok := lc.mutation.RequestPath(); !ok {
		return &ValidationError{Name: "request_path", err: errors.New(`ent: missing required field "Logs.request_path"`)}
	}
	if _, ok := lc.mutation.StatusCode(); !ok {
		return &ValidationError{Name: "status_code", err: errors.New(`ent: missing required field "Logs.status_code"`)}
	}
	if _, ok := lc.mutation.Duration(); !ok {
		return &ValidationError{Name: "duration", err: errors.New(`ent: missing required field "Logs.duration"`)}
	}
	if v, ok := lc.mutation.ID(); ok {
		if err := logs.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Logs.id": %w`, err)}
		}
	}
	return nil
}

func (lc *LogsCreate) sqlSave(ctx context.Context) (*Logs, error) {
	if err := lc.check(); err != nil {
		return nil, err
	}
	_node, _spec := lc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Logs.ID type: %T", _spec.ID.Value)
		}
	}
	lc.mutation.id = &_node.ID
	lc.mutation.done = true
	return _node, nil
}

func (lc *LogsCreate) createSpec() (*Logs, *sqlgraph.CreateSpec) {
	var (
		_node = &Logs{config: lc.config}
		_spec = sqlgraph.NewCreateSpec(logs.Table, sqlgraph.NewFieldSpec(logs.FieldID, field.TypeString))
	)
	if id, ok := lc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := lc.mutation.CreatedAt(); ok {
		_spec.SetField(logs.FieldCreatedAt, field.TypeInt64, value)
		_node.CreatedAt = value
	}
	if value, ok := lc.mutation.UpdatedAt(); ok {
		_spec.SetField(logs.FieldUpdatedAt, field.TypeInt64, value)
		_node.UpdatedAt = value
	}
	if value, ok := lc.mutation.EndpointID(); ok {
		_spec.SetField(logs.FieldEndpointID, field.TypeString, value)
		_node.EndpointID = value
	}
	if value, ok := lc.mutation.RouteID(); ok {
		_spec.SetField(logs.FieldRouteID, field.TypeString, value)
		_node.RouteID = value
	}
	if value, ok := lc.mutation.RequestMethod(); ok {
		_spec.SetField(logs.FieldRequestMethod, field.TypeString, value)
		_node.RequestMethod = value
	}
	if value, ok := lc.mutation.RequestPath(); ok {
		_spec.SetField(logs.FieldRequestPath, field.TypeString, value)
		_node.RequestPath = value
	}
	if value, ok := lc.mutation.RequestHeaders(); ok {
		_spec.SetField(logs.FieldRequestHeaders, field.TypeString, value)
		_node.RequestHeaders = value
	}
	if value, ok := lc.mutation.RequestBody(); ok {
		_spec.SetField(logs.FieldRequestBody, field.TypeString, value)
		_node.RequestBody = value
	}
	if value, ok := lc.mutation.StatusCode(); ok {
		_spec.SetField(logs.FieldStatusCode, field.TypeInt, value)
		_node.StatusCode = value
	}
	if value, ok := lc.mutation.ResponseHeaders(); ok {
		_spec.SetField(logs.FieldResponseHeaders, field.TypeString, value)
		_node.ResponseHeaders = value
	}
	if value, ok := lc.mutation.ResponseBody(); ok {
		_spec.SetField(logs.FieldResponseBody, field.TypeString, value)
		_node.ResponseBody = value
	}
	if value, ok := lc.mutation.Duration(); ok {
		_spec.SetField(logs.FieldDuration, field.TypeInt, value)
		_node.Duration = value
	}
	if value, ok := lc.mutation.Error(); ok {
		_spec.SetField(logs.FieldError, field.TypeString, value)
		_node.Error = value
	}
	if value, ok := lc.mutation.ClientIP(); ok {
		_spec.SetField(logs.FieldClientIP, field.TypeString, value)
		_node.ClientIP = value
	}
	if value, ok := lc.mutation.UserID(); ok {
		_spec.SetField(logs.FieldUserID, field.TypeString, value)
		_node.UserID = value
	}
	return _node, _spec
}

// LogsCreateBulk is the builder for creating many Logs entities in bulk.
type LogsCreateBulk struct {
	config
	err      error
	builders []*LogsCreate
}

// Save creates the Logs entities in the database.
func (lcb *LogsCreateBulk) Save(ctx context.Context) ([]*Logs, error) {
	if lcb.err != nil {
		return nil, lcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(lcb.builders))
	nodes := make([]*Logs, len(lcb.builders))
	mutators := make([]Mutator, len(lcb.builders))
	for i := range lcb.builders {
		func(i int, root context.Context) {
			builder := lcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LogsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lcb *LogsCreateBulk) SaveX(ctx context.Context) []*Logs {
	v, err := lcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lcb *LogsCreateBulk) Exec(ctx context.Context) error {
	_, err := lcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lcb *LogsCreateBulk) ExecX(ctx context.Context) {
	if err := lcb.Exec(ctx); err != nil {
		panic(err)
	}
}
