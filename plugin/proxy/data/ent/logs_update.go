// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/proxy/data/ent/logs"
	"ncobase/proxy/data/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LogsUpdate is the builder for updating Logs entities.
type LogsUpdate struct {
	config
	hooks    []Hook
	mutation *LogsMutation
}

// Where appends a list predicates to the LogsUpdate builder.
func (lu *LogsUpdate) Where(ps ...predicate.Logs) *LogsUpdate {
	lu.mutation.Where(ps...)
	return lu
}

// SetUpdatedAt sets the "updated_at" field.
func (lu *LogsUpdate) SetUpdatedAt(i int64) *LogsUpdate {
	lu.mutation.ResetUpdatedAt()
	lu.mutation.SetUpdatedAt(i)
	return lu
}

// AddUpdatedAt adds i to the "updated_at" field.
func (lu *LogsUpdate) AddUpdatedAt(i int64) *LogsUpdate {
	lu.mutation.AddUpdatedAt(i)
	return lu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (lu *LogsUpdate) ClearUpdatedAt() *LogsUpdate {
	lu.mutation.ClearUpdatedAt()
	return lu
}

// SetEndpointID sets the "endpoint_id" field.
func (lu *LogsUpdate) SetEndpointID(s string) *LogsUpdate {
	lu.mutation.SetEndpointID(s)
	return lu
}

// SetNillableEndpointID sets the "endpoint_id" field if the given value is not nil.
func (lu *LogsUpdate) SetNillableEndpointID(s *string) *LogsUpdate {
	if s != nil {
		lu.SetEndpointID(*s)
	}
	return lu
}

// SetRouteID sets the "route_id" field.
func (lu *LogsUpdate) SetRouteID(s string) *LogsUpdate {
	lu.mutation.SetRouteID(s)
	return lu
}

// SetNillableRouteID sets the "route_id" field if the given value is not nil.
func (lu *LogsUpdate) SetNillableRouteID(s *string) *LogsUpdate {
	if s != nil {
		lu.SetRouteID(*s)
	}
	return lu
}

// SetRequestMethod sets the "request_method" field.
func (lu *LogsUpdate) SetRequestMethod(s string) *LogsUpdate {
	lu.mutation.SetRequestMethod(s)
	return lu
}

// SetNillableRequestMethod sets the "request_method" field if the given value is not nil.
func (lu *LogsUpdate) SetNillableRequestMethod(s *string) *LogsUpdate {
	if s != nil {
		lu.SetRequestMethod(*s)
	}
	return lu
}

// SetRequestPath sets the "request_path" field.
func (lu *LogsUpdate) SetRequestPath(s string) *LogsUpdate {
	lu.mutation.SetRequestPath(s)
	return lu
}

// SetNillableRequestPath sets the "request_path" field if the given value is not nil.
func (lu *LogsUpdate) SetNillableRequestPath(s *string) *LogsUpdate {
	if s != nil {
		lu.SetRequestPath(*s)
	}
	return lu
}

// SetRequestHeaders sets the "request_headers" field.
func (lu *LogsUpdate) SetRequestHeaders(s string) *LogsUpdate {
	lu.mutation.SetRequestHeaders(s)
	return lu
}

// SetNillableRequestHeaders sets the "request_headers" field if the given value is not nil.
func (lu *LogsUpdate) SetNillableRequestHeaders(s *string) *LogsUpdate {
	if s != nil {
		lu.SetRequestHeaders(*s)
	}
	return lu
}

// ClearRequestHeaders clears the value of the "request_headers" field.
func (lu *LogsUpdate) ClearRequestHeaders() *LogsUpdate {
	lu.mutation.ClearRequestHeaders()
	return lu
}

// SetRequestBody sets the "request_body" field.
func (lu *LogsUpdate) SetRequestBody(s string) *LogsUpdate {
	lu.mutation.SetRequestBody(s)
	return lu
}

// SetNillableRequestBody sets the "request_body" field if the given value is not nil.
func (lu *LogsUpdate) SetNillableRequestBody(s *string) *LogsUpdate {
	if s != nil {
		lu.SetRequestBody(*s)
	}
	return lu
}

// ClearRequestBody clears the value of the "request_body" field.
func (lu *LogsUpdate) ClearRequestBody() *LogsUpdate {
	lu.mutation.ClearRequestBody()
	return lu
}

// SetStatusCode sets the "status_code" field.
func (lu *LogsUpdate) SetStatusCode(i int) *LogsUpdate {
	lu.mutation.ResetStatusCode()
	lu.mutation.SetStatusCode(i)
	return lu
}

// SetNillableStatusCode sets the "status_code" field if the given value is not nil.
func (lu *LogsUpdate) SetNillableStatusCode(i *int) *LogsUpdate {
	if i != nil {
		lu.SetStatusCode(*i)
	}
	return lu
}

// AddStatusCode adds i to the "status_code" field.
func (lu *LogsUpdate) AddStatusCode(i int) *LogsUpdate {
	lu.mutation.AddStatusCode(i)
	return lu
}

// SetResponseHeaders sets the "response_headers" field.
func (lu *LogsUpdate) SetResponseHeaders(s string) *LogsUpdate {
	lu.mutation.SetResponseHeaders(s)
	return lu
}

// SetNillableResponseHeaders sets the "response_headers" field if the given value is not nil.
func (lu *LogsUpdate) SetNillableResponseHeaders(s *string) *LogsUpdate {
	if s != nil {
		lu.SetResponseHeaders(*s)
	}
	return lu
}

// ClearResponseHeaders clears the value of the "response_headers" field.
func (lu *LogsUpdate) ClearResponseHeaders() *LogsUpdate {
	lu.mutation.ClearResponseHeaders()
	return lu
}

// SetResponseBody sets the "response_body" field.
func (lu *LogsUpdate) SetResponseBody(s string) *LogsUpdate {
	lu.mutation.SetResponseBody(s)
	return lu
}

// SetNillableResponseBody sets the "response_body" field if the given value is not nil.
func (lu *LogsUpdate) SetNillableResponseBody(s *string) *LogsUpdate {
	if s != nil {
		lu.SetResponseBody(*s)
	}
	return lu
}

// ClearResponseBody clears the value of the "response_body" field.
func (lu *LogsUpdate) ClearResponseBody() *LogsUpdate {
	lu.mutation.ClearResponseBody()
	return lu
}

// SetDuration sets the "duration" field.
func (lu *LogsUpdate) SetDuration(i int) *LogsUpdate {
	lu.mutation.ResetDuration()
	lu.mutation.SetDuration(i)
	return lu
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (lu *LogsUpdate) SetNillableDuration(i *int) *LogsUpdate {
	if i != nil {
		lu.SetDuration(*i)
	}
	return lu
}

// AddDuration adds i to the "duration" field.
func (lu *LogsUpdate) AddDuration(i int) *LogsUpdate {
	lu.mutation.AddDuration(i)
	return lu
}

// SetError sets the "error" field.
func (lu *LogsUpdate) SetError(s string) *LogsUpdate {
	lu.mutation.SetError(s)
	return lu
}

// SetNillableError sets the "error" field if the given value is not nil.
func (lu *LogsUpdate) SetNillableError(s *string) *LogsUpdate {
	if s != nil {
		lu.SetError(*s)
	}
	return lu
}

// ClearError clears the value of the "error" field.
func (lu *LogsUpdate) ClearError() *LogsUpdate {
	lu.mutation.ClearError()
	return lu
}

// SetClientIP sets the "client_ip" field.
func (lu *LogsUpdate) SetClientIP(s string) *LogsUpdate {
	lu.mutation.SetClientIP(s)
	return lu
}

// SetNillableClientIP sets the "client_ip" field if the given value is not nil.
func (lu *LogsUpdate) SetNillableClientIP(s *string) *LogsUpdate {
	if s != nil {
		lu.SetClientIP(*s)
	}
	return lu
}

// ClearClientIP clears the value of the "client_ip" field.
func (lu *LogsUpdate) ClearClientIP() *LogsUpdate {
	lu.mutation.ClearClientIP()
	return lu
}

// SetUserID sets the "user_id" field.
func (lu *LogsUpdate) SetUserID(s string) *LogsUpdate {
	lu.mutation.SetUserID(s)
	return lu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (lu *LogsUpdate) SetNillableUserID(s *string) *LogsUpdate {
	if s != nil {
		lu.SetUserID(*s)
	}
	return lu
}

// ClearUserID clears the value of the "user_id" field.
func (lu *LogsUpdate) ClearUserID() *LogsUpdate {
	lu.mutation.ClearUserID()
	return lu
}

// Mutation returns the LogsMutation object of the builder.
func (lu *LogsUpdate) Mutation() *LogsMutation {
	return lu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lu *LogsUpdate) Save(ctx context.Context) (int, error) {
	lu.defaults()
	return withHooks(ctx, lu.sqlSave, lu.mutation, lu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lu *LogsUpdate) SaveX(ctx context.Context) int {
	affected, err := lu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lu *LogsUpdate) Exec(ctx context.Context) error {
	_, err := lu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lu *LogsUpdate) ExecX(ctx context.Context) {
	if err := lu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lu *LogsUpdate) defaults() {
	if _, ok := lu.mutation.UpdatedAt(); !ok && !lu.mutation.UpdatedAtCleared() {
		v := logs.UpdateDefaultUpdatedAt()
		lu.mutation.SetUpdatedAt(v)
	}
}

func (lu *LogsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(logs.Table, logs.Columns, sqlgraph.NewFieldSpec(logs.FieldID, field.TypeString))
	if ps := lu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if lu.mutation.CreatedAtCleared() {
		_spec.ClearField(logs.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := lu.mutation.UpdatedAt(); ok {
		_spec.SetField(logs.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := lu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(logs.FieldUpdatedAt, field.TypeInt64, value)
	}
	if lu.mutation.UpdatedAtCleared() {
		_spec.ClearField(logs.FieldUpdatedAt, field.TypeInt64)
	}
	if value, ok := lu.mutation.EndpointID(); ok {
		_spec.SetField(logs.FieldEndpointID, field.TypeString, value)
	}
	if value, ok := lu.mutation.RouteID(); ok {
		_spec.SetField(logs.FieldRouteID, field.TypeString, value)
	}
	if value, ok := lu.mutation.RequestMethod(); ok {
		_spec.SetField(logs.FieldRequestMethod, field.TypeString, value)
	}
	if value, ok := lu.mutation.RequestPath(); ok {
		_spec.SetField(logs.FieldRequestPath, field.TypeString, value)
	}
	if value, ok := lu.mutation.RequestHeaders(); ok {
		_spec.SetField(logs.FieldRequestHeaders, field.TypeString, value)
	}
	if lu.mutation.RequestHeadersCleared() {
		_spec.ClearField(logs.FieldRequestHeaders, field.TypeString)
	}
	if value, ok := lu.mutation.RequestBody(); ok {
		_spec.SetField(logs.FieldRequestBody, field.TypeString, value)
	}
	if lu.mutation.RequestBodyCleared() {
		_spec.ClearField(logs.FieldRequestBody, field.TypeString)
	}
	if value, ok := lu.mutation.StatusCode(); ok {
		_spec.SetField(logs.FieldStatusCode, field.TypeInt, value)
	}
	if value, ok := lu.mutation.AddedStatusCode(); ok {
		_spec.AddField(logs.FieldStatusCode, field.TypeInt, value)
	}
	if value, ok := lu.mutation.ResponseHeaders(); ok {
		_spec.SetField(logs.FieldResponseHeaders, field.TypeString, value)
	}
	if lu.mutation.ResponseHeadersCleared() {
		_spec.ClearField(logs.FieldResponseHeaders, field.TypeString)
	}
	if value, ok := lu.mutation.ResponseBody(); ok {
		_spec.SetField(logs.FieldResponseBody, field.TypeString, value)
	}
	if lu.mutation.ResponseBodyCleared() {
		_spec.ClearField(logs.FieldResponseBody, field.TypeString)
	}
	if value, ok := lu.mutation.Duration(); ok {
		_spec.SetField(logs.FieldDuration, field.TypeInt, value)
	}
	if value, ok := lu.mutation.AddedDuration(); ok {
		_spec.AddField(logs.FieldDuration, field.TypeInt, value)
	}
	if value, ok := lu.mutation.Error(); ok {
		_spec.SetField(logs.FieldError, field.TypeString, value)
	}
	if lu.mutation.ErrorCleared() {
		_spec.ClearField(logs.FieldError, field.TypeString)
	}
	if value, ok := lu.mutation.ClientIP(); ok {
		_spec.SetField(logs.FieldClientIP, field.TypeString, value)
	}
	if lu.mutation.ClientIPCleared() {
		_spec.ClearField(logs.FieldClientIP, field.TypeString)
	}
	if value, ok := lu.mutation.UserID(); ok {
		_spec.SetField(logs.FieldUserID, field.TypeString, value)
	}
	if lu.mutation.UserIDCleared() {
		_spec.ClearField(logs.FieldUserID, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, lu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{logs.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	lu.mutation.done = true
	return n, nil
}

// LogsUpdateOne is the builder for updating a single Logs entity.
type LogsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LogsMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (luo *LogsUpdateOne) SetUpdatedAt(i int64) *LogsUpdateOne {
	luo.mutation.ResetUpdatedAt()
	luo.mutation.SetUpdatedAt(i)
	return luo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (luo *LogsUpdateOne) AddUpdatedAt(i int64) *LogsUpdateOne {
	luo.mutation.AddUpdatedAt(i)
	return luo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (luo *LogsUpdateOne) ClearUpdatedAt() *LogsUpdateOne {
	luo.mutation.ClearUpdatedAt()
	return luo
}

// SetEndpointID sets the "endpoint_id" field.
func (luo *LogsUpdateOne) SetEndpointID(s string) *LogsUpdateOne {
	luo.mutation.SetEndpointID(s)
	return luo
}

// SetNillableEndpointID sets the "endpoint_id" field if the given value is not nil.
func (luo *LogsUpdateOne) SetNillableEndpointID(s *string) *LogsUpdateOne {
	if s != nil {
		luo.SetEndpointID(*s)
	}
	return luo
}

// SetRouteID sets the "route_id" field.
func (luo *LogsUpdateOne) SetRouteID(s string) *LogsUpdateOne {
	luo.mutation.SetRouteID(s)
	return luo
}

// SetNillableRouteID sets the "route_id" field if the given value is not nil.
func (luo *LogsUpdateOne) SetNillableRouteID(s *string) *LogsUpdateOne {
	if s != nil {
		luo.SetRouteID(*s)
	}
	return luo
}

// SetRequestMethod sets the "request_method" field.
func (luo *LogsUpdateOne) SetRequestMethod(s string) *LogsUpdateOne {
	luo.mutation.SetRequestMethod(s)
	return luo
}

// SetNillableRequestMethod sets the "request_method" field if the given value is not nil.
func (luo *LogsUpdateOne) SetNillableRequestMethod(s *string) *LogsUpdateOne {
	if s != nil {
		luo.SetRequestMethod(*s)
	}
	return luo
}

// SetRequestPath sets the "request_path" field.
func (luo *LogsUpdateOne) SetRequestPath(s string) *LogsUpdateOne {
	luo.mutation.SetRequestPath(s)
	return luo
}

// SetNillableRequestPath sets the "request_path" field if the given value is not nil.
func (luo *LogsUpdateOne) SetNillableRequestPath(s *string) *LogsUpdateOne {
	if s != nil {
		luo.SetRequestPath(*s)
	}
	return luo
}

// SetRequestHeaders sets the "request_headers" field.
func (luo *LogsUpdateOne) SetRequestHeaders(s string) *LogsUpdateOne {
	luo.mutation.SetRequestHeaders(s)
	return luo
}

// SetNillableRequestHeaders sets the "request_headers" field if the given value is not nil.
func (luo *LogsUpdateOne) SetNillableRequestHeaders(s *string) *LogsUpdateOne {
	if s != nil {
		luo.SetRequestHeaders(*s)
	}
	return luo
}

// ClearRequestHeaders clears the value of the "request_headers" field.
func (luo *LogsUpdateOne) ClearRequestHeaders() *LogsUpdateOne {
	luo.mutation.ClearRequestHeaders()
	return luo
}

// SetRequestBody sets the "request_body" field.
func (luo *LogsUpdateOne) SetRequestBody(s string) *LogsUpdateOne {
	luo.mutation.SetRequestBody(s)
	return luo
}

// SetNillableRequestBody sets the "request_body" field if the given value is not nil.
func (luo *LogsUpdateOne) SetNillableRequestBody(s *string) *LogsUpdateOne {
	if s != nil {
		luo.SetRequestBody(*s)
	}
	return luo
}

// ClearRequestBody clears the value of the "request_body" field.
func (luo *LogsUpdateOne) ClearRequestBody() *LogsUpdateOne {
	luo.mutation.ClearRequestBody()
	return luo
}

// SetStatusCode sets the "status_code" field.
func (luo *LogsUpdateOne) SetStatusCode(i int) *LogsUpdateOne {
	luo.mutation.ResetStatusCode()
	luo.mutation.SetStatusCode(i)
	return luo
}

// SetNillableStatusCode sets the "status_code" field if the given value is not nil.
func (luo *LogsUpdateOne) SetNillableStatusCode(i *int) *LogsUpdateOne {
	if i != nil {
		luo.SetStatusCode(*i)
	}
	return luo
}

// AddStatusCode adds i to the "status_code" field.
func (luo *LogsUpdateOne) AddStatusCode(i int) *LogsUpdateOne {
	luo.mutation.AddStatusCode(i)
	return luo
}

// SetResponseHeaders sets the "response_headers" field.
func (luo *LogsUpdateOne) SetResponseHeaders(s string) *LogsUpdateOne {
	luo.mutation.SetResponseHeaders(s)
	return luo
}

// SetNillableResponseHeaders sets the "response_headers" field if the given value is not nil.
func (luo *LogsUpdateOne) SetNillableResponseHeaders(s *string) *LogsUpdateOne {
	if s != nil {
		luo.SetResponseHeaders(*s)
	}
	return luo
}

// ClearResponseHeaders clears the value of the "response_headers" field.
func (luo *LogsUpdateOne) ClearResponseHeaders() *LogsUpdateOne {
	luo.mutation.ClearResponseHeaders()
	return luo
}

// SetResponseBody sets the "response_body" field.
func (luo *LogsUpdateOne) SetResponseBody(s string) *LogsUpdateOne {
	luo.mutation.SetResponseBody(s)
	return luo
}

// SetNillableResponseBody sets the "response_body" field if the given value is not nil.
func (luo *LogsUpdateOne) SetNillableResponseBody(s *string) *LogsUpdateOne {
	if s != nil {
		luo.SetResponseBody(*s)
	}
	return luo
}

// ClearResponseBody clears the value of the "response_body" field.
func (luo *LogsUpdateOne) ClearResponseBody() *LogsUpdateOne {
	luo.mutation.ClearResponseBody()
	return luo
}

// SetDuration sets the "duration" field.
func (luo *LogsUpdateOne) SetDuration(i int) *LogsUpdateOne {
	luo.mutation.ResetDuration()
	luo.mutation.SetDuration(i)
	return luo
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (luo *LogsUpdateOne) SetNillableDuration(i *int) *LogsUpdateOne {
	if i != nil {
		luo.SetDuration(*i)
	}
	return luo
}

// AddDuration adds i to the "duration" field.
func (luo *LogsUpdateOne) AddDuration(i int) *LogsUpdateOne {
	luo.mutation.AddDuration(i)
	return luo
}

// SetError sets the "error" field.
func (luo *LogsUpdateOne) SetError(s string) *LogsUpdateOne {
	luo.mutation.SetError(s)
	return luo
}

// SetNillableError sets the "error" field if the given value is not nil.
func (luo *LogsUpdateOne) SetNillableError(s *string) *LogsUpdateOne {
	if s != nil {
		luo.SetError(*s)
	}
	return luo
}

// ClearError clears the value of the "error" field.
func (luo *LogsUpdateOne) ClearError() *LogsUpdateOne {
	luo.mutation.ClearError()
	return luo
}

// SetClientIP sets the "client_ip" field.
func (luo *LogsUpdateOne) SetClientIP(s string) *LogsUpdateOne {
	luo.mutation.SetClientIP(s)
	return luo
}

// SetNillableClientIP sets the "client_ip" field if the given value is not nil.
func (luo *LogsUpdateOne) SetNillableClientIP(s *string) *LogsUpdateOne {
	if s != nil {
		luo.SetClientIP(*s)
	}
	return luo
}

// ClearClientIP clears the value of the "client_ip" field.
func (luo *LogsUpdateOne) ClearClientIP() *LogsUpdateOne {
	luo.mutation.ClearClientIP()
	return luo
}

// SetUserID sets the "user_id" field.
func (luo *LogsUpdateOne) SetUserID(s string) *LogsUpdateOne {
	luo.mutation.SetUserID(s)
	return luo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (luo *LogsUpdateOne) SetNillableUserID(s *string) *LogsUpdateOne {
	if s != nil {
		luo.SetUserID(*s)
	}
	return luo
}

// ClearUserID clears the value of the "user_id" field.
func (luo *LogsUpdateOne) ClearUserID() *LogsUpdateOne {
	luo.mutation.ClearUserID()
	return luo
}

// Mutation returns the LogsMutation object of the builder.
func (luo *LogsUpdateOne) Mutation() *LogsMutation {
	return luo.mutation
}

// Where appends a list predicates to the LogsUpdate builder.
func (luo *LogsUpdateOne) Where(ps ...predicate.Logs) *LogsUpdateOne {
	luo.mutation.Where(ps...)
	return luo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (luo *LogsUpdateOne) Select(field string, fields ...string) *LogsUpdateOne {
	luo.fields = append([]string{field}, fields...)
	return luo
}

// Save executes the query and returns the updated Logs entity.
func (luo *LogsUpdateOne) Save(ctx context.Context) (*Logs, error) {
	luo.defaults()
	return withHooks(ctx, luo.sqlSave, luo.mutation, luo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (luo *LogsUpdateOne) SaveX(ctx context.Context) *Logs {
	node, err := luo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (luo *LogsUpdateOne) Exec(ctx context.Context) error {
	_, err := luo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (luo *LogsUpdateOne) ExecX(ctx context.Context) {
	if err := luo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (luo *LogsUpdateOne) defaults() {
	if _, ok := luo.mutation.UpdatedAt(); !ok && !luo.mutation.UpdatedAtCleared() {
		v := logs.UpdateDefaultUpdatedAt()
		luo.mutation.SetUpdatedAt(v)
	}
}

func (luo *LogsUpdateOne) sqlSave(ctx context.Context) (_node *Logs, err error) {
	_spec := sqlgraph.NewUpdateSpec(logs.Table, logs.Columns, sqlgraph.NewFieldSpec(logs.FieldID, field.TypeString))
	id, ok := luo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Logs.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := luo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, logs.FieldID)
		for _, f := range fields {
			if !logs.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != logs.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := luo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if luo.mutation.CreatedAtCleared() {
		_spec.ClearField(logs.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := luo.mutation.UpdatedAt(); ok {
		_spec.SetField(logs.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := luo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(logs.FieldUpdatedAt, field.TypeInt64, value)
	}
	if luo.mutation.UpdatedAtCleared() {
		_spec.ClearField(logs.FieldUpdatedAt, field.TypeInt64)
	}
	if value, ok := luo.mutation.EndpointID(); ok {
		_spec.SetField(logs.FieldEndpointID, field.TypeString, value)
	}
	if value, ok := luo.mutation.RouteID(); ok {
		_spec.SetField(logs.FieldRouteID, field.TypeString, value)
	}
	if value, ok := luo.mutation.RequestMethod(); ok {
		_spec.SetField(logs.FieldRequestMethod, field.TypeString, value)
	}
	if value, ok := luo.mutation.RequestPath(); ok {
		_spec.SetField(logs.FieldRequestPath, field.TypeString, value)
	}
	if value, ok := luo.mutation.RequestHeaders(); ok {
		_spec.SetField(logs.FieldRequestHeaders, field.TypeString, value)
	}
	if luo.mutation.RequestHeadersCleared() {
		_spec.ClearField(logs.FieldRequestHeaders, field.TypeString)
	}
	if value, ok := luo.mutation.RequestBody(); ok {
		_spec.SetField(logs.FieldRequestBody, field.TypeString, value)
	}
	if luo.mutation.RequestBodyCleared() {
		_spec.ClearField(logs.FieldRequestBody, field.TypeString)
	}
	if value, ok := luo.mutation.StatusCode(); ok {
		_spec.SetField(logs.FieldStatusCode, field.TypeInt, value)
	}
	if value, ok := luo.mutation.AddedStatusCode(); ok {
		_spec.AddField(logs.FieldStatusCode, field.TypeInt, value)
	}
	if value, ok := luo.mutation.ResponseHeaders(); ok {
		_spec.SetField(logs.FieldResponseHeaders, field.TypeString, value)
	}
	if luo.mutation.ResponseHeadersCleared() {
		_spec.ClearField(logs.FieldResponseHeaders, field.TypeString)
	}
	if value, ok := luo.mutation.ResponseBody(); ok {
		_spec.SetField(logs.FieldResponseBody, field.TypeString, value)
	}
	if luo.mutation.ResponseBodyCleared() {
		_spec.ClearField(logs.FieldResponseBody, field.TypeString)
	}
	if value, ok := luo.mutation.Duration(); ok {
		_spec.SetField(logs.FieldDuration, field.TypeInt, value)
	}
	if value, ok := luo.mutation.AddedDuration(); ok {
		_spec.AddField(logs.FieldDuration, field.TypeInt, value)
	}
	if value, ok := luo.mutation.Error(); ok {
		_spec.SetField(logs.FieldError, field.TypeString, value)
	}
	if luo.mutation.ErrorCleared() {
		_spec.ClearField(logs.FieldError, field.TypeString)
	}
	if value, ok := luo.mutation.ClientIP(); ok {
		_spec.SetField(logs.FieldClientIP, field.TypeString, value)
	}
	if luo.mutation.ClientIPCleared() {
		_spec.ClearField(logs.FieldClientIP, field.TypeString)
	}
	if value, ok := luo.mutation.UserID(); ok {
		_spec.SetField(logs.FieldUserID, field.TypeString, value)
	}
	if luo.mutation.UserIDCleared() {
		_spec.ClearField(logs.FieldUserID, field.TypeString)
	}
	_node = &Logs{config: luo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, luo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{logs.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	luo.mutation.done = true
	return _node, nil
}
