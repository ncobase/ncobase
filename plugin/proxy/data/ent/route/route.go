// Code generated by ent, DO NOT EDIT.

package route

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the route type in the database.
	Label = "route"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldDisabled holds the string denoting the disabled field in the database.
	FieldDisabled = "disabled"
	// FieldExtras holds the string denoting the extras field in the database.
	FieldExtras = "extras"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldEndpointID holds the string denoting the endpoint_id field in the database.
	FieldEndpointID = "endpoint_id"
	// FieldPathPattern holds the string denoting the path_pattern field in the database.
	FieldPathPattern = "path_pattern"
	// FieldTargetPath holds the string denoting the target_path field in the database.
	FieldTargetPath = "target_path"
	// FieldMethod holds the string denoting the method field in the database.
	FieldMethod = "method"
	// FieldInputTransformerID holds the string denoting the input_transformer_id field in the database.
	FieldInputTransformerID = "input_transformer_id"
	// FieldOutputTransformerID holds the string denoting the output_transformer_id field in the database.
	FieldOutputTransformerID = "output_transformer_id"
	// FieldCacheEnabled holds the string denoting the cache_enabled field in the database.
	FieldCacheEnabled = "cache_enabled"
	// FieldCacheTTL holds the string denoting the cache_ttl field in the database.
	FieldCacheTTL = "cache_ttl"
	// FieldRateLimit holds the string denoting the rate_limit field in the database.
	FieldRateLimit = "rate_limit"
	// FieldStripAuthHeader holds the string denoting the strip_auth_header field in the database.
	FieldStripAuthHeader = "strip_auth_header"
	// Table holds the table name of the route in the database.
	Table = "ncse_tbp_route"
)

// Columns holds all SQL columns for route fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldDescription,
	FieldDisabled,
	FieldExtras,
	FieldCreatedBy,
	FieldUpdatedBy,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldEndpointID,
	FieldPathPattern,
	FieldTargetPath,
	FieldMethod,
	FieldInputTransformerID,
	FieldOutputTransformerID,
	FieldCacheEnabled,
	FieldCacheTTL,
	FieldRateLimit,
	FieldStripAuthHeader,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultDisabled holds the default value on creation for the "disabled" field.
	DefaultDisabled bool
	// DefaultExtras holds the default value on creation for the "extras" field.
	DefaultExtras map[string]interface{}
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() int64
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() int64
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() int64
	// PathPatternValidator is a validator for the "path_pattern" field. It is called by the builders before save.
	PathPatternValidator func(string) error
	// TargetPathValidator is a validator for the "target_path" field. It is called by the builders before save.
	TargetPathValidator func(string) error
	// DefaultMethod holds the default value on creation for the "method" field.
	DefaultMethod string
	// DefaultCacheEnabled holds the default value on creation for the "cache_enabled" field.
	DefaultCacheEnabled bool
	// DefaultCacheTTL holds the default value on creation for the "cache_ttl" field.
	DefaultCacheTTL int
	// DefaultStripAuthHeader holds the default value on creation for the "strip_auth_header" field.
	DefaultStripAuthHeader bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)

// OrderOption defines the ordering options for the Route queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByDisabled orders the results by the disabled field.
func ByDisabled(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisabled, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the updated_by field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByEndpointID orders the results by the endpoint_id field.
func ByEndpointID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndpointID, opts...).ToFunc()
}

// ByPathPattern orders the results by the path_pattern field.
func ByPathPattern(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPathPattern, opts...).ToFunc()
}

// ByTargetPath orders the results by the target_path field.
func ByTargetPath(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTargetPath, opts...).ToFunc()
}

// ByMethod orders the results by the method field.
func ByMethod(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMethod, opts...).ToFunc()
}

// ByInputTransformerID orders the results by the input_transformer_id field.
func ByInputTransformerID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInputTransformerID, opts...).ToFunc()
}

// ByOutputTransformerID orders the results by the output_transformer_id field.
func ByOutputTransformerID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOutputTransformerID, opts...).ToFunc()
}

// ByCacheEnabled orders the results by the cache_enabled field.
func ByCacheEnabled(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCacheEnabled, opts...).ToFunc()
}

// ByCacheTTL orders the results by the cache_ttl field.
func ByCacheTTL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCacheTTL, opts...).ToFunc()
}

// ByRateLimit orders the results by the rate_limit field.
func ByRateLimit(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRateLimit, opts...).ToFunc()
}

// ByStripAuthHeader orders the results by the strip_auth_header field.
func ByStripAuthHeader(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStripAuthHeader, opts...).ToFunc()
}
