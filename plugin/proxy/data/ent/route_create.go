// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/proxy/data/ent/route"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RouteCreate is the builder for creating a Route entity.
type RouteCreate struct {
	config
	mutation *RouteMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (rc *RouteCreate) SetName(s string) *RouteCreate {
	rc.mutation.SetName(s)
	return rc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (rc *RouteCreate) SetNillableName(s *string) *RouteCreate {
	if s != nil {
		rc.SetName(*s)
	}
	return rc
}

// SetDescription sets the "description" field.
func (rc *RouteCreate) SetDescription(s string) *RouteCreate {
	rc.mutation.SetDescription(s)
	return rc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (rc *RouteCreate) SetNillableDescription(s *string) *RouteCreate {
	if s != nil {
		rc.SetDescription(*s)
	}
	return rc
}

// SetDisabled sets the "disabled" field.
func (rc *RouteCreate) SetDisabled(b bool) *RouteCreate {
	rc.mutation.SetDisabled(b)
	return rc
}

// SetNillableDisabled sets the "disabled" field if the given value is not nil.
func (rc *RouteCreate) SetNillableDisabled(b *bool) *RouteCreate {
	if b != nil {
		rc.SetDisabled(*b)
	}
	return rc
}

// SetExtras sets the "extras" field.
func (rc *RouteCreate) SetExtras(m map[string]interface{}) *RouteCreate {
	rc.mutation.SetExtras(m)
	return rc
}

// SetCreatedBy sets the "created_by" field.
func (rc *RouteCreate) SetCreatedBy(s string) *RouteCreate {
	rc.mutation.SetCreatedBy(s)
	return rc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (rc *RouteCreate) SetNillableCreatedBy(s *string) *RouteCreate {
	if s != nil {
		rc.SetCreatedBy(*s)
	}
	return rc
}

// SetUpdatedBy sets the "updated_by" field.
func (rc *RouteCreate) SetUpdatedBy(s string) *RouteCreate {
	rc.mutation.SetUpdatedBy(s)
	return rc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (rc *RouteCreate) SetNillableUpdatedBy(s *string) *RouteCreate {
	if s != nil {
		rc.SetUpdatedBy(*s)
	}
	return rc
}

// SetCreatedAt sets the "created_at" field.
func (rc *RouteCreate) SetCreatedAt(i int64) *RouteCreate {
	rc.mutation.SetCreatedAt(i)
	return rc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rc *RouteCreate) SetNillableCreatedAt(i *int64) *RouteCreate {
	if i != nil {
		rc.SetCreatedAt(*i)
	}
	return rc
}

// SetUpdatedAt sets the "updated_at" field.
func (rc *RouteCreate) SetUpdatedAt(i int64) *RouteCreate {
	rc.mutation.SetUpdatedAt(i)
	return rc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rc *RouteCreate) SetNillableUpdatedAt(i *int64) *RouteCreate {
	if i != nil {
		rc.SetUpdatedAt(*i)
	}
	return rc
}

// SetEndpointID sets the "endpoint_id" field.
func (rc *RouteCreate) SetEndpointID(s string) *RouteCreate {
	rc.mutation.SetEndpointID(s)
	return rc
}

// SetPathPattern sets the "path_pattern" field.
func (rc *RouteCreate) SetPathPattern(s string) *RouteCreate {
	rc.mutation.SetPathPattern(s)
	return rc
}

// SetTargetPath sets the "target_path" field.
func (rc *RouteCreate) SetTargetPath(s string) *RouteCreate {
	rc.mutation.SetTargetPath(s)
	return rc
}

// SetMethod sets the "method" field.
func (rc *RouteCreate) SetMethod(s string) *RouteCreate {
	rc.mutation.SetMethod(s)
	return rc
}

// SetNillableMethod sets the "method" field if the given value is not nil.
func (rc *RouteCreate) SetNillableMethod(s *string) *RouteCreate {
	if s != nil {
		rc.SetMethod(*s)
	}
	return rc
}

// SetInputTransformerID sets the "input_transformer_id" field.
func (rc *RouteCreate) SetInputTransformerID(s string) *RouteCreate {
	rc.mutation.SetInputTransformerID(s)
	return rc
}

// SetNillableInputTransformerID sets the "input_transformer_id" field if the given value is not nil.
func (rc *RouteCreate) SetNillableInputTransformerID(s *string) *RouteCreate {
	if s != nil {
		rc.SetInputTransformerID(*s)
	}
	return rc
}

// SetOutputTransformerID sets the "output_transformer_id" field.
func (rc *RouteCreate) SetOutputTransformerID(s string) *RouteCreate {
	rc.mutation.SetOutputTransformerID(s)
	return rc
}

// SetNillableOutputTransformerID sets the "output_transformer_id" field if the given value is not nil.
func (rc *RouteCreate) SetNillableOutputTransformerID(s *string) *RouteCreate {
	if s != nil {
		rc.SetOutputTransformerID(*s)
	}
	return rc
}

// SetCacheEnabled sets the "cache_enabled" field.
func (rc *RouteCreate) SetCacheEnabled(b bool) *RouteCreate {
	rc.mutation.SetCacheEnabled(b)
	return rc
}

// SetNillableCacheEnabled sets the "cache_enabled" field if the given value is not nil.
func (rc *RouteCreate) SetNillableCacheEnabled(b *bool) *RouteCreate {
	if b != nil {
		rc.SetCacheEnabled(*b)
	}
	return rc
}

// SetCacheTTL sets the "cache_ttl" field.
func (rc *RouteCreate) SetCacheTTL(i int) *RouteCreate {
	rc.mutation.SetCacheTTL(i)
	return rc
}

// SetNillableCacheTTL sets the "cache_ttl" field if the given value is not nil.
func (rc *RouteCreate) SetNillableCacheTTL(i *int) *RouteCreate {
	if i != nil {
		rc.SetCacheTTL(*i)
	}
	return rc
}

// SetRateLimit sets the "rate_limit" field.
func (rc *RouteCreate) SetRateLimit(s string) *RouteCreate {
	rc.mutation.SetRateLimit(s)
	return rc
}

// SetNillableRateLimit sets the "rate_limit" field if the given value is not nil.
func (rc *RouteCreate) SetNillableRateLimit(s *string) *RouteCreate {
	if s != nil {
		rc.SetRateLimit(*s)
	}
	return rc
}

// SetStripAuthHeader sets the "strip_auth_header" field.
func (rc *RouteCreate) SetStripAuthHeader(b bool) *RouteCreate {
	rc.mutation.SetStripAuthHeader(b)
	return rc
}

// SetNillableStripAuthHeader sets the "strip_auth_header" field if the given value is not nil.
func (rc *RouteCreate) SetNillableStripAuthHeader(b *bool) *RouteCreate {
	if b != nil {
		rc.SetStripAuthHeader(*b)
	}
	return rc
}

// SetID sets the "id" field.
func (rc *RouteCreate) SetID(s string) *RouteCreate {
	rc.mutation.SetID(s)
	return rc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (rc *RouteCreate) SetNillableID(s *string) *RouteCreate {
	if s != nil {
		rc.SetID(*s)
	}
	return rc
}

// Mutation returns the RouteMutation object of the builder.
func (rc *RouteCreate) Mutation() *RouteMutation {
	return rc.mutation
}

// Save creates the Route in the database.
func (rc *RouteCreate) Save(ctx context.Context) (*Route, error) {
	rc.defaults()
	return withHooks(ctx, rc.sqlSave, rc.mutation, rc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rc *RouteCreate) SaveX(ctx context.Context) *Route {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *RouteCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *RouteCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rc *RouteCreate) defaults() {
	if _, ok := rc.mutation.Disabled(); !ok {
		v := route.DefaultDisabled
		rc.mutation.SetDisabled(v)
	}
	if _, ok := rc.mutation.Extras(); !ok {
		v := route.DefaultExtras
		rc.mutation.SetExtras(v)
	}
	if _, ok := rc.mutation.CreatedAt(); !ok {
		v := route.DefaultCreatedAt()
		rc.mutation.SetCreatedAt(v)
	}
	if _, ok := rc.mutation.UpdatedAt(); !ok {
		v := route.DefaultUpdatedAt()
		rc.mutation.SetUpdatedAt(v)
	}
	if _, ok := rc.mutation.Method(); !ok {
		v := route.DefaultMethod
		rc.mutation.SetMethod(v)
	}
	if _, ok := rc.mutation.CacheEnabled(); !ok {
		v := route.DefaultCacheEnabled
		rc.mutation.SetCacheEnabled(v)
	}
	if _, ok := rc.mutation.CacheTTL(); !ok {
		v := route.DefaultCacheTTL
		rc.mutation.SetCacheTTL(v)
	}
	if _, ok := rc.mutation.StripAuthHeader(); !ok {
		v := route.DefaultStripAuthHeader
		rc.mutation.SetStripAuthHeader(v)
	}
	if _, ok := rc.mutation.ID(); !ok {
		v := route.DefaultID()
		rc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rc *RouteCreate) check() error {
	if _, ok := rc.mutation.EndpointID(); !ok {
		return &ValidationError{Name: "endpoint_id", err: errors.New(`ent: missing required field "Route.endpoint_id"`)}
	}
	if _, ok := rc.mutation.PathPattern(); !ok {
		return &ValidationError{Name: "path_pattern", err: errors.New(`ent: missing required field "Route.path_pattern"`)}
	}
	if v, ok := rc.mutation.PathPattern(); ok {
		if err := route.PathPatternValidator(v); err != nil {
			return &ValidationError{Name: "path_pattern", err: fmt.Errorf(`ent: validator failed for field "Route.path_pattern": %w`, err)}
		}
	}
	if _, ok := rc.mutation.TargetPath(); !ok {
		return &ValidationError{Name: "target_path", err: errors.New(`ent: missing required field "Route.target_path"`)}
	}
	if v, ok := rc.mutation.TargetPath(); ok {
		if err := route.TargetPathValidator(v); err != nil {
			return &ValidationError{Name: "target_path", err: fmt.Errorf(`ent: validator failed for field "Route.target_path": %w`, err)}
		}
	}
	if _, ok := rc.mutation.Method(); !ok {
		return &ValidationError{Name: "method", err: errors.New(`ent: missing required field "Route.method"`)}
	}
	if _, ok := rc.mutation.CacheEnabled(); !ok {
		return &ValidationError{Name: "cache_enabled", err: errors.New(`ent: missing required field "Route.cache_enabled"`)}
	}
	if _, ok := rc.mutation.CacheTTL(); !ok {
		return &ValidationError{Name: "cache_ttl", err: errors.New(`ent: missing required field "Route.cache_ttl"`)}
	}
	if _, ok := rc.mutation.StripAuthHeader(); !ok {
		return &ValidationError{Name: "strip_auth_header", err: errors.New(`ent: missing required field "Route.strip_auth_header"`)}
	}
	if v, ok := rc.mutation.ID(); ok {
		if err := route.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Route.id": %w`, err)}
		}
	}
	return nil
}

func (rc *RouteCreate) sqlSave(ctx context.Context) (*Route, error) {
	if err := rc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Route.ID type: %T", _spec.ID.Value)
		}
	}
	rc.mutation.id = &_node.ID
	rc.mutation.done = true
	return _node, nil
}

func (rc *RouteCreate) createSpec() (*Route, *sqlgraph.CreateSpec) {
	var (
		_node = &Route{config: rc.config}
		_spec = sqlgraph.NewCreateSpec(route.Table, sqlgraph.NewFieldSpec(route.FieldID, field.TypeString))
	)
	if id, ok := rc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := rc.mutation.Name(); ok {
		_spec.SetField(route.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := rc.mutation.Description(); ok {
		_spec.SetField(route.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := rc.mutation.Disabled(); ok {
		_spec.SetField(route.FieldDisabled, field.TypeBool, value)
		_node.Disabled = value
	}
	if value, ok := rc.mutation.Extras(); ok {
		_spec.SetField(route.FieldExtras, field.TypeJSON, value)
		_node.Extras = value
	}
	if value, ok := rc.mutation.CreatedBy(); ok {
		_spec.SetField(route.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := rc.mutation.UpdatedBy(); ok {
		_spec.SetField(route.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := rc.mutation.CreatedAt(); ok {
		_spec.SetField(route.FieldCreatedAt, field.TypeInt64, value)
		_node.CreatedAt = value
	}
	if value, ok := rc.mutation.UpdatedAt(); ok {
		_spec.SetField(route.FieldUpdatedAt, field.TypeInt64, value)
		_node.UpdatedAt = value
	}
	if value, ok := rc.mutation.EndpointID(); ok {
		_spec.SetField(route.FieldEndpointID, field.TypeString, value)
		_node.EndpointID = value
	}
	if value, ok := rc.mutation.PathPattern(); ok {
		_spec.SetField(route.FieldPathPattern, field.TypeString, value)
		_node.PathPattern = value
	}
	if value, ok := rc.mutation.TargetPath(); ok {
		_spec.SetField(route.FieldTargetPath, field.TypeString, value)
		_node.TargetPath = value
	}
	if value, ok := rc.mutation.Method(); ok {
		_spec.SetField(route.FieldMethod, field.TypeString, value)
		_node.Method = value
	}
	if value, ok := rc.mutation.InputTransformerID(); ok {
		_spec.SetField(route.FieldInputTransformerID, field.TypeString, value)
		_node.InputTransformerID = value
	}
	if value, ok := rc.mutation.OutputTransformerID(); ok {
		_spec.SetField(route.FieldOutputTransformerID, field.TypeString, value)
		_node.OutputTransformerID = value
	}
	if value, ok := rc.mutation.CacheEnabled(); ok {
		_spec.SetField(route.FieldCacheEnabled, field.TypeBool, value)
		_node.CacheEnabled = value
	}
	if value, ok := rc.mutation.CacheTTL(); ok {
		_spec.SetField(route.FieldCacheTTL, field.TypeInt, value)
		_node.CacheTTL = value
	}
	if value, ok := rc.mutation.RateLimit(); ok {
		_spec.SetField(route.FieldRateLimit, field.TypeString, value)
		_node.RateLimit = value
	}
	if value, ok := rc.mutation.StripAuthHeader(); ok {
		_spec.SetField(route.FieldStripAuthHeader, field.TypeBool, value)
		_node.StripAuthHeader = value
	}
	return _node, _spec
}

// RouteCreateBulk is the builder for creating many Route entities in bulk.
type RouteCreateBulk struct {
	config
	err      error
	builders []*RouteCreate
}

// Save creates the Route entities in the database.
func (rcb *RouteCreateBulk) Save(ctx context.Context) ([]*Route, error) {
	if rcb.err != nil {
		return nil, rcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Route, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RouteMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *RouteCreateBulk) SaveX(ctx context.Context) []*Route {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *RouteCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *RouteCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}
