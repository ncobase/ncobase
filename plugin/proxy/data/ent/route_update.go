// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/proxy/data/ent/predicate"
	"ncobase/proxy/data/ent/route"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RouteUpdate is the builder for updating Route entities.
type RouteUpdate struct {
	config
	hooks    []Hook
	mutation *RouteMutation
}

// Where appends a list predicates to the RouteUpdate builder.
func (ru *RouteUpdate) Where(ps ...predicate.Route) *RouteUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetName sets the "name" field.
func (ru *RouteUpdate) SetName(s string) *RouteUpdate {
	ru.mutation.SetName(s)
	return ru
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ru *RouteUpdate) SetNillableName(s *string) *RouteUpdate {
	if s != nil {
		ru.SetName(*s)
	}
	return ru
}

// ClearName clears the value of the "name" field.
func (ru *RouteUpdate) ClearName() *RouteUpdate {
	ru.mutation.ClearName()
	return ru
}

// SetDescription sets the "description" field.
func (ru *RouteUpdate) SetDescription(s string) *RouteUpdate {
	ru.mutation.SetDescription(s)
	return ru
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ru *RouteUpdate) SetNillableDescription(s *string) *RouteUpdate {
	if s != nil {
		ru.SetDescription(*s)
	}
	return ru
}

// ClearDescription clears the value of the "description" field.
func (ru *RouteUpdate) ClearDescription() *RouteUpdate {
	ru.mutation.ClearDescription()
	return ru
}

// SetDisabled sets the "disabled" field.
func (ru *RouteUpdate) SetDisabled(b bool) *RouteUpdate {
	ru.mutation.SetDisabled(b)
	return ru
}

// SetNillableDisabled sets the "disabled" field if the given value is not nil.
func (ru *RouteUpdate) SetNillableDisabled(b *bool) *RouteUpdate {
	if b != nil {
		ru.SetDisabled(*b)
	}
	return ru
}

// ClearDisabled clears the value of the "disabled" field.
func (ru *RouteUpdate) ClearDisabled() *RouteUpdate {
	ru.mutation.ClearDisabled()
	return ru
}

// SetExtras sets the "extras" field.
func (ru *RouteUpdate) SetExtras(m map[string]interface{}) *RouteUpdate {
	ru.mutation.SetExtras(m)
	return ru
}

// ClearExtras clears the value of the "extras" field.
func (ru *RouteUpdate) ClearExtras() *RouteUpdate {
	ru.mutation.ClearExtras()
	return ru
}

// SetCreatedBy sets the "created_by" field.
func (ru *RouteUpdate) SetCreatedBy(s string) *RouteUpdate {
	ru.mutation.SetCreatedBy(s)
	return ru
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (ru *RouteUpdate) SetNillableCreatedBy(s *string) *RouteUpdate {
	if s != nil {
		ru.SetCreatedBy(*s)
	}
	return ru
}

// ClearCreatedBy clears the value of the "created_by" field.
func (ru *RouteUpdate) ClearCreatedBy() *RouteUpdate {
	ru.mutation.ClearCreatedBy()
	return ru
}

// SetUpdatedBy sets the "updated_by" field.
func (ru *RouteUpdate) SetUpdatedBy(s string) *RouteUpdate {
	ru.mutation.SetUpdatedBy(s)
	return ru
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ru *RouteUpdate) SetNillableUpdatedBy(s *string) *RouteUpdate {
	if s != nil {
		ru.SetUpdatedBy(*s)
	}
	return ru
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (ru *RouteUpdate) ClearUpdatedBy() *RouteUpdate {
	ru.mutation.ClearUpdatedBy()
	return ru
}

// SetUpdatedAt sets the "updated_at" field.
func (ru *RouteUpdate) SetUpdatedAt(i int64) *RouteUpdate {
	ru.mutation.ResetUpdatedAt()
	ru.mutation.SetUpdatedAt(i)
	return ru
}

// AddUpdatedAt adds i to the "updated_at" field.
func (ru *RouteUpdate) AddUpdatedAt(i int64) *RouteUpdate {
	ru.mutation.AddUpdatedAt(i)
	return ru
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (ru *RouteUpdate) ClearUpdatedAt() *RouteUpdate {
	ru.mutation.ClearUpdatedAt()
	return ru
}

// SetEndpointID sets the "endpoint_id" field.
func (ru *RouteUpdate) SetEndpointID(s string) *RouteUpdate {
	ru.mutation.SetEndpointID(s)
	return ru
}

// SetNillableEndpointID sets the "endpoint_id" field if the given value is not nil.
func (ru *RouteUpdate) SetNillableEndpointID(s *string) *RouteUpdate {
	if s != nil {
		ru.SetEndpointID(*s)
	}
	return ru
}

// SetPathPattern sets the "path_pattern" field.
func (ru *RouteUpdate) SetPathPattern(s string) *RouteUpdate {
	ru.mutation.SetPathPattern(s)
	return ru
}

// SetNillablePathPattern sets the "path_pattern" field if the given value is not nil.
func (ru *RouteUpdate) SetNillablePathPattern(s *string) *RouteUpdate {
	if s != nil {
		ru.SetPathPattern(*s)
	}
	return ru
}

// SetTargetPath sets the "target_path" field.
func (ru *RouteUpdate) SetTargetPath(s string) *RouteUpdate {
	ru.mutation.SetTargetPath(s)
	return ru
}

// SetNillableTargetPath sets the "target_path" field if the given value is not nil.
func (ru *RouteUpdate) SetNillableTargetPath(s *string) *RouteUpdate {
	if s != nil {
		ru.SetTargetPath(*s)
	}
	return ru
}

// SetMethod sets the "method" field.
func (ru *RouteUpdate) SetMethod(s string) *RouteUpdate {
	ru.mutation.SetMethod(s)
	return ru
}

// SetNillableMethod sets the "method" field if the given value is not nil.
func (ru *RouteUpdate) SetNillableMethod(s *string) *RouteUpdate {
	if s != nil {
		ru.SetMethod(*s)
	}
	return ru
}

// SetInputTransformerID sets the "input_transformer_id" field.
func (ru *RouteUpdate) SetInputTransformerID(s string) *RouteUpdate {
	ru.mutation.SetInputTransformerID(s)
	return ru
}

// SetNillableInputTransformerID sets the "input_transformer_id" field if the given value is not nil.
func (ru *RouteUpdate) SetNillableInputTransformerID(s *string) *RouteUpdate {
	if s != nil {
		ru.SetInputTransformerID(*s)
	}
	return ru
}

// ClearInputTransformerID clears the value of the "input_transformer_id" field.
func (ru *RouteUpdate) ClearInputTransformerID() *RouteUpdate {
	ru.mutation.ClearInputTransformerID()
	return ru
}

// SetOutputTransformerID sets the "output_transformer_id" field.
func (ru *RouteUpdate) SetOutputTransformerID(s string) *RouteUpdate {
	ru.mutation.SetOutputTransformerID(s)
	return ru
}

// SetNillableOutputTransformerID sets the "output_transformer_id" field if the given value is not nil.
func (ru *RouteUpdate) SetNillableOutputTransformerID(s *string) *RouteUpdate {
	if s != nil {
		ru.SetOutputTransformerID(*s)
	}
	return ru
}

// ClearOutputTransformerID clears the value of the "output_transformer_id" field.
func (ru *RouteUpdate) ClearOutputTransformerID() *RouteUpdate {
	ru.mutation.ClearOutputTransformerID()
	return ru
}

// SetCacheEnabled sets the "cache_enabled" field.
func (ru *RouteUpdate) SetCacheEnabled(b bool) *RouteUpdate {
	ru.mutation.SetCacheEnabled(b)
	return ru
}

// SetNillableCacheEnabled sets the "cache_enabled" field if the given value is not nil.
func (ru *RouteUpdate) SetNillableCacheEnabled(b *bool) *RouteUpdate {
	if b != nil {
		ru.SetCacheEnabled(*b)
	}
	return ru
}

// SetCacheTTL sets the "cache_ttl" field.
func (ru *RouteUpdate) SetCacheTTL(i int) *RouteUpdate {
	ru.mutation.ResetCacheTTL()
	ru.mutation.SetCacheTTL(i)
	return ru
}

// SetNillableCacheTTL sets the "cache_ttl" field if the given value is not nil.
func (ru *RouteUpdate) SetNillableCacheTTL(i *int) *RouteUpdate {
	if i != nil {
		ru.SetCacheTTL(*i)
	}
	return ru
}

// AddCacheTTL adds i to the "cache_ttl" field.
func (ru *RouteUpdate) AddCacheTTL(i int) *RouteUpdate {
	ru.mutation.AddCacheTTL(i)
	return ru
}

// SetRateLimit sets the "rate_limit" field.
func (ru *RouteUpdate) SetRateLimit(s string) *RouteUpdate {
	ru.mutation.SetRateLimit(s)
	return ru
}

// SetNillableRateLimit sets the "rate_limit" field if the given value is not nil.
func (ru *RouteUpdate) SetNillableRateLimit(s *string) *RouteUpdate {
	if s != nil {
		ru.SetRateLimit(*s)
	}
	return ru
}

// ClearRateLimit clears the value of the "rate_limit" field.
func (ru *RouteUpdate) ClearRateLimit() *RouteUpdate {
	ru.mutation.ClearRateLimit()
	return ru
}

// SetStripAuthHeader sets the "strip_auth_header" field.
func (ru *RouteUpdate) SetStripAuthHeader(b bool) *RouteUpdate {
	ru.mutation.SetStripAuthHeader(b)
	return ru
}

// SetNillableStripAuthHeader sets the "strip_auth_header" field if the given value is not nil.
func (ru *RouteUpdate) SetNillableStripAuthHeader(b *bool) *RouteUpdate {
	if b != nil {
		ru.SetStripAuthHeader(*b)
	}
	return ru
}

// Mutation returns the RouteMutation object of the builder.
func (ru *RouteUpdate) Mutation() *RouteMutation {
	return ru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RouteUpdate) Save(ctx context.Context) (int, error) {
	ru.defaults()
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RouteUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RouteUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RouteUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ru *RouteUpdate) defaults() {
	if _, ok := ru.mutation.UpdatedAt(); !ok && !ru.mutation.UpdatedAtCleared() {
		v := route.UpdateDefaultUpdatedAt()
		ru.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ru *RouteUpdate) check() error {
	if v, ok := ru.mutation.PathPattern(); ok {
		if err := route.PathPatternValidator(v); err != nil {
			return &ValidationError{Name: "path_pattern", err: fmt.Errorf(`ent: validator failed for field "Route.path_pattern": %w`, err)}
		}
	}
	if v, ok := ru.mutation.TargetPath(); ok {
		if err := route.TargetPathValidator(v); err != nil {
			return &ValidationError{Name: "target_path", err: fmt.Errorf(`ent: validator failed for field "Route.target_path": %w`, err)}
		}
	}
	return nil
}

func (ru *RouteUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(route.Table, route.Columns, sqlgraph.NewFieldSpec(route.FieldID, field.TypeString))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.Name(); ok {
		_spec.SetField(route.FieldName, field.TypeString, value)
	}
	if ru.mutation.NameCleared() {
		_spec.ClearField(route.FieldName, field.TypeString)
	}
	if value, ok := ru.mutation.Description(); ok {
		_spec.SetField(route.FieldDescription, field.TypeString, value)
	}
	if ru.mutation.DescriptionCleared() {
		_spec.ClearField(route.FieldDescription, field.TypeString)
	}
	if value, ok := ru.mutation.Disabled(); ok {
		_spec.SetField(route.FieldDisabled, field.TypeBool, value)
	}
	if ru.mutation.DisabledCleared() {
		_spec.ClearField(route.FieldDisabled, field.TypeBool)
	}
	if value, ok := ru.mutation.Extras(); ok {
		_spec.SetField(route.FieldExtras, field.TypeJSON, value)
	}
	if ru.mutation.ExtrasCleared() {
		_spec.ClearField(route.FieldExtras, field.TypeJSON)
	}
	if value, ok := ru.mutation.CreatedBy(); ok {
		_spec.SetField(route.FieldCreatedBy, field.TypeString, value)
	}
	if ru.mutation.CreatedByCleared() {
		_spec.ClearField(route.FieldCreatedBy, field.TypeString)
	}
	if value, ok := ru.mutation.UpdatedBy(); ok {
		_spec.SetField(route.FieldUpdatedBy, field.TypeString, value)
	}
	if ru.mutation.UpdatedByCleared() {
		_spec.ClearField(route.FieldUpdatedBy, field.TypeString)
	}
	if ru.mutation.CreatedAtCleared() {
		_spec.ClearField(route.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := ru.mutation.UpdatedAt(); ok {
		_spec.SetField(route.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := ru.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(route.FieldUpdatedAt, field.TypeInt64, value)
	}
	if ru.mutation.UpdatedAtCleared() {
		_spec.ClearField(route.FieldUpdatedAt, field.TypeInt64)
	}
	if value, ok := ru.mutation.EndpointID(); ok {
		_spec.SetField(route.FieldEndpointID, field.TypeString, value)
	}
	if value, ok := ru.mutation.PathPattern(); ok {
		_spec.SetField(route.FieldPathPattern, field.TypeString, value)
	}
	if value, ok := ru.mutation.TargetPath(); ok {
		_spec.SetField(route.FieldTargetPath, field.TypeString, value)
	}
	if value, ok := ru.mutation.Method(); ok {
		_spec.SetField(route.FieldMethod, field.TypeString, value)
	}
	if value, ok := ru.mutation.InputTransformerID(); ok {
		_spec.SetField(route.FieldInputTransformerID, field.TypeString, value)
	}
	if ru.mutation.InputTransformerIDCleared() {
		_spec.ClearField(route.FieldInputTransformerID, field.TypeString)
	}
	if value, ok := ru.mutation.OutputTransformerID(); ok {
		_spec.SetField(route.FieldOutputTransformerID, field.TypeString, value)
	}
	if ru.mutation.OutputTransformerIDCleared() {
		_spec.ClearField(route.FieldOutputTransformerID, field.TypeString)
	}
	if value, ok := ru.mutation.CacheEnabled(); ok {
		_spec.SetField(route.FieldCacheEnabled, field.TypeBool, value)
	}
	if value, ok := ru.mutation.CacheTTL(); ok {
		_spec.SetField(route.FieldCacheTTL, field.TypeInt, value)
	}
	if value, ok := ru.mutation.AddedCacheTTL(); ok {
		_spec.AddField(route.FieldCacheTTL, field.TypeInt, value)
	}
	if value, ok := ru.mutation.RateLimit(); ok {
		_spec.SetField(route.FieldRateLimit, field.TypeString, value)
	}
	if ru.mutation.RateLimitCleared() {
		_spec.ClearField(route.FieldRateLimit, field.TypeString)
	}
	if value, ok := ru.mutation.StripAuthHeader(); ok {
		_spec.SetField(route.FieldStripAuthHeader, field.TypeBool, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{route.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// RouteUpdateOne is the builder for updating a single Route entity.
type RouteUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RouteMutation
}

// SetName sets the "name" field.
func (ruo *RouteUpdateOne) SetName(s string) *RouteUpdateOne {
	ruo.mutation.SetName(s)
	return ruo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ruo *RouteUpdateOne) SetNillableName(s *string) *RouteUpdateOne {
	if s != nil {
		ruo.SetName(*s)
	}
	return ruo
}

// ClearName clears the value of the "name" field.
func (ruo *RouteUpdateOne) ClearName() *RouteUpdateOne {
	ruo.mutation.ClearName()
	return ruo
}

// SetDescription sets the "description" field.
func (ruo *RouteUpdateOne) SetDescription(s string) *RouteUpdateOne {
	ruo.mutation.SetDescription(s)
	return ruo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ruo *RouteUpdateOne) SetNillableDescription(s *string) *RouteUpdateOne {
	if s != nil {
		ruo.SetDescription(*s)
	}
	return ruo
}

// ClearDescription clears the value of the "description" field.
func (ruo *RouteUpdateOne) ClearDescription() *RouteUpdateOne {
	ruo.mutation.ClearDescription()
	return ruo
}

// SetDisabled sets the "disabled" field.
func (ruo *RouteUpdateOne) SetDisabled(b bool) *RouteUpdateOne {
	ruo.mutation.SetDisabled(b)
	return ruo
}

// SetNillableDisabled sets the "disabled" field if the given value is not nil.
func (ruo *RouteUpdateOne) SetNillableDisabled(b *bool) *RouteUpdateOne {
	if b != nil {
		ruo.SetDisabled(*b)
	}
	return ruo
}

// ClearDisabled clears the value of the "disabled" field.
func (ruo *RouteUpdateOne) ClearDisabled() *RouteUpdateOne {
	ruo.mutation.ClearDisabled()
	return ruo
}

// SetExtras sets the "extras" field.
func (ruo *RouteUpdateOne) SetExtras(m map[string]interface{}) *RouteUpdateOne {
	ruo.mutation.SetExtras(m)
	return ruo
}

// ClearExtras clears the value of the "extras" field.
func (ruo *RouteUpdateOne) ClearExtras() *RouteUpdateOne {
	ruo.mutation.ClearExtras()
	return ruo
}

// SetCreatedBy sets the "created_by" field.
func (ruo *RouteUpdateOne) SetCreatedBy(s string) *RouteUpdateOne {
	ruo.mutation.SetCreatedBy(s)
	return ruo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (ruo *RouteUpdateOne) SetNillableCreatedBy(s *string) *RouteUpdateOne {
	if s != nil {
		ruo.SetCreatedBy(*s)
	}
	return ruo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (ruo *RouteUpdateOne) ClearCreatedBy() *RouteUpdateOne {
	ruo.mutation.ClearCreatedBy()
	return ruo
}

// SetUpdatedBy sets the "updated_by" field.
func (ruo *RouteUpdateOne) SetUpdatedBy(s string) *RouteUpdateOne {
	ruo.mutation.SetUpdatedBy(s)
	return ruo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ruo *RouteUpdateOne) SetNillableUpdatedBy(s *string) *RouteUpdateOne {
	if s != nil {
		ruo.SetUpdatedBy(*s)
	}
	return ruo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (ruo *RouteUpdateOne) ClearUpdatedBy() *RouteUpdateOne {
	ruo.mutation.ClearUpdatedBy()
	return ruo
}

// SetUpdatedAt sets the "updated_at" field.
func (ruo *RouteUpdateOne) SetUpdatedAt(i int64) *RouteUpdateOne {
	ruo.mutation.ResetUpdatedAt()
	ruo.mutation.SetUpdatedAt(i)
	return ruo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (ruo *RouteUpdateOne) AddUpdatedAt(i int64) *RouteUpdateOne {
	ruo.mutation.AddUpdatedAt(i)
	return ruo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (ruo *RouteUpdateOne) ClearUpdatedAt() *RouteUpdateOne {
	ruo.mutation.ClearUpdatedAt()
	return ruo
}

// SetEndpointID sets the "endpoint_id" field.
func (ruo *RouteUpdateOne) SetEndpointID(s string) *RouteUpdateOne {
	ruo.mutation.SetEndpointID(s)
	return ruo
}

// SetNillableEndpointID sets the "endpoint_id" field if the given value is not nil.
func (ruo *RouteUpdateOne) SetNillableEndpointID(s *string) *RouteUpdateOne {
	if s != nil {
		ruo.SetEndpointID(*s)
	}
	return ruo
}

// SetPathPattern sets the "path_pattern" field.
func (ruo *RouteUpdateOne) SetPathPattern(s string) *RouteUpdateOne {
	ruo.mutation.SetPathPattern(s)
	return ruo
}

// SetNillablePathPattern sets the "path_pattern" field if the given value is not nil.
func (ruo *RouteUpdateOne) SetNillablePathPattern(s *string) *RouteUpdateOne {
	if s != nil {
		ruo.SetPathPattern(*s)
	}
	return ruo
}

// SetTargetPath sets the "target_path" field.
func (ruo *RouteUpdateOne) SetTargetPath(s string) *RouteUpdateOne {
	ruo.mutation.SetTargetPath(s)
	return ruo
}

// SetNillableTargetPath sets the "target_path" field if the given value is not nil.
func (ruo *RouteUpdateOne) SetNillableTargetPath(s *string) *RouteUpdateOne {
	if s != nil {
		ruo.SetTargetPath(*s)
	}
	return ruo
}

// SetMethod sets the "method" field.
func (ruo *RouteUpdateOne) SetMethod(s string) *RouteUpdateOne {
	ruo.mutation.SetMethod(s)
	return ruo
}

// SetNillableMethod sets the "method" field if the given value is not nil.
func (ruo *RouteUpdateOne) SetNillableMethod(s *string) *RouteUpdateOne {
	if s != nil {
		ruo.SetMethod(*s)
	}
	return ruo
}

// SetInputTransformerID sets the "input_transformer_id" field.
func (ruo *RouteUpdateOne) SetInputTransformerID(s string) *RouteUpdateOne {
	ruo.mutation.SetInputTransformerID(s)
	return ruo
}

// SetNillableInputTransformerID sets the "input_transformer_id" field if the given value is not nil.
func (ruo *RouteUpdateOne) SetNillableInputTransformerID(s *string) *RouteUpdateOne {
	if s != nil {
		ruo.SetInputTransformerID(*s)
	}
	return ruo
}

// ClearInputTransformerID clears the value of the "input_transformer_id" field.
func (ruo *RouteUpdateOne) ClearInputTransformerID() *RouteUpdateOne {
	ruo.mutation.ClearInputTransformerID()
	return ruo
}

// SetOutputTransformerID sets the "output_transformer_id" field.
func (ruo *RouteUpdateOne) SetOutputTransformerID(s string) *RouteUpdateOne {
	ruo.mutation.SetOutputTransformerID(s)
	return ruo
}

// SetNillableOutputTransformerID sets the "output_transformer_id" field if the given value is not nil.
func (ruo *RouteUpdateOne) SetNillableOutputTransformerID(s *string) *RouteUpdateOne {
	if s != nil {
		ruo.SetOutputTransformerID(*s)
	}
	return ruo
}

// ClearOutputTransformerID clears the value of the "output_transformer_id" field.
func (ruo *RouteUpdateOne) ClearOutputTransformerID() *RouteUpdateOne {
	ruo.mutation.ClearOutputTransformerID()
	return ruo
}

// SetCacheEnabled sets the "cache_enabled" field.
func (ruo *RouteUpdateOne) SetCacheEnabled(b bool) *RouteUpdateOne {
	ruo.mutation.SetCacheEnabled(b)
	return ruo
}

// SetNillableCacheEnabled sets the "cache_enabled" field if the given value is not nil.
func (ruo *RouteUpdateOne) SetNillableCacheEnabled(b *bool) *RouteUpdateOne {
	if b != nil {
		ruo.SetCacheEnabled(*b)
	}
	return ruo
}

// SetCacheTTL sets the "cache_ttl" field.
func (ruo *RouteUpdateOne) SetCacheTTL(i int) *RouteUpdateOne {
	ruo.mutation.ResetCacheTTL()
	ruo.mutation.SetCacheTTL(i)
	return ruo
}

// SetNillableCacheTTL sets the "cache_ttl" field if the given value is not nil.
func (ruo *RouteUpdateOne) SetNillableCacheTTL(i *int) *RouteUpdateOne {
	if i != nil {
		ruo.SetCacheTTL(*i)
	}
	return ruo
}

// AddCacheTTL adds i to the "cache_ttl" field.
func (ruo *RouteUpdateOne) AddCacheTTL(i int) *RouteUpdateOne {
	ruo.mutation.AddCacheTTL(i)
	return ruo
}

// SetRateLimit sets the "rate_limit" field.
func (ruo *RouteUpdateOne) SetRateLimit(s string) *RouteUpdateOne {
	ruo.mutation.SetRateLimit(s)
	return ruo
}

// SetNillableRateLimit sets the "rate_limit" field if the given value is not nil.
func (ruo *RouteUpdateOne) SetNillableRateLimit(s *string) *RouteUpdateOne {
	if s != nil {
		ruo.SetRateLimit(*s)
	}
	return ruo
}

// ClearRateLimit clears the value of the "rate_limit" field.
func (ruo *RouteUpdateOne) ClearRateLimit() *RouteUpdateOne {
	ruo.mutation.ClearRateLimit()
	return ruo
}

// SetStripAuthHeader sets the "strip_auth_header" field.
func (ruo *RouteUpdateOne) SetStripAuthHeader(b bool) *RouteUpdateOne {
	ruo.mutation.SetStripAuthHeader(b)
	return ruo
}

// SetNillableStripAuthHeader sets the "strip_auth_header" field if the given value is not nil.
func (ruo *RouteUpdateOne) SetNillableStripAuthHeader(b *bool) *RouteUpdateOne {
	if b != nil {
		ruo.SetStripAuthHeader(*b)
	}
	return ruo
}

// Mutation returns the RouteMutation object of the builder.
func (ruo *RouteUpdateOne) Mutation() *RouteMutation {
	return ruo.mutation
}

// Where appends a list predicates to the RouteUpdate builder.
func (ruo *RouteUpdateOne) Where(ps ...predicate.Route) *RouteUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RouteUpdateOne) Select(field string, fields ...string) *RouteUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Route entity.
func (ruo *RouteUpdateOne) Save(ctx context.Context) (*Route, error) {
	ruo.defaults()
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RouteUpdateOne) SaveX(ctx context.Context) *Route {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RouteUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RouteUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ruo *RouteUpdateOne) defaults() {
	if _, ok := ruo.mutation.UpdatedAt(); !ok && !ruo.mutation.UpdatedAtCleared() {
		v := route.UpdateDefaultUpdatedAt()
		ruo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruo *RouteUpdateOne) check() error {
	if v, ok := ruo.mutation.PathPattern(); ok {
		if err := route.PathPatternValidator(v); err != nil {
			return &ValidationError{Name: "path_pattern", err: fmt.Errorf(`ent: validator failed for field "Route.path_pattern": %w`, err)}
		}
	}
	if v, ok := ruo.mutation.TargetPath(); ok {
		if err := route.TargetPathValidator(v); err != nil {
			return &ValidationError{Name: "target_path", err: fmt.Errorf(`ent: validator failed for field "Route.target_path": %w`, err)}
		}
	}
	return nil
}

func (ruo *RouteUpdateOne) sqlSave(ctx context.Context) (_node *Route, err error) {
	if err := ruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(route.Table, route.Columns, sqlgraph.NewFieldSpec(route.FieldID, field.TypeString))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Route.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, route.FieldID)
		for _, f := range fields {
			if !route.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != route.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.Name(); ok {
		_spec.SetField(route.FieldName, field.TypeString, value)
	}
	if ruo.mutation.NameCleared() {
		_spec.ClearField(route.FieldName, field.TypeString)
	}
	if value, ok := ruo.mutation.Description(); ok {
		_spec.SetField(route.FieldDescription, field.TypeString, value)
	}
	if ruo.mutation.DescriptionCleared() {
		_spec.ClearField(route.FieldDescription, field.TypeString)
	}
	if value, ok := ruo.mutation.Disabled(); ok {
		_spec.SetField(route.FieldDisabled, field.TypeBool, value)
	}
	if ruo.mutation.DisabledCleared() {
		_spec.ClearField(route.FieldDisabled, field.TypeBool)
	}
	if value, ok := ruo.mutation.Extras(); ok {
		_spec.SetField(route.FieldExtras, field.TypeJSON, value)
	}
	if ruo.mutation.ExtrasCleared() {
		_spec.ClearField(route.FieldExtras, field.TypeJSON)
	}
	if value, ok := ruo.mutation.CreatedBy(); ok {
		_spec.SetField(route.FieldCreatedBy, field.TypeString, value)
	}
	if ruo.mutation.CreatedByCleared() {
		_spec.ClearField(route.FieldCreatedBy, field.TypeString)
	}
	if value, ok := ruo.mutation.UpdatedBy(); ok {
		_spec.SetField(route.FieldUpdatedBy, field.TypeString, value)
	}
	if ruo.mutation.UpdatedByCleared() {
		_spec.ClearField(route.FieldUpdatedBy, field.TypeString)
	}
	if ruo.mutation.CreatedAtCleared() {
		_spec.ClearField(route.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := ruo.mutation.UpdatedAt(); ok {
		_spec.SetField(route.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := ruo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(route.FieldUpdatedAt, field.TypeInt64, value)
	}
	if ruo.mutation.UpdatedAtCleared() {
		_spec.ClearField(route.FieldUpdatedAt, field.TypeInt64)
	}
	if value, ok := ruo.mutation.EndpointID(); ok {
		_spec.SetField(route.FieldEndpointID, field.TypeString, value)
	}
	if value, ok := ruo.mutation.PathPattern(); ok {
		_spec.SetField(route.FieldPathPattern, field.TypeString, value)
	}
	if value, ok := ruo.mutation.TargetPath(); ok {
		_spec.SetField(route.FieldTargetPath, field.TypeString, value)
	}
	if value, ok := ruo.mutation.Method(); ok {
		_spec.SetField(route.FieldMethod, field.TypeString, value)
	}
	if value, ok := ruo.mutation.InputTransformerID(); ok {
		_spec.SetField(route.FieldInputTransformerID, field.TypeString, value)
	}
	if ruo.mutation.InputTransformerIDCleared() {
		_spec.ClearField(route.FieldInputTransformerID, field.TypeString)
	}
	if value, ok := ruo.mutation.OutputTransformerID(); ok {
		_spec.SetField(route.FieldOutputTransformerID, field.TypeString, value)
	}
	if ruo.mutation.OutputTransformerIDCleared() {
		_spec.ClearField(route.FieldOutputTransformerID, field.TypeString)
	}
	if value, ok := ruo.mutation.CacheEnabled(); ok {
		_spec.SetField(route.FieldCacheEnabled, field.TypeBool, value)
	}
	if value, ok := ruo.mutation.CacheTTL(); ok {
		_spec.SetField(route.FieldCacheTTL, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.AddedCacheTTL(); ok {
		_spec.AddField(route.FieldCacheTTL, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.RateLimit(); ok {
		_spec.SetField(route.FieldRateLimit, field.TypeString, value)
	}
	if ruo.mutation.RateLimitCleared() {
		_spec.ClearField(route.FieldRateLimit, field.TypeString)
	}
	if value, ok := ruo.mutation.StripAuthHeader(); ok {
		_spec.SetField(route.FieldStripAuthHeader, field.TypeBool, value)
	}
	_node = &Route{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{route.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
