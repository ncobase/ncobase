// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/proxy/data/ent/transformer"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TransformerCreate is the builder for creating a Transformer entity.
type TransformerCreate struct {
	config
	mutation *TransformerMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (tc *TransformerCreate) SetName(s string) *TransformerCreate {
	tc.mutation.SetName(s)
	return tc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tc *TransformerCreate) SetNillableName(s *string) *TransformerCreate {
	if s != nil {
		tc.SetName(*s)
	}
	return tc
}

// SetDescription sets the "description" field.
func (tc *TransformerCreate) SetDescription(s string) *TransformerCreate {
	tc.mutation.SetDescription(s)
	return tc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tc *TransformerCreate) SetNillableDescription(s *string) *TransformerCreate {
	if s != nil {
		tc.SetDescription(*s)
	}
	return tc
}

// SetDisabled sets the "disabled" field.
func (tc *TransformerCreate) SetDisabled(b bool) *TransformerCreate {
	tc.mutation.SetDisabled(b)
	return tc
}

// SetNillableDisabled sets the "disabled" field if the given value is not nil.
func (tc *TransformerCreate) SetNillableDisabled(b *bool) *TransformerCreate {
	if b != nil {
		tc.SetDisabled(*b)
	}
	return tc
}

// SetExtras sets the "extras" field.
func (tc *TransformerCreate) SetExtras(m map[string]interface{}) *TransformerCreate {
	tc.mutation.SetExtras(m)
	return tc
}

// SetCreatedBy sets the "created_by" field.
func (tc *TransformerCreate) SetCreatedBy(s string) *TransformerCreate {
	tc.mutation.SetCreatedBy(s)
	return tc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (tc *TransformerCreate) SetNillableCreatedBy(s *string) *TransformerCreate {
	if s != nil {
		tc.SetCreatedBy(*s)
	}
	return tc
}

// SetUpdatedBy sets the "updated_by" field.
func (tc *TransformerCreate) SetUpdatedBy(s string) *TransformerCreate {
	tc.mutation.SetUpdatedBy(s)
	return tc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (tc *TransformerCreate) SetNillableUpdatedBy(s *string) *TransformerCreate {
	if s != nil {
		tc.SetUpdatedBy(*s)
	}
	return tc
}

// SetCreatedAt sets the "created_at" field.
func (tc *TransformerCreate) SetCreatedAt(i int64) *TransformerCreate {
	tc.mutation.SetCreatedAt(i)
	return tc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tc *TransformerCreate) SetNillableCreatedAt(i *int64) *TransformerCreate {
	if i != nil {
		tc.SetCreatedAt(*i)
	}
	return tc
}

// SetUpdatedAt sets the "updated_at" field.
func (tc *TransformerCreate) SetUpdatedAt(i int64) *TransformerCreate {
	tc.mutation.SetUpdatedAt(i)
	return tc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tc *TransformerCreate) SetNillableUpdatedAt(i *int64) *TransformerCreate {
	if i != nil {
		tc.SetUpdatedAt(*i)
	}
	return tc
}

// SetType sets the "type" field.
func (tc *TransformerCreate) SetType(s string) *TransformerCreate {
	tc.mutation.SetType(s)
	return tc
}

// SetContent sets the "content" field.
func (tc *TransformerCreate) SetContent(s string) *TransformerCreate {
	tc.mutation.SetContent(s)
	return tc
}

// SetContentType sets the "content_type" field.
func (tc *TransformerCreate) SetContentType(s string) *TransformerCreate {
	tc.mutation.SetContentType(s)
	return tc
}

// SetNillableContentType sets the "content_type" field if the given value is not nil.
func (tc *TransformerCreate) SetNillableContentType(s *string) *TransformerCreate {
	if s != nil {
		tc.SetContentType(*s)
	}
	return tc
}

// SetID sets the "id" field.
func (tc *TransformerCreate) SetID(s string) *TransformerCreate {
	tc.mutation.SetID(s)
	return tc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (tc *TransformerCreate) SetNillableID(s *string) *TransformerCreate {
	if s != nil {
		tc.SetID(*s)
	}
	return tc
}

// Mutation returns the TransformerMutation object of the builder.
func (tc *TransformerCreate) Mutation() *TransformerMutation {
	return tc.mutation
}

// Save creates the Transformer in the database.
func (tc *TransformerCreate) Save(ctx context.Context) (*Transformer, error) {
	tc.defaults()
	return withHooks(ctx, tc.sqlSave, tc.mutation, tc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TransformerCreate) SaveX(ctx context.Context) *Transformer {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TransformerCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TransformerCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *TransformerCreate) defaults() {
	if _, ok := tc.mutation.Disabled(); !ok {
		v := transformer.DefaultDisabled
		tc.mutation.SetDisabled(v)
	}
	if _, ok := tc.mutation.Extras(); !ok {
		v := transformer.DefaultExtras
		tc.mutation.SetExtras(v)
	}
	if _, ok := tc.mutation.CreatedAt(); !ok {
		v := transformer.DefaultCreatedAt()
		tc.mutation.SetCreatedAt(v)
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		v := transformer.DefaultUpdatedAt()
		tc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tc.mutation.ContentType(); !ok {
		v := transformer.DefaultContentType
		tc.mutation.SetContentType(v)
	}
	if _, ok := tc.mutation.ID(); !ok {
		v := transformer.DefaultID()
		tc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TransformerCreate) check() error {
	if _, ok := tc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Transformer.type"`)}
	}
	if v, ok := tc.mutation.GetType(); ok {
		if err := transformer.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Transformer.type": %w`, err)}
		}
	}
	if _, ok := tc.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required field "Transformer.content"`)}
	}
	if v, ok := tc.mutation.Content(); ok {
		if err := transformer.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "Transformer.content": %w`, err)}
		}
	}
	if _, ok := tc.mutation.ContentType(); !ok {
		return &ValidationError{Name: "content_type", err: errors.New(`ent: missing required field "Transformer.content_type"`)}
	}
	if v, ok := tc.mutation.ID(); ok {
		if err := transformer.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Transformer.id": %w`, err)}
		}
	}
	return nil
}

func (tc *TransformerCreate) sqlSave(ctx context.Context) (*Transformer, error) {
	if err := tc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Transformer.ID type: %T", _spec.ID.Value)
		}
	}
	tc.mutation.id = &_node.ID
	tc.mutation.done = true
	return _node, nil
}

func (tc *TransformerCreate) createSpec() (*Transformer, *sqlgraph.CreateSpec) {
	var (
		_node = &Transformer{config: tc.config}
		_spec = sqlgraph.NewCreateSpec(transformer.Table, sqlgraph.NewFieldSpec(transformer.FieldID, field.TypeString))
	)
	if id, ok := tc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tc.mutation.Name(); ok {
		_spec.SetField(transformer.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := tc.mutation.Description(); ok {
		_spec.SetField(transformer.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := tc.mutation.Disabled(); ok {
		_spec.SetField(transformer.FieldDisabled, field.TypeBool, value)
		_node.Disabled = value
	}
	if value, ok := tc.mutation.Extras(); ok {
		_spec.SetField(transformer.FieldExtras, field.TypeJSON, value)
		_node.Extras = value
	}
	if value, ok := tc.mutation.CreatedBy(); ok {
		_spec.SetField(transformer.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := tc.mutation.UpdatedBy(); ok {
		_spec.SetField(transformer.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := tc.mutation.CreatedAt(); ok {
		_spec.SetField(transformer.FieldCreatedAt, field.TypeInt64, value)
		_node.CreatedAt = value
	}
	if value, ok := tc.mutation.UpdatedAt(); ok {
		_spec.SetField(transformer.FieldUpdatedAt, field.TypeInt64, value)
		_node.UpdatedAt = value
	}
	if value, ok := tc.mutation.GetType(); ok {
		_spec.SetField(transformer.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := tc.mutation.Content(); ok {
		_spec.SetField(transformer.FieldContent, field.TypeString, value)
		_node.Content = value
	}
	if value, ok := tc.mutation.ContentType(); ok {
		_spec.SetField(transformer.FieldContentType, field.TypeString, value)
		_node.ContentType = value
	}
	return _node, _spec
}

// TransformerCreateBulk is the builder for creating many Transformer entities in bulk.
type TransformerCreateBulk struct {
	config
	err      error
	builders []*TransformerCreate
}

// Save creates the Transformer entities in the database.
func (tcb *TransformerCreateBulk) Save(ctx context.Context) ([]*Transformer, error) {
	if tcb.err != nil {
		return nil, tcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Transformer, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TransformerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TransformerCreateBulk) SaveX(ctx context.Context) []*Transformer {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TransformerCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TransformerCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}
