// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/proxy/data/ent/predicate"
	"ncobase/proxy/data/ent/transformer"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TransformerUpdate is the builder for updating Transformer entities.
type TransformerUpdate struct {
	config
	hooks    []Hook
	mutation *TransformerMutation
}

// Where appends a list predicates to the TransformerUpdate builder.
func (tu *TransformerUpdate) Where(ps ...predicate.Transformer) *TransformerUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetName sets the "name" field.
func (tu *TransformerUpdate) SetName(s string) *TransformerUpdate {
	tu.mutation.SetName(s)
	return tu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tu *TransformerUpdate) SetNillableName(s *string) *TransformerUpdate {
	if s != nil {
		tu.SetName(*s)
	}
	return tu
}

// ClearName clears the value of the "name" field.
func (tu *TransformerUpdate) ClearName() *TransformerUpdate {
	tu.mutation.ClearName()
	return tu
}

// SetDescription sets the "description" field.
func (tu *TransformerUpdate) SetDescription(s string) *TransformerUpdate {
	tu.mutation.SetDescription(s)
	return tu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tu *TransformerUpdate) SetNillableDescription(s *string) *TransformerUpdate {
	if s != nil {
		tu.SetDescription(*s)
	}
	return tu
}

// ClearDescription clears the value of the "description" field.
func (tu *TransformerUpdate) ClearDescription() *TransformerUpdate {
	tu.mutation.ClearDescription()
	return tu
}

// SetDisabled sets the "disabled" field.
func (tu *TransformerUpdate) SetDisabled(b bool) *TransformerUpdate {
	tu.mutation.SetDisabled(b)
	return tu
}

// SetNillableDisabled sets the "disabled" field if the given value is not nil.
func (tu *TransformerUpdate) SetNillableDisabled(b *bool) *TransformerUpdate {
	if b != nil {
		tu.SetDisabled(*b)
	}
	return tu
}

// ClearDisabled clears the value of the "disabled" field.
func (tu *TransformerUpdate) ClearDisabled() *TransformerUpdate {
	tu.mutation.ClearDisabled()
	return tu
}

// SetExtras sets the "extras" field.
func (tu *TransformerUpdate) SetExtras(m map[string]interface{}) *TransformerUpdate {
	tu.mutation.SetExtras(m)
	return tu
}

// ClearExtras clears the value of the "extras" field.
func (tu *TransformerUpdate) ClearExtras() *TransformerUpdate {
	tu.mutation.ClearExtras()
	return tu
}

// SetCreatedBy sets the "created_by" field.
func (tu *TransformerUpdate) SetCreatedBy(s string) *TransformerUpdate {
	tu.mutation.SetCreatedBy(s)
	return tu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (tu *TransformerUpdate) SetNillableCreatedBy(s *string) *TransformerUpdate {
	if s != nil {
		tu.SetCreatedBy(*s)
	}
	return tu
}

// ClearCreatedBy clears the value of the "created_by" field.
func (tu *TransformerUpdate) ClearCreatedBy() *TransformerUpdate {
	tu.mutation.ClearCreatedBy()
	return tu
}

// SetUpdatedBy sets the "updated_by" field.
func (tu *TransformerUpdate) SetUpdatedBy(s string) *TransformerUpdate {
	tu.mutation.SetUpdatedBy(s)
	return tu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (tu *TransformerUpdate) SetNillableUpdatedBy(s *string) *TransformerUpdate {
	if s != nil {
		tu.SetUpdatedBy(*s)
	}
	return tu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (tu *TransformerUpdate) ClearUpdatedBy() *TransformerUpdate {
	tu.mutation.ClearUpdatedBy()
	return tu
}

// SetUpdatedAt sets the "updated_at" field.
func (tu *TransformerUpdate) SetUpdatedAt(i int64) *TransformerUpdate {
	tu.mutation.ResetUpdatedAt()
	tu.mutation.SetUpdatedAt(i)
	return tu
}

// AddUpdatedAt adds i to the "updated_at" field.
func (tu *TransformerUpdate) AddUpdatedAt(i int64) *TransformerUpdate {
	tu.mutation.AddUpdatedAt(i)
	return tu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tu *TransformerUpdate) ClearUpdatedAt() *TransformerUpdate {
	tu.mutation.ClearUpdatedAt()
	return tu
}

// SetType sets the "type" field.
func (tu *TransformerUpdate) SetType(s string) *TransformerUpdate {
	tu.mutation.SetType(s)
	return tu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (tu *TransformerUpdate) SetNillableType(s *string) *TransformerUpdate {
	if s != nil {
		tu.SetType(*s)
	}
	return tu
}

// SetContent sets the "content" field.
func (tu *TransformerUpdate) SetContent(s string) *TransformerUpdate {
	tu.mutation.SetContent(s)
	return tu
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (tu *TransformerUpdate) SetNillableContent(s *string) *TransformerUpdate {
	if s != nil {
		tu.SetContent(*s)
	}
	return tu
}

// SetContentType sets the "content_type" field.
func (tu *TransformerUpdate) SetContentType(s string) *TransformerUpdate {
	tu.mutation.SetContentType(s)
	return tu
}

// SetNillableContentType sets the "content_type" field if the given value is not nil.
func (tu *TransformerUpdate) SetNillableContentType(s *string) *TransformerUpdate {
	if s != nil {
		tu.SetContentType(*s)
	}
	return tu
}

// Mutation returns the TransformerMutation object of the builder.
func (tu *TransformerUpdate) Mutation() *TransformerMutation {
	return tu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TransformerUpdate) Save(ctx context.Context) (int, error) {
	tu.defaults()
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TransformerUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TransformerUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TransformerUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tu *TransformerUpdate) defaults() {
	if _, ok := tu.mutation.UpdatedAt(); !ok && !tu.mutation.UpdatedAtCleared() {
		v := transformer.UpdateDefaultUpdatedAt()
		tu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *TransformerUpdate) check() error {
	if v, ok := tu.mutation.GetType(); ok {
		if err := transformer.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Transformer.type": %w`, err)}
		}
	}
	if v, ok := tu.mutation.Content(); ok {
		if err := transformer.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "Transformer.content": %w`, err)}
		}
	}
	return nil
}

func (tu *TransformerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(transformer.Table, transformer.Columns, sqlgraph.NewFieldSpec(transformer.FieldID, field.TypeString))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.Name(); ok {
		_spec.SetField(transformer.FieldName, field.TypeString, value)
	}
	if tu.mutation.NameCleared() {
		_spec.ClearField(transformer.FieldName, field.TypeString)
	}
	if value, ok := tu.mutation.Description(); ok {
		_spec.SetField(transformer.FieldDescription, field.TypeString, value)
	}
	if tu.mutation.DescriptionCleared() {
		_spec.ClearField(transformer.FieldDescription, field.TypeString)
	}
	if value, ok := tu.mutation.Disabled(); ok {
		_spec.SetField(transformer.FieldDisabled, field.TypeBool, value)
	}
	if tu.mutation.DisabledCleared() {
		_spec.ClearField(transformer.FieldDisabled, field.TypeBool)
	}
	if value, ok := tu.mutation.Extras(); ok {
		_spec.SetField(transformer.FieldExtras, field.TypeJSON, value)
	}
	if tu.mutation.ExtrasCleared() {
		_spec.ClearField(transformer.FieldExtras, field.TypeJSON)
	}
	if value, ok := tu.mutation.CreatedBy(); ok {
		_spec.SetField(transformer.FieldCreatedBy, field.TypeString, value)
	}
	if tu.mutation.CreatedByCleared() {
		_spec.ClearField(transformer.FieldCreatedBy, field.TypeString)
	}
	if value, ok := tu.mutation.UpdatedBy(); ok {
		_spec.SetField(transformer.FieldUpdatedBy, field.TypeString, value)
	}
	if tu.mutation.UpdatedByCleared() {
		_spec.ClearField(transformer.FieldUpdatedBy, field.TypeString)
	}
	if tu.mutation.CreatedAtCleared() {
		_spec.ClearField(transformer.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := tu.mutation.UpdatedAt(); ok {
		_spec.SetField(transformer.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := tu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(transformer.FieldUpdatedAt, field.TypeInt64, value)
	}
	if tu.mutation.UpdatedAtCleared() {
		_spec.ClearField(transformer.FieldUpdatedAt, field.TypeInt64)
	}
	if value, ok := tu.mutation.GetType(); ok {
		_spec.SetField(transformer.FieldType, field.TypeString, value)
	}
	if value, ok := tu.mutation.Content(); ok {
		_spec.SetField(transformer.FieldContent, field.TypeString, value)
	}
	if value, ok := tu.mutation.ContentType(); ok {
		_spec.SetField(transformer.FieldContentType, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{transformer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TransformerUpdateOne is the builder for updating a single Transformer entity.
type TransformerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TransformerMutation
}

// SetName sets the "name" field.
func (tuo *TransformerUpdateOne) SetName(s string) *TransformerUpdateOne {
	tuo.mutation.SetName(s)
	return tuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tuo *TransformerUpdateOne) SetNillableName(s *string) *TransformerUpdateOne {
	if s != nil {
		tuo.SetName(*s)
	}
	return tuo
}

// ClearName clears the value of the "name" field.
func (tuo *TransformerUpdateOne) ClearName() *TransformerUpdateOne {
	tuo.mutation.ClearName()
	return tuo
}

// SetDescription sets the "description" field.
func (tuo *TransformerUpdateOne) SetDescription(s string) *TransformerUpdateOne {
	tuo.mutation.SetDescription(s)
	return tuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tuo *TransformerUpdateOne) SetNillableDescription(s *string) *TransformerUpdateOne {
	if s != nil {
		tuo.SetDescription(*s)
	}
	return tuo
}

// ClearDescription clears the value of the "description" field.
func (tuo *TransformerUpdateOne) ClearDescription() *TransformerUpdateOne {
	tuo.mutation.ClearDescription()
	return tuo
}

// SetDisabled sets the "disabled" field.
func (tuo *TransformerUpdateOne) SetDisabled(b bool) *TransformerUpdateOne {
	tuo.mutation.SetDisabled(b)
	return tuo
}

// SetNillableDisabled sets the "disabled" field if the given value is not nil.
func (tuo *TransformerUpdateOne) SetNillableDisabled(b *bool) *TransformerUpdateOne {
	if b != nil {
		tuo.SetDisabled(*b)
	}
	return tuo
}

// ClearDisabled clears the value of the "disabled" field.
func (tuo *TransformerUpdateOne) ClearDisabled() *TransformerUpdateOne {
	tuo.mutation.ClearDisabled()
	return tuo
}

// SetExtras sets the "extras" field.
func (tuo *TransformerUpdateOne) SetExtras(m map[string]interface{}) *TransformerUpdateOne {
	tuo.mutation.SetExtras(m)
	return tuo
}

// ClearExtras clears the value of the "extras" field.
func (tuo *TransformerUpdateOne) ClearExtras() *TransformerUpdateOne {
	tuo.mutation.ClearExtras()
	return tuo
}

// SetCreatedBy sets the "created_by" field.
func (tuo *TransformerUpdateOne) SetCreatedBy(s string) *TransformerUpdateOne {
	tuo.mutation.SetCreatedBy(s)
	return tuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (tuo *TransformerUpdateOne) SetNillableCreatedBy(s *string) *TransformerUpdateOne {
	if s != nil {
		tuo.SetCreatedBy(*s)
	}
	return tuo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (tuo *TransformerUpdateOne) ClearCreatedBy() *TransformerUpdateOne {
	tuo.mutation.ClearCreatedBy()
	return tuo
}

// SetUpdatedBy sets the "updated_by" field.
func (tuo *TransformerUpdateOne) SetUpdatedBy(s string) *TransformerUpdateOne {
	tuo.mutation.SetUpdatedBy(s)
	return tuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (tuo *TransformerUpdateOne) SetNillableUpdatedBy(s *string) *TransformerUpdateOne {
	if s != nil {
		tuo.SetUpdatedBy(*s)
	}
	return tuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (tuo *TransformerUpdateOne) ClearUpdatedBy() *TransformerUpdateOne {
	tuo.mutation.ClearUpdatedBy()
	return tuo
}

// SetUpdatedAt sets the "updated_at" field.
func (tuo *TransformerUpdateOne) SetUpdatedAt(i int64) *TransformerUpdateOne {
	tuo.mutation.ResetUpdatedAt()
	tuo.mutation.SetUpdatedAt(i)
	return tuo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (tuo *TransformerUpdateOne) AddUpdatedAt(i int64) *TransformerUpdateOne {
	tuo.mutation.AddUpdatedAt(i)
	return tuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tuo *TransformerUpdateOne) ClearUpdatedAt() *TransformerUpdateOne {
	tuo.mutation.ClearUpdatedAt()
	return tuo
}

// SetType sets the "type" field.
func (tuo *TransformerUpdateOne) SetType(s string) *TransformerUpdateOne {
	tuo.mutation.SetType(s)
	return tuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (tuo *TransformerUpdateOne) SetNillableType(s *string) *TransformerUpdateOne {
	if s != nil {
		tuo.SetType(*s)
	}
	return tuo
}

// SetContent sets the "content" field.
func (tuo *TransformerUpdateOne) SetContent(s string) *TransformerUpdateOne {
	tuo.mutation.SetContent(s)
	return tuo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (tuo *TransformerUpdateOne) SetNillableContent(s *string) *TransformerUpdateOne {
	if s != nil {
		tuo.SetContent(*s)
	}
	return tuo
}

// SetContentType sets the "content_type" field.
func (tuo *TransformerUpdateOne) SetContentType(s string) *TransformerUpdateOne {
	tuo.mutation.SetContentType(s)
	return tuo
}

// SetNillableContentType sets the "content_type" field if the given value is not nil.
func (tuo *TransformerUpdateOne) SetNillableContentType(s *string) *TransformerUpdateOne {
	if s != nil {
		tuo.SetContentType(*s)
	}
	return tuo
}

// Mutation returns the TransformerMutation object of the builder.
func (tuo *TransformerUpdateOne) Mutation() *TransformerMutation {
	return tuo.mutation
}

// Where appends a list predicates to the TransformerUpdate builder.
func (tuo *TransformerUpdateOne) Where(ps ...predicate.Transformer) *TransformerUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TransformerUpdateOne) Select(field string, fields ...string) *TransformerUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Transformer entity.
func (tuo *TransformerUpdateOne) Save(ctx context.Context) (*Transformer, error) {
	tuo.defaults()
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TransformerUpdateOne) SaveX(ctx context.Context) *Transformer {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TransformerUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TransformerUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tuo *TransformerUpdateOne) defaults() {
	if _, ok := tuo.mutation.UpdatedAt(); !ok && !tuo.mutation.UpdatedAtCleared() {
		v := transformer.UpdateDefaultUpdatedAt()
		tuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TransformerUpdateOne) check() error {
	if v, ok := tuo.mutation.GetType(); ok {
		if err := transformer.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Transformer.type": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.Content(); ok {
		if err := transformer.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "Transformer.content": %w`, err)}
		}
	}
	return nil
}

func (tuo *TransformerUpdateOne) sqlSave(ctx context.Context) (_node *Transformer, err error) {
	if err := tuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(transformer.Table, transformer.Columns, sqlgraph.NewFieldSpec(transformer.FieldID, field.TypeString))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Transformer.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, transformer.FieldID)
		for _, f := range fields {
			if !transformer.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != transformer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.Name(); ok {
		_spec.SetField(transformer.FieldName, field.TypeString, value)
	}
	if tuo.mutation.NameCleared() {
		_spec.ClearField(transformer.FieldName, field.TypeString)
	}
	if value, ok := tuo.mutation.Description(); ok {
		_spec.SetField(transformer.FieldDescription, field.TypeString, value)
	}
	if tuo.mutation.DescriptionCleared() {
		_spec.ClearField(transformer.FieldDescription, field.TypeString)
	}
	if value, ok := tuo.mutation.Disabled(); ok {
		_spec.SetField(transformer.FieldDisabled, field.TypeBool, value)
	}
	if tuo.mutation.DisabledCleared() {
		_spec.ClearField(transformer.FieldDisabled, field.TypeBool)
	}
	if value, ok := tuo.mutation.Extras(); ok {
		_spec.SetField(transformer.FieldExtras, field.TypeJSON, value)
	}
	if tuo.mutation.ExtrasCleared() {
		_spec.ClearField(transformer.FieldExtras, field.TypeJSON)
	}
	if value, ok := tuo.mutation.CreatedBy(); ok {
		_spec.SetField(transformer.FieldCreatedBy, field.TypeString, value)
	}
	if tuo.mutation.CreatedByCleared() {
		_spec.ClearField(transformer.FieldCreatedBy, field.TypeString)
	}
	if value, ok := tuo.mutation.UpdatedBy(); ok {
		_spec.SetField(transformer.FieldUpdatedBy, field.TypeString, value)
	}
	if tuo.mutation.UpdatedByCleared() {
		_spec.ClearField(transformer.FieldUpdatedBy, field.TypeString)
	}
	if tuo.mutation.CreatedAtCleared() {
		_spec.ClearField(transformer.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := tuo.mutation.UpdatedAt(); ok {
		_spec.SetField(transformer.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := tuo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(transformer.FieldUpdatedAt, field.TypeInt64, value)
	}
	if tuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(transformer.FieldUpdatedAt, field.TypeInt64)
	}
	if value, ok := tuo.mutation.GetType(); ok {
		_spec.SetField(transformer.FieldType, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Content(); ok {
		_spec.SetField(transformer.FieldContent, field.TypeString, value)
	}
	if value, ok := tuo.mutation.ContentType(); ok {
		_spec.SetField(transformer.FieldContentType, field.TypeString, value)
	}
	_node = &Transformer{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{transformer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
