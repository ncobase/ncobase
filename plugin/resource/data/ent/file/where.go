// Code generated by ent, DO NOT EDIT.

package file

import (
	"ncobase/resource/data/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.File {
	return predicate.File(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.File {
	return predicate.File(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.File {
	return predicate.File(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.File {
	return predicate.File(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.File {
	return predicate.File(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.File {
	return predicate.File(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.File {
	return predicate.File(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.File {
	return predicate.File(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.File {
	return predicate.File(sql.FieldContainsFold(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldName, v))
}

// Path applies equality check predicate on the "path" field. It's identical to PathEQ.
func Path(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldPath, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldType, v))
}

// Size applies equality check predicate on the "size" field. It's identical to SizeEQ.
func Size(v int) predicate.File {
	return predicate.File(sql.FieldEQ(FieldSize, v))
}

// Storage applies equality check predicate on the "storage" field. It's identical to StorageEQ.
func Storage(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldStorage, v))
}

// Bucket applies equality check predicate on the "bucket" field. It's identical to BucketEQ.
func Bucket(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldBucket, v))
}

// Endpoint applies equality check predicate on the "endpoint" field. It's identical to EndpointEQ.
func Endpoint(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldEndpoint, v))
}

// OwnerID applies equality check predicate on the "owner_id" field. It's identical to OwnerIDEQ.
func OwnerID(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldOwnerID, v))
}

// SpaceID applies equality check predicate on the "space_id" field. It's identical to SpaceIDEQ.
func SpaceID(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldSpaceID, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldCreatedBy, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldUpdatedBy, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v int64) predicate.File {
	return predicate.File(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v int64) predicate.File {
	return predicate.File(sql.FieldEQ(FieldUpdatedAt, v))
}

// FolderPath applies equality check predicate on the "folder_path" field. It's identical to FolderPathEQ.
func FolderPath(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldFolderPath, v))
}

// AccessLevel applies equality check predicate on the "access_level" field. It's identical to AccessLevelEQ.
func AccessLevel(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldAccessLevel, v))
}

// ExpiresAt applies equality check predicate on the "expires_at" field. It's identical to ExpiresAtEQ.
func ExpiresAt(v int64) predicate.File {
	return predicate.File(sql.FieldEQ(FieldExpiresAt, v))
}

// IsPublic applies equality check predicate on the "is_public" field. It's identical to IsPublicEQ.
func IsPublic(v bool) predicate.File {
	return predicate.File(sql.FieldEQ(FieldIsPublic, v))
}

// Category applies equality check predicate on the "category" field. It's identical to CategoryEQ.
func Category(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldCategory, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.File {
	return predicate.File(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.File {
	return predicate.File(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.File {
	return predicate.File(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.File {
	return predicate.File(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.File {
	return predicate.File(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.File {
	return predicate.File(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.File {
	return predicate.File(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.File {
	return predicate.File(sql.FieldHasSuffix(FieldName, v))
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.File {
	return predicate.File(sql.FieldIsNull(FieldName))
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.File {
	return predicate.File(sql.FieldNotNull(FieldName))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.File {
	return predicate.File(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.File {
	return predicate.File(sql.FieldContainsFold(FieldName, v))
}

// PathEQ applies the EQ predicate on the "path" field.
func PathEQ(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldPath, v))
}

// PathNEQ applies the NEQ predicate on the "path" field.
func PathNEQ(v string) predicate.File {
	return predicate.File(sql.FieldNEQ(FieldPath, v))
}

// PathIn applies the In predicate on the "path" field.
func PathIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldIn(FieldPath, vs...))
}

// PathNotIn applies the NotIn predicate on the "path" field.
func PathNotIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldNotIn(FieldPath, vs...))
}

// PathGT applies the GT predicate on the "path" field.
func PathGT(v string) predicate.File {
	return predicate.File(sql.FieldGT(FieldPath, v))
}

// PathGTE applies the GTE predicate on the "path" field.
func PathGTE(v string) predicate.File {
	return predicate.File(sql.FieldGTE(FieldPath, v))
}

// PathLT applies the LT predicate on the "path" field.
func PathLT(v string) predicate.File {
	return predicate.File(sql.FieldLT(FieldPath, v))
}

// PathLTE applies the LTE predicate on the "path" field.
func PathLTE(v string) predicate.File {
	return predicate.File(sql.FieldLTE(FieldPath, v))
}

// PathContains applies the Contains predicate on the "path" field.
func PathContains(v string) predicate.File {
	return predicate.File(sql.FieldContains(FieldPath, v))
}

// PathHasPrefix applies the HasPrefix predicate on the "path" field.
func PathHasPrefix(v string) predicate.File {
	return predicate.File(sql.FieldHasPrefix(FieldPath, v))
}

// PathHasSuffix applies the HasSuffix predicate on the "path" field.
func PathHasSuffix(v string) predicate.File {
	return predicate.File(sql.FieldHasSuffix(FieldPath, v))
}

// PathIsNil applies the IsNil predicate on the "path" field.
func PathIsNil() predicate.File {
	return predicate.File(sql.FieldIsNull(FieldPath))
}

// PathNotNil applies the NotNil predicate on the "path" field.
func PathNotNil() predicate.File {
	return predicate.File(sql.FieldNotNull(FieldPath))
}

// PathEqualFold applies the EqualFold predicate on the "path" field.
func PathEqualFold(v string) predicate.File {
	return predicate.File(sql.FieldEqualFold(FieldPath, v))
}

// PathContainsFold applies the ContainsFold predicate on the "path" field.
func PathContainsFold(v string) predicate.File {
	return predicate.File(sql.FieldContainsFold(FieldPath, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.File {
	return predicate.File(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.File {
	return predicate.File(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.File {
	return predicate.File(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.File {
	return predicate.File(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.File {
	return predicate.File(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.File {
	return predicate.File(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.File {
	return predicate.File(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.File {
	return predicate.File(sql.FieldHasSuffix(FieldType, v))
}

// TypeIsNil applies the IsNil predicate on the "type" field.
func TypeIsNil() predicate.File {
	return predicate.File(sql.FieldIsNull(FieldType))
}

// TypeNotNil applies the NotNil predicate on the "type" field.
func TypeNotNil() predicate.File {
	return predicate.File(sql.FieldNotNull(FieldType))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.File {
	return predicate.File(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.File {
	return predicate.File(sql.FieldContainsFold(FieldType, v))
}

// SizeEQ applies the EQ predicate on the "size" field.
func SizeEQ(v int) predicate.File {
	return predicate.File(sql.FieldEQ(FieldSize, v))
}

// SizeNEQ applies the NEQ predicate on the "size" field.
func SizeNEQ(v int) predicate.File {
	return predicate.File(sql.FieldNEQ(FieldSize, v))
}

// SizeIn applies the In predicate on the "size" field.
func SizeIn(vs ...int) predicate.File {
	return predicate.File(sql.FieldIn(FieldSize, vs...))
}

// SizeNotIn applies the NotIn predicate on the "size" field.
func SizeNotIn(vs ...int) predicate.File {
	return predicate.File(sql.FieldNotIn(FieldSize, vs...))
}

// SizeGT applies the GT predicate on the "size" field.
func SizeGT(v int) predicate.File {
	return predicate.File(sql.FieldGT(FieldSize, v))
}

// SizeGTE applies the GTE predicate on the "size" field.
func SizeGTE(v int) predicate.File {
	return predicate.File(sql.FieldGTE(FieldSize, v))
}

// SizeLT applies the LT predicate on the "size" field.
func SizeLT(v int) predicate.File {
	return predicate.File(sql.FieldLT(FieldSize, v))
}

// SizeLTE applies the LTE predicate on the "size" field.
func SizeLTE(v int) predicate.File {
	return predicate.File(sql.FieldLTE(FieldSize, v))
}

// StorageEQ applies the EQ predicate on the "storage" field.
func StorageEQ(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldStorage, v))
}

// StorageNEQ applies the NEQ predicate on the "storage" field.
func StorageNEQ(v string) predicate.File {
	return predicate.File(sql.FieldNEQ(FieldStorage, v))
}

// StorageIn applies the In predicate on the "storage" field.
func StorageIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldIn(FieldStorage, vs...))
}

// StorageNotIn applies the NotIn predicate on the "storage" field.
func StorageNotIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldNotIn(FieldStorage, vs...))
}

// StorageGT applies the GT predicate on the "storage" field.
func StorageGT(v string) predicate.File {
	return predicate.File(sql.FieldGT(FieldStorage, v))
}

// StorageGTE applies the GTE predicate on the "storage" field.
func StorageGTE(v string) predicate.File {
	return predicate.File(sql.FieldGTE(FieldStorage, v))
}

// StorageLT applies the LT predicate on the "storage" field.
func StorageLT(v string) predicate.File {
	return predicate.File(sql.FieldLT(FieldStorage, v))
}

// StorageLTE applies the LTE predicate on the "storage" field.
func StorageLTE(v string) predicate.File {
	return predicate.File(sql.FieldLTE(FieldStorage, v))
}

// StorageContains applies the Contains predicate on the "storage" field.
func StorageContains(v string) predicate.File {
	return predicate.File(sql.FieldContains(FieldStorage, v))
}

// StorageHasPrefix applies the HasPrefix predicate on the "storage" field.
func StorageHasPrefix(v string) predicate.File {
	return predicate.File(sql.FieldHasPrefix(FieldStorage, v))
}

// StorageHasSuffix applies the HasSuffix predicate on the "storage" field.
func StorageHasSuffix(v string) predicate.File {
	return predicate.File(sql.FieldHasSuffix(FieldStorage, v))
}

// StorageIsNil applies the IsNil predicate on the "storage" field.
func StorageIsNil() predicate.File {
	return predicate.File(sql.FieldIsNull(FieldStorage))
}

// StorageNotNil applies the NotNil predicate on the "storage" field.
func StorageNotNil() predicate.File {
	return predicate.File(sql.FieldNotNull(FieldStorage))
}

// StorageEqualFold applies the EqualFold predicate on the "storage" field.
func StorageEqualFold(v string) predicate.File {
	return predicate.File(sql.FieldEqualFold(FieldStorage, v))
}

// StorageContainsFold applies the ContainsFold predicate on the "storage" field.
func StorageContainsFold(v string) predicate.File {
	return predicate.File(sql.FieldContainsFold(FieldStorage, v))
}

// BucketEQ applies the EQ predicate on the "bucket" field.
func BucketEQ(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldBucket, v))
}

// BucketNEQ applies the NEQ predicate on the "bucket" field.
func BucketNEQ(v string) predicate.File {
	return predicate.File(sql.FieldNEQ(FieldBucket, v))
}

// BucketIn applies the In predicate on the "bucket" field.
func BucketIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldIn(FieldBucket, vs...))
}

// BucketNotIn applies the NotIn predicate on the "bucket" field.
func BucketNotIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldNotIn(FieldBucket, vs...))
}

// BucketGT applies the GT predicate on the "bucket" field.
func BucketGT(v string) predicate.File {
	return predicate.File(sql.FieldGT(FieldBucket, v))
}

// BucketGTE applies the GTE predicate on the "bucket" field.
func BucketGTE(v string) predicate.File {
	return predicate.File(sql.FieldGTE(FieldBucket, v))
}

// BucketLT applies the LT predicate on the "bucket" field.
func BucketLT(v string) predicate.File {
	return predicate.File(sql.FieldLT(FieldBucket, v))
}

// BucketLTE applies the LTE predicate on the "bucket" field.
func BucketLTE(v string) predicate.File {
	return predicate.File(sql.FieldLTE(FieldBucket, v))
}

// BucketContains applies the Contains predicate on the "bucket" field.
func BucketContains(v string) predicate.File {
	return predicate.File(sql.FieldContains(FieldBucket, v))
}

// BucketHasPrefix applies the HasPrefix predicate on the "bucket" field.
func BucketHasPrefix(v string) predicate.File {
	return predicate.File(sql.FieldHasPrefix(FieldBucket, v))
}

// BucketHasSuffix applies the HasSuffix predicate on the "bucket" field.
func BucketHasSuffix(v string) predicate.File {
	return predicate.File(sql.FieldHasSuffix(FieldBucket, v))
}

// BucketIsNil applies the IsNil predicate on the "bucket" field.
func BucketIsNil() predicate.File {
	return predicate.File(sql.FieldIsNull(FieldBucket))
}

// BucketNotNil applies the NotNil predicate on the "bucket" field.
func BucketNotNil() predicate.File {
	return predicate.File(sql.FieldNotNull(FieldBucket))
}

// BucketEqualFold applies the EqualFold predicate on the "bucket" field.
func BucketEqualFold(v string) predicate.File {
	return predicate.File(sql.FieldEqualFold(FieldBucket, v))
}

// BucketContainsFold applies the ContainsFold predicate on the "bucket" field.
func BucketContainsFold(v string) predicate.File {
	return predicate.File(sql.FieldContainsFold(FieldBucket, v))
}

// EndpointEQ applies the EQ predicate on the "endpoint" field.
func EndpointEQ(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldEndpoint, v))
}

// EndpointNEQ applies the NEQ predicate on the "endpoint" field.
func EndpointNEQ(v string) predicate.File {
	return predicate.File(sql.FieldNEQ(FieldEndpoint, v))
}

// EndpointIn applies the In predicate on the "endpoint" field.
func EndpointIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldIn(FieldEndpoint, vs...))
}

// EndpointNotIn applies the NotIn predicate on the "endpoint" field.
func EndpointNotIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldNotIn(FieldEndpoint, vs...))
}

// EndpointGT applies the GT predicate on the "endpoint" field.
func EndpointGT(v string) predicate.File {
	return predicate.File(sql.FieldGT(FieldEndpoint, v))
}

// EndpointGTE applies the GTE predicate on the "endpoint" field.
func EndpointGTE(v string) predicate.File {
	return predicate.File(sql.FieldGTE(FieldEndpoint, v))
}

// EndpointLT applies the LT predicate on the "endpoint" field.
func EndpointLT(v string) predicate.File {
	return predicate.File(sql.FieldLT(FieldEndpoint, v))
}

// EndpointLTE applies the LTE predicate on the "endpoint" field.
func EndpointLTE(v string) predicate.File {
	return predicate.File(sql.FieldLTE(FieldEndpoint, v))
}

// EndpointContains applies the Contains predicate on the "endpoint" field.
func EndpointContains(v string) predicate.File {
	return predicate.File(sql.FieldContains(FieldEndpoint, v))
}

// EndpointHasPrefix applies the HasPrefix predicate on the "endpoint" field.
func EndpointHasPrefix(v string) predicate.File {
	return predicate.File(sql.FieldHasPrefix(FieldEndpoint, v))
}

// EndpointHasSuffix applies the HasSuffix predicate on the "endpoint" field.
func EndpointHasSuffix(v string) predicate.File {
	return predicate.File(sql.FieldHasSuffix(FieldEndpoint, v))
}

// EndpointIsNil applies the IsNil predicate on the "endpoint" field.
func EndpointIsNil() predicate.File {
	return predicate.File(sql.FieldIsNull(FieldEndpoint))
}

// EndpointNotNil applies the NotNil predicate on the "endpoint" field.
func EndpointNotNil() predicate.File {
	return predicate.File(sql.FieldNotNull(FieldEndpoint))
}

// EndpointEqualFold applies the EqualFold predicate on the "endpoint" field.
func EndpointEqualFold(v string) predicate.File {
	return predicate.File(sql.FieldEqualFold(FieldEndpoint, v))
}

// EndpointContainsFold applies the ContainsFold predicate on the "endpoint" field.
func EndpointContainsFold(v string) predicate.File {
	return predicate.File(sql.FieldContainsFold(FieldEndpoint, v))
}

// OwnerIDEQ applies the EQ predicate on the "owner_id" field.
func OwnerIDEQ(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldOwnerID, v))
}

// OwnerIDNEQ applies the NEQ predicate on the "owner_id" field.
func OwnerIDNEQ(v string) predicate.File {
	return predicate.File(sql.FieldNEQ(FieldOwnerID, v))
}

// OwnerIDIn applies the In predicate on the "owner_id" field.
func OwnerIDIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldIn(FieldOwnerID, vs...))
}

// OwnerIDNotIn applies the NotIn predicate on the "owner_id" field.
func OwnerIDNotIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldNotIn(FieldOwnerID, vs...))
}

// OwnerIDGT applies the GT predicate on the "owner_id" field.
func OwnerIDGT(v string) predicate.File {
	return predicate.File(sql.FieldGT(FieldOwnerID, v))
}

// OwnerIDGTE applies the GTE predicate on the "owner_id" field.
func OwnerIDGTE(v string) predicate.File {
	return predicate.File(sql.FieldGTE(FieldOwnerID, v))
}

// OwnerIDLT applies the LT predicate on the "owner_id" field.
func OwnerIDLT(v string) predicate.File {
	return predicate.File(sql.FieldLT(FieldOwnerID, v))
}

// OwnerIDLTE applies the LTE predicate on the "owner_id" field.
func OwnerIDLTE(v string) predicate.File {
	return predicate.File(sql.FieldLTE(FieldOwnerID, v))
}

// OwnerIDContains applies the Contains predicate on the "owner_id" field.
func OwnerIDContains(v string) predicate.File {
	return predicate.File(sql.FieldContains(FieldOwnerID, v))
}

// OwnerIDHasPrefix applies the HasPrefix predicate on the "owner_id" field.
func OwnerIDHasPrefix(v string) predicate.File {
	return predicate.File(sql.FieldHasPrefix(FieldOwnerID, v))
}

// OwnerIDHasSuffix applies the HasSuffix predicate on the "owner_id" field.
func OwnerIDHasSuffix(v string) predicate.File {
	return predicate.File(sql.FieldHasSuffix(FieldOwnerID, v))
}

// OwnerIDIsNil applies the IsNil predicate on the "owner_id" field.
func OwnerIDIsNil() predicate.File {
	return predicate.File(sql.FieldIsNull(FieldOwnerID))
}

// OwnerIDNotNil applies the NotNil predicate on the "owner_id" field.
func OwnerIDNotNil() predicate.File {
	return predicate.File(sql.FieldNotNull(FieldOwnerID))
}

// OwnerIDEqualFold applies the EqualFold predicate on the "owner_id" field.
func OwnerIDEqualFold(v string) predicate.File {
	return predicate.File(sql.FieldEqualFold(FieldOwnerID, v))
}

// OwnerIDContainsFold applies the ContainsFold predicate on the "owner_id" field.
func OwnerIDContainsFold(v string) predicate.File {
	return predicate.File(sql.FieldContainsFold(FieldOwnerID, v))
}

// SpaceIDEQ applies the EQ predicate on the "space_id" field.
func SpaceIDEQ(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldSpaceID, v))
}

// SpaceIDNEQ applies the NEQ predicate on the "space_id" field.
func SpaceIDNEQ(v string) predicate.File {
	return predicate.File(sql.FieldNEQ(FieldSpaceID, v))
}

// SpaceIDIn applies the In predicate on the "space_id" field.
func SpaceIDIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldIn(FieldSpaceID, vs...))
}

// SpaceIDNotIn applies the NotIn predicate on the "space_id" field.
func SpaceIDNotIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldNotIn(FieldSpaceID, vs...))
}

// SpaceIDGT applies the GT predicate on the "space_id" field.
func SpaceIDGT(v string) predicate.File {
	return predicate.File(sql.FieldGT(FieldSpaceID, v))
}

// SpaceIDGTE applies the GTE predicate on the "space_id" field.
func SpaceIDGTE(v string) predicate.File {
	return predicate.File(sql.FieldGTE(FieldSpaceID, v))
}

// SpaceIDLT applies the LT predicate on the "space_id" field.
func SpaceIDLT(v string) predicate.File {
	return predicate.File(sql.FieldLT(FieldSpaceID, v))
}

// SpaceIDLTE applies the LTE predicate on the "space_id" field.
func SpaceIDLTE(v string) predicate.File {
	return predicate.File(sql.FieldLTE(FieldSpaceID, v))
}

// SpaceIDContains applies the Contains predicate on the "space_id" field.
func SpaceIDContains(v string) predicate.File {
	return predicate.File(sql.FieldContains(FieldSpaceID, v))
}

// SpaceIDHasPrefix applies the HasPrefix predicate on the "space_id" field.
func SpaceIDHasPrefix(v string) predicate.File {
	return predicate.File(sql.FieldHasPrefix(FieldSpaceID, v))
}

// SpaceIDHasSuffix applies the HasSuffix predicate on the "space_id" field.
func SpaceIDHasSuffix(v string) predicate.File {
	return predicate.File(sql.FieldHasSuffix(FieldSpaceID, v))
}

// SpaceIDIsNil applies the IsNil predicate on the "space_id" field.
func SpaceIDIsNil() predicate.File {
	return predicate.File(sql.FieldIsNull(FieldSpaceID))
}

// SpaceIDNotNil applies the NotNil predicate on the "space_id" field.
func SpaceIDNotNil() predicate.File {
	return predicate.File(sql.FieldNotNull(FieldSpaceID))
}

// SpaceIDEqualFold applies the EqualFold predicate on the "space_id" field.
func SpaceIDEqualFold(v string) predicate.File {
	return predicate.File(sql.FieldEqualFold(FieldSpaceID, v))
}

// SpaceIDContainsFold applies the ContainsFold predicate on the "space_id" field.
func SpaceIDContainsFold(v string) predicate.File {
	return predicate.File(sql.FieldContainsFold(FieldSpaceID, v))
}

// ExtrasIsNil applies the IsNil predicate on the "extras" field.
func ExtrasIsNil() predicate.File {
	return predicate.File(sql.FieldIsNull(FieldExtras))
}

// ExtrasNotNil applies the NotNil predicate on the "extras" field.
func ExtrasNotNil() predicate.File {
	return predicate.File(sql.FieldNotNull(FieldExtras))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v string) predicate.File {
	return predicate.File(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v string) predicate.File {
	return predicate.File(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v string) predicate.File {
	return predicate.File(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v string) predicate.File {
	return predicate.File(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v string) predicate.File {
	return predicate.File(sql.FieldLTE(FieldCreatedBy, v))
}

// CreatedByContains applies the Contains predicate on the "created_by" field.
func CreatedByContains(v string) predicate.File {
	return predicate.File(sql.FieldContains(FieldCreatedBy, v))
}

// CreatedByHasPrefix applies the HasPrefix predicate on the "created_by" field.
func CreatedByHasPrefix(v string) predicate.File {
	return predicate.File(sql.FieldHasPrefix(FieldCreatedBy, v))
}

// CreatedByHasSuffix applies the HasSuffix predicate on the "created_by" field.
func CreatedByHasSuffix(v string) predicate.File {
	return predicate.File(sql.FieldHasSuffix(FieldCreatedBy, v))
}

// CreatedByIsNil applies the IsNil predicate on the "created_by" field.
func CreatedByIsNil() predicate.File {
	return predicate.File(sql.FieldIsNull(FieldCreatedBy))
}

// CreatedByNotNil applies the NotNil predicate on the "created_by" field.
func CreatedByNotNil() predicate.File {
	return predicate.File(sql.FieldNotNull(FieldCreatedBy))
}

// CreatedByEqualFold applies the EqualFold predicate on the "created_by" field.
func CreatedByEqualFold(v string) predicate.File {
	return predicate.File(sql.FieldEqualFold(FieldCreatedBy, v))
}

// CreatedByContainsFold applies the ContainsFold predicate on the "created_by" field.
func CreatedByContainsFold(v string) predicate.File {
	return predicate.File(sql.FieldContainsFold(FieldCreatedBy, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v string) predicate.File {
	return predicate.File(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v string) predicate.File {
	return predicate.File(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v string) predicate.File {
	return predicate.File(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v string) predicate.File {
	return predicate.File(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v string) predicate.File {
	return predicate.File(sql.FieldLTE(FieldUpdatedBy, v))
}

// UpdatedByContains applies the Contains predicate on the "updated_by" field.
func UpdatedByContains(v string) predicate.File {
	return predicate.File(sql.FieldContains(FieldUpdatedBy, v))
}

// UpdatedByHasPrefix applies the HasPrefix predicate on the "updated_by" field.
func UpdatedByHasPrefix(v string) predicate.File {
	return predicate.File(sql.FieldHasPrefix(FieldUpdatedBy, v))
}

// UpdatedByHasSuffix applies the HasSuffix predicate on the "updated_by" field.
func UpdatedByHasSuffix(v string) predicate.File {
	return predicate.File(sql.FieldHasSuffix(FieldUpdatedBy, v))
}

// UpdatedByIsNil applies the IsNil predicate on the "updated_by" field.
func UpdatedByIsNil() predicate.File {
	return predicate.File(sql.FieldIsNull(FieldUpdatedBy))
}

// UpdatedByNotNil applies the NotNil predicate on the "updated_by" field.
func UpdatedByNotNil() predicate.File {
	return predicate.File(sql.FieldNotNull(FieldUpdatedBy))
}

// UpdatedByEqualFold applies the EqualFold predicate on the "updated_by" field.
func UpdatedByEqualFold(v string) predicate.File {
	return predicate.File(sql.FieldEqualFold(FieldUpdatedBy, v))
}

// UpdatedByContainsFold applies the ContainsFold predicate on the "updated_by" field.
func UpdatedByContainsFold(v string) predicate.File {
	return predicate.File(sql.FieldContainsFold(FieldUpdatedBy, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v int64) predicate.File {
	return predicate.File(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v int64) predicate.File {
	return predicate.File(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...int64) predicate.File {
	return predicate.File(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...int64) predicate.File {
	return predicate.File(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v int64) predicate.File {
	return predicate.File(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v int64) predicate.File {
	return predicate.File(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v int64) predicate.File {
	return predicate.File(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v int64) predicate.File {
	return predicate.File(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.File {
	return predicate.File(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.File {
	return predicate.File(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v int64) predicate.File {
	return predicate.File(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v int64) predicate.File {
	return predicate.File(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...int64) predicate.File {
	return predicate.File(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...int64) predicate.File {
	return predicate.File(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v int64) predicate.File {
	return predicate.File(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v int64) predicate.File {
	return predicate.File(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v int64) predicate.File {
	return predicate.File(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v int64) predicate.File {
	return predicate.File(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.File {
	return predicate.File(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.File {
	return predicate.File(sql.FieldNotNull(FieldUpdatedAt))
}

// FolderPathEQ applies the EQ predicate on the "folder_path" field.
func FolderPathEQ(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldFolderPath, v))
}

// FolderPathNEQ applies the NEQ predicate on the "folder_path" field.
func FolderPathNEQ(v string) predicate.File {
	return predicate.File(sql.FieldNEQ(FieldFolderPath, v))
}

// FolderPathIn applies the In predicate on the "folder_path" field.
func FolderPathIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldIn(FieldFolderPath, vs...))
}

// FolderPathNotIn applies the NotIn predicate on the "folder_path" field.
func FolderPathNotIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldNotIn(FieldFolderPath, vs...))
}

// FolderPathGT applies the GT predicate on the "folder_path" field.
func FolderPathGT(v string) predicate.File {
	return predicate.File(sql.FieldGT(FieldFolderPath, v))
}

// FolderPathGTE applies the GTE predicate on the "folder_path" field.
func FolderPathGTE(v string) predicate.File {
	return predicate.File(sql.FieldGTE(FieldFolderPath, v))
}

// FolderPathLT applies the LT predicate on the "folder_path" field.
func FolderPathLT(v string) predicate.File {
	return predicate.File(sql.FieldLT(FieldFolderPath, v))
}

// FolderPathLTE applies the LTE predicate on the "folder_path" field.
func FolderPathLTE(v string) predicate.File {
	return predicate.File(sql.FieldLTE(FieldFolderPath, v))
}

// FolderPathContains applies the Contains predicate on the "folder_path" field.
func FolderPathContains(v string) predicate.File {
	return predicate.File(sql.FieldContains(FieldFolderPath, v))
}

// FolderPathHasPrefix applies the HasPrefix predicate on the "folder_path" field.
func FolderPathHasPrefix(v string) predicate.File {
	return predicate.File(sql.FieldHasPrefix(FieldFolderPath, v))
}

// FolderPathHasSuffix applies the HasSuffix predicate on the "folder_path" field.
func FolderPathHasSuffix(v string) predicate.File {
	return predicate.File(sql.FieldHasSuffix(FieldFolderPath, v))
}

// FolderPathIsNil applies the IsNil predicate on the "folder_path" field.
func FolderPathIsNil() predicate.File {
	return predicate.File(sql.FieldIsNull(FieldFolderPath))
}

// FolderPathNotNil applies the NotNil predicate on the "folder_path" field.
func FolderPathNotNil() predicate.File {
	return predicate.File(sql.FieldNotNull(FieldFolderPath))
}

// FolderPathEqualFold applies the EqualFold predicate on the "folder_path" field.
func FolderPathEqualFold(v string) predicate.File {
	return predicate.File(sql.FieldEqualFold(FieldFolderPath, v))
}

// FolderPathContainsFold applies the ContainsFold predicate on the "folder_path" field.
func FolderPathContainsFold(v string) predicate.File {
	return predicate.File(sql.FieldContainsFold(FieldFolderPath, v))
}

// AccessLevelEQ applies the EQ predicate on the "access_level" field.
func AccessLevelEQ(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldAccessLevel, v))
}

// AccessLevelNEQ applies the NEQ predicate on the "access_level" field.
func AccessLevelNEQ(v string) predicate.File {
	return predicate.File(sql.FieldNEQ(FieldAccessLevel, v))
}

// AccessLevelIn applies the In predicate on the "access_level" field.
func AccessLevelIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldIn(FieldAccessLevel, vs...))
}

// AccessLevelNotIn applies the NotIn predicate on the "access_level" field.
func AccessLevelNotIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldNotIn(FieldAccessLevel, vs...))
}

// AccessLevelGT applies the GT predicate on the "access_level" field.
func AccessLevelGT(v string) predicate.File {
	return predicate.File(sql.FieldGT(FieldAccessLevel, v))
}

// AccessLevelGTE applies the GTE predicate on the "access_level" field.
func AccessLevelGTE(v string) predicate.File {
	return predicate.File(sql.FieldGTE(FieldAccessLevel, v))
}

// AccessLevelLT applies the LT predicate on the "access_level" field.
func AccessLevelLT(v string) predicate.File {
	return predicate.File(sql.FieldLT(FieldAccessLevel, v))
}

// AccessLevelLTE applies the LTE predicate on the "access_level" field.
func AccessLevelLTE(v string) predicate.File {
	return predicate.File(sql.FieldLTE(FieldAccessLevel, v))
}

// AccessLevelContains applies the Contains predicate on the "access_level" field.
func AccessLevelContains(v string) predicate.File {
	return predicate.File(sql.FieldContains(FieldAccessLevel, v))
}

// AccessLevelHasPrefix applies the HasPrefix predicate on the "access_level" field.
func AccessLevelHasPrefix(v string) predicate.File {
	return predicate.File(sql.FieldHasPrefix(FieldAccessLevel, v))
}

// AccessLevelHasSuffix applies the HasSuffix predicate on the "access_level" field.
func AccessLevelHasSuffix(v string) predicate.File {
	return predicate.File(sql.FieldHasSuffix(FieldAccessLevel, v))
}

// AccessLevelEqualFold applies the EqualFold predicate on the "access_level" field.
func AccessLevelEqualFold(v string) predicate.File {
	return predicate.File(sql.FieldEqualFold(FieldAccessLevel, v))
}

// AccessLevelContainsFold applies the ContainsFold predicate on the "access_level" field.
func AccessLevelContainsFold(v string) predicate.File {
	return predicate.File(sql.FieldContainsFold(FieldAccessLevel, v))
}

// ExpiresAtEQ applies the EQ predicate on the "expires_at" field.
func ExpiresAtEQ(v int64) predicate.File {
	return predicate.File(sql.FieldEQ(FieldExpiresAt, v))
}

// ExpiresAtNEQ applies the NEQ predicate on the "expires_at" field.
func ExpiresAtNEQ(v int64) predicate.File {
	return predicate.File(sql.FieldNEQ(FieldExpiresAt, v))
}

// ExpiresAtIn applies the In predicate on the "expires_at" field.
func ExpiresAtIn(vs ...int64) predicate.File {
	return predicate.File(sql.FieldIn(FieldExpiresAt, vs...))
}

// ExpiresAtNotIn applies the NotIn predicate on the "expires_at" field.
func ExpiresAtNotIn(vs ...int64) predicate.File {
	return predicate.File(sql.FieldNotIn(FieldExpiresAt, vs...))
}

// ExpiresAtGT applies the GT predicate on the "expires_at" field.
func ExpiresAtGT(v int64) predicate.File {
	return predicate.File(sql.FieldGT(FieldExpiresAt, v))
}

// ExpiresAtGTE applies the GTE predicate on the "expires_at" field.
func ExpiresAtGTE(v int64) predicate.File {
	return predicate.File(sql.FieldGTE(FieldExpiresAt, v))
}

// ExpiresAtLT applies the LT predicate on the "expires_at" field.
func ExpiresAtLT(v int64) predicate.File {
	return predicate.File(sql.FieldLT(FieldExpiresAt, v))
}

// ExpiresAtLTE applies the LTE predicate on the "expires_at" field.
func ExpiresAtLTE(v int64) predicate.File {
	return predicate.File(sql.FieldLTE(FieldExpiresAt, v))
}

// ExpiresAtIsNil applies the IsNil predicate on the "expires_at" field.
func ExpiresAtIsNil() predicate.File {
	return predicate.File(sql.FieldIsNull(FieldExpiresAt))
}

// ExpiresAtNotNil applies the NotNil predicate on the "expires_at" field.
func ExpiresAtNotNil() predicate.File {
	return predicate.File(sql.FieldNotNull(FieldExpiresAt))
}

// TagsIsNil applies the IsNil predicate on the "tags" field.
func TagsIsNil() predicate.File {
	return predicate.File(sql.FieldIsNull(FieldTags))
}

// TagsNotNil applies the NotNil predicate on the "tags" field.
func TagsNotNil() predicate.File {
	return predicate.File(sql.FieldNotNull(FieldTags))
}

// IsPublicEQ applies the EQ predicate on the "is_public" field.
func IsPublicEQ(v bool) predicate.File {
	return predicate.File(sql.FieldEQ(FieldIsPublic, v))
}

// IsPublicNEQ applies the NEQ predicate on the "is_public" field.
func IsPublicNEQ(v bool) predicate.File {
	return predicate.File(sql.FieldNEQ(FieldIsPublic, v))
}

// CategoryEQ applies the EQ predicate on the "category" field.
func CategoryEQ(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldCategory, v))
}

// CategoryNEQ applies the NEQ predicate on the "category" field.
func CategoryNEQ(v string) predicate.File {
	return predicate.File(sql.FieldNEQ(FieldCategory, v))
}

// CategoryIn applies the In predicate on the "category" field.
func CategoryIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldIn(FieldCategory, vs...))
}

// CategoryNotIn applies the NotIn predicate on the "category" field.
func CategoryNotIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldNotIn(FieldCategory, vs...))
}

// CategoryGT applies the GT predicate on the "category" field.
func CategoryGT(v string) predicate.File {
	return predicate.File(sql.FieldGT(FieldCategory, v))
}

// CategoryGTE applies the GTE predicate on the "category" field.
func CategoryGTE(v string) predicate.File {
	return predicate.File(sql.FieldGTE(FieldCategory, v))
}

// CategoryLT applies the LT predicate on the "category" field.
func CategoryLT(v string) predicate.File {
	return predicate.File(sql.FieldLT(FieldCategory, v))
}

// CategoryLTE applies the LTE predicate on the "category" field.
func CategoryLTE(v string) predicate.File {
	return predicate.File(sql.FieldLTE(FieldCategory, v))
}

// CategoryContains applies the Contains predicate on the "category" field.
func CategoryContains(v string) predicate.File {
	return predicate.File(sql.FieldContains(FieldCategory, v))
}

// CategoryHasPrefix applies the HasPrefix predicate on the "category" field.
func CategoryHasPrefix(v string) predicate.File {
	return predicate.File(sql.FieldHasPrefix(FieldCategory, v))
}

// CategoryHasSuffix applies the HasSuffix predicate on the "category" field.
func CategoryHasSuffix(v string) predicate.File {
	return predicate.File(sql.FieldHasSuffix(FieldCategory, v))
}

// CategoryEqualFold applies the EqualFold predicate on the "category" field.
func CategoryEqualFold(v string) predicate.File {
	return predicate.File(sql.FieldEqualFold(FieldCategory, v))
}

// CategoryContainsFold applies the ContainsFold predicate on the "category" field.
func CategoryContainsFold(v string) predicate.File {
	return predicate.File(sql.FieldContainsFold(FieldCategory, v))
}

// ProcessingResultIsNil applies the IsNil predicate on the "processing_result" field.
func ProcessingResultIsNil() predicate.File {
	return predicate.File(sql.FieldIsNull(FieldProcessingResult))
}

// ProcessingResultNotNil applies the NotNil predicate on the "processing_result" field.
func ProcessingResultNotNil() predicate.File {
	return predicate.File(sql.FieldNotNull(FieldProcessingResult))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.File) predicate.File {
	return predicate.File(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.File) predicate.File {
	return predicate.File(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.File) predicate.File {
	return predicate.File(sql.NotPredicates(p))
}
