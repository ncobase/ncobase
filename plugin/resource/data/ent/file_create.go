// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/resource/data/ent/file"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FileCreate is the builder for creating a File entity.
type FileCreate struct {
	config
	mutation *FileMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (fc *FileCreate) SetName(s string) *FileCreate {
	fc.mutation.SetName(s)
	return fc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (fc *FileCreate) SetNillableName(s *string) *FileCreate {
	if s != nil {
		fc.SetName(*s)
	}
	return fc
}

// SetPath sets the "path" field.
func (fc *FileCreate) SetPath(s string) *FileCreate {
	fc.mutation.SetPath(s)
	return fc
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (fc *FileCreate) SetNillablePath(s *string) *FileCreate {
	if s != nil {
		fc.SetPath(*s)
	}
	return fc
}

// SetType sets the "type" field.
func (fc *FileCreate) SetType(s string) *FileCreate {
	fc.mutation.SetType(s)
	return fc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (fc *FileCreate) SetNillableType(s *string) *FileCreate {
	if s != nil {
		fc.SetType(*s)
	}
	return fc
}

// SetSize sets the "size" field.
func (fc *FileCreate) SetSize(i int) *FileCreate {
	fc.mutation.SetSize(i)
	return fc
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (fc *FileCreate) SetNillableSize(i *int) *FileCreate {
	if i != nil {
		fc.SetSize(*i)
	}
	return fc
}

// SetStorage sets the "storage" field.
func (fc *FileCreate) SetStorage(s string) *FileCreate {
	fc.mutation.SetStorage(s)
	return fc
}

// SetNillableStorage sets the "storage" field if the given value is not nil.
func (fc *FileCreate) SetNillableStorage(s *string) *FileCreate {
	if s != nil {
		fc.SetStorage(*s)
	}
	return fc
}

// SetBucket sets the "bucket" field.
func (fc *FileCreate) SetBucket(s string) *FileCreate {
	fc.mutation.SetBucket(s)
	return fc
}

// SetNillableBucket sets the "bucket" field if the given value is not nil.
func (fc *FileCreate) SetNillableBucket(s *string) *FileCreate {
	if s != nil {
		fc.SetBucket(*s)
	}
	return fc
}

// SetEndpoint sets the "endpoint" field.
func (fc *FileCreate) SetEndpoint(s string) *FileCreate {
	fc.mutation.SetEndpoint(s)
	return fc
}

// SetNillableEndpoint sets the "endpoint" field if the given value is not nil.
func (fc *FileCreate) SetNillableEndpoint(s *string) *FileCreate {
	if s != nil {
		fc.SetEndpoint(*s)
	}
	return fc
}

// SetObjectID sets the "object_id" field.
func (fc *FileCreate) SetObjectID(s string) *FileCreate {
	fc.mutation.SetObjectID(s)
	return fc
}

// SetNillableObjectID sets the "object_id" field if the given value is not nil.
func (fc *FileCreate) SetNillableObjectID(s *string) *FileCreate {
	if s != nil {
		fc.SetObjectID(*s)
	}
	return fc
}

// SetTenantID sets the "tenant_id" field.
func (fc *FileCreate) SetTenantID(s string) *FileCreate {
	fc.mutation.SetTenantID(s)
	return fc
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (fc *FileCreate) SetNillableTenantID(s *string) *FileCreate {
	if s != nil {
		fc.SetTenantID(*s)
	}
	return fc
}

// SetExtras sets the "extras" field.
func (fc *FileCreate) SetExtras(m map[string]interface{}) *FileCreate {
	fc.mutation.SetExtras(m)
	return fc
}

// SetCreatedBy sets the "created_by" field.
func (fc *FileCreate) SetCreatedBy(s string) *FileCreate {
	fc.mutation.SetCreatedBy(s)
	return fc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (fc *FileCreate) SetNillableCreatedBy(s *string) *FileCreate {
	if s != nil {
		fc.SetCreatedBy(*s)
	}
	return fc
}

// SetUpdatedBy sets the "updated_by" field.
func (fc *FileCreate) SetUpdatedBy(s string) *FileCreate {
	fc.mutation.SetUpdatedBy(s)
	return fc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (fc *FileCreate) SetNillableUpdatedBy(s *string) *FileCreate {
	if s != nil {
		fc.SetUpdatedBy(*s)
	}
	return fc
}

// SetCreatedAt sets the "created_at" field.
func (fc *FileCreate) SetCreatedAt(i int64) *FileCreate {
	fc.mutation.SetCreatedAt(i)
	return fc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fc *FileCreate) SetNillableCreatedAt(i *int64) *FileCreate {
	if i != nil {
		fc.SetCreatedAt(*i)
	}
	return fc
}

// SetUpdatedAt sets the "updated_at" field.
func (fc *FileCreate) SetUpdatedAt(i int64) *FileCreate {
	fc.mutation.SetUpdatedAt(i)
	return fc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (fc *FileCreate) SetNillableUpdatedAt(i *int64) *FileCreate {
	if i != nil {
		fc.SetUpdatedAt(*i)
	}
	return fc
}

// SetFolderPath sets the "folder_path" field.
func (fc *FileCreate) SetFolderPath(s string) *FileCreate {
	fc.mutation.SetFolderPath(s)
	return fc
}

// SetNillableFolderPath sets the "folder_path" field if the given value is not nil.
func (fc *FileCreate) SetNillableFolderPath(s *string) *FileCreate {
	if s != nil {
		fc.SetFolderPath(*s)
	}
	return fc
}

// SetAccessLevel sets the "access_level" field.
func (fc *FileCreate) SetAccessLevel(s string) *FileCreate {
	fc.mutation.SetAccessLevel(s)
	return fc
}

// SetNillableAccessLevel sets the "access_level" field if the given value is not nil.
func (fc *FileCreate) SetNillableAccessLevel(s *string) *FileCreate {
	if s != nil {
		fc.SetAccessLevel(*s)
	}
	return fc
}

// SetExpiresAt sets the "expires_at" field.
func (fc *FileCreate) SetExpiresAt(i int64) *FileCreate {
	fc.mutation.SetExpiresAt(i)
	return fc
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (fc *FileCreate) SetNillableExpiresAt(i *int64) *FileCreate {
	if i != nil {
		fc.SetExpiresAt(*i)
	}
	return fc
}

// SetMetadata sets the "metadata" field.
func (fc *FileCreate) SetMetadata(m map[string]interface{}) *FileCreate {
	fc.mutation.SetMetadata(m)
	return fc
}

// SetTags sets the "tags" field.
func (fc *FileCreate) SetTags(s []string) *FileCreate {
	fc.mutation.SetTags(s)
	return fc
}

// SetIsPublic sets the "is_public" field.
func (fc *FileCreate) SetIsPublic(b bool) *FileCreate {
	fc.mutation.SetIsPublic(b)
	return fc
}

// SetNillableIsPublic sets the "is_public" field if the given value is not nil.
func (fc *FileCreate) SetNillableIsPublic(b *bool) *FileCreate {
	if b != nil {
		fc.SetIsPublic(*b)
	}
	return fc
}

// SetVersions sets the "versions" field.
func (fc *FileCreate) SetVersions(s []string) *FileCreate {
	fc.mutation.SetVersions(s)
	return fc
}

// SetThumbnailPath sets the "thumbnail_path" field.
func (fc *FileCreate) SetThumbnailPath(s string) *FileCreate {
	fc.mutation.SetThumbnailPath(s)
	return fc
}

// SetNillableThumbnailPath sets the "thumbnail_path" field if the given value is not nil.
func (fc *FileCreate) SetNillableThumbnailPath(s *string) *FileCreate {
	if s != nil {
		fc.SetThumbnailPath(*s)
	}
	return fc
}

// SetWidth sets the "width" field.
func (fc *FileCreate) SetWidth(i int) *FileCreate {
	fc.mutation.SetWidth(i)
	return fc
}

// SetNillableWidth sets the "width" field if the given value is not nil.
func (fc *FileCreate) SetNillableWidth(i *int) *FileCreate {
	if i != nil {
		fc.SetWidth(*i)
	}
	return fc
}

// SetHeight sets the "height" field.
func (fc *FileCreate) SetHeight(i int) *FileCreate {
	fc.mutation.SetHeight(i)
	return fc
}

// SetNillableHeight sets the "height" field if the given value is not nil.
func (fc *FileCreate) SetNillableHeight(i *int) *FileCreate {
	if i != nil {
		fc.SetHeight(*i)
	}
	return fc
}

// SetDuration sets the "duration" field.
func (fc *FileCreate) SetDuration(f float64) *FileCreate {
	fc.mutation.SetDuration(f)
	return fc
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (fc *FileCreate) SetNillableDuration(f *float64) *FileCreate {
	if f != nil {
		fc.SetDuration(*f)
	}
	return fc
}

// SetCategory sets the "category" field.
func (fc *FileCreate) SetCategory(s string) *FileCreate {
	fc.mutation.SetCategory(s)
	return fc
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (fc *FileCreate) SetNillableCategory(s *string) *FileCreate {
	if s != nil {
		fc.SetCategory(*s)
	}
	return fc
}

// SetProcessingResult sets the "processing_result" field.
func (fc *FileCreate) SetProcessingResult(m map[string]interface{}) *FileCreate {
	fc.mutation.SetProcessingResult(m)
	return fc
}

// SetID sets the "id" field.
func (fc *FileCreate) SetID(s string) *FileCreate {
	fc.mutation.SetID(s)
	return fc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (fc *FileCreate) SetNillableID(s *string) *FileCreate {
	if s != nil {
		fc.SetID(*s)
	}
	return fc
}

// Mutation returns the FileMutation object of the builder.
func (fc *FileCreate) Mutation() *FileMutation {
	return fc.mutation
}

// Save creates the File in the database.
func (fc *FileCreate) Save(ctx context.Context) (*File, error) {
	fc.defaults()
	return withHooks(ctx, fc.sqlSave, fc.mutation, fc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fc *FileCreate) SaveX(ctx context.Context) *File {
	v, err := fc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fc *FileCreate) Exec(ctx context.Context) error {
	_, err := fc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fc *FileCreate) ExecX(ctx context.Context) {
	if err := fc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fc *FileCreate) defaults() {
	if _, ok := fc.mutation.Size(); !ok {
		v := file.DefaultSize
		fc.mutation.SetSize(v)
	}
	if _, ok := fc.mutation.Extras(); !ok {
		v := file.DefaultExtras
		fc.mutation.SetExtras(v)
	}
	if _, ok := fc.mutation.CreatedAt(); !ok {
		v := file.DefaultCreatedAt()
		fc.mutation.SetCreatedAt(v)
	}
	if _, ok := fc.mutation.UpdatedAt(); !ok {
		v := file.DefaultUpdatedAt()
		fc.mutation.SetUpdatedAt(v)
	}
	if _, ok := fc.mutation.AccessLevel(); !ok {
		v := file.DefaultAccessLevel
		fc.mutation.SetAccessLevel(v)
	}
	if _, ok := fc.mutation.IsPublic(); !ok {
		v := file.DefaultIsPublic
		fc.mutation.SetIsPublic(v)
	}
	if _, ok := fc.mutation.Category(); !ok {
		v := file.DefaultCategory
		fc.mutation.SetCategory(v)
	}
	if _, ok := fc.mutation.ID(); !ok {
		v := file.DefaultID()
		fc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fc *FileCreate) check() error {
	if v, ok := fc.mutation.Name(); ok {
		if err := file.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "File.name": %w`, err)}
		}
	}
	if _, ok := fc.mutation.Size(); !ok {
		return &ValidationError{Name: "size", err: errors.New(`ent: missing required field "File.size"`)}
	}
	if _, ok := fc.mutation.AccessLevel(); !ok {
		return &ValidationError{Name: "access_level", err: errors.New(`ent: missing required field "File.access_level"`)}
	}
	if _, ok := fc.mutation.IsPublic(); !ok {
		return &ValidationError{Name: "is_public", err: errors.New(`ent: missing required field "File.is_public"`)}
	}
	if _, ok := fc.mutation.Category(); !ok {
		return &ValidationError{Name: "category", err: errors.New(`ent: missing required field "File.category"`)}
	}
	if v, ok := fc.mutation.ID(); ok {
		if err := file.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "File.id": %w`, err)}
		}
	}
	return nil
}

func (fc *FileCreate) sqlSave(ctx context.Context) (*File, error) {
	if err := fc.check(); err != nil {
		return nil, err
	}
	_node, _spec := fc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected File.ID type: %T", _spec.ID.Value)
		}
	}
	fc.mutation.id = &_node.ID
	fc.mutation.done = true
	return _node, nil
}

func (fc *FileCreate) createSpec() (*File, *sqlgraph.CreateSpec) {
	var (
		_node = &File{config: fc.config}
		_spec = sqlgraph.NewCreateSpec(file.Table, sqlgraph.NewFieldSpec(file.FieldID, field.TypeString))
	)
	if id, ok := fc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := fc.mutation.Name(); ok {
		_spec.SetField(file.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := fc.mutation.Path(); ok {
		_spec.SetField(file.FieldPath, field.TypeString, value)
		_node.Path = value
	}
	if value, ok := fc.mutation.GetType(); ok {
		_spec.SetField(file.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := fc.mutation.Size(); ok {
		_spec.SetField(file.FieldSize, field.TypeInt, value)
		_node.Size = value
	}
	if value, ok := fc.mutation.Storage(); ok {
		_spec.SetField(file.FieldStorage, field.TypeString, value)
		_node.Storage = value
	}
	if value, ok := fc.mutation.Bucket(); ok {
		_spec.SetField(file.FieldBucket, field.TypeString, value)
		_node.Bucket = value
	}
	if value, ok := fc.mutation.Endpoint(); ok {
		_spec.SetField(file.FieldEndpoint, field.TypeString, value)
		_node.Endpoint = value
	}
	if value, ok := fc.mutation.ObjectID(); ok {
		_spec.SetField(file.FieldObjectID, field.TypeString, value)
		_node.ObjectID = value
	}
	if value, ok := fc.mutation.TenantID(); ok {
		_spec.SetField(file.FieldTenantID, field.TypeString, value)
		_node.TenantID = value
	}
	if value, ok := fc.mutation.Extras(); ok {
		_spec.SetField(file.FieldExtras, field.TypeJSON, value)
		_node.Extras = value
	}
	if value, ok := fc.mutation.CreatedBy(); ok {
		_spec.SetField(file.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := fc.mutation.UpdatedBy(); ok {
		_spec.SetField(file.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := fc.mutation.CreatedAt(); ok {
		_spec.SetField(file.FieldCreatedAt, field.TypeInt64, value)
		_node.CreatedAt = value
	}
	if value, ok := fc.mutation.UpdatedAt(); ok {
		_spec.SetField(file.FieldUpdatedAt, field.TypeInt64, value)
		_node.UpdatedAt = value
	}
	if value, ok := fc.mutation.FolderPath(); ok {
		_spec.SetField(file.FieldFolderPath, field.TypeString, value)
		_node.FolderPath = value
	}
	if value, ok := fc.mutation.AccessLevel(); ok {
		_spec.SetField(file.FieldAccessLevel, field.TypeString, value)
		_node.AccessLevel = value
	}
	if value, ok := fc.mutation.ExpiresAt(); ok {
		_spec.SetField(file.FieldExpiresAt, field.TypeInt64, value)
		_node.ExpiresAt = &value
	}
	if value, ok := fc.mutation.Metadata(); ok {
		_spec.SetField(file.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if value, ok := fc.mutation.Tags(); ok {
		_spec.SetField(file.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := fc.mutation.IsPublic(); ok {
		_spec.SetField(file.FieldIsPublic, field.TypeBool, value)
		_node.IsPublic = value
	}
	if value, ok := fc.mutation.Versions(); ok {
		_spec.SetField(file.FieldVersions, field.TypeJSON, value)
		_node.Versions = value
	}
	if value, ok := fc.mutation.ThumbnailPath(); ok {
		_spec.SetField(file.FieldThumbnailPath, field.TypeString, value)
		_node.ThumbnailPath = value
	}
	if value, ok := fc.mutation.Width(); ok {
		_spec.SetField(file.FieldWidth, field.TypeInt, value)
		_node.Width = &value
	}
	if value, ok := fc.mutation.Height(); ok {
		_spec.SetField(file.FieldHeight, field.TypeInt, value)
		_node.Height = &value
	}
	if value, ok := fc.mutation.Duration(); ok {
		_spec.SetField(file.FieldDuration, field.TypeFloat64, value)
		_node.Duration = &value
	}
	if value, ok := fc.mutation.Category(); ok {
		_spec.SetField(file.FieldCategory, field.TypeString, value)
		_node.Category = value
	}
	if value, ok := fc.mutation.ProcessingResult(); ok {
		_spec.SetField(file.FieldProcessingResult, field.TypeJSON, value)
		_node.ProcessingResult = value
	}
	return _node, _spec
}

// FileCreateBulk is the builder for creating many File entities in bulk.
type FileCreateBulk struct {
	config
	err      error
	builders []*FileCreate
}

// Save creates the File entities in the database.
func (fcb *FileCreateBulk) Save(ctx context.Context) ([]*File, error) {
	if fcb.err != nil {
		return nil, fcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(fcb.builders))
	nodes := make([]*File, len(fcb.builders))
	mutators := make([]Mutator, len(fcb.builders))
	for i := range fcb.builders {
		func(i int, root context.Context) {
			builder := fcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FileMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fcb *FileCreateBulk) SaveX(ctx context.Context) []*File {
	v, err := fcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fcb *FileCreateBulk) Exec(ctx context.Context) error {
	_, err := fcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fcb *FileCreateBulk) ExecX(ctx context.Context) {
	if err := fcb.Exec(ctx); err != nil {
		panic(err)
	}
}
