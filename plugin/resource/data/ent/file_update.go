// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/resource/data/ent/file"
	"ncobase/resource/data/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// FileUpdate is the builder for updating File entities.
type FileUpdate struct {
	config
	hooks    []Hook
	mutation *FileMutation
}

// Where appends a list predicates to the FileUpdate builder.
func (fu *FileUpdate) Where(ps ...predicate.File) *FileUpdate {
	fu.mutation.Where(ps...)
	return fu
}

// SetName sets the "name" field.
func (fu *FileUpdate) SetName(s string) *FileUpdate {
	fu.mutation.SetName(s)
	return fu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (fu *FileUpdate) SetNillableName(s *string) *FileUpdate {
	if s != nil {
		fu.SetName(*s)
	}
	return fu
}

// ClearName clears the value of the "name" field.
func (fu *FileUpdate) ClearName() *FileUpdate {
	fu.mutation.ClearName()
	return fu
}

// SetPath sets the "path" field.
func (fu *FileUpdate) SetPath(s string) *FileUpdate {
	fu.mutation.SetPath(s)
	return fu
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (fu *FileUpdate) SetNillablePath(s *string) *FileUpdate {
	if s != nil {
		fu.SetPath(*s)
	}
	return fu
}

// ClearPath clears the value of the "path" field.
func (fu *FileUpdate) ClearPath() *FileUpdate {
	fu.mutation.ClearPath()
	return fu
}

// SetType sets the "type" field.
func (fu *FileUpdate) SetType(s string) *FileUpdate {
	fu.mutation.SetType(s)
	return fu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (fu *FileUpdate) SetNillableType(s *string) *FileUpdate {
	if s != nil {
		fu.SetType(*s)
	}
	return fu
}

// ClearType clears the value of the "type" field.
func (fu *FileUpdate) ClearType() *FileUpdate {
	fu.mutation.ClearType()
	return fu
}

// SetSize sets the "size" field.
func (fu *FileUpdate) SetSize(i int) *FileUpdate {
	fu.mutation.ResetSize()
	fu.mutation.SetSize(i)
	return fu
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (fu *FileUpdate) SetNillableSize(i *int) *FileUpdate {
	if i != nil {
		fu.SetSize(*i)
	}
	return fu
}

// AddSize adds i to the "size" field.
func (fu *FileUpdate) AddSize(i int) *FileUpdate {
	fu.mutation.AddSize(i)
	return fu
}

// SetStorage sets the "storage" field.
func (fu *FileUpdate) SetStorage(s string) *FileUpdate {
	fu.mutation.SetStorage(s)
	return fu
}

// SetNillableStorage sets the "storage" field if the given value is not nil.
func (fu *FileUpdate) SetNillableStorage(s *string) *FileUpdate {
	if s != nil {
		fu.SetStorage(*s)
	}
	return fu
}

// ClearStorage clears the value of the "storage" field.
func (fu *FileUpdate) ClearStorage() *FileUpdate {
	fu.mutation.ClearStorage()
	return fu
}

// SetBucket sets the "bucket" field.
func (fu *FileUpdate) SetBucket(s string) *FileUpdate {
	fu.mutation.SetBucket(s)
	return fu
}

// SetNillableBucket sets the "bucket" field if the given value is not nil.
func (fu *FileUpdate) SetNillableBucket(s *string) *FileUpdate {
	if s != nil {
		fu.SetBucket(*s)
	}
	return fu
}

// ClearBucket clears the value of the "bucket" field.
func (fu *FileUpdate) ClearBucket() *FileUpdate {
	fu.mutation.ClearBucket()
	return fu
}

// SetEndpoint sets the "endpoint" field.
func (fu *FileUpdate) SetEndpoint(s string) *FileUpdate {
	fu.mutation.SetEndpoint(s)
	return fu
}

// SetNillableEndpoint sets the "endpoint" field if the given value is not nil.
func (fu *FileUpdate) SetNillableEndpoint(s *string) *FileUpdate {
	if s != nil {
		fu.SetEndpoint(*s)
	}
	return fu
}

// ClearEndpoint clears the value of the "endpoint" field.
func (fu *FileUpdate) ClearEndpoint() *FileUpdate {
	fu.mutation.ClearEndpoint()
	return fu
}

// SetOwnerID sets the "owner_id" field.
func (fu *FileUpdate) SetOwnerID(s string) *FileUpdate {
	fu.mutation.SetOwnerID(s)
	return fu
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (fu *FileUpdate) SetNillableOwnerID(s *string) *FileUpdate {
	if s != nil {
		fu.SetOwnerID(*s)
	}
	return fu
}

// ClearOwnerID clears the value of the "owner_id" field.
func (fu *FileUpdate) ClearOwnerID() *FileUpdate {
	fu.mutation.ClearOwnerID()
	return fu
}

// SetExtras sets the "extras" field.
func (fu *FileUpdate) SetExtras(m map[string]interface{}) *FileUpdate {
	fu.mutation.SetExtras(m)
	return fu
}

// ClearExtras clears the value of the "extras" field.
func (fu *FileUpdate) ClearExtras() *FileUpdate {
	fu.mutation.ClearExtras()
	return fu
}

// SetCreatedBy sets the "created_by" field.
func (fu *FileUpdate) SetCreatedBy(s string) *FileUpdate {
	fu.mutation.SetCreatedBy(s)
	return fu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (fu *FileUpdate) SetNillableCreatedBy(s *string) *FileUpdate {
	if s != nil {
		fu.SetCreatedBy(*s)
	}
	return fu
}

// ClearCreatedBy clears the value of the "created_by" field.
func (fu *FileUpdate) ClearCreatedBy() *FileUpdate {
	fu.mutation.ClearCreatedBy()
	return fu
}

// SetUpdatedBy sets the "updated_by" field.
func (fu *FileUpdate) SetUpdatedBy(s string) *FileUpdate {
	fu.mutation.SetUpdatedBy(s)
	return fu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (fu *FileUpdate) SetNillableUpdatedBy(s *string) *FileUpdate {
	if s != nil {
		fu.SetUpdatedBy(*s)
	}
	return fu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (fu *FileUpdate) ClearUpdatedBy() *FileUpdate {
	fu.mutation.ClearUpdatedBy()
	return fu
}

// SetUpdatedAt sets the "updated_at" field.
func (fu *FileUpdate) SetUpdatedAt(i int64) *FileUpdate {
	fu.mutation.ResetUpdatedAt()
	fu.mutation.SetUpdatedAt(i)
	return fu
}

// AddUpdatedAt adds i to the "updated_at" field.
func (fu *FileUpdate) AddUpdatedAt(i int64) *FileUpdate {
	fu.mutation.AddUpdatedAt(i)
	return fu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (fu *FileUpdate) ClearUpdatedAt() *FileUpdate {
	fu.mutation.ClearUpdatedAt()
	return fu
}

// SetOriginalName sets the "original_name" field.
func (fu *FileUpdate) SetOriginalName(s string) *FileUpdate {
	fu.mutation.SetOriginalName(s)
	return fu
}

// SetNillableOriginalName sets the "original_name" field if the given value is not nil.
func (fu *FileUpdate) SetNillableOriginalName(s *string) *FileUpdate {
	if s != nil {
		fu.SetOriginalName(*s)
	}
	return fu
}

// ClearOriginalName clears the value of the "original_name" field.
func (fu *FileUpdate) ClearOriginalName() *FileUpdate {
	fu.mutation.ClearOriginalName()
	return fu
}

// SetAccessLevel sets the "access_level" field.
func (fu *FileUpdate) SetAccessLevel(s string) *FileUpdate {
	fu.mutation.SetAccessLevel(s)
	return fu
}

// SetNillableAccessLevel sets the "access_level" field if the given value is not nil.
func (fu *FileUpdate) SetNillableAccessLevel(s *string) *FileUpdate {
	if s != nil {
		fu.SetAccessLevel(*s)
	}
	return fu
}

// SetExpiresAt sets the "expires_at" field.
func (fu *FileUpdate) SetExpiresAt(i int64) *FileUpdate {
	fu.mutation.ResetExpiresAt()
	fu.mutation.SetExpiresAt(i)
	return fu
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (fu *FileUpdate) SetNillableExpiresAt(i *int64) *FileUpdate {
	if i != nil {
		fu.SetExpiresAt(*i)
	}
	return fu
}

// AddExpiresAt adds i to the "expires_at" field.
func (fu *FileUpdate) AddExpiresAt(i int64) *FileUpdate {
	fu.mutation.AddExpiresAt(i)
	return fu
}

// ClearExpiresAt clears the value of the "expires_at" field.
func (fu *FileUpdate) ClearExpiresAt() *FileUpdate {
	fu.mutation.ClearExpiresAt()
	return fu
}

// SetTags sets the "tags" field.
func (fu *FileUpdate) SetTags(s []string) *FileUpdate {
	fu.mutation.SetTags(s)
	return fu
}

// AppendTags appends s to the "tags" field.
func (fu *FileUpdate) AppendTags(s []string) *FileUpdate {
	fu.mutation.AppendTags(s)
	return fu
}

// ClearTags clears the value of the "tags" field.
func (fu *FileUpdate) ClearTags() *FileUpdate {
	fu.mutation.ClearTags()
	return fu
}

// SetIsPublic sets the "is_public" field.
func (fu *FileUpdate) SetIsPublic(b bool) *FileUpdate {
	fu.mutation.SetIsPublic(b)
	return fu
}

// SetNillableIsPublic sets the "is_public" field if the given value is not nil.
func (fu *FileUpdate) SetNillableIsPublic(b *bool) *FileUpdate {
	if b != nil {
		fu.SetIsPublic(*b)
	}
	return fu
}

// SetCategory sets the "category" field.
func (fu *FileUpdate) SetCategory(s string) *FileUpdate {
	fu.mutation.SetCategory(s)
	return fu
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (fu *FileUpdate) SetNillableCategory(s *string) *FileUpdate {
	if s != nil {
		fu.SetCategory(*s)
	}
	return fu
}

// SetHash sets the "hash" field.
func (fu *FileUpdate) SetHash(s string) *FileUpdate {
	fu.mutation.SetHash(s)
	return fu
}

// SetNillableHash sets the "hash" field if the given value is not nil.
func (fu *FileUpdate) SetNillableHash(s *string) *FileUpdate {
	if s != nil {
		fu.SetHash(*s)
	}
	return fu
}

// ClearHash clears the value of the "hash" field.
func (fu *FileUpdate) ClearHash() *FileUpdate {
	fu.mutation.ClearHash()
	return fu
}

// SetProcessingResult sets the "processing_result" field.
func (fu *FileUpdate) SetProcessingResult(m map[string]interface{}) *FileUpdate {
	fu.mutation.SetProcessingResult(m)
	return fu
}

// ClearProcessingResult clears the value of the "processing_result" field.
func (fu *FileUpdate) ClearProcessingResult() *FileUpdate {
	fu.mutation.ClearProcessingResult()
	return fu
}

// Mutation returns the FileMutation object of the builder.
func (fu *FileUpdate) Mutation() *FileMutation {
	return fu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fu *FileUpdate) Save(ctx context.Context) (int, error) {
	fu.defaults()
	return withHooks(ctx, fu.sqlSave, fu.mutation, fu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fu *FileUpdate) SaveX(ctx context.Context) int {
	affected, err := fu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fu *FileUpdate) Exec(ctx context.Context) error {
	_, err := fu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fu *FileUpdate) ExecX(ctx context.Context) {
	if err := fu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fu *FileUpdate) defaults() {
	if _, ok := fu.mutation.UpdatedAt(); !ok && !fu.mutation.UpdatedAtCleared() {
		v := file.UpdateDefaultUpdatedAt()
		fu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fu *FileUpdate) check() error {
	if v, ok := fu.mutation.Name(); ok {
		if err := file.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "File.name": %w`, err)}
		}
	}
	return nil
}

func (fu *FileUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := fu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(file.Table, file.Columns, sqlgraph.NewFieldSpec(file.FieldID, field.TypeString))
	if ps := fu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fu.mutation.Name(); ok {
		_spec.SetField(file.FieldName, field.TypeString, value)
	}
	if fu.mutation.NameCleared() {
		_spec.ClearField(file.FieldName, field.TypeString)
	}
	if value, ok := fu.mutation.Path(); ok {
		_spec.SetField(file.FieldPath, field.TypeString, value)
	}
	if fu.mutation.PathCleared() {
		_spec.ClearField(file.FieldPath, field.TypeString)
	}
	if value, ok := fu.mutation.GetType(); ok {
		_spec.SetField(file.FieldType, field.TypeString, value)
	}
	if fu.mutation.TypeCleared() {
		_spec.ClearField(file.FieldType, field.TypeString)
	}
	if value, ok := fu.mutation.Size(); ok {
		_spec.SetField(file.FieldSize, field.TypeInt, value)
	}
	if value, ok := fu.mutation.AddedSize(); ok {
		_spec.AddField(file.FieldSize, field.TypeInt, value)
	}
	if value, ok := fu.mutation.Storage(); ok {
		_spec.SetField(file.FieldStorage, field.TypeString, value)
	}
	if fu.mutation.StorageCleared() {
		_spec.ClearField(file.FieldStorage, field.TypeString)
	}
	if value, ok := fu.mutation.Bucket(); ok {
		_spec.SetField(file.FieldBucket, field.TypeString, value)
	}
	if fu.mutation.BucketCleared() {
		_spec.ClearField(file.FieldBucket, field.TypeString)
	}
	if value, ok := fu.mutation.Endpoint(); ok {
		_spec.SetField(file.FieldEndpoint, field.TypeString, value)
	}
	if fu.mutation.EndpointCleared() {
		_spec.ClearField(file.FieldEndpoint, field.TypeString)
	}
	if value, ok := fu.mutation.OwnerID(); ok {
		_spec.SetField(file.FieldOwnerID, field.TypeString, value)
	}
	if fu.mutation.OwnerIDCleared() {
		_spec.ClearField(file.FieldOwnerID, field.TypeString)
	}
	if value, ok := fu.mutation.Extras(); ok {
		_spec.SetField(file.FieldExtras, field.TypeJSON, value)
	}
	if fu.mutation.ExtrasCleared() {
		_spec.ClearField(file.FieldExtras, field.TypeJSON)
	}
	if value, ok := fu.mutation.CreatedBy(); ok {
		_spec.SetField(file.FieldCreatedBy, field.TypeString, value)
	}
	if fu.mutation.CreatedByCleared() {
		_spec.ClearField(file.FieldCreatedBy, field.TypeString)
	}
	if value, ok := fu.mutation.UpdatedBy(); ok {
		_spec.SetField(file.FieldUpdatedBy, field.TypeString, value)
	}
	if fu.mutation.UpdatedByCleared() {
		_spec.ClearField(file.FieldUpdatedBy, field.TypeString)
	}
	if fu.mutation.CreatedAtCleared() {
		_spec.ClearField(file.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := fu.mutation.UpdatedAt(); ok {
		_spec.SetField(file.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := fu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(file.FieldUpdatedAt, field.TypeInt64, value)
	}
	if fu.mutation.UpdatedAtCleared() {
		_spec.ClearField(file.FieldUpdatedAt, field.TypeInt64)
	}
	if value, ok := fu.mutation.OriginalName(); ok {
		_spec.SetField(file.FieldOriginalName, field.TypeString, value)
	}
	if fu.mutation.OriginalNameCleared() {
		_spec.ClearField(file.FieldOriginalName, field.TypeString)
	}
	if value, ok := fu.mutation.AccessLevel(); ok {
		_spec.SetField(file.FieldAccessLevel, field.TypeString, value)
	}
	if value, ok := fu.mutation.ExpiresAt(); ok {
		_spec.SetField(file.FieldExpiresAt, field.TypeInt64, value)
	}
	if value, ok := fu.mutation.AddedExpiresAt(); ok {
		_spec.AddField(file.FieldExpiresAt, field.TypeInt64, value)
	}
	if fu.mutation.ExpiresAtCleared() {
		_spec.ClearField(file.FieldExpiresAt, field.TypeInt64)
	}
	if value, ok := fu.mutation.Tags(); ok {
		_spec.SetField(file.FieldTags, field.TypeJSON, value)
	}
	if value, ok := fu.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, file.FieldTags, value)
		})
	}
	if fu.mutation.TagsCleared() {
		_spec.ClearField(file.FieldTags, field.TypeJSON)
	}
	if value, ok := fu.mutation.IsPublic(); ok {
		_spec.SetField(file.FieldIsPublic, field.TypeBool, value)
	}
	if value, ok := fu.mutation.Category(); ok {
		_spec.SetField(file.FieldCategory, field.TypeString, value)
	}
	if value, ok := fu.mutation.Hash(); ok {
		_spec.SetField(file.FieldHash, field.TypeString, value)
	}
	if fu.mutation.HashCleared() {
		_spec.ClearField(file.FieldHash, field.TypeString)
	}
	if value, ok := fu.mutation.ProcessingResult(); ok {
		_spec.SetField(file.FieldProcessingResult, field.TypeJSON, value)
	}
	if fu.mutation.ProcessingResultCleared() {
		_spec.ClearField(file.FieldProcessingResult, field.TypeJSON)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{file.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fu.mutation.done = true
	return n, nil
}

// FileUpdateOne is the builder for updating a single File entity.
type FileUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FileMutation
}

// SetName sets the "name" field.
func (fuo *FileUpdateOne) SetName(s string) *FileUpdateOne {
	fuo.mutation.SetName(s)
	return fuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableName(s *string) *FileUpdateOne {
	if s != nil {
		fuo.SetName(*s)
	}
	return fuo
}

// ClearName clears the value of the "name" field.
func (fuo *FileUpdateOne) ClearName() *FileUpdateOne {
	fuo.mutation.ClearName()
	return fuo
}

// SetPath sets the "path" field.
func (fuo *FileUpdateOne) SetPath(s string) *FileUpdateOne {
	fuo.mutation.SetPath(s)
	return fuo
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillablePath(s *string) *FileUpdateOne {
	if s != nil {
		fuo.SetPath(*s)
	}
	return fuo
}

// ClearPath clears the value of the "path" field.
func (fuo *FileUpdateOne) ClearPath() *FileUpdateOne {
	fuo.mutation.ClearPath()
	return fuo
}

// SetType sets the "type" field.
func (fuo *FileUpdateOne) SetType(s string) *FileUpdateOne {
	fuo.mutation.SetType(s)
	return fuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableType(s *string) *FileUpdateOne {
	if s != nil {
		fuo.SetType(*s)
	}
	return fuo
}

// ClearType clears the value of the "type" field.
func (fuo *FileUpdateOne) ClearType() *FileUpdateOne {
	fuo.mutation.ClearType()
	return fuo
}

// SetSize sets the "size" field.
func (fuo *FileUpdateOne) SetSize(i int) *FileUpdateOne {
	fuo.mutation.ResetSize()
	fuo.mutation.SetSize(i)
	return fuo
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableSize(i *int) *FileUpdateOne {
	if i != nil {
		fuo.SetSize(*i)
	}
	return fuo
}

// AddSize adds i to the "size" field.
func (fuo *FileUpdateOne) AddSize(i int) *FileUpdateOne {
	fuo.mutation.AddSize(i)
	return fuo
}

// SetStorage sets the "storage" field.
func (fuo *FileUpdateOne) SetStorage(s string) *FileUpdateOne {
	fuo.mutation.SetStorage(s)
	return fuo
}

// SetNillableStorage sets the "storage" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableStorage(s *string) *FileUpdateOne {
	if s != nil {
		fuo.SetStorage(*s)
	}
	return fuo
}

// ClearStorage clears the value of the "storage" field.
func (fuo *FileUpdateOne) ClearStorage() *FileUpdateOne {
	fuo.mutation.ClearStorage()
	return fuo
}

// SetBucket sets the "bucket" field.
func (fuo *FileUpdateOne) SetBucket(s string) *FileUpdateOne {
	fuo.mutation.SetBucket(s)
	return fuo
}

// SetNillableBucket sets the "bucket" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableBucket(s *string) *FileUpdateOne {
	if s != nil {
		fuo.SetBucket(*s)
	}
	return fuo
}

// ClearBucket clears the value of the "bucket" field.
func (fuo *FileUpdateOne) ClearBucket() *FileUpdateOne {
	fuo.mutation.ClearBucket()
	return fuo
}

// SetEndpoint sets the "endpoint" field.
func (fuo *FileUpdateOne) SetEndpoint(s string) *FileUpdateOne {
	fuo.mutation.SetEndpoint(s)
	return fuo
}

// SetNillableEndpoint sets the "endpoint" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableEndpoint(s *string) *FileUpdateOne {
	if s != nil {
		fuo.SetEndpoint(*s)
	}
	return fuo
}

// ClearEndpoint clears the value of the "endpoint" field.
func (fuo *FileUpdateOne) ClearEndpoint() *FileUpdateOne {
	fuo.mutation.ClearEndpoint()
	return fuo
}

// SetOwnerID sets the "owner_id" field.
func (fuo *FileUpdateOne) SetOwnerID(s string) *FileUpdateOne {
	fuo.mutation.SetOwnerID(s)
	return fuo
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableOwnerID(s *string) *FileUpdateOne {
	if s != nil {
		fuo.SetOwnerID(*s)
	}
	return fuo
}

// ClearOwnerID clears the value of the "owner_id" field.
func (fuo *FileUpdateOne) ClearOwnerID() *FileUpdateOne {
	fuo.mutation.ClearOwnerID()
	return fuo
}

// SetExtras sets the "extras" field.
func (fuo *FileUpdateOne) SetExtras(m map[string]interface{}) *FileUpdateOne {
	fuo.mutation.SetExtras(m)
	return fuo
}

// ClearExtras clears the value of the "extras" field.
func (fuo *FileUpdateOne) ClearExtras() *FileUpdateOne {
	fuo.mutation.ClearExtras()
	return fuo
}

// SetCreatedBy sets the "created_by" field.
func (fuo *FileUpdateOne) SetCreatedBy(s string) *FileUpdateOne {
	fuo.mutation.SetCreatedBy(s)
	return fuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableCreatedBy(s *string) *FileUpdateOne {
	if s != nil {
		fuo.SetCreatedBy(*s)
	}
	return fuo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (fuo *FileUpdateOne) ClearCreatedBy() *FileUpdateOne {
	fuo.mutation.ClearCreatedBy()
	return fuo
}

// SetUpdatedBy sets the "updated_by" field.
func (fuo *FileUpdateOne) SetUpdatedBy(s string) *FileUpdateOne {
	fuo.mutation.SetUpdatedBy(s)
	return fuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableUpdatedBy(s *string) *FileUpdateOne {
	if s != nil {
		fuo.SetUpdatedBy(*s)
	}
	return fuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (fuo *FileUpdateOne) ClearUpdatedBy() *FileUpdateOne {
	fuo.mutation.ClearUpdatedBy()
	return fuo
}

// SetUpdatedAt sets the "updated_at" field.
func (fuo *FileUpdateOne) SetUpdatedAt(i int64) *FileUpdateOne {
	fuo.mutation.ResetUpdatedAt()
	fuo.mutation.SetUpdatedAt(i)
	return fuo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (fuo *FileUpdateOne) AddUpdatedAt(i int64) *FileUpdateOne {
	fuo.mutation.AddUpdatedAt(i)
	return fuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (fuo *FileUpdateOne) ClearUpdatedAt() *FileUpdateOne {
	fuo.mutation.ClearUpdatedAt()
	return fuo
}

// SetOriginalName sets the "original_name" field.
func (fuo *FileUpdateOne) SetOriginalName(s string) *FileUpdateOne {
	fuo.mutation.SetOriginalName(s)
	return fuo
}

// SetNillableOriginalName sets the "original_name" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableOriginalName(s *string) *FileUpdateOne {
	if s != nil {
		fuo.SetOriginalName(*s)
	}
	return fuo
}

// ClearOriginalName clears the value of the "original_name" field.
func (fuo *FileUpdateOne) ClearOriginalName() *FileUpdateOne {
	fuo.mutation.ClearOriginalName()
	return fuo
}

// SetAccessLevel sets the "access_level" field.
func (fuo *FileUpdateOne) SetAccessLevel(s string) *FileUpdateOne {
	fuo.mutation.SetAccessLevel(s)
	return fuo
}

// SetNillableAccessLevel sets the "access_level" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableAccessLevel(s *string) *FileUpdateOne {
	if s != nil {
		fuo.SetAccessLevel(*s)
	}
	return fuo
}

// SetExpiresAt sets the "expires_at" field.
func (fuo *FileUpdateOne) SetExpiresAt(i int64) *FileUpdateOne {
	fuo.mutation.ResetExpiresAt()
	fuo.mutation.SetExpiresAt(i)
	return fuo
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableExpiresAt(i *int64) *FileUpdateOne {
	if i != nil {
		fuo.SetExpiresAt(*i)
	}
	return fuo
}

// AddExpiresAt adds i to the "expires_at" field.
func (fuo *FileUpdateOne) AddExpiresAt(i int64) *FileUpdateOne {
	fuo.mutation.AddExpiresAt(i)
	return fuo
}

// ClearExpiresAt clears the value of the "expires_at" field.
func (fuo *FileUpdateOne) ClearExpiresAt() *FileUpdateOne {
	fuo.mutation.ClearExpiresAt()
	return fuo
}

// SetTags sets the "tags" field.
func (fuo *FileUpdateOne) SetTags(s []string) *FileUpdateOne {
	fuo.mutation.SetTags(s)
	return fuo
}

// AppendTags appends s to the "tags" field.
func (fuo *FileUpdateOne) AppendTags(s []string) *FileUpdateOne {
	fuo.mutation.AppendTags(s)
	return fuo
}

// ClearTags clears the value of the "tags" field.
func (fuo *FileUpdateOne) ClearTags() *FileUpdateOne {
	fuo.mutation.ClearTags()
	return fuo
}

// SetIsPublic sets the "is_public" field.
func (fuo *FileUpdateOne) SetIsPublic(b bool) *FileUpdateOne {
	fuo.mutation.SetIsPublic(b)
	return fuo
}

// SetNillableIsPublic sets the "is_public" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableIsPublic(b *bool) *FileUpdateOne {
	if b != nil {
		fuo.SetIsPublic(*b)
	}
	return fuo
}

// SetCategory sets the "category" field.
func (fuo *FileUpdateOne) SetCategory(s string) *FileUpdateOne {
	fuo.mutation.SetCategory(s)
	return fuo
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableCategory(s *string) *FileUpdateOne {
	if s != nil {
		fuo.SetCategory(*s)
	}
	return fuo
}

// SetHash sets the "hash" field.
func (fuo *FileUpdateOne) SetHash(s string) *FileUpdateOne {
	fuo.mutation.SetHash(s)
	return fuo
}

// SetNillableHash sets the "hash" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableHash(s *string) *FileUpdateOne {
	if s != nil {
		fuo.SetHash(*s)
	}
	return fuo
}

// ClearHash clears the value of the "hash" field.
func (fuo *FileUpdateOne) ClearHash() *FileUpdateOne {
	fuo.mutation.ClearHash()
	return fuo
}

// SetProcessingResult sets the "processing_result" field.
func (fuo *FileUpdateOne) SetProcessingResult(m map[string]interface{}) *FileUpdateOne {
	fuo.mutation.SetProcessingResult(m)
	return fuo
}

// ClearProcessingResult clears the value of the "processing_result" field.
func (fuo *FileUpdateOne) ClearProcessingResult() *FileUpdateOne {
	fuo.mutation.ClearProcessingResult()
	return fuo
}

// Mutation returns the FileMutation object of the builder.
func (fuo *FileUpdateOne) Mutation() *FileMutation {
	return fuo.mutation
}

// Where appends a list predicates to the FileUpdate builder.
func (fuo *FileUpdateOne) Where(ps ...predicate.File) *FileUpdateOne {
	fuo.mutation.Where(ps...)
	return fuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fuo *FileUpdateOne) Select(field string, fields ...string) *FileUpdateOne {
	fuo.fields = append([]string{field}, fields...)
	return fuo
}

// Save executes the query and returns the updated File entity.
func (fuo *FileUpdateOne) Save(ctx context.Context) (*File, error) {
	fuo.defaults()
	return withHooks(ctx, fuo.sqlSave, fuo.mutation, fuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fuo *FileUpdateOne) SaveX(ctx context.Context) *File {
	node, err := fuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fuo *FileUpdateOne) Exec(ctx context.Context) error {
	_, err := fuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuo *FileUpdateOne) ExecX(ctx context.Context) {
	if err := fuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fuo *FileUpdateOne) defaults() {
	if _, ok := fuo.mutation.UpdatedAt(); !ok && !fuo.mutation.UpdatedAtCleared() {
		v := file.UpdateDefaultUpdatedAt()
		fuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fuo *FileUpdateOne) check() error {
	if v, ok := fuo.mutation.Name(); ok {
		if err := file.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "File.name": %w`, err)}
		}
	}
	return nil
}

func (fuo *FileUpdateOne) sqlSave(ctx context.Context) (_node *File, err error) {
	if err := fuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(file.Table, file.Columns, sqlgraph.NewFieldSpec(file.FieldID, field.TypeString))
	id, ok := fuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "File.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, file.FieldID)
		for _, f := range fields {
			if !file.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != file.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fuo.mutation.Name(); ok {
		_spec.SetField(file.FieldName, field.TypeString, value)
	}
	if fuo.mutation.NameCleared() {
		_spec.ClearField(file.FieldName, field.TypeString)
	}
	if value, ok := fuo.mutation.Path(); ok {
		_spec.SetField(file.FieldPath, field.TypeString, value)
	}
	if fuo.mutation.PathCleared() {
		_spec.ClearField(file.FieldPath, field.TypeString)
	}
	if value, ok := fuo.mutation.GetType(); ok {
		_spec.SetField(file.FieldType, field.TypeString, value)
	}
	if fuo.mutation.TypeCleared() {
		_spec.ClearField(file.FieldType, field.TypeString)
	}
	if value, ok := fuo.mutation.Size(); ok {
		_spec.SetField(file.FieldSize, field.TypeInt, value)
	}
	if value, ok := fuo.mutation.AddedSize(); ok {
		_spec.AddField(file.FieldSize, field.TypeInt, value)
	}
	if value, ok := fuo.mutation.Storage(); ok {
		_spec.SetField(file.FieldStorage, field.TypeString, value)
	}
	if fuo.mutation.StorageCleared() {
		_spec.ClearField(file.FieldStorage, field.TypeString)
	}
	if value, ok := fuo.mutation.Bucket(); ok {
		_spec.SetField(file.FieldBucket, field.TypeString, value)
	}
	if fuo.mutation.BucketCleared() {
		_spec.ClearField(file.FieldBucket, field.TypeString)
	}
	if value, ok := fuo.mutation.Endpoint(); ok {
		_spec.SetField(file.FieldEndpoint, field.TypeString, value)
	}
	if fuo.mutation.EndpointCleared() {
		_spec.ClearField(file.FieldEndpoint, field.TypeString)
	}
	if value, ok := fuo.mutation.OwnerID(); ok {
		_spec.SetField(file.FieldOwnerID, field.TypeString, value)
	}
	if fuo.mutation.OwnerIDCleared() {
		_spec.ClearField(file.FieldOwnerID, field.TypeString)
	}
	if value, ok := fuo.mutation.Extras(); ok {
		_spec.SetField(file.FieldExtras, field.TypeJSON, value)
	}
	if fuo.mutation.ExtrasCleared() {
		_spec.ClearField(file.FieldExtras, field.TypeJSON)
	}
	if value, ok := fuo.mutation.CreatedBy(); ok {
		_spec.SetField(file.FieldCreatedBy, field.TypeString, value)
	}
	if fuo.mutation.CreatedByCleared() {
		_spec.ClearField(file.FieldCreatedBy, field.TypeString)
	}
	if value, ok := fuo.mutation.UpdatedBy(); ok {
		_spec.SetField(file.FieldUpdatedBy, field.TypeString, value)
	}
	if fuo.mutation.UpdatedByCleared() {
		_spec.ClearField(file.FieldUpdatedBy, field.TypeString)
	}
	if fuo.mutation.CreatedAtCleared() {
		_spec.ClearField(file.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := fuo.mutation.UpdatedAt(); ok {
		_spec.SetField(file.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := fuo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(file.FieldUpdatedAt, field.TypeInt64, value)
	}
	if fuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(file.FieldUpdatedAt, field.TypeInt64)
	}
	if value, ok := fuo.mutation.OriginalName(); ok {
		_spec.SetField(file.FieldOriginalName, field.TypeString, value)
	}
	if fuo.mutation.OriginalNameCleared() {
		_spec.ClearField(file.FieldOriginalName, field.TypeString)
	}
	if value, ok := fuo.mutation.AccessLevel(); ok {
		_spec.SetField(file.FieldAccessLevel, field.TypeString, value)
	}
	if value, ok := fuo.mutation.ExpiresAt(); ok {
		_spec.SetField(file.FieldExpiresAt, field.TypeInt64, value)
	}
	if value, ok := fuo.mutation.AddedExpiresAt(); ok {
		_spec.AddField(file.FieldExpiresAt, field.TypeInt64, value)
	}
	if fuo.mutation.ExpiresAtCleared() {
		_spec.ClearField(file.FieldExpiresAt, field.TypeInt64)
	}
	if value, ok := fuo.mutation.Tags(); ok {
		_spec.SetField(file.FieldTags, field.TypeJSON, value)
	}
	if value, ok := fuo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, file.FieldTags, value)
		})
	}
	if fuo.mutation.TagsCleared() {
		_spec.ClearField(file.FieldTags, field.TypeJSON)
	}
	if value, ok := fuo.mutation.IsPublic(); ok {
		_spec.SetField(file.FieldIsPublic, field.TypeBool, value)
	}
	if value, ok := fuo.mutation.Category(); ok {
		_spec.SetField(file.FieldCategory, field.TypeString, value)
	}
	if value, ok := fuo.mutation.Hash(); ok {
		_spec.SetField(file.FieldHash, field.TypeString, value)
	}
	if fuo.mutation.HashCleared() {
		_spec.ClearField(file.FieldHash, field.TypeString)
	}
	if value, ok := fuo.mutation.ProcessingResult(); ok {
		_spec.SetField(file.FieldProcessingResult, field.TypeJSON, value)
	}
	if fuo.mutation.ProcessingResultCleared() {
		_spec.ClearField(file.FieldProcessingResult, field.TypeJSON)
	}
	_node = &File{config: fuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{file.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fuo.mutation.done = true
	return _node, nil
}
