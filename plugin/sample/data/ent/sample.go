// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"ncobase/plugin/sample/data/ent/sample"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Sample is the model entity for the Sample schema.
type Sample struct {
	config `json:"-"`
	// ID of the ent.
	// primary key
	ID string `json:"id,omitempty"`
	// Identifier
	Identifier string `json:"identifier,omitempty"`
	// name
	Name string `json:"name,omitempty"`
	// prefix
	Prefix string `json:"prefix,omitempty"`
	// suffix
	Suffix string `json:"suffix,omitempty"`
	// Start value
	StartValue int `json:"start_value,omitempty"`
	// Increment step
	IncrementStep int `json:"increment_step,omitempty"`
	// Date format, default YYYYMMDD
	DateFormat string `json:"date_format,omitempty"`
	// Current value
	CurrentValue int `json:"current_value,omitempty"`
	// is disabled
	Disabled bool `json:"disabled,omitempty"`
	// description
	Description string `json:"description,omitempty"`
	// tenant id
	TenantID string `json:"tenant_id,omitempty"`
	// id of the creator
	CreatedBy string `json:"created_by,omitempty"`
	// id of the last updater
	UpdatedBy string `json:"updated_by,omitempty"`
	// created at
	CreatedAt int64 `json:"created_at,omitempty"`
	// updated at
	UpdatedAt    int64 `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Sample) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case sample.FieldDisabled:
			values[i] = new(sql.NullBool)
		case sample.FieldStartValue, sample.FieldIncrementStep, sample.FieldCurrentValue, sample.FieldCreatedAt, sample.FieldUpdatedAt:
			values[i] = new(sql.NullInt64)
		case sample.FieldID, sample.FieldIdentifier, sample.FieldName, sample.FieldPrefix, sample.FieldSuffix, sample.FieldDateFormat, sample.FieldDescription, sample.FieldTenantID, sample.FieldCreatedBy, sample.FieldUpdatedBy:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Sample fields.
func (s *Sample) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sample.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				s.ID = value.String
			}
		case sample.FieldIdentifier:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field identifier", values[i])
			} else if value.Valid {
				s.Identifier = value.String
			}
		case sample.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				s.Name = value.String
			}
		case sample.FieldPrefix:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field prefix", values[i])
			} else if value.Valid {
				s.Prefix = value.String
			}
		case sample.FieldSuffix:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field suffix", values[i])
			} else if value.Valid {
				s.Suffix = value.String
			}
		case sample.FieldStartValue:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field start_value", values[i])
			} else if value.Valid {
				s.StartValue = int(value.Int64)
			}
		case sample.FieldIncrementStep:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field increment_step", values[i])
			} else if value.Valid {
				s.IncrementStep = int(value.Int64)
			}
		case sample.FieldDateFormat:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field date_format", values[i])
			} else if value.Valid {
				s.DateFormat = value.String
			}
		case sample.FieldCurrentValue:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field current_value", values[i])
			} else if value.Valid {
				s.CurrentValue = int(value.Int64)
			}
		case sample.FieldDisabled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field disabled", values[i])
			} else if value.Valid {
				s.Disabled = value.Bool
			}
		case sample.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				s.Description = value.String
			}
		case sample.FieldTenantID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				s.TenantID = value.String
			}
		case sample.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				s.CreatedBy = value.String
			}
		case sample.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				s.UpdatedBy = value.String
			}
		case sample.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				s.CreatedAt = value.Int64
			}
		case sample.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				s.UpdatedAt = value.Int64
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Sample.
// This includes values selected through modifiers, order, etc.
func (s *Sample) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// Update returns a builder for updating this Sample.
// Note that you need to call Sample.Unwrap() before calling this method if this Sample
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Sample) Update() *SampleUpdateOne {
	return NewSampleClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Sample entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Sample) Unwrap() *Sample {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Sample is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Sample) String() string {
	var builder strings.Builder
	builder.WriteString("Sample(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("identifier=")
	builder.WriteString(s.Identifier)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(s.Name)
	builder.WriteString(", ")
	builder.WriteString("prefix=")
	builder.WriteString(s.Prefix)
	builder.WriteString(", ")
	builder.WriteString("suffix=")
	builder.WriteString(s.Suffix)
	builder.WriteString(", ")
	builder.WriteString("start_value=")
	builder.WriteString(fmt.Sprintf("%v", s.StartValue))
	builder.WriteString(", ")
	builder.WriteString("increment_step=")
	builder.WriteString(fmt.Sprintf("%v", s.IncrementStep))
	builder.WriteString(", ")
	builder.WriteString("date_format=")
	builder.WriteString(s.DateFormat)
	builder.WriteString(", ")
	builder.WriteString("current_value=")
	builder.WriteString(fmt.Sprintf("%v", s.CurrentValue))
	builder.WriteString(", ")
	builder.WriteString("disabled=")
	builder.WriteString(fmt.Sprintf("%v", s.Disabled))
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(s.Description)
	builder.WriteString(", ")
	builder.WriteString("tenant_id=")
	builder.WriteString(s.TenantID)
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(s.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(s.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", s.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", s.UpdatedAt))
	builder.WriteByte(')')
	return builder.String()
}

// Samples is a parsable slice of Sample.
type Samples []*Sample
