// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ncobase/plugin/sample/data/ent/predicate"
	"ncobase/plugin/sample/data/ent/sample"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SampleUpdate is the builder for updating Sample entities.
type SampleUpdate struct {
	config
	hooks    []Hook
	mutation *SampleMutation
}

// Where appends a list predicates to the SampleUpdate builder.
func (su *SampleUpdate) Where(ps ...predicate.Sample) *SampleUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetIdentifier sets the "identifier" field.
func (su *SampleUpdate) SetIdentifier(s string) *SampleUpdate {
	su.mutation.SetIdentifier(s)
	return su
}

// SetNillableIdentifier sets the "identifier" field if the given value is not nil.
func (su *SampleUpdate) SetNillableIdentifier(s *string) *SampleUpdate {
	if s != nil {
		su.SetIdentifier(*s)
	}
	return su
}

// ClearIdentifier clears the value of the "identifier" field.
func (su *SampleUpdate) ClearIdentifier() *SampleUpdate {
	su.mutation.ClearIdentifier()
	return su
}

// SetName sets the "name" field.
func (su *SampleUpdate) SetName(s string) *SampleUpdate {
	su.mutation.SetName(s)
	return su
}

// SetNillableName sets the "name" field if the given value is not nil.
func (su *SampleUpdate) SetNillableName(s *string) *SampleUpdate {
	if s != nil {
		su.SetName(*s)
	}
	return su
}

// ClearName clears the value of the "name" field.
func (su *SampleUpdate) ClearName() *SampleUpdate {
	su.mutation.ClearName()
	return su
}

// SetPrefix sets the "prefix" field.
func (su *SampleUpdate) SetPrefix(s string) *SampleUpdate {
	su.mutation.SetPrefix(s)
	return su
}

// SetNillablePrefix sets the "prefix" field if the given value is not nil.
func (su *SampleUpdate) SetNillablePrefix(s *string) *SampleUpdate {
	if s != nil {
		su.SetPrefix(*s)
	}
	return su
}

// ClearPrefix clears the value of the "prefix" field.
func (su *SampleUpdate) ClearPrefix() *SampleUpdate {
	su.mutation.ClearPrefix()
	return su
}

// SetSuffix sets the "suffix" field.
func (su *SampleUpdate) SetSuffix(s string) *SampleUpdate {
	su.mutation.SetSuffix(s)
	return su
}

// SetNillableSuffix sets the "suffix" field if the given value is not nil.
func (su *SampleUpdate) SetNillableSuffix(s *string) *SampleUpdate {
	if s != nil {
		su.SetSuffix(*s)
	}
	return su
}

// ClearSuffix clears the value of the "suffix" field.
func (su *SampleUpdate) ClearSuffix() *SampleUpdate {
	su.mutation.ClearSuffix()
	return su
}

// SetStartValue sets the "start_value" field.
func (su *SampleUpdate) SetStartValue(i int) *SampleUpdate {
	su.mutation.ResetStartValue()
	su.mutation.SetStartValue(i)
	return su
}

// SetNillableStartValue sets the "start_value" field if the given value is not nil.
func (su *SampleUpdate) SetNillableStartValue(i *int) *SampleUpdate {
	if i != nil {
		su.SetStartValue(*i)
	}
	return su
}

// AddStartValue adds i to the "start_value" field.
func (su *SampleUpdate) AddStartValue(i int) *SampleUpdate {
	su.mutation.AddStartValue(i)
	return su
}

// SetIncrementStep sets the "increment_step" field.
func (su *SampleUpdate) SetIncrementStep(i int) *SampleUpdate {
	su.mutation.ResetIncrementStep()
	su.mutation.SetIncrementStep(i)
	return su
}

// SetNillableIncrementStep sets the "increment_step" field if the given value is not nil.
func (su *SampleUpdate) SetNillableIncrementStep(i *int) *SampleUpdate {
	if i != nil {
		su.SetIncrementStep(*i)
	}
	return su
}

// AddIncrementStep adds i to the "increment_step" field.
func (su *SampleUpdate) AddIncrementStep(i int) *SampleUpdate {
	su.mutation.AddIncrementStep(i)
	return su
}

// SetDateFormat sets the "date_format" field.
func (su *SampleUpdate) SetDateFormat(s string) *SampleUpdate {
	su.mutation.SetDateFormat(s)
	return su
}

// SetNillableDateFormat sets the "date_format" field if the given value is not nil.
func (su *SampleUpdate) SetNillableDateFormat(s *string) *SampleUpdate {
	if s != nil {
		su.SetDateFormat(*s)
	}
	return su
}

// ClearDateFormat clears the value of the "date_format" field.
func (su *SampleUpdate) ClearDateFormat() *SampleUpdate {
	su.mutation.ClearDateFormat()
	return su
}

// SetCurrentValue sets the "current_value" field.
func (su *SampleUpdate) SetCurrentValue(i int) *SampleUpdate {
	su.mutation.ResetCurrentValue()
	su.mutation.SetCurrentValue(i)
	return su
}

// SetNillableCurrentValue sets the "current_value" field if the given value is not nil.
func (su *SampleUpdate) SetNillableCurrentValue(i *int) *SampleUpdate {
	if i != nil {
		su.SetCurrentValue(*i)
	}
	return su
}

// AddCurrentValue adds i to the "current_value" field.
func (su *SampleUpdate) AddCurrentValue(i int) *SampleUpdate {
	su.mutation.AddCurrentValue(i)
	return su
}

// SetDisabled sets the "disabled" field.
func (su *SampleUpdate) SetDisabled(b bool) *SampleUpdate {
	su.mutation.SetDisabled(b)
	return su
}

// SetNillableDisabled sets the "disabled" field if the given value is not nil.
func (su *SampleUpdate) SetNillableDisabled(b *bool) *SampleUpdate {
	if b != nil {
		su.SetDisabled(*b)
	}
	return su
}

// ClearDisabled clears the value of the "disabled" field.
func (su *SampleUpdate) ClearDisabled() *SampleUpdate {
	su.mutation.ClearDisabled()
	return su
}

// SetDescription sets the "description" field.
func (su *SampleUpdate) SetDescription(s string) *SampleUpdate {
	su.mutation.SetDescription(s)
	return su
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (su *SampleUpdate) SetNillableDescription(s *string) *SampleUpdate {
	if s != nil {
		su.SetDescription(*s)
	}
	return su
}

// ClearDescription clears the value of the "description" field.
func (su *SampleUpdate) ClearDescription() *SampleUpdate {
	su.mutation.ClearDescription()
	return su
}

// SetTenantID sets the "tenant_id" field.
func (su *SampleUpdate) SetTenantID(s string) *SampleUpdate {
	su.mutation.SetTenantID(s)
	return su
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (su *SampleUpdate) SetNillableTenantID(s *string) *SampleUpdate {
	if s != nil {
		su.SetTenantID(*s)
	}
	return su
}

// ClearTenantID clears the value of the "tenant_id" field.
func (su *SampleUpdate) ClearTenantID() *SampleUpdate {
	su.mutation.ClearTenantID()
	return su
}

// SetCreatedBy sets the "created_by" field.
func (su *SampleUpdate) SetCreatedBy(s string) *SampleUpdate {
	su.mutation.SetCreatedBy(s)
	return su
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (su *SampleUpdate) SetNillableCreatedBy(s *string) *SampleUpdate {
	if s != nil {
		su.SetCreatedBy(*s)
	}
	return su
}

// ClearCreatedBy clears the value of the "created_by" field.
func (su *SampleUpdate) ClearCreatedBy() *SampleUpdate {
	su.mutation.ClearCreatedBy()
	return su
}

// SetUpdatedBy sets the "updated_by" field.
func (su *SampleUpdate) SetUpdatedBy(s string) *SampleUpdate {
	su.mutation.SetUpdatedBy(s)
	return su
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (su *SampleUpdate) SetNillableUpdatedBy(s *string) *SampleUpdate {
	if s != nil {
		su.SetUpdatedBy(*s)
	}
	return su
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (su *SampleUpdate) ClearUpdatedBy() *SampleUpdate {
	su.mutation.ClearUpdatedBy()
	return su
}

// SetUpdatedAt sets the "updated_at" field.
func (su *SampleUpdate) SetUpdatedAt(i int64) *SampleUpdate {
	su.mutation.ResetUpdatedAt()
	su.mutation.SetUpdatedAt(i)
	return su
}

// AddUpdatedAt adds i to the "updated_at" field.
func (su *SampleUpdate) AddUpdatedAt(i int64) *SampleUpdate {
	su.mutation.AddUpdatedAt(i)
	return su
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (su *SampleUpdate) ClearUpdatedAt() *SampleUpdate {
	su.mutation.ClearUpdatedAt()
	return su
}

// Mutation returns the SampleMutation object of the builder.
func (su *SampleUpdate) Mutation() *SampleMutation {
	return su.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SampleUpdate) Save(ctx context.Context) (int, error) {
	su.defaults()
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SampleUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SampleUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SampleUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *SampleUpdate) defaults() {
	if _, ok := su.mutation.UpdatedAt(); !ok && !su.mutation.UpdatedAtCleared() {
		v := sample.UpdateDefaultUpdatedAt()
		su.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *SampleUpdate) check() error {
	if v, ok := su.mutation.Identifier(); ok {
		if err := sample.IdentifierValidator(v); err != nil {
			return &ValidationError{Name: "identifier", err: fmt.Errorf(`ent: validator failed for field "Sample.identifier": %w`, err)}
		}
	}
	if v, ok := su.mutation.TenantID(); ok {
		if err := sample.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "Sample.tenant_id": %w`, err)}
		}
	}
	if v, ok := su.mutation.CreatedBy(); ok {
		if err := sample.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "Sample.created_by": %w`, err)}
		}
	}
	if v, ok := su.mutation.UpdatedBy(); ok {
		if err := sample.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "Sample.updated_by": %w`, err)}
		}
	}
	return nil
}

func (su *SampleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(sample.Table, sample.Columns, sqlgraph.NewFieldSpec(sample.FieldID, field.TypeString))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Identifier(); ok {
		_spec.SetField(sample.FieldIdentifier, field.TypeString, value)
	}
	if su.mutation.IdentifierCleared() {
		_spec.ClearField(sample.FieldIdentifier, field.TypeString)
	}
	if value, ok := su.mutation.Name(); ok {
		_spec.SetField(sample.FieldName, field.TypeString, value)
	}
	if su.mutation.NameCleared() {
		_spec.ClearField(sample.FieldName, field.TypeString)
	}
	if value, ok := su.mutation.Prefix(); ok {
		_spec.SetField(sample.FieldPrefix, field.TypeString, value)
	}
	if su.mutation.PrefixCleared() {
		_spec.ClearField(sample.FieldPrefix, field.TypeString)
	}
	if value, ok := su.mutation.Suffix(); ok {
		_spec.SetField(sample.FieldSuffix, field.TypeString, value)
	}
	if su.mutation.SuffixCleared() {
		_spec.ClearField(sample.FieldSuffix, field.TypeString)
	}
	if value, ok := su.mutation.StartValue(); ok {
		_spec.SetField(sample.FieldStartValue, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedStartValue(); ok {
		_spec.AddField(sample.FieldStartValue, field.TypeInt, value)
	}
	if value, ok := su.mutation.IncrementStep(); ok {
		_spec.SetField(sample.FieldIncrementStep, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedIncrementStep(); ok {
		_spec.AddField(sample.FieldIncrementStep, field.TypeInt, value)
	}
	if value, ok := su.mutation.DateFormat(); ok {
		_spec.SetField(sample.FieldDateFormat, field.TypeString, value)
	}
	if su.mutation.DateFormatCleared() {
		_spec.ClearField(sample.FieldDateFormat, field.TypeString)
	}
	if value, ok := su.mutation.CurrentValue(); ok {
		_spec.SetField(sample.FieldCurrentValue, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedCurrentValue(); ok {
		_spec.AddField(sample.FieldCurrentValue, field.TypeInt, value)
	}
	if value, ok := su.mutation.Disabled(); ok {
		_spec.SetField(sample.FieldDisabled, field.TypeBool, value)
	}
	if su.mutation.DisabledCleared() {
		_spec.ClearField(sample.FieldDisabled, field.TypeBool)
	}
	if value, ok := su.mutation.Description(); ok {
		_spec.SetField(sample.FieldDescription, field.TypeString, value)
	}
	if su.mutation.DescriptionCleared() {
		_spec.ClearField(sample.FieldDescription, field.TypeString)
	}
	if value, ok := su.mutation.TenantID(); ok {
		_spec.SetField(sample.FieldTenantID, field.TypeString, value)
	}
	if su.mutation.TenantIDCleared() {
		_spec.ClearField(sample.FieldTenantID, field.TypeString)
	}
	if value, ok := su.mutation.CreatedBy(); ok {
		_spec.SetField(sample.FieldCreatedBy, field.TypeString, value)
	}
	if su.mutation.CreatedByCleared() {
		_spec.ClearField(sample.FieldCreatedBy, field.TypeString)
	}
	if value, ok := su.mutation.UpdatedBy(); ok {
		_spec.SetField(sample.FieldUpdatedBy, field.TypeString, value)
	}
	if su.mutation.UpdatedByCleared() {
		_spec.ClearField(sample.FieldUpdatedBy, field.TypeString)
	}
	if su.mutation.CreatedAtCleared() {
		_spec.ClearField(sample.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.SetField(sample.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := su.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(sample.FieldUpdatedAt, field.TypeInt64, value)
	}
	if su.mutation.UpdatedAtCleared() {
		_spec.ClearField(sample.FieldUpdatedAt, field.TypeInt64)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sample.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SampleUpdateOne is the builder for updating a single Sample entity.
type SampleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SampleMutation
}

// SetIdentifier sets the "identifier" field.
func (suo *SampleUpdateOne) SetIdentifier(s string) *SampleUpdateOne {
	suo.mutation.SetIdentifier(s)
	return suo
}

// SetNillableIdentifier sets the "identifier" field if the given value is not nil.
func (suo *SampleUpdateOne) SetNillableIdentifier(s *string) *SampleUpdateOne {
	if s != nil {
		suo.SetIdentifier(*s)
	}
	return suo
}

// ClearIdentifier clears the value of the "identifier" field.
func (suo *SampleUpdateOne) ClearIdentifier() *SampleUpdateOne {
	suo.mutation.ClearIdentifier()
	return suo
}

// SetName sets the "name" field.
func (suo *SampleUpdateOne) SetName(s string) *SampleUpdateOne {
	suo.mutation.SetName(s)
	return suo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (suo *SampleUpdateOne) SetNillableName(s *string) *SampleUpdateOne {
	if s != nil {
		suo.SetName(*s)
	}
	return suo
}

// ClearName clears the value of the "name" field.
func (suo *SampleUpdateOne) ClearName() *SampleUpdateOne {
	suo.mutation.ClearName()
	return suo
}

// SetPrefix sets the "prefix" field.
func (suo *SampleUpdateOne) SetPrefix(s string) *SampleUpdateOne {
	suo.mutation.SetPrefix(s)
	return suo
}

// SetNillablePrefix sets the "prefix" field if the given value is not nil.
func (suo *SampleUpdateOne) SetNillablePrefix(s *string) *SampleUpdateOne {
	if s != nil {
		suo.SetPrefix(*s)
	}
	return suo
}

// ClearPrefix clears the value of the "prefix" field.
func (suo *SampleUpdateOne) ClearPrefix() *SampleUpdateOne {
	suo.mutation.ClearPrefix()
	return suo
}

// SetSuffix sets the "suffix" field.
func (suo *SampleUpdateOne) SetSuffix(s string) *SampleUpdateOne {
	suo.mutation.SetSuffix(s)
	return suo
}

// SetNillableSuffix sets the "suffix" field if the given value is not nil.
func (suo *SampleUpdateOne) SetNillableSuffix(s *string) *SampleUpdateOne {
	if s != nil {
		suo.SetSuffix(*s)
	}
	return suo
}

// ClearSuffix clears the value of the "suffix" field.
func (suo *SampleUpdateOne) ClearSuffix() *SampleUpdateOne {
	suo.mutation.ClearSuffix()
	return suo
}

// SetStartValue sets the "start_value" field.
func (suo *SampleUpdateOne) SetStartValue(i int) *SampleUpdateOne {
	suo.mutation.ResetStartValue()
	suo.mutation.SetStartValue(i)
	return suo
}

// SetNillableStartValue sets the "start_value" field if the given value is not nil.
func (suo *SampleUpdateOne) SetNillableStartValue(i *int) *SampleUpdateOne {
	if i != nil {
		suo.SetStartValue(*i)
	}
	return suo
}

// AddStartValue adds i to the "start_value" field.
func (suo *SampleUpdateOne) AddStartValue(i int) *SampleUpdateOne {
	suo.mutation.AddStartValue(i)
	return suo
}

// SetIncrementStep sets the "increment_step" field.
func (suo *SampleUpdateOne) SetIncrementStep(i int) *SampleUpdateOne {
	suo.mutation.ResetIncrementStep()
	suo.mutation.SetIncrementStep(i)
	return suo
}

// SetNillableIncrementStep sets the "increment_step" field if the given value is not nil.
func (suo *SampleUpdateOne) SetNillableIncrementStep(i *int) *SampleUpdateOne {
	if i != nil {
		suo.SetIncrementStep(*i)
	}
	return suo
}

// AddIncrementStep adds i to the "increment_step" field.
func (suo *SampleUpdateOne) AddIncrementStep(i int) *SampleUpdateOne {
	suo.mutation.AddIncrementStep(i)
	return suo
}

// SetDateFormat sets the "date_format" field.
func (suo *SampleUpdateOne) SetDateFormat(s string) *SampleUpdateOne {
	suo.mutation.SetDateFormat(s)
	return suo
}

// SetNillableDateFormat sets the "date_format" field if the given value is not nil.
func (suo *SampleUpdateOne) SetNillableDateFormat(s *string) *SampleUpdateOne {
	if s != nil {
		suo.SetDateFormat(*s)
	}
	return suo
}

// ClearDateFormat clears the value of the "date_format" field.
func (suo *SampleUpdateOne) ClearDateFormat() *SampleUpdateOne {
	suo.mutation.ClearDateFormat()
	return suo
}

// SetCurrentValue sets the "current_value" field.
func (suo *SampleUpdateOne) SetCurrentValue(i int) *SampleUpdateOne {
	suo.mutation.ResetCurrentValue()
	suo.mutation.SetCurrentValue(i)
	return suo
}

// SetNillableCurrentValue sets the "current_value" field if the given value is not nil.
func (suo *SampleUpdateOne) SetNillableCurrentValue(i *int) *SampleUpdateOne {
	if i != nil {
		suo.SetCurrentValue(*i)
	}
	return suo
}

// AddCurrentValue adds i to the "current_value" field.
func (suo *SampleUpdateOne) AddCurrentValue(i int) *SampleUpdateOne {
	suo.mutation.AddCurrentValue(i)
	return suo
}

// SetDisabled sets the "disabled" field.
func (suo *SampleUpdateOne) SetDisabled(b bool) *SampleUpdateOne {
	suo.mutation.SetDisabled(b)
	return suo
}

// SetNillableDisabled sets the "disabled" field if the given value is not nil.
func (suo *SampleUpdateOne) SetNillableDisabled(b *bool) *SampleUpdateOne {
	if b != nil {
		suo.SetDisabled(*b)
	}
	return suo
}

// ClearDisabled clears the value of the "disabled" field.
func (suo *SampleUpdateOne) ClearDisabled() *SampleUpdateOne {
	suo.mutation.ClearDisabled()
	return suo
}

// SetDescription sets the "description" field.
func (suo *SampleUpdateOne) SetDescription(s string) *SampleUpdateOne {
	suo.mutation.SetDescription(s)
	return suo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (suo *SampleUpdateOne) SetNillableDescription(s *string) *SampleUpdateOne {
	if s != nil {
		suo.SetDescription(*s)
	}
	return suo
}

// ClearDescription clears the value of the "description" field.
func (suo *SampleUpdateOne) ClearDescription() *SampleUpdateOne {
	suo.mutation.ClearDescription()
	return suo
}

// SetTenantID sets the "tenant_id" field.
func (suo *SampleUpdateOne) SetTenantID(s string) *SampleUpdateOne {
	suo.mutation.SetTenantID(s)
	return suo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (suo *SampleUpdateOne) SetNillableTenantID(s *string) *SampleUpdateOne {
	if s != nil {
		suo.SetTenantID(*s)
	}
	return suo
}

// ClearTenantID clears the value of the "tenant_id" field.
func (suo *SampleUpdateOne) ClearTenantID() *SampleUpdateOne {
	suo.mutation.ClearTenantID()
	return suo
}

// SetCreatedBy sets the "created_by" field.
func (suo *SampleUpdateOne) SetCreatedBy(s string) *SampleUpdateOne {
	suo.mutation.SetCreatedBy(s)
	return suo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (suo *SampleUpdateOne) SetNillableCreatedBy(s *string) *SampleUpdateOne {
	if s != nil {
		suo.SetCreatedBy(*s)
	}
	return suo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (suo *SampleUpdateOne) ClearCreatedBy() *SampleUpdateOne {
	suo.mutation.ClearCreatedBy()
	return suo
}

// SetUpdatedBy sets the "updated_by" field.
func (suo *SampleUpdateOne) SetUpdatedBy(s string) *SampleUpdateOne {
	suo.mutation.SetUpdatedBy(s)
	return suo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (suo *SampleUpdateOne) SetNillableUpdatedBy(s *string) *SampleUpdateOne {
	if s != nil {
		suo.SetUpdatedBy(*s)
	}
	return suo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (suo *SampleUpdateOne) ClearUpdatedBy() *SampleUpdateOne {
	suo.mutation.ClearUpdatedBy()
	return suo
}

// SetUpdatedAt sets the "updated_at" field.
func (suo *SampleUpdateOne) SetUpdatedAt(i int64) *SampleUpdateOne {
	suo.mutation.ResetUpdatedAt()
	suo.mutation.SetUpdatedAt(i)
	return suo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (suo *SampleUpdateOne) AddUpdatedAt(i int64) *SampleUpdateOne {
	suo.mutation.AddUpdatedAt(i)
	return suo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (suo *SampleUpdateOne) ClearUpdatedAt() *SampleUpdateOne {
	suo.mutation.ClearUpdatedAt()
	return suo
}

// Mutation returns the SampleMutation object of the builder.
func (suo *SampleUpdateOne) Mutation() *SampleMutation {
	return suo.mutation
}

// Where appends a list predicates to the SampleUpdate builder.
func (suo *SampleUpdateOne) Where(ps ...predicate.Sample) *SampleUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SampleUpdateOne) Select(field string, fields ...string) *SampleUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Sample entity.
func (suo *SampleUpdateOne) Save(ctx context.Context) (*Sample, error) {
	suo.defaults()
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SampleUpdateOne) SaveX(ctx context.Context) *Sample {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SampleUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SampleUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *SampleUpdateOne) defaults() {
	if _, ok := suo.mutation.UpdatedAt(); !ok && !suo.mutation.UpdatedAtCleared() {
		v := sample.UpdateDefaultUpdatedAt()
		suo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *SampleUpdateOne) check() error {
	if v, ok := suo.mutation.Identifier(); ok {
		if err := sample.IdentifierValidator(v); err != nil {
			return &ValidationError{Name: "identifier", err: fmt.Errorf(`ent: validator failed for field "Sample.identifier": %w`, err)}
		}
	}
	if v, ok := suo.mutation.TenantID(); ok {
		if err := sample.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "Sample.tenant_id": %w`, err)}
		}
	}
	if v, ok := suo.mutation.CreatedBy(); ok {
		if err := sample.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "Sample.created_by": %w`, err)}
		}
	}
	if v, ok := suo.mutation.UpdatedBy(); ok {
		if err := sample.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "Sample.updated_by": %w`, err)}
		}
	}
	return nil
}

func (suo *SampleUpdateOne) sqlSave(ctx context.Context) (_node *Sample, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(sample.Table, sample.Columns, sqlgraph.NewFieldSpec(sample.FieldID, field.TypeString))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Sample.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sample.FieldID)
		for _, f := range fields {
			if !sample.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != sample.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Identifier(); ok {
		_spec.SetField(sample.FieldIdentifier, field.TypeString, value)
	}
	if suo.mutation.IdentifierCleared() {
		_spec.ClearField(sample.FieldIdentifier, field.TypeString)
	}
	if value, ok := suo.mutation.Name(); ok {
		_spec.SetField(sample.FieldName, field.TypeString, value)
	}
	if suo.mutation.NameCleared() {
		_spec.ClearField(sample.FieldName, field.TypeString)
	}
	if value, ok := suo.mutation.Prefix(); ok {
		_spec.SetField(sample.FieldPrefix, field.TypeString, value)
	}
	if suo.mutation.PrefixCleared() {
		_spec.ClearField(sample.FieldPrefix, field.TypeString)
	}
	if value, ok := suo.mutation.Suffix(); ok {
		_spec.SetField(sample.FieldSuffix, field.TypeString, value)
	}
	if suo.mutation.SuffixCleared() {
		_spec.ClearField(sample.FieldSuffix, field.TypeString)
	}
	if value, ok := suo.mutation.StartValue(); ok {
		_spec.SetField(sample.FieldStartValue, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedStartValue(); ok {
		_spec.AddField(sample.FieldStartValue, field.TypeInt, value)
	}
	if value, ok := suo.mutation.IncrementStep(); ok {
		_spec.SetField(sample.FieldIncrementStep, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedIncrementStep(); ok {
		_spec.AddField(sample.FieldIncrementStep, field.TypeInt, value)
	}
	if value, ok := suo.mutation.DateFormat(); ok {
		_spec.SetField(sample.FieldDateFormat, field.TypeString, value)
	}
	if suo.mutation.DateFormatCleared() {
		_spec.ClearField(sample.FieldDateFormat, field.TypeString)
	}
	if value, ok := suo.mutation.CurrentValue(); ok {
		_spec.SetField(sample.FieldCurrentValue, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedCurrentValue(); ok {
		_spec.AddField(sample.FieldCurrentValue, field.TypeInt, value)
	}
	if value, ok := suo.mutation.Disabled(); ok {
		_spec.SetField(sample.FieldDisabled, field.TypeBool, value)
	}
	if suo.mutation.DisabledCleared() {
		_spec.ClearField(sample.FieldDisabled, field.TypeBool)
	}
	if value, ok := suo.mutation.Description(); ok {
		_spec.SetField(sample.FieldDescription, field.TypeString, value)
	}
	if suo.mutation.DescriptionCleared() {
		_spec.ClearField(sample.FieldDescription, field.TypeString)
	}
	if value, ok := suo.mutation.TenantID(); ok {
		_spec.SetField(sample.FieldTenantID, field.TypeString, value)
	}
	if suo.mutation.TenantIDCleared() {
		_spec.ClearField(sample.FieldTenantID, field.TypeString)
	}
	if value, ok := suo.mutation.CreatedBy(); ok {
		_spec.SetField(sample.FieldCreatedBy, field.TypeString, value)
	}
	if suo.mutation.CreatedByCleared() {
		_spec.ClearField(sample.FieldCreatedBy, field.TypeString)
	}
	if value, ok := suo.mutation.UpdatedBy(); ok {
		_spec.SetField(sample.FieldUpdatedBy, field.TypeString, value)
	}
	if suo.mutation.UpdatedByCleared() {
		_spec.ClearField(sample.FieldUpdatedBy, field.TypeString)
	}
	if suo.mutation.CreatedAtCleared() {
		_spec.ClearField(sample.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.SetField(sample.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := suo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(sample.FieldUpdatedAt, field.TypeInt64, value)
	}
	if suo.mutation.UpdatedAtCleared() {
		_spec.ClearField(sample.FieldUpdatedAt, field.TypeInt64)
	}
	_node = &Sample{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sample.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
