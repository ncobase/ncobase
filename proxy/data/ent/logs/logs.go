// Code generated by ent, DO NOT EDIT.

package logs

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the logs type in the database.
	Label = "logs"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldEndpointID holds the string denoting the endpoint_id field in the database.
	FieldEndpointID = "endpoint_id"
	// FieldRouteID holds the string denoting the route_id field in the database.
	FieldRouteID = "route_id"
	// FieldRequestMethod holds the string denoting the request_method field in the database.
	FieldRequestMethod = "request_method"
	// FieldRequestPath holds the string denoting the request_path field in the database.
	FieldRequestPath = "request_path"
	// FieldRequestHeaders holds the string denoting the request_headers field in the database.
	FieldRequestHeaders = "request_headers"
	// FieldRequestBody holds the string denoting the request_body field in the database.
	FieldRequestBody = "request_body"
	// FieldStatusCode holds the string denoting the status_code field in the database.
	FieldStatusCode = "status_code"
	// FieldResponseHeaders holds the string denoting the response_headers field in the database.
	FieldResponseHeaders = "response_headers"
	// FieldResponseBody holds the string denoting the response_body field in the database.
	FieldResponseBody = "response_body"
	// FieldDuration holds the string denoting the duration field in the database.
	FieldDuration = "duration"
	// FieldError holds the string denoting the error field in the database.
	FieldError = "error"
	// FieldClientIP holds the string denoting the client_ip field in the database.
	FieldClientIP = "client_ip"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// Table holds the table name of the logs in the database.
	Table = "ncse_tbp_log"
)

// Columns holds all SQL columns for logs fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldEndpointID,
	FieldRouteID,
	FieldRequestMethod,
	FieldRequestPath,
	FieldRequestHeaders,
	FieldRequestBody,
	FieldStatusCode,
	FieldResponseHeaders,
	FieldResponseBody,
	FieldDuration,
	FieldError,
	FieldClientIP,
	FieldUserID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() int64
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() int64
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() int64
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)

// OrderOption defines the ordering options for the Logs queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByEndpointID orders the results by the endpoint_id field.
func ByEndpointID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndpointID, opts...).ToFunc()
}

// ByRouteID orders the results by the route_id field.
func ByRouteID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRouteID, opts...).ToFunc()
}

// ByRequestMethod orders the results by the request_method field.
func ByRequestMethod(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRequestMethod, opts...).ToFunc()
}

// ByRequestPath orders the results by the request_path field.
func ByRequestPath(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRequestPath, opts...).ToFunc()
}

// ByRequestHeaders orders the results by the request_headers field.
func ByRequestHeaders(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRequestHeaders, opts...).ToFunc()
}

// ByRequestBody orders the results by the request_body field.
func ByRequestBody(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRequestBody, opts...).ToFunc()
}

// ByStatusCode orders the results by the status_code field.
func ByStatusCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatusCode, opts...).ToFunc()
}

// ByResponseHeaders orders the results by the response_headers field.
func ByResponseHeaders(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResponseHeaders, opts...).ToFunc()
}

// ByResponseBody orders the results by the response_body field.
func ByResponseBody(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResponseBody, opts...).ToFunc()
}

// ByDuration orders the results by the duration field.
func ByDuration(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDuration, opts...).ToFunc()
}

// ByError orders the results by the error field.
func ByError(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldError, opts...).ToFunc()
}

// ByClientIP orders the results by the client_ip field.
func ByClientIP(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClientIP, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}
