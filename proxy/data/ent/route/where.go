// Code generated by ent, DO NOT EDIT.

package route

import (
	"ncobase/proxy/data/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Route {
	return predicate.Route(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Route {
	return predicate.Route(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Route {
	return predicate.Route(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Route {
	return predicate.Route(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Route {
	return predicate.Route(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Route {
	return predicate.Route(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Route {
	return predicate.Route(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Route {
	return predicate.Route(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Route {
	return predicate.Route(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Route {
	return predicate.Route(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Route {
	return predicate.Route(sql.FieldContainsFold(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Route {
	return predicate.Route(sql.FieldEQ(FieldName, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Route {
	return predicate.Route(sql.FieldEQ(FieldDescription, v))
}

// Disabled applies equality check predicate on the "disabled" field. It's identical to DisabledEQ.
func Disabled(v bool) predicate.Route {
	return predicate.Route(sql.FieldEQ(FieldDisabled, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v string) predicate.Route {
	return predicate.Route(sql.FieldEQ(FieldCreatedBy, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v string) predicate.Route {
	return predicate.Route(sql.FieldEQ(FieldUpdatedBy, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v int64) predicate.Route {
	return predicate.Route(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v int64) predicate.Route {
	return predicate.Route(sql.FieldEQ(FieldUpdatedAt, v))
}

// EndpointID applies equality check predicate on the "endpoint_id" field. It's identical to EndpointIDEQ.
func EndpointID(v string) predicate.Route {
	return predicate.Route(sql.FieldEQ(FieldEndpointID, v))
}

// PathPattern applies equality check predicate on the "path_pattern" field. It's identical to PathPatternEQ.
func PathPattern(v string) predicate.Route {
	return predicate.Route(sql.FieldEQ(FieldPathPattern, v))
}

// TargetPath applies equality check predicate on the "target_path" field. It's identical to TargetPathEQ.
func TargetPath(v string) predicate.Route {
	return predicate.Route(sql.FieldEQ(FieldTargetPath, v))
}

// Method applies equality check predicate on the "method" field. It's identical to MethodEQ.
func Method(v string) predicate.Route {
	return predicate.Route(sql.FieldEQ(FieldMethod, v))
}

// InputTransformerID applies equality check predicate on the "input_transformer_id" field. It's identical to InputTransformerIDEQ.
func InputTransformerID(v string) predicate.Route {
	return predicate.Route(sql.FieldEQ(FieldInputTransformerID, v))
}

// OutputTransformerID applies equality check predicate on the "output_transformer_id" field. It's identical to OutputTransformerIDEQ.
func OutputTransformerID(v string) predicate.Route {
	return predicate.Route(sql.FieldEQ(FieldOutputTransformerID, v))
}

// CacheEnabled applies equality check predicate on the "cache_enabled" field. It's identical to CacheEnabledEQ.
func CacheEnabled(v bool) predicate.Route {
	return predicate.Route(sql.FieldEQ(FieldCacheEnabled, v))
}

// CacheTTL applies equality check predicate on the "cache_ttl" field. It's identical to CacheTTLEQ.
func CacheTTL(v int) predicate.Route {
	return predicate.Route(sql.FieldEQ(FieldCacheTTL, v))
}

// RateLimit applies equality check predicate on the "rate_limit" field. It's identical to RateLimitEQ.
func RateLimit(v string) predicate.Route {
	return predicate.Route(sql.FieldEQ(FieldRateLimit, v))
}

// StripAuthHeader applies equality check predicate on the "strip_auth_header" field. It's identical to StripAuthHeaderEQ.
func StripAuthHeader(v bool) predicate.Route {
	return predicate.Route(sql.FieldEQ(FieldStripAuthHeader, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Route {
	return predicate.Route(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Route {
	return predicate.Route(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Route {
	return predicate.Route(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Route {
	return predicate.Route(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Route {
	return predicate.Route(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Route {
	return predicate.Route(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Route {
	return predicate.Route(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Route {
	return predicate.Route(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Route {
	return predicate.Route(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Route {
	return predicate.Route(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Route {
	return predicate.Route(sql.FieldHasSuffix(FieldName, v))
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.Route {
	return predicate.Route(sql.FieldIsNull(FieldName))
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.Route {
	return predicate.Route(sql.FieldNotNull(FieldName))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Route {
	return predicate.Route(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Route {
	return predicate.Route(sql.FieldContainsFold(FieldName, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Route {
	return predicate.Route(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Route {
	return predicate.Route(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Route {
	return predicate.Route(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Route {
	return predicate.Route(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Route {
	return predicate.Route(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Route {
	return predicate.Route(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Route {
	return predicate.Route(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Route {
	return predicate.Route(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Route {
	return predicate.Route(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Route {
	return predicate.Route(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Route {
	return predicate.Route(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Route {
	return predicate.Route(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Route {
	return predicate.Route(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Route {
	return predicate.Route(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Route {
	return predicate.Route(sql.FieldContainsFold(FieldDescription, v))
}

// DisabledEQ applies the EQ predicate on the "disabled" field.
func DisabledEQ(v bool) predicate.Route {
	return predicate.Route(sql.FieldEQ(FieldDisabled, v))
}

// DisabledNEQ applies the NEQ predicate on the "disabled" field.
func DisabledNEQ(v bool) predicate.Route {
	return predicate.Route(sql.FieldNEQ(FieldDisabled, v))
}

// DisabledIsNil applies the IsNil predicate on the "disabled" field.
func DisabledIsNil() predicate.Route {
	return predicate.Route(sql.FieldIsNull(FieldDisabled))
}

// DisabledNotNil applies the NotNil predicate on the "disabled" field.
func DisabledNotNil() predicate.Route {
	return predicate.Route(sql.FieldNotNull(FieldDisabled))
}

// ExtrasIsNil applies the IsNil predicate on the "extras" field.
func ExtrasIsNil() predicate.Route {
	return predicate.Route(sql.FieldIsNull(FieldExtras))
}

// ExtrasNotNil applies the NotNil predicate on the "extras" field.
func ExtrasNotNil() predicate.Route {
	return predicate.Route(sql.FieldNotNull(FieldExtras))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v string) predicate.Route {
	return predicate.Route(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v string) predicate.Route {
	return predicate.Route(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...string) predicate.Route {
	return predicate.Route(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...string) predicate.Route {
	return predicate.Route(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v string) predicate.Route {
	return predicate.Route(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v string) predicate.Route {
	return predicate.Route(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v string) predicate.Route {
	return predicate.Route(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v string) predicate.Route {
	return predicate.Route(sql.FieldLTE(FieldCreatedBy, v))
}

// CreatedByContains applies the Contains predicate on the "created_by" field.
func CreatedByContains(v string) predicate.Route {
	return predicate.Route(sql.FieldContains(FieldCreatedBy, v))
}

// CreatedByHasPrefix applies the HasPrefix predicate on the "created_by" field.
func CreatedByHasPrefix(v string) predicate.Route {
	return predicate.Route(sql.FieldHasPrefix(FieldCreatedBy, v))
}

// CreatedByHasSuffix applies the HasSuffix predicate on the "created_by" field.
func CreatedByHasSuffix(v string) predicate.Route {
	return predicate.Route(sql.FieldHasSuffix(FieldCreatedBy, v))
}

// CreatedByIsNil applies the IsNil predicate on the "created_by" field.
func CreatedByIsNil() predicate.Route {
	return predicate.Route(sql.FieldIsNull(FieldCreatedBy))
}

// CreatedByNotNil applies the NotNil predicate on the "created_by" field.
func CreatedByNotNil() predicate.Route {
	return predicate.Route(sql.FieldNotNull(FieldCreatedBy))
}

// CreatedByEqualFold applies the EqualFold predicate on the "created_by" field.
func CreatedByEqualFold(v string) predicate.Route {
	return predicate.Route(sql.FieldEqualFold(FieldCreatedBy, v))
}

// CreatedByContainsFold applies the ContainsFold predicate on the "created_by" field.
func CreatedByContainsFold(v string) predicate.Route {
	return predicate.Route(sql.FieldContainsFold(FieldCreatedBy, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v string) predicate.Route {
	return predicate.Route(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v string) predicate.Route {
	return predicate.Route(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...string) predicate.Route {
	return predicate.Route(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...string) predicate.Route {
	return predicate.Route(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v string) predicate.Route {
	return predicate.Route(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v string) predicate.Route {
	return predicate.Route(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v string) predicate.Route {
	return predicate.Route(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v string) predicate.Route {
	return predicate.Route(sql.FieldLTE(FieldUpdatedBy, v))
}

// UpdatedByContains applies the Contains predicate on the "updated_by" field.
func UpdatedByContains(v string) predicate.Route {
	return predicate.Route(sql.FieldContains(FieldUpdatedBy, v))
}

// UpdatedByHasPrefix applies the HasPrefix predicate on the "updated_by" field.
func UpdatedByHasPrefix(v string) predicate.Route {
	return predicate.Route(sql.FieldHasPrefix(FieldUpdatedBy, v))
}

// UpdatedByHasSuffix applies the HasSuffix predicate on the "updated_by" field.
func UpdatedByHasSuffix(v string) predicate.Route {
	return predicate.Route(sql.FieldHasSuffix(FieldUpdatedBy, v))
}

// UpdatedByIsNil applies the IsNil predicate on the "updated_by" field.
func UpdatedByIsNil() predicate.Route {
	return predicate.Route(sql.FieldIsNull(FieldUpdatedBy))
}

// UpdatedByNotNil applies the NotNil predicate on the "updated_by" field.
func UpdatedByNotNil() predicate.Route {
	return predicate.Route(sql.FieldNotNull(FieldUpdatedBy))
}

// UpdatedByEqualFold applies the EqualFold predicate on the "updated_by" field.
func UpdatedByEqualFold(v string) predicate.Route {
	return predicate.Route(sql.FieldEqualFold(FieldUpdatedBy, v))
}

// UpdatedByContainsFold applies the ContainsFold predicate on the "updated_by" field.
func UpdatedByContainsFold(v string) predicate.Route {
	return predicate.Route(sql.FieldContainsFold(FieldUpdatedBy, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v int64) predicate.Route {
	return predicate.Route(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v int64) predicate.Route {
	return predicate.Route(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...int64) predicate.Route {
	return predicate.Route(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...int64) predicate.Route {
	return predicate.Route(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v int64) predicate.Route {
	return predicate.Route(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v int64) predicate.Route {
	return predicate.Route(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v int64) predicate.Route {
	return predicate.Route(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v int64) predicate.Route {
	return predicate.Route(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.Route {
	return predicate.Route(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.Route {
	return predicate.Route(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v int64) predicate.Route {
	return predicate.Route(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v int64) predicate.Route {
	return predicate.Route(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...int64) predicate.Route {
	return predicate.Route(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...int64) predicate.Route {
	return predicate.Route(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v int64) predicate.Route {
	return predicate.Route(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v int64) predicate.Route {
	return predicate.Route(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v int64) predicate.Route {
	return predicate.Route(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v int64) predicate.Route {
	return predicate.Route(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.Route {
	return predicate.Route(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.Route {
	return predicate.Route(sql.FieldNotNull(FieldUpdatedAt))
}

// EndpointIDEQ applies the EQ predicate on the "endpoint_id" field.
func EndpointIDEQ(v string) predicate.Route {
	return predicate.Route(sql.FieldEQ(FieldEndpointID, v))
}

// EndpointIDNEQ applies the NEQ predicate on the "endpoint_id" field.
func EndpointIDNEQ(v string) predicate.Route {
	return predicate.Route(sql.FieldNEQ(FieldEndpointID, v))
}

// EndpointIDIn applies the In predicate on the "endpoint_id" field.
func EndpointIDIn(vs ...string) predicate.Route {
	return predicate.Route(sql.FieldIn(FieldEndpointID, vs...))
}

// EndpointIDNotIn applies the NotIn predicate on the "endpoint_id" field.
func EndpointIDNotIn(vs ...string) predicate.Route {
	return predicate.Route(sql.FieldNotIn(FieldEndpointID, vs...))
}

// EndpointIDGT applies the GT predicate on the "endpoint_id" field.
func EndpointIDGT(v string) predicate.Route {
	return predicate.Route(sql.FieldGT(FieldEndpointID, v))
}

// EndpointIDGTE applies the GTE predicate on the "endpoint_id" field.
func EndpointIDGTE(v string) predicate.Route {
	return predicate.Route(sql.FieldGTE(FieldEndpointID, v))
}

// EndpointIDLT applies the LT predicate on the "endpoint_id" field.
func EndpointIDLT(v string) predicate.Route {
	return predicate.Route(sql.FieldLT(FieldEndpointID, v))
}

// EndpointIDLTE applies the LTE predicate on the "endpoint_id" field.
func EndpointIDLTE(v string) predicate.Route {
	return predicate.Route(sql.FieldLTE(FieldEndpointID, v))
}

// EndpointIDContains applies the Contains predicate on the "endpoint_id" field.
func EndpointIDContains(v string) predicate.Route {
	return predicate.Route(sql.FieldContains(FieldEndpointID, v))
}

// EndpointIDHasPrefix applies the HasPrefix predicate on the "endpoint_id" field.
func EndpointIDHasPrefix(v string) predicate.Route {
	return predicate.Route(sql.FieldHasPrefix(FieldEndpointID, v))
}

// EndpointIDHasSuffix applies the HasSuffix predicate on the "endpoint_id" field.
func EndpointIDHasSuffix(v string) predicate.Route {
	return predicate.Route(sql.FieldHasSuffix(FieldEndpointID, v))
}

// EndpointIDEqualFold applies the EqualFold predicate on the "endpoint_id" field.
func EndpointIDEqualFold(v string) predicate.Route {
	return predicate.Route(sql.FieldEqualFold(FieldEndpointID, v))
}

// EndpointIDContainsFold applies the ContainsFold predicate on the "endpoint_id" field.
func EndpointIDContainsFold(v string) predicate.Route {
	return predicate.Route(sql.FieldContainsFold(FieldEndpointID, v))
}

// PathPatternEQ applies the EQ predicate on the "path_pattern" field.
func PathPatternEQ(v string) predicate.Route {
	return predicate.Route(sql.FieldEQ(FieldPathPattern, v))
}

// PathPatternNEQ applies the NEQ predicate on the "path_pattern" field.
func PathPatternNEQ(v string) predicate.Route {
	return predicate.Route(sql.FieldNEQ(FieldPathPattern, v))
}

// PathPatternIn applies the In predicate on the "path_pattern" field.
func PathPatternIn(vs ...string) predicate.Route {
	return predicate.Route(sql.FieldIn(FieldPathPattern, vs...))
}

// PathPatternNotIn applies the NotIn predicate on the "path_pattern" field.
func PathPatternNotIn(vs ...string) predicate.Route {
	return predicate.Route(sql.FieldNotIn(FieldPathPattern, vs...))
}

// PathPatternGT applies the GT predicate on the "path_pattern" field.
func PathPatternGT(v string) predicate.Route {
	return predicate.Route(sql.FieldGT(FieldPathPattern, v))
}

// PathPatternGTE applies the GTE predicate on the "path_pattern" field.
func PathPatternGTE(v string) predicate.Route {
	return predicate.Route(sql.FieldGTE(FieldPathPattern, v))
}

// PathPatternLT applies the LT predicate on the "path_pattern" field.
func PathPatternLT(v string) predicate.Route {
	return predicate.Route(sql.FieldLT(FieldPathPattern, v))
}

// PathPatternLTE applies the LTE predicate on the "path_pattern" field.
func PathPatternLTE(v string) predicate.Route {
	return predicate.Route(sql.FieldLTE(FieldPathPattern, v))
}

// PathPatternContains applies the Contains predicate on the "path_pattern" field.
func PathPatternContains(v string) predicate.Route {
	return predicate.Route(sql.FieldContains(FieldPathPattern, v))
}

// PathPatternHasPrefix applies the HasPrefix predicate on the "path_pattern" field.
func PathPatternHasPrefix(v string) predicate.Route {
	return predicate.Route(sql.FieldHasPrefix(FieldPathPattern, v))
}

// PathPatternHasSuffix applies the HasSuffix predicate on the "path_pattern" field.
func PathPatternHasSuffix(v string) predicate.Route {
	return predicate.Route(sql.FieldHasSuffix(FieldPathPattern, v))
}

// PathPatternEqualFold applies the EqualFold predicate on the "path_pattern" field.
func PathPatternEqualFold(v string) predicate.Route {
	return predicate.Route(sql.FieldEqualFold(FieldPathPattern, v))
}

// PathPatternContainsFold applies the ContainsFold predicate on the "path_pattern" field.
func PathPatternContainsFold(v string) predicate.Route {
	return predicate.Route(sql.FieldContainsFold(FieldPathPattern, v))
}

// TargetPathEQ applies the EQ predicate on the "target_path" field.
func TargetPathEQ(v string) predicate.Route {
	return predicate.Route(sql.FieldEQ(FieldTargetPath, v))
}

// TargetPathNEQ applies the NEQ predicate on the "target_path" field.
func TargetPathNEQ(v string) predicate.Route {
	return predicate.Route(sql.FieldNEQ(FieldTargetPath, v))
}

// TargetPathIn applies the In predicate on the "target_path" field.
func TargetPathIn(vs ...string) predicate.Route {
	return predicate.Route(sql.FieldIn(FieldTargetPath, vs...))
}

// TargetPathNotIn applies the NotIn predicate on the "target_path" field.
func TargetPathNotIn(vs ...string) predicate.Route {
	return predicate.Route(sql.FieldNotIn(FieldTargetPath, vs...))
}

// TargetPathGT applies the GT predicate on the "target_path" field.
func TargetPathGT(v string) predicate.Route {
	return predicate.Route(sql.FieldGT(FieldTargetPath, v))
}

// TargetPathGTE applies the GTE predicate on the "target_path" field.
func TargetPathGTE(v string) predicate.Route {
	return predicate.Route(sql.FieldGTE(FieldTargetPath, v))
}

// TargetPathLT applies the LT predicate on the "target_path" field.
func TargetPathLT(v string) predicate.Route {
	return predicate.Route(sql.FieldLT(FieldTargetPath, v))
}

// TargetPathLTE applies the LTE predicate on the "target_path" field.
func TargetPathLTE(v string) predicate.Route {
	return predicate.Route(sql.FieldLTE(FieldTargetPath, v))
}

// TargetPathContains applies the Contains predicate on the "target_path" field.
func TargetPathContains(v string) predicate.Route {
	return predicate.Route(sql.FieldContains(FieldTargetPath, v))
}

// TargetPathHasPrefix applies the HasPrefix predicate on the "target_path" field.
func TargetPathHasPrefix(v string) predicate.Route {
	return predicate.Route(sql.FieldHasPrefix(FieldTargetPath, v))
}

// TargetPathHasSuffix applies the HasSuffix predicate on the "target_path" field.
func TargetPathHasSuffix(v string) predicate.Route {
	return predicate.Route(sql.FieldHasSuffix(FieldTargetPath, v))
}

// TargetPathEqualFold applies the EqualFold predicate on the "target_path" field.
func TargetPathEqualFold(v string) predicate.Route {
	return predicate.Route(sql.FieldEqualFold(FieldTargetPath, v))
}

// TargetPathContainsFold applies the ContainsFold predicate on the "target_path" field.
func TargetPathContainsFold(v string) predicate.Route {
	return predicate.Route(sql.FieldContainsFold(FieldTargetPath, v))
}

// MethodEQ applies the EQ predicate on the "method" field.
func MethodEQ(v string) predicate.Route {
	return predicate.Route(sql.FieldEQ(FieldMethod, v))
}

// MethodNEQ applies the NEQ predicate on the "method" field.
func MethodNEQ(v string) predicate.Route {
	return predicate.Route(sql.FieldNEQ(FieldMethod, v))
}

// MethodIn applies the In predicate on the "method" field.
func MethodIn(vs ...string) predicate.Route {
	return predicate.Route(sql.FieldIn(FieldMethod, vs...))
}

// MethodNotIn applies the NotIn predicate on the "method" field.
func MethodNotIn(vs ...string) predicate.Route {
	return predicate.Route(sql.FieldNotIn(FieldMethod, vs...))
}

// MethodGT applies the GT predicate on the "method" field.
func MethodGT(v string) predicate.Route {
	return predicate.Route(sql.FieldGT(FieldMethod, v))
}

// MethodGTE applies the GTE predicate on the "method" field.
func MethodGTE(v string) predicate.Route {
	return predicate.Route(sql.FieldGTE(FieldMethod, v))
}

// MethodLT applies the LT predicate on the "method" field.
func MethodLT(v string) predicate.Route {
	return predicate.Route(sql.FieldLT(FieldMethod, v))
}

// MethodLTE applies the LTE predicate on the "method" field.
func MethodLTE(v string) predicate.Route {
	return predicate.Route(sql.FieldLTE(FieldMethod, v))
}

// MethodContains applies the Contains predicate on the "method" field.
func MethodContains(v string) predicate.Route {
	return predicate.Route(sql.FieldContains(FieldMethod, v))
}

// MethodHasPrefix applies the HasPrefix predicate on the "method" field.
func MethodHasPrefix(v string) predicate.Route {
	return predicate.Route(sql.FieldHasPrefix(FieldMethod, v))
}

// MethodHasSuffix applies the HasSuffix predicate on the "method" field.
func MethodHasSuffix(v string) predicate.Route {
	return predicate.Route(sql.FieldHasSuffix(FieldMethod, v))
}

// MethodEqualFold applies the EqualFold predicate on the "method" field.
func MethodEqualFold(v string) predicate.Route {
	return predicate.Route(sql.FieldEqualFold(FieldMethod, v))
}

// MethodContainsFold applies the ContainsFold predicate on the "method" field.
func MethodContainsFold(v string) predicate.Route {
	return predicate.Route(sql.FieldContainsFold(FieldMethod, v))
}

// InputTransformerIDEQ applies the EQ predicate on the "input_transformer_id" field.
func InputTransformerIDEQ(v string) predicate.Route {
	return predicate.Route(sql.FieldEQ(FieldInputTransformerID, v))
}

// InputTransformerIDNEQ applies the NEQ predicate on the "input_transformer_id" field.
func InputTransformerIDNEQ(v string) predicate.Route {
	return predicate.Route(sql.FieldNEQ(FieldInputTransformerID, v))
}

// InputTransformerIDIn applies the In predicate on the "input_transformer_id" field.
func InputTransformerIDIn(vs ...string) predicate.Route {
	return predicate.Route(sql.FieldIn(FieldInputTransformerID, vs...))
}

// InputTransformerIDNotIn applies the NotIn predicate on the "input_transformer_id" field.
func InputTransformerIDNotIn(vs ...string) predicate.Route {
	return predicate.Route(sql.FieldNotIn(FieldInputTransformerID, vs...))
}

// InputTransformerIDGT applies the GT predicate on the "input_transformer_id" field.
func InputTransformerIDGT(v string) predicate.Route {
	return predicate.Route(sql.FieldGT(FieldInputTransformerID, v))
}

// InputTransformerIDGTE applies the GTE predicate on the "input_transformer_id" field.
func InputTransformerIDGTE(v string) predicate.Route {
	return predicate.Route(sql.FieldGTE(FieldInputTransformerID, v))
}

// InputTransformerIDLT applies the LT predicate on the "input_transformer_id" field.
func InputTransformerIDLT(v string) predicate.Route {
	return predicate.Route(sql.FieldLT(FieldInputTransformerID, v))
}

// InputTransformerIDLTE applies the LTE predicate on the "input_transformer_id" field.
func InputTransformerIDLTE(v string) predicate.Route {
	return predicate.Route(sql.FieldLTE(FieldInputTransformerID, v))
}

// InputTransformerIDContains applies the Contains predicate on the "input_transformer_id" field.
func InputTransformerIDContains(v string) predicate.Route {
	return predicate.Route(sql.FieldContains(FieldInputTransformerID, v))
}

// InputTransformerIDHasPrefix applies the HasPrefix predicate on the "input_transformer_id" field.
func InputTransformerIDHasPrefix(v string) predicate.Route {
	return predicate.Route(sql.FieldHasPrefix(FieldInputTransformerID, v))
}

// InputTransformerIDHasSuffix applies the HasSuffix predicate on the "input_transformer_id" field.
func InputTransformerIDHasSuffix(v string) predicate.Route {
	return predicate.Route(sql.FieldHasSuffix(FieldInputTransformerID, v))
}

// InputTransformerIDIsNil applies the IsNil predicate on the "input_transformer_id" field.
func InputTransformerIDIsNil() predicate.Route {
	return predicate.Route(sql.FieldIsNull(FieldInputTransformerID))
}

// InputTransformerIDNotNil applies the NotNil predicate on the "input_transformer_id" field.
func InputTransformerIDNotNil() predicate.Route {
	return predicate.Route(sql.FieldNotNull(FieldInputTransformerID))
}

// InputTransformerIDEqualFold applies the EqualFold predicate on the "input_transformer_id" field.
func InputTransformerIDEqualFold(v string) predicate.Route {
	return predicate.Route(sql.FieldEqualFold(FieldInputTransformerID, v))
}

// InputTransformerIDContainsFold applies the ContainsFold predicate on the "input_transformer_id" field.
func InputTransformerIDContainsFold(v string) predicate.Route {
	return predicate.Route(sql.FieldContainsFold(FieldInputTransformerID, v))
}

// OutputTransformerIDEQ applies the EQ predicate on the "output_transformer_id" field.
func OutputTransformerIDEQ(v string) predicate.Route {
	return predicate.Route(sql.FieldEQ(FieldOutputTransformerID, v))
}

// OutputTransformerIDNEQ applies the NEQ predicate on the "output_transformer_id" field.
func OutputTransformerIDNEQ(v string) predicate.Route {
	return predicate.Route(sql.FieldNEQ(FieldOutputTransformerID, v))
}

// OutputTransformerIDIn applies the In predicate on the "output_transformer_id" field.
func OutputTransformerIDIn(vs ...string) predicate.Route {
	return predicate.Route(sql.FieldIn(FieldOutputTransformerID, vs...))
}

// OutputTransformerIDNotIn applies the NotIn predicate on the "output_transformer_id" field.
func OutputTransformerIDNotIn(vs ...string) predicate.Route {
	return predicate.Route(sql.FieldNotIn(FieldOutputTransformerID, vs...))
}

// OutputTransformerIDGT applies the GT predicate on the "output_transformer_id" field.
func OutputTransformerIDGT(v string) predicate.Route {
	return predicate.Route(sql.FieldGT(FieldOutputTransformerID, v))
}

// OutputTransformerIDGTE applies the GTE predicate on the "output_transformer_id" field.
func OutputTransformerIDGTE(v string) predicate.Route {
	return predicate.Route(sql.FieldGTE(FieldOutputTransformerID, v))
}

// OutputTransformerIDLT applies the LT predicate on the "output_transformer_id" field.
func OutputTransformerIDLT(v string) predicate.Route {
	return predicate.Route(sql.FieldLT(FieldOutputTransformerID, v))
}

// OutputTransformerIDLTE applies the LTE predicate on the "output_transformer_id" field.
func OutputTransformerIDLTE(v string) predicate.Route {
	return predicate.Route(sql.FieldLTE(FieldOutputTransformerID, v))
}

// OutputTransformerIDContains applies the Contains predicate on the "output_transformer_id" field.
func OutputTransformerIDContains(v string) predicate.Route {
	return predicate.Route(sql.FieldContains(FieldOutputTransformerID, v))
}

// OutputTransformerIDHasPrefix applies the HasPrefix predicate on the "output_transformer_id" field.
func OutputTransformerIDHasPrefix(v string) predicate.Route {
	return predicate.Route(sql.FieldHasPrefix(FieldOutputTransformerID, v))
}

// OutputTransformerIDHasSuffix applies the HasSuffix predicate on the "output_transformer_id" field.
func OutputTransformerIDHasSuffix(v string) predicate.Route {
	return predicate.Route(sql.FieldHasSuffix(FieldOutputTransformerID, v))
}

// OutputTransformerIDIsNil applies the IsNil predicate on the "output_transformer_id" field.
func OutputTransformerIDIsNil() predicate.Route {
	return predicate.Route(sql.FieldIsNull(FieldOutputTransformerID))
}

// OutputTransformerIDNotNil applies the NotNil predicate on the "output_transformer_id" field.
func OutputTransformerIDNotNil() predicate.Route {
	return predicate.Route(sql.FieldNotNull(FieldOutputTransformerID))
}

// OutputTransformerIDEqualFold applies the EqualFold predicate on the "output_transformer_id" field.
func OutputTransformerIDEqualFold(v string) predicate.Route {
	return predicate.Route(sql.FieldEqualFold(FieldOutputTransformerID, v))
}

// OutputTransformerIDContainsFold applies the ContainsFold predicate on the "output_transformer_id" field.
func OutputTransformerIDContainsFold(v string) predicate.Route {
	return predicate.Route(sql.FieldContainsFold(FieldOutputTransformerID, v))
}

// CacheEnabledEQ applies the EQ predicate on the "cache_enabled" field.
func CacheEnabledEQ(v bool) predicate.Route {
	return predicate.Route(sql.FieldEQ(FieldCacheEnabled, v))
}

// CacheEnabledNEQ applies the NEQ predicate on the "cache_enabled" field.
func CacheEnabledNEQ(v bool) predicate.Route {
	return predicate.Route(sql.FieldNEQ(FieldCacheEnabled, v))
}

// CacheTTLEQ applies the EQ predicate on the "cache_ttl" field.
func CacheTTLEQ(v int) predicate.Route {
	return predicate.Route(sql.FieldEQ(FieldCacheTTL, v))
}

// CacheTTLNEQ applies the NEQ predicate on the "cache_ttl" field.
func CacheTTLNEQ(v int) predicate.Route {
	return predicate.Route(sql.FieldNEQ(FieldCacheTTL, v))
}

// CacheTTLIn applies the In predicate on the "cache_ttl" field.
func CacheTTLIn(vs ...int) predicate.Route {
	return predicate.Route(sql.FieldIn(FieldCacheTTL, vs...))
}

// CacheTTLNotIn applies the NotIn predicate on the "cache_ttl" field.
func CacheTTLNotIn(vs ...int) predicate.Route {
	return predicate.Route(sql.FieldNotIn(FieldCacheTTL, vs...))
}

// CacheTTLGT applies the GT predicate on the "cache_ttl" field.
func CacheTTLGT(v int) predicate.Route {
	return predicate.Route(sql.FieldGT(FieldCacheTTL, v))
}

// CacheTTLGTE applies the GTE predicate on the "cache_ttl" field.
func CacheTTLGTE(v int) predicate.Route {
	return predicate.Route(sql.FieldGTE(FieldCacheTTL, v))
}

// CacheTTLLT applies the LT predicate on the "cache_ttl" field.
func CacheTTLLT(v int) predicate.Route {
	return predicate.Route(sql.FieldLT(FieldCacheTTL, v))
}

// CacheTTLLTE applies the LTE predicate on the "cache_ttl" field.
func CacheTTLLTE(v int) predicate.Route {
	return predicate.Route(sql.FieldLTE(FieldCacheTTL, v))
}

// RateLimitEQ applies the EQ predicate on the "rate_limit" field.
func RateLimitEQ(v string) predicate.Route {
	return predicate.Route(sql.FieldEQ(FieldRateLimit, v))
}

// RateLimitNEQ applies the NEQ predicate on the "rate_limit" field.
func RateLimitNEQ(v string) predicate.Route {
	return predicate.Route(sql.FieldNEQ(FieldRateLimit, v))
}

// RateLimitIn applies the In predicate on the "rate_limit" field.
func RateLimitIn(vs ...string) predicate.Route {
	return predicate.Route(sql.FieldIn(FieldRateLimit, vs...))
}

// RateLimitNotIn applies the NotIn predicate on the "rate_limit" field.
func RateLimitNotIn(vs ...string) predicate.Route {
	return predicate.Route(sql.FieldNotIn(FieldRateLimit, vs...))
}

// RateLimitGT applies the GT predicate on the "rate_limit" field.
func RateLimitGT(v string) predicate.Route {
	return predicate.Route(sql.FieldGT(FieldRateLimit, v))
}

// RateLimitGTE applies the GTE predicate on the "rate_limit" field.
func RateLimitGTE(v string) predicate.Route {
	return predicate.Route(sql.FieldGTE(FieldRateLimit, v))
}

// RateLimitLT applies the LT predicate on the "rate_limit" field.
func RateLimitLT(v string) predicate.Route {
	return predicate.Route(sql.FieldLT(FieldRateLimit, v))
}

// RateLimitLTE applies the LTE predicate on the "rate_limit" field.
func RateLimitLTE(v string) predicate.Route {
	return predicate.Route(sql.FieldLTE(FieldRateLimit, v))
}

// RateLimitContains applies the Contains predicate on the "rate_limit" field.
func RateLimitContains(v string) predicate.Route {
	return predicate.Route(sql.FieldContains(FieldRateLimit, v))
}

// RateLimitHasPrefix applies the HasPrefix predicate on the "rate_limit" field.
func RateLimitHasPrefix(v string) predicate.Route {
	return predicate.Route(sql.FieldHasPrefix(FieldRateLimit, v))
}

// RateLimitHasSuffix applies the HasSuffix predicate on the "rate_limit" field.
func RateLimitHasSuffix(v string) predicate.Route {
	return predicate.Route(sql.FieldHasSuffix(FieldRateLimit, v))
}

// RateLimitIsNil applies the IsNil predicate on the "rate_limit" field.
func RateLimitIsNil() predicate.Route {
	return predicate.Route(sql.FieldIsNull(FieldRateLimit))
}

// RateLimitNotNil applies the NotNil predicate on the "rate_limit" field.
func RateLimitNotNil() predicate.Route {
	return predicate.Route(sql.FieldNotNull(FieldRateLimit))
}

// RateLimitEqualFold applies the EqualFold predicate on the "rate_limit" field.
func RateLimitEqualFold(v string) predicate.Route {
	return predicate.Route(sql.FieldEqualFold(FieldRateLimit, v))
}

// RateLimitContainsFold applies the ContainsFold predicate on the "rate_limit" field.
func RateLimitContainsFold(v string) predicate.Route {
	return predicate.Route(sql.FieldContainsFold(FieldRateLimit, v))
}

// StripAuthHeaderEQ applies the EQ predicate on the "strip_auth_header" field.
func StripAuthHeaderEQ(v bool) predicate.Route {
	return predicate.Route(sql.FieldEQ(FieldStripAuthHeader, v))
}

// StripAuthHeaderNEQ applies the NEQ predicate on the "strip_auth_header" field.
func StripAuthHeaderNEQ(v bool) predicate.Route {
	return predicate.Route(sql.FieldNEQ(FieldStripAuthHeader, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Route) predicate.Route {
	return predicate.Route(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Route) predicate.Route {
	return predicate.Route(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Route) predicate.Route {
	return predicate.Route(sql.NotPredicates(p))
}
