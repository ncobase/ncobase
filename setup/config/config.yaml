# Application name
app_name: application
# Run mode (release / debug)
run_mode: release

consul:
  address: 127.1:8500
  scheme: http
  discovery:
    default_tags:
      - "t1"
      - "t2"
    default_meta:
      env: development
      region: private-east-1
    health_check: false
    check_interval: "10s"
    timeout: "5s"

observes:
  tracer:
    endpoint:
  sentry:
    endpoint:

server:
  # Protocol type http / https
  protocol: http
  # Running domain
  domain: localhost
  # Application running address (localhost: 127.0.0.1, all addresses: 0.0.0.0)
  host: 127.1
  # Application running port
  port: 3000

extension:
  path: ./plugins
  includes:
    - a
    - b
    - c
  excludes:
    - d
  hot_reload: true

frontend:
  sign_in_url: http://localhost:3000/login
  sign_up_url: http://localhost:3000/register

data:
  # Environment, support development / staging / production
  environment:
  database:
    # global configuration
    migrate: true  # migrate only support master
    strategy: round_robin  # slave load balance strategy, round_robin / random / weight
    max_retry: 3  # max retry
    # master configuration
    master:
      driver: postgres
      # mysql: user:password@tcp(127.0.0.1:3306)/db?params
      # postgres: host=127.0.0.1 port=5432 dbname=db user=user password=password sslmode=disable TimeZone=Asia/Shanghai
      # sqlite3: file:./data.db?cache=shared&&_fk=1
      source: postgres://user:password@127.0.0.1:5432/db?sslmode=disable
      max_open_conn: 32  # max open connections
      max_life_time: 7200  # max life time
      max_idle_conn: 8  # max idle connections
      logging: false  # logging
      # slave configuration, support multiple
      slaves:
        - driver:
          source:
          max_open_conn: 64
          max_life_time: 7200
          max_idle_conn: 16
          logging: false
          width: 1
        - driver:
          source:
          max_open_conn: 64
          max_life_time: 7200
          max_idle_conn: 16
          logging: false
          width: 1
        - driver:
          source:
          max_open_conn: 64
          max_life_time: 7200
          max_idle_conn: 16
          logging: false
          width: 1
  redis:
    addr: 127.0.0.1:6378
    password:
    read_timeout: 0.4s
    write_timeout: 0.6s
    dial_timeout: 1s
  meilisearch:
    host:
    api_key:
  elasticsearch:
    addresses:
    username:
    password:
  mongodb:
    strategy: round_robin  # slave load balance strategy, round_robin / random / weight
    max_retry: 3  # max retry
    master:
      uri: mongodb://user:pass@localhost:27017/dbname?authSource=admin&maxPoolSize=100&minPoolSize=10
      logging: false
    slaves:
      - uri: mongodb://user:pass@localhost:27018/dbname?authSource=admin&maxPoolSize=200&minPoolSize=20
        logging: false
        weight: 1
      - uri: mongodb://user:pass@localhost:27019/dbname?authSource=admin&maxPoolSize=200&minPoolSize=20
        logging: false
        weight: 1
  neo4j:
    uri:
    username:
    password:
  rabbitmq:
    url:
    username:
    password:
    vhost:
    connection_timeout: 10s
    heartbeat_interval: 15s
  kafka:
    brokers: [ ]
    client_id:
    consumer_group:
    topic:
    read_timeout: 10s
    write_timeout: 10s
    connect_timeout: 10s

auth:
  jwt:
    secret:  # openssl passwd -stdin < <(echo) | base64 | shasum / nanoid(35)
    expire:  # expiration time in hours
  casbin:
    model: |
      [request_definition]
      r = sub, dom, obj, act, v4, v5

      [policy_definition]
      p = sub, dom, obj, act, v4, v5

      [role_definition]
      g = _, _, _

      [policy_effect]
      e = some(where (p.eft == allow))

      [matchers]
      m = (g(r.sub, p.sub, r.dom) && r.dom == p.dom && keyMatch(r.obj, p.obj) && keyMatch(r.act, p.act)) || (r.sub == "super-admin" && r.dom == p.dom && keyMatch(r.obj, p.obj) && keyMatch(r.act, p.act))
  whitelist:
    - /health
    - /iam/login
    - /iam/register
    - /iam/logout
    - /iam/captcha/*
    - /static/*
    - "*swagger*"

logger:
  # Log level (1:fatal, 2:error, 3:warn, 4:info, 5:debug)
  level: 4
  # Log format (supported output formats: text/json)
  format: text
  # Log output (supported: stdout/stderr/file)
  output: stdout
  # Specify the file path for log output
  output_file: logs/access.log


storage:
  # filesystem（need to set the bucket as the storage path）/ minio / aliyun-oss / aws-s3 / azure / tencent-cos
  provider: filesystem
  bucket: uploads
  endpoint:

#  provider: minio
#  id:
#  secret:
#  region:
#  bucket:
#  endpoint:

oauth:
  github:
    id:
    secret:
    redirect_url:
  facebook:
    id:
    secret:
    redirect_url:
  google:
    client_id:
    client_secret:
    redirect_url:

email:
  # use only one of these, optional: mailgun / aliyun / netease / sendgrid / smtp / tencent_cloud
  provider: smtp
  mailgun:
    key:
    domain:
    from:
  aliyun:
    id:
    secret:
    account:
  netease:
    username:
    password:
    from:
    smtpHost:
    smtpPort:
  sendgrid:
    key:
    from:
  smtp:
    smtpHost:
    smtpPort:
    username:
    password:
    from:
  tencent_cloud:
    id:
    secret:
    from:
